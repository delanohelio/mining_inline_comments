{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5Mjg5MzI2", "number": 717, "title": "Added test cases to un-/marshall Categories from/to JSON", "bodyText": "Added the test cases\nAdded XML annotations to:\n\nThe Java bean classes\nThe Category bean generator\n\n\nGenerated the new files and updated the generator test resources\nAdded adapters for special marshalling for:\n\ngeneric Java objects, URIs, doubles\nBean references and type instances\n\n\nAdded a utility class for jaxb and one for less redundancy in the test setup\nAdded BeanTypeInstanceFactory to remove code redundancy\n\nKnown issue:\n\nReference and composed lists have to be marshalled via the bean list, because we can't add elements to the other list (see #706), this probably could be improved in the future\n\n\u26a0\ufe0f Should be merged after #706\nCloses #607", "createdAt": "2020-07-30T15:14:04Z", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717", "merged": true, "mergeCommit": {"oid": "18c440c1673e70516dbf6babb3388a9463abcfa2"}, "closed": true, "closedAt": "2020-09-16T10:19:43Z", "author": {"login": "JAmmermann-DLR"}, "timelineItems": {"totalCount": 64, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqN4xwgH2gAyNDU5Mjg5MzI2OjVmYzM1MGU3MDQ2ZWY1MWNjZDFlYjY3NWRhZmY3MWZiNTI0YWVjNzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJZtJ1AFqTQ4OTQ4MjQzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5fc350e7046ef51ccd1eb675daff71fb524aec76", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/5fc350e7046ef51ccd1eb675daff71fb524aec76", "committedDate": "2020-06-11T13:01:41Z", "message": "Implemented first test for bean marshaling - (Task #607)\n\n- Added simple test for marshaling BeanProeprtyString from and to Json\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "797fbca847fec40a87f4f1307e9f8a68c6e116d5", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/797fbca847fec40a87f4f1307e9f8a68c6e116d5", "committedDate": "2020-06-12T08:23:16Z", "message": "Implemented an Example for Marshalling CA - (Task #607)\n\n- Started Marshalling a simple CA\n- Placed JAXB Annotations into bean model.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2338b31161daf1f4a20e88483b76b2d37e0962c", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c2338b31161daf1f4a20e88483b76b2d37e0962c", "committedDate": "2020-06-12T13:46:17Z", "message": "Write a Heading here - (Task #607)\n\nPut your Message here.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31aeadcb4f63a169f410a863cb68e68f08171a28", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/31aeadcb4f63a169f410a863cb68e68f08171a28", "committedDate": "2020-06-12T17:13:47Z", "message": "Simple unmarshalling implementation - (Task #607)\n\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bfe291f31585b7960ac5bb726843a11b189ad51", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/7bfe291f31585b7960ac5bb726843a11b189ad51", "committedDate": "2020-06-15T06:24:10Z", "message": "Merge branch 'development' of https://github.com/virtualsatellite/VirtualSatellite4-Core.git into feature/task_607-Evaluate_transforming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51f4172117360b73b1a667de4083a0870306267d", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/51f4172117360b73b1a667de4083a0870306267d", "committedDate": "2020-06-15T06:25:14Z", "message": "Merge branch 'feature/task_607-Evaluate_transforming' of https://github.com/virtualsatellite/VirtualSatellite4-Core.git into feature/task_607-Evaluate_transforming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "876039c354e91b36846da1d21a333bec3ea84082", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/876039c354e91b36846da1d21a333bec3ea84082", "committedDate": "2020-06-29T09:53:35Z", "message": "Add JAXBUtility class - (Task #607)\n\nPut your Message here.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffe5116f1fa4180107c03d973674e9b6e5492964", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ffe5116f1fa4180107c03d973674e9b6e5492964", "committedDate": "2020-06-30T08:56:05Z", "message": "Add json marshalling test: TestCategoryAllPropertyTest - (Task #607)\n\nTest the correct marshalling against a test resource. The generated\nclass ATestCategoryAllProperty was manually modified for test purposes.\nIt should be generated again before merging.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78054d18235f025966e4a784f9cae72630694d78", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/78054d18235f025966e4a784f9cae72630694d78", "committedDate": "2020-06-30T13:31:49Z", "message": "Start test array marshaling - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a148596841c6be32297c07c79f121e2e00417810", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a148596841c6be32297c07c79f121e2e00417810", "committedDate": "2020-07-03T07:24:40Z", "message": "Further testing array marshalling - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "492db296d8c244593cdc1e406c6fb7fe67f3e578", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/492db296d8c244593cdc1e406c6fb7fe67f3e578", "committedDate": "2020-07-08T09:27:10Z", "message": "Add test case to unmarshal TestCategoryAllProperty - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3f56c8dc1fc734c51ee539e0fc98a51d1d164dd", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d3f56c8dc1fc734c51ee539e0fc98a51d1d164dd", "committedDate": "2020-07-08T09:57:36Z", "message": "Add UriAdapter to parse URI in BeanPropertyResource - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f922f23df481f76f24278daa5e3a2ba5b9c4cfe6", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f922f23df481f76f24278daa5e3a2ba5b9c4cfe6", "committedDate": "2020-07-08T10:50:39Z", "message": "Add (un)marshaling test cases with default values - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0031ca701e1678a184bf55f8a28dc86a12357a6a", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0031ca701e1678a184bf55f8a28dc86a12357a6a", "committedDate": "2020-07-08T11:44:56Z", "message": "Fix marshaling dynamic arrays - (Task #607)\n\nRevealed unhandled exception in TypeInstanceAdapter that is now thrown\ncorrectly.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a8d331223d9943e4fa50374298c90a36d295862", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/4a8d331223d9943e4fa50374298c90a36d295862", "committedDate": "2020-07-13T07:28:02Z", "message": "Working on unmarshaling static bean list - (Task #607)\n\n[skip ci]\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cead98f4bbf6d2454f9da29008235afb25d1e1d2", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/cead98f4bbf6d2454f9da29008235afb25d1e1d2", "committedDate": "2020-07-13T10:53:10Z", "message": "Fix TestCategoryAllPropertyTest unmarshal default props - (Task #607)\n\nAdd a Double Adapter because Double.NaN could not be unmarshalled.\nAdd test cases to test suite.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e78a31dbd9539dedc052f78c7929f431e54bb7b2", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e78a31dbd9539dedc052f78c7929f431e54bb7b2", "committedDate": "2020-07-13T13:28:11Z", "message": "Fix static array unmarshalling - (Task #607)\n\n[skip ci]\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b8555cf9fd2d8b410878e60c8e41a8298e72617", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/6b8555cf9fd2d8b410878e60c8e41a8298e72617", "committedDate": "2020-07-14T09:36:01Z", "message": "Fix handling of null values in un-/marshalling - (Task #607)\n\n- Add annotation for null values to beans\n- Edit test case and test resources\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62b75a6d61dbf94fa966e6cf56a9a47c7a715b56", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/62b75a6d61dbf94fa966e6cf56a9a47c7a715b56", "committedDate": "2020-07-14T12:01:54Z", "message": "Working on bean list un-/marshalling - (Task #607)\n\nTry to also use the adapter for dynamic lists. Discovered a new problem\nwith the dynamic lists: their elements don't get parsed right e.g. a\nBeanPropertyString is parsed as ABeanObject somehow. But it's parsed\nright in the static lists.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12157dc3d3389158684268258ebce1cc43df732b", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/12157dc3d3389158684268258ebce1cc43df732b", "committedDate": "2020-07-15T11:03:48Z", "message": "Try to also use the adapter for the dynamic bean list - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2820420bf28b85e1944e824e1aa48051b32e2ee2", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/2820420bf28b85e1944e824e1aa48051b32e2ee2", "committedDate": "2020-07-21T12:06:36Z", "message": "Merge branch 'development' into feature/task_607-Evaluate_transforming\n\nConflicts:\n\tde.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/test/AllTests.java\n\tde.dlr.sc.virsat.model.extension.tests/src-gen/de/dlr/sc/virsat/model/extension/tests/model/ATestCategoryIntrinsicArray.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f60aac5fd723c099834cb2c49fa4215839c9cdc3", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f60aac5fd723c099834cb2c49fa4215839c9cdc3", "committedDate": "2020-07-22T12:28:38Z", "message": "Fix Nullpointer in UriAdapter - (Task #607)\n\n[skip ci]\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5db37db427d5f8fadbfe87c0ed3db0d170765091", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/5db37db427d5f8fadbfe87c0ed3db0d170765091", "committedDate": "2020-07-22T15:17:05Z", "message": "Add test case for BeanPropertyReference - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d177a921ff9368ba994f91e3191952e2145b299b", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d177a921ff9368ba994f91e3191952e2145b299b", "committedDate": "2020-07-23T10:53:28Z", "message": "Test Category reference in TestCategoryReferenceTest - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffc48270eb936eebb544fd531824caf25561c27e", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ffc48270eb936eebb544fd531824caf25561c27e", "committedDate": "2020-07-23T11:31:45Z", "message": "Add TestCategoryComposition marshalling test - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab4a172dcf0093f24eca90ab56957cb3079a2ab2", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ab4a172dcf0093f24eca90ab56957cb3079a2ab2", "committedDate": "2020-07-23T12:30:13Z", "message": "Merge branch 'feature/task_705-Improve_handling_of_s' into feature/task_607-Evaluate_transforming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d00242117fa6ba01d28692bf56652557161b7a97", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d00242117fa6ba01d28692bf56652557161b7a97", "committedDate": "2020-07-23T12:37:46Z", "message": "Fix TestCategoryIntrinsicArrayTest - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03d451a6b5e46a48ab8f16d5938cf6d5d373ec15", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/03d451a6b5e46a48ab8f16d5938cf6d5d373ec15", "committedDate": "2020-07-23T14:10:15Z", "message": "Add test cases for reference and composition arrays - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6cc3f35a21f7793524ca076eaa3c5dda638ef8f", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b6cc3f35a21f7793524ca076eaa3c5dda638ef8f", "committedDate": "2020-07-24T13:57:20Z", "message": "Add JsonTestHelper - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba092443392765cb50e11e006542f8b1281f251c", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ba092443392765cb50e11e006542f8b1281f251c", "committedDate": "2020-07-27T13:29:41Z", "message": "Update reference marshalling - (Task #607)\n\nNow only include the uuid in the JSON to not have duplicates.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "333a9da6f2b34b3236723c577f53bb68fce0da44", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/333a9da6f2b34b3236723c577f53bb68fce0da44", "committedDate": "2020-07-27T13:41:44Z", "message": "Fix reference array marshalling - (Task #607)\n\nNow also only marshalls the uuids.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59849a0e22e2cc455160478a4e163110882cd36b", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/59849a0e22e2cc455160478a4e163110882cd36b", "committedDate": "2020-07-28T12:53:21Z", "message": "Update composition array marshalling test case - (Task #607)\n\nChanged many JSONs because of changes to the JsonTestHelper.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cc6c0fc81187bfc16429263f4f8cb7ce8e495ae", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/1cc6c0fc81187bfc16429263f4f8cb7ce8e495ae", "committedDate": "2020-07-28T13:49:25Z", "message": "Clean up XML annotation - (Task #607)\n\nUse the same annotations everywhere.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3944b0275979594e6a104bec52be8161161deb77", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3944b0275979594e6a104bec52be8161161deb77", "committedDate": "2020-07-28T13:53:33Z", "message": "Remove deprecated classes - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7e07083a4fae6c748fabe150c232bb165709598", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d7e07083a4fae6c748fabe150c232bb165709598", "committedDate": "2020-07-28T14:29:08Z", "message": "Cleanup classes for un-/marshalling - (Task #607)\n\nResolve warnings and add comments.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b51c589fc845c22842dff35a4871085392e8c32b", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b51c589fc845c22842dff35a4871085392e8c32b", "committedDate": "2020-07-29T13:25:27Z", "message": "Update Reference and Composition arrays - (Task #607)\n\nUse the bean because we can't change the referenced / composed object on\nthe other lists.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f81e88b49db24fad7b07e54f5d5f1c79adfd7b0b", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f81e88b49db24fad7b07e54f5d5f1c79adfd7b0b", "committedDate": "2020-07-29T14:10:09Z", "message": "Resolve TODOs - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b9382e76be344ae3a36e77ceea58e48022409a9", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3b9382e76be344ae3a36e77ceea58e48022409a9", "committedDate": "2020-07-30T11:52:12Z", "message": "Add XML annotations to code generator - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46b5d188b3b65974bf0c99e273faae51eb176e17", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/46b5d188b3b65974bf0c99e273faae51eb176e17", "committedDate": "2020-07-30T13:57:01Z", "message": "Resolve build error and minor change in generator- (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "322883f6779bc779ba050a922a69f4728559af01", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/322883f6779bc779ba050a922a69f4728559af01", "committedDate": "2020-07-30T13:59:19Z", "message": "Add generated files - (Task #607)\n\nNow contain xml annotations.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0ac4eb91b88fd84d6914f7d5a5f99d780821c1c", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f0ac4eb91b88fd84d6914f7d5a5f99d780821c1c", "committedDate": "2020-07-30T14:10:44Z", "message": "Update generated test resources - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f90572d65117929862f51cffa40181e74dee9058", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f90572d65117929862f51cffa40181e74dee9058", "committedDate": "2020-07-30T14:56:51Z", "message": "Clean up test cases - (Task #607)\n\n- Add assert messages to test cases\n- Removed unneeded import from manifest\n- Reverted changes of api docs\n- Added missing Javadocs\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4871073cc571840d43d688015a3a6a3ab0f8034d", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/4871073cc571840d43d688015a3a6a3ab0f8034d", "committedDate": "2020-07-31T12:12:04Z", "message": "Add BeanTypeInstanceFac - (Task #607)\n\nThat uses the BeanPropertyFactory and the BeanCategoryAssignmentFactory.\nThis removes duplicate code.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "committedDate": "2020-08-07T09:12:57Z", "message": "Merge branch 'development' into feature/task_607-Evaluate_transforming"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTYxMTE4", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#pullrequestreview-463161118", "createdAt": "2020-08-07T09:15:31Z", "commit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxNTozMVrOG9SsSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNTo1OVrOG9TUfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMjU2OA==", "bodyText": "I know Im the one who added this :D but the way I understand it now we only neet to annotate the set or the get.\nI see in the other methods you annotate the get, so to stay consistent, I think here too we should only annotate the getter.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466922568", "createdAt": "2020-08-07T09:15:31Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/ABeanObject.java", "diffHunk": "@@ -39,11 +49,17 @@ public ABeanObject() {\n \t}\r\n \t\r\n \t@SuppressWarnings(\"unchecked\")\r\n+\t@XmlID\r\n+\t@XmlElement(name = \"uuid\")\r\n+\t@XmlJavaTypeAdapter(TypeInstanceAdapter.class)\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMzA0OA==", "bodyText": "Do we still need this? I think this is just a fragment that stuck around from when phillip and me were playing around tih the annotations on category assignemnt level.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466923048", "createdAt": "2020-08-07T09:16:31Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/category/ABeanCategoryAssignment.java", "diffHunk": "@@ -53,6 +55,11 @@ public void setATypeInstance(ATypeInstance ti) {\n \t\thelper.setCategoryAssignment(this.ti);\r\n \t}\r\n \t\r\n+\t@Override\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMzI2Nw==", "bodyText": "ATypeInstnace -> ATypeInstance", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466923267", "createdAt": "2020-08-07T09:16:56Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/factory/BeanTypeInstanceFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.concept.types.factory;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.Status;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.provider.DVLMEditPlugin;\n+\n+/**\n+ * A factory class for TypeInstanceBeans which can create the correct bean\n+ * for a given ATypeInstnace depending on the registration of Beans", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNDczOA==", "bodyText": "This class probably needs some more description as to why we need it.\nIf I recall correctly it involved something with generics right?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466924738", "createdAt": "2020-08-07T09:19:56Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/json/AnyTypeAdapter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.dvlm.json;\n+\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+\n+/**\n+ * This XmlAdapter can be used to marshal any generic Java Object. \n+ * This will result in a \"type\" attribute (XML) or key value pair (JSON)\n+ * added to the marshalled object, which is needed for unmarshalling.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNDk4OQ==", "bodyText": "I dont think we need to explicitly declare this constructor.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466924989", "createdAt": "2020-08-07T09:20:24Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/json/AnyTypeAdapter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.dvlm.json;\n+\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+\n+/**\n+ * This XmlAdapter can be used to marshal any generic Java Object. \n+ * This will result in a \"type\" attribute (XML) or key value pair (JSON)\n+ * added to the marshalled object, which is needed for unmarshalling.\n+ */\n+public class AnyTypeAdapter extends XmlAdapter<Object, Object> {\n+\tpublic AnyTypeAdapter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNzYwNg==", "bodyText": "URL url = new URL(\"platform:/plugin/\" + FRAGMENT_ID + resourcePath);", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466927606", "createdAt": "2020-08-07T09:25:25Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/test/TestActivator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.test;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.net.URL;\r\n+\r\n+import org.junit.Assert;\r\n+\r\n+public class TestActivator {\r\n+\r\n+\t\r\n+\t/**\r\n+\t * Hidden construcotr of activator class\r\n+\t */\r\n+\tprivate TestActivator() {\r\n+\t}\r\n+\t\r\n+\tpublic static final String FRAGMENT_ID = \"de.dlr.sc.virsat.model.extension.tests.test\";\r\n+\r\n+\t/**\r\n+\t * Method to access the fragments contents from the resource folder and to ahnd it back as string\r\n+\t * @param resourcePath the path to the resource starting with \"resource/\"\r\n+\t * @return the content of the resource as string\r\n+\t * @throws IOException throws\r\n+\t */\r\n+\tpublic static String getResourceContentAsString(String resourcePath) throws IOException {\r\n+\t\tURL url;\r\n+\r\n+\t\turl = new URL(\"platform:/plugin/\" + FRAGMENT_ID + resourcePath);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMDkyMg==", "bodyText": "Any reason we cant just to + i in the setUuid call? Java should convert the int to a string for you.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466930922", "createdAt": "2020-08-07T09:31:59Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tString lastChar = Integer.toString(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMTA4NQ==", "bodyText": "We should probably clean up the system out statements.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466931085", "createdAt": "2020-08-07T09:32:20Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tString lastChar = Integer.toString(i);\n+\t\t\t\n+\t\t\tBeanPropertyComposed<TestCategoryAllProperty> bean = staticArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"45e18c9d-ef85-4ab8-ba2a-c5916697a0b\" + lastChar));\n+\t\t\t\n+\t\t\tTestCategoryAllProperty tcAllProperty = bean.getValue();\n+\t\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty, lastChar);\n+\t\t}\n+\t\t\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\ttestArray.getTestCompositionArrayStatic().get(0).getTestStringBean().setValue(JsonTestHelper.TEST_STRING);\n+\t\t\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(testArray, sw);\n+\t\t\n+\t\tSystem.out.println(sw.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMTM0OQ==", "bodyText": "assertNull instead of assertEquals with null", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466931349", "createdAt": "2020-08-07T09:32:50Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tString lastChar = Integer.toString(i);\n+\t\t\t\n+\t\t\tBeanPropertyComposed<TestCategoryAllProperty> bean = staticArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"45e18c9d-ef85-4ab8-ba2a-c5916697a0b\" + lastChar));\n+\t\t\t\n+\t\t\tTestCategoryAllProperty tcAllProperty = bean.getValue();\n+\t\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty, lastChar);\n+\t\t}\n+\t\t\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\ttestArray.getTestCompositionArrayStatic().get(0).getTestStringBean().setValue(JsonTestHelper.TEST_STRING);\n+\t\t\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(testArray, sw);\n+\t\t\n+\t\tSystem.out.println(sw.toString());\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(testArray.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tString inputJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tSystem.out.println(inputJson);\n+\t\tStringReader sr = new StringReader(inputJson);\n+\n+\t\tassertEquals(null, testArray.getTestCompositionArrayStatic().get(0).getTestStringBean().getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjA1NA==", "bodyText": "assertNull", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466932054", "createdAt": "2020-08-07T09:34:17Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionTest extends AConceptTestCase {\n+\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate TestCategoryComposition tcComposition;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate Concept concept;\n+\t\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryComposition_Marshaling.json\";\n+\t\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryComposition.class});\n+\t\t\n+\t\tconcept = loadConceptFromPlugin();\n+\t\t\n+\t\ttcComposition = new TestCategoryComposition(concept);\n+\t\ttcComposition.getATypeInstance().setUuid(new VirSatUuid(\"028a6e1b-e7c4-4937-886b-d65452426bfd\"));\n+\t\ttcComposition.getTestSubCategoryBean().getATypeInstance().setUuid(new VirSatUuid(\"128a6e1b-e7c4-4937-886b-d65452426bfd\"));\n+\t\t\n+\t\ttcAllProperty = tcComposition.getTestSubCategory();\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\ttcAllProperty.setTestString(JsonTestHelper.TEST_STRING);\n+\t\t\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(tcComposition, sw);\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(tcComposition.getATypeInstance());\n+\t\tresourceImpl.getContents().add(tcAllProperty.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tString inputJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tStringReader sr = new StringReader(inputJson);\n+\n+\t\tassertEquals(null, tcAllProperty.getTestString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjQxNg==", "bodyText": "Expected and is value seem to be flipped here.\nAlso assertNull.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466932416", "createdAt": "2020-08-07T09:34:59Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryIntrinsicArrayTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.ATestCategoryIntrinsicArrayTest;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryIntrinsicArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryIntrinsicArrayTest extends ATestCategoryIntrinsicArrayTest {\n+\t\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate BeanPropertyString bpString;\n+\tprivate TestCategoryIntrinsicArray testArray;\n+\t\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryIntrinsicArray_Marshaling.json\";\n+\t\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t\t\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryIntrinsicArray.class});\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\n+\t\ttestArray = new TestCategoryIntrinsicArray(concept);\n+\t\ttestArray.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\ttestArray.getTestStringArrayDynamicBean().getArrayInstance().setUuid(new VirSatUuid(\"ee6e1025-4a77-4b32-9c62-cb459ed76ce8\"));\t\t\n+\t\tIBeanList<BeanPropertyString> list = testArray.getTestStringArrayStaticBean();\n+\t\tJsonTestHelper.setStaticIBeanListUuids(list);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\tbpString.setValue(JsonTestHelper.TEST_STRING);\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\ttestArray.getTestStringArrayStaticBean().get(0).setValue(JsonTestHelper.TEST_STRING);\n+\t\ttestArray.getTestStringArrayDynamicBean().add(bpString);\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(testArray, sw);\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\tArrayInstance originalArrayInstance = testArray.getTestStringArrayStaticBean().getArrayInstance();\n+\t\t\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(testArray.getATypeInstance());\n+\t\tresourceImpl.getContents().add(originalArrayInstance);\n+\t\tresourceImpl.getContents().add(bpString.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tassertEquals(testArray.getTestStringArrayStaticBean().get(0).getValue(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjg2Mg==", "bodyText": "Just + i should be enough.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466932862", "createdAt": "2020-08-07T09:35:59Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryReferenceArrayTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReferenceArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryReferenceArrayTest extends AConceptTestCase {\n+\n+\tprivate TestCategoryReferenceArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate BeanPropertyString bpString;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryReferenceArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGED_REFERENCE = \"/resources/json/TestCategoryReferenceArray_Marshaling_ChangeReference.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryReferenceArray.class});\n+\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryReferenceArray(concept);\n+\t\t\n+\t\ttcAllProperty = new TestCategoryAllProperty(concept);\n+\t\t\n+\t\t// Set uuids to match the test resource\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\t\t\n+\t\ttestArray.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\t\n+\t\tIBeanList<BeanPropertyReference<TestCategoryAllProperty>> staticCategoryArray = testArray.getTestCategoryReferenceArrayStaticBean();\n+\t\tfor (int i = 0; i < staticCategoryArray.size(); i++) {\n+\t\t\tBeanPropertyReference<TestCategoryAllProperty> bean = staticCategoryArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"8872b433-968c-4f48-b9a3-d734c6e239a\" + Integer.toString(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3dfa74fb9f4bc9ae6132cdceb2a90318df66c3d", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b3dfa74fb9f4bc9ae6132cdceb2a90318df66c3d", "committedDate": "2020-08-07T11:18:02Z", "message": "Changes due to review - (Task #607)\n\n- Remove unneeded annotations in the beans\n- In AnyTypeAdapter improve comment and remove empty constructor\n- Remove explicit int to string conversion in JsonTestHelper and test\ncases\n- Replace assertEquals(null, ...) with asserNull\n- Remove system out statements\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17b94d32c4069603de1e83a77cc497ceadd670ab", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/17b94d32c4069603de1e83a77cc497ceadd670ab", "committedDate": "2020-08-07T13:40:16Z", "message": "Rename ReferenceAdapter to ABeanObjectAdapter - (Task #607)\n\nThe adapter simply un-/marshalls ABeanObject and could have other use\ncases than reference propertys in the future. So to be consistent with\nthe naming it is renamed to ABeanObjectAdapter\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "448953721d5cdfdeabf8eef5a9a83fa1e5c4dc97", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/448953721d5cdfdeabf8eef5a9a83fa1e5c4dc97", "committedDate": "2020-08-07T13:42:39Z", "message": "Add missing test cases for adapters and JAXBUtility - (Task #607)\n\nAlso minor improvements in the tested classes.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e0eb0eec0cd9501131a2fef8a80a63187e4f34a", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8e0eb0eec0cd9501131a2fef8a80a63187e4f34a", "committedDate": "2020-08-07T13:57:20Z", "message": "Change generator to use ABeanObjectAdapter - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32e1f744d1cce4b89f50184046d77c4c425db286", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/32e1f744d1cce4b89f50184046d77c4c425db286", "committedDate": "2020-08-07T14:24:10Z", "message": "Generate files and update generator test case - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjc4OTQy", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#pullrequestreview-463278942", "createdAt": "2020-08-07T12:40:56Z", "commit": {"oid": "b3dfa74fb9f4bc9ae6132cdceb2a90318df66c3d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MDo1NlrOG9YUXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MDo1NlrOG9YUXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNDc1MQ==", "bodyText": "I think we can remove the entire function this its defined in the parent class.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r467014751", "createdAt": "2020-08-07T12:40:56Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/category/ABeanCategoryAssignment.java", "diffHunk": "@@ -55,7 +55,6 @@ public void setATypeInstance(ATypeInstance ti) {\n \t\thelper.setCategoryAssignment(this.ti);\r\n \t}\r\n \t\r\n-\t@Override\r\n \tpublic ATypeInstance getATypeInstance() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dfa74fb9f4bc9ae6132cdceb2a90318df66c3d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e056f97b0a3fa480eb5c8254f6b80f68d43daf8d", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e056f97b0a3fa480eb5c8254f6b80f68d43daf8d", "committedDate": "2020-08-18T13:27:05Z", "message": "Changes due to review - (Task #607)\n\nRemove unneeded function in ABeanCategoryAssignment.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NDk3Mzk5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#pullrequestreview-469497399", "createdAt": "2020-08-18T14:13:35Z", "commit": {"oid": "e056f97b0a3fa480eb5c8254f6b80f68d43daf8d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e588e57eefa0f1121ebbc0a2fe48ad62519948e9", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e588e57eefa0f1121ebbc0a2fe48ad62519948e9", "committedDate": "2020-08-20T10:03:24Z", "message": "Add missing nillable attribute in GenerateCategoryBeans - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b104505e6f61bce4b6b8283b53005491dc55a407", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b104505e6f61bce4b6b8283b53005491dc55a407", "committedDate": "2020-08-20T10:36:53Z", "message": "Add nillable to reference property in generator - (Task #607)\n\nAlso add new expected output file\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bc55a3bf6b9650306b42851a3ba91c820900362", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9bc55a3bf6b9650306b42851a3ba91c820900362", "committedDate": "2020-08-20T11:27:11Z", "message": "Update generated files - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3c17cc3a34b0f5cbe536f8afce461d4a74364bed", "committedDate": "2020-08-20T12:33:26Z", "message": "Add null tests for composition and reference marshalling - (Task #607)\n\n- Add test cases for composition and reference beans and lists of\ncomposition and reference beans\n- Add test resources\n- Minor change in ABeanObjectAdapter and BeanPropertyReference to handle\nnull\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NDcwODMw", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#pullrequestreview-475470830", "createdAt": "2020-08-26T13:10:29Z", "commit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoxMDoyOVrOHHLTyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyODowM1rOHJ_0KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NzM3MQ==", "bodyText": "Looks like it should be after \"Import Statements\" comment", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r477287371", "createdAt": "2020-08-26T13:10:29Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests/src/de/dlr/sc/virsat/model/extension/tests/model/TestCategoryBeanA.java", "diffHunk": "@@ -9,11 +9,11 @@\n  *******************************************************************************/\r\n package de.dlr.sc.virsat.model.extension.tests.model;\r\n \r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwODk2MQ==", "bodyText": "Method name doesn't correspond to contents - it's not asserting anything, but unmarschalling", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480208961", "createdAt": "2020-08-31T15:31:41Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryAllPropertyTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\r\n+\r\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.StringReader;\r\n+import java.io.StringWriter;\r\n+\r\n+import javax.xml.bind.JAXBException;\r\n+import javax.xml.bind.Marshaller;\r\n+import javax.xml.bind.Unmarshaller;\r\n+import javax.xml.transform.stream.StreamSource;\r\n+\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\r\n+public class TestCategoryAllPropertyTest extends AConceptTestCase {\r\n+\r\n+\tprivate TestCategoryAllProperty tcAllProperty;\r\n+\tprivate JAXBUtility jaxbUtility;\r\n+\tprivate Concept concept;\r\n+\t\r\n+\tprivate static final String RESOURCE_WITH_DEFAULTS = \"/resources/json/TestCategoryAllProperty_Marshaling_Defaults.json\";\r\n+\tprivate static final String RESOURCE_WITH_VALUES = \"/resources/json/TestCategoryAllProperty_Marshaling.json\";\r\n+\t\r\n+\tprivate static final boolean TEST_BOOL = true;\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final double TEST_FLOAT = 0.0;\r\n+\tprivate static final String TEST_STRING = \"this is a test\";\r\n+\tprivate static final String TEST_ENUM = \"HIGH\";\r\n+\tprivate static final String TEST_RESOURCE = \"resources/file[1].xls\";\r\n+\tprivate static final String TEST_RESOURCE_STRING = \"/\" + TEST_RESOURCE;\r\n+\t\r\n+\tprivate static final double EPSILON = 0.000001;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setup() throws JAXBException {\r\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryAllProperty.class});\r\n+\t\t\r\n+\t\tprepareEditingDomain();\r\n+\t\tconcept = loadConceptFromPlugin();\r\n+\t\t\r\n+\t\ttcAllProperty  = new TestCategoryAllProperty(concept);\r\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\r\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Set the new values\r\n+\t */\r\n+\tpublic void initProperties() {\r\n+\t\ttcAllProperty.setTestInt(TEST_INT);\r\n+\t\ttcAllProperty.setTestFloat(TEST_FLOAT);\r\n+\t\ttcAllProperty.setTestEnum(TEST_ENUM);\r\n+\t\ttcAllProperty.setTestResource(URI.createPlatformPluginURI(TEST_RESOURCE, false));\r\n+\t\ttcAllProperty.setTestString(TEST_STRING);\r\n+\t\ttcAllProperty.setTestBool(TEST_BOOL);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Marshall the TestCategoryAllProperty and assert that it equals the resource\r\n+\t * @param resource containing the expected JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertMarshalWithResource(String resource) throws JAXBException, IOException {\r\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\r\n+\t\t\r\n+\t\tStringWriter sw = new StringWriter();\r\n+\t\tjsonMarshaller.marshal(tcAllProperty, sw);\r\n+\r\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(resource);\r\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\r\n+\t\tinitProperties();\r\n+\t\t\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_VALUES);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshallingWithDefaultValues() throws JAXBException, IOException {\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_DEFAULTS);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Unmarshall the resource\r\n+\t * @param resource containing the input JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertUnmarshalWithResource(String resource) throws JAXBException, IOException {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwOTkyNA==", "bodyText": "This change looks wrong - all imports should be after the import comment", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480209924", "createdAt": "2020-08-31T15:33:19Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests/src/de/dlr/sc/virsat/model/extension/tests/model/TestCategoryCompositionArray.java", "diffHunk": "@@ -9,11 +9,11 @@\n  *******************************************************************************/\r\n package de.dlr.sc.virsat.model.extension.tests.model;\r\n \r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMTYxNQ==", "bodyText": "I think there is a getter for the int property bean, and you do a null check on it", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480211615", "createdAt": "2020-08-31T15:36:04Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryAllPropertyTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\r\n+\r\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.StringReader;\r\n+import java.io.StringWriter;\r\n+\r\n+import javax.xml.bind.JAXBException;\r\n+import javax.xml.bind.Marshaller;\r\n+import javax.xml.bind.Unmarshaller;\r\n+import javax.xml.transform.stream.StreamSource;\r\n+\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\r\n+public class TestCategoryAllPropertyTest extends AConceptTestCase {\r\n+\r\n+\tprivate TestCategoryAllProperty tcAllProperty;\r\n+\tprivate JAXBUtility jaxbUtility;\r\n+\tprivate Concept concept;\r\n+\t\r\n+\tprivate static final String RESOURCE_WITH_DEFAULTS = \"/resources/json/TestCategoryAllProperty_Marshaling_Defaults.json\";\r\n+\tprivate static final String RESOURCE_WITH_VALUES = \"/resources/json/TestCategoryAllProperty_Marshaling.json\";\r\n+\t\r\n+\tprivate static final boolean TEST_BOOL = true;\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final double TEST_FLOAT = 0.0;\r\n+\tprivate static final String TEST_STRING = \"this is a test\";\r\n+\tprivate static final String TEST_ENUM = \"HIGH\";\r\n+\tprivate static final String TEST_RESOURCE = \"resources/file[1].xls\";\r\n+\tprivate static final String TEST_RESOURCE_STRING = \"/\" + TEST_RESOURCE;\r\n+\t\r\n+\tprivate static final double EPSILON = 0.000001;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setup() throws JAXBException {\r\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryAllProperty.class});\r\n+\t\t\r\n+\t\tprepareEditingDomain();\r\n+\t\tconcept = loadConceptFromPlugin();\r\n+\t\t\r\n+\t\ttcAllProperty  = new TestCategoryAllProperty(concept);\r\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\r\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Set the new values\r\n+\t */\r\n+\tpublic void initProperties() {\r\n+\t\ttcAllProperty.setTestInt(TEST_INT);\r\n+\t\ttcAllProperty.setTestFloat(TEST_FLOAT);\r\n+\t\ttcAllProperty.setTestEnum(TEST_ENUM);\r\n+\t\ttcAllProperty.setTestResource(URI.createPlatformPluginURI(TEST_RESOURCE, false));\r\n+\t\ttcAllProperty.setTestString(TEST_STRING);\r\n+\t\ttcAllProperty.setTestBool(TEST_BOOL);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Marshall the TestCategoryAllProperty and assert that it equals the resource\r\n+\t * @param resource containing the expected JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertMarshalWithResource(String resource) throws JAXBException, IOException {\r\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\r\n+\t\t\r\n+\t\tStringWriter sw = new StringWriter();\r\n+\t\tjsonMarshaller.marshal(tcAllProperty, sw);\r\n+\r\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(resource);\r\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\r\n+\t\tinitProperties();\r\n+\t\t\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_VALUES);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshallingWithDefaultValues() throws JAXBException, IOException {\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_DEFAULTS);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Unmarshall the resource\r\n+\t * @param resource containing the input JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertUnmarshalWithResource(String resource) throws JAXBException, IOException {\r\n+\t\t// Quick mock setup to embed the model into a resource set\r\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\r\n+\t\tResource resourceImpl = new ResourceImpl();\r\n+\t\tresourceSet.getResources().add(resourceImpl);\r\n+\t\tresourceImpl.getContents().add(tcAllProperty.getATypeInstance());\r\n+\t\t\r\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\r\n+\t\t\r\n+\t\tString inputJson = TestActivator.getResourceContentAsString(resource);\r\n+\t\tStringReader sr = new StringReader(inputJson);\r\n+\t\t\r\n+\t\tjsonUnmarshaller.unmarshal(new StreamSource(sr), TestCategoryAllProperty.class);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\r\n+\t\t// Initial default values are set\r\n+\t\tassertEqualsDefaultValues();\r\n+\t\t\r\n+\t\t// Unmarshall the resource containing the new values\r\n+\t\tassertUnmarshalWithResource(RESOURCE_WITH_VALUES);\r\n+\t\t\r\n+\t\t// The values are correctly overwritten\r\n+\t\tassertEqualsTestValues();\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonUnmarshallingWithDefaultValues() throws JAXBException, IOException {\r\n+\t\t// Set to the new values\r\n+\t\tinitProperties();\r\n+\t\tassertEqualsTestValues();\r\n+\t\t\r\n+\t\t// Unmarshall the resource containing the default values\r\n+\t\tassertUnmarshalWithResource(RESOURCE_WITH_DEFAULTS);\r\n+\t\t\r\n+\t\t// The values are correctly overwritten\r\n+\t\tassertEqualsDefaultValues();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Assert that the new values are set correctly\r\n+\t */\r\n+\tprivate void assertEqualsTestValues() {\r\n+\t\tassertEquals(TEST_INT, tcAllProperty.getTestInt());\r\n+\t\tassertEquals(TEST_STRING, tcAllProperty.getTestString());\r\n+\t\tassertEquals(TEST_RESOURCE_STRING, tcAllProperty.getTestResource().toPlatformString(false));\r\n+\t\tassertEquals(TEST_ENUM, tcAllProperty.getTestEnum());\r\n+\t\tassertEquals(TEST_BOOL, tcAllProperty.getTestBool());\r\n+\t\tassertEquals(TEST_FLOAT, tcAllProperty.getTestFloat(), EPSILON);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Assert that the default values are set correctly\r\n+\t */\r\n+\tprivate void assertEqualsDefaultValues() {\r\n+\t\t// int default is Long in the bean and can be null, but is a long in the TestCategoryAllProperty\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMzI4OQ==", "bodyText": "Better move the UUID into a constant to avoid duplication", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480213289", "createdAt": "2020-08-31T15:38:53Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryBeanATest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\r\n+\r\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.StringReader;\r\n+import java.io.StringWriter;\r\n+\r\n+import javax.xml.bind.JAXBElement;\r\n+import javax.xml.bind.JAXBException;\r\n+import javax.xml.bind.Marshaller;\r\n+import javax.xml.bind.Unmarshaller;\r\n+import javax.xml.transform.stream.StreamSource;\r\n+\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\r\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryBeanA;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\r\n+\r\n+public class TestCategoryBeanATest extends AConceptTestCase {\r\n+\r\n+\tprivate JAXBUtility jaxbUtility;\r\n+\tprivate Concept concept;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tconcept = loadConceptFromPlugin();\r\n+\t\t\r\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryBeanA.class});\r\n+\t}\r\n+\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\r\n+\t\t\r\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\r\n+\t\t\r\n+\t\tTestCategoryBeanA testCategoryBean = new TestCategoryBeanA(concept);\r\n+\t\ttestCategoryBean.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzMzUyNw==", "bodyText": "We have exactly the same functionality in de.dlr.sc.virsat.model.concept.test.util.GeneratorJunitAssert. I don't know, maybe there is some clever way to reuse it?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480233527", "createdAt": "2020-08-31T16:08:32Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/test/TestActivator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.test;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.net.URL;\r\n+\r\n+import org.junit.Assert;\r\n+\r\n+public class TestActivator {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzODg3OQ==", "bodyText": "This method repeats in several classes, maybe we can extract it to a base class or to a utility class?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480238879", "createdAt": "2020-08-31T16:18:00Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_NULL_COMPOSITION = \"/resources/json/TestCategoryCompositionArray_Marshaling_NullComposition.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tBeanPropertyComposed<TestCategoryAllProperty> bean = staticArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"45e18c9d-ef85-4ab8-ba2a-c5916697a0b\" + i));\n+\t\t\t\n+\t\t\tTestCategoryAllProperty tcAllProperty = bean.getValue();\n+\t\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty, i);\n+\t\t}\n+\t\t\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\t\n+\t}\n+\t\n+\t/**\n+\t * Marshalls the test object and asserts that the result equals the test resource\n+\t * @param resource the test resource\n+\t * @throws JAXBException\n+\t * @throws IOException\n+\t */\n+\tprivate void assertMarshall(String resource) throws JAXBException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MTk3Nw==", "bodyText": "Agree, let's change to +i, how is it resolved?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480241977", "createdAt": "2020-08-31T16:23:13Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryReferenceArrayTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReferenceArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryReferenceArrayTest extends AConceptTestCase {\n+\n+\tprivate TestCategoryReferenceArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate BeanPropertyString bpString;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryReferenceArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGED_REFERENCE = \"/resources/json/TestCategoryReferenceArray_Marshaling_ChangeReference.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryReferenceArray.class});\n+\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryReferenceArray(concept);\n+\t\t\n+\t\ttcAllProperty = new TestCategoryAllProperty(concept);\n+\t\t\n+\t\t// Set uuids to match the test resource\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\t\t\n+\t\ttestArray.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\t\n+\t\tIBeanList<BeanPropertyReference<TestCategoryAllProperty>> staticCategoryArray = testArray.getTestCategoryReferenceArrayStaticBean();\n+\t\tfor (int i = 0; i < staticCategoryArray.size(); i++) {\n+\t\t\tBeanPropertyReference<TestCategoryAllProperty> bean = staticCategoryArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"8872b433-968c-4f48-b9a3-d734c6e239a\" + Integer.toString(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjg2Mg=="}, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NDc3Ng==", "bodyText": "A lot of repetitive code in the unmarshalling tests, maybe we can extract some of it into a helper method or something?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480244776", "createdAt": "2020-08-31T16:28:03Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryReferenceTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryReferenceTest extends AConceptTestCase {\n+\n+\tprivate TestCategoryReference tcReference;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate BeanPropertyString bpString;\n+\tprivate BeanPropertyReference<TestCategoryAllProperty> refCatBean;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate BeanPropertyReference<BeanPropertyString> refPropBean;\n+\t\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryReference_Marshaling.json\";\n+\tprivate static final String RESOURCE_NULL_REFERENCE = \"/resources/json/TestCategoryReference_Marshaling_NullReference.json\";\n+\tprivate static final String RESOURCE_CHANGED_REFERENCE = \"/resources/json/TestCategoryReference_Marshaling_ChangeReference.json\";\n+\t\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryReference.class});\n+\t\t\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttcReference = new TestCategoryReference(concept);\n+\t\ttcReference.getATypeInstance().setUuid(new VirSatUuid(\"0370d14d-e6a1-4660-83f1-5bb98fa840ac\"));\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\t\ttcReference.setTestRefProperty(bpString);\n+\t\t\n+\t\trefPropBean = tcReference.getTestRefPropertyBean();\n+\t\trefPropBean.getATypeInstance().setUuid(new VirSatUuid(\"0dee3e78-fbcd-4294-8dba-5fa3d4760249\"));\n+\t\t\n+\t\trefCatBean = tcReference.getTestRefCategoryBean();\n+\t\trefCatBean.getATypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\ttcAllProperty = new TestCategoryAllProperty(concept);\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\n+\t\t\n+\t\tbpString.setValue(JsonTestHelper.TEST_STRING);\n+\t\ttcReference.setTestRefCategory(tcAllProperty);\n+\t}\n+\t\n+\t/**\n+\t * Marshalls the test object and asserts that the result equals the test resource\n+\t * @param resource the test resource\n+\t * @throws JAXBException\n+\t * @throws IOException\n+\t */\n+\tprivate void assertMarshall(String resource) throws JAXBException, IOException {\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(tcReference, sw);\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(resource);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\t\n+\t\tassertMarshall(RESOURCE);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\tBeanPropertyString bpString2 = new TestCategoryAllProperty(concept).getTestStringBean();\n+\t\tbpString2.getATypeInstance().setUuid(new VirSatUuid(\"1256e7a2-9a1f-443c-85f8-7b766eac3f50\"));\n+\t\t\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(tcReference.getATypeInstance());\n+\t\tresourceImpl.getContents().add(bpString.getATypeInstance());\n+\t\tresourceImpl.getContents().add(bpString2.getATypeInstance());\n+\t\tresourceImpl.getContents().add(refCatBean.getATypeInstance());\n+\t\tresourceImpl.getContents().add(tcAllProperty.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tString inputJson = TestActivator.getResourceContentAsString(RESOURCE_CHANGED_REFERENCE);\n+\t\tStringReader sr = new StringReader(inputJson);\n+\n+\t\tassertEquals(bpString.getUuid(), tcReference.getTestRefProperty().getUuid());\n+\t\t\n+\t\tjsonUnmarshaller.unmarshal(new StreamSource(sr), TestCategoryReference.class);\n+\t\t\n+\t\tassertEquals(\"Referenced bean changed successfully\", bpString2.getUuid(), tcReference.getTestRefProperty().getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshallingNull() throws JAXBException, IOException {\n+\t\t\n+\t\ttcReference.setTestRefProperty(null);\n+\t\ttcReference.setTestRefCategory(null);\n+\t\t\n+\t\tassertMarshall(RESOURCE_NULL_REFERENCE);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshallingNull() throws JAXBException, IOException {\n+\t\t\n+\t\t// Quick mock setup to embed the model into a resource set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df9e1f2e1a394ef5ed778b58208b015cc09787dd", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/df9e1f2e1a394ef5ed778b58208b015cc09787dd", "committedDate": "2020-09-15T08:13:24Z", "message": "Changes due to review - (Task #607)\n\n- In TestCategoryAllProperty rename method and update asserts\n- Extract uuid into static field in TestCategoryBeanATest\n- In TestCategoryReferenceArrayTest remove unnecessary cast to String\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d8676bb6280cfd7b593688b9620233c76b7263d", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9d8676bb6280cfd7b593688b9620233c76b7263d", "committedDate": "2020-09-15T09:24:06Z", "message": "Extract assertMarshall function into JsonTestHelper - (Task #607)\n\nAlso renamed some fields.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0881232b41080bbe4773554dfd5fd6757e829d24", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0881232b41080bbe4773554dfd5fd6757e829d24", "committedDate": "2020-09-15T09:47:10Z", "message": "Fix import statements - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a40c0ab9ad314851154106feca2b5d938dc239b", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/6a40c0ab9ad314851154106feca2b5d938dc239b", "committedDate": "2020-09-15T10:29:33Z", "message": "Extract repetitive unmarshalling code into JsonTestHelper - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fce374e242f27c189ecbfdb78d4e1e11bdca3b3b", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/fce374e242f27c189ecbfdb78d4e1e11bdca3b3b", "committedDate": "2020-09-15T11:17:40Z", "message": "Remove unnecessary cast to int - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NDgyNDMw", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#pullrequestreview-489482430", "createdAt": "2020-09-16T10:19:30Z", "commit": {"oid": "fce374e242f27c189ecbfdb78d4e1e11bdca3b3b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 524, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}