{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwOTYxMjEz", "number": 875, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyNTozN1rOE_nh8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzoyMzo1MVrOFAzHBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQzNDA5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyNTozN1rOH9ay1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMzo1MDo1MlrOH-cnQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2NDE4Mg==", "bodyText": "I think this paragraph needs to be expanded a bit. I don't want us to explain in detail what REST is, but somebody who doesnt know what REST is (or just quickly googled it) shiould be able to read this. As a first step we could improve this by mentioning here that the API can be used to 'acess and manipulate the Virtual Satellite model remotely and without the desktop interface\". I think that would make the purpose a bit clearer. But there's probably some more than can be done.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/875#discussion_r534164182", "createdAt": "2020-12-02T13:25:37Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "diffHunk": "@@ -0,0 +1,234 @@\n+= Virtual Satellite 4 Core: Server Manual\n+:imagesdir: images\n+:title-logo-image: images/title/VirtualSatellite_Server.jpg\n+:toc:\n+:toclevels: 3\n+:experimental: \n+\n+== Introduction\n+\n+Virtual Satellite can be run headless as a server that provides a REST API. \n+The REST API can be used to access and manipulate the Virtual Satellite model without the user interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d961088cb9304c4fd8949ab0ff5e9839f0ae971b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0MjU2MA==", "bodyText": "Sure, I tried to rewrite it in a more user friendly way", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/875#discussion_r535242560", "createdAt": "2020-12-03T13:50:52Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "diffHunk": "@@ -0,0 +1,234 @@\n+= Virtual Satellite 4 Core: Server Manual\n+:imagesdir: images\n+:title-logo-image: images/title/VirtualSatellite_Server.jpg\n+:toc:\n+:toclevels: 3\n+:experimental: \n+\n+== Introduction\n+\n+Virtual Satellite can be run headless as a server that provides a REST API. \n+The REST API can be used to access and manipulate the Virtual Satellite model without the user interface.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2NDE4Mg=="}, "originalCommit": {"oid": "d961088cb9304c4fd8949ab0ff5e9839f0ae971b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQ0NTk0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyODo0OVrOH9a6bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyODo0OVrOH9a6bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2NjEyNA==", "bodyText": "it's -> its", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/875#discussion_r534166124", "createdAt": "2020-12-02T13:28:49Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "diffHunk": "@@ -0,0 +1,234 @@\n+= Virtual Satellite 4 Core: Server Manual\n+:imagesdir: images\n+:title-logo-image: images/title/VirtualSatellite_Server.jpg\n+:toc:\n+:toclevels: 3\n+:experimental: \n+\n+== Introduction\n+\n+Virtual Satellite can be run headless as a server that provides a REST API. \n+The REST API can be used to access and manipulate the Virtual Satellite model without the user interface.\n+It also functions as an interface to connect Virtual Satellite to your own application.\n+The API supports the standard HTTP commands GET, PUT, POST and DELETE.\n+\n+You will learn about the Servers Architecture in the next chapter.\n+If you are interested in connecting the Server to your own application, refer to <<The REST API>>.\n+Or if you want to set up your own Server, then refer to <<How to run your own Headless Virtual Satellite Server>>.\n+\n+== Architecture of the Virtual Satellite Server\n+\n+In this chapter an overview and a more in depth description of the Servers Functionality and Components is given.\n+\n+=== Overview\n+\n+The Figure <<RestServerOverview>> gives an overview of the Server and its environment.\n+\n+.Overview of the Headless REST Server in the Virtual Satellite environment\n+[#RestServerOverview]\n+image::chapterServerOverview/REST_server_overview.png[Server Overview]\n+\n+A Server instance can maintain multiple _Server Repositories_, with each repository connected to a _git_ or _SVN repository_.\n+_REST Clients_ can access the Server using the HTTP commands GET, PUT, DELETE and POST. \n+So a Client can read or write into the Virtual Satellite model. \n+The server provides functionality for administrators, that can manipulate the server configuration, and users.\n+For that purpose it uses authentication and authorization.\n+// For authentication purposes it is planned to an LDAP server can be connected to the REST server.\n+// The connection can be secured via HTTPS.\n+Every user can only access certain provided Server Repositories.\n+\n+The connected SVN/git repositories can also be directly changed from _Clients using the Virtual Satellite UI_.\n+The server resolves these conflicts and also handles simultaneous changes from multiple REST clients.\n+The SVN/git repository is supposed to be the single source of truth in those cases.\n+\n+=== Components\n+\n+Figure <<RestServerComponents>> gives a more detailed view on the REST Server components.\n+\n+.Components of the Headless REST Server.\n+[#RestServerComponents]\n+image::chapterServerComponents/REST_server_components.png[Server Components]\n+\n+The server is divided into three main layers: the _REST API_ (View), _Server Controller_ and _Persistence_ (Model).\n+Between the API and the controller also is an _Access check_ layer.\n+\n+A REST Client can send a request to the provided _REST API_ that is partitioned into multiple Resources:\n+An _Admin Resource_, in which an administrator can manipulate the Server Configuration (_ServerConf_), e.g. add Repository Configurations (_RepoConf_),\n+and a _Repository Resource_. Each _Server Repository_ provided has its own _Subresource_.\n+\n+In the _Access check_ layer the credentials are obtained from the HTTP Header and it is checked if the requested Resources can be accessed.\n+The credentials are handed over to be used for user role handling in the Virtual Satellite _Data Model_.\n+\n+The _Server Controller_ handles requests to the _Admin Resource_. In it's _ServerConf_ the server settings are stored.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d961088cb9304c4fd8949ab0ff5e9839f0ae971b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQ1NjMwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzozMToyMFrOH9bAxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzozMToyMFrOH9bAxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2Nzc1MQ==", "bodyText": "wan't -> want", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/875#discussion_r534167751", "createdAt": "2020-12-02T13:31:20Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "diffHunk": "@@ -0,0 +1,234 @@\n+= Virtual Satellite 4 Core: Server Manual\n+:imagesdir: images\n+:title-logo-image: images/title/VirtualSatellite_Server.jpg\n+:toc:\n+:toclevels: 3\n+:experimental: \n+\n+== Introduction\n+\n+Virtual Satellite can be run headless as a server that provides a REST API. \n+The REST API can be used to access and manipulate the Virtual Satellite model without the user interface.\n+It also functions as an interface to connect Virtual Satellite to your own application.\n+The API supports the standard HTTP commands GET, PUT, POST and DELETE.\n+\n+You will learn about the Servers Architecture in the next chapter.\n+If you are interested in connecting the Server to your own application, refer to <<The REST API>>.\n+Or if you want to set up your own Server, then refer to <<How to run your own Headless Virtual Satellite Server>>.\n+\n+== Architecture of the Virtual Satellite Server\n+\n+In this chapter an overview and a more in depth description of the Servers Functionality and Components is given.\n+\n+=== Overview\n+\n+The Figure <<RestServerOverview>> gives an overview of the Server and its environment.\n+\n+.Overview of the Headless REST Server in the Virtual Satellite environment\n+[#RestServerOverview]\n+image::chapterServerOverview/REST_server_overview.png[Server Overview]\n+\n+A Server instance can maintain multiple _Server Repositories_, with each repository connected to a _git_ or _SVN repository_.\n+_REST Clients_ can access the Server using the HTTP commands GET, PUT, DELETE and POST. \n+So a Client can read or write into the Virtual Satellite model. \n+The server provides functionality for administrators, that can manipulate the server configuration, and users.\n+For that purpose it uses authentication and authorization.\n+// For authentication purposes it is planned to an LDAP server can be connected to the REST server.\n+// The connection can be secured via HTTPS.\n+Every user can only access certain provided Server Repositories.\n+\n+The connected SVN/git repositories can also be directly changed from _Clients using the Virtual Satellite UI_.\n+The server resolves these conflicts and also handles simultaneous changes from multiple REST clients.\n+The SVN/git repository is supposed to be the single source of truth in those cases.\n+\n+=== Components\n+\n+Figure <<RestServerComponents>> gives a more detailed view on the REST Server components.\n+\n+.Components of the Headless REST Server.\n+[#RestServerComponents]\n+image::chapterServerComponents/REST_server_components.png[Server Components]\n+\n+The server is divided into three main layers: the _REST API_ (View), _Server Controller_ and _Persistence_ (Model).\n+Between the API and the controller also is an _Access check_ layer.\n+\n+A REST Client can send a request to the provided _REST API_ that is partitioned into multiple Resources:\n+An _Admin Resource_, in which an administrator can manipulate the Server Configuration (_ServerConf_), e.g. add Repository Configurations (_RepoConf_),\n+and a _Repository Resource_. Each _Server Repository_ provided has its own _Subresource_.\n+\n+In the _Access check_ layer the credentials are obtained from the HTTP Header and it is checked if the requested Resources can be accessed.\n+The credentials are handed over to be used for user role handling in the Virtual Satellite _Data Model_.\n+\n+The _Server Controller_ handles requests to the _Admin Resource_. In it's _ServerConf_ the server settings are stored.\n+Requests to a specific _Repository Subresource_ via the _Repository Resource_ directly change the underlying _Data Model_.\n+\n+The persistence level is composed of _Server Repositories_, each with a _Repository Configuration_ and a _Data Model_. \n+The _Data Model_ is connected to a _SVN_ or _git_ backend.\n+\n+== The REST API\n+\n+The REST API can be accessed via the \n+[subs=+quotes]\n+....\n+{*server adress*}:8000/rest\n+....\n+and currently supports multiple APIs for different purposes.\n+Each API can be accessed via it's *name* and *version number*:\n+[subs=+quotes]\n+....\n+{*server adress*}:8000/rest/{*name*}/{*version number*}\n+....\n+\n+Currently the following APIs are provided:\n+\n+* The Model API to access Virtual Satellite Models ({*name*} = *model*)\n+* The Management API for administrative tasks ({*name*} = *management*)\n+\n+The following documentation of the REST endpoints is automatically generated using Swagger.\n+For each API the swagger documentation also is provided via the REST API at:\n+[subs=+quotes]\n+....\n+{*server adress*}:8000/rest/{*name*}/{*version number*}/swagger.json or /swagger.yaml\n+....\n+\n+It can help you, if you wan't to connect Virtual Satellite to your own application.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d961088cb9304c4fd8949ab0ff5e9839f0ae971b"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzIxMDA1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDo0NzoyMFrOH_LWFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDo0NzoyMFrOH_LWFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwODIxNQ==", "bodyText": "\"Virtual Satellite can be run headless as a server that allows you to connect Virtual Satellite to a network, e.g. the Internet.\"\n->\n\"Virtual Satellite can be run headless as a server.\nThat allows you to connect Virtual Satellite to a network, e.g. the Internet.\"", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/875#discussion_r536008215", "createdAt": "2020-12-04T10:47:20Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+= Virtual Satellite 4 Core: Server Manual\n+:imagesdir: images\n+:title-logo-image: images/title/VirtualSatellite_Server.jpg\n+:toc:\n+:toclevels: 3\n+:experimental: \n+\n+== Introduction\n+\n+Virtual Satellite can be run headless as a server that allows you to connect Virtual Satellite to a network, e.g. the Internet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f6d96c6b96b03bafdcb047666dddcd118c59a4a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzcxMTgyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMjo1Nzo1OVrOH_PzZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzozNjoyOVrOH_RMYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4MTI1Mg==", "bodyText": "I don't quite get that sentence yet", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/875#discussion_r536081252", "createdAt": "2020-12-04T12:57:59Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+= Virtual Satellite 4 Core: Server Manual\n+:imagesdir: images\n+:title-logo-image: images/title/VirtualSatellite_Server.jpg\n+:toc:\n+:toclevels: 3\n+:experimental: \n+\n+== Introduction\n+\n+Virtual Satellite can be run headless as a server that allows you to connect Virtual Satellite to a network, e.g. the Internet.\n+The REST API can be used to access and manipulate the Virtual Satellite model remotely and without the desktop interface.\n+It provides the Model in form of Resources that can be manipulated via the standard HTTP commands GET, PUT, POST and DELETE.\n+\n+The Server functions as a general-purpose interface to connect Virtual Satellite to your own application.\n+For example the API could be called via JavaScript, that runs inside your Browser, from within a Python program or directly from the command line.\n+\n+You will learn about the Servers Architecture in the next chapter.\n+If you are interested in connecting the Server to your own application, refer to <<The REST API>>.\n+Or if you want to set up your own Server, then refer to <<How to run your own Headless Virtual Satellite Server>>.\n+\n+== Architecture of the Virtual Satellite Server\n+\n+In this chapter an overview and a more in depth description of the Servers Functionality and Components is given.\n+\n+=== Overview\n+\n+The Figure <<RestServerOverview>> gives an overview of the Server and its environment.\n+\n+.Overview of the Headless REST Server in the Virtual Satellite environment\n+[#RestServerOverview]\n+image::chapterServerOverview/REST_server_overview.png[Server Overview]\n+\n+A Server instance can maintain multiple _Server Repositories_, with each repository connected to a _git_ or _SVN repository_.\n+_REST Clients_ can access the Server using the HTTP commands GET, PUT, DELETE and POST. \n+So a Client can read or write into the Virtual Satellite model. \n+The server provides functionality for administrators, that can manipulate the server configuration, and users.\n+For that purpose it uses authentication and authorization.\n+// For authentication purposes it is planned to an LDAP server can be connected to the REST server.\n+// The connection can be secured via HTTPS.\n+Every user can only access certain provided Server Repositories.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f6d96c6b96b03bafdcb047666dddcd118c59a4a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwNDAzMg==", "bodyText": "So the idea is that not all user can access all repositories, but instead each authenticated user has certain repositories he can access (stored in the authentication file). I will think of a better way to say that, nevertheless I will probably add an authentication part to the docu once  it is activated (see #812).", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/875#discussion_r536104032", "createdAt": "2020-12-04T13:36:29Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+= Virtual Satellite 4 Core: Server Manual\n+:imagesdir: images\n+:title-logo-image: images/title/VirtualSatellite_Server.jpg\n+:toc:\n+:toclevels: 3\n+:experimental: \n+\n+== Introduction\n+\n+Virtual Satellite can be run headless as a server that allows you to connect Virtual Satellite to a network, e.g. the Internet.\n+The REST API can be used to access and manipulate the Virtual Satellite model remotely and without the desktop interface.\n+It provides the Model in form of Resources that can be manipulated via the standard HTTP commands GET, PUT, POST and DELETE.\n+\n+The Server functions as a general-purpose interface to connect Virtual Satellite to your own application.\n+For example the API could be called via JavaScript, that runs inside your Browser, from within a Python program or directly from the command line.\n+\n+You will learn about the Servers Architecture in the next chapter.\n+If you are interested in connecting the Server to your own application, refer to <<The REST API>>.\n+Or if you want to set up your own Server, then refer to <<How to run your own Headless Virtual Satellite Server>>.\n+\n+== Architecture of the Virtual Satellite Server\n+\n+In this chapter an overview and a more in depth description of the Servers Functionality and Components is given.\n+\n+=== Overview\n+\n+The Figure <<RestServerOverview>> gives an overview of the Server and its environment.\n+\n+.Overview of the Headless REST Server in the Virtual Satellite environment\n+[#RestServerOverview]\n+image::chapterServerOverview/REST_server_overview.png[Server Overview]\n+\n+A Server instance can maintain multiple _Server Repositories_, with each repository connected to a _git_ or _SVN repository_.\n+_REST Clients_ can access the Server using the HTTP commands GET, PUT, DELETE and POST. \n+So a Client can read or write into the Virtual Satellite model. \n+The server provides functionality for administrators, that can manipulate the server configuration, and users.\n+For that purpose it uses authentication and authorization.\n+// For authentication purposes it is planned to an LDAP server can be connected to the REST server.\n+// The connection can be secured via HTTPS.\n+Every user can only access certain provided Server Repositories.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4MTI1Mg=="}, "originalCommit": {"oid": "9f6d96c6b96b03bafdcb047666dddcd118c59a4a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzcyMDc3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzowMDowN1rOH_P4gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzozMDoyNlrOH_Q-CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4MjU2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The connected SVN/git repositories can also be directly changed from _Clients using the Virtual Satellite UI_.\n          \n          \n            \n            The connected SVN/git repositories can also be manipulated from _Clients using the Virtual Satellite UI_.\n          \n      \n    \n    \n  \n\nchange sounded for me like you could change the remote or other git/svn properties; directly sounded like you could use UI to direktly manipulate the checked-out repo within the server...", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/875#discussion_r536082563", "createdAt": "2020-12-04T13:00:07Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+= Virtual Satellite 4 Core: Server Manual\n+:imagesdir: images\n+:title-logo-image: images/title/VirtualSatellite_Server.jpg\n+:toc:\n+:toclevels: 3\n+:experimental: \n+\n+== Introduction\n+\n+Virtual Satellite can be run headless as a server that allows you to connect Virtual Satellite to a network, e.g. the Internet.\n+The REST API can be used to access and manipulate the Virtual Satellite model remotely and without the desktop interface.\n+It provides the Model in form of Resources that can be manipulated via the standard HTTP commands GET, PUT, POST and DELETE.\n+\n+The Server functions as a general-purpose interface to connect Virtual Satellite to your own application.\n+For example the API could be called via JavaScript, that runs inside your Browser, from within a Python program or directly from the command line.\n+\n+You will learn about the Servers Architecture in the next chapter.\n+If you are interested in connecting the Server to your own application, refer to <<The REST API>>.\n+Or if you want to set up your own Server, then refer to <<How to run your own Headless Virtual Satellite Server>>.\n+\n+== Architecture of the Virtual Satellite Server\n+\n+In this chapter an overview and a more in depth description of the Servers Functionality and Components is given.\n+\n+=== Overview\n+\n+The Figure <<RestServerOverview>> gives an overview of the Server and its environment.\n+\n+.Overview of the Headless REST Server in the Virtual Satellite environment\n+[#RestServerOverview]\n+image::chapterServerOverview/REST_server_overview.png[Server Overview]\n+\n+A Server instance can maintain multiple _Server Repositories_, with each repository connected to a _git_ or _SVN repository_.\n+_REST Clients_ can access the Server using the HTTP commands GET, PUT, DELETE and POST. \n+So a Client can read or write into the Virtual Satellite model. \n+The server provides functionality for administrators, that can manipulate the server configuration, and users.\n+For that purpose it uses authentication and authorization.\n+// For authentication purposes it is planned to an LDAP server can be connected to the REST server.\n+// The connection can be secured via HTTPS.\n+Every user can only access certain provided Server Repositories.\n+\n+The connected SVN/git repositories can also be directly changed from _Clients using the Virtual Satellite UI_.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f6d96c6b96b03bafdcb047666dddcd118c59a4a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwMDM2MA==", "bodyText": "Yeah I will change it", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/875#discussion_r536100360", "createdAt": "2020-12-04T13:30:26Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+= Virtual Satellite 4 Core: Server Manual\n+:imagesdir: images\n+:title-logo-image: images/title/VirtualSatellite_Server.jpg\n+:toc:\n+:toclevels: 3\n+:experimental: \n+\n+== Introduction\n+\n+Virtual Satellite can be run headless as a server that allows you to connect Virtual Satellite to a network, e.g. the Internet.\n+The REST API can be used to access and manipulate the Virtual Satellite model remotely and without the desktop interface.\n+It provides the Model in form of Resources that can be manipulated via the standard HTTP commands GET, PUT, POST and DELETE.\n+\n+The Server functions as a general-purpose interface to connect Virtual Satellite to your own application.\n+For example the API could be called via JavaScript, that runs inside your Browser, from within a Python program or directly from the command line.\n+\n+You will learn about the Servers Architecture in the next chapter.\n+If you are interested in connecting the Server to your own application, refer to <<The REST API>>.\n+Or if you want to set up your own Server, then refer to <<How to run your own Headless Virtual Satellite Server>>.\n+\n+== Architecture of the Virtual Satellite Server\n+\n+In this chapter an overview and a more in depth description of the Servers Functionality and Components is given.\n+\n+=== Overview\n+\n+The Figure <<RestServerOverview>> gives an overview of the Server and its environment.\n+\n+.Overview of the Headless REST Server in the Virtual Satellite environment\n+[#RestServerOverview]\n+image::chapterServerOverview/REST_server_overview.png[Server Overview]\n+\n+A Server instance can maintain multiple _Server Repositories_, with each repository connected to a _git_ or _SVN repository_.\n+_REST Clients_ can access the Server using the HTTP commands GET, PUT, DELETE and POST. \n+So a Client can read or write into the Virtual Satellite model. \n+The server provides functionality for administrators, that can manipulate the server configuration, and users.\n+For that purpose it uses authentication and authorization.\n+// For authentication purposes it is planned to an LDAP server can be connected to the REST server.\n+// The connection can be secured via HTTPS.\n+Every user can only access certain provided Server Repositories.\n+\n+The connected SVN/git repositories can also be directly changed from _Clients using the Virtual Satellite UI_.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4MjU2Mw=="}, "originalCommit": {"oid": "9f6d96c6b96b03bafdcb047666dddcd118c59a4a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzgxNzAwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzoyMzo1MVrOH_QujA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzoyODoxOVrOH_Q5IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5NjM5Ng==", "bodyText": "Are you going to handle this TODO in this PR?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/875#discussion_r536096396", "createdAt": "2020-12-04T13:23:51Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+= Virtual Satellite 4 Core: Server Manual\n+:imagesdir: images\n+:title-logo-image: images/title/VirtualSatellite_Server.jpg\n+:toc:\n+:toclevels: 3\n+:experimental: \n+\n+== Introduction\n+\n+Virtual Satellite can be run headless as a server that allows you to connect Virtual Satellite to a network, e.g. the Internet.\n+The REST API can be used to access and manipulate the Virtual Satellite model remotely and without the desktop interface.\n+It provides the Model in form of Resources that can be manipulated via the standard HTTP commands GET, PUT, POST and DELETE.\n+\n+The Server functions as a general-purpose interface to connect Virtual Satellite to your own application.\n+For example the API could be called via JavaScript, that runs inside your Browser, from within a Python program or directly from the command line.\n+\n+You will learn about the Servers Architecture in the next chapter.\n+If you are interested in connecting the Server to your own application, refer to <<The REST API>>.\n+Or if you want to set up your own Server, then refer to <<How to run your own Headless Virtual Satellite Server>>.\n+\n+== Architecture of the Virtual Satellite Server\n+\n+In this chapter an overview and a more in depth description of the Servers Functionality and Components is given.\n+\n+=== Overview\n+\n+The Figure <<RestServerOverview>> gives an overview of the Server and its environment.\n+\n+.Overview of the Headless REST Server in the Virtual Satellite environment\n+[#RestServerOverview]\n+image::chapterServerOverview/REST_server_overview.png[Server Overview]\n+\n+A Server instance can maintain multiple _Server Repositories_, with each repository connected to a _git_ or _SVN repository_.\n+_REST Clients_ can access the Server using the HTTP commands GET, PUT, DELETE and POST. \n+So a Client can read or write into the Virtual Satellite model. \n+The server provides functionality for administrators, that can manipulate the server configuration, and users.\n+For that purpose it uses authentication and authorization.\n+// For authentication purposes it is planned to an LDAP server can be connected to the REST server.\n+// The connection can be secured via HTTPS.\n+Every user can only access certain provided Server Repositories.\n+\n+The connected SVN/git repositories can also be directly changed from _Clients using the Virtual Satellite UI_.\n+The server resolves these conflicts and also handles simultaneous changes from multiple REST clients.\n+The SVN/git repository is supposed to be the single source of truth in those cases.\n+\n+=== Components\n+\n+Figure <<RestServerComponents>> gives a more detailed view on the REST Server components.\n+\n+.Components of the Headless REST Server.\n+[#RestServerComponents]\n+image::chapterServerComponents/REST_server_components.png[Server Components]\n+\n+The server is divided into three main layers: the _REST API_ (View), _Server Controller_ and _Persistence_ (Model).\n+Between the API and the controller also is an _Access check_ layer.\n+\n+A REST Client can send a request to the provided _REST API_ that is partitioned into multiple Resources:\n+An _Admin Resource_, in which an administrator can manipulate the Server Configuration (_ServerConf_), e.g. add Repository Configurations (_RepoConf_),\n+and a _Repository Resource_. Each _Server Repository_ provided has its own _Subresource_.\n+\n+In the _Access check_ layer the credentials are obtained from the HTTP Header and it is checked if the requested Resources can be accessed.\n+The credentials are handed over to be used for user role handling in the Virtual Satellite _Data Model_.\n+\n+The _Server Controller_ handles requests to the _Admin Resource_. In its _ServerConf_ the server settings are stored.\n+Requests to a specific _Repository Subresource_ via the _Repository Resource_ directly change the underlying _Data Model_.\n+\n+The persistence level is composed of _Server Repositories_, each with a _Repository Configuration_ and a _Data Model_. \n+The _Data Model_ is connected to a _SVN_ or _git_ backend.\n+\n+== The REST API\n+\n+The REST API can be accessed via the \n+[subs=+quotes]\n+....\n+{*server adress*}:8000/rest\n+....\n+and currently supports multiple APIs for different purposes.\n+Each API can be accessed via it's *name* and *version number*:\n+[subs=+quotes]\n+....\n+{*server adress*}:8000/rest/{*name*}/{*version number*}\n+....\n+\n+Currently the following APIs are provided:\n+\n+* The Model API to access Virtual Satellite Models ({*name*} = *model*)\n+* The Management API for administrative tasks ({*name*} = *management*)\n+\n+The following documentation of the REST endpoints is automatically generated using Swagger.\n+For each API the swagger documentation also is provided via the REST API at:\n+[subs=+quotes]\n+....\n+{*server adress*}:8000/rest/{*name*}/{*version number*}/swagger.json or /swagger.yaml\n+....\n+\n+It can help you, if you want to connect Virtual Satellite to your own application.\n+E.g. it can be used to automatically generate your client, using Swaggers Codegen capabilities.\n+\n+#TODO: insert generated swagger documentation for the APIs here#", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f6d96c6b96b03bafdcb047666dddcd118c59a4a"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5OTEwNQ==", "bodyText": "No, I want to adress it in #834. But before that I would like to merge the two open swagger PRs.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/875#discussion_r536099105", "createdAt": "2020-12-04T13:28:19Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_Server_Manual.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+= Virtual Satellite 4 Core: Server Manual\n+:imagesdir: images\n+:title-logo-image: images/title/VirtualSatellite_Server.jpg\n+:toc:\n+:toclevels: 3\n+:experimental: \n+\n+== Introduction\n+\n+Virtual Satellite can be run headless as a server that allows you to connect Virtual Satellite to a network, e.g. the Internet.\n+The REST API can be used to access and manipulate the Virtual Satellite model remotely and without the desktop interface.\n+It provides the Model in form of Resources that can be manipulated via the standard HTTP commands GET, PUT, POST and DELETE.\n+\n+The Server functions as a general-purpose interface to connect Virtual Satellite to your own application.\n+For example the API could be called via JavaScript, that runs inside your Browser, from within a Python program or directly from the command line.\n+\n+You will learn about the Servers Architecture in the next chapter.\n+If you are interested in connecting the Server to your own application, refer to <<The REST API>>.\n+Or if you want to set up your own Server, then refer to <<How to run your own Headless Virtual Satellite Server>>.\n+\n+== Architecture of the Virtual Satellite Server\n+\n+In this chapter an overview and a more in depth description of the Servers Functionality and Components is given.\n+\n+=== Overview\n+\n+The Figure <<RestServerOverview>> gives an overview of the Server and its environment.\n+\n+.Overview of the Headless REST Server in the Virtual Satellite environment\n+[#RestServerOverview]\n+image::chapterServerOverview/REST_server_overview.png[Server Overview]\n+\n+A Server instance can maintain multiple _Server Repositories_, with each repository connected to a _git_ or _SVN repository_.\n+_REST Clients_ can access the Server using the HTTP commands GET, PUT, DELETE and POST. \n+So a Client can read or write into the Virtual Satellite model. \n+The server provides functionality for administrators, that can manipulate the server configuration, and users.\n+For that purpose it uses authentication and authorization.\n+// For authentication purposes it is planned to an LDAP server can be connected to the REST server.\n+// The connection can be secured via HTTPS.\n+Every user can only access certain provided Server Repositories.\n+\n+The connected SVN/git repositories can also be directly changed from _Clients using the Virtual Satellite UI_.\n+The server resolves these conflicts and also handles simultaneous changes from multiple REST clients.\n+The SVN/git repository is supposed to be the single source of truth in those cases.\n+\n+=== Components\n+\n+Figure <<RestServerComponents>> gives a more detailed view on the REST Server components.\n+\n+.Components of the Headless REST Server.\n+[#RestServerComponents]\n+image::chapterServerComponents/REST_server_components.png[Server Components]\n+\n+The server is divided into three main layers: the _REST API_ (View), _Server Controller_ and _Persistence_ (Model).\n+Between the API and the controller also is an _Access check_ layer.\n+\n+A REST Client can send a request to the provided _REST API_ that is partitioned into multiple Resources:\n+An _Admin Resource_, in which an administrator can manipulate the Server Configuration (_ServerConf_), e.g. add Repository Configurations (_RepoConf_),\n+and a _Repository Resource_. Each _Server Repository_ provided has its own _Subresource_.\n+\n+In the _Access check_ layer the credentials are obtained from the HTTP Header and it is checked if the requested Resources can be accessed.\n+The credentials are handed over to be used for user role handling in the Virtual Satellite _Data Model_.\n+\n+The _Server Controller_ handles requests to the _Admin Resource_. In its _ServerConf_ the server settings are stored.\n+Requests to a specific _Repository Subresource_ via the _Repository Resource_ directly change the underlying _Data Model_.\n+\n+The persistence level is composed of _Server Repositories_, each with a _Repository Configuration_ and a _Data Model_. \n+The _Data Model_ is connected to a _SVN_ or _git_ backend.\n+\n+== The REST API\n+\n+The REST API can be accessed via the \n+[subs=+quotes]\n+....\n+{*server adress*}:8000/rest\n+....\n+and currently supports multiple APIs for different purposes.\n+Each API can be accessed via it's *name* and *version number*:\n+[subs=+quotes]\n+....\n+{*server adress*}:8000/rest/{*name*}/{*version number*}\n+....\n+\n+Currently the following APIs are provided:\n+\n+* The Model API to access Virtual Satellite Models ({*name*} = *model*)\n+* The Management API for administrative tasks ({*name*} = *management*)\n+\n+The following documentation of the REST endpoints is automatically generated using Swagger.\n+For each API the swagger documentation also is provided via the REST API at:\n+[subs=+quotes]\n+....\n+{*server adress*}:8000/rest/{*name*}/{*version number*}/swagger.json or /swagger.yaml\n+....\n+\n+It can help you, if you want to connect Virtual Satellite to your own application.\n+E.g. it can be used to automatically generate your client, using Swaggers Codegen capabilities.\n+\n+#TODO: insert generated swagger documentation for the APIs here#", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5NjM5Ng=="}, "originalCommit": {"oid": "9f6d96c6b96b03bafdcb047666dddcd118c59a4a"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 530, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}