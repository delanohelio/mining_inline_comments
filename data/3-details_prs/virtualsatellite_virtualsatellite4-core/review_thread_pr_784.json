{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNDY0Mjg2", "number": 784, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozMDoyOFrOEsvMfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTozNDozNFrOEtiz7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQ2MDQ2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/snippet/UiSnippetCustomRequirementsAttributeTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozMDoyOFrOHgJJYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozMDoyOFrOHgJJYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NjMzNg==", "bodyText": "The 2 probably could use a constant rather than just the comment.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/784#discussion_r503466336", "createdAt": "2020-10-12T18:30:28Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/snippet/UiSnippetCustomRequirementsAttributeTable.java", "diffHunk": "@@ -167,6 +166,7 @@ protected void createTableColumns(EditingDomain editingDomain) {\n \r\n \t\t\t// Add necessary table columns\r\n \t\t\tfor (int i = 0; i < maxNumberAttributes; i++) {\r\n+\t\t\t\tint tableIndexColumn = i + 2; // status + verification column\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f023f17e16afd0ba655c1d9697c572cf14658532"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzU2NTcxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/celleditor/DefaultVerificationTypeReferenceCellEditingSupport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTowODoyN1rOHgKIWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyNTozNFrOHgY1bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MjQ1Nw==", "bodyText": "There seems to be quite a bit of if branching going on in this method.\nCould we maybe move this if block into the above if?\nThen we could also move the caType declaration inside and could drop the caType != null in the if.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/784#discussion_r503482457", "createdAt": "2020-10-12T19:08:27Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/celleditor/DefaultVerificationTypeReferenceCellEditingSupport.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.ui.celleditor;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.DefaultVerification;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.VerificationType;\r\n+import de.dlr.sc.virsat.uiengine.ui.cellEditor.aproperties.ReferencePropertyCellEditingSupport;\r\n+\r\n+/**\r\n+ * Class simply using bean setters for default verification type\r\n+ *\r\n+ */\r\n+public class DefaultVerificationTypeReferenceCellEditingSupport extends ReferencePropertyCellEditingSupport {\r\n+\r\n+\t/**\r\n+\t * @param editingDomain\r\n+\t * @param viewer\r\n+\t * @param property\r\n+\t */\r\n+\tpublic DefaultVerificationTypeReferenceCellEditingSupport(EditingDomain editingDomain, ColumnViewer viewer,\r\n+\t\t\tReferenceProperty property) {\r\n+\t\tsuper(editingDomain, viewer, property);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected Command createSetCommand(Object element, Object userInputValue) {\r\n+\t\tCategoryAssignment caDefaultVerification = null;\r\n+\t\tCategoryAssignment caType = null;\r\n+\t\tif (element instanceof CategoryAssignment) {\r\n+\t\t\tcaDefaultVerification = (CategoryAssignment) element;\r\n+\t\t} else if (element instanceof ComposedPropertyInstance) {\r\n+\t\t\tcaDefaultVerification = ((ComposedPropertyInstance) element).getTypeInstance();\r\n+\t\t} else {\r\n+\t\t\treturn super.createSetCommand(element, userInputValue);\r\n+\t\t}\r\n+\t\tif (userInputValue instanceof CategoryAssignment) {\r\n+\t\t\tcaType = (CategoryAssignment) userInputValue;\r\n+\t\t}\r\n+\t\tif (caDefaultVerification.getType().getFullQualifiedName().equals(DefaultVerification.FULL_QUALIFIED_CATEGORY_NAME)\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f023f17e16afd0ba655c1d9697c572cf14658532"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MjA2Mg==", "bodyText": "Not really sure if it's better like this, because we now still have to check if caType is a CA and then also check if it is the right CA... all in one IF... but it's less branching now :D", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/784#discussion_r503572062", "createdAt": "2020-10-12T22:49:47Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/celleditor/DefaultVerificationTypeReferenceCellEditingSupport.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.ui.celleditor;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.DefaultVerification;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.VerificationType;\r\n+import de.dlr.sc.virsat.uiengine.ui.cellEditor.aproperties.ReferencePropertyCellEditingSupport;\r\n+\r\n+/**\r\n+ * Class simply using bean setters for default verification type\r\n+ *\r\n+ */\r\n+public class DefaultVerificationTypeReferenceCellEditingSupport extends ReferencePropertyCellEditingSupport {\r\n+\r\n+\t/**\r\n+\t * @param editingDomain\r\n+\t * @param viewer\r\n+\t * @param property\r\n+\t */\r\n+\tpublic DefaultVerificationTypeReferenceCellEditingSupport(EditingDomain editingDomain, ColumnViewer viewer,\r\n+\t\t\tReferenceProperty property) {\r\n+\t\tsuper(editingDomain, viewer, property);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected Command createSetCommand(Object element, Object userInputValue) {\r\n+\t\tCategoryAssignment caDefaultVerification = null;\r\n+\t\tCategoryAssignment caType = null;\r\n+\t\tif (element instanceof CategoryAssignment) {\r\n+\t\t\tcaDefaultVerification = (CategoryAssignment) element;\r\n+\t\t} else if (element instanceof ComposedPropertyInstance) {\r\n+\t\t\tcaDefaultVerification = ((ComposedPropertyInstance) element).getTypeInstance();\r\n+\t\t} else {\r\n+\t\t\treturn super.createSetCommand(element, userInputValue);\r\n+\t\t}\r\n+\t\tif (userInputValue instanceof CategoryAssignment) {\r\n+\t\t\tcaType = (CategoryAssignment) userInputValue;\r\n+\t\t}\r\n+\t\tif (caDefaultVerification.getType().getFullQualifiedName().equals(DefaultVerification.FULL_QUALIFIED_CATEGORY_NAME)\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MjQ1Nw=="}, "originalCommit": {"oid": "f023f17e16afd0ba655c1d9697c572cf14658532"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMzM3NQ==", "bodyText": "Hmm yeah, it looked nicer in my head.\nIn the future we should maybe consider making a helper function in CategoryAssignmentHelper to check if an object is a ca & has the correct type given by a fqn.\nI believe we probably have to check both in a lot of places.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/784#discussion_r503723375", "createdAt": "2020-10-13T07:25:34Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/celleditor/DefaultVerificationTypeReferenceCellEditingSupport.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.ui.celleditor;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.DefaultVerification;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.VerificationType;\r\n+import de.dlr.sc.virsat.uiengine.ui.cellEditor.aproperties.ReferencePropertyCellEditingSupport;\r\n+\r\n+/**\r\n+ * Class simply using bean setters for default verification type\r\n+ *\r\n+ */\r\n+public class DefaultVerificationTypeReferenceCellEditingSupport extends ReferencePropertyCellEditingSupport {\r\n+\r\n+\t/**\r\n+\t * @param editingDomain\r\n+\t * @param viewer\r\n+\t * @param property\r\n+\t */\r\n+\tpublic DefaultVerificationTypeReferenceCellEditingSupport(EditingDomain editingDomain, ColumnViewer viewer,\r\n+\t\t\tReferenceProperty property) {\r\n+\t\tsuper(editingDomain, viewer, property);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected Command createSetCommand(Object element, Object userInputValue) {\r\n+\t\tCategoryAssignment caDefaultVerification = null;\r\n+\t\tCategoryAssignment caType = null;\r\n+\t\tif (element instanceof CategoryAssignment) {\r\n+\t\t\tcaDefaultVerification = (CategoryAssignment) element;\r\n+\t\t} else if (element instanceof ComposedPropertyInstance) {\r\n+\t\t\tcaDefaultVerification = ((ComposedPropertyInstance) element).getTypeInstance();\r\n+\t\t} else {\r\n+\t\t\treturn super.createSetCommand(element, userInputValue);\r\n+\t\t}\r\n+\t\tif (userInputValue instanceof CategoryAssignment) {\r\n+\t\t\tcaType = (CategoryAssignment) userInputValue;\r\n+\t\t}\r\n+\t\tif (caDefaultVerification.getType().getFullQualifiedName().equals(DefaultVerification.FULL_QUALIFIED_CATEGORY_NAME)\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MjQ1Nw=="}, "originalCommit": {"oid": "f023f17e16afd0ba655c1d9697c572cf14658532"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTc3MDQ0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/provider/RequirementsAttributeLabelProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowNDowM1rOHhXqzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowNDowM1rOHhXqzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1Mjg0NQ==", "bodyText": "Apparently wrong javadoc", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/784#discussion_r504752845", "createdAt": "2020-10-14T15:04:03Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/provider/RequirementsAttributeLabelProvider.java", "diffHunk": "@@ -207,23 +207,17 @@ protected void cleanUpAttribue(AttributeValue att) {\n \t * @param req the requirement for which a trace label is created\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c013533bb7e316d1b45f95a64b1d00d06cbf68b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTkxNzI2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/celleditor/ExisitenceVerificationTargetEditingSupport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTozNDozNFrOHhZGiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTozNDozNFrOHhZGiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NjMyOA==", "bodyText": "Outdated javadoc?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/784#discussion_r504776328", "createdAt": "2020-10-14T15:34:34Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/celleditor/ExisitenceVerificationTargetEditingSupport.java", "diffHunk": "@@ -21,21 +21,20 @@\n import org.eclipse.ui.PlatformUI;\r\n import org.eclipse.ui.forms.widgets.FormToolkit;\r\n \r\n-import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.AProperty;\r\n import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n-import de.dlr.sc.virsat.model.extension.requirements.model.Requirement;\r\n-import de.dlr.sc.virsat.model.extension.requirements.ui.snippet.dialog.RequirementsTraceEditingDialog;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.ExistenceVerification;\r\n+import de.dlr.sc.virsat.model.extension.requirements.ui.snippet.dialog.ExistenceVerificationTargetEditingDialog;\r\n import de.dlr.sc.virsat.project.editingDomain.VirSatEditingDomainRegistry;\r\n import de.dlr.sc.virsat.uiengine.ui.cellEditor.aproperties.APropertyCellEditingSupport;\r\n \r\n /**\r\n  * Implements a customized editing support for requirement trace elements\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c013533bb7e316d1b45f95a64b1d00d06cbf68b"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 641, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}