{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzE3NTg2", "number": 590, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo1MToyMlrOD5Xh2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOToyNDoyNVrOELBxJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDgwOTIwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/editingDomain/VirSatTransactionalEditingDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo1MToyMlrOGQl08w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo1MToyMlrOGQl08w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MDE2Mw==", "bodyText": "I think this could be replaced by a method from VIrSatProjectCommons. As far as i recal there is a method isDvlmResource. Please check.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/590#discussion_r420050163", "createdAt": "2020-05-05T11:51:22Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/editingDomain/VirSatTransactionalEditingDomain.java", "diffHunk": "@@ -460,7 +460,8 @@ protected void saveResource(Resource resource, boolean supressRemoveDanglingRefe\n \t\t\t}\r\n \t\t\t\r\n \t\t\t// Remove dangling references only if this the user has write access to this resource\r\n-\t\t\tboolean writeRemovedDanglingReferences = !supressRemoveDanglingReferences && virSatResourceSet.hasWritePermission(resource); \r\n+\t\t\tboolean isDvlmResource = resource.getURI().fileExtension().contains(VirSatProjectCommons.FILENAME_EXTENSION);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5be7cd42069de26b431bf010b4c9dec94acbc8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDgxNTY4OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo1MzoxN1rOGQl46Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo1MzoxN1rOGQl46Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MTE3Nw==", "bodyText": "Same here, please check if this code could be bound or replaced by using VirSatProjectCommons. Anyway, if not, check if the TED could call this method instead of implementing it by itself again (i.e. avoiding code-duplication)", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/590#discussion_r420051177", "createdAt": "2020-05-05T11:53:17Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "diffHunk": "@@ -717,6 +717,30 @@ private Resource getAlreadyCreatedResource(URI fileUri) {\n \t\t}\r\n \t\treturn null;\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * Get a list of all DVLM resources\r\n+\t * @return the list of DVLM resources\r\n+\t */\r\n+\tpublic List<Resource> getDvlmResources() {\r\n+\t\tList<Resource> dvlmResources = new ArrayList<Resource>();\r\n+\t\tfor (Resource resource : getResources()) {\r\n+\t\t\tif (isDvlmResource(resource)) {\r\n+\t\t\t\tdvlmResources.add(resource);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn dvlmResources;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Returns if the given resource is a DVLM resource\r\n+\t * @param resource the resource\r\n+\t * @return if DVLM resource\r\n+\t */\r\n+\tpublic boolean isDvlmResource(Resource resource) {\r\n+\t\treturn resource.getURI().fileExtension().contains(VirSatProjectCommons.FILENAME_EXTENSION);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5be7cd42069de26b431bf010b4c9dec94acbc8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDgyMzg3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo1NTo0MlrOGQl9ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyNTowMlrOGUMKtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MjQxOQ==", "bodyText": "I am not sure, if this is the correct way of dealing with resource problems. In case a resource is loaded via this resourceSet potential problems should be ahndled somewhere. Where would problems be handled for non-DVLM resources if not here? In the corresponding UI e.g. a diagram editor?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/590#discussion_r420052419", "createdAt": "2020-05-05T11:55:42Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "diffHunk": "@@ -1151,7 +1175,9 @@ public Resource createResource(URI uri) {\n \t */\r\n \tpublic boolean updateDiagnostic(Resource resource) {\r\n \t\tboolean changes = false;\r\n-\t\tif (resource != null) {\r\n+\t\t// Only run diagnostic on DVLM files as other resource might result in a huge chain of\r\n+\t\t// resource that have to be resolved (e.g. diagrams also have references to the diagram infrastructure...)\r\n+\t\tif (resource != null && isDvlmResource(resource)) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5be7cd42069de26b431bf010b4c9dec94acbc8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyNDA1Mw==", "bodyText": "Yes, to be onest I wouldn't expect an editing domain to automatically check for resource problems. If you have broken files on your computer's file system, then you still see them only when trying to open the file... And problems in resources usally happen if something goes wrong in the editor...\nFor me the most problematic point here is, however, that this operation resolves all links... also to unloaded files. Thus, in each change on the file system (e.g. save) there are lots of IO operations going on. I saw cases where suddenly over 300 resources were loaded... Then nothing worked anymore.\nI like that we're handling resource problems for our DVLM files, but IMHO that only works with a clear defined scope. An editing domain, on the other hand, should not be bound to a limited file scope.\nIf you prefer on also checking non-DVLM resources for problems I would rather do that on loaded resources only... Especially as resources such as LazyLinkingResources are desgined to be lazy-linking... Just imagine a browser would try to resolve all references in the internet.... :D If you have a differnt option let's maybe discuss that in aphone call ;)", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/590#discussion_r423824053", "createdAt": "2020-05-12T15:25:02Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "diffHunk": "@@ -1151,7 +1175,9 @@ public Resource createResource(URI uri) {\n \t */\r\n \tpublic boolean updateDiagnostic(Resource resource) {\r\n \t\tboolean changes = false;\r\n-\t\tif (resource != null) {\r\n+\t\t// Only run diagnostic on DVLM files as other resource might result in a huge chain of\r\n+\t\t// resource that have to be resolved (e.g. diagrams also have references to the diagram infrastructure...)\r\n+\t\tif (resource != null && isDvlmResource(resource)) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MjQxOQ=="}, "originalCommit": {"oid": "1e5be7cd42069de26b431bf010b4c9dec94acbc8"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDgyNzczOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo1NzowM1rOGQmAWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyNzozMVrOGUMR1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MzA4Mw==", "bodyText": "Why not placing this code into the VirSatEcoreUtils?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/590#discussion_r420053083", "createdAt": "2020-05-05T11:57:03Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "diffHunk": "@@ -1297,4 +1323,15 @@ public void loadAllResources() {\n \t\tgetRepositoryResource();\r\n \t\tEcoreUtil.resolveAll(this);\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * Resolve all DVLM resources in this resource set\r\n+\t */\r\n+\tpublic void resolveAllDvlmResources() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5be7cd42069de26b431bf010b4c9dec94acbc8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyNTg3Nw==", "bodyText": "I just considered it to be related to the loadAllResources() in the resources set... But I can of course also move it...", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/590#discussion_r423825877", "createdAt": "2020-05-12T15:27:31Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "diffHunk": "@@ -1297,4 +1323,15 @@ public void loadAllResources() {\n \t\tgetRepositoryResource();\r\n \t\tEcoreUtil.resolveAll(this);\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * Resolve all DVLM resources in this resource set\r\n+\t */\r\n+\tpublic void resolveAllDvlmResources() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MzA4Mw=="}, "originalCommit": {"oid": "1e5be7cd42069de26b431bf010b4c9dec94acbc8"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDg0MDQzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/structure/VirSatProjectResourceChangeListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjowMDo0M1rOGQmICw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTozMDozMVrOGUMapw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1NTA1MQ==", "bodyText": "This is also a dificult one. The whole story to the workspace synchtronizer is, to detect if there are changes to a reosurce of the reosurceset which have been introduced somewhere on the workspace. In that case, the reosurce is out of sync with the loaded reosurce. EMF usually handles this in the generated editors. In VirSat we decided to handle this centrally, to also manage intended changes. E.g. when a resource is explicitly saved, which creates a workspace resource change event as well. These intended changes should obviously not lead to a resource reload. So at least we need to have a convention, agreement how to deal with non dvlm resources. In this proposed implementation, specific editors have to deal with reloading the resources.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/590#discussion_r420055051", "createdAt": "2020-05-05T12:00:43Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/structure/VirSatProjectResourceChangeListener.java", "diffHunk": "@@ -122,10 +122,12 @@ public boolean visit(IResourceDelta delta) {\n \t\t\t// workspace job as we will need the editing domain to handle resource changes.\r\n \t\t\t// This way the current job calling us can safely finish and the new job\r\n \t\t\t// will handle the actual changes.\r\n-\t\t\tJob job = new WorkspaceSynchronizerJob(addedDvlmResources, removedDvlmResources, changedDvlmResources, counter++);\r\n-\t\t\tString changeList = printLists(addedDvlmResources, removedDvlmResources, changedDvlmResources);\r\n-\t\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VirSatProjectResourceChangeListener: Scheduling \" + job.getName() + \". \\n\" + changeList));\r\n-\t\t\tjob.schedule();\r\n+\t\t\tif (!addedDvlmResources.isEmpty() || !removedDvlmResources.isEmpty() || !changedDvlmResources.isEmpty()) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5be7cd42069de26b431bf010b4c9dec94acbc8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyODEzNQ==", "bodyText": "I have no problem at all iwth the WorkspaceSynchronizer. I actually like it :) I just want to make sure that is only triggered if there is actually a relvant change on the project. With the current implementation the WorkspaceSychonizer run into an enless loop when I linked a folder into a VirSat project... Whenever there are new reosurces or changed resources on the file system these will be in the lists (addedDvlmResources, changedDvlmResources, removedDvlmResources). Guess I should remove the \"Dvlm\" from the list names as with my last PR these lists also contain changes to non-DVLM files", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/590#discussion_r423828135", "createdAt": "2020-05-12T15:30:31Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/structure/VirSatProjectResourceChangeListener.java", "diffHunk": "@@ -122,10 +122,12 @@ public boolean visit(IResourceDelta delta) {\n \t\t\t// workspace job as we will need the editing domain to handle resource changes.\r\n \t\t\t// This way the current job calling us can safely finish and the new job\r\n \t\t\t// will handle the actual changes.\r\n-\t\t\tJob job = new WorkspaceSynchronizerJob(addedDvlmResources, removedDvlmResources, changedDvlmResources, counter++);\r\n-\t\t\tString changeList = printLists(addedDvlmResources, removedDvlmResources, changedDvlmResources);\r\n-\t\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VirSatProjectResourceChangeListener: Scheduling \" + job.getName() + \". \\n\" + changeList));\r\n-\t\t\tjob.schedule();\r\n+\t\t\tif (!addedDvlmResources.isEmpty() || !removedDvlmResources.isEmpty() || !changedDvlmResources.isEmpty()) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1NTA1MQ=="}, "originalCommit": {"oid": "1e5be7cd42069de26b431bf010b4c9dec94acbc8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTk4MTAzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/resources/VirSatResourceSetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOToyMTo1NFrOGsaXlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOToyMTo1NFrOGsaXlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyMjU0OQ==", "bodyText": "Can probably do this a bit simpler with a StructuralInstantiator", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/590#discussion_r449222549", "createdAt": "2020-07-02T19:21:54Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/resources/VirSatResourceSetTest.java", "diffHunk": "@@ -588,6 +591,131 @@ public void testLoadAllResources() {\n \t\tassertTrue(\"Resource got deserialized from persistant storage\", resSei2_1_1.isLoaded());\r\n \t}\r\n \t\r\n+\t@Test\r\n+\tpublic void testLoadAllDvlmResources() throws IOException {\r\n+\t\tVirSatResourceSet resSet = VirSatResourceSet.createUnmanagedResourceSet(testProject);\r\n+\t\tresSet.initializeModelsAndResourceSet();\r\n+\t\t\r\n+\t\tRepository repo = resSet.getRepository();\r\n+\t\t\r\n+\t\tStructuralElement se = StructuralFactory.eINSTANCE.createStructuralElement();\r\n+\t\tse.setIsApplicableForAll(true);\r\n+\t\t\r\n+\t\t//CHECKSTYLE:OFF\r\n+\t\tStructuralElementInstance sei1 = StructuralFactory.eINSTANCE.createStructuralElementInstance();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45004ba6153639c4d6ef53771c565665d57f157b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTk4NzU3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/resources/VirSatResourceSetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOToyNDoyNVrOGsabmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOToyNDoyNVrOGsabmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyMzU3Ng==", "bodyText": "We can probably simplify this with assertThat(message, resSet.getDvlmResources(), hasItems(...)", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/590#discussion_r449223576", "createdAt": "2020-07-02T19:24:25Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/resources/VirSatResourceSetTest.java", "diffHunk": "@@ -588,6 +591,131 @@ public void testLoadAllResources() {\n \t\tassertTrue(\"Resource got deserialized from persistant storage\", resSei2_1_1.isLoaded());\r\n \t}\r\n \t\r\n+\t@Test\r\n+\tpublic void testLoadAllDvlmResources() throws IOException {\r\n+\t\tVirSatResourceSet resSet = VirSatResourceSet.createUnmanagedResourceSet(testProject);\r\n+\t\tresSet.initializeModelsAndResourceSet();\r\n+\t\t\r\n+\t\tRepository repo = resSet.getRepository();\r\n+\t\t\r\n+\t\tStructuralElement se = StructuralFactory.eINSTANCE.createStructuralElement();\r\n+\t\tse.setIsApplicableForAll(true);\r\n+\t\t\r\n+\t\t//CHECKSTYLE:OFF\r\n+\t\tStructuralElementInstance sei1 = StructuralFactory.eINSTANCE.createStructuralElementInstance();\r\n+\t\tStructuralElementInstance sei2 = StructuralFactory.eINSTANCE.createStructuralElementInstance();\r\n+\t\tStructuralElementInstance sei2_1 = StructuralFactory.eINSTANCE.createStructuralElementInstance();\r\n+\t\tStructuralElementInstance sei2_1_1 = StructuralFactory.eINSTANCE.createStructuralElementInstance();\r\n+\t\tsei1.setType(se);\r\n+\t\tsei2.setType(se);\r\n+\t\tsei2_1.setType(se);\r\n+\t\tsei2_1_1.setType(se);\r\n+\t\t\r\n+\t\tResource resSei1 = resSet.getAndAddStructuralElementInstanceResource(sei1);\r\n+\t\tResource resSei2 = resSet.getAndAddStructuralElementInstanceResource(sei2);\r\n+\t\tResource resSei2_1 = resSet.getAndAddStructuralElementInstanceResource(sei2_1);\r\n+\t\tResource resSei2_1_1 = resSet.getAndAddStructuralElementInstanceResource(sei2_1_1);\r\n+\t\t\r\n+\t\t//CHECKSTYLE:ON\r\n+\t\t\r\n+\t\t// Create resource \r\n+\t\tURI uri = URI.createPlatformResourceURI(\"/testProject_VirSatResourceSetTest/test.ecore\", true);\r\n+\t\tResource newResource = new XMIResourceImpl(uri);\r\n+\t\tnewResource.save(Collections.EMPTY_MAP);\r\n+\t\tResource nonDvlmResourceReload = resSet.getResource(uri, true);\r\n+\t\t\r\n+\t\trepo.getRootEntities().add(sei1);\r\n+\t\trepo.getRootEntities().add(sei2);\r\n+\r\n+\t\tsei2.getChildren().add(sei2_1);\r\n+\t\tsei2_1.getChildren().add(sei2_1_1);\r\n+\t\t\r\n+\t\tresSet.saveAllResources(new NullProgressMonitor(), UserRegistry.getInstance());\r\n+\t\t\r\n+\t\tresSei1.unload();\r\n+\t\tresSei2.unload();\r\n+\t\tresSei2_1.unload();\r\n+\t\tresSei2_1_1.unload();\r\n+\t\tnonDvlmResourceReload.unload();\r\n+\t\t\r\n+\t\tassertFalse(\"Resource should be unloaded\", resSei1.isLoaded());\r\n+\t\tassertFalse(\"Resource should be unloaded\", resSei2.isLoaded());\r\n+\t\tassertFalse(\"Resource should be unloaded\", resSei2_1.isLoaded());\r\n+\t\tassertFalse(\"Resource should be unloaded\", resSei2_1_1.isLoaded());\r\n+\t\tassertFalse(\"Resource should be unloaded\", nonDvlmResourceReload.isLoaded());\r\n+\t\t\r\n+\t\tresSet.loadAllDvlmResources();\r\n+\t\t\r\n+\t\tassertTrue(\"Resource got deserialized from persistant storage\", resSei1.isLoaded());\r\n+\t\tassertTrue(\"Resource got deserialized from persistant storage\", resSei2.isLoaded());\r\n+\t\tassertTrue(\"Resource got deserialized from persistant storage\", resSei2_1.isLoaded());\r\n+\t\tassertTrue(\"Resource got deserialized from persistant storage\", resSei2_1_1.isLoaded());\r\n+\t\tassertFalse(\"Non DVLM resource in resource set should not be loaded\", nonDvlmResourceReload.isLoaded());\r\n+\t\t\r\n+\t\t// now the final test case, unloading all data and then see if they get properly reloaded\r\n+\t\tresSet.getResources().forEach((res) -> res.unload());\r\n+\t\t\r\n+\t\tresSet.loadAllResources();\r\n+\t\t\r\n+\t\tassertTrue(\"Resource got deserialized from persistant storage\", resSei1.isLoaded());\r\n+\t\tassertTrue(\"Resource got deserialized from persistant storage\", resSei2.isLoaded());\r\n+\t\tassertTrue(\"Resource got deserialized from persistant storage\", resSei2_1.isLoaded());\r\n+\t\tassertTrue(\"Resource got deserialized from persistant storage\", resSei2_1_1.isLoaded());\r\n+\t\tassertFalse(\"Non DVLM resource in resource set should not be loaded\", nonDvlmResourceReload.isLoaded());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testGetDvlmResources() throws IOException, CoreException {\r\n+\t\tVirSatResourceSet resSet = VirSatResourceSet.createUnmanagedResourceSet(testProject);\r\n+\t\tresSet.initializeModelsAndResourceSet();\r\n+\t\t\r\n+\t\tRepository repo = resSet.getRepository();\r\n+\t\t\r\n+\t\tStructuralElement se = StructuralFactory.eINSTANCE.createStructuralElement();\r\n+\t\tse.setIsApplicableForAll(true);\r\n+\t\t\r\n+\t\t//CHECKSTYLE:OFF\r\n+\t\tStructuralElementInstance sei1 = StructuralFactory.eINSTANCE.createStructuralElementInstance();\r\n+\t\tStructuralElementInstance sei2 = StructuralFactory.eINSTANCE.createStructuralElementInstance();\r\n+\t\tStructuralElementInstance sei2_1 = StructuralFactory.eINSTANCE.createStructuralElementInstance();\r\n+\t\tStructuralElementInstance sei2_1_1 = StructuralFactory.eINSTANCE.createStructuralElementInstance();\r\n+\t\tsei1.setType(se);\r\n+\t\tsei2.setType(se);\r\n+\t\tsei2_1.setType(se);\r\n+\t\tsei2_1_1.setType(se);\r\n+\t\t\r\n+\t\tResource resSei1 = resSet.getAndAddStructuralElementInstanceResource(sei1);\r\n+\t\tResource resSei2 = resSet.getAndAddStructuralElementInstanceResource(sei2);\r\n+\t\tResource resSei2_1 = resSet.getAndAddStructuralElementInstanceResource(sei2_1);\r\n+\t\tResource resSei2_1_1 = resSet.getAndAddStructuralElementInstanceResource(sei2_1_1);\r\n+\t\t//CHECKSTYLE:ON\r\n+\t\t\r\n+\t\trepo.getRootEntities().add(sei1);\r\n+\t\trepo.getRootEntities().add(sei2);\r\n+\r\n+\t\tsei2.getChildren().add(sei2_1);\r\n+\t\tsei2_1.getChildren().add(sei2_1_1);\r\n+\t\t\r\n+\t\tresSet.saveAllResources(new NullProgressMonitor(), UserRegistry.getInstance());\r\n+\t\t\r\n+\t\tresSei1.unload();\r\n+\t\tresSei2.unload();\r\n+\t\tresSei2_1.unload();\r\n+\t\tresSei2_1_1.unload();\r\n+\t\t\r\n+\t\tURI uri = URI.createPlatformResourceURI(\"/testProject_VirSatResourceSetTest/test.ecore\", true);\r\n+\t\tResource newResource = new XMIResourceImpl(uri);\r\n+\t\tnewResource.save(Collections.EMPTY_MAP);\r\n+\t\tResource nonDvlmResourceReload = resSet.getResource(uri, true);\r\n+\t\t\r\n+\t\tassertTrue(\"Should contain DVLM resource\", resSet.getDvlmResources().contains(resSei1));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45004ba6153639c4d6ef53771c565665d57f157b"}, "originalPosition": 139}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 732, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}