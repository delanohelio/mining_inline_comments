{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MTUwNDE1", "number": 644, "title": "Added test cases for validation", "bodyText": "Testing name validation of Seis and Cas\nTesting linking between problem markers and editors (if you double click on a marker, the correct editor is opened)\nTesting existance of correct warning and error icons in GenericEditor\nTesting correct tooltips\nTesting focused expansion on all sections with warnings/errors\nCreated SwtBotHyperlink class because SwtBot only supports Links natively which are somehow different from Hyperlinks in SWT. The text link used to focus expand only sections with warnings/errors uses Hyperlinks.\n\nThe tests are structured into 4 cases:\n\nTesting of Sei name validation\nTesting of Ca name validation\nTesting of warnings in generic editor\nTesting of errors in generic editor\n\nMore combinations would be possible this should cover most cases without leading to too much SWTBot testing time.\nCloses #639", "createdAt": "2020-06-16T11:25:47Z", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644", "merged": true, "mergeCommit": {"oid": "a2f2e99b4579ba5f6565e9263bb9727229039068"}, "closed": true, "closedAt": "2020-06-18T12:01:15Z", "author": {"login": "SaMuellerDLR"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrwIMSgH2gAyNDM1MTUwNDE1Ojc2MDBiYjZlZmM0YjUzYzY5ZDZlOTI5YTgyNWMyNjQyZjdlMWFhODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsaYAPAFqTQzMzA2NjY0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7600bb6efc4b53c69d6e929a825c2642f7e1aa88", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/7600bb6efc4b53c69d6e929a825c2642f7e1aa88", "committedDate": "2020-06-16T07:29:13Z", "message": "Added test cases for UI testing of validation - (Task #639)\n\n- Testing validation of names on UI level\n- Testing correct linking between elements in problem view and editors\n- Testing icons appearing in editor\n- Testing collapsing of all sections except for those with warning /\nerror\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb64b4c4bd71569e26b16b0c197e261d6a5f8515", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/fb64b4c4bd71569e26b16b0c197e261d6a5f8515", "committedDate": "2020-06-16T10:47:23Z", "message": "Fixed timing issues - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0947726fb9a1e4be8b45ae56e376a48b1c9349d", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c0947726fb9a1e4be8b45ae56e376a48b1c9349d", "committedDate": "2020-06-16T10:58:01Z", "message": "Reenable other tests - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea2b0fd63ae215bd64617a360d7a327325522fea", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ea2b0fd63ae215bd64617a360d7a327325522fea", "committedDate": "2020-06-16T13:23:35Z", "message": "Added wait - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cab3f3778bd43d720217e1323f2eb5f00b39e86f", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/cab3f3778bd43d720217e1323f2eb5f00b39e86f", "committedDate": "2020-06-16T13:46:35Z", "message": "Improving stability - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c870863fd294eecffa755bf4dce93c787521ec1f", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c870863fd294eecffa755bf4dce93c787521ec1f", "committedDate": "2020-06-16T14:23:35Z", "message": "Improving stability - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0c66eca06efe6a40a031a78e2ef4a10d6fce6aa", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c0c66eca06efe6a40a031a78e2ef4a10d6fce6aa", "committedDate": "2020-06-16T14:44:27Z", "message": "Improving stability - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8acd0c256b6017373fd817a116dc20102b44f78", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f8acd0c256b6017373fd817a116dc20102b44f78", "committedDate": "2020-06-16T16:29:32Z", "message": "Tyring out without keyboard - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94f1bf7fd1695d97d278bf8488b64f92af3a7e6b", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/94f1bf7fd1695d97d278bf8488b64f92af3a7e6b", "committedDate": "2020-06-16T18:01:40Z", "message": "Added LF to CR keystrokes... - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16ee0082bf8e1d274666ae19a212a0687418ee8c", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/16ee0082bf8e1d274666ae19a212a0687418ee8c", "committedDate": "2020-06-16T18:18:42Z", "message": "Directly using SWT... - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b4192a93a09ca2b0a569de9b04c9315578dcd67", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/2b4192a93a09ca2b0a569de9b04c9315578dcd67", "committedDate": "2020-06-16T18:34:21Z", "message": "Split up keystrokes - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b02ee94f4294d1435773a73d367660d5db661f36", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b02ee94f4294d1435773a73d367660d5db661f36", "committedDate": "2020-06-16T21:15:36Z", "message": "Added ESC key - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3633deca8db661b5fdb41abb51a2c7d5f6ba27ce", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3633deca8db661b5fdb41abb51a2c7d5f6ba27ce", "committedDate": "2020-06-16T21:55:24Z", "message": "Only doing LF + ESC - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eae2df9769ab7cf078d367b05e504edf1beaa31d", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/eae2df9769ab7cf078d367b05e504edf1beaa31d", "committedDate": "2020-06-16T22:19:03Z", "message": "Using regular click  - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad958355065f79cddbcb15c60090ab895f939c60", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ad958355065f79cddbcb15c60090ab895f939c60", "committedDate": "2020-06-16T22:45:00Z", "message": "Directly using carriage return - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71cf30f120f4f61a1cf4e1752c56eb8301068cc2", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/71cf30f120f4f61a1cf4e1752c56eb8301068cc2", "committedDate": "2020-06-16T23:19:31Z", "message": "Workaround by nameshortening - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e3e39f8d5c9ecd445e3ecd5f68e0e52c20de0f7", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/6e3e39f8d5c9ecd445e3ecd5f68e0e52c20de0f7", "committedDate": "2020-06-16T23:55:04Z", "message": "Executing interlocked - (Task #639).\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae1da6296d7c9a88de2ac8e31d6bd2d39fb84b0d", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ae1da6296d7c9a88de2ac8e31d6bd2d39fb84b0d", "committedDate": "2020-06-17T00:05:22Z", "message": "Using click + keyboard - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "755db64c448f82a0df9c15409afcabe9dd628674", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/755db64c448f82a0df9c15409afcabe9dd628674", "committedDate": "2020-06-17T00:33:03Z", "message": "Multiple clicks - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e6dab9342ec7842211941a70ab3cfe770ff43ca", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8e6dab9342ec7842211941a70ab3cfe770ff43ca", "committedDate": "2020-06-17T00:53:07Z", "message": "Trying out sleep - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50664b32b6c5dc3140da1d1a1846a865d6c4b934", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/50664b32b6c5dc3140da1d1a1846a865d6c4b934", "committedDate": "2020-06-17T01:19:18Z", "message": "Using post false - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3a5a75af08c26cd9b686626d000cc2dd5aaf586", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e3a5a75af08c26cd9b686626d000cc2dd5aaf586", "committedDate": "2020-06-17T01:28:57Z", "message": "Using keyboard - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83fde036fb6f538fbd5a0b7a1f8b653baece10e2", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/83fde036fb6f538fbd5a0b7a1f8b653baece10e2", "committedDate": "2020-06-17T02:02:45Z", "message": "Keyboard + sleep - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0af853ff4afd9033db3db0880510aedb032ad6de", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0af853ff4afd9033db3db0880510aedb032ad6de", "committedDate": "2020-06-17T02:12:47Z", "message": "Lowlevel keypress event - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f3c5dd2782e59739adeaf7fd9ea8daf85f4a201", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9f3c5dd2782e59739adeaf7fd9ea8daf85f4a201", "committedDate": "2020-06-17T02:12:48Z", "message": "Lowlevel keypress event - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a705ca67e31c35ec1ba3388b743acbaeb7ac25f", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/1a705ca67e31c35ec1ba3388b743acbaeb7ac25f", "committedDate": "2020-06-17T02:43:20Z", "message": "Improved commenting - (Task #639)\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcbbeaf1f3afd4d8b7ec55a03a93715348e0fc96", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/dcbbeaf1f3afd4d8b7ec55a03a93715348e0fc96", "committedDate": "2020-06-17T02:44:43Z", "message": "Fixed typo - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f4dd13ed80cb816cd976626bbe59408001890ed", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9f4dd13ed80cb816cd976626bbe59408001890ed", "committedDate": "2020-06-17T02:45:12Z", "message": "Imprved comment - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83760cc9de8d50f2d20b6e957ee31634d0c951be", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/83760cc9de8d50f2d20b6e957ee31634d0c951be", "committedDate": "2020-06-17T02:46:19Z", "message": "Readded back parts of test case - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "625b075ba8eb888191d5ae3b4ff34e9c8d597fba", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/625b075ba8eb888191d5ae3b4ff34e9c8d597fba", "committedDate": "2020-06-17T06:56:16Z", "message": "USing constant from CorePrespective - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjkxNjQ2", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644#pullrequestreview-432291646", "createdAt": "2020-06-17T11:03:36Z", "commit": {"oid": "625b075ba8eb888191d5ae3b4ff34e9c8d597fba"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTowMzozN1rOGlAzjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowNjoyNFrOGlE0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2MzY5Mw==", "bodyText": "Should we use this constant in label creation below?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644#discussion_r441463693", "createdAt": "2020-06-17T11:03:37Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/editor/snippets/general/UiSnippetIName.java", "diffHunk": "@@ -40,7 +40,9 @@\n  */\r\n public class UiSnippetIName extends AUiEStructuralFeatureSectionSnippet implements IUiSnippet {\r\n \r\n-\tprivate static final String SECTION_HEADING = \"Name Section\";\r\n+\tpublic static final String SECTION_HEADING = \"Name Section\";\r\n+\tpublic static final String NAME_FIELD = \"Name\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625b075ba8eb888191d5ae3b4ff34e9c8d597fba"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNjc1OA==", "bodyText": "This looks weird but I guess there was a reason :D", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644#discussion_r441526758", "createdAt": "2020-06-17T13:02:18Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ValidatorTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertSameWidget;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertText;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertVisible;\n+import static org.eclipse.swtbot.swt.finder.finders.UIThreadRunnable.syncExec;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.widgetOfType;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.withTooltip;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swtbot.eclipse.finder.widgets.SWTBotView;\n+import org.eclipse.swtbot.swt.finder.results.BoolResult;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotLabel;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTable;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTableItem;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.eclipse.ui.forms.widgets.Section;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.build.marker.ui.MarkerImageProvider;\n+import de.dlr.sc.virsat.build.validator.core.DvlmNamingConventionValidator;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.Document;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import de.dlr.sc.virsat.project.ui.perspective.CorePerspective;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotHyperlink;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotSection;\n+import de.dlr.sc.virsat.uiengine.ui.editor.snippets.general.UiSnippetIName;\n+\n+public class ValidatorTest extends ASwtBotTestCase {\n+\t\n+\tpublic static final String EMPTY_NAME_WARNING = DvlmNamingConventionValidator.WARNING_PREFIX + DvlmNamingConventionValidator.WARNING_EMPTY_NAME_SUFFIX;\t\t\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotView problemView;\n+\t\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tproblemView = openView(CorePerspective.ID_PROBLEM_VIEW);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateSeiName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\t// Create relevant problematic seis in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(dotSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(noCamelCaseSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei1 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei2 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on a warning should open the editor of the correct sei which is checked via the name field\n+\t\twarnings.expand();\n+\t\twarnings.getNode(EMPTY_NAME_WARNING).doubleClick();\n+\t\tassertText(\"\", bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCaName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\tSWTBotTreeItem ct = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem ec = addElement(ElementConfiguration.class, conceptPs, ct);\n+\t\t\n+\t\t// Create relevant problematic cas in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(emptyCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(dotCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(noCamelCaseCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa1 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa2 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on an error should open the editor of the containing sei\n+\t\terrors.expand();\n+\t\tfinal String EXPEDTED_ERROR = DvlmNamingConventionValidator.WARNING_PREFIX \n+\t\t\t\t+ ConfigurationTree.class.getSimpleName() + \".\"\n+\t\t\t\t+ ElementConfiguration.class.getSimpleName() + \"..\"\n+\t\t\t\t+ DvlmNamingConventionValidator.WARNING_DOTS_SUFFIX;\n+\t\terrors.getNode(EXPEDTED_ERROR).doubleClick();\n+\t\tassertText(ElementConfiguration.class.getSimpleName(), bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\n+\t@Test\n+\tpublic void testWarningInGenericEditor() {\n+\t\t// Create sei with some warning\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\t\n+\t\t// Check that there is a warning icon with the correct tooltip in the name section\n+\t\t// Note that icons are implemented via label with image\n+\t\tSwtBotSection nameSection = getSWTBotSection(UiSnippetIName.SECTION_HEADING);\n+\t\tList<Label> iconLabels = bot.getFinder()\n+\t\t\t\t.findControls(nameSection.widget, allOf(widgetOfType(Label.class), withTooltip(EMPTY_NAME_WARNING)), true);\n+\t\tSWTBotLabel swtIcon = new SWTBotLabel(iconLabels.get(0));\n+\t\tImage actualIcon = swtIcon.image();\n+\t\tImage expectedIcon = new MarkerImageProvider(null).getProblemImageForSeverity(IMarker.SEVERITY_WARNING);\n+\t\t\n+\t\tassertVisible(swtIcon);\n+\t\tassertEquals(expectedIcon, actualIcon);\n+\t\t\n+\t\t// Unexpand the name section\n+\t\tnameSection.click();\n+\t\t\n+\t\t// Check that clicking the header link collapses all sections which have no warning (i.e. all except the name section)\n+\t\t// and expands those with a warning (i.e. the name section)\n+\t\tSwtBotHyperlink swtBotHyperlink = getSWTBotHyperlink(EMPTY_NAME_WARNING);\n+\t\tswtBotHyperlink.click();\n+\t\t\n+\t\tList<SwtBotSection> expandedSwtBotSections = getExpandedSections();\n+\t\tassertEquals(1, expandedSwtBotSections.size());\n+\t\tassertSameWidget(nameSection.widget, expandedSwtBotSections.get(0).widget);\n+\t\t\n+\t\t// Check that the header label has the right tooltip text\n+\t\tString tooltip = swtBotHyperlink.getToolTipText();\n+\t\tassertEquals(EMPTY_NAME_WARNING, tooltip);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testErrorInGenericEditor() {\n+\t\t// Create sei with an error in a contained sei\n+\t\tSWTBotTreeItem ct = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem ec = addElement(ElementConfiguration.class, conceptPs, ct);\n+\t\tSWTBotTreeItem dotCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(dotCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\t\n+\t\tbot.closeAllEditors();\n+\t\topenEditor(ec);\n+\t\t\n+\t\t// Check that there is an error icon in the document table\n+\t\tSwtBotSection documentSection = getSWTBotSection(Document.class);\n+\t\tSWTBotTable documentTable = documentSection.getSWTBotTable();\n+\t\tSWTBotTableItem documentNameItem = documentTable.getTableItem(0).click(0);\n+\t\t\n+\t\tImage actualIcon = getImageForTableItem(documentNameItem);\n+\t\tImage expectedIcon = new MarkerImageProvider(null).getProblemImageForSeverity(IMarker.SEVERITY_ERROR);\n+\t\tassertEquals(expectedIcon, actualIcon);\n+\t\t\n+\t\t// Unexpand the document section\n+\t\tdocumentSection.click();\n+\t\t\n+\t\t// Check that clicking the header link collapses all sections which have no error (i.e. all except the document section)\n+\t\t// and expands those with an error (i.e. the document section)\n+\t\tfinal String EXPEDTED_ERROR = DvlmNamingConventionValidator.WARNING_PREFIX \n+\t\t\t\t+ ConfigurationTree.class.getSimpleName() + \".\"\n+\t\t\t\t+ ElementConfiguration.class.getSimpleName() + \"..\"\n+\t\t\t\t+ DvlmNamingConventionValidator.WARNING_DOTS_SUFFIX;\n+\t\tSwtBotHyperlink swtBotHyperlink = getSWTBotHyperlink(EXPEDTED_ERROR);\n+\t\tswtBotHyperlink.click();\n+\t\t\n+\t\tList<SwtBotSection> expandedSwtBotSections = getExpandedSections();\n+\t\tassertEquals(1, expandedSwtBotSections.size());\n+\t\tassertSameWidget(documentSection.widget, expandedSwtBotSections.get(0).widget);\n+\t\t\n+\t\t// Check that the header label has the right tooltip text\n+\t\tString tooltip = swtBotHyperlink.getToolTipText();\n+\t\tassertEquals(EXPEDTED_ERROR, tooltip);\n+\t}\n+\t\n+\t/**\n+\t * Gets the currently expanded sections\n+\t * @return a list containing only expanded sections\n+\t */\n+\tprivate List<SwtBotSection> getExpandedSections() {\n+\t\tList<? extends Section> sections = bot.getFinder().findControls(widgetOfType(Section.class));\n+\t\tList<SwtBotSection> expandedSwtBotSections = sections.stream()\n+\t\t\t\t.map(SwtBotSection::new)\n+\t\t\t\t.filter(SwtBotSection::isExpanded)\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn expandedSwtBotSections;\n+\t}\n+\t\n+\t/**\n+\t * Gets the warnings entry from the problem view\n+\t * @param countExpectedWarnings the expected number of warnings\n+\t * @return the warning entry\n+\t */\n+\tprivate SWTBotTreeItem getWarnings(int countExpectedWarnings) {\n+\t\tString plural = (countExpectedWarnings > 1) ? \"s\" : \"\";\n+\t\treturn problemView.bot().tree().getTreeItem(\"Warnings (\" + countExpectedWarnings + \" item\" + plural + \")\");\n+\t}\n+\t\n+\t/**\n+\t * Gets the error entry from the problem view\n+\t * @param countExpectedErrors the expected number of errors\n+\t * @return the warning entry\n+\t */\n+\tprivate SWTBotTreeItem getErrors(int countExpectedErrors) {\n+\t\tString plural = (countExpectedErrors > 1) ? \"s\" : \"\";\n+\t\treturn problemView.bot().tree().getTreeItem(\"Errors (\" + countExpectedErrors + \" item\" + plural + \")\");\n+\t}\n+\t\n+\t/**\n+\t * Gets the image of a table item\n+\t * @param swtBotTableItem the swtbot table item\n+\t * @return the image of the table item\n+\t */\n+\tprivate Image getImageForTableItem(SWTBotTableItem swtBotTableItem) {\n+\t\tList<Image> image = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625b075ba8eb888191d5ae3b4ff34e9c8d597fba"}, "originalPosition": 282}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNzk0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t// Unexpand the document section\n          \n          \n            \n            \t\t// Collapse the document section", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644#discussion_r441527944", "createdAt": "2020-06-17T13:04:13Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ValidatorTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertSameWidget;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertText;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertVisible;\n+import static org.eclipse.swtbot.swt.finder.finders.UIThreadRunnable.syncExec;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.widgetOfType;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.withTooltip;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swtbot.eclipse.finder.widgets.SWTBotView;\n+import org.eclipse.swtbot.swt.finder.results.BoolResult;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotLabel;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTable;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTableItem;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.eclipse.ui.forms.widgets.Section;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.build.marker.ui.MarkerImageProvider;\n+import de.dlr.sc.virsat.build.validator.core.DvlmNamingConventionValidator;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.Document;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import de.dlr.sc.virsat.project.ui.perspective.CorePerspective;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotHyperlink;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotSection;\n+import de.dlr.sc.virsat.uiengine.ui.editor.snippets.general.UiSnippetIName;\n+\n+public class ValidatorTest extends ASwtBotTestCase {\n+\t\n+\tpublic static final String EMPTY_NAME_WARNING = DvlmNamingConventionValidator.WARNING_PREFIX + DvlmNamingConventionValidator.WARNING_EMPTY_NAME_SUFFIX;\t\t\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotView problemView;\n+\t\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tproblemView = openView(CorePerspective.ID_PROBLEM_VIEW);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateSeiName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\t// Create relevant problematic seis in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(dotSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(noCamelCaseSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei1 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei2 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on a warning should open the editor of the correct sei which is checked via the name field\n+\t\twarnings.expand();\n+\t\twarnings.getNode(EMPTY_NAME_WARNING).doubleClick();\n+\t\tassertText(\"\", bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCaName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\tSWTBotTreeItem ct = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem ec = addElement(ElementConfiguration.class, conceptPs, ct);\n+\t\t\n+\t\t// Create relevant problematic cas in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(emptyCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(dotCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(noCamelCaseCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa1 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa2 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on an error should open the editor of the containing sei\n+\t\terrors.expand();\n+\t\tfinal String EXPEDTED_ERROR = DvlmNamingConventionValidator.WARNING_PREFIX \n+\t\t\t\t+ ConfigurationTree.class.getSimpleName() + \".\"\n+\t\t\t\t+ ElementConfiguration.class.getSimpleName() + \"..\"\n+\t\t\t\t+ DvlmNamingConventionValidator.WARNING_DOTS_SUFFIX;\n+\t\terrors.getNode(EXPEDTED_ERROR).doubleClick();\n+\t\tassertText(ElementConfiguration.class.getSimpleName(), bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\n+\t@Test\n+\tpublic void testWarningInGenericEditor() {\n+\t\t// Create sei with some warning\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\t\n+\t\t// Check that there is a warning icon with the correct tooltip in the name section\n+\t\t// Note that icons are implemented via label with image\n+\t\tSwtBotSection nameSection = getSWTBotSection(UiSnippetIName.SECTION_HEADING);\n+\t\tList<Label> iconLabels = bot.getFinder()\n+\t\t\t\t.findControls(nameSection.widget, allOf(widgetOfType(Label.class), withTooltip(EMPTY_NAME_WARNING)), true);\n+\t\tSWTBotLabel swtIcon = new SWTBotLabel(iconLabels.get(0));\n+\t\tImage actualIcon = swtIcon.image();\n+\t\tImage expectedIcon = new MarkerImageProvider(null).getProblemImageForSeverity(IMarker.SEVERITY_WARNING);\n+\t\t\n+\t\tassertVisible(swtIcon);\n+\t\tassertEquals(expectedIcon, actualIcon);\n+\t\t\n+\t\t// Unexpand the name section\n+\t\tnameSection.click();\n+\t\t\n+\t\t// Check that clicking the header link collapses all sections which have no warning (i.e. all except the name section)\n+\t\t// and expands those with a warning (i.e. the name section)\n+\t\tSwtBotHyperlink swtBotHyperlink = getSWTBotHyperlink(EMPTY_NAME_WARNING);\n+\t\tswtBotHyperlink.click();\n+\t\t\n+\t\tList<SwtBotSection> expandedSwtBotSections = getExpandedSections();\n+\t\tassertEquals(1, expandedSwtBotSections.size());\n+\t\tassertSameWidget(nameSection.widget, expandedSwtBotSections.get(0).widget);\n+\t\t\n+\t\t// Check that the header label has the right tooltip text\n+\t\tString tooltip = swtBotHyperlink.getToolTipText();\n+\t\tassertEquals(EMPTY_NAME_WARNING, tooltip);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testErrorInGenericEditor() {\n+\t\t// Create sei with an error in a contained sei\n+\t\tSWTBotTreeItem ct = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem ec = addElement(ElementConfiguration.class, conceptPs, ct);\n+\t\tSWTBotTreeItem dotCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(dotCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\t\n+\t\tbot.closeAllEditors();\n+\t\topenEditor(ec);\n+\t\t\n+\t\t// Check that there is an error icon in the document table\n+\t\tSwtBotSection documentSection = getSWTBotSection(Document.class);\n+\t\tSWTBotTable documentTable = documentSection.getSWTBotTable();\n+\t\tSWTBotTableItem documentNameItem = documentTable.getTableItem(0).click(0);\n+\t\t\n+\t\tImage actualIcon = getImageForTableItem(documentNameItem);\n+\t\tImage expectedIcon = new MarkerImageProvider(null).getProblemImageForSeverity(IMarker.SEVERITY_ERROR);\n+\t\tassertEquals(expectedIcon, actualIcon);\n+\t\t\n+\t\t// Unexpand the document section", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625b075ba8eb888191d5ae3b4ff34e9c8d597fba"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyOTQwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t// Unexpand the name section\n          \n          \n            \n            \t\t// Collapse the name section", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644#discussion_r441529400", "createdAt": "2020-06-17T13:06:24Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ValidatorTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertSameWidget;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertText;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertVisible;\n+import static org.eclipse.swtbot.swt.finder.finders.UIThreadRunnable.syncExec;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.widgetOfType;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.withTooltip;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swtbot.eclipse.finder.widgets.SWTBotView;\n+import org.eclipse.swtbot.swt.finder.results.BoolResult;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotLabel;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTable;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTableItem;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.eclipse.ui.forms.widgets.Section;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.build.marker.ui.MarkerImageProvider;\n+import de.dlr.sc.virsat.build.validator.core.DvlmNamingConventionValidator;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.Document;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import de.dlr.sc.virsat.project.ui.perspective.CorePerspective;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotHyperlink;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotSection;\n+import de.dlr.sc.virsat.uiengine.ui.editor.snippets.general.UiSnippetIName;\n+\n+public class ValidatorTest extends ASwtBotTestCase {\n+\t\n+\tpublic static final String EMPTY_NAME_WARNING = DvlmNamingConventionValidator.WARNING_PREFIX + DvlmNamingConventionValidator.WARNING_EMPTY_NAME_SUFFIX;\t\t\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotView problemView;\n+\t\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tproblemView = openView(CorePerspective.ID_PROBLEM_VIEW);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateSeiName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\t// Create relevant problematic seis in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(dotSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(noCamelCaseSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei1 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei2 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on a warning should open the editor of the correct sei which is checked via the name field\n+\t\twarnings.expand();\n+\t\twarnings.getNode(EMPTY_NAME_WARNING).doubleClick();\n+\t\tassertText(\"\", bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCaName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\tSWTBotTreeItem ct = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem ec = addElement(ElementConfiguration.class, conceptPs, ct);\n+\t\t\n+\t\t// Create relevant problematic cas in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(emptyCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(dotCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(noCamelCaseCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa1 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa2 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on an error should open the editor of the containing sei\n+\t\terrors.expand();\n+\t\tfinal String EXPEDTED_ERROR = DvlmNamingConventionValidator.WARNING_PREFIX \n+\t\t\t\t+ ConfigurationTree.class.getSimpleName() + \".\"\n+\t\t\t\t+ ElementConfiguration.class.getSimpleName() + \"..\"\n+\t\t\t\t+ DvlmNamingConventionValidator.WARNING_DOTS_SUFFIX;\n+\t\terrors.getNode(EXPEDTED_ERROR).doubleClick();\n+\t\tassertText(ElementConfiguration.class.getSimpleName(), bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\n+\t@Test\n+\tpublic void testWarningInGenericEditor() {\n+\t\t// Create sei with some warning\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\t\n+\t\t// Check that there is a warning icon with the correct tooltip in the name section\n+\t\t// Note that icons are implemented via label with image\n+\t\tSwtBotSection nameSection = getSWTBotSection(UiSnippetIName.SECTION_HEADING);\n+\t\tList<Label> iconLabels = bot.getFinder()\n+\t\t\t\t.findControls(nameSection.widget, allOf(widgetOfType(Label.class), withTooltip(EMPTY_NAME_WARNING)), true);\n+\t\tSWTBotLabel swtIcon = new SWTBotLabel(iconLabels.get(0));\n+\t\tImage actualIcon = swtIcon.image();\n+\t\tImage expectedIcon = new MarkerImageProvider(null).getProblemImageForSeverity(IMarker.SEVERITY_WARNING);\n+\t\t\n+\t\tassertVisible(swtIcon);\n+\t\tassertEquals(expectedIcon, actualIcon);\n+\t\t\n+\t\t// Unexpand the name section", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625b075ba8eb888191d5ae3b4ff34e9c8d597fba"}, "originalPosition": 183}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22c1142247dfd7053d2be903671fddd93dcaabcc", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/22c1142247dfd7053d2be903671fddd93dcaabcc", "committedDate": "2020-06-18T08:31:28Z", "message": "Using introduced constant in snippet creation - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "798e064a1cc1cbfc66b63c4d0aa418b6da876e0e", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/798e064a1cc1cbfc66b63c4d0aa418b6da876e0e", "committedDate": "2020-06-18T08:32:02Z", "message": "Update de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ValidatorTest.java\n\nCo-authored-by: andriikovalov-dlr <48556822+andriikovalov-dlr@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a53758b3ac93d9c32c4763b68cffc5819ff9b989", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a53758b3ac93d9c32c4763b68cffc5819ff9b989", "committedDate": "2020-06-18T08:33:27Z", "message": "Improved comment - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f126477e59584fbcc234ccc4d5d1b5f22a0400dd", "author": {"user": {"login": "SaMuellerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f126477e59584fbcc234ccc4d5d1b5f22a0400dd", "committedDate": "2020-06-18T08:39:25Z", "message": "Simplified method for getting image of table tiem - (Task #639)\n\n\n---\nTask #639: Automate UI test cases for validation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMDY2NjQ5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644#pullrequestreview-433066649", "createdAt": "2020-06-18T08:42:30Z", "commit": {"oid": "f126477e59584fbcc234ccc4d5d1b5f22a0400dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 496, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}