{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDkzMTEz", "number": 514, "title": "Fix performance issue", "bodyText": "Simplified code to Analyse the emf resources and the model\nremoved crossreferencer to detect dangling references. was too expensive calculation wise.\nadded code which checks all crossreferences from a resource if they are contained instead.\nadded a new test case for it\nAdjusted editor to also show emf warnings and not just errors as primary page.", "createdAt": "2020-03-03T17:56:03Z", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514", "merged": true, "mergeCommit": {"oid": "cf92eaa2552a4380ff4efca04dc17d2a60cd4574"}, "closed": true, "closedAt": "2020-04-01T15:37:17Z", "author": {"login": "PhilMFischer"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJusobgH2gAyMzgzMDkzMTEzOjI2NWI2MDJkMTAxZmNjYjdkNzk3Njg0ZTAxOTFiODZkMWI3Nzg3MTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTZjlKAFqTM4NTcwNzA4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "265b602d101fccb7d797684e0191b86d1b778717", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/265b602d101fccb7d797684e0191b86d1b778717", "committedDate": "2020-03-02T14:35:47Z", "message": "Reimplemented resource validation - (Task #509)\n\n- re implemented resource validation\n- need to reorganise diagnostics handling\n- need to update test cases\n\n---\nTask #509: Performance Issue in cross reference check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5367d598704565325cff85ab5c93401bbe4c40a", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c5367d598704565325cff85ab5c93401bbe4c40a", "committedDate": "2020-03-03T08:04:06Z", "message": "Added squash Diagnostics method to Ecore Helper - (Task #509)\n\n- Added methdod to virsat ecore helper to squash diagnostic messages\n- Added test case to it\n- Added hamcrest libraries to plugin.\n\n---\nTask #509: Performance Issue in cross reference check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81f6dfee4be20bacfdb1146db9f56058413388e5", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/81f6dfee4be20bacfdb1146db9f56058413388e5", "committedDate": "2020-03-03T13:00:36Z", "message": "Interim commit to save current state - (Task #509)\n\n- Cleaned up code for resource analysis in resource set\n- still need to update functionality on how to store and deal with\nresource and model issues.\n\n---\nTask #509: Performance Issue in cross reference check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "667797e549823291c89f7121a22f1d2dfd1dd1b9", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/667797e549823291c89f7121a22f1d2dfd1dd1b9", "committedDate": "2020-03-03T16:45:56Z", "message": "Simplified dangling reference detection - (Task #509)\n\n- Cleaned up code for processing resource analysis.\n- Fixed code to correctly detect dangling references.\n- Adjusted test case to it\n- Changed editor code to also display ProblemsPart as soon as Warnings\nshow up.\n\n\n---\nTask #509: Performance Issue in cross reference check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8ce1c1560577496f08b6c8b7c3ebfd948d42aab", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b8ce1c1560577496f08b6c8b7c3ebfd948d42aab", "committedDate": "2020-03-03T18:02:09Z", "message": "Fixed test case - (Task #509)\n\n- test case has to expect a warning\n\n---\nTask #509: Performance Issue in cross reference check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99d8fc3a5d819d412d4054bb5114b9e48c377b51", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/99d8fc3a5d819d412d4054bb5114b9e48c377b51", "committedDate": "2020-03-04T07:53:49Z", "message": "Improved testing - (Task #509)\n\n- Added test case for null content anylysis.\n\n---\nTask #509: Performance Issue in cross reference check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/990453e592e2d5ca70dc9a1bb665ed11fe827a17", "committedDate": "2020-03-04T08:14:04Z", "message": "Added test case - (Task #509)\n\n- Added further test case to check for resource errors and warnings\n\n---\nTask #509: Performance Issue in cross reference check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzYyMDM0", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#pullrequestreview-368762034", "createdAt": "2020-03-04T13:09:38Z", "commit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzowOTozOFrOFxsk0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxMzowNlrOFxssdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NDg2NA==", "bodyText": "sued -> used", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#discussion_r387654864", "createdAt": "2020-03-04T13:09:38Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "diffHunk": "@@ -1187,34 +1137,41 @@ public Resource createResource(URI uri) {\n \t * Updates the resources diagnostic entry in the resourceToDiagnosticMap\r\n \t * \r\n \t * @param resource the resource of which to update the diagnostic\r\n+\t * @return true in case that the resource to diagnostics map has been changed\r\n \t */\r\n \tpublic boolean updateDiagnostic(Resource resource) {\r\n \t\tboolean changes = false;\r\n \t\tif (resource != null) {\r\n-\t\t\tDiagnostic diagnostic = analyzeResourceProblems(resource);\r\n-\r\n-\t\t\tfor (EObject eObject : resource.getContents()) {\r\n-\t\t\t\tif (eObject != null) {\r\n-\t\t\t\t\tEObject resolvedEObject = EcoreUtil.resolve(eObject, this);\r\n-\t\t\t\t\tdiagnostic = analyzeModelProblems(resolvedEObject, diagnostic);\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n+\t\t\t// Run individualDiagnostics and merge them\r\n \t\t\t\r\n-\t\t\tif (diagnostic.getSeverity() != Diagnostic.OK) {\r\n-\t\t\t\tresourceToDiagnosticMap.put(resource, diagnostic);\r\n+\t\t\tBasicDiagnostic resourceDiagnostic = analyzeResourceProblems(resource);\r\n+\t\t\tBasicDiagnostic resourceNullDiagnostic = analyzeResourceNullProblems(resource);\r\n+\t\t\tresourceDiagnostic.merge(resourceNullDiagnostic);\r\n+\t\t\t// In case there are null objects which should not be in the resource\r\n+\t\t\t// something went seriously wrong. No other analysis has to be executed\r\n+\t\t\t// If there are no null diagnostics, continue with the other checks\r\n+\t\t\tif (resourceDiagnostic.getSeverity() == Diagnostic.OK) {\r\n+\t\t\t\tBasicDiagnostic modelDiagnostic = analyzeModelProblems(resource);\r\n+\t\t\t\tresourceDiagnostic.merge(modelDiagnostic);\r\n+\t\t\t}\r\n+\r\n+\t\t\t// Now check severity levels, and set the diagnostics map accordingly\r\n+\t\t\t// The map will be sued by the editors to display the error messages etc.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NTU1MA==", "bodyText": "create -> creates", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#discussion_r387655550", "createdAt": "2020-03-04T13:10:56Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "diffHunk": "@@ -1224,61 +1181,101 @@ public boolean updateDiagnostic(Resource resource) {\n \t}\r\n \r\n \t/**\r\n-\t * This method create EMF Diagnostics on the Model Object\r\n+\t * Returns a diagnostic describing the errors and warnings listed in the\r\n+\t * resource and the specified exception (if any).\r\n \t * \r\n-\t * @param eObject\r\n-\t *            The object to check for issues\r\n-\t * @param resourceDiagnostics\r\n-\t *            resource diagnostics which should be merged with the new\r\n-\t *            Diagnostics\r\n-\t * @return merged diagnostics including new ones on the actual object or the\r\n-\t *         previous resource diagnostics\r\n+\t * @param resource the resource\r\n+\t * @return the diagnostic describing error/warning\r\n \t */\r\n-\tpublic Diagnostic analyzeModelProblems(EObject eObject, Diagnostic resourceDiagnostics) {\r\n-\t\tif (eObject.eIsProxy()) {\r\n-\t\t\tBasicDiagnostic basicDiagnostic = new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\"Could not resolve Object, Object seems to be pending\", new Object[] { eObject });\r\n-\t\t\tbasicDiagnostic.merge(resourceDiagnostics);\r\n-\t\t\treturn basicDiagnostic;\r\n-\t\t}\r\n+\tpublic BasicDiagnostic analyzeResourceProblems(Resource resource) {\r\n+\t\tboolean hasErrors = !resource.getErrors().isEmpty();\r\n+\t\tboolean hasWarnings = !resource.getWarnings().isEmpty();\r\n+\t\tBasicDiagnostic returnDiagnostic = VirSatEcoreUtil.createDiagnosticOk(\"Resource Diagnostics:\");\r\n+\t\t\r\n+\t\t// Now process the diagnostics that are part of the resource\r\n+\t\tif (hasErrors || hasWarnings) {\r\n+\t\t\treturnDiagnostic.merge(new BasicDiagnostic(\r\n+\t\t\t\thasErrors ? Diagnostic.ERROR : Diagnostic.WARNING,\r\n+\t\t\t\tActivator.getPluginId(), 0,\r\n+\t\t\t\t\"Problems encountered in resource: \" + resource.getURI().toPlatformString(true),\r\n+\t\t\t\tnew Object[] { resource }\r\n+\t\t\t));\r\n+\t\t\t\r\n+\t\t\t// Compute the diagnostics from the resource and add them to the given one.\r\n+\t\t\treturnDiagnostic.merge(EcoreUtil.computeDiagnostic(resource, true));\r\n+\t\t} \r\n+\t\t\r\n+\t\treturn returnDiagnostic;\r\n+\t}\r\n \r\n-\t\tMap<EObject, Collection<Setting>> externalCrossReferences = EcoreUtil.ExternalCrossReferencer.find(eObject);\r\n-\t\tfor (EObject referencedEObject : externalCrossReferences.keySet()) {\r\n-\t\t\tResource resource = referencedEObject.eResource();\r\n-\t\t\tif (resource == null) {\r\n-\t\t\t\t// Only consider external cross references that are directly contained by the resource\r\n-\t\t\t\t// of the eObject. This is important for SEIs since here we have containment references. \r\n-\t\t\t\t// If they are not ignored, external dangling references of child seis are are considered\r\n-\t\t\t\t// dangling references of the parent.\r\n-\t\t\t\tList<EObject> referencingObjectsInResource = new ArrayList<>();\r\n-\t\t\t\tCollection<Setting> settings = externalCrossReferences.get(referencedEObject);\r\n-\t\t\t\tfor (Setting setting : settings) {\r\n-\t\t\t\t\tEObject referencingObject = setting.getEObject();\r\n-\t\t\t\t\tif (referencingObject.eResource() == eObject.eResource()) {\r\n-\t\t\t\t\t\treferencingObjectsInResource.add(referencingObject);\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}\r\n+\t/**\r\n+\t * Analyzes the resource on special null errors. We have seen some rare cases,\r\n+\t * where NPEs were caused by resource content which was null. Usually this should\r\n+\t * never happen in EMF, still this check will report in case such issues may happen again\r\n+\t * @param resource the resource to be checked\r\n+\t * @return The diagnostics regarding null content in a resource\r\n+\t */\r\n+\tpublic BasicDiagnostic analyzeResourceNullProblems(Resource resource) {\r\n+\t\tList<EObject> resourceContents = resource.getContents();\r\n+\t\tBasicDiagnostic returnDiagnostic = VirSatEcoreUtil.createDiagnosticOk(\"Resource Null Diagnostics:\");\r\n+\t\t\r\n+\t\t// Loop over the contents to detect a null\r\n+\t\tfor (EObject object : resourceContents) {\r\n+\t\t\tif (object == null) {\r\n+\t\t\t\t// Add a diagnostic\r\n+\t\t\t\treturnDiagnostic.merge(new BasicDiagnostic(\r\n+\t\t\t\t\t\tDiagnostic.ERROR,\r\n+\t\t\t\t\t\tActivator.getPluginId(), 0,\r\n+\t\t\t\t\t\t\"Error! Found NULL object in resource content: \" + resource.getURI().toPlatformString(true),\r\n+\t\t\t\t\t\tnew Object[] { resource }\r\n+\t\t\t\t\t));\r\n \t\t\t\t\r\n-\t\t\t\tif (!referencingObjectsInResource.isEmpty()) {\r\n-\t\t\t\t\tBasicDiagnostic basicDiagnostic = new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\t\t\"Found uncontained object of potentialy dangling reference\", new Object[] { eObject });\r\n-\t\t\t\t\t\r\n-\t\t\t\t\tfor (EObject referencingObject : referencingObjectsInResource) {\r\n-\t\t\t\t\t\tbasicDiagnostic.add(new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\t\t\t\"From: \" + referencingObject.toString(),\r\n-\t\t\t\t\t\t\t\tnew Object[] { referencingObject }));\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\t\r\n-\t\t\t\t\tbasicDiagnostic.add(new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\t\t\"To: \" +  referencedEObject.toString(),\r\n-\t\t\t\t\t\t\tnew Object[] { referencedEObject }));\r\n-\t\t\t\t\tbasicDiagnostic.merge(resourceDiagnostics);\r\n-\t\t\t\t\treturn basicDiagnostic;\r\n-\t\t\t\t}\r\n+\t\t\t\t// Log the result\r\n+\t\t\t\tActivator.getDefault().getLog().log(new Status(\r\n+\t\t\t\t\tStatus.ERROR,\r\n+\t\t\t\t\tActivator.getPluginId(),\r\n+\t\t\t\t\t\"Found NULL object in Resource content: \" + resource.getURI().toPlatformString(true)\r\n+\t\t\t\t));\r\n+\t\t\t\t\r\n+\t\t\t\t// don't test the other objects anymore. One diagnostic about a null object is enough\r\n+\t\t\t\tbreak;\r\n \t\t\t}\r\n \t\t}\r\n-\r\n-\t\treturn resourceDiagnostics;\r\n+\t\t\r\n+\t\treturn returnDiagnostic;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * This method create EMF Diagnostics on the Model Object in case of detected problems\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NTkzNQ==", "bodyText": "in due sentence seems unfinished.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#discussion_r387655935", "createdAt": "2020-03-04T13:11:35Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "diffHunk": "@@ -1224,61 +1181,101 @@ public boolean updateDiagnostic(Resource resource) {\n \t}\r\n \r\n \t/**\r\n-\t * This method create EMF Diagnostics on the Model Object\r\n+\t * Returns a diagnostic describing the errors and warnings listed in the\r\n+\t * resource and the specified exception (if any).\r\n \t * \r\n-\t * @param eObject\r\n-\t *            The object to check for issues\r\n-\t * @param resourceDiagnostics\r\n-\t *            resource diagnostics which should be merged with the new\r\n-\t *            Diagnostics\r\n-\t * @return merged diagnostics including new ones on the actual object or the\r\n-\t *         previous resource diagnostics\r\n+\t * @param resource the resource\r\n+\t * @return the diagnostic describing error/warning\r\n \t */\r\n-\tpublic Diagnostic analyzeModelProblems(EObject eObject, Diagnostic resourceDiagnostics) {\r\n-\t\tif (eObject.eIsProxy()) {\r\n-\t\t\tBasicDiagnostic basicDiagnostic = new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\"Could not resolve Object, Object seems to be pending\", new Object[] { eObject });\r\n-\t\t\tbasicDiagnostic.merge(resourceDiagnostics);\r\n-\t\t\treturn basicDiagnostic;\r\n-\t\t}\r\n+\tpublic BasicDiagnostic analyzeResourceProblems(Resource resource) {\r\n+\t\tboolean hasErrors = !resource.getErrors().isEmpty();\r\n+\t\tboolean hasWarnings = !resource.getWarnings().isEmpty();\r\n+\t\tBasicDiagnostic returnDiagnostic = VirSatEcoreUtil.createDiagnosticOk(\"Resource Diagnostics:\");\r\n+\t\t\r\n+\t\t// Now process the diagnostics that are part of the resource\r\n+\t\tif (hasErrors || hasWarnings) {\r\n+\t\t\treturnDiagnostic.merge(new BasicDiagnostic(\r\n+\t\t\t\thasErrors ? Diagnostic.ERROR : Diagnostic.WARNING,\r\n+\t\t\t\tActivator.getPluginId(), 0,\r\n+\t\t\t\t\"Problems encountered in resource: \" + resource.getURI().toPlatformString(true),\r\n+\t\t\t\tnew Object[] { resource }\r\n+\t\t\t));\r\n+\t\t\t\r\n+\t\t\t// Compute the diagnostics from the resource and add them to the given one.\r\n+\t\t\treturnDiagnostic.merge(EcoreUtil.computeDiagnostic(resource, true));\r\n+\t\t} \r\n+\t\t\r\n+\t\treturn returnDiagnostic;\r\n+\t}\r\n \r\n-\t\tMap<EObject, Collection<Setting>> externalCrossReferences = EcoreUtil.ExternalCrossReferencer.find(eObject);\r\n-\t\tfor (EObject referencedEObject : externalCrossReferences.keySet()) {\r\n-\t\t\tResource resource = referencedEObject.eResource();\r\n-\t\t\tif (resource == null) {\r\n-\t\t\t\t// Only consider external cross references that are directly contained by the resource\r\n-\t\t\t\t// of the eObject. This is important for SEIs since here we have containment references. \r\n-\t\t\t\t// If they are not ignored, external dangling references of child seis are are considered\r\n-\t\t\t\t// dangling references of the parent.\r\n-\t\t\t\tList<EObject> referencingObjectsInResource = new ArrayList<>();\r\n-\t\t\t\tCollection<Setting> settings = externalCrossReferences.get(referencedEObject);\r\n-\t\t\t\tfor (Setting setting : settings) {\r\n-\t\t\t\t\tEObject referencingObject = setting.getEObject();\r\n-\t\t\t\t\tif (referencingObject.eResource() == eObject.eResource()) {\r\n-\t\t\t\t\t\treferencingObjectsInResource.add(referencingObject);\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}\r\n+\t/**\r\n+\t * Analyzes the resource on special null errors. We have seen some rare cases,\r\n+\t * where NPEs were caused by resource content which was null. Usually this should\r\n+\t * never happen in EMF, still this check will report in case such issues may happen again\r\n+\t * @param resource the resource to be checked\r\n+\t * @return The diagnostics regarding null content in a resource\r\n+\t */\r\n+\tpublic BasicDiagnostic analyzeResourceNullProblems(Resource resource) {\r\n+\t\tList<EObject> resourceContents = resource.getContents();\r\n+\t\tBasicDiagnostic returnDiagnostic = VirSatEcoreUtil.createDiagnosticOk(\"Resource Null Diagnostics:\");\r\n+\t\t\r\n+\t\t// Loop over the contents to detect a null\r\n+\t\tfor (EObject object : resourceContents) {\r\n+\t\t\tif (object == null) {\r\n+\t\t\t\t// Add a diagnostic\r\n+\t\t\t\treturnDiagnostic.merge(new BasicDiagnostic(\r\n+\t\t\t\t\t\tDiagnostic.ERROR,\r\n+\t\t\t\t\t\tActivator.getPluginId(), 0,\r\n+\t\t\t\t\t\t\"Error! Found NULL object in resource content: \" + resource.getURI().toPlatformString(true),\r\n+\t\t\t\t\t\tnew Object[] { resource }\r\n+\t\t\t\t\t));\r\n \t\t\t\t\r\n-\t\t\t\tif (!referencingObjectsInResource.isEmpty()) {\r\n-\t\t\t\t\tBasicDiagnostic basicDiagnostic = new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\t\t\"Found uncontained object of potentialy dangling reference\", new Object[] { eObject });\r\n-\t\t\t\t\t\r\n-\t\t\t\t\tfor (EObject referencingObject : referencingObjectsInResource) {\r\n-\t\t\t\t\t\tbasicDiagnostic.add(new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\t\t\t\"From: \" + referencingObject.toString(),\r\n-\t\t\t\t\t\t\t\tnew Object[] { referencingObject }));\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\t\r\n-\t\t\t\t\tbasicDiagnostic.add(new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\t\t\"To: \" +  referencedEObject.toString(),\r\n-\t\t\t\t\t\t\tnew Object[] { referencedEObject }));\r\n-\t\t\t\t\tbasicDiagnostic.merge(resourceDiagnostics);\r\n-\t\t\t\t\treturn basicDiagnostic;\r\n-\t\t\t\t}\r\n+\t\t\t\t// Log the result\r\n+\t\t\t\tActivator.getDefault().getLog().log(new Status(\r\n+\t\t\t\t\tStatus.ERROR,\r\n+\t\t\t\t\tActivator.getPluginId(),\r\n+\t\t\t\t\t\"Found NULL object in Resource content: \" + resource.getURI().toPlatformString(true)\r\n+\t\t\t\t));\r\n+\t\t\t\t\r\n+\t\t\t\t// don't test the other objects anymore. One diagnostic about a null object is enough\r\n+\t\t\t\tbreak;\r\n \t\t\t}\r\n \t\t}\r\n-\r\n-\t\treturn resourceDiagnostics;\r\n+\t\t\r\n+\t\treturn returnDiagnostic;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * This method create EMF Diagnostics on the Model Object in case of detected problems\r\n+\t * \r\n+\t * @param resource The resource to be checked for model issues\r\n+\t * @return the diagnostic on model issues\r\n+\t */\r\n+\tpublic BasicDiagnostic analyzeModelProblems(Resource resource) {\r\n+\t\tBasicDiagnostic returnDiagnostic = VirSatEcoreUtil.createDiagnosticOk(\"Model Diagnostics:\");\r\n+\t\t\r\n+\t\t// Now check the state of each eObject if it can be resolved and if it is contained\r\n+\t\tEcoreUtil.getAllProperContents(resource, true).forEachRemaining((object) -> {\r\n+\t\t\tif (object instanceof EObject) {\r\n+\t\t\t\tEObject eObject = (EObject) object;\r\n+\r\n+\t\t\t\t// Check all cross references\r\n+\t\t\t\teObject.eCrossReferences().forEach((eReferencedObject) -> {\r\n+\t\t\t\t\t// Check containment of all other objects\r\n+\t\t\t\t\tif (eReferencedObject.eResource() == null) {\r\n+\t\t\t\t\t\treturnDiagnostic.merge(new BasicDiagnostic(\r\n+\t\t\t\t\t\t\t\tDiagnostic.WARNING,\r\n+\t\t\t\t\t\t\t\tActivator.getPluginId(),\r\n+\t\t\t\t\t\t\t\t0,\r\n+\t\t\t\t\t\t\t\t\"Found a dangling reference in due to uncontained object. Press save to fix.\",\r\n+\t\t\t\t\t\t\t\tnew Object[] { eReferencedObject, eObject }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NjgyMw==", "bodyText": "Just for clarity: According to the new code I think we would stay on the error page in the case of a warning.\nIs this intended?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#discussion_r387656823", "createdAt": "2020-03-04T13:13:06Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/editor/GenericEditor.java", "diffHunk": "@@ -587,7 +587,7 @@ protected void addPages() {\n \t\t}\r\n \r\n \t\tDiagnostic diagnostic = editingDomain.getResourceSet().getResourceToDiagnosticsMap().get(resource);\r\n-\t\tboolean hasErrors = diagnostic != null && diagnostic.getSeverity() == Diagnostic.ERROR;\r\n+\t\tboolean hasErrors = diagnostic != null && diagnostic.getSeverity() != Diagnostic.OK;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MTg5NTQx", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#pullrequestreview-374189541", "createdAt": "2020-03-13T10:23:11Z", "commit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "571d07b6694fd36b524d0b97e413696cebcbb6f7", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/571d07b6694fd36b524d0b97e413696cebcbb6f7", "committedDate": "2020-04-01T14:04:24Z", "message": "Merge Development"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ead19298eeb6cd96c19d2cc62c9a59af86422d8a", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ead19298eeb6cd96c19d2cc62c9a59af86422d8a", "committedDate": "2020-04-01T14:08:00Z", "message": "Fixed spelling mistakes due to review - (Task #509)\n\n- Fixed grammar in error message\n- Fixed some comments\n\n---\nTask #509: Performance Issue in cross reference check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzA3MDg5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#pullrequestreview-385707089", "createdAt": "2020-04-01T15:37:08Z", "commit": {"oid": "ead19298eeb6cd96c19d2cc62c9a59af86422d8a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 609, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}