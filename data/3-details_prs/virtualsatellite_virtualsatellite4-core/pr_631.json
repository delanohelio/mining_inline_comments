{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMTI2NTkz", "number": 631, "title": "Added BeanPropertyReference ", "bodyText": "Added a BeanPropertyReference that wraps a ReferencePropertyInstance .\nThe GenerateCategoryBeans now uses the BeanPropertyReference .\nHad to correct the naming convention for the getter and setters:\n\nget/set... now always returns the referenced bean\nget...Bean now always returns the BeanPropertyReference\n\n\u26a0\ufe0f This will produce errors in TestCategoryReferenceTest and BeanPropertyReferenceTest once the new generator is used\nCloses #606", "createdAt": "2020-06-08T13:15:01Z", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/631", "merged": true, "mergeCommit": {"oid": "1ee2b31f794db87845c72279b064676ccb52bf89"}, "closed": true, "closedAt": "2020-06-09T10:24:47Z", "author": {"login": "JAmmermann-DLR"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl92GjgH2gAyNDMxMTI2NTkzOjYyNzJkMDY1ZjZiMjA3NjZlYTAzN2ZiMWM1YjUyODcwM2FkMjYxNWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpicPqAFqTQyNzAwMjE3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6272d065f6b20766ea037fb1c5b528703ad2615d", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/6272d065f6b20766ea037fb1c5b528703ad2615d", "committedDate": "2020-05-29T08:04:35Z", "message": "Add BeanPropertyReference - (Task #606)\n\n---\nTask #606: Evaluate adding a BeanPropertyReference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d23173da261e0d204a348e58b9b0f13456cfd66e", "author": {"user": {"login": "PhilMFischer", "name": "Philipp M. Fischer"}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d23173da261e0d204a348e58b9b0f13456cfd66e", "committedDate": "2020-05-29T13:10:03Z", "message": "Added a new little sample test case for the reference bean - (Task #606)\n\n- Started a test case for the BeanReferenceProperty\n- Added to model extension tests to reuse TestCategoryReference\n\n---\nTask #606: Evaluate adding a BeanPropertyReference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1846c3c9db4785d7f998192ad8ebc589d6867912", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/1846c3c9db4785d7f998192ad8ebc589d6867912", "committedDate": "2020-06-02T10:43:45Z", "message": "Implement BeanPropertyReference - (Task #606)\n\nImplement missing methods and add test cases.\n\n---\nTask #606: Evaluate adding a BeanPropertyReference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fda1948ffe99b975dad340bf82c885218af00a7b", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/fda1948ffe99b975dad340bf82c885218af00a7b", "committedDate": "2020-06-03T07:25:08Z", "message": "Merge branch 'development' into feature/task_606-Evaluate_adding_a_Bea"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0586097383cc9a858006f493a2f2beabdf7d482c", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0586097383cc9a858006f493a2f2beabdf7d482c", "committedDate": "2020-06-03T08:09:15Z", "message": "Update BeanPropertyReference - (Task #606)\n\nNow uses the BeanPropertyFactory\n\n---\nTask #606: Evaluate adding a BeanPropertyReference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e59ec3e6d13baadc8cb0ba2531fcce6b0a15ff47", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e59ec3e6d13baadc8cb0ba2531fcce6b0a15ff47", "committedDate": "2020-06-04T09:17:13Z", "message": "Improve BeanPropertyReferenceTest - (Task #606)\n\n---\nTask #606: Evaluate adding a BeanPropertyReference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdf53934bf098b57c283e261e0a2c77173633a14", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/cdf53934bf098b57c283e261e0a2c77173633a14", "committedDate": "2020-06-05T10:13:33Z", "message": "Update GenerateCategoryBeans.xtend - (Task #606)\n\nNow uses the BeanPropertyReference\n\n---\nTask #606: Evaluate adding a BeanPropertyReference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e55e692697f07986b4b59ccfc13a71d7173ab4e3", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e55e692697f07986b4b59ccfc13a71d7173ab4e3", "committedDate": "2020-06-08T11:06:35Z", "message": "Update GenerateCategoryBeans.xtend - (Task #606)\n\n---\nTask #606: Evaluate adding a BeanPropertyReference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a9739cfe29e4c8027483d5998e689ea7efe2efd", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/5a9739cfe29e4c8027483d5998e689ea7efe2efd", "committedDate": "2020-06-08T12:33:05Z", "message": "Correct naming in GenerateCategoryBeans - (Task #606)\n\nThe methods to get and set the referenced bean are now always called\nwithout the \"bean\" keyword. A getter with \"bean\" always returns the\nBeanPropertyReference.\n\nAdded a null check to BeanPropertyReference setValue.\n\n---\nTask #606: Evaluate adding a BeanPropertyReference"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2ODAxNTk2", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/631#pullrequestreview-426801596", "createdAt": "2020-06-09T05:37:29Z", "commit": {"oid": "5a9739cfe29e4c8027483d5998e689ea7efe2efd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozNzoyOVrOGg5a1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozODo0OVrOGg5cSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODM3Mw==", "bodyText": "Why do we have to handle a Runtime Exception for the Category Factory but not the Property Factory. This looks a bit odd. Please have a quick look and investigate.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/631#discussion_r437148373", "createdAt": "2020-06-09T05:37:29Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyReference.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.concept.types.property;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.common.command.Command;\n+import org.eclipse.emf.edit.command.SetCommand;\n+import org.eclipse.emf.edit.domain.EditingDomain;\n+\n+import de.dlr.sc.virsat.model.concept.types.ABeanObject;\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanCategoryAssignmentFactory;\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanPropertyFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\n+\n+/**\n+ * Bean class to wrap the referenced beans of ReferencePropertyInstances\n+ * @param <BEAN_TYPE> type of the referenced bean\n+ */\n+public class BeanPropertyReference<BEAN_TYPE extends IBeanObject<? extends ATypeInstance>> extends ABeanObject<ReferencePropertyInstance> implements IBeanProperty<ReferencePropertyInstance, BEAN_TYPE> {\n+\n+\n+\tpublic BeanPropertyReference() { }\n+\n+\t/**\n+\t * Constructor to directly set the type instance\n+\t * @param rpi the type instance to be used\n+\t */\n+\tpublic BeanPropertyReference(ReferencePropertyInstance rpi) {\n+\t\tsetTypeInstance(rpi);\n+\t}\n+\t\n+\tprivate ATypeInstance saveGetTypeInstance(BEAN_TYPE value) {\n+\t\tif (value == null) {\n+\t\t\treturn null;\n+\t\t} else {\n+\t\t\treturn value.getTypeInstance();\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tpublic void setValue(BEAN_TYPE value) {\n+\t\tATypeInstance reference = saveGetTypeInstance(value);\n+\t\tti.setReference(reference);\n+\t}\n+\t\n+\t@Override\n+\tpublic Command setValue(EditingDomain ed, BEAN_TYPE value) {\n+\t\tATypeInstance reference = saveGetTypeInstance(value);\n+\t\t\n+\t\treturn SetCommand.create(ed, ti, PropertyinstancesPackage.Literals.REFERENCE_PROPERTY_INSTANCE__REFERENCE, reference);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic BEAN_TYPE getValue() {\n+\t\tBEAN_TYPE referencedBean = null;\n+\t\t\n+\t\t// Return null if no reference is set\n+\t\tif (isSet()) {\n+\t\t\tATypeInstance ref = ti.getReference();\n+\t\t\t\n+\t\t\t// Return the correct ca or property instance bean\n+\t\t\tif (ref instanceof CategoryAssignment) {\n+\t\t\t\tBeanCategoryAssignmentFactory beanCaFactory = new BeanCategoryAssignmentFactory();\n+\t\t\t\ttry {\n+\t\t\t\t\treferencedBean = (BEAN_TYPE) beanCaFactory.getInstanceFor((CategoryAssignment) ref);\n+\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t} else if (ref instanceof APropertyInstance) {\n+\t\t\t\tBeanPropertyFactory beanPropFactory = new BeanPropertyFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a9739cfe29e4c8027483d5998e689ea7efe2efd"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODU4Mg==", "bodyText": "Clean up non-needed empty lines.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/631#discussion_r437148582", "createdAt": "2020-06-09T05:38:09Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyReference.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.concept.types.property;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.common.command.Command;\n+import org.eclipse.emf.edit.command.SetCommand;\n+import org.eclipse.emf.edit.domain.EditingDomain;\n+\n+import de.dlr.sc.virsat.model.concept.types.ABeanObject;\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanCategoryAssignmentFactory;\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanPropertyFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\n+\n+/**\n+ * Bean class to wrap the referenced beans of ReferencePropertyInstances\n+ * @param <BEAN_TYPE> type of the referenced bean\n+ */\n+public class BeanPropertyReference<BEAN_TYPE extends IBeanObject<? extends ATypeInstance>> extends ABeanObject<ReferencePropertyInstance> implements IBeanProperty<ReferencePropertyInstance, BEAN_TYPE> {\n+\n+\n+\tpublic BeanPropertyReference() { }\n+\n+\t/**\n+\t * Constructor to directly set the type instance\n+\t * @param rpi the type instance to be used\n+\t */\n+\tpublic BeanPropertyReference(ReferencePropertyInstance rpi) {\n+\t\tsetTypeInstance(rpi);\n+\t}\n+\t\n+\tprivate ATypeInstance saveGetTypeInstance(BEAN_TYPE value) {\n+\t\tif (value == null) {\n+\t\t\treturn null;\n+\t\t} else {\n+\t\t\treturn value.getTypeInstance();\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tpublic void setValue(BEAN_TYPE value) {\n+\t\tATypeInstance reference = saveGetTypeInstance(value);\n+\t\tti.setReference(reference);\n+\t}\n+\t\n+\t@Override\n+\tpublic Command setValue(EditingDomain ed, BEAN_TYPE value) {\n+\t\tATypeInstance reference = saveGetTypeInstance(value);\n+\t\t\n+\t\treturn SetCommand.create(ed, ti, PropertyinstancesPackage.Literals.REFERENCE_PROPERTY_INSTANCE__REFERENCE, reference);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic BEAN_TYPE getValue() {\n+\t\tBEAN_TYPE referencedBean = null;\n+\t\t\n+\t\t// Return null if no reference is set\n+\t\tif (isSet()) {\n+\t\t\tATypeInstance ref = ti.getReference();\n+\t\t\t\n+\t\t\t// Return the correct ca or property instance bean\n+\t\t\tif (ref instanceof CategoryAssignment) {\n+\t\t\t\tBeanCategoryAssignmentFactory beanCaFactory = new BeanCategoryAssignmentFactory();\n+\t\t\t\ttry {\n+\t\t\t\t\treferencedBean = (BEAN_TYPE) beanCaFactory.getInstanceFor((CategoryAssignment) ref);\n+\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t} else if (ref instanceof APropertyInstance) {\n+\t\t\t\tBeanPropertyFactory beanPropFactory = new BeanPropertyFactory();\n+\t\t\t\treferencedBean = (BEAN_TYPE) beanPropFactory.getInstanceFor(ref);\n+\t\t\t} \n+\t\t}\n+\t\t\n+\t\treturn referencedBean;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isSet() {\n+\t\treturn ti.getReference() != null;\n+\t}\n+\n+\t@Override\n+\tpublic void unset() {\n+\t\tti.setReference(null);\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a9739cfe29e4c8027483d5998e689ea7efe2efd"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODc0Nw==", "bodyText": "Clean up empty lines.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/631#discussion_r437148747", "createdAt": "2020-06-09T05:38:49Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyReferenceTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.types.property;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertNull;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryAssignmentHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+\r\n+public class BeanPropertyReferenceTest extends AConceptTestCase {\r\n+\r\n+\tprivate TestCategoryAllProperty testCategoryAllProperty;\r\n+\tprivate TestCategoryReference testCategoryReference;\r\n+\t\r\n+\tprivate ReferencePropertyInstance rpiToCategory;\r\n+\tprivate BeanPropertyReference<TestCategoryAllProperty> beanTestRefCategory;\r\n+\t\r\n+\tprivate ReferencePropertyInstance rpiToProperty;\r\n+\tBeanPropertyReference<BeanPropertyString> beanTestRefProperty;\r\n+\tBeanPropertyString beanTestString;\r\n+\r\n+\t@Before\r\n+\tpublic void setup() {\r\n+\t\tprepareEditingDomain();\r\n+\r\n+\t\tConcept concept = loadConceptFromPlugin();\r\n+\t\r\n+\t\ttestCategoryAllProperty = new TestCategoryAllProperty(concept);\r\n+\t\ttestCategoryReference = new TestCategoryReference(concept);\r\n+\t\t\r\n+\t\tCategoryAssignment testCategoryRefernceCa = testCategoryReference.getTypeInstance();\r\n+\t\tCategoryAssignmentHelper caHelper = new CategoryAssignmentHelper(testCategoryRefernceCa);\r\n+\t\t\r\n+\t\t// Create a bean for the rpi to a ca\r\n+\t\trpiToCategory = (ReferencePropertyInstance) caHelper.getPropertyInstance(TestCategoryReference.PROPERTY_TESTREFCATEGORY);\r\n+\t\tbeanTestRefCategory = new BeanPropertyReference<>(rpiToCategory);\r\n+\t\t\r\n+\t\t// Create a bean for the rpi to a String property\r\n+\t\trpiToProperty = (ReferencePropertyInstance) caHelper.getPropertyInstance(TestCategoryReference.PROPERTY_TESTREFPROPERTY);\r\n+\t\tbeanTestRefProperty = new BeanPropertyReference<>(rpiToProperty);\r\n+\t\t\r\n+\t\tbeanTestString = testCategoryAllProperty.getTestStringBean();\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a9739cfe29e4c8027483d5998e689ea7efe2efd"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "862e4e67c3427f7d8ac97f21032d6814fb3b4452", "author": {"user": {"login": "JAmmermann-DLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/862e4e67c3427f7d8ac97f21032d6814fb3b4452", "committedDate": "2020-06-09T06:36:26Z", "message": "Changes due to review - (Task #606)\n\n- Cleanup empty lines\n\n---\nTask #606: Evaluate adding a BeanPropertyReference"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTgwOTI1", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/631#pullrequestreview-426980925", "createdAt": "2020-06-09T09:56:02Z", "commit": {"oid": "862e4e67c3427f7d8ac97f21032d6814fb3b4452"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDAyMTc2", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/631#pullrequestreview-427002176", "createdAt": "2020-06-09T10:24:36Z", "commit": {"oid": "862e4e67c3427f7d8ac97f21032d6814fb3b4452"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 490, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}