{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMDkyNDcw", "number": 805, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODo1NzoyOVrOE1juWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo1ODowOFrOE1mpkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTk1Mjg5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODo1NzoyOVrOHt5Vkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODo1NzoyOVrOHt5Vkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4NzM3OQ==", "bodyText": "\"activated\"", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517887379", "createdAt": "2020-11-05T08:57:29Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.migrator;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ICommand;\r\n+import org.eclipse.core.resources.IProjectDescription;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.compare.CompareFactory;\r\n+import org.eclipse.emf.compare.Diff;\r\n+import org.eclipse.emf.compare.Match;\r\n+\r\n+// *****************************************************************\r\n+// * Class Declaration\r\n+// *****************************************************************\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.concept.unittest.util.test.AConceptProjectTestCase;\r\n+import de.dlr.sc.virsat.project.structure.nature.VirSatProjectNature;\r\n+\r\n+/**\r\n+ * Auto Generated Class inheriting from Generator Gap Class\r\n+ * \r\n+ * This class is generated once, do your changes here\r\n+ * \r\n+ * Extension for Requirement Specification\r\n+ * \r\n+ */\r\n+public class Migrator0v4ProjectConfigurationTest extends AConceptProjectTestCase {\t\t\r\n+\t\r\n+\tprivate Migrator0v4 migrator;\r\n+\tprivate IProjectDescription desc;\r\n+\t\r\n+\t@Override\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\tmigrator = new Migrator0v4();\r\n+\t\t\r\n+\t\t// Configure VirSat project to be updated\r\n+\t\tdesc = testProject.getDescription();\r\n+\t\tString[] natures = new String[1];\r\n+\t\tnatures[0] = VirSatProjectNature.NATURE_ID;\r\n+\t\tdesc.setNatureIds(natures);\r\n+\t\ttestProject.setDescription(desc, new NullProgressMonitor());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testDataModelMigration() throws CoreException {\r\n+\t\tMatch match = CompareFactory.eINSTANCE.createMatch();\r\n+\t\tDiff fakeDiff = CompareFactory.eINSTANCE.createAttributeChange();\r\n+\t\tfakeDiff.setMatch(match);\r\n+\t\tmatch.setRight(repository);\r\n+\t\tList<Diff> diffs = new ArrayList<Diff>();\r\n+\t\tdiffs.add(fakeDiff);\r\n+\t\t\r\n+\t\t// Remove verification builder to check that it is enabled via migration\r\n+\t\tIProjectDescription description = testProject.getDescription();\r\n+\t\tICommand[] commands = description.getBuildSpec();\r\n+\t\tICommand[] newCommands = new ICommand[commands.length - 1];\r\n+\t\tSystem.arraycopy(commands, 0, newCommands, 0, commands.length - 1);\r\n+\t\tdescription.setBuildSpec(newCommands);\r\n+\t\ttestProject.setDescription(description, new NullProgressMonitor());\r\n+\t\t\r\n+\t\tassertFalse(\"Builder is initally not acitvated\", hasVerificationBuilderEnabled());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7c847400a82061360305f31329cc2aa9fe4f1eb"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTk1NTg4OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODo1ODoyOFrOHt5Xmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwODo1ODoyOFrOHt5Xmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4Nzg5OQ==", "bodyText": "If I understand this correctly: The code removes the last build spec which is currently the verification builder.\nDoesnt this approach assume that the verification builder is the last one?\nWhat if somebody adds a new builder at some point? Would this make the test case here fail?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517887899", "createdAt": "2020-11-05T08:58:28Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/migrator/Migrator0v4ProjectConfigurationTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.migrator;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ICommand;\r\n+import org.eclipse.core.resources.IProjectDescription;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.compare.CompareFactory;\r\n+import org.eclipse.emf.compare.Diff;\r\n+import org.eclipse.emf.compare.Match;\r\n+\r\n+// *****************************************************************\r\n+// * Class Declaration\r\n+// *****************************************************************\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.concept.unittest.util.test.AConceptProjectTestCase;\r\n+import de.dlr.sc.virsat.project.structure.nature.VirSatProjectNature;\r\n+\r\n+/**\r\n+ * Auto Generated Class inheriting from Generator Gap Class\r\n+ * \r\n+ * This class is generated once, do your changes here\r\n+ * \r\n+ * Extension for Requirement Specification\r\n+ * \r\n+ */\r\n+public class Migrator0v4ProjectConfigurationTest extends AConceptProjectTestCase {\t\t\r\n+\t\r\n+\tprivate Migrator0v4 migrator;\r\n+\tprivate IProjectDescription desc;\r\n+\t\r\n+\t@Override\r\n+\tpublic void setUp() throws CoreException {\r\n+\t\tsuper.setUp();\r\n+\t\taddEditingDomainAndRepository();\r\n+\t\tmigrator = new Migrator0v4();\r\n+\t\t\r\n+\t\t// Configure VirSat project to be updated\r\n+\t\tdesc = testProject.getDescription();\r\n+\t\tString[] natures = new String[1];\r\n+\t\tnatures[0] = VirSatProjectNature.NATURE_ID;\r\n+\t\tdesc.setNatureIds(natures);\r\n+\t\ttestProject.setDescription(desc, new NullProgressMonitor());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testDataModelMigration() throws CoreException {\r\n+\t\tMatch match = CompareFactory.eINSTANCE.createMatch();\r\n+\t\tDiff fakeDiff = CompareFactory.eINSTANCE.createAttributeChange();\r\n+\t\tfakeDiff.setMatch(match);\r\n+\t\tmatch.setRight(repository);\r\n+\t\tList<Diff> diffs = new ArrayList<Diff>();\r\n+\t\tdiffs.add(fakeDiff);\r\n+\t\t\r\n+\t\t// Remove verification builder to check that it is enabled via migration\r\n+\t\tIProjectDescription description = testProject.getDescription();\r\n+\t\tICommand[] commands = description.getBuildSpec();\r\n+\t\tICommand[] newCommands = new ICommand[commands.length - 1];\r\n+\t\tSystem.arraycopy(commands, 0, newCommands, 0, commands.length - 1);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7c847400a82061360305f31329cc2aa9fe4f1eb"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjA1NDkxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToyMzoyMFrOHt6Vag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToyMzoyMFrOHt6Vag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkwMzcyMg==", "bodyText": "Maybe \"specification1\" for name consistency.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517903722", "createdAt": "2020-11-05T09:23:20Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements.test/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilderTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.verification.build;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.internal.events.ResourceDelta;\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.resources.IResource;\r\n+import org.eclipse.core.resources.IResourceDelta;\r\n+import org.eclipse.core.resources.IResourceDeltaVisitor;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.IPath;\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.build.test.ABuilderTest;\r\n+import de.dlr.sc.virsat.concept.unittest.util.ConceptXmiLoader;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementsSpecification;\r\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+@SuppressWarnings(\"restriction\")\r\n+public class RequirementsVerificationBuilderTest extends ABuilderTest {\r\n+\t\r\n+\tprivate static class TestVerificationStep implements IVerificationStep {\r\n+\r\n+\t\tSet<RequirementsSpecification> verifiedSpecs = new HashSet<RequirementsSpecification>();\r\n+\t\t\r\n+\t\t@Override\r\n+\t\tpublic void execute(RequirementsSpecification specification, EditingDomain editingDomain,\r\n+\t\t\t\tIProgressMonitor monitor) {\r\n+\t\t\tverifiedSpecs.add(specification);\r\n+\t\t}\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tprivate TestVerificationStep testVerificationStep = new TestVerificationStep();\r\n+\t\r\n+\tclass TestRequirementsVerificationBuilder extends RequirementsVerificationBuilder {\r\n+\t\t\r\n+\t\t@Override\r\n+\t\tprotected void initVerificationSteps() {\r\n+\t\t\tverificationSteps.add(testVerificationStep);\r\n+\t\t}\r\n+\t\t\r\n+\t\t@Override\r\n+\t\tprotected IProject getVirSatProject() {\r\n+\t\t\treturn project;\r\n+\t\t}\r\n+\t\t\r\n+\t\t@Override\r\n+\t\tprotected VirSatResourceSet getResourceSet() {\r\n+\t\t\treturn resSet;\r\n+\t\t}\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tprivate TestRequirementsVerificationBuilder builder;\r\n+\tprivate Concept requirementsConcept;\r\n+\tprivate RequirementsSpecification specification;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7c847400a82061360305f31329cc2aa9fe4f1eb"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjQwODYzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/provider/RequirementsAttributeLabelProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo1MTozM1rOHt9whw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTo1NjowOFrOHunYsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1OTgxNQ==", "bodyText": "Would it be possible to make the structure here a bit simple by extracting a getImagePath(statusValue) method?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517959815", "createdAt": "2020-11-05T10:51:33Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/provider/RequirementsAttributeLabelProvider.java", "diffHunk": "@@ -177,6 +184,35 @@ public Image getColumnImage(Object object, int columnIndex) {\n \r\n \t\treturn super.getColumnImage(object, columnIndex);\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * Get the icon for the requirement status\r\n+\t * @param statusValue the current status value\r\n+\t * @return the image\r\n+\t */\r\n+\tprotected Image getStatusIcon(String statusValue) {\r\n+\t\tif (statusValue == null) {\r\n+\t\t\treturn null;\r\n+\t\t}\r\n+\t\tString imagePath = ICON_STATUS_OPEN_PATH;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7c847400a82061360305f31329cc2aa9fe4f1eb"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MTg0MQ==", "bodyText": "Not sure why it doesn't show outdated... I applyed your suggestion however... Although I don't really see a simplification here :D", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r518641841", "createdAt": "2020-11-06T09:56:08Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements.ui/src/de/dlr/sc/virsat/model/extension/requirements/ui/provider/RequirementsAttributeLabelProvider.java", "diffHunk": "@@ -177,6 +184,35 @@ public Image getColumnImage(Object object, int columnIndex) {\n \r\n \t\treturn super.getColumnImage(object, columnIndex);\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * Get the icon for the requirement status\r\n+\t * @param statusValue the current status value\r\n+\t * @return the image\r\n+\t */\r\n+\tprotected Image getStatusIcon(String statusValue) {\r\n+\t\tif (statusValue == null) {\r\n+\t\t\treturn null;\r\n+\t\t}\r\n+\t\tString imagePath = ICON_STATUS_OPEN_PATH;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1OTgxNQ=="}, "originalCommit": {"oid": "d7c847400a82061360305f31329cc2aa9fe4f1eb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjQxMzY1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo1MzowMVrOHt9zvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo1MzowMVrOHt9zvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2MDYzOQ==", "bodyText": "weird whitespace", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517960639", "createdAt": "2020-11-05T10:53:01Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.verification.build;\r\n+\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.core.runtime.SubMonitor;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.IVerification;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.Requirement;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementGroup;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementObject;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementsSpecification;\r\n+\r\n+/**\r\n+ * Class to update the requirement status according to their verification status \r\n+ *\r\n+ */\r\n+public class RequirementsStatusUpdater implements IVerificationStep {\r\n+\r\n+\tprotected EditingDomain editingDomain;\r\n+\t\r\n+\t@Override\r\n+\tpublic void execute(RequirementsSpecification specification, EditingDomain editingDomain, IProgressMonitor monitor) {\r\n+\t\tthis.editingDomain = editingDomain;\r\n+\t\tint verificationTaskNumber = specification.getRequirements().size();\r\n+\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, verificationTaskNumber);\r\n+\t\tsubMonitor.beginTask(\"Updating Status on Requirments in Specification \" + specification.getName(), verificationTaskNumber);\r\n+\t\tfor (RequirementObject requirementObject : specification.getRequirements()) {\r\n+\t\t\tupdateRequirementStatus(requirementObject, subMonitor);\r\n+\t\t\tsubMonitor.worked(1);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Update the status of the different requirement objects in a specification \r\n+\t * @param requirementObject\tthe requirement object to verify\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7c847400a82061360305f31329cc2aa9fe4f1eb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjQxODc1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo1NDozMlrOHt927w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo1NDozMlrOHt927w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2MTQ1NQ==", "bodyText": "Maybe extract the verfification.getStatus() into a variable so we dont have to repeat it in all if checks.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517961455", "createdAt": "2020-11-05T10:54:32Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.verification.build;\r\n+\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.core.runtime.SubMonitor;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.IVerification;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.Requirement;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementGroup;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementObject;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementsSpecification;\r\n+\r\n+/**\r\n+ * Class to update the requirement status according to their verification status \r\n+ *\r\n+ */\r\n+public class RequirementsStatusUpdater implements IVerificationStep {\r\n+\r\n+\tprotected EditingDomain editingDomain;\r\n+\t\r\n+\t@Override\r\n+\tpublic void execute(RequirementsSpecification specification, EditingDomain editingDomain, IProgressMonitor monitor) {\r\n+\t\tthis.editingDomain = editingDomain;\r\n+\t\tint verificationTaskNumber = specification.getRequirements().size();\r\n+\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, verificationTaskNumber);\r\n+\t\tsubMonitor.beginTask(\"Updating Status on Requirments in Specification \" + specification.getName(), verificationTaskNumber);\r\n+\t\tfor (RequirementObject requirementObject : specification.getRequirements()) {\r\n+\t\t\tupdateRequirementStatus(requirementObject, subMonitor);\r\n+\t\t\tsubMonitor.worked(1);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Update the status of the different requirement objects in a specification \r\n+\t * @param requirementObject\tthe requirement object to verify\r\n+\t * @param monitor the progress monitor\r\n+\t */\r\n+\tprotected void updateRequirementStatus(RequirementObject requirementObject, IProgressMonitor monitor) {\r\n+\t\tif (requirementObject instanceof RequirementGroup) {\r\n+\t\t\t// Recursively go threw groups\r\n+\t\t\tRequirementGroup group = (RequirementGroup) requirementObject;\r\n+\t\t\tint verificationTaskNumber = group.getChildren().size();\r\n+\t\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, verificationTaskNumber);\r\n+\t\t\tsubMonitor.beginTask(\"Updating Status on Requirments in Group \" + group.getName(), verificationTaskNumber);\r\n+\t\t\tfor (RequirementObject child : group.getChildren()) {\r\n+\t\t\t\tupdateRequirementStatus(child, subMonitor);\r\n+\t\t\t}\r\n+\t\t} else if (requirementObject instanceof Requirement) {\r\n+\t\t\tRequirement requirement = (Requirement) requirementObject;\r\n+\t\t\tcomputeNewStatus(requirement);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Compute the new requirement status based on the verification status\r\n+\t * @param requirement the requirement to be updated\r\n+\t */\r\n+\tprotected void computeNewStatus(Requirement requirement) {\r\n+\t\tboolean inProgress = false;\r\n+\t\tboolean partlyNonCompliant = false;\r\n+\t\tboolean partlyCompliant = false;\r\n+\t\tboolean fullyCompliant = false;\r\n+\t\t\r\n+\t\tfor (IVerification verification : requirement.getVerification()) {\r\n+\t\t\tif (verification.getStatus() != null) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7c847400a82061360305f31329cc2aa9fe4f1eb"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjQyMzQyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo1NTo1MlrOHt95yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo1NTo1MlrOHt95yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2MjE4NA==", "bodyText": "We could extract a command variable and execute that at the end.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517962184", "createdAt": "2020-11-05T10:55:52Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsStatusUpdater.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.verification.build;\r\n+\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.core.runtime.SubMonitor;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.IVerification;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.Requirement;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementGroup;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementObject;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementsSpecification;\r\n+\r\n+/**\r\n+ * Class to update the requirement status according to their verification status \r\n+ *\r\n+ */\r\n+public class RequirementsStatusUpdater implements IVerificationStep {\r\n+\r\n+\tprotected EditingDomain editingDomain;\r\n+\t\r\n+\t@Override\r\n+\tpublic void execute(RequirementsSpecification specification, EditingDomain editingDomain, IProgressMonitor monitor) {\r\n+\t\tthis.editingDomain = editingDomain;\r\n+\t\tint verificationTaskNumber = specification.getRequirements().size();\r\n+\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, verificationTaskNumber);\r\n+\t\tsubMonitor.beginTask(\"Updating Status on Requirments in Specification \" + specification.getName(), verificationTaskNumber);\r\n+\t\tfor (RequirementObject requirementObject : specification.getRequirements()) {\r\n+\t\t\tupdateRequirementStatus(requirementObject, subMonitor);\r\n+\t\t\tsubMonitor.worked(1);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Update the status of the different requirement objects in a specification \r\n+\t * @param requirementObject\tthe requirement object to verify\r\n+\t * @param monitor the progress monitor\r\n+\t */\r\n+\tprotected void updateRequirementStatus(RequirementObject requirementObject, IProgressMonitor monitor) {\r\n+\t\tif (requirementObject instanceof RequirementGroup) {\r\n+\t\t\t// Recursively go threw groups\r\n+\t\t\tRequirementGroup group = (RequirementGroup) requirementObject;\r\n+\t\t\tint verificationTaskNumber = group.getChildren().size();\r\n+\t\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, verificationTaskNumber);\r\n+\t\t\tsubMonitor.beginTask(\"Updating Status on Requirments in Group \" + group.getName(), verificationTaskNumber);\r\n+\t\t\tfor (RequirementObject child : group.getChildren()) {\r\n+\t\t\t\tupdateRequirementStatus(child, subMonitor);\r\n+\t\t\t}\r\n+\t\t} else if (requirementObject instanceof Requirement) {\r\n+\t\t\tRequirement requirement = (Requirement) requirementObject;\r\n+\t\t\tcomputeNewStatus(requirement);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Compute the new requirement status based on the verification status\r\n+\t * @param requirement the requirement to be updated\r\n+\t */\r\n+\tprotected void computeNewStatus(Requirement requirement) {\r\n+\t\tboolean inProgress = false;\r\n+\t\tboolean partlyNonCompliant = false;\r\n+\t\tboolean partlyCompliant = false;\r\n+\t\tboolean fullyCompliant = false;\r\n+\t\t\r\n+\t\tfor (IVerification verification : requirement.getVerification()) {\r\n+\t\t\tif (verification.getStatus() != null) {\r\n+\t\t\t\tif (verification.getStatus().equals(IVerification.STATUS_FullyCompliant_NAME)) {\r\n+\t\t\t\t\tfullyCompliant = true;\r\n+\t\t\t\t} else if (verification.getStatus().equals(IVerification.STATUS_NonCompliant_NAME)) {\r\n+\t\t\t\t\tpartlyNonCompliant = true;\r\n+\t\t\t\t} else if (verification.getStatus().equals(IVerification.STATUS_Open_NAME)) {\r\n+\t\t\t\t\tinProgress = true;\r\n+\t\t\t\t} else if (verification.getStatus().equals(IVerification.STATUS_PartialCompliant_NAME)) {\r\n+\t\t\t\t\tpartlyCompliant = true;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (inProgress) {\r\n+\t\t\teditingDomain.getCommandStack().execute(requirement.setStatus(editingDomain, Requirement.STATUS_Open_NAME));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7c847400a82061360305f31329cc2aa9fe4f1eb"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjQzMjE2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo1ODowOFrOHt9_Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo1ODowOFrOHt9_Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2MzU0Ng==", "bodyText": "Any reason we cannot do List<Requirementsspecification> specifications = seiBean.getAll(RquirementsSpecification.class)", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/805#discussion_r517963546", "createdAt": "2020-11-05T10:58:08Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.requirements/src/de/dlr/sc/virsat/model/extension/requirements/verification/build/RequirementsVerificationBuilder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.requirements.verification.build;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.resources.IFile;\r\n+import org.eclipse.core.resources.IResource;\r\n+import org.eclipse.core.resources.IResourceDelta;\r\n+import org.eclipse.core.resources.IResourceDeltaVisitor;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.core.runtime.SubMonitor;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+\r\n+import de.dlr.sc.virsat.build.inheritance.AVirSatTransactionalBuilder;\r\n+import de.dlr.sc.virsat.model.concept.types.structural.BeanStructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.extension.requirements.Activator;\r\n+import de.dlr.sc.virsat.model.extension.requirements.model.RequirementsSpecification;\r\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\r\n+import de.dlr.sc.virsat.project.structure.VirSatProjectCommons;\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n+public class RequirementsVerificationBuilder extends AVirSatTransactionalBuilder {\r\n+\r\n+\tpublic static final String BUILDER_ID = \"de.dlr.sc.virsat.model.extension.requirements.build.verification\";\r\n+\t\r\n+\tprotected List<IVerificationStep> verificationSteps = new ArrayList<IVerificationStep>();\r\n+\t\r\n+\t/**\r\n+\t * @param builderName\r\n+\t * @param vpmHelper\r\n+\t * @param redirectIncrementalToAutoBuild\r\n+\t * @param dvlmOnly\r\n+\t */\r\n+\tpublic RequirementsVerificationBuilder() {\r\n+\t\tsuper(\"Requirements Verification Builder\", new VirSatVerificationMarkerHelper(), true, true);\r\n+\t\tinitVerificationSteps();\r\n+\t}\r\n+\t\r\n+\tprotected void initVerificationSteps() {\r\n+\t\tverificationSteps.add(new RequirementVerificationRunner());\r\n+\t\tverificationSteps.add(new RequirementsStatusUpdater());\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void incrementalBuild(IResourceDelta delta, IProgressMonitor monitor) {\r\n+\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VerificationBuilder: Starting incremental build!\"));\r\n+\t\t\r\n+\t\ttry {\r\n+\t\t\tVirSatResourceSet resourceSet = getResourceSet();\r\n+\t\t\t\r\n+\t\t\tif (resourceSet != null && !resourceSet.isOpen()) {\r\n+\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VerificationBuilder: Exited since project is closed!\"));\r\n+\t\t\t\treturn;\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\tdelta.accept(new IResourceDeltaVisitor() {\r\n+\t\t\t\tpublic boolean visit(IResourceDelta delta) {\r\n+\t\t\t\t\tIResource iResource = delta.getResource();\r\n+\t\t\t\t\r\n+\t\t\t\t\tif (iResource instanceof IFile) {\r\n+\t\t\t\t\t\t// We should only process DVLM resources in terms of model updates\r\n+\t\t\t\t\t\tIFile iFile = (IFile) iResource;\r\n+\t\t\t\t\t\t\t\t\t\t\t\t\r\n+\t\t\t\t\t\tif (!iFile.exists() || !VirSatProjectCommons.isDvlmFile(iFile)) {\r\n+\t\t\t\t\t\t\treturn true;\r\n+\t\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(),\r\n+\t\t\t\t\t\t\t\t\"VerificationBuilder: Processing incremental build on resource (\" + iResource + \")\"));\r\n+\t\t\t\t\t\t\r\n+\t\t\t\t\t\tResource resource = resourceSet.safeGetResource(iFile, false);\r\n+\t\t\t\t\t\tif (resource.getContents().get(0) instanceof StructuralElementInstance) {\r\n+\t\t\t\t\t\t\tbuildSei(new BeanStructuralElementInstance((StructuralElementInstance) resource.getContents().get(0)), monitor);\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\r\n+\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\treturn true; // visit children too\r\n+\t\t\t\t}\r\n+\t\t\t});\r\n+\t\t\t\r\n+\t\t} catch (CoreException e) {\r\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"VerificationBuilder: Received an exception\", e));\r\n+\t\t}\r\n+\t\t\r\n+\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VerificationBuilder: Finished incremental build!\"));\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected void fullBuild(IProgressMonitor monitor) {\r\n+\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VerificationBuilder: Starting full build!\"));\r\n+\t\tVirSatResourceSet resourceSet = getResourceSet();\r\n+\t\tif (resourceSet != null && !resourceSet.isOpen()) {\r\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VerificationBuilder: Exited since project is closed!\"));\r\n+\t\t\treturn;\r\n+\t\t}\r\n+\t\t\r\n+\t\tSet<StructuralElementInstance> seis = getResourceSet().getAllSeisInProject();\r\n+\t\t\r\n+\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, seis.size());\r\n+\t\tsubMonitor.beginTask(\"Executing Verification of SEIs\", seis.size());\r\n+\t\t\r\n+\t\tfor (StructuralElementInstance sei : seis) {\r\n+\t\t\tBeanStructuralElementInstance bean = new BeanStructuralElementInstance(sei);\r\n+\t\t\tbuildSei(bean, subMonitor);\r\n+\t\t\tsubMonitor.worked(1);\r\n+\t\t}\r\n+\t\t\r\n+\t\t\r\n+\t\tActivator.getDefault().getLog().log(new Status(Status.INFO, Activator.getPluginId(), \"VerificationBuilder: Finished full build!\"));\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Run the verification on a SEI within the project\r\n+\t * @param seiBean the SEI Bean\r\n+\t * @param monitor the progress monitor\r\n+\t */\r\n+\tprotected void buildSei(BeanStructuralElementInstance seiBean, IProgressMonitor monitor) {\r\n+\t\tList<CategoryAssignment> caSpecifications = seiBean.getStructuralElementInstance().getCategoryAssignments().stream().\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7c847400a82061360305f31329cc2aa9fe4f1eb"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 646, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}