{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5Mjg5MzI2", "number": 717, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxNTozMVrOEWJEyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyODowM1rOEeYPbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjUyODExOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/ABeanObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxNTozMVrOG9SsSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToxMToyOFrOG9V6NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMjU2OA==", "bodyText": "I know Im the one who added this :D but the way I understand it now we only neet to annotate the set or the get.\nI see in the other methods you annotate the get, so to stay consistent, I think here too we should only annotate the getter.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466922568", "createdAt": "2020-08-07T09:15:31Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/ABeanObject.java", "diffHunk": "@@ -39,11 +49,17 @@ public ABeanObject() {\n \t}\r\n \t\r\n \t@SuppressWarnings(\"unchecked\")\r\n+\t@XmlID\r\n+\t@XmlElement(name = \"uuid\")\r\n+\t@XmlJavaTypeAdapter(TypeInstanceAdapter.class)\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NTI4NQ==", "bodyText": "Sure and I also found some other beans where I did the same", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466975285", "createdAt": "2020-08-07T11:11:28Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/ABeanObject.java", "diffHunk": "@@ -39,11 +49,17 @@ public ABeanObject() {\n \t}\r\n \t\r\n \t@SuppressWarnings(\"unchecked\")\r\n+\t@XmlID\r\n+\t@XmlElement(name = \"uuid\")\r\n+\t@XmlJavaTypeAdapter(TypeInstanceAdapter.class)\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMjU2OA=="}, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjUzMTAwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/category/ABeanCategoryAssignment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxNjozMVrOG9SuKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToxMDo0M1rOG9V4-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMzA0OA==", "bodyText": "Do we still need this? I think this is just a fragment that stuck around from when phillip and me were playing around tih the annotations on category assignemnt level.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466923048", "createdAt": "2020-08-07T09:16:31Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/category/ABeanCategoryAssignment.java", "diffHunk": "@@ -53,6 +55,11 @@ public void setATypeInstance(ATypeInstance ti) {\n \t\thelper.setCategoryAssignment(this.ti);\r\n \t}\r\n \t\r\n+\t@Override\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NDk3MQ==", "bodyText": "You are right, removed", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466974971", "createdAt": "2020-08-07T11:10:43Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/category/ABeanCategoryAssignment.java", "diffHunk": "@@ -53,6 +55,11 @@ public void setATypeInstance(ATypeInstance ti) {\n \t\thelper.setCategoryAssignment(this.ti);\r\n \t}\r\n \t\r\n+\t@Override\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMzA0OA=="}, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjUzMjM5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/factory/BeanTypeInstanceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxNjo1NlrOG9SvAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxNjo1NlrOG9SvAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMzI2Nw==", "bodyText": "ATypeInstnace -> ATypeInstance", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466923267", "createdAt": "2020-08-07T09:16:56Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/factory/BeanTypeInstanceFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.concept.types.factory;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.Status;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.provider.DVLMEditPlugin;\n+\n+/**\n+ * A factory class for TypeInstanceBeans which can create the correct bean\n+ * for a given ATypeInstnace depending on the registration of Beans", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjU0MTg4OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/json/AnyTypeAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxOTo1NlrOG9S0wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToxNToxM1rOG9V_0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNDczOA==", "bodyText": "This class probably needs some more description as to why we need it.\nIf I recall correctly it involved something with generics right?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466924738", "createdAt": "2020-08-07T09:19:56Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/json/AnyTypeAdapter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.dvlm.json;\n+\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+\n+/**\n+ * This XmlAdapter can be used to marshal any generic Java Object. \n+ * This will result in a \"type\" attribute (XML) or key value pair (JSON)\n+ * added to the marshalled object, which is needed for unmarshalling.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NjcyMQ==", "bodyText": "Yes I improved the comment, please look into it to check if it is clear now.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466976721", "createdAt": "2020-08-07T11:15:13Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/json/AnyTypeAdapter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.dvlm.json;\n+\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+\n+/**\n+ * This XmlAdapter can be used to marshal any generic Java Object. \n+ * This will result in a \"type\" attribute (XML) or key value pair (JSON)\n+ * added to the marshalled object, which is needed for unmarshalling.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNDczOA=="}, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjU0MzU5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/json/AnyTypeAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToyMDoyNFrOG9S1vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToyMDoyNFrOG9S1vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNDk4OQ==", "bodyText": "I dont think we need to explicitly declare this constructor.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466924989", "createdAt": "2020-08-07T09:20:24Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/json/AnyTypeAdapter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.dvlm.json;\n+\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+\n+/**\n+ * This XmlAdapter can be used to marshal any generic Java Object. \n+ * This will result in a \"type\" attribute (XML) or key value pair (JSON)\n+ * added to the marshalled object, which is needed for unmarshalling.\n+ */\n+public class AnyTypeAdapter extends XmlAdapter<Object, Object> {\n+\tpublic AnyTypeAdapter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjU2MDUxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/test/TestActivator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToyNToyNVrOG9S_9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToyNToyNVrOG9S_9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNzYwNg==", "bodyText": "URL url = new URL(\"platform:/plugin/\" + FRAGMENT_ID + resourcePath);", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466927606", "createdAt": "2020-08-07T09:25:25Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/test/TestActivator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.test;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.net.URL;\r\n+\r\n+import org.junit.Assert;\r\n+\r\n+public class TestActivator {\r\n+\r\n+\t\r\n+\t/**\r\n+\t * Hidden construcotr of activator class\r\n+\t */\r\n+\tprivate TestActivator() {\r\n+\t}\r\n+\t\r\n+\tpublic static final String FRAGMENT_ID = \"de.dlr.sc.virsat.model.extension.tests.test\";\r\n+\r\n+\t/**\r\n+\t * Method to access the fragments contents from the resource folder and to ahnd it back as string\r\n+\t * @param resourcePath the path to the resource starting with \"resource/\"\r\n+\t * @return the content of the resource as string\r\n+\t * @throws IOException throws\r\n+\t */\r\n+\tpublic static String getResourceContentAsString(String resourcePath) throws IOException {\r\n+\t\tURL url;\r\n+\r\n+\t\turl = new URL(\"platform:/plugin/\" + FRAGMENT_ID + resourcePath);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjU4MjA3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozMTo1OVrOG9TM6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozMTo1OVrOG9TM6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMDkyMg==", "bodyText": "Any reason we cant just to + i in the setUuid call? Java should convert the int to a string for you.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466930922", "createdAt": "2020-08-07T09:31:59Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tString lastChar = Integer.toString(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjU4MzAyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozMjoyMFrOG9TNjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozMjoyMFrOG9TNjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMTA4NQ==", "bodyText": "We should probably clean up the system out statements.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466931085", "createdAt": "2020-08-07T09:32:20Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tString lastChar = Integer.toString(i);\n+\t\t\t\n+\t\t\tBeanPropertyComposed<TestCategoryAllProperty> bean = staticArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"45e18c9d-ef85-4ab8-ba2a-c5916697a0b\" + lastChar));\n+\t\t\t\n+\t\t\tTestCategoryAllProperty tcAllProperty = bean.getValue();\n+\t\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty, lastChar);\n+\t\t}\n+\t\t\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\ttestArray.getTestCompositionArrayStatic().get(0).getTestStringBean().setValue(JsonTestHelper.TEST_STRING);\n+\t\t\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(testArray, sw);\n+\t\t\n+\t\tSystem.out.println(sw.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjU4NDgzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozMjo1MFrOG9TOlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozMjo1MFrOG9TOlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMTM0OQ==", "bodyText": "assertNull instead of assertEquals with null", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466931349", "createdAt": "2020-08-07T09:32:50Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tString lastChar = Integer.toString(i);\n+\t\t\t\n+\t\t\tBeanPropertyComposed<TestCategoryAllProperty> bean = staticArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"45e18c9d-ef85-4ab8-ba2a-c5916697a0b\" + lastChar));\n+\t\t\t\n+\t\t\tTestCategoryAllProperty tcAllProperty = bean.getValue();\n+\t\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty, lastChar);\n+\t\t}\n+\t\t\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\ttestArray.getTestCompositionArrayStatic().get(0).getTestStringBean().setValue(JsonTestHelper.TEST_STRING);\n+\t\t\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(testArray, sw);\n+\t\t\n+\t\tSystem.out.println(sw.toString());\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(testArray.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tString inputJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tSystem.out.println(inputJson);\n+\t\tStringReader sr = new StringReader(inputJson);\n+\n+\t\tassertEquals(null, testArray.getTestCompositionArrayStatic().get(0).getTestStringBean().getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjU4OTM2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNDoxN1rOG9TRVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNDoxN1rOG9TRVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjA1NA==", "bodyText": "assertNull", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466932054", "createdAt": "2020-08-07T09:34:17Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionTest extends AConceptTestCase {\n+\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate TestCategoryComposition tcComposition;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate Concept concept;\n+\t\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryComposition_Marshaling.json\";\n+\t\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryComposition.class});\n+\t\t\n+\t\tconcept = loadConceptFromPlugin();\n+\t\t\n+\t\ttcComposition = new TestCategoryComposition(concept);\n+\t\ttcComposition.getATypeInstance().setUuid(new VirSatUuid(\"028a6e1b-e7c4-4937-886b-d65452426bfd\"));\n+\t\ttcComposition.getTestSubCategoryBean().getATypeInstance().setUuid(new VirSatUuid(\"128a6e1b-e7c4-4937-886b-d65452426bfd\"));\n+\t\t\n+\t\ttcAllProperty = tcComposition.getTestSubCategory();\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\ttcAllProperty.setTestString(JsonTestHelper.TEST_STRING);\n+\t\t\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(tcComposition, sw);\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(tcComposition.getATypeInstance());\n+\t\tresourceImpl.getContents().add(tcAllProperty.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tString inputJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tStringReader sr = new StringReader(inputJson);\n+\n+\t\tassertEquals(null, tcAllProperty.getTestString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjU5MTc0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryIntrinsicArrayTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNDo1OVrOG9TSwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNDo1OVrOG9TSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjQxNg==", "bodyText": "Expected and is value seem to be flipped here.\nAlso assertNull.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466932416", "createdAt": "2020-08-07T09:34:59Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryIntrinsicArrayTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.ATestCategoryIntrinsicArrayTest;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryIntrinsicArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryIntrinsicArrayTest extends ATestCategoryIntrinsicArrayTest {\n+\t\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate BeanPropertyString bpString;\n+\tprivate TestCategoryIntrinsicArray testArray;\n+\t\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryIntrinsicArray_Marshaling.json\";\n+\t\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t\t\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryIntrinsicArray.class});\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\n+\t\ttestArray = new TestCategoryIntrinsicArray(concept);\n+\t\ttestArray.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\ttestArray.getTestStringArrayDynamicBean().getArrayInstance().setUuid(new VirSatUuid(\"ee6e1025-4a77-4b32-9c62-cb459ed76ce8\"));\t\t\n+\t\tIBeanList<BeanPropertyString> list = testArray.getTestStringArrayStaticBean();\n+\t\tJsonTestHelper.setStaticIBeanListUuids(list);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\tbpString.setValue(JsonTestHelper.TEST_STRING);\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\ttestArray.getTestStringArrayStaticBean().get(0).setValue(JsonTestHelper.TEST_STRING);\n+\t\ttestArray.getTestStringArrayDynamicBean().add(bpString);\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(testArray, sw);\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\tArrayInstance originalArrayInstance = testArray.getTestStringArrayStaticBean().getArrayInstance();\n+\t\t\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(testArray.getATypeInstance());\n+\t\tresourceImpl.getContents().add(originalArrayInstance);\n+\t\tresourceImpl.getContents().add(bpString.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tassertEquals(testArray.getTestStringArrayStaticBean().get(0).getValue(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjU5NDUyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryReferenceArrayTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNTo1OVrOG9TUfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTozMDowOFrOHR9TQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjg2Mg==", "bodyText": "Just + i should be enough.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466932862", "createdAt": "2020-08-07T09:35:59Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryReferenceArrayTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReferenceArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryReferenceArrayTest extends AConceptTestCase {\n+\n+\tprivate TestCategoryReferenceArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate BeanPropertyString bpString;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryReferenceArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGED_REFERENCE = \"/resources/json/TestCategoryReferenceArray_Marshaling_ChangeReference.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryReferenceArray.class});\n+\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryReferenceArray(concept);\n+\t\t\n+\t\ttcAllProperty = new TestCategoryAllProperty(concept);\n+\t\t\n+\t\t// Set uuids to match the test resource\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\t\t\n+\t\ttestArray.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\t\n+\t\tIBeanList<BeanPropertyReference<TestCategoryAllProperty>> staticCategoryArray = testArray.getTestCategoryReferenceArrayStaticBean();\n+\t\tfor (int i = 0; i < staticCategoryArray.size(); i++) {\n+\t\t\tBeanPropertyReference<TestCategoryAllProperty> bean = staticCategoryArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"8872b433-968c-4f48-b9a3-d734c6e239a\" + Integer.toString(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MTk3Nw==", "bodyText": "Agree, let's change to +i, how is it resolved?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480241977", "createdAt": "2020-08-31T16:23:13Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryReferenceArrayTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReferenceArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryReferenceArrayTest extends AConceptTestCase {\n+\n+\tprivate TestCategoryReferenceArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate BeanPropertyString bpString;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryReferenceArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGED_REFERENCE = \"/resources/json/TestCategoryReferenceArray_Marshaling_ChangeReference.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryReferenceArray.class});\n+\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryReferenceArray(concept);\n+\t\t\n+\t\ttcAllProperty = new TestCategoryAllProperty(concept);\n+\t\t\n+\t\t// Set uuids to match the test resource\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\t\t\n+\t\ttestArray.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\t\n+\t\tIBeanList<BeanPropertyReference<TestCategoryAllProperty>> staticCategoryArray = testArray.getTestCategoryReferenceArrayStaticBean();\n+\t\tfor (int i = 0; i < staticCategoryArray.size(); i++) {\n+\t\t\tBeanPropertyReference<TestCategoryAllProperty> bean = staticCategoryArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"8872b433-968c-4f48-b9a3-d734c6e239a\" + Integer.toString(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjg2Mg=="}, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5MjE5NQ==", "bodyText": "I think I changed it in another place. No it should be resolved in all places.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488592195", "createdAt": "2020-09-15T11:30:08Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryReferenceArrayTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReferenceArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryReferenceArrayTest extends AConceptTestCase {\n+\n+\tprivate TestCategoryReferenceArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate BeanPropertyString bpString;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryReferenceArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGED_REFERENCE = \"/resources/json/TestCategoryReferenceArray_Marshaling_ChangeReference.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryReferenceArray.class});\n+\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryReferenceArray(concept);\n+\t\t\n+\t\ttcAllProperty = new TestCategoryAllProperty(concept);\n+\t\t\n+\t\t// Set uuids to match the test resource\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\t\t\n+\t\ttestArray.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\t\n+\t\tIBeanList<BeanPropertyReference<TestCategoryAllProperty>> staticCategoryArray = testArray.getTestCategoryReferenceArrayStaticBean();\n+\t\tfor (int i = 0; i < staticCategoryArray.size(); i++) {\n+\t\t\tBeanPropertyReference<TestCategoryAllProperty> bean = staticCategoryArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"8872b433-968c-4f48-b9a3-d734c6e239a\" + Integer.toString(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjg2Mg=="}, "originalCommit": {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzEzMTg0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/category/ABeanCategoryAssignment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MDo1NlrOG9YUXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MDo1NlrOG9YUXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNDc1MQ==", "bodyText": "I think we can remove the entire function this its defined in the parent class.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r467014751", "createdAt": "2020-08-07T12:40:56Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/category/ABeanCategoryAssignment.java", "diffHunk": "@@ -55,7 +55,6 @@ public void setATypeInstance(ATypeInstance ti) {\n \t\thelper.setCategoryAssignment(this.ti);\r\n \t}\r\n \t\r\n-\t@Override\r\n \tpublic ATypeInstance getATypeInstance() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dfa74fb9f4bc9ae6132cdceb2a90318df66c3d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzkwNDUwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests/src/de/dlr/sc/virsat/model/extension/tests/model/TestCategoryBeanA.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoxMDoyOVrOHHLTyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowMzoxNVrOHR8abA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NzM3MQ==", "bodyText": "Looks like it should be after \"Import Statements\" comment", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r477287371", "createdAt": "2020-08-26T13:10:29Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests/src/de/dlr/sc/virsat/model/extension/tests/model/TestCategoryBeanA.java", "diffHunk": "@@ -9,11 +9,11 @@\n  *******************************************************************************/\r\n package de.dlr.sc.virsat.model.extension.tests.model;\r\n \r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NzY0NA==", "bodyText": "Yes, I reverted it.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488577644", "createdAt": "2020-09-15T11:03:15Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.extension.tests/src/de/dlr/sc/virsat/model/extension/tests/model/TestCategoryBeanA.java", "diffHunk": "@@ -9,11 +9,11 @@\n  *******************************************************************************/\r\n package de.dlr.sc.virsat.model.extension.tests.model;\r\n \r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NzM3MQ=="}, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjY2MTg5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryAllPropertyTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTozMTo0MVrOHJ9oQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowNTowMVrOHR8eFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwODk2MQ==", "bodyText": "Method name doesn't correspond to contents - it's not asserting anything, but unmarschalling", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480208961", "createdAt": "2020-08-31T15:31:41Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryAllPropertyTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\r\n+\r\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.StringReader;\r\n+import java.io.StringWriter;\r\n+\r\n+import javax.xml.bind.JAXBException;\r\n+import javax.xml.bind.Marshaller;\r\n+import javax.xml.bind.Unmarshaller;\r\n+import javax.xml.transform.stream.StreamSource;\r\n+\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\r\n+public class TestCategoryAllPropertyTest extends AConceptTestCase {\r\n+\r\n+\tprivate TestCategoryAllProperty tcAllProperty;\r\n+\tprivate JAXBUtility jaxbUtility;\r\n+\tprivate Concept concept;\r\n+\t\r\n+\tprivate static final String RESOURCE_WITH_DEFAULTS = \"/resources/json/TestCategoryAllProperty_Marshaling_Defaults.json\";\r\n+\tprivate static final String RESOURCE_WITH_VALUES = \"/resources/json/TestCategoryAllProperty_Marshaling.json\";\r\n+\t\r\n+\tprivate static final boolean TEST_BOOL = true;\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final double TEST_FLOAT = 0.0;\r\n+\tprivate static final String TEST_STRING = \"this is a test\";\r\n+\tprivate static final String TEST_ENUM = \"HIGH\";\r\n+\tprivate static final String TEST_RESOURCE = \"resources/file[1].xls\";\r\n+\tprivate static final String TEST_RESOURCE_STRING = \"/\" + TEST_RESOURCE;\r\n+\t\r\n+\tprivate static final double EPSILON = 0.000001;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setup() throws JAXBException {\r\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryAllProperty.class});\r\n+\t\t\r\n+\t\tprepareEditingDomain();\r\n+\t\tconcept = loadConceptFromPlugin();\r\n+\t\t\r\n+\t\ttcAllProperty  = new TestCategoryAllProperty(concept);\r\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\r\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Set the new values\r\n+\t */\r\n+\tpublic void initProperties() {\r\n+\t\ttcAllProperty.setTestInt(TEST_INT);\r\n+\t\ttcAllProperty.setTestFloat(TEST_FLOAT);\r\n+\t\ttcAllProperty.setTestEnum(TEST_ENUM);\r\n+\t\ttcAllProperty.setTestResource(URI.createPlatformPluginURI(TEST_RESOURCE, false));\r\n+\t\ttcAllProperty.setTestString(TEST_STRING);\r\n+\t\ttcAllProperty.setTestBool(TEST_BOOL);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Marshall the TestCategoryAllProperty and assert that it equals the resource\r\n+\t * @param resource containing the expected JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertMarshalWithResource(String resource) throws JAXBException, IOException {\r\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\r\n+\t\t\r\n+\t\tStringWriter sw = new StringWriter();\r\n+\t\tjsonMarshaller.marshal(tcAllProperty, sw);\r\n+\r\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(resource);\r\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\r\n+\t\tinitProperties();\r\n+\t\t\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_VALUES);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshallingWithDefaultValues() throws JAXBException, IOException {\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_DEFAULTS);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Unmarshall the resource\r\n+\t * @param resource containing the input JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertUnmarshalWithResource(String resource) throws JAXBException, IOException {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3ODU4MQ==", "bodyText": "You are right, I renamed it", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488578581", "createdAt": "2020-09-15T11:05:01Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryAllPropertyTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\r\n+\r\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.StringReader;\r\n+import java.io.StringWriter;\r\n+\r\n+import javax.xml.bind.JAXBException;\r\n+import javax.xml.bind.Marshaller;\r\n+import javax.xml.bind.Unmarshaller;\r\n+import javax.xml.transform.stream.StreamSource;\r\n+\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\r\n+public class TestCategoryAllPropertyTest extends AConceptTestCase {\r\n+\r\n+\tprivate TestCategoryAllProperty tcAllProperty;\r\n+\tprivate JAXBUtility jaxbUtility;\r\n+\tprivate Concept concept;\r\n+\t\r\n+\tprivate static final String RESOURCE_WITH_DEFAULTS = \"/resources/json/TestCategoryAllProperty_Marshaling_Defaults.json\";\r\n+\tprivate static final String RESOURCE_WITH_VALUES = \"/resources/json/TestCategoryAllProperty_Marshaling.json\";\r\n+\t\r\n+\tprivate static final boolean TEST_BOOL = true;\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final double TEST_FLOAT = 0.0;\r\n+\tprivate static final String TEST_STRING = \"this is a test\";\r\n+\tprivate static final String TEST_ENUM = \"HIGH\";\r\n+\tprivate static final String TEST_RESOURCE = \"resources/file[1].xls\";\r\n+\tprivate static final String TEST_RESOURCE_STRING = \"/\" + TEST_RESOURCE;\r\n+\t\r\n+\tprivate static final double EPSILON = 0.000001;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setup() throws JAXBException {\r\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryAllProperty.class});\r\n+\t\t\r\n+\t\tprepareEditingDomain();\r\n+\t\tconcept = loadConceptFromPlugin();\r\n+\t\t\r\n+\t\ttcAllProperty  = new TestCategoryAllProperty(concept);\r\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\r\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Set the new values\r\n+\t */\r\n+\tpublic void initProperties() {\r\n+\t\ttcAllProperty.setTestInt(TEST_INT);\r\n+\t\ttcAllProperty.setTestFloat(TEST_FLOAT);\r\n+\t\ttcAllProperty.setTestEnum(TEST_ENUM);\r\n+\t\ttcAllProperty.setTestResource(URI.createPlatformPluginURI(TEST_RESOURCE, false));\r\n+\t\ttcAllProperty.setTestString(TEST_STRING);\r\n+\t\ttcAllProperty.setTestBool(TEST_BOOL);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Marshall the TestCategoryAllProperty and assert that it equals the resource\r\n+\t * @param resource containing the expected JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertMarshalWithResource(String resource) throws JAXBException, IOException {\r\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\r\n+\t\t\r\n+\t\tStringWriter sw = new StringWriter();\r\n+\t\tjsonMarshaller.marshal(tcAllProperty, sw);\r\n+\r\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(resource);\r\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\r\n+\t\tinitProperties();\r\n+\t\t\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_VALUES);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshallingWithDefaultValues() throws JAXBException, IOException {\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_DEFAULTS);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Unmarshall the resource\r\n+\t * @param resource containing the input JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertUnmarshalWithResource(String resource) throws JAXBException, IOException {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwODk2MQ=="}, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjY2ODM1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests/src/de/dlr/sc/virsat/model/extension/tests/model/TestCategoryCompositionArray.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTozMzoxOVrOHJ9sBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowMzoyOFrOHR8ayw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwOTkyNA==", "bodyText": "This change looks wrong - all imports should be after the import comment", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480209924", "createdAt": "2020-08-31T15:33:19Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests/src/de/dlr/sc/virsat/model/extension/tests/model/TestCategoryCompositionArray.java", "diffHunk": "@@ -9,11 +9,11 @@\n  *******************************************************************************/\r\n package de.dlr.sc.virsat.model.extension.tests.model;\r\n \r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NzczOQ==", "bodyText": "Yes, I reverted it.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488577739", "createdAt": "2020-09-15T11:03:28Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.extension.tests/src/de/dlr/sc/virsat/model/extension/tests/model/TestCategoryCompositionArray.java", "diffHunk": "@@ -9,11 +9,11 @@\n  *******************************************************************************/\r\n package de.dlr.sc.virsat.model.extension.tests.model;\r\n \r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwOTkyNA=="}, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjY3OTI3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryAllPropertyTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTozNjowNFrOHJ9ynw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowNjowNlrOHR8gQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMTYxNQ==", "bodyText": "I think there is a getter for the int property bean, and you do a null check on it", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480211615", "createdAt": "2020-08-31T15:36:04Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryAllPropertyTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\r\n+\r\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.StringReader;\r\n+import java.io.StringWriter;\r\n+\r\n+import javax.xml.bind.JAXBException;\r\n+import javax.xml.bind.Marshaller;\r\n+import javax.xml.bind.Unmarshaller;\r\n+import javax.xml.transform.stream.StreamSource;\r\n+\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\r\n+public class TestCategoryAllPropertyTest extends AConceptTestCase {\r\n+\r\n+\tprivate TestCategoryAllProperty tcAllProperty;\r\n+\tprivate JAXBUtility jaxbUtility;\r\n+\tprivate Concept concept;\r\n+\t\r\n+\tprivate static final String RESOURCE_WITH_DEFAULTS = \"/resources/json/TestCategoryAllProperty_Marshaling_Defaults.json\";\r\n+\tprivate static final String RESOURCE_WITH_VALUES = \"/resources/json/TestCategoryAllProperty_Marshaling.json\";\r\n+\t\r\n+\tprivate static final boolean TEST_BOOL = true;\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final double TEST_FLOAT = 0.0;\r\n+\tprivate static final String TEST_STRING = \"this is a test\";\r\n+\tprivate static final String TEST_ENUM = \"HIGH\";\r\n+\tprivate static final String TEST_RESOURCE = \"resources/file[1].xls\";\r\n+\tprivate static final String TEST_RESOURCE_STRING = \"/\" + TEST_RESOURCE;\r\n+\t\r\n+\tprivate static final double EPSILON = 0.000001;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setup() throws JAXBException {\r\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryAllProperty.class});\r\n+\t\t\r\n+\t\tprepareEditingDomain();\r\n+\t\tconcept = loadConceptFromPlugin();\r\n+\t\t\r\n+\t\ttcAllProperty  = new TestCategoryAllProperty(concept);\r\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\r\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Set the new values\r\n+\t */\r\n+\tpublic void initProperties() {\r\n+\t\ttcAllProperty.setTestInt(TEST_INT);\r\n+\t\ttcAllProperty.setTestFloat(TEST_FLOAT);\r\n+\t\ttcAllProperty.setTestEnum(TEST_ENUM);\r\n+\t\ttcAllProperty.setTestResource(URI.createPlatformPluginURI(TEST_RESOURCE, false));\r\n+\t\ttcAllProperty.setTestString(TEST_STRING);\r\n+\t\ttcAllProperty.setTestBool(TEST_BOOL);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Marshall the TestCategoryAllProperty and assert that it equals the resource\r\n+\t * @param resource containing the expected JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertMarshalWithResource(String resource) throws JAXBException, IOException {\r\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\r\n+\t\t\r\n+\t\tStringWriter sw = new StringWriter();\r\n+\t\tjsonMarshaller.marshal(tcAllProperty, sw);\r\n+\r\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(resource);\r\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\r\n+\t\tinitProperties();\r\n+\t\t\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_VALUES);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshallingWithDefaultValues() throws JAXBException, IOException {\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_DEFAULTS);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Unmarshall the resource\r\n+\t * @param resource containing the input JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertUnmarshalWithResource(String resource) throws JAXBException, IOException {\r\n+\t\t// Quick mock setup to embed the model into a resource set\r\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\r\n+\t\tResource resourceImpl = new ResourceImpl();\r\n+\t\tresourceSet.getResources().add(resourceImpl);\r\n+\t\tresourceImpl.getContents().add(tcAllProperty.getATypeInstance());\r\n+\t\t\r\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\r\n+\t\t\r\n+\t\tString inputJson = TestActivator.getResourceContentAsString(resource);\r\n+\t\tStringReader sr = new StringReader(inputJson);\r\n+\t\t\r\n+\t\tjsonUnmarshaller.unmarshal(new StreamSource(sr), TestCategoryAllProperty.class);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\r\n+\t\t// Initial default values are set\r\n+\t\tassertEqualsDefaultValues();\r\n+\t\t\r\n+\t\t// Unmarshall the resource containing the new values\r\n+\t\tassertUnmarshalWithResource(RESOURCE_WITH_VALUES);\r\n+\t\t\r\n+\t\t// The values are correctly overwritten\r\n+\t\tassertEqualsTestValues();\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonUnmarshallingWithDefaultValues() throws JAXBException, IOException {\r\n+\t\t// Set to the new values\r\n+\t\tinitProperties();\r\n+\t\tassertEqualsTestValues();\r\n+\t\t\r\n+\t\t// Unmarshall the resource containing the default values\r\n+\t\tassertUnmarshalWithResource(RESOURCE_WITH_DEFAULTS);\r\n+\t\t\r\n+\t\t// The values are correctly overwritten\r\n+\t\tassertEqualsDefaultValues();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Assert that the new values are set correctly\r\n+\t */\r\n+\tprivate void assertEqualsTestValues() {\r\n+\t\tassertEquals(TEST_INT, tcAllProperty.getTestInt());\r\n+\t\tassertEquals(TEST_STRING, tcAllProperty.getTestString());\r\n+\t\tassertEquals(TEST_RESOURCE_STRING, tcAllProperty.getTestResource().toPlatformString(false));\r\n+\t\tassertEquals(TEST_ENUM, tcAllProperty.getTestEnum());\r\n+\t\tassertEquals(TEST_BOOL, tcAllProperty.getTestBool());\r\n+\t\tassertEquals(TEST_FLOAT, tcAllProperty.getTestFloat(), EPSILON);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Assert that the default values are set correctly\r\n+\t */\r\n+\tprivate void assertEqualsDefaultValues() {\r\n+\t\t// int default is Long in the bean and can be null, but is a long in the TestCategoryAllProperty\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3OTEzOA==", "bodyText": "I added a null check via the TypeInstance of the bean.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488579138", "createdAt": "2020-09-15T11:06:06Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryAllPropertyTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\r\n+\r\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.StringReader;\r\n+import java.io.StringWriter;\r\n+\r\n+import javax.xml.bind.JAXBException;\r\n+import javax.xml.bind.Marshaller;\r\n+import javax.xml.bind.Unmarshaller;\r\n+import javax.xml.transform.stream.StreamSource;\r\n+\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\r\n+public class TestCategoryAllPropertyTest extends AConceptTestCase {\r\n+\r\n+\tprivate TestCategoryAllProperty tcAllProperty;\r\n+\tprivate JAXBUtility jaxbUtility;\r\n+\tprivate Concept concept;\r\n+\t\r\n+\tprivate static final String RESOURCE_WITH_DEFAULTS = \"/resources/json/TestCategoryAllProperty_Marshaling_Defaults.json\";\r\n+\tprivate static final String RESOURCE_WITH_VALUES = \"/resources/json/TestCategoryAllProperty_Marshaling.json\";\r\n+\t\r\n+\tprivate static final boolean TEST_BOOL = true;\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final double TEST_FLOAT = 0.0;\r\n+\tprivate static final String TEST_STRING = \"this is a test\";\r\n+\tprivate static final String TEST_ENUM = \"HIGH\";\r\n+\tprivate static final String TEST_RESOURCE = \"resources/file[1].xls\";\r\n+\tprivate static final String TEST_RESOURCE_STRING = \"/\" + TEST_RESOURCE;\r\n+\t\r\n+\tprivate static final double EPSILON = 0.000001;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setup() throws JAXBException {\r\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryAllProperty.class});\r\n+\t\t\r\n+\t\tprepareEditingDomain();\r\n+\t\tconcept = loadConceptFromPlugin();\r\n+\t\t\r\n+\t\ttcAllProperty  = new TestCategoryAllProperty(concept);\r\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\r\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Set the new values\r\n+\t */\r\n+\tpublic void initProperties() {\r\n+\t\ttcAllProperty.setTestInt(TEST_INT);\r\n+\t\ttcAllProperty.setTestFloat(TEST_FLOAT);\r\n+\t\ttcAllProperty.setTestEnum(TEST_ENUM);\r\n+\t\ttcAllProperty.setTestResource(URI.createPlatformPluginURI(TEST_RESOURCE, false));\r\n+\t\ttcAllProperty.setTestString(TEST_STRING);\r\n+\t\ttcAllProperty.setTestBool(TEST_BOOL);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Marshall the TestCategoryAllProperty and assert that it equals the resource\r\n+\t * @param resource containing the expected JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertMarshalWithResource(String resource) throws JAXBException, IOException {\r\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\r\n+\t\t\r\n+\t\tStringWriter sw = new StringWriter();\r\n+\t\tjsonMarshaller.marshal(tcAllProperty, sw);\r\n+\r\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(resource);\r\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\r\n+\t\tinitProperties();\r\n+\t\t\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_VALUES);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshallingWithDefaultValues() throws JAXBException, IOException {\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_DEFAULTS);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Unmarshall the resource\r\n+\t * @param resource containing the input JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertUnmarshalWithResource(String resource) throws JAXBException, IOException {\r\n+\t\t// Quick mock setup to embed the model into a resource set\r\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\r\n+\t\tResource resourceImpl = new ResourceImpl();\r\n+\t\tresourceSet.getResources().add(resourceImpl);\r\n+\t\tresourceImpl.getContents().add(tcAllProperty.getATypeInstance());\r\n+\t\t\r\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\r\n+\t\t\r\n+\t\tString inputJson = TestActivator.getResourceContentAsString(resource);\r\n+\t\tStringReader sr = new StringReader(inputJson);\r\n+\t\t\r\n+\t\tjsonUnmarshaller.unmarshal(new StreamSource(sr), TestCategoryAllProperty.class);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\r\n+\t\t// Initial default values are set\r\n+\t\tassertEqualsDefaultValues();\r\n+\t\t\r\n+\t\t// Unmarshall the resource containing the new values\r\n+\t\tassertUnmarshalWithResource(RESOURCE_WITH_VALUES);\r\n+\t\t\r\n+\t\t// The values are correctly overwritten\r\n+\t\tassertEqualsTestValues();\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonUnmarshallingWithDefaultValues() throws JAXBException, IOException {\r\n+\t\t// Set to the new values\r\n+\t\tinitProperties();\r\n+\t\tassertEqualsTestValues();\r\n+\t\t\r\n+\t\t// Unmarshall the resource containing the default values\r\n+\t\tassertUnmarshalWithResource(RESOURCE_WITH_DEFAULTS);\r\n+\t\t\r\n+\t\t// The values are correctly overwritten\r\n+\t\tassertEqualsDefaultValues();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Assert that the new values are set correctly\r\n+\t */\r\n+\tprivate void assertEqualsTestValues() {\r\n+\t\tassertEquals(TEST_INT, tcAllProperty.getTestInt());\r\n+\t\tassertEquals(TEST_STRING, tcAllProperty.getTestString());\r\n+\t\tassertEquals(TEST_RESOURCE_STRING, tcAllProperty.getTestResource().toPlatformString(false));\r\n+\t\tassertEquals(TEST_ENUM, tcAllProperty.getTestEnum());\r\n+\t\tassertEquals(TEST_BOOL, tcAllProperty.getTestBool());\r\n+\t\tassertEquals(TEST_FLOAT, tcAllProperty.getTestFloat(), EPSILON);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Assert that the default values are set correctly\r\n+\t */\r\n+\tprivate void assertEqualsDefaultValues() {\r\n+\t\t// int default is Long in the bean and can be null, but is a long in the TestCategoryAllProperty\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMTYxNQ=="}, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjY4OTU2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryBeanATest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTozODo1M1rOHJ95KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowNjo0MVrOHR8hZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMzI4OQ==", "bodyText": "Better move the UUID into a constant to avoid duplication", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480213289", "createdAt": "2020-08-31T15:38:53Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryBeanATest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\r\n+\r\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.StringReader;\r\n+import java.io.StringWriter;\r\n+\r\n+import javax.xml.bind.JAXBElement;\r\n+import javax.xml.bind.JAXBException;\r\n+import javax.xml.bind.Marshaller;\r\n+import javax.xml.bind.Unmarshaller;\r\n+import javax.xml.transform.stream.StreamSource;\r\n+\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\r\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryBeanA;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\r\n+\r\n+public class TestCategoryBeanATest extends AConceptTestCase {\r\n+\r\n+\tprivate JAXBUtility jaxbUtility;\r\n+\tprivate Concept concept;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tconcept = loadConceptFromPlugin();\r\n+\t\t\r\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryBeanA.class});\r\n+\t}\r\n+\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\r\n+\t\t\r\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\r\n+\t\t\r\n+\t\tTestCategoryBeanA testCategoryBean = new TestCategoryBeanA(concept);\r\n+\t\ttestCategoryBean.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3OTQyOQ==", "bodyText": "Done", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488579429", "createdAt": "2020-09-15T11:06:41Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryBeanATest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\r\n+\r\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.StringReader;\r\n+import java.io.StringWriter;\r\n+\r\n+import javax.xml.bind.JAXBElement;\r\n+import javax.xml.bind.JAXBException;\r\n+import javax.xml.bind.Marshaller;\r\n+import javax.xml.bind.Unmarshaller;\r\n+import javax.xml.transform.stream.StreamSource;\r\n+\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\r\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryBeanA;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\r\n+\r\n+public class TestCategoryBeanATest extends AConceptTestCase {\r\n+\r\n+\tprivate JAXBUtility jaxbUtility;\r\n+\tprivate Concept concept;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tconcept = loadConceptFromPlugin();\r\n+\t\t\r\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryBeanA.class});\r\n+\t}\r\n+\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\r\n+\t\t\r\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\r\n+\t\t\r\n+\t\tTestCategoryBeanA testCategoryBean = new TestCategoryBeanA(concept);\r\n+\t\ttestCategoryBean.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMzI4OQ=="}, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjgyNTQ5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/test/TestActivator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjowODozMlrOHJ_INw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDoxOTowNFrOHSqNSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzMzUyNw==", "bodyText": "We have exactly the same functionality in de.dlr.sc.virsat.model.concept.test.util.GeneratorJunitAssert. I don't know, maybe there is some clever way to reuse it?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480233527", "createdAt": "2020-08-31T16:08:32Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/test/TestActivator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.test;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.net.URL;\r\n+\r\n+import org.junit.Assert;\r\n+\r\n+public class TestActivator {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5MDI2NA==", "bodyText": "I checked the files an the code is not a complete duplicate: in the TestActivator a custom message can be provided and in the GeneratorJunitAssert we have additional logic to flush the files. But maybe we should also provide the flushing for the JSON files? If yes, can we just use the GeneratorJunitAssert via composition in the TestActivator?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488590264", "createdAt": "2020-09-15T11:26:35Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/test/TestActivator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.test;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.net.URL;\r\n+\r\n+import org.junit.Assert;\r\n+\r\n+public class TestActivator {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzMzUyNw=="}, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyNzk0NQ==", "bodyText": "Yes, this flushing means overwriting of expected files with actual resources, and there is a separate launch configuration that does it. We might need it too if we change the marschalling. Anyways, I think it's out of scope for this ticket, let's leave it for now.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r489327945", "createdAt": "2020-09-16T10:19:04Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/test/TestActivator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.test;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.net.URL;\r\n+\r\n+import org.junit.Assert;\r\n+\r\n+public class TestActivator {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzMzUyNw=="}, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjg2MDI2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxODowMFrOHJ_dHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowODoyMlrOHR8lIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzODg3OQ==", "bodyText": "This method repeats in several classes, maybe we can extract it to a base class or to a utility class?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480238879", "createdAt": "2020-08-31T16:18:00Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_NULL_COMPOSITION = \"/resources/json/TestCategoryCompositionArray_Marshaling_NullComposition.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tBeanPropertyComposed<TestCategoryAllProperty> bean = staticArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"45e18c9d-ef85-4ab8-ba2a-c5916697a0b\" + i));\n+\t\t\t\n+\t\t\tTestCategoryAllProperty tcAllProperty = bean.getValue();\n+\t\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty, i);\n+\t\t}\n+\t\t\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\t\n+\t}\n+\t\n+\t/**\n+\t * Marshalls the test object and asserts that the result equals the test resource\n+\t * @param resource the test resource\n+\t * @throws JAXBException\n+\t * @throws IOException\n+\t */\n+\tprivate void assertMarshall(String resource) throws JAXBException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4MDM4Nw==", "bodyText": "I extracted it into the JsonTestHelper", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488580387", "createdAt": "2020-09-15T11:08:22Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_NULL_COMPOSITION = \"/resources/json/TestCategoryCompositionArray_Marshaling_NullComposition.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tBeanPropertyComposed<TestCategoryAllProperty> bean = staticArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"45e18c9d-ef85-4ab8-ba2a-c5916697a0b\" + i));\n+\t\t\t\n+\t\t\tTestCategoryAllProperty tcAllProperty = bean.getValue();\n+\t\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty, i);\n+\t\t}\n+\t\t\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\t\n+\t}\n+\t\n+\t/**\n+\t * Marshalls the test object and asserts that the result equals the test resource\n+\t * @param resource the test resource\n+\t * @throws JAXBException\n+\t * @throws IOException\n+\t */\n+\tprivate void assertMarshall(String resource) throws JAXBException, IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzODg3OQ=="}, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjg5OTAyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryReferenceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyODowM1rOHJ_0KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowOTowMlrOHR8mtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NDc3Ng==", "bodyText": "A lot of repetitive code in the unmarshalling tests, maybe we can extract some of it into a helper method or something?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480244776", "createdAt": "2020-08-31T16:28:03Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryReferenceTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryReferenceTest extends AConceptTestCase {\n+\n+\tprivate TestCategoryReference tcReference;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate BeanPropertyString bpString;\n+\tprivate BeanPropertyReference<TestCategoryAllProperty> refCatBean;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate BeanPropertyReference<BeanPropertyString> refPropBean;\n+\t\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryReference_Marshaling.json\";\n+\tprivate static final String RESOURCE_NULL_REFERENCE = \"/resources/json/TestCategoryReference_Marshaling_NullReference.json\";\n+\tprivate static final String RESOURCE_CHANGED_REFERENCE = \"/resources/json/TestCategoryReference_Marshaling_ChangeReference.json\";\n+\t\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryReference.class});\n+\t\t\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttcReference = new TestCategoryReference(concept);\n+\t\ttcReference.getATypeInstance().setUuid(new VirSatUuid(\"0370d14d-e6a1-4660-83f1-5bb98fa840ac\"));\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\t\ttcReference.setTestRefProperty(bpString);\n+\t\t\n+\t\trefPropBean = tcReference.getTestRefPropertyBean();\n+\t\trefPropBean.getATypeInstance().setUuid(new VirSatUuid(\"0dee3e78-fbcd-4294-8dba-5fa3d4760249\"));\n+\t\t\n+\t\trefCatBean = tcReference.getTestRefCategoryBean();\n+\t\trefCatBean.getATypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\ttcAllProperty = new TestCategoryAllProperty(concept);\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\n+\t\t\n+\t\tbpString.setValue(JsonTestHelper.TEST_STRING);\n+\t\ttcReference.setTestRefCategory(tcAllProperty);\n+\t}\n+\t\n+\t/**\n+\t * Marshalls the test object and asserts that the result equals the test resource\n+\t * @param resource the test resource\n+\t * @throws JAXBException\n+\t * @throws IOException\n+\t */\n+\tprivate void assertMarshall(String resource) throws JAXBException, IOException {\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(tcReference, sw);\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(resource);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\t\n+\t\tassertMarshall(RESOURCE);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\tBeanPropertyString bpString2 = new TestCategoryAllProperty(concept).getTestStringBean();\n+\t\tbpString2.getATypeInstance().setUuid(new VirSatUuid(\"1256e7a2-9a1f-443c-85f8-7b766eac3f50\"));\n+\t\t\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(tcReference.getATypeInstance());\n+\t\tresourceImpl.getContents().add(bpString.getATypeInstance());\n+\t\tresourceImpl.getContents().add(bpString2.getATypeInstance());\n+\t\tresourceImpl.getContents().add(refCatBean.getATypeInstance());\n+\t\tresourceImpl.getContents().add(tcAllProperty.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tString inputJson = TestActivator.getResourceContentAsString(RESOURCE_CHANGED_REFERENCE);\n+\t\tStringReader sr = new StringReader(inputJson);\n+\n+\t\tassertEquals(bpString.getUuid(), tcReference.getTestRefProperty().getUuid());\n+\t\t\n+\t\tjsonUnmarshaller.unmarshal(new StreamSource(sr), TestCategoryReference.class);\n+\t\t\n+\t\tassertEquals(\"Referenced bean changed successfully\", bpString2.getUuid(), tcReference.getTestRefProperty().getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshallingNull() throws JAXBException, IOException {\n+\t\t\n+\t\ttcReference.setTestRefProperty(null);\n+\t\ttcReference.setTestRefCategory(null);\n+\t\t\n+\t\tassertMarshall(RESOURCE_NULL_REFERENCE);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshallingNull() throws JAXBException, IOException {\n+\t\t\n+\t\t// Quick mock setup to embed the model into a resource set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4MDc4OQ==", "bodyText": "I added two methods to the JsonTestHelper, to reduce repetitive code", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488580789", "createdAt": "2020-09-15T11:09:02Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryReferenceTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryReferenceTest extends AConceptTestCase {\n+\n+\tprivate TestCategoryReference tcReference;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate BeanPropertyString bpString;\n+\tprivate BeanPropertyReference<TestCategoryAllProperty> refCatBean;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate BeanPropertyReference<BeanPropertyString> refPropBean;\n+\t\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryReference_Marshaling.json\";\n+\tprivate static final String RESOURCE_NULL_REFERENCE = \"/resources/json/TestCategoryReference_Marshaling_NullReference.json\";\n+\tprivate static final String RESOURCE_CHANGED_REFERENCE = \"/resources/json/TestCategoryReference_Marshaling_ChangeReference.json\";\n+\t\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryReference.class});\n+\t\t\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttcReference = new TestCategoryReference(concept);\n+\t\ttcReference.getATypeInstance().setUuid(new VirSatUuid(\"0370d14d-e6a1-4660-83f1-5bb98fa840ac\"));\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\t\ttcReference.setTestRefProperty(bpString);\n+\t\t\n+\t\trefPropBean = tcReference.getTestRefPropertyBean();\n+\t\trefPropBean.getATypeInstance().setUuid(new VirSatUuid(\"0dee3e78-fbcd-4294-8dba-5fa3d4760249\"));\n+\t\t\n+\t\trefCatBean = tcReference.getTestRefCategoryBean();\n+\t\trefCatBean.getATypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\ttcAllProperty = new TestCategoryAllProperty(concept);\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\n+\t\t\n+\t\tbpString.setValue(JsonTestHelper.TEST_STRING);\n+\t\ttcReference.setTestRefCategory(tcAllProperty);\n+\t}\n+\t\n+\t/**\n+\t * Marshalls the test object and asserts that the result equals the test resource\n+\t * @param resource the test resource\n+\t * @throws JAXBException\n+\t * @throws IOException\n+\t */\n+\tprivate void assertMarshall(String resource) throws JAXBException, IOException {\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(tcReference, sw);\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(resource);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\t\n+\t\tassertMarshall(RESOURCE);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\tBeanPropertyString bpString2 = new TestCategoryAllProperty(concept).getTestStringBean();\n+\t\tbpString2.getATypeInstance().setUuid(new VirSatUuid(\"1256e7a2-9a1f-443c-85f8-7b766eac3f50\"));\n+\t\t\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(tcReference.getATypeInstance());\n+\t\tresourceImpl.getContents().add(bpString.getATypeInstance());\n+\t\tresourceImpl.getContents().add(bpString2.getATypeInstance());\n+\t\tresourceImpl.getContents().add(refCatBean.getATypeInstance());\n+\t\tresourceImpl.getContents().add(tcAllProperty.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tString inputJson = TestActivator.getResourceContentAsString(RESOURCE_CHANGED_REFERENCE);\n+\t\tStringReader sr = new StringReader(inputJson);\n+\n+\t\tassertEquals(bpString.getUuid(), tcReference.getTestRefProperty().getUuid());\n+\t\t\n+\t\tjsonUnmarshaller.unmarshal(new StreamSource(sr), TestCategoryReference.class);\n+\t\t\n+\t\tassertEquals(\"Referenced bean changed successfully\", bpString2.getUuid(), tcReference.getTestRefProperty().getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshallingNull() throws JAXBException, IOException {\n+\t\t\n+\t\ttcReference.setTestRefProperty(null);\n+\t\ttcReference.setTestRefCategory(null);\n+\t\t\n+\t\tassertMarshall(RESOURCE_NULL_REFERENCE);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshallingNull() throws JAXBException, IOException {\n+\t\t\n+\t\t// Quick mock setup to embed the model into a resource set", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NDc3Ng=="}, "originalCommit": {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 603, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}