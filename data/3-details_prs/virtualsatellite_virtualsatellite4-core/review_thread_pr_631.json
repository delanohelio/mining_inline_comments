{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMTI2NTkz", "number": 631, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozNzoyOVrOEDt5zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozODo0OVrOEDt6vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMzMjYxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyReference.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozNzoyOVrOGg5a1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjozNTo1MFrOGg6qOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODM3Mw==", "bodyText": "Why do we have to handle a Runtime Exception for the Category Factory but not the Property Factory. This looks a bit odd. Please have a quick look and investigate.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/631#discussion_r437148373", "createdAt": "2020-06-09T05:37:29Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyReference.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.concept.types.property;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.common.command.Command;\n+import org.eclipse.emf.edit.command.SetCommand;\n+import org.eclipse.emf.edit.domain.EditingDomain;\n+\n+import de.dlr.sc.virsat.model.concept.types.ABeanObject;\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanCategoryAssignmentFactory;\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanPropertyFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\n+\n+/**\n+ * Bean class to wrap the referenced beans of ReferencePropertyInstances\n+ * @param <BEAN_TYPE> type of the referenced bean\n+ */\n+public class BeanPropertyReference<BEAN_TYPE extends IBeanObject<? extends ATypeInstance>> extends ABeanObject<ReferencePropertyInstance> implements IBeanProperty<ReferencePropertyInstance, BEAN_TYPE> {\n+\n+\n+\tpublic BeanPropertyReference() { }\n+\n+\t/**\n+\t * Constructor to directly set the type instance\n+\t * @param rpi the type instance to be used\n+\t */\n+\tpublic BeanPropertyReference(ReferencePropertyInstance rpi) {\n+\t\tsetTypeInstance(rpi);\n+\t}\n+\t\n+\tprivate ATypeInstance saveGetTypeInstance(BEAN_TYPE value) {\n+\t\tif (value == null) {\n+\t\t\treturn null;\n+\t\t} else {\n+\t\t\treturn value.getTypeInstance();\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tpublic void setValue(BEAN_TYPE value) {\n+\t\tATypeInstance reference = saveGetTypeInstance(value);\n+\t\tti.setReference(reference);\n+\t}\n+\t\n+\t@Override\n+\tpublic Command setValue(EditingDomain ed, BEAN_TYPE value) {\n+\t\tATypeInstance reference = saveGetTypeInstance(value);\n+\t\t\n+\t\treturn SetCommand.create(ed, ti, PropertyinstancesPackage.Literals.REFERENCE_PROPERTY_INSTANCE__REFERENCE, reference);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic BEAN_TYPE getValue() {\n+\t\tBEAN_TYPE referencedBean = null;\n+\t\t\n+\t\t// Return null if no reference is set\n+\t\tif (isSet()) {\n+\t\t\tATypeInstance ref = ti.getReference();\n+\t\t\t\n+\t\t\t// Return the correct ca or property instance bean\n+\t\t\tif (ref instanceof CategoryAssignment) {\n+\t\t\t\tBeanCategoryAssignmentFactory beanCaFactory = new BeanCategoryAssignmentFactory();\n+\t\t\t\ttry {\n+\t\t\t\t\treferencedBean = (BEAN_TYPE) beanCaFactory.getInstanceFor((CategoryAssignment) ref);\n+\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t} else if (ref instanceof APropertyInstance) {\n+\t\t\t\tBeanPropertyFactory beanPropFactory = new BeanPropertyFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a9739cfe29e4c8027483d5998e689ea7efe2efd"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2ODY5OQ==", "bodyText": "This is because the CategoryFactory uses the BeanRegistry, that throws the exception if we can't create the Bean. The PropertyFactory uses the PropertydefinitionsSwitch instead.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/631#discussion_r437168699", "createdAt": "2020-06-09T06:35:50Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyReference.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.concept.types.property;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.common.command.Command;\n+import org.eclipse.emf.edit.command.SetCommand;\n+import org.eclipse.emf.edit.domain.EditingDomain;\n+\n+import de.dlr.sc.virsat.model.concept.types.ABeanObject;\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanCategoryAssignmentFactory;\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanPropertyFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\n+\n+/**\n+ * Bean class to wrap the referenced beans of ReferencePropertyInstances\n+ * @param <BEAN_TYPE> type of the referenced bean\n+ */\n+public class BeanPropertyReference<BEAN_TYPE extends IBeanObject<? extends ATypeInstance>> extends ABeanObject<ReferencePropertyInstance> implements IBeanProperty<ReferencePropertyInstance, BEAN_TYPE> {\n+\n+\n+\tpublic BeanPropertyReference() { }\n+\n+\t/**\n+\t * Constructor to directly set the type instance\n+\t * @param rpi the type instance to be used\n+\t */\n+\tpublic BeanPropertyReference(ReferencePropertyInstance rpi) {\n+\t\tsetTypeInstance(rpi);\n+\t}\n+\t\n+\tprivate ATypeInstance saveGetTypeInstance(BEAN_TYPE value) {\n+\t\tif (value == null) {\n+\t\t\treturn null;\n+\t\t} else {\n+\t\t\treturn value.getTypeInstance();\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tpublic void setValue(BEAN_TYPE value) {\n+\t\tATypeInstance reference = saveGetTypeInstance(value);\n+\t\tti.setReference(reference);\n+\t}\n+\t\n+\t@Override\n+\tpublic Command setValue(EditingDomain ed, BEAN_TYPE value) {\n+\t\tATypeInstance reference = saveGetTypeInstance(value);\n+\t\t\n+\t\treturn SetCommand.create(ed, ti, PropertyinstancesPackage.Literals.REFERENCE_PROPERTY_INSTANCE__REFERENCE, reference);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic BEAN_TYPE getValue() {\n+\t\tBEAN_TYPE referencedBean = null;\n+\t\t\n+\t\t// Return null if no reference is set\n+\t\tif (isSet()) {\n+\t\t\tATypeInstance ref = ti.getReference();\n+\t\t\t\n+\t\t\t// Return the correct ca or property instance bean\n+\t\t\tif (ref instanceof CategoryAssignment) {\n+\t\t\t\tBeanCategoryAssignmentFactory beanCaFactory = new BeanCategoryAssignmentFactory();\n+\t\t\t\ttry {\n+\t\t\t\t\treferencedBean = (BEAN_TYPE) beanCaFactory.getInstanceFor((CategoryAssignment) ref);\n+\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t} else if (ref instanceof APropertyInstance) {\n+\t\t\t\tBeanPropertyFactory beanPropFactory = new BeanPropertyFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODM3Mw=="}, "originalCommit": {"oid": "5a9739cfe29e4c8027483d5998e689ea7efe2efd"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMzNDA1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyReference.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozODowOVrOGg5bpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozODowOVrOGg5bpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODU4Mg==", "bodyText": "Clean up non-needed empty lines.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/631#discussion_r437148582", "createdAt": "2020-06-09T05:38:09Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyReference.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.concept.types.property;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.common.command.Command;\n+import org.eclipse.emf.edit.command.SetCommand;\n+import org.eclipse.emf.edit.domain.EditingDomain;\n+\n+import de.dlr.sc.virsat.model.concept.types.ABeanObject;\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanCategoryAssignmentFactory;\n+import de.dlr.sc.virsat.model.concept.types.factory.BeanPropertyFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\n+\n+/**\n+ * Bean class to wrap the referenced beans of ReferencePropertyInstances\n+ * @param <BEAN_TYPE> type of the referenced bean\n+ */\n+public class BeanPropertyReference<BEAN_TYPE extends IBeanObject<? extends ATypeInstance>> extends ABeanObject<ReferencePropertyInstance> implements IBeanProperty<ReferencePropertyInstance, BEAN_TYPE> {\n+\n+\n+\tpublic BeanPropertyReference() { }\n+\n+\t/**\n+\t * Constructor to directly set the type instance\n+\t * @param rpi the type instance to be used\n+\t */\n+\tpublic BeanPropertyReference(ReferencePropertyInstance rpi) {\n+\t\tsetTypeInstance(rpi);\n+\t}\n+\t\n+\tprivate ATypeInstance saveGetTypeInstance(BEAN_TYPE value) {\n+\t\tif (value == null) {\n+\t\t\treturn null;\n+\t\t} else {\n+\t\t\treturn value.getTypeInstance();\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tpublic void setValue(BEAN_TYPE value) {\n+\t\tATypeInstance reference = saveGetTypeInstance(value);\n+\t\tti.setReference(reference);\n+\t}\n+\t\n+\t@Override\n+\tpublic Command setValue(EditingDomain ed, BEAN_TYPE value) {\n+\t\tATypeInstance reference = saveGetTypeInstance(value);\n+\t\t\n+\t\treturn SetCommand.create(ed, ti, PropertyinstancesPackage.Literals.REFERENCE_PROPERTY_INSTANCE__REFERENCE, reference);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic BEAN_TYPE getValue() {\n+\t\tBEAN_TYPE referencedBean = null;\n+\t\t\n+\t\t// Return null if no reference is set\n+\t\tif (isSet()) {\n+\t\t\tATypeInstance ref = ti.getReference();\n+\t\t\t\n+\t\t\t// Return the correct ca or property instance bean\n+\t\t\tif (ref instanceof CategoryAssignment) {\n+\t\t\t\tBeanCategoryAssignmentFactory beanCaFactory = new BeanCategoryAssignmentFactory();\n+\t\t\t\ttry {\n+\t\t\t\t\treferencedBean = (BEAN_TYPE) beanCaFactory.getInstanceFor((CategoryAssignment) ref);\n+\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t} else if (ref instanceof APropertyInstance) {\n+\t\t\t\tBeanPropertyFactory beanPropFactory = new BeanPropertyFactory();\n+\t\t\t\treferencedBean = (BEAN_TYPE) beanPropFactory.getInstanceFor(ref);\n+\t\t\t} \n+\t\t}\n+\t\t\n+\t\treturn referencedBean;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isSet() {\n+\t\treturn ti.getReference() != null;\n+\t}\n+\n+\t@Override\n+\tpublic void unset() {\n+\t\tti.setReference(null);\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a9739cfe29e4c8027483d5998e689ea7efe2efd"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMzNTAxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyReferenceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozODo0OVrOGg5cSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozODo0OVrOGg5cSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODc0Nw==", "bodyText": "Clean up empty lines.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/631#discussion_r437148747", "createdAt": "2020-06-09T05:38:49Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyReferenceTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.types.property;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertNull;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryAssignmentHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\r\n+\r\n+public class BeanPropertyReferenceTest extends AConceptTestCase {\r\n+\r\n+\tprivate TestCategoryAllProperty testCategoryAllProperty;\r\n+\tprivate TestCategoryReference testCategoryReference;\r\n+\t\r\n+\tprivate ReferencePropertyInstance rpiToCategory;\r\n+\tprivate BeanPropertyReference<TestCategoryAllProperty> beanTestRefCategory;\r\n+\t\r\n+\tprivate ReferencePropertyInstance rpiToProperty;\r\n+\tBeanPropertyReference<BeanPropertyString> beanTestRefProperty;\r\n+\tBeanPropertyString beanTestString;\r\n+\r\n+\t@Before\r\n+\tpublic void setup() {\r\n+\t\tprepareEditingDomain();\r\n+\r\n+\t\tConcept concept = loadConceptFromPlugin();\r\n+\t\r\n+\t\ttestCategoryAllProperty = new TestCategoryAllProperty(concept);\r\n+\t\ttestCategoryReference = new TestCategoryReference(concept);\r\n+\t\t\r\n+\t\tCategoryAssignment testCategoryRefernceCa = testCategoryReference.getTypeInstance();\r\n+\t\tCategoryAssignmentHelper caHelper = new CategoryAssignmentHelper(testCategoryRefernceCa);\r\n+\t\t\r\n+\t\t// Create a bean for the rpi to a ca\r\n+\t\trpiToCategory = (ReferencePropertyInstance) caHelper.getPropertyInstance(TestCategoryReference.PROPERTY_TESTREFCATEGORY);\r\n+\t\tbeanTestRefCategory = new BeanPropertyReference<>(rpiToCategory);\r\n+\t\t\r\n+\t\t// Create a bean for the rpi to a String property\r\n+\t\trpiToProperty = (ReferencePropertyInstance) caHelper.getPropertyInstance(TestCategoryReference.PROPERTY_TESTREFPROPERTY);\r\n+\t\tbeanTestRefProperty = new BeanPropertyReference<>(rpiToProperty);\r\n+\t\t\r\n+\t\tbeanTestString = testCategoryAllProperty.getTestStringBean();\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a9739cfe29e4c8027483d5998e689ea7efe2efd"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 575, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}