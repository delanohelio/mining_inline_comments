{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MDA4NDg0", "number": 594, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoyNjoyMlrOD_VtXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo0MTowM1rOEBq9nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzQyNTU2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoyNjoyMlrOGZ8mVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoyNjoyMlrOGZ8mVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDQzNw==", "bodyText": "Lets add a short description so other people know what this class does.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429860437", "createdAt": "2020-05-25T10:26:22Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzQyNzMzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoyNzowNFrOGZ8nag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoyNzowNFrOGZ8nag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDcxNA==", "bodyText": "We can just return the newly created object.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429860714", "createdAt": "2020-05-25T10:27:04Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+public class BeanPropertyFactory {\n+\n+\n+\t/**\n+\t * @param object ATypeinstance object\n+\t * @return beanobject\n+\t */\n+\tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n+\t\tATypeDefinition type = object.getType();\n+\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n+\t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n+\t\tbean.setATypeInstance(object);\n+\t\treturn bean;\n+\t}\n+\n+\tstatic class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {\n+\n+\t\t@Override\n+\t\tpublic IBeanObject<? extends APropertyInstance> caseFloatProperty(FloatProperty object) {\n+\t\t\tIBeanObject<? extends APropertyInstance> beanObjectPropertyFloat = new BeanPropertyFloat();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzQyODA1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoyNzoyNFrOGZ8n5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoyODo0OFrOGaBKPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDgzOA==", "bodyText": "Lets make the this internal class private.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429860838", "createdAt": "2020-05-25T10:27:24Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+public class BeanPropertyFactory {\n+\n+\n+\t/**\n+\t * @param object ATypeinstance object\n+\t * @return beanobject\n+\t */\n+\tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n+\t\tATypeDefinition type = object.getType();\n+\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n+\t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n+\t\tbean.setATypeInstance(object);\n+\t\treturn bean;\n+\t}\n+\n+\tstatic class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMDQxNQ==", "bodyText": "Seems like spotbugs wants it to be static?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429900415", "createdAt": "2020-05-25T12:07:42Z", "author": {"login": "christoph-pietsch-DLR"}, "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+public class BeanPropertyFactory {\n+\n+\n+\t/**\n+\t * @param object ATypeinstance object\n+\t * @return beanobject\n+\t */\n+\tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n+\t\tATypeDefinition type = object.getType();\n+\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n+\t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n+\t\tbean.setATypeInstance(object);\n+\t\treturn bean;\n+\t}\n+\n+\tstatic class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDgzOA=="}, "originalCommit": {"oid": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNTE2Nw==", "bodyText": "why cant we make it private static?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429935167", "createdAt": "2020-05-25T13:28:48Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+public class BeanPropertyFactory {\n+\n+\n+\t/**\n+\t * @param object ATypeinstance object\n+\t * @return beanobject\n+\t */\n+\tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n+\t\tATypeDefinition type = object.getType();\n+\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();\n+\t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n+\t\tbean.setATypeInstance(object);\n+\t\treturn bean;\n+\t}\n+\n+\tstatic class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDgzOA=="}, "originalCommit": {"oid": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzQyOTIyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoyNzo0OFrOGZ8omw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoyNzo0OFrOGZ8omw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MTAxOQ==", "bodyText": "Short descritpion of method and params would be nice.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429861019", "createdAt": "2020-05-25T10:27:48Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+public class BeanPropertyFactory {\n+\n+\n+\t/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzQzMDg5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoyODozMFrOGZ8psw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoyODozMFrOGZ8psw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MTI5OQ==", "bodyText": "Maybe we can make the switch a member variable. I dont think we need to create a new one for every getInstanceFor call.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429861299", "createdAt": "2020-05-25T10:28:30Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+public class BeanPropertyFactory {\n+\n+\n+\t/**\n+\t * @param object ATypeinstance object\n+\t * @return beanobject\n+\t */\n+\tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n+\t\tATypeDefinition type = object.getType();\n+\t\tBeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzQzMjI1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoyOTowN1rOGZ8qkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDoyOTowN1rOGZ8qkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MTUyMA==", "bodyText": "Test class doesnt seem to be registered in all tests?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429861520", "createdAt": "2020-05-25T10:29:07Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumValueDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzQzNzY3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDozMToxMlrOGZ8uAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDozMToxMlrOGZ8uAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MjQwMw==", "bodyText": "Do we need to setup enum values for the test case?\nIf not lets remove this to keep it simple.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429862403", "createdAt": "2020-05-25T10:31:12Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumValueDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\n+\n+\n+public class BeanPropertyFactoryTest {\n+\n+\t@Test\n+\tpublic void testBeanPropertyFloatFromFactory() {\n+\t\tValuePropertyInstance vpi = PropertyinstancesFactory.eINSTANCE.createValuePropertyInstance();\n+\t\tFloatProperty type = PropertydefinitionsFactory.eINSTANCE.createFloatProperty();\n+\t\tvpi.setType(type);\n+\n+\t\tBeanPropertyFactory bpf = new BeanPropertyFactory();\n+\t\tIBeanObject<? extends APropertyInstance> beanPropertyFloat = bpf.getInstanceFor(vpi);\n+\t\tassertTrue(beanPropertyFloat instanceof BeanPropertyFloat);\n+\t\tassertTrue(beanPropertyFloat.getTypeInstance() instanceof ValuePropertyInstance);\n+\t}\n+\n+\t@Test\n+\tpublic void testBeanPropertyIntFromFactory() {\n+\t\tValuePropertyInstance vpi = PropertyinstancesFactory.eINSTANCE.createValuePropertyInstance();\n+\t\tIntProperty type = PropertydefinitionsFactory.eINSTANCE.createIntProperty();\n+\t\tvpi.setType(type);\n+\n+\t\tBeanPropertyFactory bpf = new BeanPropertyFactory();\n+\t\tIBeanObject<? extends APropertyInstance> beanPropertyInt = bpf.getInstanceFor(vpi);\n+\t\tassertTrue(beanPropertyInt instanceof BeanPropertyInt);\n+\t\tassertTrue(beanPropertyInt.getTypeInstance() instanceof ValuePropertyInstance);\n+\t}\n+\n+\t@Test\n+\tpublic void testBeanPropertyBooleanFromFactory() {\n+\t\tValuePropertyInstance vpi = PropertyinstancesFactory.eINSTANCE.createValuePropertyInstance();\n+\t\tBooleanProperty type = PropertydefinitionsFactory.eINSTANCE.createBooleanProperty();\n+\t\tvpi.setType(type);\n+\n+\t\tBeanPropertyFactory bpf = new BeanPropertyFactory();\n+\t\tIBeanObject<? extends APropertyInstance> beanPropertyBoolean = bpf.getInstanceFor(vpi);\n+\t\tassertTrue(beanPropertyBoolean instanceof BeanPropertyBoolean);\n+\t\tassertTrue(beanPropertyBoolean.getTypeInstance() instanceof ValuePropertyInstance);\n+\t}\n+\n+\t@Test\n+\tpublic void testBeanPropertyEnumFromFactory() {\n+\t\tEnumValueDefinition evd1 = PropertydefinitionsFactory.eINSTANCE.createEnumValueDefinition();\n+\t\tEnumProperty enumProperty = PropertydefinitionsFactory.eINSTANCE.createEnumProperty();\n+\t\tenumProperty.getValues().add(evd1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzQ0MDQwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDozMjoyMlrOGZ8vtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDozMjoyMlrOGZ8vtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MjgzNw==", "bodyText": "Rather than an instanceof check here I think we can use an equals check. E.g.\nassertEquals(vpi, beanPropertyFloat.getTypeInstance());", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429862837", "createdAt": "2020-05-25T10:32:22Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactoryTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumValueDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\n+\n+\n+public class BeanPropertyFactoryTest {\n+\n+\t@Test\n+\tpublic void testBeanPropertyFloatFromFactory() {\n+\t\tValuePropertyInstance vpi = PropertyinstancesFactory.eINSTANCE.createValuePropertyInstance();\n+\t\tFloatProperty type = PropertydefinitionsFactory.eINSTANCE.createFloatProperty();\n+\t\tvpi.setType(type);\n+\n+\t\tBeanPropertyFactory bpf = new BeanPropertyFactory();\n+\t\tIBeanObject<? extends APropertyInstance> beanPropertyFloat = bpf.getInstanceFor(vpi);\n+\t\tassertTrue(beanPropertyFloat instanceof BeanPropertyFloat);\n+\t\tassertTrue(beanPropertyFloat.getTypeInstance() instanceof ValuePropertyInstance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f3860bdf893d1fa9ebfe24b438fd2bb4a9c714"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzcwMjYyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjoxNzoxMVrOGZ_Q_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjoxNzoxMVrOGZ_Q_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNDEyNg==", "bodyText": "Should still be static (see spotbugs error message in build).", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429904126", "createdAt": "2020-05-25T12:17:11Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+/**\n+ * This factory class produces Bean Objects, wrapping certain BeanProperties for a given object.\n+ */\n+public class BeanPropertyFactory {\n+\n+\tprivate BeanPropertyFactorySwitch bpfs;\n+\n+\t/**\n+\t * @param object Object that shall be wrapped into Bean Object\n+\t * @return Bean Object wrapper for object\n+\t */\n+\tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n+\t\tATypeDefinition type = object.getType();\n+\t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n+\t\tbean.setATypeInstance(object);\n+\t\treturn bean;\n+\t}\n+\n+\tpublic BeanPropertyFactory() {\n+\t\tsuper();\n+\t\tbpfs = new BeanPropertyFactorySwitch();\n+\t}\n+\n+\tprivate class BeanPropertyFactorySwitch extends PropertydefinitionsSwitch<IBeanObject<? extends APropertyInstance>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64873e420028d2770c3d64f2422fc6ed3b39211"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzcwNjQ5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjoxODozN1rOGZ_TTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjoxODozN1rOGZ_TTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNDcxOQ==", "bodyText": "Maybe declared the constructor at the top.\nAlso I am not sure if we need a constructor here.\nAny problem with just private BeanPropertyFactorySwitch bpfs = new BeanPropertyFactorySwitch();", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429904719", "createdAt": "2020-05-25T12:18:37Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;\n+\n+import org.eclipse.emf.ecore.EObject;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeDefinition;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.util.PropertydefinitionsSwitch;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+\n+/**\n+ * This factory class produces Bean Objects, wrapping certain BeanProperties for a given object.\n+ */\n+public class BeanPropertyFactory {\n+\n+\tprivate BeanPropertyFactorySwitch bpfs;\n+\n+\t/**\n+\t * @param object Object that shall be wrapped into Bean Object\n+\t * @return Bean Object wrapper for object\n+\t */\n+\tpublic IBeanObject<? extends APropertyInstance> getInstanceFor(ATypeInstance object) {\n+\t\tATypeDefinition type = object.getType();\n+\t\tIBeanObject<? extends APropertyInstance> bean = bpfs.doSwitch(type);\n+\t\tbean.setATypeInstance(object);\n+\t\treturn bean;\n+\t}\n+\n+\tpublic BeanPropertyFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64873e420028d2770c3d64f2422fc6ed3b39211"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzkwMjI2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoyOTozMFrOGaBLhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoyOTozMFrOGaBLhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNTQ5NA==", "bodyText": "I only now notice that the factory is in the graphiti plugin.\nMaybe we can move it to where the other bean factories are?\nI dont see this as a graphiti thing.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r429935494", "createdAt": "2020-05-25T13:29:30Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti/src/de/dlr/sc/virsat/graphiti/diagram/BeanPropertyFactory.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*******************************************************************************\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.graphiti.diagram;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "178391e64ed05f4444f421dcdbfc260e9ab8ea65"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODQ0MzY3OnYy", "diffSide": "LEFT", "path": "de.dlr.sc.virsat.model/src/de/dlr/sc/virsat/model/dvlm/roles/RightsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzowNDowMFrOGaGZdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzowNDowMFrOGaGZdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMDk4Mw==", "bodyText": "I dont think this file should have changes.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r430020983", "createdAt": "2020-05-25T17:04:00Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model/src/de/dlr/sc/virsat/model/dvlm/roles/RightsHelper.java", "diffHunk": "@@ -1,109 +1,109 @@\n-/*******************************************************************************\n- * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6304a453a0b95d51b7114fd09e5ac3c45233b06"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODQ0NDQwOnYy", "diffSide": "LEFT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/test/AllTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzowNDoyNlrOGaGZ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzowNDoyNlrOGaGZ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMTA4Ng==", "bodyText": "Since we arent registering any test cases here, I dont think this file should have changes.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r430021086", "createdAt": "2020-05-25T17:04:26Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/test/AllTests.java", "diffHunk": "@@ -19,20 +19,26 @@\n import junit.framework.JUnit4TestAdapter;\r\n \r\n \r\n+\r\n+\r\n+/**\r\n+ *\r\n+ */\r\n @RunWith(Suite.class)\r\n \r\n-@SuiteClasses({\r\n-\tBeanIndependenceSolverTest.class,\r\n-\tDiagramHelperTest.class,\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6304a453a0b95d51b7114fd09e5ac3c45233b06"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzkxNDcxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjo1NDo0NFrOGa7vgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjo1NDo0NFrOGa7vgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5NDk3Nw==", "bodyText": "I think testing only one property bean is enough.\nWe just need to test here that the bean independence solver actually handles properties.\nThat the individual types are handled correctly is tested in the bean factory.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r430894977", "createdAt": "2020-05-27T06:54:44Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +89,125 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n+\t\taddStructuralElementToResource(ed2);\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\t\taddStructuralElementToResource(ed1);\r\n \r\n+\t\t//test property\r\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\r\n \t\tABeanCategoryAssignment aCategory = (ABeanCategoryAssignment) documentObj;\r\n \t\tassertEquals(testDocument2, aCategory);\r\n-\t\t\r\n+\r\n+\t\tObject beanNoteObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getNoteBean().getUuid());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01e4d470f74930cd4e60ae0a684e9e46509ad3c6"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzkxNjY3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjo1NToyOVrOGa7wxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjo1NToyOVrOGa7wxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5NTMwMw==", "bodyText": "Double check if we need this much setupfor the bean property test.\nWhy is the ca test so simple but the property test looks so complex?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r430895303", "createdAt": "2020-05-27T06:55:29Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +89,125 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\teditingDomain.getCommandStack().execute(command);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01e4d470f74930cd4e60ae0a684e9e46509ad3c6"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTg3NTE0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNToxNDowNVrOGbPj6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzozMTozMVrOGdldJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxOTY5MA==", "bodyText": "Why is this cast here necessary? Cant we just do the the assert on the returned beanNoteObj?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r431219690", "createdAt": "2020-05-27T15:14:05Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +88,112 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n \r\n+\t\t//test property\r\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\r\n \t\tABeanCategoryAssignment aCategory = (ABeanCategoryAssignment) documentObj;\r\n \t\tassertEquals(testDocument2, aCategory);\r\n-\t\t\r\n+\r\n+\t\tObject beanNoteObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getNoteBean().getUuid());\r\n+\t\tBeanPropertyString beanPropertyString = (BeanPropertyString) beanNoteObj;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e8ed57390664e2309f0cd7f937fd50b5ccb08a"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NDg0OQ==", "bodyText": "We would get a type error if we dont use an explicit cast.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433084849", "createdAt": "2020-06-01T07:35:41Z", "author": {"login": "christoph-pietsch-DLR"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +88,112 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n \r\n+\t\t//test property\r\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\r\n \t\tABeanCategoryAssignment aCategory = (ABeanCategoryAssignment) documentObj;\r\n \t\tassertEquals(testDocument2, aCategory);\r\n-\t\t\r\n+\r\n+\t\tObject beanNoteObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getNoteBean().getUuid());\r\n+\t\tBeanPropertyString beanPropertyString = (BeanPropertyString) beanNoteObj;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxOTY5MA=="}, "originalCommit": {"oid": "08e8ed57390664e2309f0cd7f937fd50b5ccb08a"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3NTU1OQ==", "bodyText": "But why do we need to cast the beanNoteObj to a BeanPropertyString in the first place?\nThere shouldnt be any issue doing\nassertEquals(testDocument2.getNoteBean(), beanNoteObj);", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433675559", "createdAt": "2020-06-02T07:31:31Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +88,112 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n \r\n+\t\t//test property\r\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\r\n \t\tABeanCategoryAssignment aCategory = (ABeanCategoryAssignment) documentObj;\r\n \t\tassertEquals(testDocument2, aCategory);\r\n-\t\t\r\n+\r\n+\t\tObject beanNoteObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getNoteBean().getUuid());\r\n+\t\tBeanPropertyString beanPropertyString = (BeanPropertyString) beanNoteObj;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxOTY5MA=="}, "originalCommit": {"oid": "08e8ed57390664e2309f0cd7f937fd50b5ccb08a"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTg3Nzg5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNToxNDo0MVrOGbPlxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNToxNDo0MVrOGbPlxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIyMDE2NA==", "bodyText": "Lets keep the Ca testing in the the ca test case.\nWe probably dont need to do it here again.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r431220164", "createdAt": "2020-05-27T15:14:41Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +88,112 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n \r\n+\t\t//test property\r\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08e8ed57390664e2309f0cd7f937fd50b5ccb08a"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTg0NDIxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTozMToyOFrOGdpsog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTozMToyOFrOGdpsog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0NTA1OA==", "bodyText": "Maybe rename the EGSCC to EXTENDED_PS.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433745058", "createdAt": "2020-06-02T09:31:28Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -54,18 +53,29 @@\n \tprivate static final String DOCUMENTUUID = \"ea816464-aaaa-bbbb-ae91-31d37c60a63c\";\r\n \r\n \tprivate Concept conceptEgscc;\r\n-\t\r\n+\tprivate Document testDocument;\r\n+\tprivate Document testDocument2;\r\n+\tprivate BeanIndependenceSolver beanIndependenceSolver;\r\n+\tprivate ElementDefinition ed1;\r\n+\tprivate ElementDefinition ed2;\r\n+\tprivate StructuralElementInstance sei1;\r\n+\tprivate StructuralElementInstance sei2;\r\n+\tprivate Command command;\r\n+\r\n+\t@Override\r\n \t@Before\r\n \tpublic void setUp() throws CoreException {\r\n \t\tsuper.setUp();\r\n \t\tUserRegistry.getInstance().setSuperUser(true);\r\n \r\n \t\taddEditingDomainAndRepository();\r\n \t\tactivateCoreConcept();\r\n-\t\t\r\n+\r\n \t\t//CHECKSTYLE:OFF\r\n \t\tActiveConceptConfigurationElement accePs = new ActiveConceptConfigurationElement(null) {\r\n+\t\t\t@Override\r\n \t\t\tpublic String getXmi() { return \"concept/concept.xmi\"; };\r\n+\t\t\t@Override\r\n \t\t\tpublic String getId() { return CONCEPT_ID_EGSCC; };\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "148f424fe5de233d50aaebdc8b6d37c113344e56"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTg0NTI2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTozMTo0OVrOGdptWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTozMTo0OVrOGdptWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0NTI0MA==", "bodyText": "Maybe DOCUMENT_UUID", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433745240", "createdAt": "2020-06-02T09:31:49Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +86,108 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "148f424fe5de233d50aaebdc8b6d37c113344e56"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTg1NDc5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTozNDoxMlrOGdpzng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTozNDoxMlrOGdpzng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0Njg0Ng==", "bodyText": "Please improve comments, it is ahrd to understand which uuid is the SEI and which one is the BO and so on. mabye consider using the comments in the assert statements as well. This makes it easier to spot the exact place and reason once a test case is failing.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433746846", "createdAt": "2020-06-02T09:34:12Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +86,108 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "148f424fe5de233d50aaebdc8b6d37c113344e56"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTg3MTc3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTozODo1MFrOGdp-Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTozODo1MFrOGdp-Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0OTU0Nw==", "bodyText": "The calls to the command stack can be simplified by a new method from the super class\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\n          \n          \n            \n            \t\t\t@Override\n          \n          \n            \n            \t\t\tprotected void doExecute() {\n          \n          \n            \n            \t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t});\n          \n          \n            \n            \t\texecuteAsCommand(() -> rs.getAndAddStructuralElementInstanceResource(sei));", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433749547", "createdAt": "2020-06-02T09:38:50Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +86,108 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\tObject beanNoteObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getNoteBean().getUuid());\r\n+\t\tassertEquals(testDocument2.getNoteBean(), beanNoteObj);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForCa() throws CoreException, IOException {\r\n+\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n+\t\tassertEquals(DOCUMENTUUID, caKey);\r\n \r\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\r\n-\t\tABeanCategoryAssignment aCategory = (ABeanCategoryAssignment) documentObj;\r\n-\t\tassertEquals(testDocument2, aCategory);\r\n-\t\t\r\n+\t\tassertEquals(testDocument2, documentObj);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceNull() throws CoreException, IOException {\r\n \t\tassertEquals(null, beanIndependenceSolver.getKeyForBusinessObject(null));\r\n+\t}\r\n+\r\n+\tprivate void checkDiagramWritePermissionForStructuralElement(StructuralElementInstance sei) {\r\n+\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n+\t\tassertEquals(true, permission);\r\n+\t}\r\n \r\n+\tprivate void addStructuralElementToResource(ElementDefinition ed) {\r\n+\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n+\t\tresEd2.getContents().add(ed.getStructuralElementInstance());\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @return IDiagramTypeProvider\r\n+\t */\r\n+\tprivate IDiagramTypeProvider getDiagramTypeProvider() {\r\n+\t\t// Create The diagram\r\n+\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n+\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");\r\n+\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");\r\n+\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n+\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n+\r\n+\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n+\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n+\t\tdtp.init(diagram, null);\r\n+\t\treturn dtp;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @param sei StructuralElementInstance\r\n+\t */\r\n+\tprivate void getAndAddStructuralElementInstance(StructuralElementInstance sei) {\r\n+\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n+\t\t\t@Override\r\n+\t\t\tprotected void doExecute() {\r\n+\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n+\t\t\t}\r\n+\t\t});\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "148f424fe5de233d50aaebdc8b6d37c113344e56"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTg3OTM1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo0MTowM1rOGdqDAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo0MTowM1rOGdqDAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1MDc4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\n          \n          \n            \n            \t\t\t@Override\n          \n          \n            \n            \t\t\tprotected void doExecute() {\n          \n          \n            \n            \t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t});\n          \n          \n            \n            \t\texecuteAsCommand(() -> rs.getAndAddStructuralElementInstanceResource(sei));", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/594#discussion_r433750786", "createdAt": "2020-06-02T09:41:03Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.graphiti.test/src/de/dlr/sc/virsat/graphiti/diagram/BeanIndependenceSolverTest.java", "diffHunk": "@@ -76,91 +86,108 @@ protected void doExecute() {\n \t\t\t\taccePs.createAddActiveConceptCommand(editingDomain, repository).execute();\r\n \t\t\t\tActiveConceptHelper acHelper = new ActiveConceptHelper(repository);\r\n \t\t\t\tconceptEgscc = acHelper.getConcept(CONCEPT_ID_EGSCC);\r\n-\r\n \t\t\t}\r\n-\t\t});\t\r\n-\t}\r\n+\t\t});\r\n \r\n-\t@Test\r\n-\tpublic void testSolveIndependence() throws CoreException, IOException { \t\r\n-\t\t// test getConcept\r\n \t\tConcept concept = DiagramHelper.getConcept(editingDomain, CONCEPT_ID_EGSCC);\r\n \t\tassertEquals(concept, conceptEgscc);\r\n-\t\t\r\n-\t\t// create Seis and Cas\r\n-\t\tElementDefinition ed = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei = ed.getStructuralElementInstance();\r\n-\t\tsei.setUuid(new VirSatUuid(UUID));\r\n-\t\t\r\n-\t\tDocument testDocument2 = new Document(concept);\r\n-\t\ted.add(testDocument2);\r\n-\r\n-\t\tElementDefinition ed2 = new ElementDefinition(conceptEgscc);\r\n-\t\tStructuralElementInstance sei2 = ed2.getStructuralElementInstance();\r\n-\t\t\r\n-\t\tDocument testDocument = new Document(concept);\r\n-\t\t\r\n-\t\t// Create The diagram\r\n-\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n-\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");  \r\n-\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");  \r\n-\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n-\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n \r\n-\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n-\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n-\t\tdtp.init(diagram, null);\r\n-\t\tBeanIndependenceSolver beanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n-\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\ttestDocument = new Document(concept);\r\n+\t\ttestDocument2 = new Document(concept);\r\n+\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n \r\n-\t\tseiKey = beanIndependenceSolver.getKeyForBusinessObject(ed);\r\n-\t\tassertEquals(UUID, seiKey);\r\n+\t\tIDiagramTypeProvider dtp = getDiagramTypeProvider();\r\n+\t\tbeanIndependenceSolver = new BeanIndependenceSolver(dtp);\r\n \r\n-\t\ttestDocument.getTypeInstance().setUuid(new VirSatUuid(DOCUMENTUUID));\r\n-\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\ted1 = new ElementDefinition(conceptEgscc);\r\n+\t\ted2 = new ElementDefinition(conceptEgscc);\r\n+\t\tsei1 = ed1.getStructuralElementInstance();\r\n+\t\tsei2 = ed2.getStructuralElementInstance();\r\n+\t\tsei1.setUuid(new VirSatUuid(UUID));\r\n+\t\ted1.add(testDocument2);\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n \r\n-\t\tcaKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n-\t\tassertEquals(DOCUMENTUUID, caKey);\r\n+\t\tcommand = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed1.getStructuralElementInstance());\r\n+\t}\r\n \r\n-\t\tCommand command = CreateAddStructuralElementInstanceCommand.create(editingDomain, repository, ed.getStructuralElementInstance());\r\n-\t\teditingDomain.getCommandStack().execute(command);\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForSei() throws CoreException, IOException {\r\n+\t\tString seiKey = beanIndependenceSolver.getKeyForBusinessObject(ed1);\r\n+\t\tassertEquals(UUID, seiKey);\r\n \r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei2);\r\n-\t\t\t}\r\n-\t\t});\r\n+\t\teditingDomain.getCommandStack().execute(command);\r\n+\t\tgetAndAddStructuralElementInstance(sei2);\r\n \r\n-\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed2.getStructuralElementInstance());\r\n-\t\tresEd2.getContents().add(ed2.getStructuralElementInstance());\r\n+\t\taddStructuralElementToResource(ed2);\r\n \t\tObject sei2Object = beanIndependenceSolver.getBusinessObjectForKey(ed2.getUuid());\r\n \t\tABeanStructuralElementInstance aBean = (ABeanStructuralElementInstance) sei2Object;\r\n \t\tassertEquals(ed2, aBean);\r\n-\t\t\r\n-\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n-\t\t\t@Override\r\n-\t\t\tprotected void doExecute() {\r\n-\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n-\t\t\t}\r\n-\t\t});\r\n \r\n-\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n-\t\tassertEquals(true, permission);\r\n-\t\t\r\n-\t\tResource resEd = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n-\t\tresEd.getContents().add(ed.getStructuralElementInstance());\r\n+\t\tgetAndAddStructuralElementInstance(sei1);\r\n+\t\tcheckDiagramWritePermissionForStructuralElement(sei1);\r\n+\r\n+\t\taddStructuralElementToResource(ed1);\r\n \t\tObject obj = beanIndependenceSolver.getBusinessObjectForKey(seiKey);\r\n \t\taBean = (ABeanStructuralElementInstance) obj;\r\n-\t\tassertEquals(ed, aBean);\r\n+\t\tassertEquals(ed1, aBean);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForBeanProperty() throws CoreException, IOException {\r\n+\t\tObject beanNoteObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getNoteBean().getUuid());\r\n+\t\tassertEquals(testDocument2.getNoteBean(), beanNoteObj);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceForCa() throws CoreException, IOException {\r\n+\t\tString caKey = beanIndependenceSolver.getKeyForBusinessObject(testDocument);\r\n+\t\tassertEquals(DOCUMENTUUID, caKey);\r\n \r\n \t\tObject documentObj = beanIndependenceSolver.getBusinessObjectForKey(testDocument2.getUuid());\r\n-\t\tABeanCategoryAssignment aCategory = (ABeanCategoryAssignment) documentObj;\r\n-\t\tassertEquals(testDocument2, aCategory);\r\n-\t\t\r\n+\t\tassertEquals(testDocument2, documentObj);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testSolveIndependenceNull() throws CoreException, IOException {\r\n \t\tassertEquals(null, beanIndependenceSolver.getKeyForBusinessObject(null));\r\n+\t}\r\n+\r\n+\tprivate void checkDiagramWritePermissionForStructuralElement(StructuralElementInstance sei) {\r\n+\t\tBoolean permission = DiagramHelper.hasDiagramWritePermission(sei);\r\n+\t\tassertEquals(true, permission);\r\n+\t}\r\n \r\n+\tprivate void addStructuralElementToResource(ElementDefinition ed) {\r\n+\t\tResource resEd2 = rs.getStructuralElementInstanceResource(ed.getStructuralElementInstance());\r\n+\t\tresEd2.getContents().add(ed.getStructuralElementInstance());\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @return IDiagramTypeProvider\r\n+\t */\r\n+\tprivate IDiagramTypeProvider getDiagramTypeProvider() {\r\n+\t\t// Create The diagram\r\n+\t\tDiagram diagram = Graphiti.getPeCreateService().createDiagram(\"test\", \"testDiagram\", true);\r\n+\t\tIFolder diagramFolder = testProject.getFolder(\"src/diagrams/\");\r\n+\t\tIFile diagramFile = diagramFolder.getFile(\"testDiagram\" + \".\" + \"test\");\r\n+\t\tURI uri = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);\r\n+\t\tDiagramHelper.createDiagram(uri, diagram, rs);\r\n+\r\n+\t\tIDiagramTypeProvider dtp = GraphitiInternal.getEmfService().getDTPForDiagram(diagram);\r\n+\t\tGraphitiInternal.getEmfService().wireDTPToDiagram(diagram, dtp);\r\n+\t\tdtp.init(diagram, null);\r\n+\t\treturn dtp;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @param sei StructuralElementInstance\r\n+\t */\r\n+\tprivate void getAndAddStructuralElementInstance(StructuralElementInstance sei) {\r\n+\t\teditingDomain.getVirSatCommandStack().execute(new RecordingCommand(editingDomain) {\r\n+\t\t\t@Override\r\n+\t\t\tprotected void doExecute() {\r\n+\t\t\t\trs.getAndAddStructuralElementInstanceResource(sei);\r\n+\t\t\t}\r\n+\t\t});\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "148f424fe5de233d50aaebdc8b6d37c113344e56"}, "originalPosition": 211}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 734, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}