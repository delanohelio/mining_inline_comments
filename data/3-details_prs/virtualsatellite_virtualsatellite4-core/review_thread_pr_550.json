{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NDY0MTA2", "number": 550, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzo0MTo0OFrODtablw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToyOTo1OFrODt3yiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTQ1NTU5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzo0MTo0OFrOF-0cAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0NjozOVrOF-7EaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxNTE3MQ==", "bodyText": "Is it ok to access the RepoRegistry in the Resources or should we move this code into the Controller? E.g. have a function getAllProjects() in the Controller?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401415171", "createdAt": "2020-04-01T07:41:48Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.Consumes;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.controller.RepoManagementController;\r\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\r\n+\r\n+@Path(ProjectManagementResource.PATH)\r\n+public class ProjectManagementResource {\r\n+\r\n+\tpublic static final String PATH = \"/project\";\r\n+\r\n+\tprivate RepoManagementController controller;\r\n+\r\n+\tpublic ProjectManagementResource() {\r\n+\t\tcontroller = new RepoManagementController();\r\n+\t}\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getAllProjects() {\r\n+\t\tList<String> projects = new ArrayList<>(RepoRegistry.getInstance().getRepositories().keySet());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049cecb7cd2442bb0adc34072efacd2aaf391181"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzgxNw==", "bodyText": "Yes, makes sense to me. I'll change it.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401523817", "createdAt": "2020-04-01T10:46:39Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.Consumes;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.controller.RepoManagementController;\r\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\r\n+\r\n+@Path(ProjectManagementResource.PATH)\r\n+public class ProjectManagementResource {\r\n+\r\n+\tpublic static final String PATH = \"/project\";\r\n+\r\n+\tprivate RepoManagementController controller;\r\n+\r\n+\tpublic ProjectManagementResource() {\r\n+\t\tcontroller = new RepoManagementController();\r\n+\t}\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getAllProjects() {\r\n+\t\tList<String> projects = new ArrayList<>(RepoRegistry.getInstance().getRepositories().keySet());\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxNTE3MQ=="}, "originalCommit": {"oid": "049cecb7cd2442bb0adc34072efacd2aaf391181"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTQ1ODM3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzo0MjozMVrOF-0duA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzo0MjozMVrOF-0duA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxNTYwOA==", "bodyText": "Also move this RepoRegistry in the Controller?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401415608", "createdAt": "2020-04-01T07:42:31Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.Consumes;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.controller.RepoManagementController;\r\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\r\n+\r\n+@Path(ProjectManagementResource.PATH)\r\n+public class ProjectManagementResource {\r\n+\r\n+\tpublic static final String PATH = \"/project\";\r\n+\r\n+\tprivate RepoManagementController controller;\r\n+\r\n+\tpublic ProjectManagementResource() {\r\n+\t\tcontroller = new RepoManagementController();\r\n+\t}\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getAllProjects() {\r\n+\t\tList<String> projects = new ArrayList<>(RepoRegistry.getInstance().getRepositories().keySet());\r\n+\t\treturn Response.status(Response.Status.OK).entity(projects).build();\r\n+\t}\r\n+\r\n+\t\r\n+\t/**\r\n+\t * Gets the configuration for the given project name.\r\n+\t * If project does not exist returns status NOT_FOUND\r\n+\t */\r\n+\t@GET\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getProject(@PathParam(\"projectName\") String projectName) {\r\n+\t\tif (controller.getRepository(projectName) != null) {\r\n+\t\t\tRepositoryConfiguration configuration = controller.getRepository(projectName).getRepositoryConfiguration();\r\n+\t\t\treturn Response.status(Response.Status.OK).entity(configuration).build();\r\n+\t\t} else {\r\n+\t\t\treturn Response.status(Response.Status.NOT_FOUND).build();\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@DELETE\r\n+\t@Path(\"/{projectName}\")\r\n+\tpublic Response deleteProject(@PathParam(\"projectName\") String repoName) {\r\n+\t\tcontroller.deleteRepository(repoName);\r\n+\t\treturn Response.status(Response.Status.OK).build();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Creates or updates a project configuration on the project specified by the URL.\r\n+\t * URL project overrides project name in the passed configuration if they are different.\r\n+\t * @param configuration should contain URL and backend\r\n+\t */\r\n+\t@PUT\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\tpublic Response createOrUpdateProject(@PathParam(\"projectName\") String projectName, RepositoryConfiguration configuration) {\r\n+\t\tconfiguration.setProjectName(projectName);\r\n+\t\tif (!validProjectConfiguration(configuration)) {\r\n+\t\t\treturn Response.status(Response.Status.BAD_REQUEST).build();\r\n+\t\t}\r\n+\t\tif (RepoRegistry.getInstance().getRepositories().containsKey(projectName)) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049cecb7cd2442bb0adc34072efacd2aaf391181"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTQ3ODU1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzo0ODoyNVrOF-0qBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzo0ODoyNVrOF-0qBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxODc1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (controller.getRepository(projectName) != null) {\n          \n          \n            \n            \t\t\tRepositoryConfiguration configuration = controller.getRepository(projectName).getRepositoryConfiguration();\n          \n          \n            \n            \t\tServerRepository repository = controller.getRepository(projectName)\n          \n          \n            \n            \t\tif (repository != null) {\n          \n          \n            \n            \t\t\tRepositoryConfiguration configuration = repository.getRepositoryConfiguration();", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401418759", "createdAt": "2020-04-01T07:48:25Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.Consumes;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.controller.RepoManagementController;\r\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\r\n+\r\n+@Path(ProjectManagementResource.PATH)\r\n+public class ProjectManagementResource {\r\n+\r\n+\tpublic static final String PATH = \"/project\";\r\n+\r\n+\tprivate RepoManagementController controller;\r\n+\r\n+\tpublic ProjectManagementResource() {\r\n+\t\tcontroller = new RepoManagementController();\r\n+\t}\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getAllProjects() {\r\n+\t\tList<String> projects = new ArrayList<>(RepoRegistry.getInstance().getRepositories().keySet());\r\n+\t\treturn Response.status(Response.Status.OK).entity(projects).build();\r\n+\t}\r\n+\r\n+\t\r\n+\t/**\r\n+\t * Gets the configuration for the given project name.\r\n+\t * If project does not exist returns status NOT_FOUND\r\n+\t */\r\n+\t@GET\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getProject(@PathParam(\"projectName\") String projectName) {\r\n+\t\tif (controller.getRepository(projectName) != null) {\r\n+\t\t\tRepositoryConfiguration configuration = controller.getRepository(projectName).getRepositoryConfiguration();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049cecb7cd2442bb0adc34072efacd2aaf391181"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTc2NTMyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/configuration/RepositoryConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTowNzoxOVrOF-3d4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTozNzoyN1rOF-8owQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NDgwMQ==", "bodyText": "This segment looks weird. What if properties is not null but other.properties is null?\nI think we can fix and simplify this via\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (properties == null) {\n          \n          \n            \n            \t\t\tif (other.properties != null) {\n          \n          \n            \n            \t\t\t\treturn false;\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t} else if (!properties.equals(other.properties)) {\n          \n          \n            \n            \t\t\treturn false;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\treturn true;\n          \n          \n            \n            \t\treturn Objects.equals(properties, other.properties)", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401464801", "createdAt": "2020-04-01T09:07:19Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/configuration/RepositoryConfiguration.java", "diffHunk": "@@ -139,4 +140,34 @@ public String getLocalPath() {\n \tpublic void setLocalPath(String localPath) {\r\n \t\tproperties.setProperty(LOCAL_PATH_KEY, localPath);\r\n \t}\r\n+\r\n+\t@Override\r\n+\tpublic int hashCode() {\r\n+\t\tfinal int prime = 31;\r\n+\t\tint result = 1;\r\n+\t\tresult = prime * result + ((properties == null) ? 0 : properties.hashCode());\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean equals(Object obj) {\r\n+\t\tif (this == obj) {\r\n+\t\t\treturn true;\r\n+\t\t}\r\n+\t\tif (obj == null) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\tif (getClass() != obj.getClass()) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\tRepositoryConfiguration other = (RepositoryConfiguration) obj;\r\n+\t\tif (properties == null) {\r\n+\t\t\tif (other.properties != null) {\r\n+\t\t\t\treturn false;\r\n+\t\t\t}\r\n+\t\t} else if (!properties.equals(other.properties)) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\treturn true;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049cecb7cd2442bb0adc34072efacd2aaf391181"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0OTUwNQ==", "bodyText": "Then it will go to else and call properties.equals(null), so no problem there. But I agree, with Objects.equals it looks better.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401549505", "createdAt": "2020-04-01T11:37:27Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/configuration/RepositoryConfiguration.java", "diffHunk": "@@ -139,4 +140,34 @@ public String getLocalPath() {\n \tpublic void setLocalPath(String localPath) {\r\n \t\tproperties.setProperty(LOCAL_PATH_KEY, localPath);\r\n \t}\r\n+\r\n+\t@Override\r\n+\tpublic int hashCode() {\r\n+\t\tfinal int prime = 31;\r\n+\t\tint result = 1;\r\n+\t\tresult = prime * result + ((properties == null) ? 0 : properties.hashCode());\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean equals(Object obj) {\r\n+\t\tif (this == obj) {\r\n+\t\t\treturn true;\r\n+\t\t}\r\n+\t\tif (obj == null) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\tif (getClass() != obj.getClass()) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\tRepositoryConfiguration other = (RepositoryConfiguration) obj;\r\n+\t\tif (properties == null) {\r\n+\t\t\tif (other.properties != null) {\r\n+\t\t\t\treturn false;\r\n+\t\t\t}\r\n+\t\t} else if (!properties.equals(other.properties)) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\treturn true;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NDgwMQ=="}, "originalCommit": {"oid": "049cecb7cd2442bb0adc34072efacd2aaf391181"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTc4NDAzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/configuration/RepositoryConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToxMjoyM1rOF-3pxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo1ODozNlrOF_Eurw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2Nzg0Nw==", "bodyText": "Codecoverage seems to be complaining about complete lack of coverage of hashCode() and also partially of equals()", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401467847", "createdAt": "2020-04-01T09:12:23Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/configuration/RepositoryConfiguration.java", "diffHunk": "@@ -139,4 +140,34 @@ public String getLocalPath() {\n \tpublic void setLocalPath(String localPath) {\r\n \t\tproperties.setProperty(LOCAL_PATH_KEY, localPath);\r\n \t}\r\n+\r\n+\t@Override\r\n+\tpublic int hashCode() {\r\n+\t\tfinal int prime = 31;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049cecb7cd2442bb0adc34072efacd2aaf391181"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MDQ3Nw==", "bodyText": "I would rather ignore it than put unnecessary code in tests to cover this auto-generated hashCode()", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401570477", "createdAt": "2020-04-01T12:18:33Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/configuration/RepositoryConfiguration.java", "diffHunk": "@@ -139,4 +140,34 @@ public String getLocalPath() {\n \tpublic void setLocalPath(String localPath) {\r\n \t\tproperties.setProperty(LOCAL_PATH_KEY, localPath);\r\n \t}\r\n+\r\n+\t@Override\r\n+\tpublic int hashCode() {\r\n+\t\tfinal int prime = 31;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2Nzg0Nw=="}, "originalCommit": {"oid": "049cecb7cd2442bb0adc34072efacd2aaf391181"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MjA5NQ==", "bodyText": "Well if hashcode and equals is manually implemented, I think it should be tested.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401682095", "createdAt": "2020-04-01T14:58:36Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/configuration/RepositoryConfiguration.java", "diffHunk": "@@ -139,4 +140,34 @@ public String getLocalPath() {\n \tpublic void setLocalPath(String localPath) {\r\n \t\tproperties.setProperty(LOCAL_PATH_KEY, localPath);\r\n \t}\r\n+\r\n+\t@Override\r\n+\tpublic int hashCode() {\r\n+\t\tfinal int prime = 31;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2Nzg0Nw=="}, "originalCommit": {"oid": "049cecb7cd2442bb0adc34072efacd2aaf391181"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTgwOTkxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/controller/RepoManagementController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToxOTozMlrOF-36nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0Mzo1OVrOF-81Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3MjE1OQ==", "bodyText": "Is it ok that we catch the exception here but then return Response.Status.OK in the calling method?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401472159", "createdAt": "2020-04-01T09:19:32Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/controller/RepoManagementController.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.controller;\r\n+\r\n+import java.io.File;\r\n+import java.net.URISyntaxException;\r\n+\r\n+import org.eclipse.core.runtime.Status;\r\n+\r\n+import de.dlr.sc.virsat.server.Activator;\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\r\n+import de.dlr.sc.virsat.server.repository.ServerRepository;\r\n+\r\n+public class RepoManagementController {\r\n+\t\r\n+\tpublic RepoManagementController() {\r\n+\t}\r\n+\t\r\n+\tpublic ServerRepository getRepository(String repoName) {\r\n+\t\treturn RepoRegistry.getInstance().getRepository(repoName);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Adds and registers a new project\r\n+\t * @param repoConfiguration project configuration\r\n+\t */\r\n+\tpublic void addNewRepository(RepositoryConfiguration repoConfiguration) {\r\n+\t\ttry {\r\n+\t\t\tServerRepository repository = new ServerRepository(new File(ServerConfiguration.getProjectRepositoriesDir()), repoConfiguration);\r\n+\t\t\tRepoRegistry.getInstance().addRepository(repoConfiguration.getProjectName(), repository);\r\n+\t\t} catch (URISyntaxException e) {\r\n+\t\t\tString errorMessage = \"Error adding repository configuration for project \" + repoConfiguration.getProjectName();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049cecb7cd2442bb0adc34072efacd2aaf391181"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MjY1MQ==", "bodyText": "No, this is definitely wrong :) thanks!", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401552651", "createdAt": "2020-04-01T11:43:59Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/controller/RepoManagementController.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.controller;\r\n+\r\n+import java.io.File;\r\n+import java.net.URISyntaxException;\r\n+\r\n+import org.eclipse.core.runtime.Status;\r\n+\r\n+import de.dlr.sc.virsat.server.Activator;\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\r\n+import de.dlr.sc.virsat.server.repository.ServerRepository;\r\n+\r\n+public class RepoManagementController {\r\n+\t\r\n+\tpublic RepoManagementController() {\r\n+\t}\r\n+\t\r\n+\tpublic ServerRepository getRepository(String repoName) {\r\n+\t\treturn RepoRegistry.getInstance().getRepository(repoName);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Adds and registers a new project\r\n+\t * @param repoConfiguration project configuration\r\n+\t */\r\n+\tpublic void addNewRepository(RepositoryConfiguration repoConfiguration) {\r\n+\t\ttry {\r\n+\t\t\tServerRepository repository = new ServerRepository(new File(ServerConfiguration.getProjectRepositoriesDir()), repoConfiguration);\r\n+\t\t\tRepoRegistry.getInstance().addRepository(repoConfiguration.getProjectName(), repository);\r\n+\t\t} catch (URISyntaxException e) {\r\n+\t\t\tString errorMessage = \"Error adding repository configuration for project \" + repoConfiguration.getProjectName();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3MjE1OQ=="}, "originalCommit": {"oid": "049cecb7cd2442bb0adc34072efacd2aaf391181"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzgyNzY0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzozMToyM1rOF_eo8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzozMToyM1rOF_eo8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEwNjYwOQ==", "bodyText": "Would it make sense to move this into the RepositoryConfiguration class and make it public there since the data here purely operates on the configuration?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r402106609", "createdAt": "2020-04-02T07:31:23Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.Consumes;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.controller.RepoManagementController;\r\n+import de.dlr.sc.virsat.server.repository.ServerRepository;\r\n+\r\n+@Path(ProjectManagementResource.PATH)\r\n+public class ProjectManagementResource {\r\n+\r\n+\tpublic static final String PATH = \"/project\";\r\n+\r\n+\tprivate RepoManagementController controller;\r\n+\r\n+\tpublic ProjectManagementResource() {\r\n+\t\tcontroller = new RepoManagementController();\r\n+\t}\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getAllProjects() {\r\n+\t\tList<String> projects = new ArrayList<>(controller.getAllProjectNames());\r\n+\t\treturn Response.status(Response.Status.OK).entity(projects).build();\r\n+\t}\r\n+\r\n+\t\r\n+\t/**\r\n+\t * Gets the configuration for the given project name.\r\n+\t * If project does not exist returns status NOT_FOUND\r\n+\t */\r\n+\t@GET\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getProject(@PathParam(\"projectName\") String projectName) {\r\n+\t\tServerRepository serverRepository = controller.getRepository(projectName);\r\n+\t\tif (serverRepository != null) {\r\n+\t\t\tRepositoryConfiguration configuration = serverRepository.getRepositoryConfiguration();\r\n+\t\t\treturn Response.status(Response.Status.OK).entity(configuration).build();\r\n+\t\t} else {\r\n+\t\t\treturn Response.status(Response.Status.NOT_FOUND).build();\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@DELETE\r\n+\t@Path(\"/{projectName}\")\r\n+\tpublic Response deleteProject(@PathParam(\"projectName\") String repoName) {\r\n+\t\tcontroller.deleteRepository(repoName);\r\n+\t\treturn Response.status(Response.Status.OK).build();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Creates or updates a project configuration on the project specified by the URL.\r\n+\t * URL project overrides project name in the passed configuration if they are different.\r\n+\t * @param configuration should contain URL and backend\r\n+\t */\r\n+\t@PUT\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\tpublic Response createOrUpdateProject(@PathParam(\"projectName\") String projectName, RepositoryConfiguration configuration) {\r\n+\t\tconfiguration.setProjectName(projectName);\r\n+\t\tif (!validProjectConfiguration(configuration)) {\r\n+\t\t\treturn Response.status(Response.Status.BAD_REQUEST).build();\r\n+\t\t}\r\n+\t\ttry {\r\n+\t\t\tif (controller.getAllProjectNames().contains(projectName)) {\r\n+\t\t\t\tcontroller.updateRepository(configuration);\r\n+\t\t\t} else {\r\n+\t\t\t\tcontroller.addNewRepository(configuration);\r\n+\t\t\t}\r\n+\t\t} catch (Exception e) {\r\n+\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();\r\n+\t\t}\r\n+\t\treturn Response.status(Response.Status.OK).build();\r\n+\t}\r\n+\r\n+\tprivate boolean validProjectConfiguration(RepositoryConfiguration configuration) {\r\n+\t\treturn configuration.getProjectName() != null\r\n+\t\t\t\t&& !configuration.getProjectName().isEmpty()\r\n+\t\t\t\t&& configuration.getRemoteUri() != null\r\n+\t\t\t\t&& !configuration.getRemoteUri().isEmpty()\r\n+\t\t\t\t&& configuration.getBackend() != null;\r\n+\t}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800f3770a5d3c67d8cce18404dc06fc82e74e00a"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzgzMTkwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzozMjozNlrOF_erdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo1MTo1OFrOF_fUug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEwNzI1NQ==", "bodyText": "Maybe we can move this logic into the RepositoryController.\nThen we would have all the real decision logic inside the controller, and only the calls and error handling on the resource level.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r402107255", "createdAt": "2020-04-02T07:32:36Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.Consumes;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.controller.RepoManagementController;\r\n+import de.dlr.sc.virsat.server.repository.ServerRepository;\r\n+\r\n+@Path(ProjectManagementResource.PATH)\r\n+public class ProjectManagementResource {\r\n+\r\n+\tpublic static final String PATH = \"/project\";\r\n+\r\n+\tprivate RepoManagementController controller;\r\n+\r\n+\tpublic ProjectManagementResource() {\r\n+\t\tcontroller = new RepoManagementController();\r\n+\t}\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getAllProjects() {\r\n+\t\tList<String> projects = new ArrayList<>(controller.getAllProjectNames());\r\n+\t\treturn Response.status(Response.Status.OK).entity(projects).build();\r\n+\t}\r\n+\r\n+\t\r\n+\t/**\r\n+\t * Gets the configuration for the given project name.\r\n+\t * If project does not exist returns status NOT_FOUND\r\n+\t */\r\n+\t@GET\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getProject(@PathParam(\"projectName\") String projectName) {\r\n+\t\tServerRepository serverRepository = controller.getRepository(projectName);\r\n+\t\tif (serverRepository != null) {\r\n+\t\t\tRepositoryConfiguration configuration = serverRepository.getRepositoryConfiguration();\r\n+\t\t\treturn Response.status(Response.Status.OK).entity(configuration).build();\r\n+\t\t} else {\r\n+\t\t\treturn Response.status(Response.Status.NOT_FOUND).build();\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@DELETE\r\n+\t@Path(\"/{projectName}\")\r\n+\tpublic Response deleteProject(@PathParam(\"projectName\") String repoName) {\r\n+\t\tcontroller.deleteRepository(repoName);\r\n+\t\treturn Response.status(Response.Status.OK).build();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Creates or updates a project configuration on the project specified by the URL.\r\n+\t * URL project overrides project name in the passed configuration if they are different.\r\n+\t * @param configuration should contain URL and backend\r\n+\t */\r\n+\t@PUT\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\tpublic Response createOrUpdateProject(@PathParam(\"projectName\") String projectName, RepositoryConfiguration configuration) {\r\n+\t\tconfiguration.setProjectName(projectName);\r\n+\t\tif (!validProjectConfiguration(configuration)) {\r\n+\t\t\treturn Response.status(Response.Status.BAD_REQUEST).build();\r\n+\t\t}\r\n+\t\ttry {\r\n+\t\t\tif (controller.getAllProjectNames().contains(projectName)) {\r\n+\t\t\t\tcontroller.updateRepository(configuration);\r\n+\t\t\t} else {\r\n+\t\t\t\tcontroller.addNewRepository(configuration);\r\n+\t\t\t}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800f3770a5d3c67d8cce18404dc06fc82e74e00a"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNzgxOA==", "bodyText": "Sure, we can do it", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r402117818", "createdAt": "2020-04-02T07:51:58Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.Consumes;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.controller.RepoManagementController;\r\n+import de.dlr.sc.virsat.server.repository.ServerRepository;\r\n+\r\n+@Path(ProjectManagementResource.PATH)\r\n+public class ProjectManagementResource {\r\n+\r\n+\tpublic static final String PATH = \"/project\";\r\n+\r\n+\tprivate RepoManagementController controller;\r\n+\r\n+\tpublic ProjectManagementResource() {\r\n+\t\tcontroller = new RepoManagementController();\r\n+\t}\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getAllProjects() {\r\n+\t\tList<String> projects = new ArrayList<>(controller.getAllProjectNames());\r\n+\t\treturn Response.status(Response.Status.OK).entity(projects).build();\r\n+\t}\r\n+\r\n+\t\r\n+\t/**\r\n+\t * Gets the configuration for the given project name.\r\n+\t * If project does not exist returns status NOT_FOUND\r\n+\t */\r\n+\t@GET\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getProject(@PathParam(\"projectName\") String projectName) {\r\n+\t\tServerRepository serverRepository = controller.getRepository(projectName);\r\n+\t\tif (serverRepository != null) {\r\n+\t\t\tRepositoryConfiguration configuration = serverRepository.getRepositoryConfiguration();\r\n+\t\t\treturn Response.status(Response.Status.OK).entity(configuration).build();\r\n+\t\t} else {\r\n+\t\t\treturn Response.status(Response.Status.NOT_FOUND).build();\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@DELETE\r\n+\t@Path(\"/{projectName}\")\r\n+\tpublic Response deleteProject(@PathParam(\"projectName\") String repoName) {\r\n+\t\tcontroller.deleteRepository(repoName);\r\n+\t\treturn Response.status(Response.Status.OK).build();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Creates or updates a project configuration on the project specified by the URL.\r\n+\t * URL project overrides project name in the passed configuration if they are different.\r\n+\t * @param configuration should contain URL and backend\r\n+\t */\r\n+\t@PUT\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\tpublic Response createOrUpdateProject(@PathParam(\"projectName\") String projectName, RepositoryConfiguration configuration) {\r\n+\t\tconfiguration.setProjectName(projectName);\r\n+\t\tif (!validProjectConfiguration(configuration)) {\r\n+\t\t\treturn Response.status(Response.Status.BAD_REQUEST).build();\r\n+\t\t}\r\n+\t\ttry {\r\n+\t\t\tif (controller.getAllProjectNames().contains(projectName)) {\r\n+\t\t\t\tcontroller.updateRepository(configuration);\r\n+\t\t\t} else {\r\n+\t\t\t\tcontroller.addNewRepository(configuration);\r\n+\t\t\t}\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEwNzI1NQ=="}, "originalCommit": {"oid": "800f3770a5d3c67d8cce18404dc06fc82e74e00a"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDI2NTY5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/controller/RepoManagementController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToyOTo1OFrOF_i7iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo1ODo0NVrOF_j_1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3NjkwNQ==", "bodyText": "Any reason why we cant use the getAllProjectNames().contains(...) anymore instead of RepoRegistry.getInstance().getRepositories().containsKey(...) ?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r402176905", "createdAt": "2020-04-02T09:29:58Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/controller/RepoManagementController.java", "diffHunk": "@@ -46,4 +46,15 @@ public void updateRepository(RepositoryConfiguration repoConfiguration) {\n \tpublic Set<String> getAllProjectNames() {\r\n \t\treturn RepoRegistry.getInstance().getRepositories().keySet();\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * If a project with the name from configuration exists, it is updated, otherwise it is created.\r\n+\t */\r\n+\tpublic void addOrUpdateRepository(RepositoryConfiguration repoConfiguration) throws URISyntaxException {\r\n+\t\tif (RepoRegistry.getInstance().getRepositories().containsKey(repoConfiguration.getProjectName())) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f107e9f764219b71e38d59db66e660ea7461b9b9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5NDM4OQ==", "bodyText": "sure, we can", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r402194389", "createdAt": "2020-04-02T09:58:45Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/controller/RepoManagementController.java", "diffHunk": "@@ -46,4 +46,15 @@ public void updateRepository(RepositoryConfiguration repoConfiguration) {\n \tpublic Set<String> getAllProjectNames() {\r\n \t\treturn RepoRegistry.getInstance().getRepositories().keySet();\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * If a project with the name from configuration exists, it is updated, otherwise it is created.\r\n+\t */\r\n+\tpublic void addOrUpdateRepository(RepositoryConfiguration repoConfiguration) throws URISyntaxException {\r\n+\t\tif (RepoRegistry.getInstance().getRepositories().containsKey(repoConfiguration.getProjectName())) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3NjkwNQ=="}, "originalCommit": {"oid": "f107e9f764219b71e38d59db66e660ea7461b9b9"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 714, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}