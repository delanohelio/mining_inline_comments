{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNDAzNTEy", "number": 515, "title": "Export to Matlab", "bodyText": "Created an exporter to .mat files.\nIt can export an StructuralElementInstance with all CategoryAssignments and children or choosen CategoryAssignments.\nCloses #489", "createdAt": "2020-03-04T08:20:50Z", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/515", "merged": true, "mergeCommit": {"oid": "a5cf2a4d076f16e18439ce37d8e152b1546c6c69"}, "closed": true, "closedAt": "2020-03-06T08:44:37Z", "author": {"login": "ALEhmerDLR"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHesiWgH2gAyMzgzNDAzNTEyOjc3MDFiZGRkMWFmMjIwYmIxZjc2OTY3MDNiZGFlMDFhNDA1NjI1ZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcK7guUAFqTM3MDE0MDM0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7701bddd1af220bb1f7696703bdae01a405625fb", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/7701bddd1af220bb1f7696703bdae01a405625fb", "committedDate": "2020-02-24T14:49:21Z", "message": "created de.dlr.sc.virsat.external.lib.matlabfile - (Task #489)\n\ncreated de.dlr.sc.virsat.external.lib.matlabfile\nincluded in de.dlr.sc.virsat.external.lib.feature\nincluded in pom.xml\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fe64cbb3957d3d3fb34edc83c7598080aa4ccb3", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0fe64cbb3957d3d3fb34edc83c7598080aa4ccb3", "committedDate": "2020-02-25T07:13:50Z", "message": "Added Header in Activator - (Task #489)\n\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bf57f29e4166f56aa6b4c351c55db0ddf81470f", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/2bf57f29e4166f56aa6b4c351c55db0ddf81470f", "committedDate": "2020-02-25T15:04:57Z", "message": "First Try - (Task #489)\n\nImplemented first working exporter and test-case\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd15ac42f8994c5455301e53c700347e58ef0b54", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/dd15ac42f8994c5455301e53c700347e58ef0b54", "committedDate": "2020-02-26T07:26:44Z", "message": "Structure for one element - (Task #489)\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89bde71e1d2dd3ace50c2807896f6cd248513bb8", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/89bde71e1d2dd3ace50c2807896f6cd248513bb8", "committedDate": "2020-02-26T11:56:04Z", "message": "Test-cases - (Task #489)\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e45e252676ec01946dcdcc743822086f26f4f98a", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e45e252676ec01946dcdcc743822086f26f4f98a", "committedDate": "2020-02-27T15:25:00Z", "message": "Export per PropertyInstances - (Task #489)\n\nExporter export depending on Property-Instance different\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50119d2aa70cfb909defe9be9a2c7d6b1d72a41e", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/50119d2aa70cfb909defe9be9a2c7d6b1d72a41e", "committedDate": "2020-02-28T15:19:21Z", "message": "Can export Values and Units - (Task #489)\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9706adb67488f12df88c6169810750b8b3499d6c", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9706adb67488f12df88c6169810750b8b3499d6c", "committedDate": "2020-03-02T07:24:19Z", "message": "Fixed EReferenc and Array - (Task #489)\n\nPut your Message here.\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aca2d7e114579f1e47e5f46db59934fef1cf901d", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/aca2d7e114579f1e47e5f46db59934fef1cf901d", "committedDate": "2020-03-02T15:13:01Z", "message": "Added Testcases - (Task #489)\n\nAdded testcase for TestCategoryAllProperty() and\nTestCategoryComposition()\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57fa8f3ec8afde2072be3ab3ef2bcc12820a662b", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/57fa8f3ec8afde2072be3ab3ef2bcc12820a662b", "committedDate": "2020-03-03T13:26:46Z", "message": "Added all Tests for ContentOfProperty - (Task #489)\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a67c3833eaa9b0e924a94fb05ff3d5d73b8a198", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/7a67c3833eaa9b0e924a94fb05ff3d5d73b8a198", "committedDate": "2020-03-03T16:45:45Z", "message": "Export Children of Sei - (Task #489)\n\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56eed04f4a4a44ee59b791d9b5da1adbb3142f5d", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/56eed04f4a4a44ee59b791d9b5da1adbb3142f5d", "committedDate": "2020-03-04T08:08:12Z", "message": "Added Test for Sei Children - (Task #489)\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a7b97039b4b6ce439994bb868cfe08a423b3c89", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9a7b97039b4b6ce439994bb868cfe08a423b3c89", "committedDate": "2020-03-04T08:10:34Z", "message": "Deleted not needed import - (Task #489)\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTIyMDk4", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/515#pullrequestreview-369522098", "createdAt": "2020-03-05T12:19:01Z", "commit": {"oid": "9a7b97039b4b6ce439994bb868cfe08a423b3c89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3f376d339992639735afb696bb4d5a63b608e3a", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a3f376d339992639735afb696bb4d5a63b608e3a", "committedDate": "2020-03-05T15:00:36Z", "message": "Merge branch 'development' into feature/task_489-Include_Matlab_libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "913055f810974bd46c04a114149351dc5ee7e626", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/913055f810974bd46c04a114149351dc5ee7e626", "committedDate": "2020-03-05T15:21:34Z", "message": "Changed constructor for BeanProperties - (Task #489)\n\nChanged constructor for\nBeanPropertyBoolean\nBeanPropertyString\nBeanPropertyEReference\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Nzg0MzI0", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/515#pullrequestreview-369784324", "createdAt": "2020-03-05T17:50:12Z", "commit": {"oid": "913055f810974bd46c04a114149351dc5ee7e626"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo1MDoxMlrOFydrOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo1NDowNlrOFydzfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1OTMyMA==", "bodyText": "Maybe something like MatExporter to further indicate the purpose of the class through the name.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/515#discussion_r388459320", "createdAt": "2020-03-05T17:50:12Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/mat/Exporter.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import org.eclipse.emf.common.util.EList;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.UnitValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.util.PropertyinstancesSwitch;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import us.hebi.matlab.mat.format.Mat5;\r\n+import us.hebi.matlab.mat.types.Array;\r\n+import us.hebi.matlab.mat.types.Cell;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+\r\n+/**\r\n+ * Class for exporting data to .mat\r\n+ */\r\n+public class Exporter {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913055f810974bd46c04a114149351dc5ee7e626"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1OTk5Ng==", "bodyText": "I think we should consider making a class holding the keys like \"type\" or \"uuid\" as final static strings.\nThis would make sure that is easy to change them (for example if we want to change lower case to upper case or something like that) and it would probably usueful later in the importer since we will need the keys again there.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/515#discussion_r388459996", "createdAt": "2020-03-05T17:51:24Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/mat/Exporter.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import org.eclipse.emf.common.util.EList;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.UnitValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.util.PropertyinstancesSwitch;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import us.hebi.matlab.mat.format.Mat5;\r\n+import us.hebi.matlab.mat.types.Array;\r\n+import us.hebi.matlab.mat.types.Cell;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+\r\n+/**\r\n+ * Class for exporting data to .mat\r\n+ */\r\n+public class Exporter {\r\n+\r\n+\t/**\r\n+\t * creates a new .mat with everything inside the given sei\r\n+\t * @param seiRoot sei to export\r\n+\t */\r\n+\tpublic MatFile exportSei(StructuralElementInstance seiRoot) {\r\n+\t\tMatFile matfile = Mat5.newMatFile();\t\t\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tstruct.set(\"type\", Mat5.newString(seiRoot.getType().getName()))\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913055f810974bd46c04a114149351dc5ee7e626"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MDQwNA==", "bodyText": "Out of place comment.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/515#discussion_r388460404", "createdAt": "2020-03-05T17:52:09Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/mat/Exporter.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import org.eclipse.emf.common.util.EList;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.UnitValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.util.PropertyinstancesSwitch;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import us.hebi.matlab.mat.format.Mat5;\r\n+import us.hebi.matlab.mat.types.Array;\r\n+import us.hebi.matlab.mat.types.Cell;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+\r\n+/**\r\n+ * Class for exporting data to .mat\r\n+ */\r\n+public class Exporter {\r\n+\r\n+\t/**\r\n+\t * creates a new .mat with everything inside the given sei\r\n+\t * @param seiRoot sei to export\r\n+\t */\r\n+\tpublic MatFile exportSei(StructuralElementInstance seiRoot) {\r\n+\t\tMatFile matfile = Mat5.newMatFile();\t\t\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tstruct.set(\"type\", Mat5.newString(seiRoot.getType().getName()))\r\n+\t\t\t.set(\"uuid\", Mat5.newString(seiRoot.getUuid().toString()));\r\n+\t\tif (seiRoot.getChildren().size() > 0) {\r\n+\t\t\tStruct children = Mat5.newStruct();\r\n+\t\t\tfor (StructuralElementInstance sei : seiRoot.getChildren()) {\r\n+\t\t\t\tMatFile child = exportSei(sei);\r\n+\t\t\t\tchildren.set(sei.getName(), child.getArray(sei.getName()));\r\n+\t\t\t}\r\n+\t\t\tstruct.set(\"children\", children);\r\n+\t\t}\r\n+\t\t\r\n+\t\tfor (CategoryAssignment ca : seiRoot.getCategoryAssignments()) {\r\n+\t\t\tstruct.set(ca.getName(), exportCatAs(ca));\r\n+\t\t}\r\n+\r\n+\t\tmatfile.addArray(seiRoot.getName(), struct);\r\n+\t\treturn matfile;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat with everything inside the selected CategoryAssinments\r\n+\t * @param cas list of CategoryAssinments\r\n+\t */\r\n+\tpublic MatFile exportCas(EList<CategoryAssignment> cas) {\r\n+\t\tMatFile matfile = Mat5.newMatFile();\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tfor (CategoryAssignment ca : cas) {\r\n+\t\t\tstruct.set(ca.getName(), exportCatAs(ca));\r\n+\t\t}\r\n+\t\tmatfile.addArray(\"inputs\", struct);\r\n+\t\treturn matfile;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all properties of an CategoryAssinment\r\n+\t * @param ca CategoryAssignment\r\n+\t */\r\n+\tprivate Struct exportCatAs(CategoryAssignment ca) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tEList<APropertyInstance> propertyInstances = ca.getPropertyInstances();\r\n+\r\n+\t\tfor (APropertyInstance pi : propertyInstances) {\r\n+\t\t\tArray propertyArray = getRightProperty(pi);\r\n+\t\t\tstruct.set(pi.getType().getName(), propertyArray);\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * hands back right property with all values\r\n+\t * @param element APropertyInstance\r\n+\t */\r\n+\tprivate Array getRightProperty(APropertyInstance element) {\r\n+\t\tArray propertyArray = new PropertyinstancesSwitch<Array>() {\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseUnitValuePropertyInstance(UnitValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseResourcePropertyInstance(ResourcePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseEnumUnitPropertyInstance(EnumUnitPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseValuePropertyInstance(ValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseReferencePropertyInstance(ReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseEReferencePropertyInstance(EReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseComposedPropertyInstance(ComposedPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseArrayInstance(ArrayInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t}.doSwitch(element);\r\n+\t\treturn propertyArray;\r\n+\t}\r\n+\r\n+\t//create a struct for the fitting PropertyInstance\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913055f810974bd46c04a114149351dc5ee7e626"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MDY0Nw==", "bodyText": "Unneeded whitespacing.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/515#discussion_r388460647", "createdAt": "2020-03-05T17:52:37Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/mat/Exporter.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import org.eclipse.emf.common.util.EList;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.UnitValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.util.PropertyinstancesSwitch;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import us.hebi.matlab.mat.format.Mat5;\r\n+import us.hebi.matlab.mat.types.Array;\r\n+import us.hebi.matlab.mat.types.Cell;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+\r\n+/**\r\n+ * Class for exporting data to .mat\r\n+ */\r\n+public class Exporter {\r\n+\r\n+\t/**\r\n+\t * creates a new .mat with everything inside the given sei\r\n+\t * @param seiRoot sei to export\r\n+\t */\r\n+\tpublic MatFile exportSei(StructuralElementInstance seiRoot) {\r\n+\t\tMatFile matfile = Mat5.newMatFile();\t\t\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tstruct.set(\"type\", Mat5.newString(seiRoot.getType().getName()))\r\n+\t\t\t.set(\"uuid\", Mat5.newString(seiRoot.getUuid().toString()));\r\n+\t\tif (seiRoot.getChildren().size() > 0) {\r\n+\t\t\tStruct children = Mat5.newStruct();\r\n+\t\t\tfor (StructuralElementInstance sei : seiRoot.getChildren()) {\r\n+\t\t\t\tMatFile child = exportSei(sei);\r\n+\t\t\t\tchildren.set(sei.getName(), child.getArray(sei.getName()));\r\n+\t\t\t}\r\n+\t\t\tstruct.set(\"children\", children);\r\n+\t\t}\r\n+\t\t\r\n+\t\tfor (CategoryAssignment ca : seiRoot.getCategoryAssignments()) {\r\n+\t\t\tstruct.set(ca.getName(), exportCatAs(ca));\r\n+\t\t}\r\n+\r\n+\t\tmatfile.addArray(seiRoot.getName(), struct);\r\n+\t\treturn matfile;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat with everything inside the selected CategoryAssinments\r\n+\t * @param cas list of CategoryAssinments\r\n+\t */\r\n+\tpublic MatFile exportCas(EList<CategoryAssignment> cas) {\r\n+\t\tMatFile matfile = Mat5.newMatFile();\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tfor (CategoryAssignment ca : cas) {\r\n+\t\t\tstruct.set(ca.getName(), exportCatAs(ca));\r\n+\t\t}\r\n+\t\tmatfile.addArray(\"inputs\", struct);\r\n+\t\treturn matfile;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all properties of an CategoryAssinment\r\n+\t * @param ca CategoryAssignment\r\n+\t */\r\n+\tprivate Struct exportCatAs(CategoryAssignment ca) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tEList<APropertyInstance> propertyInstances = ca.getPropertyInstances();\r\n+\r\n+\t\tfor (APropertyInstance pi : propertyInstances) {\r\n+\t\t\tArray propertyArray = getRightProperty(pi);\r\n+\t\t\tstruct.set(pi.getType().getName(), propertyArray);\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * hands back right property with all values\r\n+\t * @param element APropertyInstance\r\n+\t */\r\n+\tprivate Array getRightProperty(APropertyInstance element) {\r\n+\t\tArray propertyArray = new PropertyinstancesSwitch<Array>() {\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseUnitValuePropertyInstance(UnitValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseResourcePropertyInstance(ResourcePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseEnumUnitPropertyInstance(EnumUnitPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseValuePropertyInstance(ValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseReferencePropertyInstance(ReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseEReferencePropertyInstance(EReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseComposedPropertyInstance(ComposedPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseArrayInstance(ArrayInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t}.doSwitch(element);\r\n+\t\treturn propertyArray;\r\n+\t}\r\n+\r\n+\t//create a struct for the fitting PropertyInstance\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about UnitValuePropertyInstance\r\n+\t * only unit and value are saved\r\n+\t * @param element UnitValuePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(UnitValuePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\r\n+\t\tif (element.getType() instanceof FloatProperty) {\r\n+\t\t\tBeanPropertyFloat bpf = new BeanPropertyFloat(element);\r\n+\t\t\tstruct.set(\"unit\", Mat5.newString(bpf.getUnit()));\r\n+\t\t\tstruct.set(\"value\", (bpf.getValue() == Double.NaN) ? Mat5.newString(\"\") : Mat5.newScalar(bpf.getValue()));\r\n+\t\t} else if (element.getType() instanceof IntProperty) {\r\n+\t\t\tBeanPropertyInt bpi = new BeanPropertyInt(element);\r\n+\t\t\tstruct.set(\"unit\", Mat5.newString(bpi.getUnit()));\r\n+\t\t\tstruct.set(\"value\", (!bpi.isSet()) ? Mat5.newString(\"\") : Mat5.newScalar(bpi.getValue()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ValuePropertyInstance\r\n+\t * only Value is saved\r\n+\t * @param element ValuePropertyInstance\r\n+\t */\r\n+\tprivate Struct contentOfProperty(ValuePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof BooleanProperty) {\r\n+\t\t\tBeanPropertyBoolean bpb = new BeanPropertyBoolean(element);\r\n+\t\t\tstruct.set(\"value\", (!bpb.isSet()) ? Mat5.newString(\"\") : Mat5.newLogicalScalar(bpb.getValue()));\r\n+\t\t} else if (element.getType() instanceof StringProperty) {\r\n+\t\t\tBeanPropertyString bps = new BeanPropertyString(element);\r\n+\t\t\tstruct.set(\"value\", (!bps.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bps.getValue()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about EReferencePropertyInstance\r\n+\t * only uuid, reference and reference-class are saved\r\n+\t * @param element EReferencePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(EReferencePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof EReferenceProperty) {\r\n+\t\t\t\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913055f810974bd46c04a114149351dc5ee7e626"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MDkxMA==", "bodyText": "We can move this before the if check and then check if (referencedTypeInstance != null)", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/515#discussion_r388460910", "createdAt": "2020-03-05T17:53:09Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/mat/Exporter.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import org.eclipse.emf.common.util.EList;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.UnitValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.util.PropertyinstancesSwitch;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import us.hebi.matlab.mat.format.Mat5;\r\n+import us.hebi.matlab.mat.types.Array;\r\n+import us.hebi.matlab.mat.types.Cell;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+\r\n+/**\r\n+ * Class for exporting data to .mat\r\n+ */\r\n+public class Exporter {\r\n+\r\n+\t/**\r\n+\t * creates a new .mat with everything inside the given sei\r\n+\t * @param seiRoot sei to export\r\n+\t */\r\n+\tpublic MatFile exportSei(StructuralElementInstance seiRoot) {\r\n+\t\tMatFile matfile = Mat5.newMatFile();\t\t\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tstruct.set(\"type\", Mat5.newString(seiRoot.getType().getName()))\r\n+\t\t\t.set(\"uuid\", Mat5.newString(seiRoot.getUuid().toString()));\r\n+\t\tif (seiRoot.getChildren().size() > 0) {\r\n+\t\t\tStruct children = Mat5.newStruct();\r\n+\t\t\tfor (StructuralElementInstance sei : seiRoot.getChildren()) {\r\n+\t\t\t\tMatFile child = exportSei(sei);\r\n+\t\t\t\tchildren.set(sei.getName(), child.getArray(sei.getName()));\r\n+\t\t\t}\r\n+\t\t\tstruct.set(\"children\", children);\r\n+\t\t}\r\n+\t\t\r\n+\t\tfor (CategoryAssignment ca : seiRoot.getCategoryAssignments()) {\r\n+\t\t\tstruct.set(ca.getName(), exportCatAs(ca));\r\n+\t\t}\r\n+\r\n+\t\tmatfile.addArray(seiRoot.getName(), struct);\r\n+\t\treturn matfile;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat with everything inside the selected CategoryAssinments\r\n+\t * @param cas list of CategoryAssinments\r\n+\t */\r\n+\tpublic MatFile exportCas(EList<CategoryAssignment> cas) {\r\n+\t\tMatFile matfile = Mat5.newMatFile();\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tfor (CategoryAssignment ca : cas) {\r\n+\t\t\tstruct.set(ca.getName(), exportCatAs(ca));\r\n+\t\t}\r\n+\t\tmatfile.addArray(\"inputs\", struct);\r\n+\t\treturn matfile;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all properties of an CategoryAssinment\r\n+\t * @param ca CategoryAssignment\r\n+\t */\r\n+\tprivate Struct exportCatAs(CategoryAssignment ca) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tEList<APropertyInstance> propertyInstances = ca.getPropertyInstances();\r\n+\r\n+\t\tfor (APropertyInstance pi : propertyInstances) {\r\n+\t\t\tArray propertyArray = getRightProperty(pi);\r\n+\t\t\tstruct.set(pi.getType().getName(), propertyArray);\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * hands back right property with all values\r\n+\t * @param element APropertyInstance\r\n+\t */\r\n+\tprivate Array getRightProperty(APropertyInstance element) {\r\n+\t\tArray propertyArray = new PropertyinstancesSwitch<Array>() {\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseUnitValuePropertyInstance(UnitValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseResourcePropertyInstance(ResourcePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseEnumUnitPropertyInstance(EnumUnitPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseValuePropertyInstance(ValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseReferencePropertyInstance(ReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseEReferencePropertyInstance(EReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseComposedPropertyInstance(ComposedPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseArrayInstance(ArrayInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t}.doSwitch(element);\r\n+\t\treturn propertyArray;\r\n+\t}\r\n+\r\n+\t//create a struct for the fitting PropertyInstance\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about UnitValuePropertyInstance\r\n+\t * only unit and value are saved\r\n+\t * @param element UnitValuePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(UnitValuePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\r\n+\t\tif (element.getType() instanceof FloatProperty) {\r\n+\t\t\tBeanPropertyFloat bpf = new BeanPropertyFloat(element);\r\n+\t\t\tstruct.set(\"unit\", Mat5.newString(bpf.getUnit()));\r\n+\t\t\tstruct.set(\"value\", (bpf.getValue() == Double.NaN) ? Mat5.newString(\"\") : Mat5.newScalar(bpf.getValue()));\r\n+\t\t} else if (element.getType() instanceof IntProperty) {\r\n+\t\t\tBeanPropertyInt bpi = new BeanPropertyInt(element);\r\n+\t\t\tstruct.set(\"unit\", Mat5.newString(bpi.getUnit()));\r\n+\t\t\tstruct.set(\"value\", (!bpi.isSet()) ? Mat5.newString(\"\") : Mat5.newScalar(bpi.getValue()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ValuePropertyInstance\r\n+\t * only Value is saved\r\n+\t * @param element ValuePropertyInstance\r\n+\t */\r\n+\tprivate Struct contentOfProperty(ValuePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof BooleanProperty) {\r\n+\t\t\tBeanPropertyBoolean bpb = new BeanPropertyBoolean(element);\r\n+\t\t\tstruct.set(\"value\", (!bpb.isSet()) ? Mat5.newString(\"\") : Mat5.newLogicalScalar(bpb.getValue()));\r\n+\t\t} else if (element.getType() instanceof StringProperty) {\r\n+\t\t\tBeanPropertyString bps = new BeanPropertyString(element);\r\n+\t\t\tstruct.set(\"value\", (!bps.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bps.getValue()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about EReferencePropertyInstance\r\n+\t * only uuid, reference and reference-class are saved\r\n+\t * @param element EReferencePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(EReferencePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof EReferenceProperty) {\r\n+\t\t\t\r\n+\t\t\tBeanPropertyEReference<EReferenceProperty> bpe = new BeanPropertyEReference<EReferenceProperty>(element);\r\n+\t\t\t\r\n+\t\t\tstruct.set(\"reference\", (!bpe.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bpe.getValue().toString()));\r\n+\t\t\tstruct.set(\"reference-class\", (!bpe.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bpe.getValue().getClass().getName()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ReferencePropertyInstance\r\n+\t * only uuid and fullQualifiedInstanceName are saved\r\n+\t * @param element ReferencePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(ReferencePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof ReferenceProperty) {\r\n+\t\t\tif (element.getReference() != null) {\r\n+\t\t\t\tATypeInstance referencedTypeInstance = element.getReference();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913055f810974bd46c04a114149351dc5ee7e626"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MTQzNw==", "bodyText": "Should describe the purpose of this function a bit more. I think it was because matlab always generates a \"\" around the values right?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/515#discussion_r388461437", "createdAt": "2020-03-05T17:54:06Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/mat/Exporter.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import org.eclipse.emf.common.util.EList;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.UnitValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.util.PropertyinstancesSwitch;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import us.hebi.matlab.mat.format.Mat5;\r\n+import us.hebi.matlab.mat.types.Array;\r\n+import us.hebi.matlab.mat.types.Cell;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+\r\n+/**\r\n+ * Class for exporting data to .mat\r\n+ */\r\n+public class Exporter {\r\n+\r\n+\t/**\r\n+\t * creates a new .mat with everything inside the given sei\r\n+\t * @param seiRoot sei to export\r\n+\t */\r\n+\tpublic MatFile exportSei(StructuralElementInstance seiRoot) {\r\n+\t\tMatFile matfile = Mat5.newMatFile();\t\t\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tstruct.set(\"type\", Mat5.newString(seiRoot.getType().getName()))\r\n+\t\t\t.set(\"uuid\", Mat5.newString(seiRoot.getUuid().toString()));\r\n+\t\tif (seiRoot.getChildren().size() > 0) {\r\n+\t\t\tStruct children = Mat5.newStruct();\r\n+\t\t\tfor (StructuralElementInstance sei : seiRoot.getChildren()) {\r\n+\t\t\t\tMatFile child = exportSei(sei);\r\n+\t\t\t\tchildren.set(sei.getName(), child.getArray(sei.getName()));\r\n+\t\t\t}\r\n+\t\t\tstruct.set(\"children\", children);\r\n+\t\t}\r\n+\t\t\r\n+\t\tfor (CategoryAssignment ca : seiRoot.getCategoryAssignments()) {\r\n+\t\t\tstruct.set(ca.getName(), exportCatAs(ca));\r\n+\t\t}\r\n+\r\n+\t\tmatfile.addArray(seiRoot.getName(), struct);\r\n+\t\treturn matfile;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat with everything inside the selected CategoryAssinments\r\n+\t * @param cas list of CategoryAssinments\r\n+\t */\r\n+\tpublic MatFile exportCas(EList<CategoryAssignment> cas) {\r\n+\t\tMatFile matfile = Mat5.newMatFile();\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tfor (CategoryAssignment ca : cas) {\r\n+\t\t\tstruct.set(ca.getName(), exportCatAs(ca));\r\n+\t\t}\r\n+\t\tmatfile.addArray(\"inputs\", struct);\r\n+\t\treturn matfile;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all properties of an CategoryAssinment\r\n+\t * @param ca CategoryAssignment\r\n+\t */\r\n+\tprivate Struct exportCatAs(CategoryAssignment ca) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tEList<APropertyInstance> propertyInstances = ca.getPropertyInstances();\r\n+\r\n+\t\tfor (APropertyInstance pi : propertyInstances) {\r\n+\t\t\tArray propertyArray = getRightProperty(pi);\r\n+\t\t\tstruct.set(pi.getType().getName(), propertyArray);\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * hands back right property with all values\r\n+\t * @param element APropertyInstance\r\n+\t */\r\n+\tprivate Array getRightProperty(APropertyInstance element) {\r\n+\t\tArray propertyArray = new PropertyinstancesSwitch<Array>() {\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseUnitValuePropertyInstance(UnitValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseResourcePropertyInstance(ResourcePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseEnumUnitPropertyInstance(EnumUnitPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseValuePropertyInstance(ValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseReferencePropertyInstance(ReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseEReferencePropertyInstance(EReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseComposedPropertyInstance(ComposedPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseArrayInstance(ArrayInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t}.doSwitch(element);\r\n+\t\treturn propertyArray;\r\n+\t}\r\n+\r\n+\t//create a struct for the fitting PropertyInstance\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about UnitValuePropertyInstance\r\n+\t * only unit and value are saved\r\n+\t * @param element UnitValuePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(UnitValuePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\r\n+\t\tif (element.getType() instanceof FloatProperty) {\r\n+\t\t\tBeanPropertyFloat bpf = new BeanPropertyFloat(element);\r\n+\t\t\tstruct.set(\"unit\", Mat5.newString(bpf.getUnit()));\r\n+\t\t\tstruct.set(\"value\", (bpf.getValue() == Double.NaN) ? Mat5.newString(\"\") : Mat5.newScalar(bpf.getValue()));\r\n+\t\t} else if (element.getType() instanceof IntProperty) {\r\n+\t\t\tBeanPropertyInt bpi = new BeanPropertyInt(element);\r\n+\t\t\tstruct.set(\"unit\", Mat5.newString(bpi.getUnit()));\r\n+\t\t\tstruct.set(\"value\", (!bpi.isSet()) ? Mat5.newString(\"\") : Mat5.newScalar(bpi.getValue()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ValuePropertyInstance\r\n+\t * only Value is saved\r\n+\t * @param element ValuePropertyInstance\r\n+\t */\r\n+\tprivate Struct contentOfProperty(ValuePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof BooleanProperty) {\r\n+\t\t\tBeanPropertyBoolean bpb = new BeanPropertyBoolean(element);\r\n+\t\t\tstruct.set(\"value\", (!bpb.isSet()) ? Mat5.newString(\"\") : Mat5.newLogicalScalar(bpb.getValue()));\r\n+\t\t} else if (element.getType() instanceof StringProperty) {\r\n+\t\t\tBeanPropertyString bps = new BeanPropertyString(element);\r\n+\t\t\tstruct.set(\"value\", (!bps.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bps.getValue()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about EReferencePropertyInstance\r\n+\t * only uuid, reference and reference-class are saved\r\n+\t * @param element EReferencePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(EReferencePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof EReferenceProperty) {\r\n+\t\t\t\r\n+\t\t\tBeanPropertyEReference<EReferenceProperty> bpe = new BeanPropertyEReference<EReferenceProperty>(element);\r\n+\t\t\t\r\n+\t\t\tstruct.set(\"reference\", (!bpe.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bpe.getValue().toString()));\r\n+\t\t\tstruct.set(\"reference-class\", (!bpe.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bpe.getValue().getClass().getName()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ReferencePropertyInstance\r\n+\t * only uuid and fullQualifiedInstanceName are saved\r\n+\t * @param element ReferencePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(ReferencePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof ReferenceProperty) {\r\n+\t\t\tif (element.getReference() != null) {\r\n+\t\t\t\tATypeInstance referencedTypeInstance = element.getReference();\r\n+\t\t\t\tstruct.set(\"uuid\", Mat5.newString(referencedTypeInstance.getUuid().toString()));\r\n+\t\t\t\tstruct.set(\"fullQualifiedInstanceName\", Mat5.newString(referencedTypeInstance.getFullQualifiedInstanceName()));\r\n+\t\t\t} else {\r\n+\t\t\t\tstruct.set(\"uuid\", Mat5.newString(\"\"));\r\n+\t\t\t\tstruct.set(\"fullQualifiedInstanceName\", Mat5.newString(\"\"));\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ResourcePropertyInstance\r\n+\t * only uri is saved\r\n+\t * @param element ResourcePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(ResourcePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof ResourceProperty) {\r\n+\t\t\tBeanPropertyResource bpr = new BeanPropertyResource(element);\r\n+\t\t\tstruct.set(\"uri\", (!bpr.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bpr.getValue().toString()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about EnumUnitPropertyInstance\r\n+\t * only unit,value and name are saved\r\n+\t * @param element EnumUnitPropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(EnumUnitPropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof EnumProperty) {\r\n+\t\t\tBeanPropertyEnum bpe = new BeanPropertyEnum(element);\r\n+\t\t\tstruct.set(\"unit\", Mat5.newString(bpe.getUnit()));\r\n+\t\t\tstruct.set(\"value\", (!bpe.isSet()) ? Mat5.newString(\"\") : Mat5.newScalar(bpe.getEnumValue()));\r\n+\t\t\tstruct.set(\"name\", (!bpe.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bpe.getValue()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ArrayInstance\r\n+\t * @param element ArrayInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(ArrayInstance element) {\r\n+\t\tEList<APropertyInstance> propertyInstances = element.getArrayInstances();\r\n+\t\tCell cell = Mat5.newCell(propertyInstances.size(), 1);\r\n+\t\tfor (int i = 0; i < propertyInstances.size(); i++) {\r\n+\t\t\tAPropertyInstance instanceElement = propertyInstances.get(i);\r\n+\t\t\tArray propertyArray = getRightProperty(instanceElement);\r\n+\t\t\tcell.set(i, propertyArray);\r\n+\t\t}\r\n+\t\treturn cell;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ComposedPropertyInstance\r\n+\t * @param element ComposedPropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(ComposedPropertyInstance element) {\r\n+\t\treturn exportCatAs(element.getTypeInstance());\r\n+\t}\r\n+\r\n+\t//Delete First and Last Character\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913055f810974bd46c04a114149351dc5ee7e626"}, "originalPosition": 286}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "776e6620f6ac106f423bf08091059241d209d717", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/776e6620f6ac106f423bf08091059241d209d717", "committedDate": "2020-03-06T06:58:04Z", "message": "Requested Changes - (Task #489)\n\nAdded description to shorter()\nDeleted whitespace\nDeleted comment\nChanged name to MatExporter and MatExporterTest\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b02cd22b50ec297933c1bd59e34e857f047eab68", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b02cd22b50ec297933c1bd59e34e857f047eab68", "committedDate": "2020-03-06T06:58:57Z", "message": "Missed Changed File- (Task #489)\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aef6d2801c60be1147c54867d1c1c3d5d5c94369", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/aef6d2801c60be1147c54867d1c1c3d5d5c94369", "committedDate": "2020-03-06T07:17:50Z", "message": "Requested Changes - (Task #489)\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTM3NDg0", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/515#pullrequestreview-370137484", "createdAt": "2020-03-06T07:58:30Z", "commit": {"oid": "aef6d2801c60be1147c54867d1c1c3d5d5c94369"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzo1ODozMFrOFyv6Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzo1ODozMFrOFyv6Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc1ODAzMA==", "bodyText": "Method comments are usually done with /** **/\nAlso could use a @param str in the comment.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/515#discussion_r388758030", "createdAt": "2020-03-06T07:58:30Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/mat/MatExporter.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.mat;\r\n+\r\n+import org.eclipse.emf.common.util.EList;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyBoolean;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEnum;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyFloat;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyInt;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyResource;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.BooleanProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EnumProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.FloatProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.IntProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.ResourceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.StringProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ComposedPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EnumUnitPropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ResourcePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.UnitValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ValuePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.util.PropertyinstancesSwitch;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import us.hebi.matlab.mat.format.Mat5;\r\n+import us.hebi.matlab.mat.types.Array;\r\n+import us.hebi.matlab.mat.types.Cell;\r\n+import us.hebi.matlab.mat.types.MatFile;\r\n+import us.hebi.matlab.mat.types.Struct;\r\n+\r\n+/**\r\n+ * Class for exporting data to .mat\r\n+ */\r\n+public class MatExporter {\r\n+\r\n+\t/**\r\n+\t * creates a new .mat with everything inside the given sei\r\n+\t * @param seiRoot sei to export\r\n+\t */\r\n+\tpublic MatFile exportSei(StructuralElementInstance seiRoot) {\r\n+\t\tMatFile matfile = Mat5.newMatFile();\t\t\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tstruct.set(MatHelper.TYPE, Mat5.newString(seiRoot.getType().getName()))\r\n+\t\t\t.set(MatHelper.UUID, Mat5.newString(seiRoot.getUuid().toString()));\r\n+\t\tif (seiRoot.getChildren().size() > 0) {\r\n+\t\t\tStruct children = Mat5.newStruct();\r\n+\t\t\tfor (StructuralElementInstance sei : seiRoot.getChildren()) {\r\n+\t\t\t\tMatFile child = exportSei(sei);\r\n+\t\t\t\tchildren.set(sei.getName(), child.getArray(sei.getName()));\r\n+\t\t\t}\r\n+\t\t\tstruct.set(MatHelper.CHILDREN, children);\r\n+\t\t}\r\n+\t\t\r\n+\t\tfor (CategoryAssignment ca : seiRoot.getCategoryAssignments()) {\r\n+\t\t\tstruct.set(ca.getName(), exportCatAs(ca));\r\n+\t\t}\r\n+\r\n+\t\tmatfile.addArray(seiRoot.getName(), struct);\r\n+\t\treturn matfile;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat with everything inside the selected CategoryAssinments\r\n+\t * @param cas list of CategoryAssinments\r\n+\t */\r\n+\tpublic MatFile exportCas(EList<CategoryAssignment> cas) {\r\n+\t\tMatFile matfile = Mat5.newMatFile();\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tfor (CategoryAssignment ca : cas) {\r\n+\t\t\tstruct.set(ca.getName(), exportCatAs(ca));\r\n+\t\t}\r\n+\t\tmatfile.addArray(MatHelper.INPUTS, struct);\r\n+\t\treturn matfile;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all properties of an CategoryAssinment\r\n+\t * @param ca CategoryAssignment\r\n+\t */\r\n+\tprivate Struct exportCatAs(CategoryAssignment ca) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tEList<APropertyInstance> propertyInstances = ca.getPropertyInstances();\r\n+\r\n+\t\tfor (APropertyInstance pi : propertyInstances) {\r\n+\t\t\tArray propertyArray = getRightProperty(pi);\r\n+\t\t\tstruct.set(pi.getType().getName(), propertyArray);\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * hands back right property with all values\r\n+\t * @param element APropertyInstance\r\n+\t */\r\n+\tprivate Array getRightProperty(APropertyInstance element) {\r\n+\t\tArray propertyArray = new PropertyinstancesSwitch<Array>() {\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseUnitValuePropertyInstance(UnitValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseResourcePropertyInstance(ResourcePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseEnumUnitPropertyInstance(EnumUnitPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseValuePropertyInstance(ValuePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseReferencePropertyInstance(ReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseEReferencePropertyInstance(EReferencePropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseComposedPropertyInstance(ComposedPropertyInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t\t@Override\r\n+\t\t\tpublic Array caseArrayInstance(ArrayInstance object) {\r\n+\t\t\t\treturn contentOfProperty(object);\r\n+\t\t\t}\r\n+\r\n+\t\t}.doSwitch(element);\r\n+\t\treturn propertyArray;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about UnitValuePropertyInstance\r\n+\t * only unit and value are saved\r\n+\t * @param element UnitValuePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(UnitValuePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\r\n+\t\tif (element.getType() instanceof FloatProperty) {\r\n+\t\t\tBeanPropertyFloat bpf = new BeanPropertyFloat(element);\r\n+\t\t\tstruct.set(MatHelper.UNIT, Mat5.newString(bpf.getUnit()));\r\n+\t\t\tstruct.set(MatHelper.VALUE, (bpf.getValue() == Double.NaN) ? Mat5.newString(\"\") : Mat5.newScalar(bpf.getValue()));\r\n+\t\t} else if (element.getType() instanceof IntProperty) {\r\n+\t\t\tBeanPropertyInt bpi = new BeanPropertyInt(element);\r\n+\t\t\tstruct.set(MatHelper.UNIT, Mat5.newString(bpi.getUnit()));\r\n+\t\t\tstruct.set(MatHelper.VALUE, (!bpi.isSet()) ? Mat5.newString(\"\") : Mat5.newScalar(bpi.getValue()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ValuePropertyInstance\r\n+\t * only Value is saved\r\n+\t * @param element ValuePropertyInstance\r\n+\t */\r\n+\tprivate Struct contentOfProperty(ValuePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof BooleanProperty) {\r\n+\t\t\tBeanPropertyBoolean bpb = new BeanPropertyBoolean(element);\r\n+\t\t\tstruct.set(MatHelper.VALUE, (!bpb.isSet()) ? Mat5.newString(\"\") : Mat5.newLogicalScalar(bpb.getValue()));\r\n+\t\t} else if (element.getType() instanceof StringProperty) {\r\n+\t\t\tBeanPropertyString bps = new BeanPropertyString(element);\r\n+\t\t\tstruct.set(MatHelper.VALUE, (!bps.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bps.getValue()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about EReferencePropertyInstance\r\n+\t * only uuid, reference and reference-class are saved\r\n+\t * @param element EReferencePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(EReferencePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof EReferenceProperty) {\r\n+\t\t\tBeanPropertyEReference<EReferenceProperty> bpe = new BeanPropertyEReference<EReferenceProperty>(element);\r\n+\t\t\tstruct.set(MatHelper.REF, (!bpe.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bpe.getValue().toString()));\r\n+\t\t\tstruct.set(MatHelper.REFCLASS, (!bpe.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bpe.getValue().getClass().getName()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ReferencePropertyInstance\r\n+\t * only uuid and fullQualifiedInstanceName are saved\r\n+\t * @param element ReferencePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(ReferencePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof ReferenceProperty) {\r\n+\t\t\tATypeInstance referencedTypeInstance = element.getReference();\r\n+\t\t\tif (element.getReference() != null) {\r\n+\t\t\t\tstruct.set(MatHelper.UUID, Mat5.newString(referencedTypeInstance.getUuid().toString()));\r\n+\t\t\t\tstruct.set(MatHelper.FULLNAME, Mat5.newString(referencedTypeInstance.getFullQualifiedInstanceName()));\r\n+\t\t\t} else {\r\n+\t\t\t\tstruct.set(MatHelper.UUID, Mat5.newString(\"\"));\r\n+\t\t\t\tstruct.set(MatHelper.FULLNAME, Mat5.newString(\"\"));\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ResourcePropertyInstance\r\n+\t * only uri is saved\r\n+\t * @param element ResourcePropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(ResourcePropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof ResourceProperty) {\r\n+\t\t\tBeanPropertyResource bpr = new BeanPropertyResource(element);\r\n+\t\t\tstruct.set(MatHelper.URI, (!bpr.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bpr.getValue().toString()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about EnumUnitPropertyInstance\r\n+\t * only unit,value and name are saved\r\n+\t * @param element EnumUnitPropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(EnumUnitPropertyInstance element) {\r\n+\t\tStruct struct = Mat5.newStruct();\r\n+\t\tif (element.getType() instanceof EnumProperty) {\r\n+\t\t\tBeanPropertyEnum bpe = new BeanPropertyEnum(element);\r\n+\t\t\tstruct.set(MatHelper.UNIT, Mat5.newString(bpe.getUnit()));\r\n+\t\t\tstruct.set(MatHelper.VALUE, (!bpe.isSet()) ? Mat5.newString(\"\") : Mat5.newScalar(bpe.getEnumValue()));\r\n+\t\t\tstruct.set(MatHelper.NAME, (!bpe.isSet()) ? Mat5.newString(\"\") : Mat5.newString(bpe.getValue()));\r\n+\t\t}\r\n+\t\treturn struct;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ArrayInstance\r\n+\t * @param element ArrayInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(ArrayInstance element) {\r\n+\t\tEList<APropertyInstance> propertyInstances = element.getArrayInstances();\r\n+\t\tCell cell = Mat5.newCell(propertyInstances.size(), 1);\r\n+\t\tfor (int i = 0; i < propertyInstances.size(); i++) {\r\n+\t\t\tAPropertyInstance instanceElement = propertyInstances.get(i);\r\n+\t\t\tArray propertyArray = getRightProperty(instanceElement);\r\n+\t\t\tcell.set(i, propertyArray);\r\n+\t\t}\r\n+\t\treturn cell;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * creates a new .mat-struct with all information about ComposedPropertyInstance\r\n+\t * @param element ComposedPropertyInstance\r\n+\t */\r\n+\tprivate Array contentOfProperty(ComposedPropertyInstance element) {\r\n+\t\treturn exportCatAs(element.getTypeInstance());\r\n+\t}\r\n+\r\n+\t//Delete First and Last Character of a string.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aef6d2801c60be1147c54867d1c1c3d5d5c94369"}, "originalPosition": 283}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d7561d3315a26d8b869e52ff59aae9459a3d824", "author": {"user": {"login": "ALEhmerDLR", "name": null}}, "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/7d7561d3315a26d8b869e52ff59aae9459a3d824", "committedDate": "2020-03-06T08:03:27Z", "message": "Changed commentstyle - (Task #489)\n\n---\nTask #489: Include Matlab libary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTQwMzQ0", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/515#pullrequestreview-370140344", "createdAt": "2020-03-06T08:05:28Z", "commit": {"oid": "7d7561d3315a26d8b869e52ff59aae9459a3d824"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 612, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}