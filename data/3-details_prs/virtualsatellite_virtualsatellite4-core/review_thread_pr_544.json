{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDI5MTM0", "number": 544, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODozOTo0MVrODskYCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowNTo0NFrODsxOEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDU5OTE1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepoHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODozOTo0MVrOF9fNuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTo0ODozMVrOF9h3zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxODg3Mw==", "bodyText": "Why do we throw IOException and an explicit FileNotFoundException if we only catch the IOException in initRepoRegistry()?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400018873", "createdAt": "2020-03-30T08:39:41Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepoHelper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.OutputStream;\r\n+import java.io.UncheckedIOException;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+import java.nio.file.Paths;\r\n+import java.util.stream.Stream;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+/**\r\n+ * Helper class to save, load and register server repository configurations\r\n+ */\r\n+public class ServerRepoHelper {\r\n+\r\n+\tprivate ServerRepoHelper() { }\r\n+\t\r\n+\t/**\r\n+\t * Adds all known project configs to RepoRegistry\r\n+\t * @throws IOException \r\n+\t */\r\n+\tpublic static void initRepoRegistry() throws IOException {\r\n+\t\ttry (Stream<Path> paths = Files.walk(Paths.get(ServerConfiguration.getRepositoryConfigurationsDir()))) {\r\n+\t\t\tpaths\r\n+\t\t\t\t.filter(Files::isRegularFile)\r\n+\t\t\t\t.forEach(t -> {\r\n+\t\t\t\t\ttry {\r\n+\t\t\t\t\t\tregisterRepositoryConfiguration(t);\r\n+\t\t\t\t\t} catch (IOException e) {\r\n+\t\t\t\t\t\tthrow new UncheckedIOException(e);\r\n+\t\t\t\t\t} catch (URISyntaxException e) {\r\n+\t\t\t\t\t\tthrow new RuntimeException(e);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t});\r\n+\t\t} \r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Creates RepositoryConfiguration for the given configuration file, creates a corresponding ServerRepository\r\n+\t * and registers it in the RepoRegistry\r\n+\t * @param repositoryConfigurationFile properties file for a repository\r\n+\t * @throws IOException \r\n+\t * @throws FileNotFoundException \r\n+\t * @throws URISyntaxException \r\n+\t */\r\n+\tprivate static void registerRepositoryConfiguration(Path repositoryConfigurationFile) throws FileNotFoundException, IOException, URISyntaxException {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ed429a37bbb6a4daa9c099f99fa5187647da827"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA2MjQxMg==", "bodyText": "Well spotted. Removed the Exception as suggested.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400062412", "createdAt": "2020-03-30T09:48:31Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepoHelper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.OutputStream;\r\n+import java.io.UncheckedIOException;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+import java.nio.file.Paths;\r\n+import java.util.stream.Stream;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+/**\r\n+ * Helper class to save, load and register server repository configurations\r\n+ */\r\n+public class ServerRepoHelper {\r\n+\r\n+\tprivate ServerRepoHelper() { }\r\n+\t\r\n+\t/**\r\n+\t * Adds all known project configs to RepoRegistry\r\n+\t * @throws IOException \r\n+\t */\r\n+\tpublic static void initRepoRegistry() throws IOException {\r\n+\t\ttry (Stream<Path> paths = Files.walk(Paths.get(ServerConfiguration.getRepositoryConfigurationsDir()))) {\r\n+\t\t\tpaths\r\n+\t\t\t\t.filter(Files::isRegularFile)\r\n+\t\t\t\t.forEach(t -> {\r\n+\t\t\t\t\ttry {\r\n+\t\t\t\t\t\tregisterRepositoryConfiguration(t);\r\n+\t\t\t\t\t} catch (IOException e) {\r\n+\t\t\t\t\t\tthrow new UncheckedIOException(e);\r\n+\t\t\t\t\t} catch (URISyntaxException e) {\r\n+\t\t\t\t\t\tthrow new RuntimeException(e);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t});\r\n+\t\t} \r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Creates RepositoryConfiguration for the given configuration file, creates a corresponding ServerRepository\r\n+\t * and registers it in the RepoRegistry\r\n+\t * @param repositoryConfigurationFile properties file for a repository\r\n+\t * @throws IOException \r\n+\t * @throws FileNotFoundException \r\n+\t * @throws URISyntaxException \r\n+\t */\r\n+\tprivate static void registerRepositoryConfiguration(Path repositoryConfigurationFile) throws FileNotFoundException, IOException, URISyntaxException {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxODg3Mw=="}, "originalCommit": {"oid": "0ed429a37bbb6a4daa9c099f99fa5187647da827"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDYzMTQ3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo0NzozOFrOF9fhmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDozNTo0OFrOF9s1xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMzk2Mg==", "bodyText": "The VersionControlSystem should be SVN here and also asserted below\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tcreateTempRepoConfigFile(configsDir, svnProjectName, VersionControlSystem.GIT);\n          \n          \n            \n            \t\tcreateTempRepoConfigFile(configsDir, svnProjectName, VersionControlSystem.SVN);", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400023962", "createdAt": "2020-03-30T08:47:38Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+\r\n+public class ServerRepoHelperTest {\r\n+\r\n+\tprivate Path configsDir;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws IOException {\r\n+\t\t// Create temporary dir for repo config files\r\n+\t\tconfigsDir = Files.createTempDirectory(\"test_repo_configs\");\r\n+\t\t\r\n+\t\t// Overwrite path to repo config files\r\n+\t\tServerConfiguration.getProperties().setProperty(ServerConfiguration.REPOSITORY_CONFIGURATIONS_DIR_KEY, configsDir.toString());\r\n+\r\n+\t\tRepoRegistry.getInstance().getRepositories().clear();\r\n+\t}\r\n+\t\r\n+\t@After\r\n+\tpublic void tearDown() {\r\n+\t\tRepoRegistry.getInstance().getRepositories().clear();\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testLoadRepositoryConfigurations() throws IOException {\r\n+\t\tString svnProjectName = \"GitProject1\";\r\n+\t\tString gitProjectName = \"GitProject2\";\r\n+\t\tcreateTempRepoConfigFile(configsDir, svnProjectName, VersionControlSystem.GIT);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ed429a37bbb6a4daa9c099f99fa5187647da827"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MjExOA==", "bodyText": "Fixed, a remote SVN repo had to be created first, otherwise the instantiation of an SVN Repo and Server will fail.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400242118", "createdAt": "2020-03-30T14:35:48Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+\r\n+public class ServerRepoHelperTest {\r\n+\r\n+\tprivate Path configsDir;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws IOException {\r\n+\t\t// Create temporary dir for repo config files\r\n+\t\tconfigsDir = Files.createTempDirectory(\"test_repo_configs\");\r\n+\t\t\r\n+\t\t// Overwrite path to repo config files\r\n+\t\tServerConfiguration.getProperties().setProperty(ServerConfiguration.REPOSITORY_CONFIGURATIONS_DIR_KEY, configsDir.toString());\r\n+\r\n+\t\tRepoRegistry.getInstance().getRepositories().clear();\r\n+\t}\r\n+\t\r\n+\t@After\r\n+\tpublic void tearDown() {\r\n+\t\tRepoRegistry.getInstance().getRepositories().clear();\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testLoadRepositoryConfigurations() throws IOException {\r\n+\t\tString svnProjectName = \"GitProject1\";\r\n+\t\tString gitProjectName = \"GitProject2\";\r\n+\t\tcreateTempRepoConfigFile(configsDir, svnProjectName, VersionControlSystem.GIT);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMzk2Mg=="}, "originalCommit": {"oid": "0ed429a37bbb6a4daa9c099f99fa5187647da827"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDYzMzk0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo0ODoxNlrOF9fjNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDozNTo1NlrOF9s2Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNDM3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(VersionControlSystem.GIT, repoRegistry.getRepository(svnProjectName).getRepositoryConfiguration().getBackend());\n          \n          \n            \n            \t\tassertEquals(VersionControlSystem.SVN, repoRegistry.getRepository(svnProjectName).getRepositoryConfiguration().getBackend());", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400024372", "createdAt": "2020-03-30T08:48:16Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+\r\n+public class ServerRepoHelperTest {\r\n+\r\n+\tprivate Path configsDir;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws IOException {\r\n+\t\t// Create temporary dir for repo config files\r\n+\t\tconfigsDir = Files.createTempDirectory(\"test_repo_configs\");\r\n+\t\t\r\n+\t\t// Overwrite path to repo config files\r\n+\t\tServerConfiguration.getProperties().setProperty(ServerConfiguration.REPOSITORY_CONFIGURATIONS_DIR_KEY, configsDir.toString());\r\n+\r\n+\t\tRepoRegistry.getInstance().getRepositories().clear();\r\n+\t}\r\n+\t\r\n+\t@After\r\n+\tpublic void tearDown() {\r\n+\t\tRepoRegistry.getInstance().getRepositories().clear();\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testLoadRepositoryConfigurations() throws IOException {\r\n+\t\tString svnProjectName = \"GitProject1\";\r\n+\t\tString gitProjectName = \"GitProject2\";\r\n+\t\tcreateTempRepoConfigFile(configsDir, svnProjectName, VersionControlSystem.GIT);\r\n+\t\tcreateTempRepoConfigFile(configsDir, gitProjectName, VersionControlSystem.GIT);\r\n+\r\n+\t\tRepoRegistry repoRegistry = RepoRegistry.getInstance();\r\n+\t\tassertTrue(\"Repo registry is empty initially\", repoRegistry.getRepositories().isEmpty());\r\n+\r\n+\t\tServerRepoHelper.initRepoRegistry();\r\n+\t\t\r\n+\t\tassertEquals(2, repoRegistry.getRepositories().size());\r\n+\t\tassertEquals(VersionControlSystem.GIT, repoRegistry.getRepository(svnProjectName).getRepositoryConfiguration().getBackend());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ed429a37bbb6a4daa9c099f99fa5187647da827"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MjIxNQ==", "bodyText": "See above.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400242215", "createdAt": "2020-03-30T14:35:56Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+\r\n+public class ServerRepoHelperTest {\r\n+\r\n+\tprivate Path configsDir;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws IOException {\r\n+\t\t// Create temporary dir for repo config files\r\n+\t\tconfigsDir = Files.createTempDirectory(\"test_repo_configs\");\r\n+\t\t\r\n+\t\t// Overwrite path to repo config files\r\n+\t\tServerConfiguration.getProperties().setProperty(ServerConfiguration.REPOSITORY_CONFIGURATIONS_DIR_KEY, configsDir.toString());\r\n+\r\n+\t\tRepoRegistry.getInstance().getRepositories().clear();\r\n+\t}\r\n+\t\r\n+\t@After\r\n+\tpublic void tearDown() {\r\n+\t\tRepoRegistry.getInstance().getRepositories().clear();\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testLoadRepositoryConfigurations() throws IOException {\r\n+\t\tString svnProjectName = \"GitProject1\";\r\n+\t\tString gitProjectName = \"GitProject2\";\r\n+\t\tcreateTempRepoConfigFile(configsDir, svnProjectName, VersionControlSystem.GIT);\r\n+\t\tcreateTempRepoConfigFile(configsDir, gitProjectName, VersionControlSystem.GIT);\r\n+\r\n+\t\tRepoRegistry repoRegistry = RepoRegistry.getInstance();\r\n+\t\tassertTrue(\"Repo registry is empty initially\", repoRegistry.getRepositories().isEmpty());\r\n+\r\n+\t\tServerRepoHelper.initRepoRegistry();\r\n+\t\t\r\n+\t\tassertEquals(2, repoRegistry.getRepositories().size());\r\n+\t\tassertEquals(VersionControlSystem.GIT, repoRegistry.getRepository(svnProjectName).getRepositoryConfiguration().getBackend());\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNDM3Mg=="}, "originalCommit": {"oid": "0ed429a37bbb6a4daa9c099f99fa5187647da827"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDYzNjkwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.commons.test/src/de/dlr/sc/virsat/commons/exception/AtomicExceptionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo0ODo1NFrOF9fk2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo0ODo1NFrOF9fk2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNDc5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t@Before\n          \n          \n            \n            \tpublic void setUp() throws Exception {\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \t@After\n          \n          \n            \n            \tpublic void tearDown() throws Exception {\n          \n          \n            \n            \t}", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400024793", "createdAt": "2020-03-30T08:48:54Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.commons.test/src/de/dlr/sc/virsat/commons/exception/AtomicExceptionTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.commons.exception;\n+\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AtomicExceptionTest {\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws Exception {\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ed429a37bbb6a4daa9c099f99fa5187647da827"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTA4MzU1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/META-INF/MANIFEST.MF", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDo0NDo0M1rOF9j3lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1NTo0OFrOF-LyWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5NTEyNw==", "bodyText": "Why is it import package instead of require bundle?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400095127", "createdAt": "2020-03-30T10:44:43Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/META-INF/MANIFEST.MF", "diffHunk": "@@ -6,6 +6,10 @@ Bundle-Version: 4.11.0.qualifier\n Fragment-Host: de.dlr.sc.virsat.server;bundle-version=\"0.0.1\"\r\n Bundle-RequiredExecutionEnvironment: JavaSE-1.8\r\n Bundle-Vendor: DLR (German Aerospace Center)\r\n-Require-Bundle: org.junit\r\n+Require-Bundle: org.junit,\r\n+ org.eclipse.egit.core,\r\n+ org.hamcrest.library,\r\n+ org.eclipse.team.svn.core\r\n Export-Package: de.dlr.sc.virsat.server.test\r\n Automatic-Module-Name: de.dlr.sc.virsat.server.test\r\n+Import-Package: de.dlr.sc.virsat.project.test\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0OTE0NA==", "bodyText": "This is because Tycho maven resolves fragments differently then an eclipse application. If you access a class from one fragment into another fragment, it needs to be imported implicitly via the IMPORT-PACKAGE. Otherwise the maven/tycho will run into a compilation issue.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400749144", "createdAt": "2020-03-31T08:55:48Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server.test/META-INF/MANIFEST.MF", "diffHunk": "@@ -6,6 +6,10 @@ Bundle-Version: 4.11.0.qualifier\n Fragment-Host: de.dlr.sc.virsat.server;bundle-version=\"0.0.1\"\r\n Bundle-RequiredExecutionEnvironment: JavaSE-1.8\r\n Bundle-Vendor: DLR (German Aerospace Center)\r\n-Require-Bundle: org.junit\r\n+Require-Bundle: org.junit,\r\n+ org.eclipse.egit.core,\r\n+ org.hamcrest.library,\r\n+ org.eclipse.team.svn.core\r\n Export-Package: de.dlr.sc.virsat.server.test\r\n Automatic-Module-Name: de.dlr.sc.virsat.server.test\r\n+Import-Package: de.dlr.sc.virsat.project.test\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5NTEyNw=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTEwODA5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/configuration/RepositoryConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDo1MTozOFrOF9kGfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1Njo0NFrOF-L0rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5ODk0Mw==", "bodyText": "Let's use File.createTempFile() for this", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400098943", "createdAt": "2020-03-30T10:51:38Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/configuration/RepositoryConfigurationTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.configuration;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileOutputStream;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.OutputStream;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.charset.StandardCharsets;\r\n+\r\n+import org.apache.commons.io.IOUtils;\r\n+import org.eclipse.core.resources.ResourcesPlugin;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+\r\n+public class RepositoryConfigurationTest {\r\n+\t\r\n+\t//Test data\r\n+\tprivate static final String TEST_PATH = \"local/In/Repo\";\r\n+\tprivate static final String TEST_REMOTE = \"gitlab.dlr.de/fancy-project\";\r\n+\tprivate static final String TEST_USER = \"TestUser\";\r\n+\tprivate static final String TEST_PASSWORD = \"TestPassword\";\r\n+\tprivate static final String TEST_PROJECT = \"TestProject\";\r\n+\tprivate static final String TEST_BACKEND = \"GIT\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testLoadProperties() throws IOException, URISyntaxException {\r\n+\t\t\r\n+\t\tString testConfigFileString = RepositoryConfiguration.REMOTE_URL_KEY + \":\" + TEST_REMOTE + \"\\n\" \r\n+\t\t\t\t+ RepositoryConfiguration.PROJECT_NAME_KEY + \":\" + TEST_PROJECT + \"\\n\" \r\n+\t\t\t\t+ RepositoryConfiguration.BACKEND_KEY + \":\" + TEST_BACKEND + \"\\n\" \r\n+\t\t\t\t+ RepositoryConfiguration.FUNCTIONAL_ACCOUNT_NAME_KEY + \":\" + TEST_USER + \"\\n\" \r\n+\t\t\t\t+ RepositoryConfiguration.LOCAL_PATH_KEY + \":\" + TEST_PATH + \"\\n\" \r\n+\t\t\t\t+ RepositoryConfiguration.FUNCTIONAL_ACCOUNT_PASSWORD_KEY + \":\" + TEST_PASSWORD;\r\n+\t\tInputStream inputStream = new ByteArrayInputStream(testConfigFileString.getBytes(StandardCharsets.UTF_8));\r\n+\t\t\r\n+\t\t// Check that all values are loaded\r\n+\t\tRepositoryConfiguration configuration = new RepositoryConfiguration(inputStream);\r\n+\t\tassertEquals(\"Remote loaded\", TEST_REMOTE, configuration.getRemoteUri());\r\n+\t\tassertEquals(\"Backend loaded\", VersionControlSystem.GIT, configuration.getBackend());\r\n+\t\tassertEquals(\"Users loaded\", TEST_USER, configuration.getFunctionalAccountName());\r\n+\t\tassertEquals(\"Password loaded\",\tTEST_PASSWORD, configuration.getFunctionalAccountPassword());\r\n+\t\tassertEquals(\"Project loaded\",\tTEST_PROJECT, configuration.getProjectName());\r\n+\t\tassertEquals(\"Path loaded\", TEST_PATH, configuration.getLocalPath());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testSaveProperties() throws IOException, URISyntaxException {\r\n+\t\t\r\n+\t\tFile wsRootFile = ResourcesPlugin.getWorkspace().getRoot().getRawLocation().toFile();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0OTc0Mg==", "bodyText": "Hmm yes sounds like an idea.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400749742", "createdAt": "2020-03-31T08:56:44Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/configuration/RepositoryConfigurationTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.configuration;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileOutputStream;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.OutputStream;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.charset.StandardCharsets;\r\n+\r\n+import org.apache.commons.io.IOUtils;\r\n+import org.eclipse.core.resources.ResourcesPlugin;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+\r\n+public class RepositoryConfigurationTest {\r\n+\t\r\n+\t//Test data\r\n+\tprivate static final String TEST_PATH = \"local/In/Repo\";\r\n+\tprivate static final String TEST_REMOTE = \"gitlab.dlr.de/fancy-project\";\r\n+\tprivate static final String TEST_USER = \"TestUser\";\r\n+\tprivate static final String TEST_PASSWORD = \"TestPassword\";\r\n+\tprivate static final String TEST_PROJECT = \"TestProject\";\r\n+\tprivate static final String TEST_BACKEND = \"GIT\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testLoadProperties() throws IOException, URISyntaxException {\r\n+\t\t\r\n+\t\tString testConfigFileString = RepositoryConfiguration.REMOTE_URL_KEY + \":\" + TEST_REMOTE + \"\\n\" \r\n+\t\t\t\t+ RepositoryConfiguration.PROJECT_NAME_KEY + \":\" + TEST_PROJECT + \"\\n\" \r\n+\t\t\t\t+ RepositoryConfiguration.BACKEND_KEY + \":\" + TEST_BACKEND + \"\\n\" \r\n+\t\t\t\t+ RepositoryConfiguration.FUNCTIONAL_ACCOUNT_NAME_KEY + \":\" + TEST_USER + \"\\n\" \r\n+\t\t\t\t+ RepositoryConfiguration.LOCAL_PATH_KEY + \":\" + TEST_PATH + \"\\n\" \r\n+\t\t\t\t+ RepositoryConfiguration.FUNCTIONAL_ACCOUNT_PASSWORD_KEY + \":\" + TEST_PASSWORD;\r\n+\t\tInputStream inputStream = new ByteArrayInputStream(testConfigFileString.getBytes(StandardCharsets.UTF_8));\r\n+\t\t\r\n+\t\t// Check that all values are loaded\r\n+\t\tRepositoryConfiguration configuration = new RepositoryConfiguration(inputStream);\r\n+\t\tassertEquals(\"Remote loaded\", TEST_REMOTE, configuration.getRemoteUri());\r\n+\t\tassertEquals(\"Backend loaded\", VersionControlSystem.GIT, configuration.getBackend());\r\n+\t\tassertEquals(\"Users loaded\", TEST_USER, configuration.getFunctionalAccountName());\r\n+\t\tassertEquals(\"Password loaded\",\tTEST_PASSWORD, configuration.getFunctionalAccountPassword());\r\n+\t\tassertEquals(\"Project loaded\",\tTEST_PROJECT, configuration.getProjectName());\r\n+\t\tassertEquals(\"Path loaded\", TEST_PATH, configuration.getLocalPath());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testSaveProperties() throws IOException, URISyntaxException {\r\n+\t\t\r\n+\t\tFile wsRootFile = ResourcesPlugin.getWorkspace().getRoot().getRawLocation().toFile();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5ODk0Mw=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE2Mjc4OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/resources/server.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTowNzoxM1rOF9koIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1NzoyMlrOF-L2cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNzU1NA==", "bodyText": "Something wrong with line endings?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400107554", "createdAt": "2020-03-30T11:07:13Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/resources/server.properties", "diffHunk": "@@ -1,2 +1,5 @@\n # Default properties for Virtual Satellite Server configuration\r\n-config.area = /resources\n\\ No newline at end of file\n+repository.configurations.dir = ~/virtual_satellite/configurations/repositories\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc1MDE5Mw==", "bodyText": "I have seen this quite often recently. I have no idea what going on here.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400750193", "createdAt": "2020-03-31T08:57:22Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/resources/server.properties", "diffHunk": "@@ -1,2 +1,5 @@\n # Default properties for Virtual Satellite Server configuration\r\n-config.area = /resources\n\\ No newline at end of file\n+repository.configurations.dir = ~/virtual_satellite/configurations/repositories\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNzU1NA=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE3NjkxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/configuration/ServerConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxMTo0MFrOF9kxFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1NzoyOVrOF-L2vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwOTg0Ng==", "bodyText": "Let's use a temporary file for this", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400109846", "createdAt": "2020-03-30T11:11:40Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/configuration/ServerConfigurationTest.java", "diffHunk": "@@ -41,7 +50,24 @@ public void testLoadProperties() throws IOException {\n \t\t\r\n \t\tServerConfiguration.loadProperties(inputStream);\r\n \t\tProperties properties = ServerConfiguration.getProperties();\r\n-\t\tassertEquals(1, properties.size());\r\n+\t\tassertFalse(properties.isEmpty());\r\n \t\tassertEquals(testValue, properties.getProperty(testKey));\r\n \t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testSaveProperties() throws IOException {\r\n+\t\t\r\n+\t\tfinal String TEST_FILE_NAME = \"test.properties\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc1MDI3MQ==", "bodyText": "Agreee", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400750271", "createdAt": "2020-03-31T08:57:29Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/configuration/ServerConfigurationTest.java", "diffHunk": "@@ -41,7 +50,24 @@ public void testLoadProperties() throws IOException {\n \t\t\r\n \t\tServerConfiguration.loadProperties(inputStream);\r\n \t\tProperties properties = ServerConfiguration.getProperties();\r\n-\t\tassertEquals(1, properties.size());\r\n+\t\tassertFalse(properties.isEmpty());\r\n \t\tassertEquals(testValue, properties.getProperty(testKey));\r\n \t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testSaveProperties() throws IOException {\r\n+\t\t\r\n+\t\tfinal String TEST_FILE_NAME = \"test.properties\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwOTg0Ng=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE4NDIxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/configuration/ServerConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxMzo1MVrOF9k1sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOToxMTowN1rOF-MW6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMTAyNA==", "bodyText": "Let's maybe move this constant directly into the test where we use it? I don't think it's useful as a class field.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400111024", "createdAt": "2020-03-30T11:13:51Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/configuration/ServerConfigurationTest.java", "diffHunk": "@@ -11,24 +11,33 @@\n \r\n import static org.junit.Assert.assertEquals;\r\n import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n \r\n import java.io.ByteArrayInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileOutputStream;\r\n import java.io.IOException;\r\n import java.io.InputStream;\r\n+import java.io.OutputStream;\r\n import java.nio.charset.StandardCharsets;\r\n import java.util.Properties;\r\n \r\n+import org.apache.commons.io.IOUtils;\r\n import org.junit.Test;\r\n \r\n import de.dlr.sc.virsat.server.Activator;\r\n \r\n public class ServerConfigurationTest {\r\n+\t\r\n+\tpublic static final String REPOSITORY_CONFIGURATIONS_DIR = \"some/dir\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc1ODUwNw==", "bodyText": "Done", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400758507", "createdAt": "2020-03-31T09:11:07Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/configuration/ServerConfigurationTest.java", "diffHunk": "@@ -11,24 +11,33 @@\n \r\n import static org.junit.Assert.assertEquals;\r\n import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n \r\n import java.io.ByteArrayInputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileOutputStream;\r\n import java.io.IOException;\r\n import java.io.InputStream;\r\n+import java.io.OutputStream;\r\n import java.nio.charset.StandardCharsets;\r\n import java.util.Properties;\r\n \r\n+import org.apache.commons.io.IOUtils;\r\n import org.junit.Test;\r\n \r\n import de.dlr.sc.virsat.server.Activator;\r\n \r\n public class ServerConfigurationTest {\r\n+\t\r\n+\tpublic static final String REPOSITORY_CONFIGURATIONS_DIR = \"some/dir\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMTAyNA=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTI1MzU0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/RepoRegistryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozNDo1MVrOF9lgAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozNDo1MVrOF9lgAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMTg1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testListAddGet() throws URISyntaxException {\n          \n          \n            \n            \tpublic void testGetRepositories() throws URISyntaxException {", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400121856", "createdAt": "2020-03-30T11:34:51Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/RepoRegistryTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.net.URISyntaxException;\r\n+\r\n+import org.junit.Assert;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+\r\n+public class RepoRegistryTest {\r\n+\t\r\n+\tprivate static final String REPO_NAME = \"TestRepository\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testBasicAddGet() throws URISyntaxException {\r\n+\t\t\r\n+\t\t//Create basic test repsoitory \r\n+\t\tfinal ServerRepository TEST_REPO = new ServerRepository(new File(\"\"), new RepositoryConfiguration(\"\", \"\", \"\", VersionControlSystem.GIT, \"\", \"\"));\r\n+\t\t\r\n+\t\tRepoRegistry.getInstance().addRepository(REPO_NAME, TEST_REPO);\r\n+\t\t\r\n+\t\tServerRepository returnedFromRegistry = RepoRegistry.getInstance().getRepository(REPO_NAME);\r\n+\t\t\r\n+\t\tAssert.assertEquals(\"Object should be the same as the one added\", TEST_REPO, returnedFromRegistry);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testListAddGet() throws URISyntaxException {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTI1NzM2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/RepoRegistryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozNjowM1rOF9liaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOToxOTo1MlrOF-Ms0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMjQ3Mw==", "bodyText": "Let's also assert size=1", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400122473", "createdAt": "2020-03-30T11:36:03Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/RepoRegistryTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.net.URISyntaxException;\r\n+\r\n+import org.junit.Assert;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+\r\n+public class RepoRegistryTest {\r\n+\t\r\n+\tprivate static final String REPO_NAME = \"TestRepository\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testBasicAddGet() throws URISyntaxException {\r\n+\t\t\r\n+\t\t//Create basic test repsoitory \r\n+\t\tfinal ServerRepository TEST_REPO = new ServerRepository(new File(\"\"), new RepositoryConfiguration(\"\", \"\", \"\", VersionControlSystem.GIT, \"\", \"\"));\r\n+\t\t\r\n+\t\tRepoRegistry.getInstance().addRepository(REPO_NAME, TEST_REPO);\r\n+\t\t\r\n+\t\tServerRepository returnedFromRegistry = RepoRegistry.getInstance().getRepository(REPO_NAME);\r\n+\t\t\r\n+\t\tAssert.assertEquals(\"Object should be the same as the one added\", TEST_REPO, returnedFromRegistry);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testListAddGet() throws URISyntaxException {\r\n+\t\t\r\n+\t\t//Create basic test repsoitory \r\n+\t\tfinal ServerRepository TEST_REPO = new ServerRepository(new File(\"\"), new RepositoryConfiguration(\"\", \"\", \"\", VersionControlSystem.GIT, \"\", \"\"));\r\n+\t\t\r\n+\t\tRepoRegistry.getInstance().getRepositories().put(REPO_NAME, TEST_REPO);\r\n+\t\t\r\n+\t\tServerRepository returnedFromRegistry = RepoRegistry.getInstance().getRepositories().get(REPO_NAME);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2NDExNQ==", "bodyText": "Done", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400764115", "createdAt": "2020-03-31T09:19:52Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/RepoRegistryTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.net.URISyntaxException;\r\n+\r\n+import org.junit.Assert;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+\r\n+public class RepoRegistryTest {\r\n+\t\r\n+\tprivate static final String REPO_NAME = \"TestRepository\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testBasicAddGet() throws URISyntaxException {\r\n+\t\t\r\n+\t\t//Create basic test repsoitory \r\n+\t\tfinal ServerRepository TEST_REPO = new ServerRepository(new File(\"\"), new RepositoryConfiguration(\"\", \"\", \"\", VersionControlSystem.GIT, \"\", \"\"));\r\n+\t\t\r\n+\t\tRepoRegistry.getInstance().addRepository(REPO_NAME, TEST_REPO);\r\n+\t\t\r\n+\t\tServerRepository returnedFromRegistry = RepoRegistry.getInstance().getRepository(REPO_NAME);\r\n+\t\t\r\n+\t\tAssert.assertEquals(\"Object should be the same as the one added\", TEST_REPO, returnedFromRegistry);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testListAddGet() throws URISyntaxException {\r\n+\t\t\r\n+\t\t//Create basic test repsoitory \r\n+\t\tfinal ServerRepository TEST_REPO = new ServerRepository(new File(\"\"), new RepositoryConfiguration(\"\", \"\", \"\", VersionControlSystem.GIT, \"\", \"\"));\r\n+\t\t\r\n+\t\tRepoRegistry.getInstance().getRepositories().put(REPO_NAME, TEST_REPO);\r\n+\t\t\r\n+\t\tServerRepository returnedFromRegistry = RepoRegistry.getInstance().getRepositories().get(REPO_NAME);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMjQ3Mw=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTI1OTY4OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/RepoRegistryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozNjo0NlrOF9lj9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOToyMDowM1rOF-MtRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMjg2OA==", "bodyText": "Let's assert repositories empty", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400122868", "createdAt": "2020-03-30T11:36:46Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/RepoRegistryTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.net.URISyntaxException;\r\n+\r\n+import org.junit.Assert;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+\r\n+public class RepoRegistryTest {\r\n+\t\r\n+\tprivate static final String REPO_NAME = \"TestRepository\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testBasicAddGet() throws URISyntaxException {\r\n+\t\t\r\n+\t\t//Create basic test repsoitory \r\n+\t\tfinal ServerRepository TEST_REPO = new ServerRepository(new File(\"\"), new RepositoryConfiguration(\"\", \"\", \"\", VersionControlSystem.GIT, \"\", \"\"));\r\n+\t\t\r\n+\t\tRepoRegistry.getInstance().addRepository(REPO_NAME, TEST_REPO);\r\n+\t\t\r\n+\t\tServerRepository returnedFromRegistry = RepoRegistry.getInstance().getRepository(REPO_NAME);\r\n+\t\t\r\n+\t\tAssert.assertEquals(\"Object should be the same as the one added\", TEST_REPO, returnedFromRegistry);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testListAddGet() throws URISyntaxException {\r\n+\t\t\r\n+\t\t//Create basic test repsoitory \r\n+\t\tfinal ServerRepository TEST_REPO = new ServerRepository(new File(\"\"), new RepositoryConfiguration(\"\", \"\", \"\", VersionControlSystem.GIT, \"\", \"\"));\r\n+\t\t\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2NDIyOA==", "bodyText": "Done", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400764228", "createdAt": "2020-03-31T09:20:03Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/RepoRegistryTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.net.URISyntaxException;\r\n+\r\n+import org.junit.Assert;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+\r\n+public class RepoRegistryTest {\r\n+\t\r\n+\tprivate static final String REPO_NAME = \"TestRepository\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testBasicAddGet() throws URISyntaxException {\r\n+\t\t\r\n+\t\t//Create basic test repsoitory \r\n+\t\tfinal ServerRepository TEST_REPO = new ServerRepository(new File(\"\"), new RepositoryConfiguration(\"\", \"\", \"\", VersionControlSystem.GIT, \"\", \"\"));\r\n+\t\t\r\n+\t\tRepoRegistry.getInstance().addRepository(REPO_NAME, TEST_REPO);\r\n+\t\t\r\n+\t\tServerRepository returnedFromRegistry = RepoRegistry.getInstance().getRepository(REPO_NAME);\r\n+\t\t\r\n+\t\tAssert.assertEquals(\"Object should be the same as the one added\", TEST_REPO, returnedFromRegistry);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testListAddGet() throws URISyntaxException {\r\n+\t\t\r\n+\t\t//Create basic test repsoitory \r\n+\t\tfinal ServerRepository TEST_REPO = new ServerRepository(new File(\"\"), new RepositoryConfiguration(\"\", \"\", \"\", VersionControlSystem.GIT, \"\", \"\"));\r\n+\t\t\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMjg2OA=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTMxMDkyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTo1MjowMFrOF9mDwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOToyOToyNlrOF-ND4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzMTAxMA==", "bodyText": "Let's use a proper setter", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400131010", "createdAt": "2020-03-30T11:52:00Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.team.svn.core.utility.SVNUtility;\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+import de.dlr.sc.virsat.team.Activator;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+import de.dlr.sc.virsat.team.svn.CreateSvnServerOperation;\r\n+\r\n+public class ServerRepoHelperTest {\r\n+\r\n+\tprivate Path configsDir;\r\n+\tprivate Path svnPathRepoRemote;\r\n+\tprivate URI svnUriToRemoteRepoPath;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws IOException, CoreException {\r\n+\t\t// Create temporary dir for repo config files\r\n+\t\tconfigsDir = Files.createTempDirectory(\"test_repo_configs\");\r\n+\t\t\r\n+\t\t// Overwrite path to repo config files\r\n+\t\tServerConfiguration.getProperties().setProperty(ServerConfiguration.REPOSITORY_CONFIGURATIONS_DIR_KEY, configsDir.toString());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2NTQ1NA==", "bodyText": "I agree, wasn't it you coding that?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400765454", "createdAt": "2020-03-31T09:22:11Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.team.svn.core.utility.SVNUtility;\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+import de.dlr.sc.virsat.team.Activator;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+import de.dlr.sc.virsat.team.svn.CreateSvnServerOperation;\r\n+\r\n+public class ServerRepoHelperTest {\r\n+\r\n+\tprivate Path configsDir;\r\n+\tprivate Path svnPathRepoRemote;\r\n+\tprivate URI svnUriToRemoteRepoPath;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws IOException, CoreException {\r\n+\t\t// Create temporary dir for repo config files\r\n+\t\tconfigsDir = Files.createTempDirectory(\"test_repo_configs\");\r\n+\t\t\r\n+\t\t// Overwrite path to repo config files\r\n+\t\tServerConfiguration.getProperties().setProperty(ServerConfiguration.REPOSITORY_CONFIGURATIONS_DIR_KEY, configsDir.toString());\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzMTAxMA=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3MDAxOA==", "bodyText": "Yes it was :) I think we made getters and setters later", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400770018", "createdAt": "2020-03-31T09:29:26Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.team.svn.core.utility.SVNUtility;\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+import de.dlr.sc.virsat.team.Activator;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+import de.dlr.sc.virsat.team.svn.CreateSvnServerOperation;\r\n+\r\n+public class ServerRepoHelperTest {\r\n+\r\n+\tprivate Path configsDir;\r\n+\tprivate Path svnPathRepoRemote;\r\n+\tprivate URI svnUriToRemoteRepoPath;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws IOException, CoreException {\r\n+\t\t// Create temporary dir for repo config files\r\n+\t\tconfigsDir = Files.createTempDirectory(\"test_repo_configs\");\r\n+\t\t\r\n+\t\t// Overwrite path to repo config files\r\n+\t\tServerConfiguration.getProperties().setProperty(ServerConfiguration.REPOSITORY_CONFIGURATIONS_DIR_KEY, configsDir.toString());\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzMTAxMA=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjEwMzg4OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo1NDo0MVrOF9twIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOToyMzowOVrOF-M0jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1NzA1OA==", "bodyText": "I suggest we just use two git projects and get rid of all this SVN setup because it's not relevant for this test", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400257058", "createdAt": "2020-03-30T14:54:41Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.team.svn.core.utility.SVNUtility;\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+import de.dlr.sc.virsat.team.Activator;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+import de.dlr.sc.virsat.team.svn.CreateSvnServerOperation;\r\n+\r\n+public class ServerRepoHelperTest {\r\n+\r\n+\tprivate Path configsDir;\r\n+\tprivate Path svnPathRepoRemote;\r\n+\tprivate URI svnUriToRemoteRepoPath;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws IOException, CoreException {\r\n+\t\t// Create temporary dir for repo config files\r\n+\t\tconfigsDir = Files.createTempDirectory(\"test_repo_configs\");\r\n+\t\t\r\n+\t\t// Overwrite path to repo config files\r\n+\t\tServerConfiguration.getProperties().setProperty(ServerConfiguration.REPOSITORY_CONFIGURATIONS_DIR_KEY, configsDir.toString());\r\n+\r\n+\t\tRepoRegistry.getInstance().getRepositories().clear();\r\n+\t\t\r\n+\t\tsvnPathRepoRemote = Files.createTempDirectory(\"VirtualSatelliteSvnRemote_\");\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2NjA5Mw==", "bodyText": "I did, got complaints from @JAmmermann-DLR . Anyway test coverage is now increase, so we leave it with svn.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400766093", "createdAt": "2020-03-31T09:23:09Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.team.svn.core.utility.SVNUtility;\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+import de.dlr.sc.virsat.team.Activator;\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+import de.dlr.sc.virsat.team.svn.CreateSvnServerOperation;\r\n+\r\n+public class ServerRepoHelperTest {\r\n+\r\n+\tprivate Path configsDir;\r\n+\tprivate Path svnPathRepoRemote;\r\n+\tprivate URI svnUriToRemoteRepoPath;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws IOException, CoreException {\r\n+\t\t// Create temporary dir for repo config files\r\n+\t\tconfigsDir = Files.createTempDirectory(\"test_repo_configs\");\r\n+\t\t\r\n+\t\t// Overwrite path to repo config files\r\n+\t\tServerConfiguration.getProperties().setProperty(ServerConfiguration.REPOSITORY_CONFIGURATIONS_DIR_KEY, configsDir.toString());\r\n+\r\n+\t\tRepoRegistry.getInstance().getRepositories().clear();\r\n+\t\t\r\n+\t\tsvnPathRepoRemote = Files.createTempDirectory(\"VirtualSatelliteSvnRemote_\");\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1NzA1OA=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjE0NDEzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/VirSatServerApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowMzowMVrOF9uJfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOToyNDo1NVrOF-M43g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2MzU0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\t}", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400263549", "createdAt": "2020-03-30T15:03:01Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/VirSatServerApplication.java", "diffHunk": "@@ -46,7 +78,8 @@ public void stop() {\n \t\t} catch (Exception e) {\r\n \t\t\tSystem.out.println(\"Failed to shutdown Jetty instance\");\r\n \t\t\te.printStackTrace();\r\n-\t\t}\t\t\r\n+\t\t}\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2NzE5OA==", "bodyText": "Can't find it in the code.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400767198", "createdAt": "2020-03-31T09:24:55Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/VirSatServerApplication.java", "diffHunk": "@@ -46,7 +78,8 @@ public void stop() {\n \t\t} catch (Exception e) {\r\n \t\t\tSystem.out.println(\"Failed to shutdown Jetty instance\");\r\n \t\t\te.printStackTrace();\r\n-\t\t}\t\t\r\n+\t\t}\r\n+\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2MzU0OQ=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjE1Mjc2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/configuration/RepositoryConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowNDo0N1rOF9uO6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowNDo0N1rOF9uO6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NDkzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @throws URISyntaxException", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400264936", "createdAt": "2020-03-30T15:04:47Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/configuration/RepositoryConfiguration.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.configuration;\r\n+\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.OutputStream;\r\n+import java.util.Properties;\r\n+\r\n+import de.dlr.sc.virsat.team.VersionControlSystem;\r\n+\r\n+\r\n+public class RepositoryConfiguration {\r\n+\r\n+\t// Infrastructure\r\n+\tprivate Properties properties = new Properties();\r\n+\t\r\n+\t// Properties key\r\n+\tpublic static final String PROJECT_NAME_KEY = \"project.name\";\r\n+\tpublic static final String BACKEND_KEY = \"repository.backend\";\r\n+\tpublic static final String LOCAL_PATH_KEY = \"repository.localPath\";\r\n+\tpublic static final String REMOTE_URL_KEY = \"repository.remoteURI\";\r\n+\tpublic static final String FUNCTIONAL_ACCOUNT_NAME_KEY = \"repository.credentials.username\";\r\n+\tpublic static final String FUNCTIONAL_ACCOUNT_PASSWORD_KEY = \"repository.credentials.password\";\r\n+\t\r\n+\t/**\r\n+\t * Sets up a property file describing a project repository relation\r\n+\t * @param projectName Name of the project\r\n+\t * @param relativePath of the project in the local repository\r\n+\t * @param remoteUri remote Uri pointing to the remote repository\r\n+\t * @param backend Backend to be used for the repository, usually GIT or SVN\r\n+\t * @param functionalAccountName a user for the functional account to communicate with the backend\r\n+\t * @param functionalAccountPassword a password for the functional account\r\n+\t */\r\n+\tpublic RepositoryConfiguration(\r\n+\t\t\tString projectName,\r\n+\t\t\tString localPath,\r\n+\t\t\tString remoteUri,\r\n+\t\t\tVersionControlSystem backend,\r\n+\t\t\tString functionalAccountName,\r\n+\t\t\tString functionalAccountPassword) {\r\n+\t\tsetProjectName(projectName);\r\n+\t\tsetLocalPath(localPath);\r\n+\t\tsetRemoteUri(remoteUri);\r\n+\t\tsetBackend(backend);\r\n+\t\tsetFunctionalAccountName(functionalAccountName);\r\n+\t\tsetFunctionalAccountPassword(functionalAccountPassword);\r\n+\t}\r\n+\t\r\n+\tpublic RepositoryConfiguration(RepositoryConfiguration repositoryConfiguration) {\r\n+\t\tupdate(repositoryConfiguration);\r\n+\t}\r\n+\t\r\n+\tpublic RepositoryConfiguration(InputStream repoConfInputStream) throws FileNotFoundException, IOException {\r\n+\t\tloadProperties(repoConfInputStream);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Method to update a repository configuration with new values\r\n+\t * @param repositoryBackend the repositoryConfiguration to be used to update the current one\r\n+\t * @throws URISyntaxException\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjE3NTExOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepoHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowOToxNVrOF9uclA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTozOTozOFrOF-NdCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2ODQzNg==", "bodyText": "URI exception probably not thrown anymore", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400268436", "createdAt": "2020-03-30T15:09:15Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepoHelper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.OutputStream;\r\n+import java.io.UncheckedIOException;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+import java.nio.file.Paths;\r\n+import java.util.stream.Stream;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+/**\r\n+ * Helper class to save, load and register server repository configurations\r\n+ */\r\n+public class ServerRepoHelper {\r\n+\r\n+\tprivate ServerRepoHelper() { }\r\n+\t\r\n+\t/**\r\n+\t * Adds all known project configs to RepoRegistry\r\n+\t * @throws IOException \r\n+\t */\r\n+\tpublic static void initRepoRegistry() throws IOException {\r\n+\t\ttry (Stream<Path> paths = Files.walk(Paths.get(ServerConfiguration.getRepositoryConfigurationsDir()))) {\r\n+\t\t\tpaths\r\n+\t\t\t\t.filter(Files::isRegularFile)\r\n+\t\t\t\t.forEach(t -> {\r\n+\t\t\t\t\ttry {\r\n+\t\t\t\t\t\tregisterRepositoryConfiguration(t);\r\n+\t\t\t\t\t} catch (IOException e) {\r\n+\t\t\t\t\t\tthrow new UncheckedIOException(e);\r\n+\t\t\t\t\t} catch (URISyntaxException e) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NjQ1OQ==", "bodyText": "URI Exception is needed, but removed the try with resource.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400776459", "createdAt": "2020-03-31T09:39:38Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepoHelper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.OutputStream;\r\n+import java.io.UncheckedIOException;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+import java.nio.file.Paths;\r\n+import java.util.stream.Stream;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+/**\r\n+ * Helper class to save, load and register server repository configurations\r\n+ */\r\n+public class ServerRepoHelper {\r\n+\r\n+\tprivate ServerRepoHelper() { }\r\n+\t\r\n+\t/**\r\n+\t * Adds all known project configs to RepoRegistry\r\n+\t * @throws IOException \r\n+\t */\r\n+\tpublic static void initRepoRegistry() throws IOException {\r\n+\t\ttry (Stream<Path> paths = Files.walk(Paths.get(ServerConfiguration.getRepositoryConfigurationsDir()))) {\r\n+\t\t\tpaths\r\n+\t\t\t\t.filter(Files::isRegularFile)\r\n+\t\t\t\t.forEach(t -> {\r\n+\t\t\t\t\ttry {\r\n+\t\t\t\t\t\tregisterRepositoryConfiguration(t);\r\n+\t\t\t\t\t} catch (IOException e) {\r\n+\t\t\t\t\t\tthrow new UncheckedIOException(e);\r\n+\t\t\t\t\t} catch (URISyntaxException e) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2ODQzNg=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjE3NjcyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepoHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowOTozM1rOF9udhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTo0MTozOFrOF-NhvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2ODY3Nw==", "bodyText": "URI exception probably not thrown anymore", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400268677", "createdAt": "2020-03-30T15:09:33Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepoHelper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.OutputStream;\r\n+import java.io.UncheckedIOException;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+import java.nio.file.Paths;\r\n+import java.util.stream.Stream;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+/**\r\n+ * Helper class to save, load and register server repository configurations\r\n+ */\r\n+public class ServerRepoHelper {\r\n+\r\n+\tprivate ServerRepoHelper() { }\r\n+\t\r\n+\t/**\r\n+\t * Adds all known project configs to RepoRegistry\r\n+\t * @throws IOException \r\n+\t */\r\n+\tpublic static void initRepoRegistry() throws IOException {\r\n+\t\ttry (Stream<Path> paths = Files.walk(Paths.get(ServerConfiguration.getRepositoryConfigurationsDir()))) {\r\n+\t\t\tpaths\r\n+\t\t\t\t.filter(Files::isRegularFile)\r\n+\t\t\t\t.forEach(t -> {\r\n+\t\t\t\t\ttry {\r\n+\t\t\t\t\t\tregisterRepositoryConfiguration(t);\r\n+\t\t\t\t\t} catch (IOException e) {\r\n+\t\t\t\t\t\tthrow new UncheckedIOException(e);\r\n+\t\t\t\t\t} catch (URISyntaxException e) {\r\n+\t\t\t\t\t\tthrow new RuntimeException(e);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t});\r\n+\t\t} \r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Creates RepositoryConfiguration for the given configuration file, creates a corresponding ServerRepository\r\n+\t * and registers it in the RepoRegistry\r\n+\t * @param repositoryConfigurationFile properties file for a repository\r\n+\t * @throws IOException \r\n+\t * @throws FileNotFoundException \r\n+\t * @throws URISyntaxException \r\n+\t */\r\n+\tprivate static void registerRepositoryConfiguration(Path repositoryConfigurationFile) throws IOException, URISyntaxException {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3NzY2MQ==", "bodyText": "checked is thrown", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400777661", "createdAt": "2020-03-31T09:41:38Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepoHelper.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.IOException;\r\n+import java.io.OutputStream;\r\n+import java.io.UncheckedIOException;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+import java.nio.file.Paths;\r\n+import java.util.stream.Stream;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+/**\r\n+ * Helper class to save, load and register server repository configurations\r\n+ */\r\n+public class ServerRepoHelper {\r\n+\r\n+\tprivate ServerRepoHelper() { }\r\n+\t\r\n+\t/**\r\n+\t * Adds all known project configs to RepoRegistry\r\n+\t * @throws IOException \r\n+\t */\r\n+\tpublic static void initRepoRegistry() throws IOException {\r\n+\t\ttry (Stream<Path> paths = Files.walk(Paths.get(ServerConfiguration.getRepositoryConfigurationsDir()))) {\r\n+\t\t\tpaths\r\n+\t\t\t\t.filter(Files::isRegularFile)\r\n+\t\t\t\t.forEach(t -> {\r\n+\t\t\t\t\ttry {\r\n+\t\t\t\t\t\tregisterRepositoryConfiguration(t);\r\n+\t\t\t\t\t} catch (IOException e) {\r\n+\t\t\t\t\t\tthrow new UncheckedIOException(e);\r\n+\t\t\t\t\t} catch (URISyntaxException e) {\r\n+\t\t\t\t\t\tthrow new RuntimeException(e);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t});\r\n+\t\t} \r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Creates RepositoryConfiguration for the given configuration file, creates a corresponding ServerRepository\r\n+\t * and registers it in the RepoRegistry\r\n+\t * @param repositoryConfigurationFile properties file for a repository\r\n+\t * @throws IOException \r\n+\t * @throws FileNotFoundException \r\n+\t * @throws URISyntaxException \r\n+\t */\r\n+\tprivate static void registerRepositoryConfiguration(Path repositoryConfigurationFile) throws IOException, URISyntaxException {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2ODY3Nw=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQwNjE3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.team.test/src/de/dlr/sc/virsat/team/svn/CreateSvnServerOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NjozOVrOF9wsEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NjozOVrOF9wsEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNTE2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This class is a helper class to enabled testing svn repositories\n          \n          \n            \n             * This class is a helper class to enable testing svn repositories", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400305168", "createdAt": "2020-03-30T15:56:39Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.team.test/src/de/dlr/sc/virsat/team/svn/CreateSvnServerOperation.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.team.svn;\r\n+\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.team.svn.core.SVNMessages;\r\n+import org.eclipse.team.svn.core.connector.ISVNManager;\r\n+import org.eclipse.team.svn.core.extension.CoreExtensionsManager;\r\n+import org.eclipse.team.svn.core.operation.AbstractActionOperation;\r\n+import org.eclipse.team.svn.core.operation.SVNProgressMonitor;\r\n+\r\n+/**\r\n+ * This class is a helper class to enabled testing svn repositories\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQwOTQzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.team/src/de/dlr/sc/virsat/team/IVirSatVersionControlBackend.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NzoxOVrOF9wuGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NzoxOVrOF9wuGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNTY4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param pathRepoLoacl the local path in which to checkout the project.\n          \n          \n            \n            \t * @param pathRepoLocal the local path in which to checkout the project.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400305689", "createdAt": "2020-03-30T15:57:19Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.team/src/de/dlr/sc/virsat/team/IVirSatVersionControlBackend.java", "diffHunk": "@@ -35,11 +34,14 @@\n \t/**\r\n \t * Creates a local checkout of a project from the version control system\r\n \t * @param projectDescription the project metadata\r\n+\t * @param pathRepoLoacl the local path in which to checkout the project.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQxMTQ5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.team/src/de/dlr/sc/virsat/team/IVirSatVersionControlBackend.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1Nzo0NlrOF9wvWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1Nzo0NlrOF9wvWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNjAwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t *  .git or .svn folders should be create within. This folder is usually not your \n          \n          \n            \n            \t *  .git or .svn folders should be created within. This folder is usually not your", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400306008", "createdAt": "2020-03-30T15:57:46Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.team/src/de/dlr/sc/virsat/team/IVirSatVersionControlBackend.java", "diffHunk": "@@ -35,11 +34,14 @@\n \t/**\r\n \t * Creates a local checkout of a project from the version control system\r\n \t * @param projectDescription the project metadata\r\n+\t * @param pathRepoLoacl the local path in which to checkout the project.\r\n+\t *  .git or .svn folders should be create within. This folder is usually not your \r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjQ4NTI0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoxMzo1NVrOF9xc4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDowMTozNlrOF-OSuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNzY2NQ==", "bodyText": "Why do we need this field?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400317665", "createdAt": "2020-03-30T16:13:55Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepository.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+import java.util.Arrays;\r\n+import java.util.Comparator;\r\n+import java.util.Objects;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.resources.IProjectDescription;\r\n+import org.eclipse.core.resources.IWorkspace;\r\n+import org.eclipse.core.resources.IWorkspaceRoot;\r\n+import org.eclipse.core.resources.IWorkspaceRunnable;\r\n+import org.eclipse.core.resources.ResourcesPlugin;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+\r\n+import de.dlr.sc.virsat.commons.exception.AtomicException;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatEditingDomainRegistry;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\r\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\r\n+import de.dlr.sc.virsat.project.structure.VirSatProjectCommons;\r\n+import de.dlr.sc.virsat.project.structure.nature.VirSatProjectNature;\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.team.IVirSatVersionControlBackend;\r\n+import de.dlr.sc.virsat.team.VersionControlBackendProvider;\r\n+\r\n+/**\r\n+ * Entry point to the eclipse project.\r\n+ * The class maps a project to a repository of either SVN or GIT.\r\n+ * It also offers functionality to checkout a project or commit to it.\r\n+ */\r\n+public class ServerRepository {\r\n+\t\r\n+\tprivate RepositoryConfiguration repositoryConfiguration;\r\n+\tprivate IProject project;\r\n+\tprivate VirSatResourceSet resourceSet;\r\n+\tprivate VirSatTransactionalEditingDomain ed;\r\n+\tprivate IVirSatVersionControlBackend versionControlBackEnd;\r\n+\t@SuppressWarnings(\"unused\")\r\n+\tprivate File localRepositoryHome;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc5MDIwMQ==", "bodyText": "Removed it, there was an initial idea, but not needed anymore.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400790201", "createdAt": "2020-03-31T10:01:36Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepository.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+import java.util.Arrays;\r\n+import java.util.Comparator;\r\n+import java.util.Objects;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.resources.IProjectDescription;\r\n+import org.eclipse.core.resources.IWorkspace;\r\n+import org.eclipse.core.resources.IWorkspaceRoot;\r\n+import org.eclipse.core.resources.IWorkspaceRunnable;\r\n+import org.eclipse.core.resources.ResourcesPlugin;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+\r\n+import de.dlr.sc.virsat.commons.exception.AtomicException;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatEditingDomainRegistry;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\r\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\r\n+import de.dlr.sc.virsat.project.structure.VirSatProjectCommons;\r\n+import de.dlr.sc.virsat.project.structure.nature.VirSatProjectNature;\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.team.IVirSatVersionControlBackend;\r\n+import de.dlr.sc.virsat.team.VersionControlBackendProvider;\r\n+\r\n+/**\r\n+ * Entry point to the eclipse project.\r\n+ * The class maps a project to a repository of either SVN or GIT.\r\n+ * It also offers functionality to checkout a project or commit to it.\r\n+ */\r\n+public class ServerRepository {\r\n+\t\r\n+\tprivate RepositoryConfiguration repositoryConfiguration;\r\n+\tprivate IProject project;\r\n+\tprivate VirSatResourceSet resourceSet;\r\n+\tprivate VirSatTransactionalEditingDomain ed;\r\n+\tprivate IVirSatVersionControlBackend versionControlBackEnd;\r\n+\t@SuppressWarnings(\"unused\")\r\n+\tprivate File localRepositoryHome;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNzY2NQ=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjUyNjcwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjoyMzozMlrOF9x2ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDowMjo0OFrOF-OVgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNDI1OQ==", "bodyText": "Let's maybe move this constant inside of the method where it's used?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400324259", "createdAt": "2020-03-30T16:23:32Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepository.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+import java.util.Arrays;\r\n+import java.util.Comparator;\r\n+import java.util.Objects;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.resources.IProjectDescription;\r\n+import org.eclipse.core.resources.IWorkspace;\r\n+import org.eclipse.core.resources.IWorkspaceRoot;\r\n+import org.eclipse.core.resources.IWorkspaceRunnable;\r\n+import org.eclipse.core.resources.ResourcesPlugin;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+\r\n+import de.dlr.sc.virsat.commons.exception.AtomicException;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatEditingDomainRegistry;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\r\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\r\n+import de.dlr.sc.virsat.project.structure.VirSatProjectCommons;\r\n+import de.dlr.sc.virsat.project.structure.nature.VirSatProjectNature;\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.team.IVirSatVersionControlBackend;\r\n+import de.dlr.sc.virsat.team.VersionControlBackendProvider;\r\n+\r\n+/**\r\n+ * Entry point to the eclipse project.\r\n+ * The class maps a project to a repository of either SVN or GIT.\r\n+ * It also offers functionality to checkout a project or commit to it.\r\n+ */\r\n+public class ServerRepository {\r\n+\t\r\n+\tprivate RepositoryConfiguration repositoryConfiguration;\r\n+\tprivate IProject project;\r\n+\tprivate VirSatResourceSet resourceSet;\r\n+\tprivate VirSatTransactionalEditingDomain ed;\r\n+\tprivate IVirSatVersionControlBackend versionControlBackEnd;\r\n+\t@SuppressWarnings(\"unused\")\r\n+\tprivate File localRepositoryHome;\r\n+\tprivate File localRepository;\r\n+\t\r\n+\tprotected static final String PREFIX_LOCAL_REPO_NAME = \"repo_\";\r\n+\t/**\r\n+\t * Constructor for a Server Repository.\r\n+\t * @param localRepositoryHome The repository home in which mostly all projects checkout to.\r\n+\t *  The actual checkout will happen into a sub folder with the name of the project. \r\n+\t * @param repositoryConfiguration a Repository configuration carrying all important information such as username password remote uri etc.\r\n+\t * @throws URISyntaxException Make sure the URI is well formed.\r\n+\t */\r\n+\tpublic ServerRepository(File localRepositoryHome, RepositoryConfiguration repositoryConfiguration) throws URISyntaxException {\r\n+\t\tthis.repositoryConfiguration = repositoryConfiguration;\r\n+\t\tthis.localRepositoryHome = localRepositoryHome;\r\n+\t\tthis.localRepository = new File(localRepositoryHome, PREFIX_LOCAL_REPO_NAME + repositoryConfiguration.getProjectName());\r\n+\t\t\r\n+\t\t//checkout the project to workspace\r\n+\t\tString userName = Objects.toString(repositoryConfiguration.getFunctionalAccountName(), \"\");\r\n+\t\tString userPass = Objects.toString(repositoryConfiguration.getFunctionalAccountPassword(), \"\");\r\n+\t\r\n+\t\tVersionControlBackendProvider backendProvider = new VersionControlBackendProvider(\r\n+\t\t\t\trepositoryConfiguration.getBackend(), \r\n+\t\t\t\tnew URI(repositoryConfiguration.getRemoteUri()), \r\n+\t\t\t\tuserName, userPass);\r\n+\t\tversionControlBackEnd = backendProvider.createBackendImplementation();\r\n+\t}\r\n+\t\r\n+\tpublic RepositoryConfiguration getRepositoryConfiguration() {\r\n+\t\treturn repositoryConfiguration;\r\n+\t}\r\n+\r\n+\tpublic File getLocalRepositoryPath() {\r\n+\t\treturn localRepository;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Method to create a project description which makes sure that\r\n+\t * the location is set to the correct path within the repository home.\r\n+\t * @return returns the well constructed project description\r\n+\t */\r\n+\tpublic IProjectDescription getProjectDescription() {\r\n+\t\tString projectName = repositoryConfiguration.getProjectName();\t\t\r\n+\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();\r\n+\t\tIProjectDescription projectDescription = workspace.newProjectDescription(projectName);\r\n+\t\t\r\n+\t\tString relativeLocalProjectPath = repositoryConfiguration.getLocalPath();\r\n+\t\tFile localRepositoryPath = getLocalRepositoryPath();\r\n+\t\tFile projectInLocalRepositoryPath = new File(localRepositoryPath, relativeLocalProjectPath);\r\n+\t\tprojectDescription.setLocationURI(projectInLocalRepositoryPath.toURI());\r\n+\t\t\r\n+\t\treturn projectDescription;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Call this method to checkout a repository. The method will also\r\n+\t * take care of transforming the project into a proper virtual satellite\r\n+\t * project if it is not yet one. This means if checking out from an empty repository\r\n+\t * a new project will be created which is completly set up and can be shared\r\n+\t * with the next commit.\r\n+\t * @throws Exception\r\n+\t */\r\n+\tpublic void checkoutRepository() throws Exception {\r\n+\t\tAtomicException<Exception> atomicException = new AtomicException<>();\r\n+\t\t\r\n+\t\trunInWorkspace((progress) -> {\r\n+\t\t\ttry {\r\n+\t\t\t\t\r\n+\t\t\t\tIProjectDescription projectDescription = getProjectDescription();\r\n+\t\t\t\tFile localRepositoryPath = getLocalRepositoryPath();\r\n+\t\t\t\t\t\t\t\t\r\n+\t\t\t\tproject = versionControlBackEnd.checkout(\r\n+\t\t\t\t\t\tprojectDescription,\r\n+\t\t\t\t\t\tlocalRepositoryPath,\r\n+\t\t\t\t\t\trepositoryConfiguration.getRemoteUri().toString(),\r\n+\t\t\t\t\t\tnew NullProgressMonitor()\r\n+\t\t\t\t);\r\n+\t\t\t\r\n+\t\t\t\tcreateVirSatProjectIfNeeded();\r\n+\t\t\t\t\r\n+\t\t\t\tretrieveEdAndResurceSetFromConfiguration();\r\n+\t\t\t} catch (Exception e) {\r\n+\t\t\t\tatomicException.set(e);\r\n+\t\t\t}\r\n+\t\t});\t\r\n+\t\t\r\n+\t\tatomicException.throwIfSet();\r\n+\t}\r\n+\t\r\n+\tprotected void createVirSatProjectIfNeeded() throws CoreException {\r\n+\t\tboolean hasVirSatNature = Arrays.asList(project.getDescription().getNatureIds()).contains(VirSatProjectNature.NATURE_ID);\r\n+\t\tif (!hasVirSatNature) {\r\n+\t\t\tVirSatProjectCommons.createNewProjectRunnable(project).run(new NullProgressMonitor());\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Removes a repository and the project in the workspace as well\r\n+\t * @throws CoreException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void removeRepository() throws CoreException, IOException {\r\n+\t\tAtomicException<IOException> atomicException = new AtomicException<>();\r\n+\t\t\r\n+\t\trunInWorkspace((progress) -> {\r\n+\t\t\ttry {\r\n+\t\t\t\tretrieveProjectFromConfiguration();\r\n+\t\t\t\tproject.delete(true, true, progress);\r\n+\r\n+\t\t\t\tPath localRepositoryPath = getLocalRepositoryPath().toPath();\r\n+\t\t\t\tFiles.walk(localRepositoryPath).sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);\r\n+\r\n+\t\t\t\tproject = null;\r\n+\t\t\t\tresourceSet = null;\r\n+\t\t\t\ted = null;\r\n+\r\n+\t\t\t} catch (IOException e) {\r\n+\t\t\t\tatomicException.set(e);\r\n+\t\t\t}\r\n+\t\t});\r\n+\t\t\r\n+\t\tatomicException.throwIfSet();\r\n+\t}\r\n+\t\r\n+\tpublic static final String SERVER_REPOSITORY_COMMIT_PUSH_MESSAGE = \"Server Local Commit Before Push: \";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc5MDkxNA==", "bodyText": "I don't agree. Having this message public allows others to access and search for this message in their code.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400790914", "createdAt": "2020-03-31T10:02:48Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/repository/ServerRepository.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.repository;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+import java.nio.file.Files;\r\n+import java.nio.file.Path;\r\n+import java.util.Arrays;\r\n+import java.util.Comparator;\r\n+import java.util.Objects;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.resources.IProjectDescription;\r\n+import org.eclipse.core.resources.IWorkspace;\r\n+import org.eclipse.core.resources.IWorkspaceRoot;\r\n+import org.eclipse.core.resources.IWorkspaceRunnable;\r\n+import org.eclipse.core.resources.ResourcesPlugin;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+\r\n+import de.dlr.sc.virsat.commons.exception.AtomicException;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatEditingDomainRegistry;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\r\n+import de.dlr.sc.virsat.project.resources.VirSatResourceSet;\r\n+import de.dlr.sc.virsat.project.structure.VirSatProjectCommons;\r\n+import de.dlr.sc.virsat.project.structure.nature.VirSatProjectNature;\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.team.IVirSatVersionControlBackend;\r\n+import de.dlr.sc.virsat.team.VersionControlBackendProvider;\r\n+\r\n+/**\r\n+ * Entry point to the eclipse project.\r\n+ * The class maps a project to a repository of either SVN or GIT.\r\n+ * It also offers functionality to checkout a project or commit to it.\r\n+ */\r\n+public class ServerRepository {\r\n+\t\r\n+\tprivate RepositoryConfiguration repositoryConfiguration;\r\n+\tprivate IProject project;\r\n+\tprivate VirSatResourceSet resourceSet;\r\n+\tprivate VirSatTransactionalEditingDomain ed;\r\n+\tprivate IVirSatVersionControlBackend versionControlBackEnd;\r\n+\t@SuppressWarnings(\"unused\")\r\n+\tprivate File localRepositoryHome;\r\n+\tprivate File localRepository;\r\n+\t\r\n+\tprotected static final String PREFIX_LOCAL_REPO_NAME = \"repo_\";\r\n+\t/**\r\n+\t * Constructor for a Server Repository.\r\n+\t * @param localRepositoryHome The repository home in which mostly all projects checkout to.\r\n+\t *  The actual checkout will happen into a sub folder with the name of the project. \r\n+\t * @param repositoryConfiguration a Repository configuration carrying all important information such as username password remote uri etc.\r\n+\t * @throws URISyntaxException Make sure the URI is well formed.\r\n+\t */\r\n+\tpublic ServerRepository(File localRepositoryHome, RepositoryConfiguration repositoryConfiguration) throws URISyntaxException {\r\n+\t\tthis.repositoryConfiguration = repositoryConfiguration;\r\n+\t\tthis.localRepositoryHome = localRepositoryHome;\r\n+\t\tthis.localRepository = new File(localRepositoryHome, PREFIX_LOCAL_REPO_NAME + repositoryConfiguration.getProjectName());\r\n+\t\t\r\n+\t\t//checkout the project to workspace\r\n+\t\tString userName = Objects.toString(repositoryConfiguration.getFunctionalAccountName(), \"\");\r\n+\t\tString userPass = Objects.toString(repositoryConfiguration.getFunctionalAccountPassword(), \"\");\r\n+\t\r\n+\t\tVersionControlBackendProvider backendProvider = new VersionControlBackendProvider(\r\n+\t\t\t\trepositoryConfiguration.getBackend(), \r\n+\t\t\t\tnew URI(repositoryConfiguration.getRemoteUri()), \r\n+\t\t\t\tuserName, userPass);\r\n+\t\tversionControlBackEnd = backendProvider.createBackendImplementation();\r\n+\t}\r\n+\t\r\n+\tpublic RepositoryConfiguration getRepositoryConfiguration() {\r\n+\t\treturn repositoryConfiguration;\r\n+\t}\r\n+\r\n+\tpublic File getLocalRepositoryPath() {\r\n+\t\treturn localRepository;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Method to create a project description which makes sure that\r\n+\t * the location is set to the correct path within the repository home.\r\n+\t * @return returns the well constructed project description\r\n+\t */\r\n+\tpublic IProjectDescription getProjectDescription() {\r\n+\t\tString projectName = repositoryConfiguration.getProjectName();\t\t\r\n+\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();\r\n+\t\tIProjectDescription projectDescription = workspace.newProjectDescription(projectName);\r\n+\t\t\r\n+\t\tString relativeLocalProjectPath = repositoryConfiguration.getLocalPath();\r\n+\t\tFile localRepositoryPath = getLocalRepositoryPath();\r\n+\t\tFile projectInLocalRepositoryPath = new File(localRepositoryPath, relativeLocalProjectPath);\r\n+\t\tprojectDescription.setLocationURI(projectInLocalRepositoryPath.toURI());\r\n+\t\t\r\n+\t\treturn projectDescription;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Call this method to checkout a repository. The method will also\r\n+\t * take care of transforming the project into a proper virtual satellite\r\n+\t * project if it is not yet one. This means if checking out from an empty repository\r\n+\t * a new project will be created which is completly set up and can be shared\r\n+\t * with the next commit.\r\n+\t * @throws Exception\r\n+\t */\r\n+\tpublic void checkoutRepository() throws Exception {\r\n+\t\tAtomicException<Exception> atomicException = new AtomicException<>();\r\n+\t\t\r\n+\t\trunInWorkspace((progress) -> {\r\n+\t\t\ttry {\r\n+\t\t\t\t\r\n+\t\t\t\tIProjectDescription projectDescription = getProjectDescription();\r\n+\t\t\t\tFile localRepositoryPath = getLocalRepositoryPath();\r\n+\t\t\t\t\t\t\t\t\r\n+\t\t\t\tproject = versionControlBackEnd.checkout(\r\n+\t\t\t\t\t\tprojectDescription,\r\n+\t\t\t\t\t\tlocalRepositoryPath,\r\n+\t\t\t\t\t\trepositoryConfiguration.getRemoteUri().toString(),\r\n+\t\t\t\t\t\tnew NullProgressMonitor()\r\n+\t\t\t\t);\r\n+\t\t\t\r\n+\t\t\t\tcreateVirSatProjectIfNeeded();\r\n+\t\t\t\t\r\n+\t\t\t\tretrieveEdAndResurceSetFromConfiguration();\r\n+\t\t\t} catch (Exception e) {\r\n+\t\t\t\tatomicException.set(e);\r\n+\t\t\t}\r\n+\t\t});\t\r\n+\t\t\r\n+\t\tatomicException.throwIfSet();\r\n+\t}\r\n+\t\r\n+\tprotected void createVirSatProjectIfNeeded() throws CoreException {\r\n+\t\tboolean hasVirSatNature = Arrays.asList(project.getDescription().getNatureIds()).contains(VirSatProjectNature.NATURE_ID);\r\n+\t\tif (!hasVirSatNature) {\r\n+\t\t\tVirSatProjectCommons.createNewProjectRunnable(project).run(new NullProgressMonitor());\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Removes a repository and the project in the workspace as well\r\n+\t * @throws CoreException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void removeRepository() throws CoreException, IOException {\r\n+\t\tAtomicException<IOException> atomicException = new AtomicException<>();\r\n+\t\t\r\n+\t\trunInWorkspace((progress) -> {\r\n+\t\t\ttry {\r\n+\t\t\t\tretrieveProjectFromConfiguration();\r\n+\t\t\t\tproject.delete(true, true, progress);\r\n+\r\n+\t\t\t\tPath localRepositoryPath = getLocalRepositoryPath().toPath();\r\n+\t\t\t\tFiles.walk(localRepositoryPath).sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);\r\n+\r\n+\t\t\t\tproject = null;\r\n+\t\t\t\tresourceSet = null;\r\n+\t\t\t\ted = null;\r\n+\r\n+\t\t\t} catch (IOException e) {\r\n+\t\t\t\tatomicException.set(e);\r\n+\t\t\t}\r\n+\t\t});\r\n+\t\t\r\n+\t\tatomicException.throwIfSet();\r\n+\t}\r\n+\t\r\n+\tpublic static final String SERVER_REPOSITORY_COMMIT_PUSH_MESSAGE = \"Server Local Commit Before Push: \";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNDI1OQ=="}, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjcwMzU1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowNTo0NFrOF9zk4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowNTo0NFrOF9zk4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MjQ4MA==", "bodyText": "Commit message contains empty string?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/544#discussion_r400352480", "createdAt": "2020-03-30T17:05:44Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepositoryTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.repository;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.api.errors.GitAPIException;\n+import org.eclipse.jgit.revwalk.RevCommit;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.project.structure.VirSatProjectCommons;\n+import de.dlr.sc.virsat.project.test.AProjectTestCase;\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\n+import de.dlr.sc.virsat.team.Activator;\n+import de.dlr.sc.virsat.team.VersionControlSystem;\n+\n+public class ServerRepositoryTest extends AProjectTestCase {\n+\n+\tprivate RepositoryConfiguration testRepoConfig;\n+\tprivate Path pathRepoRemote;\n+\tprivate File localRepoHome;\n+\t\n+\tprivate static final String TEST_PROJECT_NAME = \"LokalVirSatProject\";\n+\t\n+\t@Before\n+\tpublic void setUp() throws CoreException {\n+\t\tsuper.setUp();\n+\t\ttry {\n+\t\t\tpathRepoRemote = Files.createTempDirectory(\"VirtualSatelliteGitRemote_\");\n+\t\t\tlocalRepoHome = Files.createTempDirectory(\"VirtualSatelliteLocalRepoHome_\").toFile();\n+\t\t\tFile fileGitRemoteRepo = pathRepoRemote.toFile();\n+\t\t\tGit.init().setDirectory(fileGitRemoteRepo).setBare(true).call();\n+\t\t} catch (IOException | IllegalStateException | GitAPIException e) {\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(),\n+\t\t\t\t\t\"Error during repository setup\", e));\n+\t\t}\n+\t\t\n+\t\ttestRepoConfig = new RepositoryConfiguration(\n+\t\t\t\tTEST_PROJECT_NAME,\n+\t\t\t\t\"\",\n+\t\t\t\tpathRepoRemote.toUri().toString(),\n+\t\t\t\tVersionControlSystem.GIT,\n+\t\t\t\t\"\",\n+\t\t\t\t\"\"\n+\t\t); \n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws CoreException {\n+\t\ttry {\n+\t\t\tFiles.walk(pathRepoRemote).sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);\n+\t\t\tFiles.walk(localRepoHome.toPath()).sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);\n+\t\t\tResourcesPlugin.getWorkspace().getRoot().getProject(TEST_PROJECT_NAME).delete(true,  true, null);\n+\t\t} catch (IOException e) {\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(),\n+\t\t\t\t\t\"Error during temp remote directory creation\", e));\n+\t\t}\n+\t\tsuper.tearDown();\n+\t}\n+\n+\t@Test\n+\tpublic void testCheckoutRepository() throws Exception {\n+\t\tServerRepository testServerRepository = new ServerRepository(localRepoHome, testRepoConfig);\n+\t\t\n+\t\ttestServerRepository.checkoutRepository();\n+\t\t\n+\t\tFile localRepositoryFolder = testServerRepository.getLocalRepositoryPath();\n+\t\tFile localRepositoryGitFolder = new File(localRepositoryFolder, \".git/\");\n+\t\t\n+\t\tassertTrue(\"Local Repository Got Checked out\", localRepositoryGitFolder.exists());\n+\t\t\n+\t\tIProject checkedOutProject = ResourcesPlugin.getWorkspace().getRoot().getProject(testRepoConfig.getProjectName());\n+\t\tassertTrue(\"The checked Out Project exists\", checkedOutProject.exists());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testCheckoutTwoProjectsFromOneRepository() throws Exception {\n+\t\t// Create two configurations with two Projects but both in their specific subfolder\n+\t\t// and the same remote repository\n+\t\tfinal String TEST_PROJECT_A = \"testProjectA\";\n+\t\tfinal String TEST_PROJECT_B = \"testProjectB\";\n+\t\tRepositoryConfiguration testRepoConfigA = testRepoConfig;\n+\t\tRepositoryConfiguration testRepoConfigB = new RepositoryConfiguration(testRepoConfig);\n+\t\ttestRepoConfigA.setProjectName(TEST_PROJECT_A);\n+\t\ttestRepoConfigB.setProjectName(TEST_PROJECT_B);\n+\t\ttestRepoConfigA.setLocalPath(TEST_PROJECT_A);\n+\t\ttestRepoConfigB.setLocalPath(TEST_PROJECT_B);\n+\t\n+\t\tServerRepository testServerRepositoryA = new ServerRepository(localRepoHome, testRepoConfigA);\n+\t\tServerRepository testServerRepositoryB = new ServerRepository(localRepoHome, testRepoConfigB);\n+\t\t\n+\t\ttestServerRepositoryA.checkoutRepository();\n+\t\t\n+\t\t// Make sure there is no .git file in the repo local home\n+\t\tassertFalse(\"there is no .git in repo home\", new File(localRepoHome, \".git/\").exists());\n+\t\t\n+\t\t// make sure that the parent to the project folder has the .git\n+\t\tFile testProjectPathA = testServerRepositoryA.getProject().getRawLocation().toFile();\n+\t\tFile testProjectRepoA = testProjectPathA.getParentFile();\n+\t\tassertFalse(\"there is no .git in project\", new File(testProjectPathA, \".git/\").exists());\n+\t\tassertTrue(\"there is .git in repo\", new File(testProjectRepoA, \".git/\").exists());\n+\t\t\n+\t\t// Checkin projectA to make sure there are two projects when actually checking out B\n+\t\ttestServerRepositoryA.syncRepository();\n+\t\t\n+\t\ttestServerRepositoryB.checkoutRepository();\n+\t\tFile testProjectPathB = testServerRepositoryB.getProject().getRawLocation().toFile();\n+\t\tFile testProjectRepoB = testProjectPathB.getParentFile();\n+\t\tassertNotEquals(\"Path of Project A is different from Project B\", testProjectPathA, testProjectPathB);\n+\t\tassertFalse(\"there is no .git in project\", new File(testProjectPathB, \".git/\").exists());\n+\t\tassertTrue(\"there is .git in repo\", new File(testProjectRepoB, \".git/\").exists());\n+\t\t\n+\t\t// Files of ProjectA will also exist in repo of ProjectB\n+\t\tassertTrue(\"ProjectA got checked out in ProjectB\", new File(testProjectRepoB, TEST_PROJECT_A).exists());\n+\t\t\n+\t\t// now sync project B to send changes to the server, check that they are not yet in A, sync a and show project B appears there\n+\t\ttestServerRepositoryB.syncRepository();\n+\t\tassertFalse(\"ProjectB is not yet in ProjectA\", new File(testProjectRepoA, TEST_PROJECT_B).exists());\n+\t\t\n+\t\ttestServerRepositoryA.syncRepository();\n+\t\tassertTrue(\"ProjectB is now in ProjectA\", new File(testProjectRepoA, TEST_PROJECT_B).exists());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testRetrieveEdAndResurceSetFromConfiguration() throws URISyntaxException, CoreException {\n+\t\tServerRepository testServerRepository = new ServerRepository(localRepoHome, testRepoConfig);\n+\t\t\n+\t\tassertNull(\"No project retrieved yet\", testServerRepository.getProject());\n+\t\ttestServerRepository.retrieveProjectFromConfiguration();\n+\t\tassertNotNull(\"Project Exists\", testServerRepository.getProject());\n+\t\t\n+\t\ttestServerRepository.retrieveEdAndResurceSetFromConfiguration();\n+\t\t\n+\t\tassertNotNull(\"EditingDomain got set\", testServerRepository.getEd());\n+\t\tassertNotNull(\"ResourceSet got set\", testServerRepository.getResourceSet());\n+\t}\n+\t\n+\t@Test \n+\tpublic void testCreateVirSatProjectIfNeeded() throws CoreException, URISyntaxException {\n+\t\tServerRepository testServerRepository = new ServerRepository(localRepoHome, testRepoConfig);\n+\t\ttestServerRepository.retrieveProjectFromConfiguration();\n+\t\tIProject createdProject = testServerRepository.getProject();\n+\t\t\n+\t\tassertFalse(\"Project is not yet created\", createdProject.exists());\n+\t\tcreatedProject.create(null);\n+\t\tcreatedProject.open(null);\n+\t\t\n+\t\tassertFalse(\"Project is not yet a virsat project\", VirSatProjectCommons.getAllVirSatProjects(ResourcesPlugin.getWorkspace()).contains(createdProject));\n+\t\t\n+\t\ttestServerRepository.createVirSatProjectIfNeeded();\n+\t\n+\t\tassertTrue(\"Project is a virsat project now\", VirSatProjectCommons.getAllVirSatProjects(ResourcesPlugin.getWorkspace()).contains(createdProject));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSyncProject() throws Exception {\n+\t\tServerRepository testServerRepository = new ServerRepository(localRepoHome, testRepoConfig);\n+\t\ttestServerRepository.checkoutRepository();\n+\n+\t\tIProject createdProject = testServerRepository.getProject();\t\t\n+\t\tassertTrue(\"Project is a virsat project now\", VirSatProjectCommons.getAllVirSatProjects(ResourcesPlugin.getWorkspace()).contains(createdProject));\n+\n+\t\ttestServerRepository.syncRepository();\n+\t\t\n+\t\tboolean logEntriesExist = Git.open(pathRepoRemote.toFile()).log().call().iterator().hasNext();\n+\t\tassertTrue(\"There are logs now\", logEntriesExist);\n+\t\n+\t\tRevCommit logAfterSync = Git.open(pathRepoRemote.toFile()).log().call().iterator().next();\n+\t\t\n+\t\tassertThat(\"remote repo does not yet have a commit as expected\", logAfterSync.getFullMessage(), containsString(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb78b625d11b87faa36a9db57f0d32c1126f37b3"}, "originalPosition": 201}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 712, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}