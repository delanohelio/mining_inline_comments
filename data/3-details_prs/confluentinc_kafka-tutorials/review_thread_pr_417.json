{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3OTExNzM0", "number": 417, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowMjoyOFrOEC8nEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowMjoyOFrOEC8nEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTI1NjUxOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/serialization/ksql/markup/dev/create-json-movies.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowMjoyOFrOGftlww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzowMjoyOFrOGftlww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwNTk4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The stream stores the movie's id, `MOVIE_ID`, in the Kafka message's key, but could just as easily store it in a the value if we removed the `KEY` classifier.\n          \n          \n            \n            The stream stores the movie's id, `MOVIE_ID`, in the Kafka message's key, but could just as easily store it in the value if we removed the `KEY` classifier.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/417#discussion_r435905987", "createdAt": "2020-06-05T13:02:28Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/serialization/ksql/markup/dev/create-json-movies.adoc", "diffHunk": "@@ -1,4 +1,5 @@\n The first thing we'll need is to create a Kafka topic and stream to represent the movie data. We declare the `VALUE_FORMAT` of the stream to be `json` to denote the format of the events.\n+The stream stores the movie's id, `MOVIE_ID`, in the Kafka message's key, but could just as easily store it in a the value if we removed the `KEY` classifier.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f86c6f18b86533cc4b7535d471037fb5df1d2b"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3892, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}