{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTkyOTU0", "number": 454, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyNzozOVrOEJMUQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyNzozOVrOEJMUQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDc0NDMzOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyNzozOVrOGpnH7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODoxNDoxMFrOGpqThA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NTgwNw==", "bodyText": "Now you can play with the environment, some sample commands shown below.\ndocker exec broker kafka-topics --list --bootstrap-server localhost:9092\ndocker exec -it ksqldb-cli ksql http://ksqldb-server:8088   \n\nDon't forget to shutdown Docker containers when you are done\ndocker-compose down --volumes", "url": "https://github.com/confluentinc/kafka-tutorials/pull/454#discussion_r446285807", "createdAt": "2020-06-26T16:27:39Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -253,30 +252,68 @@ Lastly, create a Makefile in the `code` directory to invoke the harness runner a\n \n ## Testing Locally\n \n-Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  You should note the harness file is in the [YAML file format](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generate the rendered tutorial structure and validate any output of tutorial steps against expected values.\n+The [Kafka Tutorials microsite](https://kafka-tutorials.confluent.io/) shows how to manually execute each tutorial step-by-step.\n+However, there are some scenarios when a user may want to run and test a tutorial in a more automated fashion:\n \n-New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove parts as needed.\n+1. End-to-end: user makes a small change to the code and wants to validate that the tutorial still works end-to-end\n+2. Run-and-play: user runs a tutorial and wants to leave it running to play with the environment\n \n-#### TL;DR\n+This section describes how you can do this using the `harness-runner` to programmatically run a single tutorial.\n \n-To run a tutorial programmatically, do the following steps. Note to follow these instructions you'll need to check out the kafka-tutorials repo:\n+### TL;DR\n \n-1. git clone https://github.com/confluentinc/kafka-tutorials.git\n-2. cd kafka-tutorials\n+To run a tutorial programmatically, do the following steps.\n \n-Once you have the kafka-tutorials repo checked out do the following:\n+1. Check out the kafka-tutorials GitHub repo:\n \n-1. Create a `Dockerfile` with the following content:\n-    ```text\n-     FROM python:3.7-slim\n-     RUN pip3 install pyyaml\n-    ```\n-2. Then run the following command to build and execute the docker image:\n-    * `docker build -t runner . ; docker run -v ${PWD}/harness_runner:/harness_runner/ -it --rm runner bash -c 'cd /harness_runner/ && pip3 install -e .'`\n+```bash\n+git clone https://github.com/confluentinc/kafka-tutorials.git\n+cd kafka-tutorials\n+```\n+\n+2. Install the packages for the harness runner.\n+\n+If you have `pip3` installed locally:\n+\n+```bash\n+(cd /harness_runner/ && pip3 install -e .)\n+```\n+\n+If you don't have `pip3` installed locally, create a `Dockerfile` with the following content:\n+\n+```text\n+FROM python:3.7-slim\n+RUN pip3 install pyyaml\n+```\n+\n+and then run the following command to build and execute the Docker image:\n+\n+```\n+docker build -t runner . ; docker run -v ${PWD}/harness_runner:/harness_runner/ -it --rm runner bash -c 'cd /harness_runner/ && pip3 install -e .'\n+```\n+\n+3. Install [gradle](https://gradle.org/install/) for tutorials that compile any code.\n \n-3. run the `make` command\n-   * `(cd _includes/tutorials/<tutorial name>/<type>/code && make)` where type is one of `ksql | kstreams | kafka`.\n-   * For example `(cd _includes/tutorials/transforming/kstreams/code/ && make)`\n+4. End-to-end: run the harness runner for a single tutorial by calling `make`, across all `dev`, `test`, and `prod` stages, to validate it works end-to-end. Identify the tutorial you want and then run `make`. Note that this destroys all the resources and Docker containers it created, so it cleans up after itself.  Format: `(cd _includes/tutorials/<tutorial name>/<type>/code && make)` where type is one of `ksql | kstreams | kafka`. Example:\n+\n+```\n+(cd _includes/tutorials/transforming/kstreams/code/ && make)\n+```\n+\n+5. Run-and-play: run the harness runner for a single tutorial by calling `make SEQUENCE=\"dev, test\"`, just across `dev` and `test` stages, which leaves all resources and Docker containers running so you can then play with it.  Format: `(cd _includes/tutorials/<tutorial name>/<type>/code && make SEQUENCE=\"dev, test\")` where type is one of `ksql | kstreams | kafka`. Example:\n+\n+```\n+(cd _includes/tutorials/transforming/kstreams/code/ && make SEQUENCE=\"dev, test\")\n+```\n+\n+Now you can play with the environment, some sample commands shown below.  Don't forget to shutdown Docker containers when you are done.\n+\n+```\n+docker exec broker kafka-topics --list --bootstrap-server localhost:9092\n+docker exec -it ksqldb-cli ksql http://ksqldb-server:8088               \n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bcdff48ec12b19dc7814d19770d33c4e825bcce"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyMzYzMQ==", "bodyText": "@bbejeck docker-compose  commands work only when in the same directory as the docker-compose.yml file.  Given that we used paranthesis above, docker-compose down won't work.\nEven more so, when I go to the code directory, docker-compose down still doesn't work, even when specifying the file:\n[13:41:49] ~/git/kafka-tutorials/_includes/tutorials/transforming/kstreams/code(GH-453) \u2717: docker-compose -f docker-compose.yml down\nRemoving network code_default\nWARNING: Network code_default not found.\n\nThis is related to the fact that the network name is actually the tutorial name?\n[13:44:42] ~/git/kafka-tutorials(GH-453) \u2717: docker network ls\nNETWORK ID          NAME                             DRIVER              SCOPE\nd4df5164f7b9        aggregate-count_default          bridge              local\n75520b89149e        bridge                           bridge              local\n4c18151eaff9        cp-quickstart_default            bridge              local\nd639ef2917d8        deserialization-errors_default   bridge              local\n37b64e95c60b        filter-events_default            bridge              local\nd6828ef3dd7b        host                             host                local\n8bd7f7b2b6e8        none                             null                local\n3d89dfb0a11b        transform-stream_default         bridge              local\n71c10396a7c3        udf_default                      bridge              local\n77adee89a504        utils_default                    bridge              local\n\nWhat if we just tell users how to get docker container info with:\ndocker container ls\ndocker container rm -f <container id>", "url": "https://github.com/confluentinc/kafka-tutorials/pull/454#discussion_r446323631", "createdAt": "2020-06-26T17:43:47Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -253,30 +252,68 @@ Lastly, create a Makefile in the `code` directory to invoke the harness runner a\n \n ## Testing Locally\n \n-Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  You should note the harness file is in the [YAML file format](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generate the rendered tutorial structure and validate any output of tutorial steps against expected values.\n+The [Kafka Tutorials microsite](https://kafka-tutorials.confluent.io/) shows how to manually execute each tutorial step-by-step.\n+However, there are some scenarios when a user may want to run and test a tutorial in a more automated fashion:\n \n-New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove parts as needed.\n+1. End-to-end: user makes a small change to the code and wants to validate that the tutorial still works end-to-end\n+2. Run-and-play: user runs a tutorial and wants to leave it running to play with the environment\n \n-#### TL;DR\n+This section describes how you can do this using the `harness-runner` to programmatically run a single tutorial.\n \n-To run a tutorial programmatically, do the following steps. Note to follow these instructions you'll need to check out the kafka-tutorials repo:\n+### TL;DR\n \n-1. git clone https://github.com/confluentinc/kafka-tutorials.git\n-2. cd kafka-tutorials\n+To run a tutorial programmatically, do the following steps.\n \n-Once you have the kafka-tutorials repo checked out do the following:\n+1. Check out the kafka-tutorials GitHub repo:\n \n-1. Create a `Dockerfile` with the following content:\n-    ```text\n-     FROM python:3.7-slim\n-     RUN pip3 install pyyaml\n-    ```\n-2. Then run the following command to build and execute the docker image:\n-    * `docker build -t runner . ; docker run -v ${PWD}/harness_runner:/harness_runner/ -it --rm runner bash -c 'cd /harness_runner/ && pip3 install -e .'`\n+```bash\n+git clone https://github.com/confluentinc/kafka-tutorials.git\n+cd kafka-tutorials\n+```\n+\n+2. Install the packages for the harness runner.\n+\n+If you have `pip3` installed locally:\n+\n+```bash\n+(cd /harness_runner/ && pip3 install -e .)\n+```\n+\n+If you don't have `pip3` installed locally, create a `Dockerfile` with the following content:\n+\n+```text\n+FROM python:3.7-slim\n+RUN pip3 install pyyaml\n+```\n+\n+and then run the following command to build and execute the Docker image:\n+\n+```\n+docker build -t runner . ; docker run -v ${PWD}/harness_runner:/harness_runner/ -it --rm runner bash -c 'cd /harness_runner/ && pip3 install -e .'\n+```\n+\n+3. Install [gradle](https://gradle.org/install/) for tutorials that compile any code.\n \n-3. run the `make` command\n-   * `(cd _includes/tutorials/<tutorial name>/<type>/code && make)` where type is one of `ksql | kstreams | kafka`.\n-   * For example `(cd _includes/tutorials/transforming/kstreams/code/ && make)`\n+4. End-to-end: run the harness runner for a single tutorial by calling `make`, across all `dev`, `test`, and `prod` stages, to validate it works end-to-end. Identify the tutorial you want and then run `make`. Note that this destroys all the resources and Docker containers it created, so it cleans up after itself.  Format: `(cd _includes/tutorials/<tutorial name>/<type>/code && make)` where type is one of `ksql | kstreams | kafka`. Example:\n+\n+```\n+(cd _includes/tutorials/transforming/kstreams/code/ && make)\n+```\n+\n+5. Run-and-play: run the harness runner for a single tutorial by calling `make SEQUENCE=\"dev, test\"`, just across `dev` and `test` stages, which leaves all resources and Docker containers running so you can then play with it.  Format: `(cd _includes/tutorials/<tutorial name>/<type>/code && make SEQUENCE=\"dev, test\")` where type is one of `ksql | kstreams | kafka`. Example:\n+\n+```\n+(cd _includes/tutorials/transforming/kstreams/code/ && make SEQUENCE=\"dev, test\")\n+```\n+\n+Now you can play with the environment, some sample commands shown below.  Don't forget to shutdown Docker containers when you are done.\n+\n+```\n+docker exec broker kafka-topics --list --bootstrap-server localhost:9092\n+docker exec -it ksqldb-cli ksql http://ksqldb-server:8088               \n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NTgwNw=="}, "originalCommit": {"oid": "9bcdff48ec12b19dc7814d19770d33c4e825bcce"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODQyNw==", "bodyText": "This is related to the fact that the network name is actually the tutorial name?\n\nNot sure.\nwhat about\ndocker container ls | grep <tutorial-name> | xargs docker container rm -f\n\nnot sure that even works, it's just a suggestion", "url": "https://github.com/confluentinc/kafka-tutorials/pull/454#discussion_r446328427", "createdAt": "2020-06-26T17:53:54Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -253,30 +252,68 @@ Lastly, create a Makefile in the `code` directory to invoke the harness runner a\n \n ## Testing Locally\n \n-Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  You should note the harness file is in the [YAML file format](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generate the rendered tutorial structure and validate any output of tutorial steps against expected values.\n+The [Kafka Tutorials microsite](https://kafka-tutorials.confluent.io/) shows how to manually execute each tutorial step-by-step.\n+However, there are some scenarios when a user may want to run and test a tutorial in a more automated fashion:\n \n-New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove parts as needed.\n+1. End-to-end: user makes a small change to the code and wants to validate that the tutorial still works end-to-end\n+2. Run-and-play: user runs a tutorial and wants to leave it running to play with the environment\n \n-#### TL;DR\n+This section describes how you can do this using the `harness-runner` to programmatically run a single tutorial.\n \n-To run a tutorial programmatically, do the following steps. Note to follow these instructions you'll need to check out the kafka-tutorials repo:\n+### TL;DR\n \n-1. git clone https://github.com/confluentinc/kafka-tutorials.git\n-2. cd kafka-tutorials\n+To run a tutorial programmatically, do the following steps.\n \n-Once you have the kafka-tutorials repo checked out do the following:\n+1. Check out the kafka-tutorials GitHub repo:\n \n-1. Create a `Dockerfile` with the following content:\n-    ```text\n-     FROM python:3.7-slim\n-     RUN pip3 install pyyaml\n-    ```\n-2. Then run the following command to build and execute the docker image:\n-    * `docker build -t runner . ; docker run -v ${PWD}/harness_runner:/harness_runner/ -it --rm runner bash -c 'cd /harness_runner/ && pip3 install -e .'`\n+```bash\n+git clone https://github.com/confluentinc/kafka-tutorials.git\n+cd kafka-tutorials\n+```\n+\n+2. Install the packages for the harness runner.\n+\n+If you have `pip3` installed locally:\n+\n+```bash\n+(cd /harness_runner/ && pip3 install -e .)\n+```\n+\n+If you don't have `pip3` installed locally, create a `Dockerfile` with the following content:\n+\n+```text\n+FROM python:3.7-slim\n+RUN pip3 install pyyaml\n+```\n+\n+and then run the following command to build and execute the Docker image:\n+\n+```\n+docker build -t runner . ; docker run -v ${PWD}/harness_runner:/harness_runner/ -it --rm runner bash -c 'cd /harness_runner/ && pip3 install -e .'\n+```\n+\n+3. Install [gradle](https://gradle.org/install/) for tutorials that compile any code.\n \n-3. run the `make` command\n-   * `(cd _includes/tutorials/<tutorial name>/<type>/code && make)` where type is one of `ksql | kstreams | kafka`.\n-   * For example `(cd _includes/tutorials/transforming/kstreams/code/ && make)`\n+4. End-to-end: run the harness runner for a single tutorial by calling `make`, across all `dev`, `test`, and `prod` stages, to validate it works end-to-end. Identify the tutorial you want and then run `make`. Note that this destroys all the resources and Docker containers it created, so it cleans up after itself.  Format: `(cd _includes/tutorials/<tutorial name>/<type>/code && make)` where type is one of `ksql | kstreams | kafka`. Example:\n+\n+```\n+(cd _includes/tutorials/transforming/kstreams/code/ && make)\n+```\n+\n+5. Run-and-play: run the harness runner for a single tutorial by calling `make SEQUENCE=\"dev, test\"`, just across `dev` and `test` stages, which leaves all resources and Docker containers running so you can then play with it.  Format: `(cd _includes/tutorials/<tutorial name>/<type>/code && make SEQUENCE=\"dev, test\")` where type is one of `ksql | kstreams | kafka`. Example:\n+\n+```\n+(cd _includes/tutorials/transforming/kstreams/code/ && make SEQUENCE=\"dev, test\")\n+```\n+\n+Now you can play with the environment, some sample commands shown below.  Don't forget to shutdown Docker containers when you are done.\n+\n+```\n+docker exec broker kafka-topics --list --bootstrap-server localhost:9092\n+docker exec -it ksqldb-cli ksql http://ksqldb-server:8088               \n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NTgwNw=="}, "originalCommit": {"oid": "9bcdff48ec12b19dc7814d19770d33c4e825bcce"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTc0OA==", "bodyText": "@bbejeck Unfortunately docker container ls does not provide the tutorial name:\n[14:09:06] ~/git/kafka-tutorials(GH-453) \u2717: docker container ls\nCONTAINER ID        IMAGE                                    COMMAND                  CREATED             STATUS              PORTS                                        NAMES\n7e9fc9ffaf24        confluentinc/ksqldb-server:0.7.1         \"/usr/bin/docker/run\"    12 seconds ago      Up 11 seconds       0.0.0.0:8088->8088/tcp                       ksqldb-server\nf9441e503e6a        confluentinc/cp-schema-registry:5.5.0    \"/etc/confluent/dock\u2026\"   23 minutes ago      Up 23 minutes       0.0.0.0:8081->8081/tcp                       schema-registry\nd0b328c59187        confluentinc/cp-enterprise-kafka:5.5.0   \"/etc/confluent/dock\u2026\"   23 minutes ago      Up 23 minutes       9092/tcp, 0.0.0.0:29092->29092/tcp           broker\n3d321fee7116        confluentinc/cp-zookeeper:5.5.0          \"/etc/confluent/dock\u2026\"   23 minutes ago      Up 23 minutes       2888/tcp, 0.0.0.0:2181->2181/tcp, 3888/tcp   zookeeper", "url": "https://github.com/confluentinc/kafka-tutorials/pull/454#discussion_r446335748", "createdAt": "2020-06-26T18:09:48Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -253,30 +252,68 @@ Lastly, create a Makefile in the `code` directory to invoke the harness runner a\n \n ## Testing Locally\n \n-Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  You should note the harness file is in the [YAML file format](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generate the rendered tutorial structure and validate any output of tutorial steps against expected values.\n+The [Kafka Tutorials microsite](https://kafka-tutorials.confluent.io/) shows how to manually execute each tutorial step-by-step.\n+However, there are some scenarios when a user may want to run and test a tutorial in a more automated fashion:\n \n-New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove parts as needed.\n+1. End-to-end: user makes a small change to the code and wants to validate that the tutorial still works end-to-end\n+2. Run-and-play: user runs a tutorial and wants to leave it running to play with the environment\n \n-#### TL;DR\n+This section describes how you can do this using the `harness-runner` to programmatically run a single tutorial.\n \n-To run a tutorial programmatically, do the following steps. Note to follow these instructions you'll need to check out the kafka-tutorials repo:\n+### TL;DR\n \n-1. git clone https://github.com/confluentinc/kafka-tutorials.git\n-2. cd kafka-tutorials\n+To run a tutorial programmatically, do the following steps.\n \n-Once you have the kafka-tutorials repo checked out do the following:\n+1. Check out the kafka-tutorials GitHub repo:\n \n-1. Create a `Dockerfile` with the following content:\n-    ```text\n-     FROM python:3.7-slim\n-     RUN pip3 install pyyaml\n-    ```\n-2. Then run the following command to build and execute the docker image:\n-    * `docker build -t runner . ; docker run -v ${PWD}/harness_runner:/harness_runner/ -it --rm runner bash -c 'cd /harness_runner/ && pip3 install -e .'`\n+```bash\n+git clone https://github.com/confluentinc/kafka-tutorials.git\n+cd kafka-tutorials\n+```\n+\n+2. Install the packages for the harness runner.\n+\n+If you have `pip3` installed locally:\n+\n+```bash\n+(cd /harness_runner/ && pip3 install -e .)\n+```\n+\n+If you don't have `pip3` installed locally, create a `Dockerfile` with the following content:\n+\n+```text\n+FROM python:3.7-slim\n+RUN pip3 install pyyaml\n+```\n+\n+and then run the following command to build and execute the Docker image:\n+\n+```\n+docker build -t runner . ; docker run -v ${PWD}/harness_runner:/harness_runner/ -it --rm runner bash -c 'cd /harness_runner/ && pip3 install -e .'\n+```\n+\n+3. Install [gradle](https://gradle.org/install/) for tutorials that compile any code.\n \n-3. run the `make` command\n-   * `(cd _includes/tutorials/<tutorial name>/<type>/code && make)` where type is one of `ksql | kstreams | kafka`.\n-   * For example `(cd _includes/tutorials/transforming/kstreams/code/ && make)`\n+4. End-to-end: run the harness runner for a single tutorial by calling `make`, across all `dev`, `test`, and `prod` stages, to validate it works end-to-end. Identify the tutorial you want and then run `make`. Note that this destroys all the resources and Docker containers it created, so it cleans up after itself.  Format: `(cd _includes/tutorials/<tutorial name>/<type>/code && make)` where type is one of `ksql | kstreams | kafka`. Example:\n+\n+```\n+(cd _includes/tutorials/transforming/kstreams/code/ && make)\n+```\n+\n+5. Run-and-play: run the harness runner for a single tutorial by calling `make SEQUENCE=\"dev, test\"`, just across `dev` and `test` stages, which leaves all resources and Docker containers running so you can then play with it.  Format: `(cd _includes/tutorials/<tutorial name>/<type>/code && make SEQUENCE=\"dev, test\")` where type is one of `ksql | kstreams | kafka`. Example:\n+\n+```\n+(cd _includes/tutorials/transforming/kstreams/code/ && make SEQUENCE=\"dev, test\")\n+```\n+\n+Now you can play with the environment, some sample commands shown below.  Don't forget to shutdown Docker containers when you are done.\n+\n+```\n+docker exec broker kafka-topics --list --bootstrap-server localhost:9092\n+docker exec -it ksqldb-cli ksql http://ksqldb-server:8088               \n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NTgwNw=="}, "originalCommit": {"oid": "9bcdff48ec12b19dc7814d19770d33c4e825bcce"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzkyNA==", "bodyText": "I meant docker network ls since it seems the tutorial name is used for the network name.\nAt any rate, what you have is fine", "url": "https://github.com/confluentinc/kafka-tutorials/pull/454#discussion_r446337924", "createdAt": "2020-06-26T18:14:10Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -253,30 +252,68 @@ Lastly, create a Makefile in the `code` directory to invoke the harness runner a\n \n ## Testing Locally\n \n-Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  You should note the harness file is in the [YAML file format](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generate the rendered tutorial structure and validate any output of tutorial steps against expected values.\n+The [Kafka Tutorials microsite](https://kafka-tutorials.confluent.io/) shows how to manually execute each tutorial step-by-step.\n+However, there are some scenarios when a user may want to run and test a tutorial in a more automated fashion:\n \n-New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove parts as needed.\n+1. End-to-end: user makes a small change to the code and wants to validate that the tutorial still works end-to-end\n+2. Run-and-play: user runs a tutorial and wants to leave it running to play with the environment\n \n-#### TL;DR\n+This section describes how you can do this using the `harness-runner` to programmatically run a single tutorial.\n \n-To run a tutorial programmatically, do the following steps. Note to follow these instructions you'll need to check out the kafka-tutorials repo:\n+### TL;DR\n \n-1. git clone https://github.com/confluentinc/kafka-tutorials.git\n-2. cd kafka-tutorials\n+To run a tutorial programmatically, do the following steps.\n \n-Once you have the kafka-tutorials repo checked out do the following:\n+1. Check out the kafka-tutorials GitHub repo:\n \n-1. Create a `Dockerfile` with the following content:\n-    ```text\n-     FROM python:3.7-slim\n-     RUN pip3 install pyyaml\n-    ```\n-2. Then run the following command to build and execute the docker image:\n-    * `docker build -t runner . ; docker run -v ${PWD}/harness_runner:/harness_runner/ -it --rm runner bash -c 'cd /harness_runner/ && pip3 install -e .'`\n+```bash\n+git clone https://github.com/confluentinc/kafka-tutorials.git\n+cd kafka-tutorials\n+```\n+\n+2. Install the packages for the harness runner.\n+\n+If you have `pip3` installed locally:\n+\n+```bash\n+(cd /harness_runner/ && pip3 install -e .)\n+```\n+\n+If you don't have `pip3` installed locally, create a `Dockerfile` with the following content:\n+\n+```text\n+FROM python:3.7-slim\n+RUN pip3 install pyyaml\n+```\n+\n+and then run the following command to build and execute the Docker image:\n+\n+```\n+docker build -t runner . ; docker run -v ${PWD}/harness_runner:/harness_runner/ -it --rm runner bash -c 'cd /harness_runner/ && pip3 install -e .'\n+```\n+\n+3. Install [gradle](https://gradle.org/install/) for tutorials that compile any code.\n \n-3. run the `make` command\n-   * `(cd _includes/tutorials/<tutorial name>/<type>/code && make)` where type is one of `ksql | kstreams | kafka`.\n-   * For example `(cd _includes/tutorials/transforming/kstreams/code/ && make)`\n+4. End-to-end: run the harness runner for a single tutorial by calling `make`, across all `dev`, `test`, and `prod` stages, to validate it works end-to-end. Identify the tutorial you want and then run `make`. Note that this destroys all the resources and Docker containers it created, so it cleans up after itself.  Format: `(cd _includes/tutorials/<tutorial name>/<type>/code && make)` where type is one of `ksql | kstreams | kafka`. Example:\n+\n+```\n+(cd _includes/tutorials/transforming/kstreams/code/ && make)\n+```\n+\n+5. Run-and-play: run the harness runner for a single tutorial by calling `make SEQUENCE=\"dev, test\"`, just across `dev` and `test` stages, which leaves all resources and Docker containers running so you can then play with it.  Format: `(cd _includes/tutorials/<tutorial name>/<type>/code && make SEQUENCE=\"dev, test\")` where type is one of `ksql | kstreams | kafka`. Example:\n+\n+```\n+(cd _includes/tutorials/transforming/kstreams/code/ && make SEQUENCE=\"dev, test\")\n+```\n+\n+Now you can play with the environment, some sample commands shown below.  Don't forget to shutdown Docker containers when you are done.\n+\n+```\n+docker exec broker kafka-topics --list --bootstrap-server localhost:9092\n+docker exec -it ksqldb-cli ksql http://ksqldb-server:8088               \n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NTgwNw=="}, "originalCommit": {"oid": "9bcdff48ec12b19dc7814d19770d33c4e825bcce"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3928, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}