{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMjU0MzQ0", "number": 628, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTozMzowM1rOE4bl6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1NDo0OVrOE5jaWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjA3Nzg1OnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/ksql-nested-json/ksql/markup/dev/problem-description.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTozMzowM1rOHyWFrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDowNDo0NlrOH1IMyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1Mjc0OQ==", "bodyText": "Not sure if this is overkill or not, but I thought it might be good to be explicit about the JSON structure issue.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/628#discussion_r522552749", "createdAt": "2020-11-13T01:33:03Z", "author": {"login": "bbejeck"}, "path": "_includes/tutorials/ksql-nested-json/ksql/markup/dev/problem-description.adoc", "diffHunk": "@@ -0,0 +1,34 @@\n+Let's say you have a topic `financial_txns`, containing stock purchase at your firm. You want to do some basic reporting that includes the the number of shares, customer-id, and the ticker symbol involved in the transaction. All the information is in the record, but it's in JSON format and the information you need is nested.  Here's an example record:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fad1adc1c657705ceede8e5eea63c7a63a9b7a3f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1NzAwNQ==", "bodyText": "I don't think this is overkill, I like that you are visually calling out what data you need out of the event.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/628#discussion_r524357005", "createdAt": "2020-11-16T15:34:13Z", "author": {"login": "awalther28"}, "path": "_includes/tutorials/ksql-nested-json/ksql/markup/dev/problem-description.adoc", "diffHunk": "@@ -0,0 +1,34 @@\n+Let's say you have a topic `financial_txns`, containing stock purchase at your firm. You want to do some basic reporting that includes the the number of shares, customer-id, and the ticker symbol involved in the transaction. All the information is in the record, but it's in JSON format and the information you need is nested.  Here's an example record:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1Mjc0OQ=="}, "originalCommit": {"oid": "fad1adc1c657705ceede8e5eea63c7a63a9b7a3f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2MDk2OQ==", "bodyText": "One thing you should note is the number of nested fields is consistent across multiple events. Robin recently wrote a blog about how you need to use MAP to model nested fields with a variable number of fields.\nI'm not sure if you would want to go into detail in this KT of how to use MAP and when.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/628#discussion_r524360969", "createdAt": "2020-11-16T15:39:12Z", "author": {"login": "awalther28"}, "path": "_includes/tutorials/ksql-nested-json/ksql/markup/dev/problem-description.adoc", "diffHunk": "@@ -0,0 +1,34 @@\n+Let's say you have a topic `financial_txns`, containing stock purchase at your firm. You want to do some basic reporting that includes the the number of shares, customer-id, and the ticker symbol involved in the transaction. All the information is in the record, but it's in JSON format and the information you need is nested.  Here's an example record:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1Mjc0OQ=="}, "originalCommit": {"oid": "fad1adc1c657705ceede8e5eea63c7a63a9b7a3f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ3MDkyMA==", "bodyText": "@awalther28 good call.  I think it's best for a KT only to cover one subject at a time.  But I've added a small section discussing this point and link out to Robin's post.  I've also created an issue for a separate KT on this subject.\nEDIT: I've moved the comment and link out to the section where I formally define with the keyword STRUCT is, I think it fits better there.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/628#discussion_r525470920", "createdAt": "2020-11-17T20:04:46Z", "author": {"login": "bbejeck"}, "path": "_includes/tutorials/ksql-nested-json/ksql/markup/dev/problem-description.adoc", "diffHunk": "@@ -0,0 +1,34 @@\n+Let's say you have a topic `financial_txns`, containing stock purchase at your firm. You want to do some basic reporting that includes the the number of shares, customer-id, and the ticker symbol involved in the transaction. All the information is in the record, but it's in JSON format and the information you need is nested.  Here's an example record:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1Mjc0OQ=="}, "originalCommit": {"oid": "fad1adc1c657705ceede8e5eea63c7a63a9b7a3f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzc2NzIwOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/ksql-nested-json/ksql/markup/dev/create-financial-transaction-stream.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0MDozOVrOH0Ehkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NDowOVrOH0EshQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2MjEzMA==", "bodyText": "Should this be\n\nWithin the CREATE STREAM statement...\n?", "url": "https://github.com/confluentinc/kafka-tutorials/pull/628#discussion_r524362130", "createdAt": "2020-11-16T15:40:39Z", "author": {"login": "awalther28"}, "path": "_includes/tutorials/ksql-nested-json/ksql/markup/dev/create-financial-transaction-stream.adoc", "diffHunk": "@@ -0,0 +1,30 @@\n+The first thing we do is to create a stream `TRANSACTION_STREAM` based off stock purchase transactions topic `financial_txns`. Within the create `STREAM` statement, you'll use a `STRUCT` keyword to define each nested object.  The `STRUCT` keyword provides a mechanism to navigate to the desired fields in your query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fad1adc1c657705ceede8e5eea63c7a63a9b7a3f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NDkzMw==", "bodyText": "Feel free to shoot this down but I think it would be helpful to give a definition to what a struct is.\n\nA struct is a ksqlDB data type that represents strongly typed structured, or nested, data. A struct is an ordered collection of named fields that have a specific type. [pulled directly from ksqlDB docs]\nAs mentioned earlier, structs won't work in all scenarios but this reads like \"structs work for any nested object\".", "url": "https://github.com/confluentinc/kafka-tutorials/pull/628#discussion_r524364933", "createdAt": "2020-11-16T15:44:09Z", "author": {"login": "awalther28"}, "path": "_includes/tutorials/ksql-nested-json/ksql/markup/dev/create-financial-transaction-stream.adoc", "diffHunk": "@@ -0,0 +1,30 @@\n+The first thing we do is to create a stream `TRANSACTION_STREAM` based off stock purchase transactions topic `financial_txns`. Within the create `STREAM` statement, you'll use a `STRUCT` keyword to define each nested object.  The `STRUCT` keyword provides a mechanism to navigate to the desired fields in your query.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2MjEzMA=="}, "originalCommit": {"oid": "fad1adc1c657705ceede8e5eea63c7a63a9b7a3f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzg0NDcyOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/ksql-nested-json/ksql/code/Makefile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1NDo0OVrOH0FPbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToxMTowN1rOH1LnMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3Mzg2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tdiff --strip-trailing-cr $(STEPS_DIR)/dev/expected-transient-reporting.log $(DEV_OUTPUTS_DIR)/transient-reporting/output-0.log\n          \n          \n            \n            \tdiff --strip-trailing-cr $(STEPS_DIR)/dev/expected-transient-reporting.log $(DEV_OUTPUTS_DIR)/transient-reporting/output-0.log\n          \n          \n            \n            \tdiff --strip-trailing-cr $(STEPS_DIR)/test/expected-results.log $(TEST_OUTPUTS_DIR)/test-results.log\n          \n      \n    \n    \n  \n\nCan we add in the suggestion above? That way we verify that the test statement section is working as expected in our pipeline.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/628#discussion_r524373869", "createdAt": "2020-11-16T15:54:49Z", "author": {"login": "awalther28"}, "path": "_includes/tutorials/ksql-nested-json/ksql/code/Makefile", "diffHunk": "@@ -0,0 +1,15 @@\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEST_OUTPUTS_DIR := $(STEPS_DIR)/test/outputs\n+PROD_OUTPUTS_DIR := $(STEPS_DIR)/prod/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+SEQUENCE := \"dev, test, prod, ccloud\"\n+\n+tutorial:\n+\trm -r $(DEV_OUTPUTS_DIR) || true\n+\trm -r $(TEST_OUTPUTS_DIR) || true\n+\tmkdir $(DEV_OUTPUTS_DIR)\n+\tmkdir -p $(TEST_OUTPUTS_DIR)\n+\tharness-runner ../../../../../_data/harnesses/ksql-nested-json/ksql.yml $(TEMP_DIR) $(SEQUENCE)\n+\tdiff --strip-trailing-cr $(STEPS_DIR)/dev/expected-transient-reporting.log $(DEV_OUTPUTS_DIR)/transient-reporting/output-0.log", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fad1adc1c657705ceede8e5eea63c7a63a9b7a3f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUyNjgzMw==", "bodyText": "ack updated", "url": "https://github.com/confluentinc/kafka-tutorials/pull/628#discussion_r525526833", "createdAt": "2020-11-17T21:11:07Z", "author": {"login": "bbejeck"}, "path": "_includes/tutorials/ksql-nested-json/ksql/code/Makefile", "diffHunk": "@@ -0,0 +1,15 @@\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEST_OUTPUTS_DIR := $(STEPS_DIR)/test/outputs\n+PROD_OUTPUTS_DIR := $(STEPS_DIR)/prod/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+SEQUENCE := \"dev, test, prod, ccloud\"\n+\n+tutorial:\n+\trm -r $(DEV_OUTPUTS_DIR) || true\n+\trm -r $(TEST_OUTPUTS_DIR) || true\n+\tmkdir $(DEV_OUTPUTS_DIR)\n+\tmkdir -p $(TEST_OUTPUTS_DIR)\n+\tharness-runner ../../../../../_data/harnesses/ksql-nested-json/ksql.yml $(TEMP_DIR) $(SEQUENCE)\n+\tdiff --strip-trailing-cr $(STEPS_DIR)/dev/expected-transient-reporting.log $(DEV_OUTPUTS_DIR)/transient-reporting/output-0.log", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3Mzg2OQ=="}, "originalCommit": {"oid": "fad1adc1c657705ceede8e5eea63c7a63a9b7a3f"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3848, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}