{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3OTY2NDQz", "number": 419, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDowNjoxNVrOEC-GZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDowNjoxNVrOEC-GZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTUwMDUyOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/rekeying-function/ksql/markup/dev/continuous-rekey.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDowNjoxNVrOGfwBQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDowNjoxNVrOGfwBQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0NTc5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As we're not partitioning by an existing column, ksqlDB will add a new column to the `customers_by_area_code` stream to how the result of our function call.\n          \n          \n            \n            \n          \n          \n            \n            As we're not partitioning by an existing column, ksqlDB will add a new column to the `customers_by_area_code` stream based on the result of our function call.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/419#discussion_r435945794", "createdAt": "2020-06-05T14:06:15Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/rekeying-function/ksql/markup/dev/continuous-rekey.adoc", "diffHunk": "@@ -1,4 +1,6 @@\n-Now, using ksqlDB's appropriately-named `PARTITION BY` clause, we can apply the results of `REGEXREPLACE` as the key for each message and write the result to a new stream:\n+Now, using ksqlDB's appropriately-named `PARTITION BY` clause, we can apply the results of `REGEXREPLACE` as the key for each message and write the result to a new stream.\n+As we're not partitioning by an existing column, ksqlDB will add a new column to the `customers_by_area_code` stream to how the result of our function call.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28272c61887db8587f135836f550a79159c29eb5"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3898, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}