{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3OTUxOTEy", "number": 531, "title": "DEVX-1979: Using callbacks in  producer reqeusts", "bodyText": "Covers #406", "createdAt": "2020-09-02T16:36:25Z", "url": "https://github.com/confluentinc/kafka-tutorials/pull/531", "merged": true, "mergeCommit": {"oid": "1f21d934d72935504a1796c5b1c295464f59675e"}, "closed": true, "closedAt": "2020-09-11T16:53:56Z", "author": {"login": "bbejeck"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEZK3xAH2gAyNDc3OTUxOTEyOjk0NTIxMjQzZWYzMjIzOWQ4NGQ0YTdkOTUzZjQxNWY2MzBiZTM0NWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdH4QE-gH2gAyNDc3OTUxOTEyOmVhY2ZlZmMzYTQ1MDkyNjI0NDUxMTJmNTQ2NWQxZTkzNTllODQ0ZTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "94521243ef32239d84d4a7d953f415f630be345b", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/94521243ef32239d84d4a7d953f415f630be345b", "committedDate": "2020-08-31T20:52:26Z", "message": "initial commit for new tutorial"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0340eefa63ed340e6aca06dc97a09fbaa5592ace", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/0340eefa63ed340e6aca06dc97a09fbaa5592ace", "committedDate": "2020-08-31T21:24:45Z", "message": "first renames"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ea564bf080c17421d65738ba5cee69c215c9cee", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/2ea564bf080c17421d65738ba5cee69c215c9cee", "committedDate": "2020-08-31T21:49:30Z", "message": "complete the renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23a3f8d39c6756a77d0ba10cf9f7e03428a25349", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/23a3f8d39c6756a77d0ba10cf9f7e03428a25349", "committedDate": "2020-09-01T21:26:57Z", "message": "updated to work with callbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27f94a81ead6e8b751e965479739a8dd61f0f217", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/27f94a81ead6e8b751e965479739a8dd61f0f217", "committedDate": "2020-09-02T16:32:36Z", "message": "Final changes for new tutorial"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDA2OTg0", "url": "https://github.com/confluentinc/kafka-tutorials/pull/531#pullrequestreview-481006984", "createdAt": "2020-09-02T16:42:59Z", "commit": {"oid": "27f94a81ead6e8b751e965479739a8dd61f0f217"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjo0MzowMFrOHL36rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjo0MzowMFrOHL36rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxMjUyNw==", "bodyText": "@ybyzek  this is only significant diff from PR #491 which you reviewed. Can you take a look at this?", "url": "https://github.com/confluentinc/kafka-tutorials/pull/531#discussion_r482212527", "createdAt": "2020-09-02T16:43:00Z", "author": {"login": "bbejeck"}, "path": "_includes/tutorials/kafka-producer-application-callback/kafka/markup/dev/make-application.adoc", "diffHunk": "@@ -0,0 +1,86 @@\n+////\n+In this file you describe the Kafka streams topology, and should cover the main points of the tutorial.\n+The text assumes a method buildTopology exists and constructs the Kafka Streams application.  Feel free to modify the text below to suit your needs.\n+////\n+Before you create your application file, let's look at some of the key points of this program:\n+\n+[source, java]\n+.KafkaProducerCallbackApplication constructor\n+----\n+\n+public class KafkaProducerCallbackApplication {\n+\n+  private final Producer<String, String> producer;\n+  final String outTopic;\n+\n+  public KafkaProducerCallbackApplication(final Producer<String, String> producer,  <1>\n+                                  final String topic) {                     <2>\n+    this.producer = producer;\n+    outTopic = topic;\n+  }\n+\n+----\n+\n+<1> Passing in the `Producer` instance as a constructor parameter.\n+<2> The topic to write records to\n+\n+\n+In this tutorial you'll inject the dependencies in the `KafkaProducerCallbackApplication.main()` method.\n+Having this thin wrapper class around a `Producer` is not required, but it does help with making our code easier to test.  We'll go into more details in the testing section of the tutorial.\n+\n+(In practice you may want to use a dependency injection framework library, such as the  https://spring.io/projects/spring-framework[Spring Framework]).\n+\n+\n+Next let's take a look at the `KafkaProducerCallbackApplication.produce` method\n+[source, java]\n+.KafkaProducerCallbackApplication.produce\n+----\n+public void produce(final String message) {\n+    final String[] parts = message.split(\"-\");  <1>\n+    final String key, value;\n+    if (parts.length > 1) {\n+      key = parts[0];\n+      value = parts[1];\n+    } else {\n+      key = \"NO-KEY\";\n+      value = parts[0];\n+    }\n+    final ProducerRecord<String, String> producerRecord = new ProducerRecord<>(outTopic, key, value);  <2>\n+    producer.send(producerRecord, (recordMetadata, exception) -> {  <3>\n+              if (exception == null) {                          <4>\n+                  System.out.println(\"Record written to offset \" +\n+                          recordMetadata.offset() + \" timestamp \" +\n+                          recordMetadata.timestamp());\n+              } else {\n+                  System.err.println(\"An error occurred\"); <5>\n+                  exception.printStackTrace(System.err);\n+              }\n+        });\n+  }\n+\n+----\n+\n+<1> Process the String for sending message\n+<2> Create the `ProducerRecord`\n+<3> Send the record to the broker specifying a `Callback` instance as a lambda function\n+<4> If there's no exceptions print the offset and timestamp of the acknowleged record\n+<5> Error handling portion-in this case printing the stacktrace to `System.err`\n+\n+The `KafkaProducerCallbackApplication.produce` method does some processing on a `String`, and then sends the https://kafka.apache.org/25/javadoc/org/apache/kafka/clients/producer/ProducerRecord.html[`ProducerRecord`].  While this code is a trivial example, it's enough to show the example of using a `KafkaProducer`.\n+\n+Notice that this overload of the https://javadoc.io/static/org.apache.kafka/kafka-clients/2.6.0/org/apache/kafka/clients/producer/KafkaProducer.html#send-org.apache.kafka.clients.producer.ProducerRecord-org.apache.kafka.clients.producer.Callback--[`KafkaProducer.send`] method accepts a second parameter, an instance of the https://kafka.apache.org/26/javadoc/org/apache/kafka/clients/producer/Callback.html[Callback] interface.\n+\n+The `Callback` provides a way of handling any actions you want to take on request completion *_asynchronously_*.  Note that the `Callback` code executes on the producer's I/O thread so any actions here should execute quickly.  Any time consuming tasks could cause a delay in sending new records.\n+\n+The `KafkaProducer.send` method is asynchronous and returns as soon as the provided record is placed in the buffer of records to be sent to the broker. Once the broker acknowledges that the record has been appended to its log, the broker completes the produce request, which the application receives as `RecordMetadata`\u2014information about the committed message.\n+\n+The code in the callback prints the `timestamp` and `offset` for each record sent using the `RecordMetadata` object.\n+\n+\n+Now go ahead and create the following file at `src/main/java/io/confluent/developer/KafkaProducerCallbackApplication.java`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f94a81ead6e8b751e965479739a8dd61f0f217"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDIxNDE1", "url": "https://github.com/confluentinc/kafka-tutorials/pull/531#pullrequestreview-481021415", "createdAt": "2020-09-02T17:00:36Z", "commit": {"oid": "27f94a81ead6e8b751e965479739a8dd61f0f217"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowMDozNlrOHL4mqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowMDozNlrOHL4mqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMzc4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `Callback` provides a way of handling any actions you want to take on request completion *_asynchronously_*.  Note that the `Callback` code executes on the producer's I/O thread so any actions here should execute quickly.  Any time consuming tasks could cause a delay in sending new records.\n          \n          \n            \n            The `Callback` provides a way of handling any actions you want to take on request completion *_asynchronously_*.  Note that the `Callback` code executes on the producer's I/O thread and any time consuming tasks could cause a delay in sending new records, so any code here should be designed to execute quickly.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/531#discussion_r482223787", "createdAt": "2020-09-02T17:00:36Z", "author": {"login": "ybyzek"}, "path": "_includes/tutorials/kafka-producer-application-callback/kafka/markup/dev/make-application.adoc", "diffHunk": "@@ -0,0 +1,86 @@\n+////\n+In this file you describe the Kafka streams topology, and should cover the main points of the tutorial.\n+The text assumes a method buildTopology exists and constructs the Kafka Streams application.  Feel free to modify the text below to suit your needs.\n+////\n+Before you create your application file, let's look at some of the key points of this program:\n+\n+[source, java]\n+.KafkaProducerCallbackApplication constructor\n+----\n+\n+public class KafkaProducerCallbackApplication {\n+\n+  private final Producer<String, String> producer;\n+  final String outTopic;\n+\n+  public KafkaProducerCallbackApplication(final Producer<String, String> producer,  <1>\n+                                  final String topic) {                     <2>\n+    this.producer = producer;\n+    outTopic = topic;\n+  }\n+\n+----\n+\n+<1> Passing in the `Producer` instance as a constructor parameter.\n+<2> The topic to write records to\n+\n+\n+In this tutorial you'll inject the dependencies in the `KafkaProducerCallbackApplication.main()` method.\n+Having this thin wrapper class around a `Producer` is not required, but it does help with making our code easier to test.  We'll go into more details in the testing section of the tutorial.\n+\n+(In practice you may want to use a dependency injection framework library, such as the  https://spring.io/projects/spring-framework[Spring Framework]).\n+\n+\n+Next let's take a look at the `KafkaProducerCallbackApplication.produce` method\n+[source, java]\n+.KafkaProducerCallbackApplication.produce\n+----\n+public void produce(final String message) {\n+    final String[] parts = message.split(\"-\");  <1>\n+    final String key, value;\n+    if (parts.length > 1) {\n+      key = parts[0];\n+      value = parts[1];\n+    } else {\n+      key = \"NO-KEY\";\n+      value = parts[0];\n+    }\n+    final ProducerRecord<String, String> producerRecord = new ProducerRecord<>(outTopic, key, value);  <2>\n+    producer.send(producerRecord, (recordMetadata, exception) -> {  <3>\n+              if (exception == null) {                          <4>\n+                  System.out.println(\"Record written to offset \" +\n+                          recordMetadata.offset() + \" timestamp \" +\n+                          recordMetadata.timestamp());\n+              } else {\n+                  System.err.println(\"An error occurred\"); <5>\n+                  exception.printStackTrace(System.err);\n+              }\n+        });\n+  }\n+\n+----\n+\n+<1> Process the String for sending message\n+<2> Create the `ProducerRecord`\n+<3> Send the record to the broker specifying a `Callback` instance as a lambda function\n+<4> If there's no exceptions print the offset and timestamp of the acknowleged record\n+<5> Error handling portion-in this case printing the stacktrace to `System.err`\n+\n+The `KafkaProducerCallbackApplication.produce` method does some processing on a `String`, and then sends the https://kafka.apache.org/25/javadoc/org/apache/kafka/clients/producer/ProducerRecord.html[`ProducerRecord`].  While this code is a trivial example, it's enough to show the example of using a `KafkaProducer`.\n+\n+Notice that this overload of the https://javadoc.io/static/org.apache.kafka/kafka-clients/2.6.0/org/apache/kafka/clients/producer/KafkaProducer.html#send-org.apache.kafka.clients.producer.ProducerRecord-org.apache.kafka.clients.producer.Callback--[`KafkaProducer.send`] method accepts a second parameter, an instance of the https://kafka.apache.org/26/javadoc/org/apache/kafka/clients/producer/Callback.html[Callback] interface.\n+\n+The `Callback` provides a way of handling any actions you want to take on request completion *_asynchronously_*.  Note that the `Callback` code executes on the producer's I/O thread so any actions here should execute quickly.  Any time consuming tasks could cause a delay in sending new records.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f94a81ead6e8b751e965479739a8dd61f0f217"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDIzMjc5", "url": "https://github.com/confluentinc/kafka-tutorials/pull/531#pullrequestreview-481023279", "createdAt": "2020-09-02T17:02:56Z", "commit": {"oid": "27f94a81ead6e8b751e965479739a8dd61f0f217"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowMjo1NlrOHL4sRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowMjo1NlrOHL4sRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNTIyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The code in the callback prints the `timestamp` and `offset` for each record sent using the `RecordMetadata` object.\n          \n          \n            \n            In this example, the code in the callback just prints information from each record's `RecordMetadata` object, specifically the `timestamp` and `offset`.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/531#discussion_r482225222", "createdAt": "2020-09-02T17:02:56Z", "author": {"login": "ybyzek"}, "path": "_includes/tutorials/kafka-producer-application-callback/kafka/markup/dev/make-application.adoc", "diffHunk": "@@ -0,0 +1,86 @@\n+////\n+In this file you describe the Kafka streams topology, and should cover the main points of the tutorial.\n+The text assumes a method buildTopology exists and constructs the Kafka Streams application.  Feel free to modify the text below to suit your needs.\n+////\n+Before you create your application file, let's look at some of the key points of this program:\n+\n+[source, java]\n+.KafkaProducerCallbackApplication constructor\n+----\n+\n+public class KafkaProducerCallbackApplication {\n+\n+  private final Producer<String, String> producer;\n+  final String outTopic;\n+\n+  public KafkaProducerCallbackApplication(final Producer<String, String> producer,  <1>\n+                                  final String topic) {                     <2>\n+    this.producer = producer;\n+    outTopic = topic;\n+  }\n+\n+----\n+\n+<1> Passing in the `Producer` instance as a constructor parameter.\n+<2> The topic to write records to\n+\n+\n+In this tutorial you'll inject the dependencies in the `KafkaProducerCallbackApplication.main()` method.\n+Having this thin wrapper class around a `Producer` is not required, but it does help with making our code easier to test.  We'll go into more details in the testing section of the tutorial.\n+\n+(In practice you may want to use a dependency injection framework library, such as the  https://spring.io/projects/spring-framework[Spring Framework]).\n+\n+\n+Next let's take a look at the `KafkaProducerCallbackApplication.produce` method\n+[source, java]\n+.KafkaProducerCallbackApplication.produce\n+----\n+public void produce(final String message) {\n+    final String[] parts = message.split(\"-\");  <1>\n+    final String key, value;\n+    if (parts.length > 1) {\n+      key = parts[0];\n+      value = parts[1];\n+    } else {\n+      key = \"NO-KEY\";\n+      value = parts[0];\n+    }\n+    final ProducerRecord<String, String> producerRecord = new ProducerRecord<>(outTopic, key, value);  <2>\n+    producer.send(producerRecord, (recordMetadata, exception) -> {  <3>\n+              if (exception == null) {                          <4>\n+                  System.out.println(\"Record written to offset \" +\n+                          recordMetadata.offset() + \" timestamp \" +\n+                          recordMetadata.timestamp());\n+              } else {\n+                  System.err.println(\"An error occurred\"); <5>\n+                  exception.printStackTrace(System.err);\n+              }\n+        });\n+  }\n+\n+----\n+\n+<1> Process the String for sending message\n+<2> Create the `ProducerRecord`\n+<3> Send the record to the broker specifying a `Callback` instance as a lambda function\n+<4> If there's no exceptions print the offset and timestamp of the acknowleged record\n+<5> Error handling portion-in this case printing the stacktrace to `System.err`\n+\n+The `KafkaProducerCallbackApplication.produce` method does some processing on a `String`, and then sends the https://kafka.apache.org/25/javadoc/org/apache/kafka/clients/producer/ProducerRecord.html[`ProducerRecord`].  While this code is a trivial example, it's enough to show the example of using a `KafkaProducer`.\n+\n+Notice that this overload of the https://javadoc.io/static/org.apache.kafka/kafka-clients/2.6.0/org/apache/kafka/clients/producer/KafkaProducer.html#send-org.apache.kafka.clients.producer.ProducerRecord-org.apache.kafka.clients.producer.Callback--[`KafkaProducer.send`] method accepts a second parameter, an instance of the https://kafka.apache.org/26/javadoc/org/apache/kafka/clients/producer/Callback.html[Callback] interface.\n+\n+The `Callback` provides a way of handling any actions you want to take on request completion *_asynchronously_*.  Note that the `Callback` code executes on the producer's I/O thread so any actions here should execute quickly.  Any time consuming tasks could cause a delay in sending new records.\n+\n+The `KafkaProducer.send` method is asynchronous and returns as soon as the provided record is placed in the buffer of records to be sent to the broker. Once the broker acknowledges that the record has been appended to its log, the broker completes the produce request, which the application receives as `RecordMetadata`\u2014information about the committed message.\n+\n+The code in the callback prints the `timestamp` and `offset` for each record sent using the `RecordMetadata` object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f94a81ead6e8b751e965479739a8dd61f0f217"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDI0NjAz", "url": "https://github.com/confluentinc/kafka-tutorials/pull/531#pullrequestreview-481024603", "createdAt": "2020-09-02T17:04:41Z", "commit": {"oid": "27f94a81ead6e8b751e965479739a8dd61f0f217"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowNDo0MVrOHL4wTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzowNjo0M1rOHL410A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNjI1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `KafkaProducerCallbackApplication.produce` method does some processing on a `String`, and then sends the https://kafka.apache.org/25/javadoc/org/apache/kafka/clients/producer/ProducerRecord.html[`ProducerRecord`].  While this code is a trivial example, it's enough to show the example of using a `KafkaProducer`.\n          \n          \n            \n            The `KafkaProducerCallbackApplication.produce` method does some processing on a `String`, and then sends it as a https://kafka.apache.org/25/javadoc/org/apache/kafka/clients/producer/ProducerRecord.html[`ProducerRecord`].  While this code is a trivial example, it's enough to show the example of using a `KafkaProducer`.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/531#discussion_r482226254", "createdAt": "2020-09-02T17:04:41Z", "author": {"login": "ybyzek"}, "path": "_includes/tutorials/kafka-producer-application-callback/kafka/markup/dev/make-application.adoc", "diffHunk": "@@ -0,0 +1,86 @@\n+////\n+In this file you describe the Kafka streams topology, and should cover the main points of the tutorial.\n+The text assumes a method buildTopology exists and constructs the Kafka Streams application.  Feel free to modify the text below to suit your needs.\n+////\n+Before you create your application file, let's look at some of the key points of this program:\n+\n+[source, java]\n+.KafkaProducerCallbackApplication constructor\n+----\n+\n+public class KafkaProducerCallbackApplication {\n+\n+  private final Producer<String, String> producer;\n+  final String outTopic;\n+\n+  public KafkaProducerCallbackApplication(final Producer<String, String> producer,  <1>\n+                                  final String topic) {                     <2>\n+    this.producer = producer;\n+    outTopic = topic;\n+  }\n+\n+----\n+\n+<1> Passing in the `Producer` instance as a constructor parameter.\n+<2> The topic to write records to\n+\n+\n+In this tutorial you'll inject the dependencies in the `KafkaProducerCallbackApplication.main()` method.\n+Having this thin wrapper class around a `Producer` is not required, but it does help with making our code easier to test.  We'll go into more details in the testing section of the tutorial.\n+\n+(In practice you may want to use a dependency injection framework library, such as the  https://spring.io/projects/spring-framework[Spring Framework]).\n+\n+\n+Next let's take a look at the `KafkaProducerCallbackApplication.produce` method\n+[source, java]\n+.KafkaProducerCallbackApplication.produce\n+----\n+public void produce(final String message) {\n+    final String[] parts = message.split(\"-\");  <1>\n+    final String key, value;\n+    if (parts.length > 1) {\n+      key = parts[0];\n+      value = parts[1];\n+    } else {\n+      key = \"NO-KEY\";\n+      value = parts[0];\n+    }\n+    final ProducerRecord<String, String> producerRecord = new ProducerRecord<>(outTopic, key, value);  <2>\n+    producer.send(producerRecord, (recordMetadata, exception) -> {  <3>\n+              if (exception == null) {                          <4>\n+                  System.out.println(\"Record written to offset \" +\n+                          recordMetadata.offset() + \" timestamp \" +\n+                          recordMetadata.timestamp());\n+              } else {\n+                  System.err.println(\"An error occurred\"); <5>\n+                  exception.printStackTrace(System.err);\n+              }\n+        });\n+  }\n+\n+----\n+\n+<1> Process the String for sending message\n+<2> Create the `ProducerRecord`\n+<3> Send the record to the broker specifying a `Callback` instance as a lambda function\n+<4> If there's no exceptions print the offset and timestamp of the acknowleged record\n+<5> Error handling portion-in this case printing the stacktrace to `System.err`\n+\n+The `KafkaProducerCallbackApplication.produce` method does some processing on a `String`, and then sends the https://kafka.apache.org/25/javadoc/org/apache/kafka/clients/producer/ProducerRecord.html[`ProducerRecord`].  While this code is a trivial example, it's enough to show the example of using a `KafkaProducer`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f94a81ead6e8b751e965479739a8dd61f0f217"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNzY2NA==", "bodyText": "Is the send method itself technically asynchronous?  Or the callback is asynchronous?  Not sure if this is a distinction worth making, but FYC maybe tweak as:\nThe `KafkaProducer.send` method returns as soon as the provided record is placed in the buffer of records to be sent to the broker. Once the broker acknowledges that the record has been appended to its log, the broker completes the produce request by asynchronously sending back to the producer a `RecordMetadata` object\u2014information about the committed message.\n\n(or something like this)", "url": "https://github.com/confluentinc/kafka-tutorials/pull/531#discussion_r482227664", "createdAt": "2020-09-02T17:06:43Z", "author": {"login": "ybyzek"}, "path": "_includes/tutorials/kafka-producer-application-callback/kafka/markup/dev/make-application.adoc", "diffHunk": "@@ -0,0 +1,86 @@\n+////\n+In this file you describe the Kafka streams topology, and should cover the main points of the tutorial.\n+The text assumes a method buildTopology exists and constructs the Kafka Streams application.  Feel free to modify the text below to suit your needs.\n+////\n+Before you create your application file, let's look at some of the key points of this program:\n+\n+[source, java]\n+.KafkaProducerCallbackApplication constructor\n+----\n+\n+public class KafkaProducerCallbackApplication {\n+\n+  private final Producer<String, String> producer;\n+  final String outTopic;\n+\n+  public KafkaProducerCallbackApplication(final Producer<String, String> producer,  <1>\n+                                  final String topic) {                     <2>\n+    this.producer = producer;\n+    outTopic = topic;\n+  }\n+\n+----\n+\n+<1> Passing in the `Producer` instance as a constructor parameter.\n+<2> The topic to write records to\n+\n+\n+In this tutorial you'll inject the dependencies in the `KafkaProducerCallbackApplication.main()` method.\n+Having this thin wrapper class around a `Producer` is not required, but it does help with making our code easier to test.  We'll go into more details in the testing section of the tutorial.\n+\n+(In practice you may want to use a dependency injection framework library, such as the  https://spring.io/projects/spring-framework[Spring Framework]).\n+\n+\n+Next let's take a look at the `KafkaProducerCallbackApplication.produce` method\n+[source, java]\n+.KafkaProducerCallbackApplication.produce\n+----\n+public void produce(final String message) {\n+    final String[] parts = message.split(\"-\");  <1>\n+    final String key, value;\n+    if (parts.length > 1) {\n+      key = parts[0];\n+      value = parts[1];\n+    } else {\n+      key = \"NO-KEY\";\n+      value = parts[0];\n+    }\n+    final ProducerRecord<String, String> producerRecord = new ProducerRecord<>(outTopic, key, value);  <2>\n+    producer.send(producerRecord, (recordMetadata, exception) -> {  <3>\n+              if (exception == null) {                          <4>\n+                  System.out.println(\"Record written to offset \" +\n+                          recordMetadata.offset() + \" timestamp \" +\n+                          recordMetadata.timestamp());\n+              } else {\n+                  System.err.println(\"An error occurred\"); <5>\n+                  exception.printStackTrace(System.err);\n+              }\n+        });\n+  }\n+\n+----\n+\n+<1> Process the String for sending message\n+<2> Create the `ProducerRecord`\n+<3> Send the record to the broker specifying a `Callback` instance as a lambda function\n+<4> If there's no exceptions print the offset and timestamp of the acknowleged record\n+<5> Error handling portion-in this case printing the stacktrace to `System.err`\n+\n+The `KafkaProducerCallbackApplication.produce` method does some processing on a `String`, and then sends the https://kafka.apache.org/25/javadoc/org/apache/kafka/clients/producer/ProducerRecord.html[`ProducerRecord`].  While this code is a trivial example, it's enough to show the example of using a `KafkaProducer`.\n+\n+Notice that this overload of the https://javadoc.io/static/org.apache.kafka/kafka-clients/2.6.0/org/apache/kafka/clients/producer/KafkaProducer.html#send-org.apache.kafka.clients.producer.ProducerRecord-org.apache.kafka.clients.producer.Callback--[`KafkaProducer.send`] method accepts a second parameter, an instance of the https://kafka.apache.org/26/javadoc/org/apache/kafka/clients/producer/Callback.html[Callback] interface.\n+\n+The `Callback` provides a way of handling any actions you want to take on request completion *_asynchronously_*.  Note that the `Callback` code executes on the producer's I/O thread so any actions here should execute quickly.  Any time consuming tasks could cause a delay in sending new records.\n+\n+The `KafkaProducer.send` method is asynchronous and returns as soon as the provided record is placed in the buffer of records to be sent to the broker. Once the broker acknowledges that the record has been appended to its log, the broker completes the produce request, which the application receives as `RecordMetadata`\u2014information about the committed message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f94a81ead6e8b751e965479739a8dd61f0f217"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eacfefc3a4509262445112f5465d1e9359e844e2", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/eacfefc3a4509262445112f5465d1e9359e844e2", "committedDate": "2020-09-11T16:46:57Z", "message": "Apply suggestions from code review\r\n\r\nAdd changes suggested from @ybyzek\n\nCo-authored-by: Yeva Byzek <ybyzek@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 221, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}