{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MTU4MDI1", "number": 330, "title": "DEVX-1520: Add tutorial for KStreams Cogrouping", "bodyText": "Fixes #199", "createdAt": "2020-04-23T19:58:34Z", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330", "merged": true, "mergeCommit": {"oid": "1e5c17c999e741003dbee9f94a2fee2148ebce1c"}, "closed": true, "closedAt": "2020-05-05T15:12:47Z", "author": {"login": "bbejeck"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXW6qyAH2gAyNDA4MTU4MDI1OmQ5MDM0Mjg0NTVkNmIyMDVjNzdiNWQ0ZGYwMzRiNDIwZTAwMGI1OGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceURBLAFqTQwNTc5Nzk1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d903428455d6b205c77b5d4df034b420e000b58b", "author": {"user": {"login": "russau", "name": "Russ Sayers"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/d903428455d6b205c77b5d4df034b420e000b58b", "committedDate": "2020-04-13T22:48:20Z", "message": "removed the intermediate customers_with_area_code stream\nupdated customers_by_area_code to newer syntax; allows PARTITION BY on the UDF results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fac68657a15c17f92deb2b1df3b8c76bf571e543", "author": {"user": {"login": "russau", "name": "Russ Sayers"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/fac68657a15c17f92deb2b1df3b8c76bf571e543", "committedDate": "2020-04-13T22:48:20Z", "message": "typo fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f36ae7031340077172efc2b67c9ce81a417e0e40", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/f36ae7031340077172efc2b67c9ce81a417e0e40", "committedDate": "2020-04-23T19:55:45Z", "message": "DEVX-1520: Add tutorial for KStreasm Cogrouping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "634a83a4dd1bf7a3bc0b0df272bbafe4e2831bfb", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/634a83a4dd1bf7a3bc0b0df272bbafe4e2831bfb", "committedDate": "2020-04-23T20:11:12Z", "message": "add actual-output.json to gitignore, update make-avro-dir.adoc text"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68910d2a968548a399575c0ff924ef8495ed7566", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/68910d2a968548a399575c0ff924ef8495ed7566", "committedDate": "2020-04-28T19:42:56Z", "message": "Upgrade to CP 5.5 fix template file that had harded coded path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f0fd6f1732dab41bca4e09aca88798fb1717b43", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/4f0fd6f1732dab41bca4e09aca88798fb1717b43", "committedDate": "2020-04-28T22:32:20Z", "message": "add KIP link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c399f257519d9a060015f8844f6833552bfaaa4d", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/c399f257519d9a060015f8844f6833552bfaaa4d", "committedDate": "2020-04-28T22:38:45Z", "message": "add original KIP proposal link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9b860b1424c4761f799247dfe28a49fb751e784", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/c9b860b1424c4761f799247dfe28a49fb751e784", "committedDate": "2020-04-29T15:12:57Z", "message": "Update _includes/tutorials/fk-joins/kstreams/markup/dev/make-topology.adoc\n\nCo-Authored-By: Yeva Byzek <ybyzek@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec267277850e14dcac604c5b875e906bc4dd5059", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/ec267277850e14dcac604c5b875e906bc4dd5059", "committedDate": "2020-04-29T15:14:24Z", "message": "Merge pull request #335 from confluentinc/MINOR_add_kip_link_to_fk_joins\n\nMINOR: Add original KIP proposal link"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDg3MDMx", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#pullrequestreview-403087031", "createdAt": "2020-04-29T22:33:47Z", "commit": {"oid": "4f0fd6f1732dab41bca4e09aca88798fb1717b43"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjozMzo0N1rOGOTb7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjozNjoxMlrOGOTflA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1MTY5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    props.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, envProps.getProperty(\"schema.registry.url\"));\n          \n          \n            \n                    props.put(AbstractKafkaSchemaSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, envProps.getProperty(\"schema.registry.url\"));", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#discussion_r417651692", "createdAt": "2020-04-29T22:33:47Z", "author": {"login": "gAmUssA"}, "path": "_includes/tutorials/cogrouping-streams/kstreams/code/src/main/java/io/confluent/developer/CogroupingStreams.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package io.confluent.developer;\n+\n+\n+import io.confluent.common.utils.TestUtils;\n+import io.confluent.developer.avro.LoginEvent;\n+import io.confluent.developer.avro.LoginRollup;\n+import io.confluent.kafka.serializers.AbstractKafkaAvroSerDeConfig;\n+import io.confluent.kafka.serializers.AbstractKafkaSchemaSerDeConfig;\n+import io.confluent.kafka.serializers.KafkaAvroDeserializer;\n+import io.confluent.kafka.serializers.KafkaAvroSerializer;\n+import io.confluent.kafka.streams.serdes.avro.PrimitiveAvroSerde;\n+import io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import org.apache.avro.specific.SpecificRecord;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.apache.kafka.streams.StreamsBuilder;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.Topology;\n+import org.apache.kafka.streams.kstream.Aggregator;\n+import org.apache.kafka.streams.kstream.Consumed;\n+import org.apache.kafka.streams.kstream.KGroupedStream;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.apache.kafka.streams.kstream.Produced;\n+\n+public class CogroupingStreams {\n+\n+\n+\tpublic Properties buildStreamsProperties(Properties envProps) {\n+        Properties props = new Properties();\n+\n+        props.put(StreamsConfig.APPLICATION_ID_CONFIG, envProps.getProperty(\"application.id\"));\n+        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, envProps.getProperty(\"bootstrap.servers\"));\n+        props.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());\n+        props.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, envProps.getProperty(\"schema.registry.url\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f0fd6f1732dab41bca4e09aca88798fb1717b43"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1MTg2OQ==", "bodyText": "AbstractKafkaAvroSerDeConfig is deprecated in 5.5", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#discussion_r417651869", "createdAt": "2020-04-29T22:34:14Z", "author": {"login": "gAmUssA"}, "path": "_includes/tutorials/cogrouping-streams/kstreams/code/src/main/java/io/confluent/developer/CogroupingStreams.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package io.confluent.developer;\n+\n+\n+import io.confluent.common.utils.TestUtils;\n+import io.confluent.developer.avro.LoginEvent;\n+import io.confluent.developer.avro.LoginRollup;\n+import io.confluent.kafka.serializers.AbstractKafkaAvroSerDeConfig;\n+import io.confluent.kafka.serializers.AbstractKafkaSchemaSerDeConfig;\n+import io.confluent.kafka.serializers.KafkaAvroDeserializer;\n+import io.confluent.kafka.serializers.KafkaAvroSerializer;\n+import io.confluent.kafka.streams.serdes.avro.PrimitiveAvroSerde;\n+import io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import org.apache.avro.specific.SpecificRecord;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.apache.kafka.streams.StreamsBuilder;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.Topology;\n+import org.apache.kafka.streams.kstream.Aggregator;\n+import org.apache.kafka.streams.kstream.Consumed;\n+import org.apache.kafka.streams.kstream.KGroupedStream;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.apache.kafka.streams.kstream.Produced;\n+\n+public class CogroupingStreams {\n+\n+\n+\tpublic Properties buildStreamsProperties(Properties envProps) {\n+        Properties props = new Properties();\n+\n+        props.put(StreamsConfig.APPLICATION_ID_CONFIG, envProps.getProperty(\"application.id\"));\n+        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, envProps.getProperty(\"bootstrap.servers\"));\n+        props.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());\n+        props.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, envProps.getProperty(\"schema.registry.url\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1MTY5Mg=="}, "originalCommit": {"oid": "4f0fd6f1732dab41bca4e09aca88798fb1717b43"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1MjQ4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import io.confluent.kafka.serializers.AbstractKafkaAvroSerDeConfig;", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#discussion_r417652484", "createdAt": "2020-04-29T22:35:51Z", "author": {"login": "gAmUssA"}, "path": "_includes/tutorials/cogrouping-streams/kstreams/code/src/main/java/io/confluent/developer/CogroupingStreams.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package io.confluent.developer;\n+\n+\n+import io.confluent.common.utils.TestUtils;\n+import io.confluent.developer.avro.LoginEvent;\n+import io.confluent.developer.avro.LoginRollup;\n+import io.confluent.kafka.serializers.AbstractKafkaAvroSerDeConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f0fd6f1732dab41bca4e09aca88798fb1717b43"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1MjYyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import io.confluent.kafka.streams.serdes.avro.PrimitiveAvroSerde;", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#discussion_r417652628", "createdAt": "2020-04-29T22:36:12Z", "author": {"login": "gAmUssA"}, "path": "_includes/tutorials/cogrouping-streams/kstreams/code/src/main/java/io/confluent/developer/CogroupingStreams.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package io.confluent.developer;\n+\n+\n+import io.confluent.common.utils.TestUtils;\n+import io.confluent.developer.avro.LoginEvent;\n+import io.confluent.developer.avro.LoginRollup;\n+import io.confluent.kafka.serializers.AbstractKafkaAvroSerDeConfig;\n+import io.confluent.kafka.serializers.AbstractKafkaSchemaSerDeConfig;\n+import io.confluent.kafka.serializers.KafkaAvroDeserializer;\n+import io.confluent.kafka.serializers.KafkaAvroSerializer;\n+import io.confluent.kafka.streams.serdes.avro.PrimitiveAvroSerde;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f0fd6f1732dab41bca4e09aca88798fb1717b43"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5959dd935463de66401abc0521284b167eaaa15e", "author": {"user": {"login": "russau", "name": "Russ Sayers"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/5959dd935463de66401abc0521284b167eaaa15e", "committedDate": "2020-05-01T16:47:41Z", "message": "Merge pull request #327 from russau/rekeying-syntax-update\n\nRekeying syntax update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aab2b763a3643865b3173c00df01f180e08773a", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/6aab2b763a3643865b3173c00df01f180e08773a", "committedDate": "2020-05-01T16:54:48Z", "message": "Updated KSQL tutorials - 0.8.x (#337)\n\nTested KSQL joins tutorials against 0.8.1 and found some issues, which are fixed below:\r\n\r\n- PRINT command no longer needs the topic name quoting: it's now case sensitive. (fixed across all examples)\r\n- TIMESTAMPTOSTRING should be passed a timezone for consistent results\r\n- Added explicit ROWKEY columns to all CT/CS statements, as this is to be encouraged.\r\n- Fixed key format output of PRINT that was outputting MIXED, which is not a valid output.\r\n\r\nfixes #336\r\n\r\n\r\nCo-authored-by: Andy Coates <big-andy-coates@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d38529bec5820ad809c1556185a2f2f0b3784ed", "author": {"user": {"login": "colinhicks", "name": "Colin Hicks"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/7d38529bec5820ad809c1556185a2f2f0b3784ed", "committedDate": "2020-05-01T17:41:19Z", "message": "Adapt expected output for cli column-width setting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8b974bb270951ee3801cc9fb40ac7459287a094", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/d8b974bb270951ee3801cc9fb40ac7459287a094", "committedDate": "2020-05-01T21:19:15Z", "message": "DEVX-1520: Add tutorial for KStreasm Cogrouping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1281b81aaf09327ccfd1dbb8b05a33d7d470ca1d", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/1281b81aaf09327ccfd1dbb8b05a33d7d470ca1d", "committedDate": "2020-05-01T21:19:15Z", "message": "add actual-output.json to gitignore, update make-avro-dir.adoc text"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "004f054e0081c68298a8534b4580c2553659af58", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/004f054e0081c68298a8534b4580c2553659af58", "committedDate": "2020-05-01T21:19:15Z", "message": "Upgrade to CP 5.5 fix template file that had harded coded path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f59d7aaee20442d3256ce6a242afc9033bd613c1", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/f59d7aaee20442d3256ce6a242afc9033bd613c1", "committedDate": "2020-05-01T21:19:15Z", "message": "add KIP link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e19c5de61b913bdcec44ae2cf53a424550676ae9", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/e19c5de61b913bdcec44ae2cf53a424550676ae9", "committedDate": "2020-05-01T21:23:19Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Viktor Gamov <viktor@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef798ab67c2468010c37ce668d4ee97ff3ac36ae", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/ef798ab67c2468010c37ce668d4ee97ff3ac36ae", "committedDate": "2020-05-01T21:27:26Z", "message": "fix merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad1d7afa2f9a6e50607ab49f651712bc8aa27496", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/ad1d7afa2f9a6e50607ab49f651712bc8aa27496", "committedDate": "2020-05-01T21:35:53Z", "message": "ignore output files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NDQ1NTU2", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#pullrequestreview-404445556", "createdAt": "2020-05-01T23:24:41Z", "commit": {"oid": "ad1d7afa2f9a6e50607ab49f651712bc8aa27496"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MDEwMDc3", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#pullrequestreview-405010077", "createdAt": "2020-05-04T13:55:37Z", "commit": {"oid": "ad1d7afa2f9a6e50607ab49f651712bc8aa27496"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzo1NTozOFrOGQBe1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyODo0MFrOGQC9kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1NDY3OQ==", "bodyText": "Many tutorials reference output files in this directory pattern via adoc includes. We have #217 tracking some consistency/clarification of this behavior. It seems like it would create confusion to ignore them across the repo now. For this specific tutorial, you could consider adding a .gitignore to the tutorial's respective subdirectory.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#discussion_r419454679", "createdAt": "2020-05-04T13:55:38Z", "author": {"login": "colinhicks"}, "path": ".gitignore", "diffHunk": "@@ -9,7 +9,7 @@ build/\n .jekyll-metadata\n node_modules/\n out/\n-*/outputs/*\n+**/tutorial-steps/dev/outputs/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1d7afa2f9a6e50607ab49f651712bc8aa27496"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1OTg0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `Aggregator` you saw in the previous step, constructs a map keeping a count of user logins per user, per application, so a map of maps.  Here you'll see the core logic of the `LoginAggregator`, and the code is straightforward, as you can see below.\n          \n          \n            \n            The `Aggregator` you saw in the previous step constructs a map of maps: the count of logins per user, per application.  Below is the core logic of the `LoginAggregator`.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#discussion_r419459842", "createdAt": "2020-05-04T14:02:42Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/cogrouping-streams/kstreams/markup/dev/make-aggregator.adoc", "diffHunk": "@@ -0,0 +1,27 @@\n+////\n+In this file you describe the Kafka streams topology, and should cover the main points of the tutorial.\n+The text assumes a method buildTopology exists and constructs the Kafka Streams application.  Feel free to modify the text below to suit your needs.\n+////\n+\n+The `Aggregator` you saw in the previous step, constructs a map keeping a count of user logins per user, per application, so a map of maps.  Here you'll see the core logic of the `LoginAggregator`, and the code is straightforward, as you can see below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1d7afa2f9a6e50607ab49f651712bc8aa27496"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MDExMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each call to `Aggregator.apply` retrieves the user login map for the given application id (or creating one if it doesn't exist).  From there, the `Aggregator` increments the login count for the given user.\n          \n          \n            \n            Each call to `Aggregator.apply` retrieves the user login map for the given application id (or creates one if it doesn't exist).  From there, the `Aggregator` increments the login count for the given user.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#discussion_r419460111", "createdAt": "2020-05-04T14:03:08Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/cogrouping-streams/kstreams/markup/dev/make-aggregator.adoc", "diffHunk": "@@ -0,0 +1,27 @@\n+////\n+In this file you describe the Kafka streams topology, and should cover the main points of the tutorial.\n+The text assumes a method buildTopology exists and constructs the Kafka Streams application.  Feel free to modify the text below to suit your needs.\n+////\n+\n+The `Aggregator` you saw in the previous step, constructs a map keeping a count of user logins per user, per application, so a map of maps.  Here you'll see the core logic of the `LoginAggregator`, and the code is straightforward, as you can see below.\n+\n+Each call to `Aggregator.apply` retrieves the user login map for the given application id (or creating one if it doesn't exist).  From there, the `Aggregator` increments the login count for the given user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1d7afa2f9a6e50607ab49f651712bc8aa27496"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MDU4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This tutorial uses 4 streams.  The three input streams have a record type of `LoginEvent` used to represent a user logging into an application.  The fourth stream is an ouput stream that writes a `LoginRollup` object out to a topic.  In the next steps you'll create the avro schemas for these objects.\n          \n          \n            \n            This tutorial uses 4 streams.  The three input streams have a record type of `LoginEvent` used to represent a user logging into an application.  The fourth stream is an output stream that writes a `LoginRollup` object out to a topic.  In the next steps you'll create the Avro schemas for these objects.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#discussion_r419460584", "createdAt": "2020-05-04T14:03:49Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/cogrouping-streams/kstreams/markup/dev/make-avro-dir.adoc", "diffHunk": "@@ -0,0 +1,8 @@\n+\n+This tutorial uses 4 streams.  The three input streams have a record type of `LoginEvent` used to represent a user logging into an application.  The fourth stream is an ouput stream that writes a `LoginRollup` object out to a topic.  In the next steps you'll create the avro schemas for these objects.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1d7afa2f9a6e50607ab49f651712bc8aa27496"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NDAwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Next, you have three input streams (`appOneStream`, `appTwoStream`, and `appThreeStream`).  You need the intermediate object `KGroupedStream`  so you execute the\n          \n          \n            \n            `groupByKey()` method on each stream.  For this tutorial, we have assumed the incoming records already have keys.  Otherwise, you'll need to use a key selecting method (`selectKey()`, `map()`), or `groupBy()` to successfully group by key.\n          \n          \n            \n            Next, you have three input streams: `appOneStream`, `appTwoStream`, and `appThreeStream`.  You need the intermediate object `KGroupedStream`, so you execute the `groupByKey()` method on each stream.  For this tutorial, we have assumed the incoming records already have keys.  In cases where records lack keys, you need to use a key-selecting method (`selectKey()`, `map()`, or `groupBy()`) to successfully group by key.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#discussion_r419464008", "createdAt": "2020-05-04T14:08:13Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/cogrouping-streams/kstreams/markup/dev/make-topology.adoc", "diffHunk": "@@ -0,0 +1,39 @@\n+////\n+In this file you describe the Kafka streams topology, and should cover the main points of the tutorial.\n+The text assumes a method buildTopology exists and constructs the Kafka Streams application.  Feel free to modify the text below to suit your needs.\n+////\n+\n+Before you create the Java class to run the `Cogrouping` example, let's dive into the main point of this tutorial, how we use cogrouping:\n+\n+++++\n+<pre class=\"snippet\">\n+    <code class=\"java\">\n+        final Aggregator&lt;String, LoginEvent, LoginRollup&gt; loginAggregator = new LoginAggregator();\n+\n+        final KGroupedStream&lt;String, LoginEvent&gt; appOneGrouped = appOneStream.groupByKey();\n+        final KGroupedStream&lt;String, LoginEvent&gt; appTwoGrouped = appTwoStream.groupByKey();\n+        final KGroupedStream&lt;String, LoginEvent&gt; appThreeGrouped = appThreeStream.groupByKey();\n+\n+        appOneGrouped.cogroup(loginAggregator)\n+            .cogroup(appTwoGrouped, loginAggregator)\n+            .cogroup(appThreeGrouped, loginAggregator)\n+            .aggregate(() -&gt; new LoginRollup(new HashMap&lt;>()), Materialized.with(Serdes.String(), loginRollupSerde))\n+            .toStream().to(totalResultOutputTopic, Produced.with(stringSerde, loginRollupSerde));\n+    </code>\n+</pre>\n+++++\n+\n+You're using the cogrouping functionality here to get an overall grouping of logins per application.  Kafka Streams creates this total grouping by using an `Aggregator` who knows how to extract records from each grouped stream.  Your `Aggregator` instance here knows how to correctly combine each `LoginEvent` into the larger `LoginRollup` object.  You'll learn more about `Aggregator` in the next step.\n+\n+Next, you have three input streams (`appOneStream`, `appTwoStream`, and `appThreeStream`).  You need the intermediate object `KGroupedStream`  so you execute the\n+`groupByKey()` method on each stream.  For this tutorial, we have assumed the incoming records already have keys.  Otherwise, you'll need to use a key selecting method (`selectKey()`, `map()`), or `groupBy()` to successfully group by key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1d7afa2f9a6e50607ab49f651712bc8aa27496"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NDkxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For more background on cogrouping functionality in stream you can https://cwiki.apache.org/confluence/display/KAFKA/KIP-150+-+Kafka-Streams+Cogroup[read the KIP proposal].\n          \n          \n            \n            For more background on cogrouping functionality in stream you can https://cwiki.apache.org/confluence/display/KAFKA/KIP-150+-+Kafka-Streams+Cogroup[read the KIP-150 proposal].", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#discussion_r419464918", "createdAt": "2020-05-04T14:09:28Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/cogrouping-streams/kstreams/markup/dev/make-topology.adoc", "diffHunk": "@@ -0,0 +1,39 @@\n+////\n+In this file you describe the Kafka streams topology, and should cover the main points of the tutorial.\n+The text assumes a method buildTopology exists and constructs the Kafka Streams application.  Feel free to modify the text below to suit your needs.\n+////\n+\n+Before you create the Java class to run the `Cogrouping` example, let's dive into the main point of this tutorial, how we use cogrouping:\n+\n+++++\n+<pre class=\"snippet\">\n+    <code class=\"java\">\n+        final Aggregator&lt;String, LoginEvent, LoginRollup&gt; loginAggregator = new LoginAggregator();\n+\n+        final KGroupedStream&lt;String, LoginEvent&gt; appOneGrouped = appOneStream.groupByKey();\n+        final KGroupedStream&lt;String, LoginEvent&gt; appTwoGrouped = appTwoStream.groupByKey();\n+        final KGroupedStream&lt;String, LoginEvent&gt; appThreeGrouped = appThreeStream.groupByKey();\n+\n+        appOneGrouped.cogroup(loginAggregator)\n+            .cogroup(appTwoGrouped, loginAggregator)\n+            .cogroup(appThreeGrouped, loginAggregator)\n+            .aggregate(() -&gt; new LoginRollup(new HashMap&lt;>()), Materialized.with(Serdes.String(), loginRollupSerde))\n+            .toStream().to(totalResultOutputTopic, Produced.with(stringSerde, loginRollupSerde));\n+    </code>\n+</pre>\n+++++\n+\n+You're using the cogrouping functionality here to get an overall grouping of logins per application.  Kafka Streams creates this total grouping by using an `Aggregator` who knows how to extract records from each grouped stream.  Your `Aggregator` instance here knows how to correctly combine each `LoginEvent` into the larger `LoginRollup` object.  You'll learn more about `Aggregator` in the next step.\n+\n+Next, you have three input streams (`appOneStream`, `appTwoStream`, and `appThreeStream`).  You need the intermediate object `KGroupedStream`  so you execute the\n+`groupByKey()` method on each stream.  For this tutorial, we have assumed the incoming records already have keys.  Otherwise, you'll need to use a key selecting method (`selectKey()`, `map()`), or `groupBy()` to successfully group by key.\n+\n+Now with your `KGroupedStream` objects, you start creating your larger aggregate by calling `KGroupedStream.cogroup()` on the first stream, using your `Aggregator`.  This first step returns a `CogroupedKStream` instance.  Then for each remaining `KGroupedStream`, you execute `CogroupedKSteam.cogroup()` using one of the `KGroupedStream` instances and the `Aggregator` you created previously.  You repeat this sequence of calls for all of the `KGroupedStream` objects you want to combine into an overall aggregate.\n+\n+For more background on cogrouping functionality in stream you can https://cwiki.apache.org/confluence/display/KAFKA/KIP-150+-+Kafka-Streams+Cogroup[read the KIP proposal].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1d7afa2f9a6e50607ab49f651712bc8aa27496"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3MDM1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              problem: \"you have multiple streams with an aggregate value that you want to combine into a single object\"\n          \n          \n            \n              problem: \"you have multiple streams, each with an aggregate value like `count`,  that you want to combine into a single result\"", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#discussion_r419470357", "createdAt": "2020-05-04T14:17:09Z", "author": {"login": "colinhicks"}, "path": "_data/tutorials.yaml", "diffHunk": "@@ -257,3 +257,14 @@ naming-changelog-repartition-topics:\n     ksql: disabled\n     kstreams: enabled\n     kafka: disabled\n+\n+cogrouping-streams:\n+  title: \"How to combine stream aggregates together in a single larger object\"\n+  meta-description: \"How to combine stream aggregates together in a single larger object\"\n+  slug: \"/cogrouping-streams\"\n+  problem: \"you have multiple streams with an aggregate value that you want to combine into a single object\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1d7afa2f9a6e50607ab49f651712bc8aa27496"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3ODkzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              introduction: \"You have mulitple streams with an aggregate value but you want to group them all together - cogrouping.  In this tutorial we'll cover how to use the KStreams CoGrouping functionality to merge mulitple aggregates into a single aggregate object\"\n          \n          \n            \n              introduction: \"You want to compute the count of user login events per application in your system, grouping the individual result from each source stream into one aggregated object.  In this tutorial we'll cover how to use the Kafka Streams Cogrouping functionality to accomplish this task with clear, performant code\"", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#discussion_r419478930", "createdAt": "2020-05-04T14:28:40Z", "author": {"login": "colinhicks"}, "path": "_data/tutorials.yaml", "diffHunk": "@@ -257,3 +257,14 @@ naming-changelog-repartition-topics:\n     ksql: disabled\n     kstreams: enabled\n     kafka: disabled\n+\n+cogrouping-streams:\n+  title: \"How to combine stream aggregates together in a single larger object\"\n+  meta-description: \"How to combine stream aggregates together in a single larger object\"\n+  slug: \"/cogrouping-streams\"\n+  problem: \"you have multiple streams with an aggregate value that you want to combine into a single object\"\n+  introduction: \"You have mulitple streams with an aggregate value but you want to group them all together - cogrouping.  In this tutorial we'll cover how to use the KStreams CoGrouping functionality to merge mulitple aggregates into a single aggregate object\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1d7afa2f9a6e50607ab49f651712bc8aa27496"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ca77d4033953b157cd8903e5f2af6699994ce38", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/4ca77d4033953b157cd8903e5f2af6699994ce38", "committedDate": "2020-05-04T20:48:50Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Colin Hicks <colin.hicks@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c44be55e156b5a6b11ea02165424023ce769077a", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/confluentinc/kafka-tutorials/commit/c44be55e156b5a6b11ea02165424023ce769077a", "committedDate": "2020-05-04T21:06:35Z", "message": "updates for gitignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1Nzk3OTUz", "url": "https://github.com/confluentinc/kafka-tutorials/pull/330#pullrequestreview-405797953", "createdAt": "2020-05-05T13:40:30Z", "commit": {"oid": "c44be55e156b5a6b11ea02165424023ce769077a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 313, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}