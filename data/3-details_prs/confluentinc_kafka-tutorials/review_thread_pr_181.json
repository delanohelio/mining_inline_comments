{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNDUyMTEz", "number": 181, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1MzoyNVrODYjSdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxMzoxNFrODYjxPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDcwNTgwOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/hopping-windows/ksql/code/docker-compose.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1MzoyNVrOFeeSeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1MzoyNVrOFeeSeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ5Nzg1MA==", "bodyText": "Let's use CP 5.3.2 for all docker images", "url": "https://github.com/confluentinc/kafka-tutorials/pull/181#discussion_r367497850", "createdAt": "2020-01-16T15:53:25Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/hopping-windows/ksql/code/docker-compose.yml", "diffHunk": "@@ -0,0 +1,80 @@\n+---\n+version: '2'\n+\n+services:\n+  zookeeper:\n+    image: confluentinc/cp-zookeeper:5.3.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcb3447181e1a6041acfc614aa5cb27e5573406"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDcxNjUwOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/hopping-windows/ksql/markup/dev/create-inputs.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1NTo0OVrOFeeY8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1NTo0OVrOFeeY8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ5OTUwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To start off the implementation of this scenario, you need to create a stream that will represents the temperature readings coming from the sensors. Since we will be handling time in this scenario, it is important that each reading contains a timestamp indicating when that reading was taken. The field `TIMESTAMP` will be used for this purpose.\n          \n          \n            \n            To start off the implementation of this scenario, you need to create a stream that represents the temperature readings coming from the sensors. Since we will be handling time in this scenario, it is important that each reading contains a timestamp indicating when that reading was taken. The field `TIMESTAMP` will be used for this purpose.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/181#discussion_r367499507", "createdAt": "2020-01-16T15:55:49Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/hopping-windows/ksql/markup/dev/create-inputs.adoc", "diffHunk": "@@ -0,0 +1,5 @@\n+To start off the implementation of this scenario, you need to create a stream that will represents the temperature readings coming from the sensors. Since we will be handling time in this scenario, it is important that each reading contains a timestamp indicating when that reading was taken. The field `TIMESTAMP` will be used for this purpose.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcb3447181e1a6041acfc614aa5cb27e5573406"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDcxODQ5OnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/hopping-windows/ksql/code/docker-compose.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1NjoxNlrOFeeaHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1NjoxNlrOFeeaHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ5OTgwNg==", "bodyText": "Let's use CP 5.3.2 for the docker images.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/181#discussion_r367499806", "createdAt": "2020-01-16T15:56:16Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/hopping-windows/ksql/code/docker-compose.yml", "diffHunk": "@@ -0,0 +1,80 @@\n+---\n+version: '2'\n+\n+services:\n+  zookeeper:\n+    image: confluentinc/cp-zookeeper:5.3.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcb3447181e1a6041acfc614aa5cb27e5573406"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDczMjgxOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/hopping-windows/ksql/markup/dev/transient-query.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1OTo0NVrOFeejBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1OTo0NVrOFeejBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwMjA4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note that we called the query that detects the temperature drop as `TRIGGERED_ALERTS` and we modeled as a table, since we are performing some aggregations in the query. But just like the temperature readings, alerts can happen continuously as well in a form of a stream of events -- therefore we transform the table back to a stream so we can have multiple alerts throughout time. Finally, also note that we rekeyed the stream to use the `ID` field as key.\n          \n          \n            \n            Note that we called the query that detects the temperature drop as `TRIGGERED_ALERTS` and we modeled as a table, since we are performing some aggregations in the query. But just like the temperature readings, alerts can happen continuously \u2013 therefore we transform the table back to a stream so we can have multiple alerts throughout time. Finally, also note that we rekeyed the stream to use the `ID` field as key.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/181#discussion_r367502084", "createdAt": "2020-01-16T15:59:45Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/hopping-windows/ksql/markup/dev/transient-query.adoc", "diffHunk": "@@ -0,0 +1,11 @@\n+Note that we called the query that detects the temperature drop as `TRIGGERED_ALERTS` and we modeled as a table, since we are performing some aggregations in the query. But just like the temperature readings, alerts can happen continuously as well in a form of a stream of events -- therefore we transform the table back to a stream so we can have multiple alerts throughout time. Finally, also note that we rekeyed the stream to use the `ID` field as key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcb3447181e1a6041acfc614aa5cb27e5573406"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDc0MzY0OnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/hopping-windows/ksql/markup/dev/transient-window.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjowMjoxMVrOFeepnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjowMjoxMVrOFeepnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwMzc3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Now here comes the fun part. We need to create a query capable of detecting when the temperature drops below 45F for a period of 10 seconds. However, since our sensor emits readings every 5 seconds, we need to come up with a way to detect this even if the drop goes beyond the interval of 10 seconds. Hence why we are using hopping windows for this scenario. Since hopping windows are possibly-overlapping, we may have situations in which the temperature dropped across multiple 10 second windows.\n          \n          \n            \n            Now here comes the fun part. We need to create a query capable of detecting when the temperature drops below 45 \u00b0F for a period of 10 seconds. However, since our sensor emits readings every 5 seconds, we need to come up with a way to detect this even if the drop goes beyond the interval of 10 seconds. Hence why we are using hopping windows for this scenario. Since hopping windows may overlap, we may have situations in which the temperature dropped across multiple 10 second windows.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/181#discussion_r367503773", "createdAt": "2020-01-16T16:02:11Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/hopping-windows/ksql/markup/dev/transient-window.adoc", "diffHunk": "@@ -0,0 +1,13 @@\n+Now here comes the fun part. We need to create a query capable of detecting when the temperature drops below 45F for a period of 10 seconds. However, since our sensor emits readings every 5 seconds, we need to come up with a way to detect this even if the drop goes beyond the interval of 10 seconds. Hence why we are using hopping windows for this scenario. Since hopping windows are possibly-overlapping, we may have situations in which the temperature dropped across multiple 10 second windows.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcb3447181e1a6041acfc614aa5cb27e5573406"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDc3MzYxOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/hopping-windows/ksql/markup/dev/transient-window.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxMDoxN1rOFee8gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxMDoxN1rOFee8gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwODYxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Along with the implementation of a hopping window, we will based off our logic in the average temperature within the detected period, and we will show this period through two different fields called `START_PERIOD` and `END_PERIOD`. This may come in handy if your alert system needs to have the information of when the temperature drop happened, besides of course doing the alerting.\n          \n          \n            \n            Along with implementing a hopping window, we will base our logic on the average temperature within the detected period, and we will show this period through two different fields called `START_PERIOD` and `END_PERIOD`. This may come in handy if your alert system needs to display the specific time period associated with each alert.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/181#discussion_r367508611", "createdAt": "2020-01-16T16:10:17Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/hopping-windows/ksql/markup/dev/transient-window.adoc", "diffHunk": "@@ -0,0 +1,13 @@\n+Now here comes the fun part. We need to create a query capable of detecting when the temperature drops below 45F for a period of 10 seconds. However, since our sensor emits readings every 5 seconds, we need to come up with a way to detect this even if the drop goes beyond the interval of 10 seconds. Hence why we are using hopping windows for this scenario. Since hopping windows are possibly-overlapping, we may have situations in which the temperature dropped across multiple 10 second windows.\n+\n+Along with the implementation of a hopping window, we will based off our logic in the average temperature within the detected period, and we will show this period through two different fields called `START_PERIOD` and `END_PERIOD`. This may come in handy if your alert system needs to have the information of when the temperature drop happened, besides of course doing the alerting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcb3447181e1a6041acfc614aa5cb27e5573406"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDc3NTM5OnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/hopping-windows/ksql/markup/dev/transient-window.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxMDo0NFrOFee9kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxMDo0NFrOFee9kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwODg4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This should query should produce the following output:\n          \n          \n            \n            This query should produce the following output:", "url": "https://github.com/confluentinc/kafka-tutorials/pull/181#discussion_r367508880", "createdAt": "2020-01-16T16:10:44Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/hopping-windows/ksql/markup/dev/transient-window.adoc", "diffHunk": "@@ -0,0 +1,13 @@\n+Now here comes the fun part. We need to create a query capable of detecting when the temperature drops below 45F for a period of 10 seconds. However, since our sensor emits readings every 5 seconds, we need to come up with a way to detect this even if the drop goes beyond the interval of 10 seconds. Hence why we are using hopping windows for this scenario. Since hopping windows are possibly-overlapping, we may have situations in which the temperature dropped across multiple 10 second windows.\n+\n+Along with the implementation of a hopping window, we will based off our logic in the average temperature within the detected period, and we will show this period through two different fields called `START_PERIOD` and `END_PERIOD`. This may come in handy if your alert system needs to have the information of when the temperature drop happened, besides of course doing the alerting.\n+\n++++++\n+<pre class=\"snippet\"><code class=\"sql\">{% include_raw tutorials/hopping-windows/ksql/code/tutorial-steps/dev/transient-window.sql %}</code></pre>\n++++++\n+\n+This should query should produce the following output:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcb3447181e1a6041acfc614aa5cb27e5573406"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDc4NDYyOnYy", "diffSide": "RIGHT", "path": "_data/tutorials.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxMzoxNVrOFefDdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxMzoxNVrOFefDdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxMDM4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              introduction: \"You want to build an alerting system that automatically detects if the temperature of a room consistently drops. In this tutorial, we'll write a program that monitors a stream of temperature readings and detect when the temperature consistently drops below 45F for a period of 10 seconds.\"\n          \n          \n            \n              introduction: \"You want to build an alerting system that automatically detects if the temperature of a room consistently drops. In this tutorial, we'll write a program that monitors a stream of temperature readings and detects when the temperature drops below 45 \u00b0F for a period of 10 seconds.\"", "url": "https://github.com/confluentinc/kafka-tutorials/pull/181#discussion_r367510389", "createdAt": "2020-01-16T16:13:15Z", "author": {"login": "colinhicks"}, "path": "_data/tutorials.yaml", "diffHunk": "@@ -100,7 +100,15 @@ tumbling-windows:\n   introduction: \"Suppose you have a topic with events that represent ratings of movies. In this tutorial, we'll write a program that maintains tumbling windows counting the total number of ratings that each movie has received.\"\n   status:\n     ksql: enabled\n-    kstreams: enabled\n+\n+hopping-windows:\n+  title: \"How to create hopping windows\"\n+  meta-description: \"Learn to create hopping windows\"\n+  slug: \"/create-hopping-windows\"\n+  problem: \"you have time-series events in a Kafka topic, and you want to group them into fixed-size, possibly-overlapping, contiguous time intervals to identify an specific scenario.\"\n+  introduction: \"You want to build an alerting system that automatically detects if the temperature of a room consistently drops. In this tutorial, we'll write a program that monitors a stream of temperature readings and detect when the temperature consistently drops below 45F for a period of 10 seconds.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcb3447181e1a6041acfc614aa5cb27e5573406"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4009, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}