{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MzQ1NDc3", "number": 421, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoxMDowMFrOEC-MHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoxMjo1MVrOEC-Qdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTUxNTE2OnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/aggregating-count/ksql/markup/dev/transient-query.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoxMDowMFrOGfwKRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoxMDowMFrOGfwKRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0ODEwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            With our test data and configuration parameters in place, let\u2019s try a query to compute our ticket totals. A `SELECT` statement with an `EMIT CHANGES` in ksqlDB is called a transient push query, unlike a traditional db query, which returns a single result set, the query continuously streams back results and once we stop it, it is gone and will not keep processing the input stream. That's what we're doing in this step. The counterpart to a transient query is a _persistent_ query, which we'll create a few steps from now.\n          \n          \n            \n            With our test data and configuration parameters in place, let\u2019s try a query to compute our ticket totals. A `SELECT` statement with an `EMIT CHANGES` in ksqlDB is called a transient push query. \n          \n          \n            \n            \n          \n          \n            \n            Unlike a traditional database query, which returns a single result set, the query continuously streams back results. Once we stop it, it is gone and will not keep processing the input stream. That's what we're doing in this step. The counterpart to a transient query is a _persistent_ query, which we'll create a few steps from now.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/421#discussion_r435948102", "createdAt": "2020-06-05T14:10:00Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/aggregating-count/ksql/markup/dev/transient-query.adoc", "diffHunk": "@@ -1,6 +1,6 @@\n-With our test data and configuration parameters in place, let\u2019s try a query to compute our ticket totals. A `SELECT` statement all by itself in ksqlDB is called a transient query, meaning that after we stop it, it is gone and will not keep processing the input stream. That's what we're doing in this step. The counterpart to a transient query is a _persistent_ query, which we'll create a few steps from now.\n+With our test data and configuration parameters in place, let\u2019s try a query to compute our ticket totals. A `SELECT` statement with an `EMIT CHANGES` in ksqlDB is called a transient push query, unlike a traditional db query, which returns a single result set, the query continuously streams back results and once we stop it, it is gone and will not keep processing the input stream. That's what we're doing in this step. The counterpart to a transient query is a _persistent_ query, which we'll create a few steps from now.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9bc70be9a5a8217e55a03b2c3074f2ea8ca983"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTUyMDQwOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/aggregating-minmax/ksql/markup/dev/persistent-query.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoxMToxNFrOGfwNew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoxMToxNFrOGfwNew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0ODkyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Since the output looks right, the next step is to make the query persistent. This looks exactly like the push query, except we have added a `CREATE TABLE AS` statement to the beginning of it. This statement returns to the CLI prompt right away, having created a persistent stream processing program running in the ksqlDB engine, continuously processing input records and updating the resulting `MOVIE_FIGURES_BY_YEAR` table. Moreover, we don't see the results of the query displayed in the CLI, because they are updating the newly-created table itself. That table is available to other ksqlDB queries for further processing, and by default all its records are produced to a topic having the same name (`MOVIE_FIGURES_BY_YEAR`).\n          \n          \n            \n            Since the output looks right, the next step is to make the query persistent. This looks exactly like the push query, except we have added a `CREATE TABLE AS` statement to the beginning of it. This statement returns to the CLI prompt right away, having created a persistent stream processing program running in the ksqlDB engine, continuously processing input records and updating the resulting `MOVIE_FIGURES_BY_YEAR` table.\n          \n          \n            \n            \n          \n          \n            \n            Moreover, we don't see the results of the query displayed in the CLI, because they are updating the newly-created table itself. That table is available to other ksqlDB queries for further processing, and by default all its records are produced to a topic having the same name (`MOVIE_FIGURES_BY_YEAR`).", "url": "https://github.com/confluentinc/kafka-tutorials/pull/421#discussion_r435948923", "createdAt": "2020-06-05T14:11:14Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/aggregating-minmax/ksql/markup/dev/persistent-query.adoc", "diffHunk": "@@ -1,4 +1,4 @@\n-Since the output looks right, the next step is to make the query persistent. This looks exactly like the transient query, except we have added a `CREATE TABLE AS` statement to the beginning of it. This statement returns to the CLI prompt right away, having created a persistent stream processing program running in the ksqlDB engine, continuously processing input records and updating the resulting `MOVIE_FIGURES_BY_YEAR` table. Moreover, we don't see the results of the query displayed in the CLI, because they are updating the newly-created table itself. That table is available to other ksqlDB queries for further processing, and by default all its records are produced to a topic having the same name (`MOVIE_FIGURES_BY_YEAR`).\n+Since the output looks right, the next step is to make the query persistent. This looks exactly like the push query, except we have added a `CREATE TABLE AS` statement to the beginning of it. This statement returns to the CLI prompt right away, having created a persistent stream processing program running in the ksqlDB engine, continuously processing input records and updating the resulting `MOVIE_FIGURES_BY_YEAR` table. Moreover, we don't see the results of the query displayed in the CLI, because they are updating the newly-created table itself. That table is available to other ksqlDB queries for further processing, and by default all its records are produced to a topic having the same name (`MOVIE_FIGURES_BY_YEAR`).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9bc70be9a5a8217e55a03b2c3074f2ea8ca983"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTUyNjMwOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/aggregating-minmax/ksql/markup/dev/transient-query.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoxMjo1MVrOGfwRZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoxMjo1MVrOGfwRZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0OTkyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you're minimally familiar with SQL, the text of the query itself is fairly self-explanatory. We are calculating the highest and lowest grossing movie figures by year using `MIN` and `MAX` aggregations on the `TOTAL_SALES` column. This query will keep running, continuing to return results until you hit CTRL-C. Most ksqlDB queries are _continuous queries_ that run forever in this way; there is always potentially more input available in the source stream, so the query never finishes on its own.\n          \n          \n            \n            If you're familiar with SQL, the text of the query itself is fairly self-explanatory. We are calculating the highest and lowest grossing movie figures by year using `MIN` and `MAX` aggregations on the `TOTAL_SALES` column. This query will keep running, continuing to return results until you hit CTRL-C. Most ksqlDB queries are _continuous queries_ that run forever in this way; there is always potentially more input available in the source stream, so the query never finishes on its own.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/421#discussion_r435949925", "createdAt": "2020-06-05T14:12:51Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/aggregating-minmax/ksql/markup/dev/transient-query.adoc", "diffHunk": "@@ -1,6 +1,6 @@\n-With our test data in place, let's try a query to compute the min and max. A SELECT statement all by itself in ksqlDB is called a _transient_ query, meaning that after we stop it, it is gone and will not keep processing the input stream. We'll create a _persistent_ query, the contrast to a transient query, a few steps from now.\n+With our test data in place, let's try a query to compute the min and max. A `SELECT` statement with an `EMIT CHANGES` in ksqlDB is called a _transient_ push query, meaning that after we stop it, it is gone and will not keep processing the input stream. We'll create a _persistent_ query, the contrast to a transient push query, a few steps from now.\n \n-If you're minimally familiar with SQL, the text of the query itself is fairly self-explanatory. We are calculating the highest and lowest grossing movie figures by year using `MIN` and `MAX` aggregations on the `TOTAL_SALES` field. This query will keep running, continuing to return results until you hit CTRL-C. Most ksqlDB queries are _continuous queries_ that run forever in this way; there is always potentially more input available in the source stream, so the query never finishes on its own.\n+If you're minimally familiar with SQL, the text of the query itself is fairly self-explanatory. We are calculating the highest and lowest grossing movie figures by year using `MIN` and `MAX` aggregations on the `TOTAL_SALES` column. This query will keep running, continuing to return results until you hit CTRL-C. Most ksqlDB queries are _continuous queries_ that run forever in this way; there is always potentially more input available in the source stream, so the query never finishes on its own.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9bc70be9a5a8217e55a03b2c3074f2ea8ca983"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3902, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}