{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2Nzk3MzY5", "number": 441, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0MjoxMFrOEHLXDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxNzowMVrOEIYtaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTYxNjEyOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0MjoxMFrOGmbHYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0NTo0MFrOGmbNiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0MzMyOA==", "bodyText": "I noticed this section does not discuss action: docker_ksql_cli_session. This type probably deserves its own description below.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r442943328", "createdAt": "2020-06-19T16:42:10Z", "author": {"login": "colinhicks"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.\n+\n+The `Makefile` will delete and re-create the `outputs` directory used contain files with output from various steps used to verify the tutorial steps.\n+\n+Here's an example of the contents of a `Makefile`:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/fk-joins/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output-events.json $(DEV_OUTPUTS_DIR)/music-interest.json\n+```\n+\n+The last line uses the `diff` command to validate expected output against the actual output of tutorial steps.  The `Makefile` may have more than one valdiation step so it will have separate `diff` commmands for each verification.  For example:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/dynamic-output-topic/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output.json $(DEV_OUTPUTS_DIR)/actual-output.json\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-special-output.json $(DEV_OUTPUTS_DIR)/actual-special-order-output.json\n+```\n+\n+\n+\n+\n+#### 1. Structure\n+\n+Three top-level sections make up the harness file:\n+\n+* dev - the setup and teaching portion of the tutorial (required)\n+* test - test setup and execution of tests, if any (optional)\n+* prod - steps to build and deploy a docker image of the tutorial code (optional)\n+\n+In some cases, having a test and or prod section doesn't make sense, so those sections can be left out of the harness file.  The Apache Kafka console producer and consumer tutorials are a good example of tutorials that don't need a test or prod section.\n+\n+The `dev`, `test`, and `prod` sections contain a top-level element `steps`.  The `steps` contains any number of well, steps for the user to walk through.  Addtionally the `harness_runner` script follows the same steps for executing the tutorial automatically during builds.  The steps in any section are structured in the same way, so we'll only discuss the make-up of a single section.\n+\n+For reference here is an example section\n+\n+```yml\n+ - title: Get Confluent Platform\n+      content:\n+        - action: make_file\n+          file: docker-compose.yml\n+          render:\n+            file: tutorials/console-consumer-primitive-keys-values/kafka/markup/dev/make-docker-compose.adoc\n+\n+        - action: execute_async\n+          file: tutorial-steps/dev/docker-compose-up.sh\n+          render:\n+            file: tutorials/console-consumer-primitive-keys-values/kafka/markup/dev/start-compose.adoc\n+\n+        - action: execute\n+          file: tutorial-steps/dev/wait-for-containers.sh\n+          render:\n+            skip: true\n+\n+        - name: wait for ksqldb-server and connectors\n+          action: sleep\n+          ms: 30000\n+          render:\n+            skip: true\n+```\n+\n+\n+* Title - each section starts with a `title` element and as the label suggests, the text provided here is the text used the label the step for the tutorial user and the output to the console by the harness runner.  The `title` section contains one element - `content`\n+\n+* content - the `content` section (a YAML `dictionary`) contains an arbitrary sized list of YAML dictionaries named `action`. An `action` key creates an anonymous step i.e. not specified in the output of the test runner.  For output in the test runner, you can provide a `-name` key followed by some text for console output.\n+* action - `action` keys drive the behavior of the harness. An action key can be one of these values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NDkwNw==", "bodyText": "ack, will do!", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r442944907", "createdAt": "2020-06-19T16:45:40Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.\n+\n+The `Makefile` will delete and re-create the `outputs` directory used contain files with output from various steps used to verify the tutorial steps.\n+\n+Here's an example of the contents of a `Makefile`:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/fk-joins/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output-events.json $(DEV_OUTPUTS_DIR)/music-interest.json\n+```\n+\n+The last line uses the `diff` command to validate expected output against the actual output of tutorial steps.  The `Makefile` may have more than one valdiation step so it will have separate `diff` commmands for each verification.  For example:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/dynamic-output-topic/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output.json $(DEV_OUTPUTS_DIR)/actual-output.json\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-special-output.json $(DEV_OUTPUTS_DIR)/actual-special-order-output.json\n+```\n+\n+\n+\n+\n+#### 1. Structure\n+\n+Three top-level sections make up the harness file:\n+\n+* dev - the setup and teaching portion of the tutorial (required)\n+* test - test setup and execution of tests, if any (optional)\n+* prod - steps to build and deploy a docker image of the tutorial code (optional)\n+\n+In some cases, having a test and or prod section doesn't make sense, so those sections can be left out of the harness file.  The Apache Kafka console producer and consumer tutorials are a good example of tutorials that don't need a test or prod section.\n+\n+The `dev`, `test`, and `prod` sections contain a top-level element `steps`.  The `steps` contains any number of well, steps for the user to walk through.  Addtionally the `harness_runner` script follows the same steps for executing the tutorial automatically during builds.  The steps in any section are structured in the same way, so we'll only discuss the make-up of a single section.\n+\n+For reference here is an example section\n+\n+```yml\n+ - title: Get Confluent Platform\n+      content:\n+        - action: make_file\n+          file: docker-compose.yml\n+          render:\n+            file: tutorials/console-consumer-primitive-keys-values/kafka/markup/dev/make-docker-compose.adoc\n+\n+        - action: execute_async\n+          file: tutorial-steps/dev/docker-compose-up.sh\n+          render:\n+            file: tutorials/console-consumer-primitive-keys-values/kafka/markup/dev/start-compose.adoc\n+\n+        - action: execute\n+          file: tutorial-steps/dev/wait-for-containers.sh\n+          render:\n+            skip: true\n+\n+        - name: wait for ksqldb-server and connectors\n+          action: sleep\n+          ms: 30000\n+          render:\n+            skip: true\n+```\n+\n+\n+* Title - each section starts with a `title` element and as the label suggests, the text provided here is the text used the label the step for the tutorial user and the output to the console by the harness runner.  The `title` section contains one element - `content`\n+\n+* content - the `content` section (a YAML `dictionary`) contains an arbitrary sized list of YAML dictionaries named `action`. An `action` key creates an anonymous step i.e. not specified in the output of the test runner.  For output in the test runner, you can provide a `-name` key followed by some text for console output.\n+* action - `action` keys drive the behavior of the harness. An action key can be one of these values", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0MzMyOA=="}, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM3ODA3OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyMzozOFrOGmig7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyMzozOFrOGmig7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDU1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Working with the harness file\n          \n          \n            \n            ## Testing Locally", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443064559", "createdAt": "2020-06-19T22:23:38Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM3OTU0OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyNDo0MFrOGmihzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjowNzowOFrOGokxgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDc4Mw==", "bodyText": "@bbejeck can we had a Table of Contents at the top of the README?", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443064783", "createdAt": "2020-06-19T22:24:40Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0ODkyMA==", "bodyText": "@ybyzek I took a stab at this, check it out and let me know WYT.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443648920", "createdAt": "2020-06-22T15:36:15Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDc4Mw=="}, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MDgyNg==", "bodyText": "@bbejeck Awesome!  For your consideration: decrease it 2 levels instead of 3 levels -- makes it easier for future maintenance so you're not chasing down changes at the 3rd level back to the TOC.  But if you prefer 3, keep it ;). Looks great!", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r444280826", "createdAt": "2020-06-23T14:44:42Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDc4Mw=="}, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5ODcyMw==", "bodyText": "@ybyzek great idea, will do", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r445198723", "createdAt": "2020-06-24T22:07:08Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDc4Mw=="}, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM4MDk2OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyNTozMFrOGmiioQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxMzo1NVrOGnHtLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDk5Mw==", "bodyText": "Why assume?  Can we add a step:\ngit clone https://github.com/confluentinc/kafka-tutorials.git\ncd kafka-tutorials", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443064993", "createdAt": "2020-06-19T22:25:30Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzkwMA==", "bodyText": "ack", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443673900", "createdAt": "2020-06-22T16:13:55Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDk5Mw=="}, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM4MjAyOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyNjoxOFrOGmijTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjo1MjoxMlrOGnJHpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NTE2Ng==", "bodyText": "FYC: hyperlink to an existing Makefile", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443065166", "createdAt": "2020-06-19T22:26:18Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.\n+\n+The `Makefile` will delete and re-create the `outputs` directory used contain files with output from various steps used to verify the tutorial steps.\n+\n+Here's an example of the contents of a `Makefile`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5NzA2Mw==", "bodyText": "ack", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443697063", "createdAt": "2020-06-22T16:52:12Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.\n+\n+The `Makefile` will delete and re-create the `outputs` directory used contain files with output from various steps used to verify the tutorial steps.\n+\n+Here's an example of the contents of a `Makefile`:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NTE2Ng=="}, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM4NTU3OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoyODo1OFrOGmildg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxNDowOFrOGnHtsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NTcxOA==", "bodyText": "Add example.\n\ncd _includes/tutorials/aggregating-count/kstreams/code", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443065718", "createdAt": "2020-06-19T22:28:58Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NDAzNA==", "bodyText": "ack", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443674034", "createdAt": "2020-06-22T16:14:08Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NTcxOA=="}, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM4ODMyOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjozMTowNVrOGminMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo0NTowMVrOGn4Asw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NjE2Mg==", "bodyText": "I tried to run this myself and got:\n\u201cThe \u2018harness-runner==0.0.1\u2019 distribution was not found and is required by the application\u201d\n\n\nHow can I resolve this?\nConsider whether this PR should add the explanation to resolve this error message", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443066162", "createdAt": "2020-06-19T22:31:05Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQxNzg1Nw==", "bodyText": "It would be good to have a dedicated prerequisites section just for being able to test locally. Right now there is ruby, bundle, etc.. required, but I'm not sure this is needed just to run the harness-runner ?\nIdeally a docker version of the harness-runner would be great so that users don't have to install python3 and pip3", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443417857", "createdAt": "2020-06-22T09:05:06Z", "author": {"login": "vdesabou"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NjE2Mg=="}, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3MDI4NA==", "bodyText": "@bbejeck as a reference example:\nhttps://github.com/confluentinc/examples/blob/5.5.0-post/clients/cloud/python/README.md#example-3-run-all-the-above-in-docker\nhttps://github.com/confluentinc/examples/blob/5.5.0-post/clients/cloud/python/requirements.txt\nhttps://github.com/confluentinc/examples/blob/5.5.0-post/clients/cloud/python/Dockerfile\nI think you were thinking of addressing this in a separate PR.  But if you help me debug the harness runner error, I'm happy to build the Docker stuff.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443570284", "createdAt": "2020-06-22T13:47:42Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NjE2Mg=="}, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NTMzMQ==", "bodyText": "Dockerfile:\nFROM python:3.7-slim\nRUN pip3 install pyyaml\n\nBuild and execute:\ndocker build -t runner . ; docker run -v ${PWD}/harness_runner:/harness_runner/ -it --rm runner bash -c 'cd /harness_runner/ && pip3 install -e .'\n\nAnd now make works:\n(cd _includes/tutorials/transforming/kstreams/code/ && make)", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r444465331", "createdAt": "2020-06-23T19:45:01Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NjE2Mg=="}, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM4OTA3OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjozMTo0NVrOGminqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjo1MjoyOFrOGnJIUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NjI4Mw==", "bodyText": "Hyperlink to example file?", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443066283", "createdAt": "2020-06-19T22:31:45Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.\n+\n+The `Makefile` will delete and re-create the `outputs` directory used contain files with output from various steps used to verify the tutorial steps.\n+\n+Here's an example of the contents of a `Makefile`:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/fk-joins/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output-events.json $(DEV_OUTPUTS_DIR)/music-interest.json\n+```\n+\n+The last line uses the `diff` command to validate expected output against the actual output of tutorial steps.  The `Makefile` may have more than one valdiation step so it will have separate `diff` commmands for each verification.  For example:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/dynamic-output-topic/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output.json $(DEV_OUTPUTS_DIR)/actual-output.json\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-special-output.json $(DEV_OUTPUTS_DIR)/actual-special-order-output.json\n+```\n+\n+\n+\n+\n+#### 1. Structure\n+\n+Three top-level sections make up the harness file:\n+\n+* dev - the setup and teaching portion of the tutorial (required)\n+* test - test setup and execution of tests, if any (optional)\n+* prod - steps to build and deploy a docker image of the tutorial code (optional)\n+\n+In some cases, having a test and or prod section doesn't make sense, so those sections can be left out of the harness file.  The Apache Kafka console producer and consumer tutorials are a good example of tutorials that don't need a test or prod section.\n+\n+The `dev`, `test`, and `prod` sections contain a top-level element `steps`.  The `steps` contains any number of well, steps for the user to walk through.  Addtionally the `harness_runner` script follows the same steps for executing the tutorial automatically during builds.  The steps in any section are structured in the same way, so we'll only discuss the make-up of a single section.\n+\n+For reference here is an example section", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5NzIzMw==", "bodyText": "ack", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443697233", "createdAt": "2020-06-22T16:52:28Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.\n+\n+The `Makefile` will delete and re-create the `outputs` directory used contain files with output from various steps used to verify the tutorial steps.\n+\n+Here's an example of the contents of a `Makefile`:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/fk-joins/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output-events.json $(DEV_OUTPUTS_DIR)/music-interest.json\n+```\n+\n+The last line uses the `diff` command to validate expected output against the actual output of tutorial steps.  The `Makefile` may have more than one valdiation step so it will have separate `diff` commmands for each verification.  For example:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/dynamic-output-topic/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output.json $(DEV_OUTPUTS_DIR)/actual-output.json\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-special-output.json $(DEV_OUTPUTS_DIR)/actual-special-order-output.json\n+```\n+\n+\n+\n+\n+#### 1. Structure\n+\n+Three top-level sections make up the harness file:\n+\n+* dev - the setup and teaching portion of the tutorial (required)\n+* test - test setup and execution of tests, if any (optional)\n+* prod - steps to build and deploy a docker image of the tutorial code (optional)\n+\n+In some cases, having a test and or prod section doesn't make sense, so those sections can be left out of the harness file.  The Apache Kafka console producer and consumer tutorials are a good example of tutorials that don't need a test or prod section.\n+\n+The `dev`, `test`, and `prod` sections contain a top-level element `steps`.  The `steps` contains any number of well, steps for the user to walk through.  Addtionally the `harness_runner` script follows the same steps for executing the tutorial automatically during builds.  The steps in any section are structured in the same way, so we'll only discuss the make-up of a single section.\n+\n+For reference here is an example section", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NjI4Mw=="}, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM5MDQ0OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjozMjozOFrOGmioaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjozMjozOFrOGmioaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NjQ3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #### TLDR;\n          \n          \n            \n            #### TL;DR", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443066472", "createdAt": "2020-06-19T22:32:38Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM5MjM1OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjozNDowOFrOGmipmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxMjoyMVrOGnJy7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2Njc3OQ==", "bodyText": "Can you add a hyperlink to those tutorials?", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443066779", "createdAt": "2020-06-19T22:34:08Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.\n+\n+The `Makefile` will delete and re-create the `outputs` directory used contain files with output from various steps used to verify the tutorial steps.\n+\n+Here's an example of the contents of a `Makefile`:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/fk-joins/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output-events.json $(DEV_OUTPUTS_DIR)/music-interest.json\n+```\n+\n+The last line uses the `diff` command to validate expected output against the actual output of tutorial steps.  The `Makefile` may have more than one valdiation step so it will have separate `diff` commmands for each verification.  For example:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/dynamic-output-topic/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output.json $(DEV_OUTPUTS_DIR)/actual-output.json\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-special-output.json $(DEV_OUTPUTS_DIR)/actual-special-order-output.json\n+```\n+\n+\n+\n+\n+#### 1. Structure\n+\n+Three top-level sections make up the harness file:\n+\n+* dev - the setup and teaching portion of the tutorial (required)\n+* test - test setup and execution of tests, if any (optional)\n+* prod - steps to build and deploy a docker image of the tutorial code (optional)\n+\n+In some cases, having a test and or prod section doesn't make sense, so those sections can be left out of the harness file.  The Apache Kafka console producer and consumer tutorials are a good example of tutorials that don't need a test or prod section.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwODE0Mg==", "bodyText": "ack", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443708142", "createdAt": "2020-06-22T17:12:21Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.\n+\n+The `Makefile` will delete and re-create the `outputs` directory used contain files with output from various steps used to verify the tutorial steps.\n+\n+Here's an example of the contents of a `Makefile`:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/fk-joins/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output-events.json $(DEV_OUTPUTS_DIR)/music-interest.json\n+```\n+\n+The last line uses the `diff` command to validate expected output against the actual output of tutorial steps.  The `Makefile` may have more than one valdiation step so it will have separate `diff` commmands for each verification.  For example:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/dynamic-output-topic/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output.json $(DEV_OUTPUTS_DIR)/actual-output.json\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-special-output.json $(DEV_OUTPUTS_DIR)/actual-special-order-output.json\n+```\n+\n+\n+\n+\n+#### 1. Structure\n+\n+Three top-level sections make up the harness file:\n+\n+* dev - the setup and teaching portion of the tutorial (required)\n+* test - test setup and execution of tests, if any (optional)\n+* prod - steps to build and deploy a docker image of the tutorial code (optional)\n+\n+In some cases, having a test and or prod section doesn't make sense, so those sections can be left out of the harness file.  The Apache Kafka console producer and consumer tutorials are a good example of tutorials that don't need a test or prod section.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2Njc3OQ=="}, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM5MjYzOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjozNDoyNFrOGmipxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjozNDoyNFrOGmipxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NjgyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Somtimes the `execute` step is an _internal_ step only for the harness runner. Internal steps ignore the `render:` using a `skip: true` entry\n          \n          \n            \n                Sometimes the `execute` step is an _internal_ step only for the harness runner. Internal steps ignore the `render:` using a `skip: true` entry", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443066823", "createdAt": "2020-06-19T22:34:24Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +237,180 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Working with the harness file\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TLDR;\n+\n+To run a tutorial programatically do the following stepes. Note these instructions assume you've already checked out the kafka-tutorials repo).\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+2. run the `make` command.\n+\n+The `Makefile` will delete and re-create the `outputs` directory used contain files with output from various steps used to verify the tutorial steps.\n+\n+Here's an example of the contents of a `Makefile`:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/fk-joins/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output-events.json $(DEV_OUTPUTS_DIR)/music-interest.json\n+```\n+\n+The last line uses the `diff` command to validate expected output against the actual output of tutorial steps.  The `Makefile` may have more than one valdiation step so it will have separate `diff` commmands for each verification.  For example:\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/dynamic-output-topic/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output.json $(DEV_OUTPUTS_DIR)/actual-output.json\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-special-output.json $(DEV_OUTPUTS_DIR)/actual-special-order-output.json\n+```\n+\n+\n+\n+\n+#### 1. Structure\n+\n+Three top-level sections make up the harness file:\n+\n+* dev - the setup and teaching portion of the tutorial (required)\n+* test - test setup and execution of tests, if any (optional)\n+* prod - steps to build and deploy a docker image of the tutorial code (optional)\n+\n+In some cases, having a test and or prod section doesn't make sense, so those sections can be left out of the harness file.  The Apache Kafka console producer and consumer tutorials are a good example of tutorials that don't need a test or prod section.\n+\n+The `dev`, `test`, and `prod` sections contain a top-level element `steps`.  The `steps` contains any number of well, steps for the user to walk through.  Addtionally the `harness_runner` script follows the same steps for executing the tutorial automatically during builds.  The steps in any section are structured in the same way, so we'll only discuss the make-up of a single section.\n+\n+For reference here is an example section\n+\n+```yml\n+ - title: Get Confluent Platform\n+      content:\n+        - action: make_file\n+          file: docker-compose.yml\n+          render:\n+            file: tutorials/console-consumer-primitive-keys-values/kafka/markup/dev/make-docker-compose.adoc\n+\n+        - action: execute_async\n+          file: tutorial-steps/dev/docker-compose-up.sh\n+          render:\n+            file: tutorials/console-consumer-primitive-keys-values/kafka/markup/dev/start-compose.adoc\n+\n+        - action: execute\n+          file: tutorial-steps/dev/wait-for-containers.sh\n+          render:\n+            skip: true\n+\n+        - name: wait for ksqldb-server and connectors\n+          action: sleep\n+          ms: 30000\n+          render:\n+            skip: true\n+```\n+\n+\n+* Title - each section starts with a `title` element and as the label suggests, the text provided here is the text used the label the step for the tutorial user and the output to the console by the harness runner.  The `title` section contains one element - `content`\n+\n+* content - the `content` section (a YAML `dictionary`) contains an arbitrary sized list of YAML dictionaries named `action`. An `action` key creates an anonymous step i.e. not specified in the output of the test runner.  For output in the test runner, you can provide a `-name` key followed by some text for console output.\n+* action - `action` keys drive the behavior of the harness. An action key can be one of these values\n+    * `action: make_file` - an action prompting the user to create a file for the tutorial.\n+    * `action: execute` - a synchronous action step\n+    * `action: execute_async` - an asynchronous step, this indicates a step the user will keep running for some portion of the tutorial.\n+    * `action: sleep` - pause the test runner for an amount of time specified by the `ms` key. You use `sleep` key to allow some asnyc action to complete\n+        * `ms: NNN` - the time in milliseconds you want the test harness to pause execution.  You only use `ms` after an `action: sleep` entry.\n+\n+In the next sections you'll see how to use `action` keys to organize your harness files\n+\n+\n+\n+#### 2. Action type descriptions and examples\n+\n+* `make_file`\n+    The `make_file` instructs the user to create a file an existing file required to run the tutorial.  Some examples are the `docker-compose.yml` file , a `statements.sql` (ksqlDB) , and Java files.\n+\n+    A `make_file` with a file to render look like this:\n+    ```yml\n+    - action: make_file\n+          file: docker-compose.yml\n+          render:\n+            file: tutorials/console-consumer-primitive-keys-values/kafka/markup/dev/make-docker-compose.adoc\n+    ```\n+\n+    * `file:` the path and name to the file.  The path is relative to `<tutorial-name>/<type>/code>` .The harness runner will use the file during the automated tutorial execution.\n+    * `render:` the file to render.  The `render` key is followed by one of two possible keys:\n+        * `file:` the path and name of the file to render to the user. \n+\n+* `execute` The `execute` step is a synchronous execution step during the tutorial for the user as well as the harness runner\n+\n+    ```yml\n+     - action: execute\n+          file: tutorial-steps/dev/init.sh\n+          render:\n+            file: tutorials/console-consumer-primitive-keys-values/kafka/markup/dev/init.adoc\n+    ```\n+\n+    Somtimes the `execute` step is an _internal_ step only for the harness runner. Internal steps ignore the `render:` using a `skip: true` entry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329e16de87d5697391dee8827d1da1fcaf5aeeeb"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTE4NjIxOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTo1NDo1OFrOGnO0NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTo1NDo1OFrOGnO0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5MDM4OQ==", "bodyText": "@colinhicks I've added a section for docker_ksql_cli_session", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r443790389", "createdAt": "2020-06-22T19:54:58Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -237,6 +268,210 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Testing Locally\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TL;DR\n+\n+To run a tutorial programatically do the following stepes. Note to follow these instructions you'll need to checkout the kafka-tutorials repo:\n+\n+1. git clone https://github.com/confluentinc/kafka-tutorials.git\n+2. cd kafka-tutorials\n+\n+Once you have the kafka-tutorials repo checked out do the following:\n+\n+1. cd into `_includes/tutorials/<tutorial name>/<type>/code` directory where type is one of `ksql | kstreams | kafka`.\n+    * For exmaple `cd _includes/tutorials/fk-joins/kstreams/code`\n+2. run the `make` command.\n+\n+The `Makefile` will delete and re-create the `outputs` directory used contain files with output from various steps used to verify the tutorial steps.\n+\n+Here's of [the contents of an actual `Makefile`](https://github.com/confluentinc/kafka-tutorials/blob/master/_includes/tutorials/fk-joins/kstreams/code/Makefile) :\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/fk-joins/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output-events.json $(DEV_OUTPUTS_DIR)/music-interest.json\n+```\n+\n+The last line uses the `diff` command to validate expected output against the actual output of tutorial steps.  The `Makefile` may have more than one valdiation step so it will have separate `diff` commmands for each verification.  \n+\n+For example here's the `Makefile` from the [dynamic output topics tutorial](https://github.com/confluentinc/kafka-tutorials/blob/master/_includes/tutorials/dynamic-output-topic/kstreams/code/Makefile)\n+\n+```yml\n+STEPS_DIR := tutorial-steps\n+DEV_OUTPUTS_DIR := $(STEPS_DIR)/dev/outputs\n+TEMP_DIR := $(shell mktemp -d)\n+\n+tutorial:\n+  rm -r $(DEV_OUTPUTS_DIR) || true\n+  mkdir $(DEV_OUTPUTS_DIR)\n+  harness-runner ../../../../../_data/harnesses/dynamic-output-topic/kstreams.yml $(TEMP_DIR)\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-output.json $(DEV_OUTPUTS_DIR)/actual-output.json\n+  diff --strip-trailing-cr $(STEPS_DIR)/dev/expected-special-output.json $(DEV_OUTPUTS_DIR)/actual-special-order-output.json\n+```\n+\n+#### 1. Structure\n+\n+Three top-level sections make up the harness file:\n+\n+* dev - the setup and teaching portion of the tutorial (required)\n+* test - test setup and execution of tests, if any (optional)\n+* prod - steps to build and deploy a docker image of the tutorial code (optional)\n+\n+In some cases, having a test and or prod section doesn't make sense, so those sections can be left out of the harness file.  The Apache Kafka [console producer and consumer basic operations](https://github.com/confluentinc/kafka-tutorials/blob/master/_data/harnesses/console-consumer-produer-basic/kafka.yml) and the Apache Kafka [console consumer with primitive keys and values](https://github.com/confluentinc/kafka-tutorials/blob/master/_data/harnesses/console-consumer-primitive-keys-values/kafka.yml) tutorials are a good example of tutorials that don't need a test or prod section.\n+\n+The `dev`, `test`, and `prod` sections contain a top-level element `steps`.  The `steps` contains any number of well, steps for the user to walk through.  Addtionally the `harness_runner` script follows the same steps for executing the tutorial automatically during builds.  The steps in any section are structured in the same way, so we'll only discuss the make-up of a single section.\n+\n+For reference here is an example section of the harness file from the [console consumer primitive keys and values tutorial](https://github.com/confluentinc/kafka-tutorials/blob/master/_data/harnesses/console-consumer-primitive-keys-values/kafka.yml)\n+\n+```yml\n+ - title: Get Confluent Platform\n+      content:\n+        - action: make_file\n+          file: docker-compose.yml\n+          render:\n+            file: tutorials/console-consumer-primitive-keys-values/kafka/markup/dev/make-docker-compose.adoc\n+\n+        - action: execute_async\n+          file: tutorial-steps/dev/docker-compose-up.sh\n+          render:\n+            file: tutorials/console-consumer-primitive-keys-values/kafka/markup/dev/start-compose.adoc\n+\n+        - action: execute\n+          file: tutorial-steps/dev/wait-for-containers.sh\n+          render:\n+            skip: true\n+\n+        - name: wait for ksqldb-server and connectors\n+          action: sleep\n+          ms: 30000\n+          render:\n+            skip: true\n+```\n+\n+\n+* Title - each section starts with a `title` element and as the label suggests, the text provided here is the text used the label the step for the tutorial user and the output to the console by the harness runner.  The `title` section contains one element - `content`\n+\n+* content - the `content` section (a YAML `dictionary`) contains an arbitrary sized list of YAML dictionaries named `action`. An `action` key creates an anonymous step i.e. not specified in the output of the test runner.  For output in the test runner, you can provide a `-name` key followed by some text for console output.\n+* action - `action` keys drive the behavior of the harness. An action key can be one of these values\n+    * `action: make_file` - an action prompting the user to create a file for the tutorial.\n+    * `action: execute` - a synchronous action step\n+    * `action: execute_async` - an asynchronous step, this indicates a step the user will keep running for some portion of the tutorial.\n+    * `action: sleep` - pause the test runner for an amount of time specified by the `ms` key. You use `sleep` key to allow some asnyc action to complete\n+        * `ms: NNN` - the time in milliseconds you want the test harness to pause execution.  You only use `ms` after an `action: sleep` entry.\n+    * `docker_ksql_cli_session` - an action starting a ksqlDB CLI session for working through a tutorial", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a3552a4850c31fcc0acfaf25862f3aeda1ef28f"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTQxMDk5OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTo1MTowNlrOGn4M6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowMTo0M1rOGofNUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2ODQ1Nw==", "bodyText": "Should we add a 3rd step to setup environment per the instructions at https://github.com/confluentinc/kafka-tutorials#setup ?  If so, that might be where we provide the optional Dockerfile addition?", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r444468457", "createdAt": "2020-06-23T19:51:06Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +268,210 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Testing Locally\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TL;DR\n+\n+To run a tutorial programatically do the following stepes. Note to follow these instructions you'll need to checkout the kafka-tutorials repo:\n+\n+1. git clone https://github.com/confluentinc/kafka-tutorials.git\n+2. cd kafka-tutorials", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a3552a4850c31fcc0acfaf25862f3aeda1ef28f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MjY1Ng==", "bodyText": "Or is it the case that running the harness_runner does NOT require all those other dependencies?", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r444472656", "createdAt": "2020-06-23T19:59:03Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +268,210 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Testing Locally\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TL;DR\n+\n+To run a tutorial programatically do the following stepes. Note to follow these instructions you'll need to checkout the kafka-tutorials repo:\n+\n+1. git clone https://github.com/confluentinc/kafka-tutorials.git\n+2. cd kafka-tutorials", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2ODQ1Nw=="}, "originalCommit": {"oid": "6a3552a4850c31fcc0acfaf25862f3aeda1ef28f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNzUzOQ==", "bodyText": "Just wanted to document a suggestion from @vdesabou here -- this differentiation would address the confusion I had and help other users as well.\n\nIt would be great to have a clarification in prerequisite section to specify that dependencies are only to build the site and not required to test locally.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r445107539", "createdAt": "2020-06-24T19:01:43Z", "author": {"login": "ybyzek"}, "path": "README.md", "diffHunk": "@@ -237,6 +268,210 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Testing Locally\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.\n+\n+This section is not meant to be an exhaustive decription of the harness file.  New tutorial authors should not need to create a harness file from scratch, using either the `tools/gen_project.sh` or  `tools/clone.sh` script will provide a usable harness file.  This section should provide enough guidance to add, update, or remove sections as needed.\n+\n+#### TL;DR\n+\n+To run a tutorial programatically do the following stepes. Note to follow these instructions you'll need to checkout the kafka-tutorials repo:\n+\n+1. git clone https://github.com/confluentinc/kafka-tutorials.git\n+2. cd kafka-tutorials", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2ODQ1Nw=="}, "originalCommit": {"oid": "6a3552a4850c31fcc0acfaf25862f3aeda1ef28f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjI4OTA1OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxNzowMlrOGoUL4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoxNTozMlrOGok9PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNjk0Ng==", "bodyText": "Typo: YAML file formt", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r444926946", "createdAt": "2020-06-24T14:17:02Z", "author": {"login": "vdesabou"}, "path": "README.md", "diffHunk": "@@ -237,6 +268,210 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Testing Locally\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a3552a4850c31fcc0acfaf25862f3aeda1ef28f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMTcyNQ==", "bodyText": "Good catch!", "url": "https://github.com/confluentinc/kafka-tutorials/pull/441#discussion_r445201725", "createdAt": "2020-06-24T22:15:32Z", "author": {"login": "bbejeck"}, "path": "README.md", "diffHunk": "@@ -237,6 +268,210 @@ You can do the same for Kafka Streams and Kafka, by using the `kstreams` and `ka\n \n Lastly, create a Makefile in the `code` directory to invoke the harness runner and check any outputs that it produces. Then modify the `.semaphore/semaphore.yml` file to invoke that Makefile. This will make sure your tutorial gets checked by the CI system.\n \n+## Testing Locally\n+\n+Given the test harness is the `heart` of a tutorial, it will be helpful to describe in detail how to work with a `kafka|ksql|kstreams.yml` file.  It should be noted the harness file is in the [YAML file formt](https://en.wikipedia.org/wiki/YAML), so formatting properly is essential.  The harness files generates the structure of the rendered tutorial and also validates any output of tutorial steps against expected values.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNjk0Ng=="}, "originalCommit": {"oid": "6a3552a4850c31fcc0acfaf25862f3aeda1ef28f"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3926, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}