{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NDA1NzU3", "number": 428, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoyNjoyOFrOEC-lTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDozMDoxNVrOEC-rOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTU3OTY2OnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/deserialization-errors/ksql/markup/dev/check-errors-query.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoyNjoyOFrOGfwyyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoyNjoyOFrOGfwyyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk1ODQ3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Notice we needed to quote the `topic` field in the `WHERE` clause, as its a reserved word.\n          \n          \n            \n            Notice we needed to quote the `topic` field in the `WHERE` clause, as it's a reserved word.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/428#discussion_r435958473", "createdAt": "2020-06-05T14:26:28Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/deserialization-errors/ksql/markup/dev/check-errors-query.adoc", "diffHunk": "@@ -2,10 +2,17 @@ Now here comes the fun part. We know that at least one of the records produced h\n Therefore, this one error needs to show up somewhere.\n With the https://docs.confluent.io/current/ksql/docs/developer-guide/processing-log.html[KSQL Processing Log] feature enabled, you can query a stream called `KSQL_PROCESSING_LOG` to check for deserialization errors.\n \n+The query below is extracting some of the data available in the processing log.\n+As we configured the processing log to include the payload of the message, we can also use the `encode` method to convert the record from `base64` encoded into a human readable `utf8` encoding:\n+\n +++++\n <pre class=\"snippet\"><code class=\"sql\">{% include_raw tutorials/deserialization-errors/ksql/code/tutorial-steps/dev/check-errors-query.sql %}</code></pre>\n +++++\n \n+Notice we needed to quote the `topic` field in the `WHERE` clause, as its a reserved word.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba7a8dbdc25982737bc8b3e5daea9884a8a75ab"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTU4MTU1OnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/deserialization-errors/ksql/markup/dev/check-errors-query.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoyNjo1NFrOGfwz9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjoyOTowMVrOGgbWlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk1ODc3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            While the `ERRORMESSAGE` is a little cryptic in this instances, the `CAUSE` and `MSG` columns would be enough to diagnose the issue here.\n          \n          \n            \n            While the `ERRORMESSAGE` is a little cryptic in these instances, the `CAUSE` and `MSG` columns would be enough to diagnose the issue here.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/428#discussion_r435958773", "createdAt": "2020-06-05T14:26:54Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/deserialization-errors/ksql/markup/dev/check-errors-query.adoc", "diffHunk": "@@ -2,10 +2,17 @@ Now here comes the fun part. We know that at least one of the records produced h\n Therefore, this one error needs to show up somewhere.\n With the https://docs.confluent.io/current/ksql/docs/developer-guide/processing-log.html[KSQL Processing Log] feature enabled, you can query a stream called `KSQL_PROCESSING_LOG` to check for deserialization errors.\n \n+The query below is extracting some of the data available in the processing log.\n+As we configured the processing log to include the payload of the message, we can also use the `encode` method to convert the record from `base64` encoded into a human readable `utf8` encoding:\n+\n +++++\n <pre class=\"snippet\"><code class=\"sql\">{% include_raw tutorials/deserialization-errors/ksql/code/tutorial-steps/dev/check-errors-query.sql %}</code></pre>\n +++++\n \n+Notice we needed to quote the `topic` field in the `WHERE` clause, as its a reserved word.\n+\n+While the `ERRORMESSAGE` is a little cryptic in this instances, the `CAUSE` and `MSG` columns would be enough to diagnose the issue here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba7a8dbdc25982737bc8b3e5daea9884a8a75ab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY1NTc2Nw==", "bodyText": "There's only a single error in the example, so went with this instance.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/428#discussion_r436655767", "createdAt": "2020-06-08T12:29:01Z", "author": {"login": "big-andy-coates"}, "path": "_includes/tutorials/deserialization-errors/ksql/markup/dev/check-errors-query.adoc", "diffHunk": "@@ -2,10 +2,17 @@ Now here comes the fun part. We know that at least one of the records produced h\n Therefore, this one error needs to show up somewhere.\n With the https://docs.confluent.io/current/ksql/docs/developer-guide/processing-log.html[KSQL Processing Log] feature enabled, you can query a stream called `KSQL_PROCESSING_LOG` to check for deserialization errors.\n \n+The query below is extracting some of the data available in the processing log.\n+As we configured the processing log to include the payload of the message, we can also use the `encode` method to convert the record from `base64` encoded into a human readable `utf8` encoding:\n+\n +++++\n <pre class=\"snippet\"><code class=\"sql\">{% include_raw tutorials/deserialization-errors/ksql/code/tutorial-steps/dev/check-errors-query.sql %}</code></pre>\n +++++\n \n+Notice we needed to quote the `topic` field in the `WHERE` clause, as its a reserved word.\n+\n+While the `ERRORMESSAGE` is a little cryptic in this instances, the `CAUSE` and `MSG` columns would be enough to diagnose the issue here.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk1ODc3Mw=="}, "originalCommit": {"oid": "dba7a8dbdc25982737bc8b3e5daea9884a8a75ab"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTU4MzkyOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/deserialization-errors/ksql/markup/dev/create-inputs.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoyNzoyN1rOGfw1aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDoyNzoyN1rOGfw1aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk1OTE0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This stream simply copies the data from the previous stream, ensuring that the `ID` field is used as key.\n          \n          \n            \n            This stream simply copies the data from the previous stream, ensuring that the `ID` field is used as the key.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/428#discussion_r435959145", "createdAt": "2020-06-05T14:27:27Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/deserialization-errors/ksql/markup/dev/create-inputs.adoc", "diffHunk": "@@ -1,8 +1,8 @@\n To start off the implementation of this scenario, you need to create a stream that represent sensors.\n This stream will contain a timestamp field called `TIMESTAMP` to indicate when the sensor was enabled.\n-Each sensor will also have a field called `ENABLED` to indicate whether the status of the sensor.\n-While the this stream acts upon data stored in a topic called `SENSORS_RAW`, we will create another stream called `SENSORS` to actually handle the sensors.\n-This stream simply copies the data from the previous stream, but making sure that the `ID` field is used as key.\n+Each sensor will also have a field called `ENABLED` to indicate the status of the sensor.\n+While this stream acts upon data stored in a topic called `SENSORS_RAW`, we will create derived stream called `SENSORS` to actually handle the sensors.\n+This stream simply copies the data from the previous stream, ensuring that the `ID` field is used as key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba7a8dbdc25982737bc8b3e5daea9884a8a75ab"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTU5NDgwOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/deserialization-errors/ksql/code/tutorial-steps/dev/check-errors-query.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDozMDoxNVrOGfw8MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDozMDoxNVrOGfw8MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk2MDg4MQ==", "bodyText": "Nice :)", "url": "https://github.com/confluentinc/kafka-tutorials/pull/428#discussion_r435960881", "createdAt": "2020-06-05T14:30:15Z", "author": {"login": "colinhicks"}, "path": "_includes/tutorials/deserialization-errors/ksql/code/tutorial-steps/dev/check-errors-query.sql", "diffHunk": "@@ -1,5 +1,7 @@\n SELECT\n-    LOGGER,\n-    LEVEL,\n-    MESSAGE->DESERIALIZATIONERROR->ERRORMESSAGE\n-FROM KSQL_PROCESSING_LOG EMIT CHANGES LIMIT 1;\n+    message->deserializationError->errorMessage,\n+    encode(message->deserializationError->RECORDB64, 'base64', 'utf8') AS MSG,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dba7a8dbdc25982737bc8b3e5daea9884a8a75ab"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3912, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}