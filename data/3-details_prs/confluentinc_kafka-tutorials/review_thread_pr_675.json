{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzODA0ODg1", "number": 675, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyODozMFrOFILV4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjo0NToyMVrOFK91mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTE4NzU0OnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/kafka-producer-application-callback/kafka/markup/dev/make-dev-file.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyODozMFrOIJ9CGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyODozMFrOIJ9CGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwODA1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `acks=all`: highest data durability guarantee, the leader broker persisted the record to its log and received acknowledgment of replication from all in-sync replicas. When using `aks=all`, it's strongly recommended to update https://kafka.apache.org/documentation/#min.insync.replicas[min.insync.replicas] as well.\n          \n          \n            \n            - `acks=all`: highest data durability guarantee, the leader broker persisted the record to its log and received acknowledgment of replication from all in-sync replicas. When using `acks=all`, it's strongly recommended to update https://kafka.apache.org/documentation/#min.insync.replicas[min.insync.replicas] as well.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/675#discussion_r547308058", "createdAt": "2020-12-22T14:28:30Z", "author": {"login": "ybyzek"}, "path": "_includes/tutorials/kafka-producer-application-callback/kafka/markup/dev/make-dev-file.adoc", "diffHunk": "@@ -15,7 +15,7 @@ https://kafka.apache.org/documentation/#acks[acks] - The `KafkaProducer` uses th\n \n - `acks=0`: \"fire and forget\", once the producer sends the record batch it is considered successful\n - `acks=1`: leader broker added the records to its local log but didn't wait for any acknowledgment from the followers\n-- `acks=all`: highest data durability guarantee, the leader broker persisted the record to its log and received acknowledgment of replication from all in-sync replicas When using `aks=all`, it's strongly recommended to update https://kafka.apache.org/documentation/#min.insync.replicas[min.insync.replicas] as well.\n+- `acks=all`: highest data durability guarantee, the leader broker persisted the record to its log and received acknowledgment of replication from all in-sync replicas. When using `aks=all`, it's strongly recommended to update https://kafka.apache.org/documentation/#min.insync.replicas[min.insync.replicas] as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b75727c7ad9ce01cfc0c6424f6be36d986edd67"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTE4ODIyOnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/kafka-producer-application/kafka/markup/dev/make-dev-file.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyODo0MlrOIJ9Cgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyODo0MlrOIJ9Cgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwODE2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `acks=all`: highest data durability guarantee, the leader broker persisted the record to its log and received acknowledgment of replication from all in-sync replicas. When using `aks=all`, it's strongly recommended to update https://kafka.apache.org/documentation/#min.insync.replicas[min.insync.replicas] as well.\n          \n          \n            \n            - `acks=all`: highest data durability guarantee, the leader broker persisted the record to its log and received acknowledgment of replication from all in-sync replicas. When using `acks=all`, it's strongly recommended to update https://kafka.apache.org/documentation/#min.insync.replicas[min.insync.replicas] as well.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/675#discussion_r547308163", "createdAt": "2020-12-22T14:28:42Z", "author": {"login": "ybyzek"}, "path": "_includes/tutorials/kafka-producer-application/kafka/markup/dev/make-dev-file.adoc", "diffHunk": "@@ -15,7 +15,7 @@ https://kafka.apache.org/documentation/#acks[acks] - The `KafkaProducer` uses th\n \n - `acks=0`: \"fire and forget\", once the producer sends the record batch it is considered successful\n - `acks=1`: leader broker added the records to its local log but didn't wait for any acknowledgment from the followers\n-- `acks=all`: highest data durability guarantee, the leader broker persisted the record to its log and received acknowledgment of replication from all in-sync replicas When using `aks=all`, it's strongly recommended to update https://kafka.apache.org/documentation/#min.insync.replicas[min.insync.replicas] as well.\n+- `acks=all`: highest data durability guarantee, the leader broker persisted the record to its log and received acknowledgment of replication from all in-sync replicas. When using `aks=all`, it's strongly recommended to update https://kafka.apache.org/documentation/#min.insync.replicas[min.insync.replicas] as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b75727c7ad9ce01cfc0c6424f6be36d986edd67"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTE5MTM1OnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/streams-to-table/kstreams/markup/dev/clean-up.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyOTozOFrOIJ9Eag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyOTozOFrOIJ9Eag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwODY1MA==", "bodyText": "\"You're all down now!\" is pretty hip, no? ;)", "url": "https://github.com/confluentinc/kafka-tutorials/pull/675#discussion_r547308650", "createdAt": "2020-12-22T14:29:38Z", "author": {"login": "ybyzek"}, "path": "_includes/tutorials/streams-to-table/kstreams/markup/dev/clean-up.adoc", "diffHunk": "@@ -1,4 +1,4 @@\n-You're all down now!\n+You're all done now!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b75727c7ad9ce01cfc0c6424f6be36d986edd67"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTE5NDYwOnYy", "diffSide": "RIGHT", "path": "_data/tutorials.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDozMDozNlrOIJ9Gaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDozMDozNlrOIJ9Gaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwOTE2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              introduction: \"You want to inspect/debug records written to a topic.  The keys and values are longs and doubles, respectively.  In this tutorial you'll learn how to specify key and value deserializers with the console consumer.\"\n          \n          \n            \n              introduction: \"You want to inspect/debug records written to a topic.  Each record key and value is a long and double, respectively.  In this tutorial you'll learn how to specify key and value deserializers with the console consumer.\"", "url": "https://github.com/confluentinc/kafka-tutorials/pull/675#discussion_r547309163", "createdAt": "2020-12-22T14:30:36Z", "author": {"login": "ybyzek"}, "path": "_data/tutorials.yaml", "diffHunk": "@@ -293,11 +293,11 @@ console-consumer-producer-basic:\n     kafka: enabled\n \n console-consumer-primitive-keys-values:\n-  title: \"How to use the console consumer to read non-string primitive keys values\"\n+  title: \"How to use the console consumer to read non-string primitive keys and values\"\n   meta-description: \"How to use the console consumer to read non-string primitive keys and values\"\n   slug: \"/console-consumer-primitive-values\"\n   question: \"How do I specify key and value deserializers when running the Kafka console consumer?\"\n-  introduction: \"You want to inspect/debug records written to a topic.  The keys and values are long and doubles, repsectively.  In this tutorial you'll learn how to specify key and value deserializers with the console consumer\"\n+  introduction: \"You want to inspect/debug records written to a topic.  The keys and values are longs and doubles, respectively.  In this tutorial you'll learn how to specify key and value deserializers with the console consumer.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b75727c7ad9ce01cfc0c6424f6be36d986edd67"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTE5NzE3OnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/console-consumer-producer-avro/kafka/markup/dev/produce-topic-keys-values.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDozMToyNFrOIJ9ICg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDozMToyNFrOIJ9ICg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwOTU3OA==", "bodyText": "@brianstrauch great catch", "url": "https://github.com/confluentinc/kafka-tutorials/pull/675#discussion_r547309578", "createdAt": "2020-12-22T14:31:24Z", "author": {"login": "ybyzek"}, "path": "_includes/tutorials/console-consumer-producer-avro/kafka/markup/dev/produce-topic-keys-values.adoc", "diffHunk": "@@ -1,7 +1,7 @@\n Kafka works with key-value pairs, but so far you've only sent records with values only.  Well to be fair you've sent key-value pairs, but the keys are `null`.\n Sometimes you'll need to send a valid key in addition to the value from the command line.\n \n-To enable sending full key-value pairs from the command line you add two properties to your console producer, `parse.keys` and `key.separtor`\n+To enable sending full key-value pairs from the command line you add two properties to your console producer, `parse.key` and `key.separator`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b75727c7ad9ce01cfc0c6424f6be36d986edd67"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTIwMTY0OnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/kafka-consumer-application/kafka/markup/dev/make-supporting-classes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDozMjo0MlrOIJ9KuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDozMjo0MlrOIJ9KuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxMDI2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <1> Iterate over all of the records and store the `value`s in a `List`\n          \n          \n            \n            <1> Iterate over all of the records and store each record's `value` in a `List`", "url": "https://github.com/confluentinc/kafka-tutorials/pull/675#discussion_r547310265", "createdAt": "2020-12-22T14:32:42Z", "author": {"login": "ybyzek"}, "path": "_includes/tutorials/kafka-consumer-application/kafka/markup/dev/make-supporting-classes.adoc", "diffHunk": "@@ -31,13 +31,13 @@ The `FileWritingRecordsHandler` is a simple class that writes values of consumed\n       try {\n         Files.write(path, valueList, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.APPEND);  //<3>\n       } catch (IOException e) {\n-          throw new RuntimeException(e);\n+        throw new RuntimeException(e);\n       }\n     }\n   }\n ----\n-<1> Iterate over all of the records and store the `value` in a `List`\n-<2> If the isn't empty let's do something!\n+<1> Iterate over all of the records and store the `value`s in a `List`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b75727c7ad9ce01cfc0c6424f6be36d986edd67"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTIwMjE1OnYy", "diffSide": "RIGHT", "path": "_includes/tutorials/kafka-consumer-application/kafka/markup/dev/make-supporting-classes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDozMjo1M1rOIJ9LEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDozMjo1M1rOIJ9LEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxMDM1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> If the `List` isn't empty let's do something!\n          \n          \n            \n            <2> If the `List` isn't empty, let's do something!", "url": "https://github.com/confluentinc/kafka-tutorials/pull/675#discussion_r547310352", "createdAt": "2020-12-22T14:32:53Z", "author": {"login": "ybyzek"}, "path": "_includes/tutorials/kafka-consumer-application/kafka/markup/dev/make-supporting-classes.adoc", "diffHunk": "@@ -31,13 +31,13 @@ The `FileWritingRecordsHandler` is a simple class that writes values of consumed\n       try {\n         Files.write(path, valueList, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.APPEND);  //<3>\n       } catch (IOException e) {\n-          throw new RuntimeException(e);\n+        throw new RuntimeException(e);\n       }\n     }\n   }\n ----\n-<1> Iterate over all of the records and store the `value` in a `List`\n-<2> If the isn't empty let's do something!\n+<1> Iterate over all of the records and store the `value`s in a `List`\n+<2> If the `List` isn't empty let's do something!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b75727c7ad9ce01cfc0c6424f6be36d986edd67"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDQzMjI1OnYy", "diffSide": "LEFT", "path": "_includes/tutorials/console-consumer-producer-avro/kafka/code/tutorial-steps/dev/expected-output-step-two.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjo0NToyMVrOIN43Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjo0NToyMVrOIN43Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNDA3NQ==", "bodyText": "Removing these two lines causes the test-harness to fail as the actual output produces 7 records instead of 5.", "url": "https://github.com/confluentinc/kafka-tutorials/pull/675#discussion_r551434075", "createdAt": "2021-01-04T16:45:21Z", "author": {"login": "bbejeck"}, "path": "_includes/tutorials/console-consumer-producer-avro/kafka/code/tutorial-steps/dev/expected-output-step-two.txt", "diffHunk": "@@ -3,5 +3,3 @@\n {\"number\":2343436,\"date\":1596491687,\"shipping_address\":\"89 Addison St, Palo Alto, 94302 CA, USA\",\"subtotal\":10.0,\"shipping_cost\":0.0,\"tax\":1.0,\"grand_total\":11.0}\n {\"number\":2343437,\"date\":1596490492,\"shipping_address\":\"456 Charles St, Beverly Hills, 90209 CA, USA\",\"subtotal\":450.0,\"shipping_cost\":10.0,\"tax\":28.91,\"grand_total\":488.91}\n {\"number\":2343438,\"date\":1596490692,\"shipping_address\":\"456 Preston St, Brooklyn, 11212 NY, USA\",\"subtotal\":34.0,\"shipping_cost\":2.0,\"tax\":3.0,\"grand_total\":39.0}\n-{\"number\":2343439,\"date\":1596501510,\"shipping_address\":\"1600 Pennsylvania Avenue NW, Washington, DC 20500, USA\",\"subtotal\":1000.0,\"shipping_cost\":20.0,\"tax\":0.0,\"grand_total\":1020.0}\n-{\"number\":2343440,\"date\":1596501510,\"shipping_address\":\"55 Music Concourse Dr, San Francisco, CA 94118, USA\",\"subtotal\":345.0,\"shipping_cost\":10.0,\"tax\":10.0,\"grand_total\":365.0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bce3109a7422d9ec453b45dad40ad1093b6df986"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3887, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}