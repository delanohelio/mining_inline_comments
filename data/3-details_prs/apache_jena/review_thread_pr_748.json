{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMjgwNzEz", "number": 748, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozMzo0NVrOEA-rfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozNzoyMVrOEA-vmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDYyMzk5OnYy", "diffSide": "RIGHT", "path": "jena-permissions/src/test/java/org/apache/jena/permissions/SecurityEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozMzo0NVrOGcl_6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMDo1MDoxMFrOGgDH6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNTg4MQ==", "bodyText": "Trivial: missing final newline.", "url": "https://github.com/apache/jena/pull/748#discussion_r432635881", "createdAt": "2020-05-29T17:33:45Z", "author": {"login": "afs"}, "path": "jena-permissions/src/test/java/org/apache/jena/permissions/SecurityEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jena.permissions;\n+\n+import static org.junit.Assert.*;\n+\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.permissions.SecurityEvaluator.Action;\n+import org.apache.jena.shared.AuthenticationRequiredException;\n+import org.junit.Test;\n+\n+import java.util.EnumSet;\n+\n+public class SecurityEvaluatorTest {\n+    private static final Object PRINCIPAL = null;\n+    private static final Node GRAPH = null;\n+    private static final Triple TRIPLE = null;\n+    private static final EnumSet<Action> ALLOWED_ACTIONS = EnumSet.of(Action.Create, Action.Delete);\n+    private static final EnumSet<Action> DISALLOWED_ACTIONS = EnumSet.complementOf(ALLOWED_ACTIONS);\n+    public static final EnumSet<Action> ALL_ACTIONS = EnumSet.noneOf(Action.class);\n+\n+\n+    private final SecurityEvaluator evaluator = new SecurityEvaluator() {\n+\n+        @Override\n+        public boolean evaluate(Object principal, Action action, Node graphIRI) throws AuthenticationRequiredException {\n+            return ALLOWED_ACTIONS.contains(action);\n+        }\n+\n+        @Override\n+        public boolean evaluate(Object principal, Action action, Node graphIRI, Triple triple) throws AuthenticationRequiredException {\n+            return ALLOWED_ACTIONS.contains(action);\n+        }\n+\n+        @Override\n+        public Object getPrincipal() {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean isPrincipalAuthenticated(Object principal) {\n+            return false;\n+        }\n+    };\n+\n+    @Test\n+    public void testAllLogicForGraphOperations() {\n+        assertTrue(evaluator.evaluate(PRINCIPAL, ALL_ACTIONS, GRAPH));\n+        assertTrue(evaluator.evaluate(PRINCIPAL, ALLOWED_ACTIONS, GRAPH));\n+        assertFalse(evaluator.evaluate(PRINCIPAL, DISALLOWED_ACTIONS, GRAPH));\n+        assertFalse(evaluator.evaluate(PRINCIPAL, EnumSet.allOf(Action.class), GRAPH));\n+    }\n+\n+\n+    @Test\n+    public void testAnyLogicForGraphOperations() {\n+        assertFalse(evaluator.evaluateAny(PRINCIPAL, ALL_ACTIONS, GRAPH));\n+        assertTrue(evaluator.evaluateAny(PRINCIPAL, ALLOWED_ACTIONS, GRAPH));\n+        assertFalse(evaluator.evaluateAny(PRINCIPAL, DISALLOWED_ACTIONS, GRAPH));\n+        assertTrue(evaluator.evaluateAny(PRINCIPAL, EnumSet.allOf(Action.class), GRAPH));\n+    }\n+\n+    public void testAllLogicForTripleOperations() {\n+        assertTrue(evaluator.evaluate(PRINCIPAL, ALL_ACTIONS, GRAPH, TRIPLE));\n+        assertTrue(evaluator.evaluate(PRINCIPAL, ALLOWED_ACTIONS, GRAPH, TRIPLE));\n+        assertFalse(evaluator.evaluate(PRINCIPAL, DISALLOWED_ACTIONS, GRAPH, TRIPLE));\n+        assertFalse(evaluator.evaluate(PRINCIPAL, EnumSet.allOf(Action.class), GRAPH, TRIPLE));\n+    }\n+\n+\n+    @Test\n+    public void testAnyLogicForTripleOperations() {\n+        assertFalse(evaluator.evaluateAny(PRINCIPAL, ALL_ACTIONS, GRAPH, TRIPLE));\n+        assertTrue(evaluator.evaluateAny(PRINCIPAL, ALLOWED_ACTIONS, GRAPH, TRIPLE));\n+        assertFalse(evaluator.evaluateAny(PRINCIPAL, DISALLOWED_ACTIONS, GRAPH, TRIPLE));\n+        assertTrue(evaluator.evaluateAny(PRINCIPAL, EnumSet.allOf(Action.class), GRAPH, TRIPLE));\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368e8a1e396665d1bf4b044f64afe594c87a160f"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1ODc5NA==", "bodyText": "fixed", "url": "https://github.com/apache/jena/pull/748#discussion_r436258794", "createdAt": "2020-06-06T10:50:10Z", "author": {"login": "strangepleasures"}, "path": "jena-permissions/src/test/java/org/apache/jena/permissions/SecurityEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.jena.permissions;\n+\n+import static org.junit.Assert.*;\n+\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.permissions.SecurityEvaluator.Action;\n+import org.apache.jena.shared.AuthenticationRequiredException;\n+import org.junit.Test;\n+\n+import java.util.EnumSet;\n+\n+public class SecurityEvaluatorTest {\n+    private static final Object PRINCIPAL = null;\n+    private static final Node GRAPH = null;\n+    private static final Triple TRIPLE = null;\n+    private static final EnumSet<Action> ALLOWED_ACTIONS = EnumSet.of(Action.Create, Action.Delete);\n+    private static final EnumSet<Action> DISALLOWED_ACTIONS = EnumSet.complementOf(ALLOWED_ACTIONS);\n+    public static final EnumSet<Action> ALL_ACTIONS = EnumSet.noneOf(Action.class);\n+\n+\n+    private final SecurityEvaluator evaluator = new SecurityEvaluator() {\n+\n+        @Override\n+        public boolean evaluate(Object principal, Action action, Node graphIRI) throws AuthenticationRequiredException {\n+            return ALLOWED_ACTIONS.contains(action);\n+        }\n+\n+        @Override\n+        public boolean evaluate(Object principal, Action action, Node graphIRI, Triple triple) throws AuthenticationRequiredException {\n+            return ALLOWED_ACTIONS.contains(action);\n+        }\n+\n+        @Override\n+        public Object getPrincipal() {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean isPrincipalAuthenticated(Object principal) {\n+            return false;\n+        }\n+    };\n+\n+    @Test\n+    public void testAllLogicForGraphOperations() {\n+        assertTrue(evaluator.evaluate(PRINCIPAL, ALL_ACTIONS, GRAPH));\n+        assertTrue(evaluator.evaluate(PRINCIPAL, ALLOWED_ACTIONS, GRAPH));\n+        assertFalse(evaluator.evaluate(PRINCIPAL, DISALLOWED_ACTIONS, GRAPH));\n+        assertFalse(evaluator.evaluate(PRINCIPAL, EnumSet.allOf(Action.class), GRAPH));\n+    }\n+\n+\n+    @Test\n+    public void testAnyLogicForGraphOperations() {\n+        assertFalse(evaluator.evaluateAny(PRINCIPAL, ALL_ACTIONS, GRAPH));\n+        assertTrue(evaluator.evaluateAny(PRINCIPAL, ALLOWED_ACTIONS, GRAPH));\n+        assertFalse(evaluator.evaluateAny(PRINCIPAL, DISALLOWED_ACTIONS, GRAPH));\n+        assertTrue(evaluator.evaluateAny(PRINCIPAL, EnumSet.allOf(Action.class), GRAPH));\n+    }\n+\n+    public void testAllLogicForTripleOperations() {\n+        assertTrue(evaluator.evaluate(PRINCIPAL, ALL_ACTIONS, GRAPH, TRIPLE));\n+        assertTrue(evaluator.evaluate(PRINCIPAL, ALLOWED_ACTIONS, GRAPH, TRIPLE));\n+        assertFalse(evaluator.evaluate(PRINCIPAL, DISALLOWED_ACTIONS, GRAPH, TRIPLE));\n+        assertFalse(evaluator.evaluate(PRINCIPAL, EnumSet.allOf(Action.class), GRAPH, TRIPLE));\n+    }\n+\n+\n+    @Test\n+    public void testAnyLogicForTripleOperations() {\n+        assertFalse(evaluator.evaluateAny(PRINCIPAL, ALL_ACTIONS, GRAPH, TRIPLE));\n+        assertTrue(evaluator.evaluateAny(PRINCIPAL, ALLOWED_ACTIONS, GRAPH, TRIPLE));\n+        assertFalse(evaluator.evaluateAny(PRINCIPAL, DISALLOWED_ACTIONS, GRAPH, TRIPLE));\n+        assertTrue(evaluator.evaluateAny(PRINCIPAL, EnumSet.allOf(Action.class), GRAPH, TRIPLE));\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNTg4MQ=="}, "originalCommit": {"oid": "368e8a1e396665d1bf4b044f64afe594c87a160f"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDYzNDQ4OnYy", "diffSide": "RIGHT", "path": "jena-permissions/src/main/java/org/apache/jena/permissions/SecurityEvaluator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozNzoyMVrOGcmGuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMDo1MDoxNlrOGgDH7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNzYyNw==", "bodyText": "Minor: \"public\" is used elsewhere on interface methods.", "url": "https://github.com/apache/jena/pull/748#discussion_r432637627", "createdAt": "2020-05-29T17:37:21Z", "author": {"login": "afs"}, "path": "jena-permissions/src/main/java/org/apache/jena/permissions/SecurityEvaluator.java", "diffHunk": "@@ -213,7 +210,7 @@\n \t * @throws AuthenticationRequiredException\n \t *             if user is not authenticated and is required to be.\n \t */\n-\tpublic boolean evaluate(Object principal, Action action, Node graphIRI)\n+\tboolean evaluate(Object principal, Action action, Node graphIRI)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368e8a1e396665d1bf4b044f64afe594c87a160f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1ODc5OQ==", "bodyText": "fixed", "url": "https://github.com/apache/jena/pull/748#discussion_r436258799", "createdAt": "2020-06-06T10:50:16Z", "author": {"login": "strangepleasures"}, "path": "jena-permissions/src/main/java/org/apache/jena/permissions/SecurityEvaluator.java", "diffHunk": "@@ -213,7 +210,7 @@\n \t * @throws AuthenticationRequiredException\n \t *             if user is not authenticated and is required to be.\n \t */\n-\tpublic boolean evaluate(Object principal, Action action, Node graphIRI)\n+\tboolean evaluate(Object principal, Action action, Node graphIRI)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNzYyNw=="}, "originalCommit": {"oid": "368e8a1e396665d1bf4b044f64afe594c87a160f"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4591, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}