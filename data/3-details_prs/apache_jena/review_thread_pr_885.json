{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MDgyNDM4", "number": 885, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTo1Mzo1MFrOFEKBEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTo1Mzo1MFrOFEKBEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTAyNzM3OnYy", "diffSide": "RIGHT", "path": "jena-core/src/main/java/org/apache/jena/ext/xerces/jaxp/datatype/DurationImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTo1Mzo1MFrOIEJesw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMTowNjozOVrOIEd5kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyMDUzMQ==", "bodyText": "Extra spaces?", "url": "https://github.com/apache/jena/pull/885#discussion_r541220531", "createdAt": "2020-12-11T19:53:50Z", "author": {"login": "kinow"}, "path": "jena-core/src/main/java/org/apache/jena/ext/xerces/jaxp/datatype/DurationImpl.java", "diffHunk": "@@ -832,42 +832,45 @@ public int compare(Duration rhs) {\n \t\t\t\t\t);\n     \t}\n \n-    \t// turn this Duration into a GregorianCalendar\n-    \tGregorianCalendar lhsCalendar = new GregorianCalendar(\n-    \t\t\t1970,\n-\t\t\t\t1,\n-\t\t\t\t1,\n-\t\t\t\t0,\n-\t\t\t\t0,\n-\t\t\t\t0);\n-   \t\tlhsCalendar.add(GregorianCalendar.YEAR, getYears() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.MONTH, getMonths() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, getDays() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, getHours() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.MINUTE, getMinutes() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.SECOND, getSeconds() * getSign());\n-   \t\t\n-   \t\t// turn compare Duration into a GregorianCalendar\n-    \tGregorianCalendar rhsCalendar = new GregorianCalendar(\n-\t\t\t\t1970,\n-\t\t\t\t1,\n-\t\t\t\t1,\n-\t\t\t\t0,\n-\t\t\t\t0,\n-\t\t\t\t0);\n-   \t\trhsCalendar.add(GregorianCalendar.YEAR, rhs.getYears() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.MONTH, rhs.getMonths() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, rhs.getDays() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, rhs.getHours() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.MINUTE, rhs.getMinutes() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.SECOND, rhs.getSeconds() * rhs.getSign());\n-   \t\n-   \t\t\n-   \t\tif (lhsCalendar.equals(rhsCalendar)) {\n-   \t\t\treturn DatatypeConstants.EQUAL;\n-   \t\t}\n-\n-   \t\treturn compareDates(this, rhs);\n+    \tif ( rhsSecondsAsBigDecimal == null || seconds == null ) {\n+    \t    // Jena: change: this only works for durations with no fractional seconds.\n+    \t    // Fix is to only use if no seconds in LHS or RHS.\n+    \t    \n+    \t    // turn this Duration into a GregorianCalendar\n+    \t    GregorianCalendar lhsCalendar = new GregorianCalendar(\n+    \t        1970,\n+    \t        1,\n+    \t        1,\n+    \t        0,\n+    \t        0,\n+    \t        0);\n+    \t    lhsCalendar.add(GregorianCalendar.YEAR, getYears() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.MONTH, getMonths() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, getDays() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, getHours() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.MINUTE, getMinutes() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.SECOND, getSeconds() * getSign());\n+\n+    \t    // turn compare Duration into a GregorianCalendar\n+    \t    GregorianCalendar rhsCalendar = new GregorianCalendar(\n+    \t        1970,\n+    \t        1,\n+    \t        1,\n+    \t        0,\n+    \t        0,\n+    \t        0);\n+    \t    rhsCalendar.add(GregorianCalendar.YEAR, rhs.getYears() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.MONTH, rhs.getMonths() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, rhs.getDays() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, rhs.getHours() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.MINUTE, rhs.getMinutes() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.SECOND, rhs.getSeconds() * rhs.getSign());\n+\n+    \t    if (lhsCalendar.equals(rhsCalendar)) {\n+    \t        return DatatypeConstants.EQUAL;\n+    \t    }\n+    \t}\n+   \t\treturn compareDuration(this, rhs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a254043a14fe916edcfff7c15025f297d986a03f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1NTA4OA==", "bodyText": "Worse than that - tabs!\nTurns out this file (taken from Xerces) is a mix of tabs and spaces.\nI'll reset to all spaces. Some methods (we have never touched) are tabs, some spaces.", "url": "https://github.com/apache/jena/pull/885#discussion_r541555088", "createdAt": "2020-12-12T11:06:39Z", "author": {"login": "afs"}, "path": "jena-core/src/main/java/org/apache/jena/ext/xerces/jaxp/datatype/DurationImpl.java", "diffHunk": "@@ -832,42 +832,45 @@ public int compare(Duration rhs) {\n \t\t\t\t\t);\n     \t}\n \n-    \t// turn this Duration into a GregorianCalendar\n-    \tGregorianCalendar lhsCalendar = new GregorianCalendar(\n-    \t\t\t1970,\n-\t\t\t\t1,\n-\t\t\t\t1,\n-\t\t\t\t0,\n-\t\t\t\t0,\n-\t\t\t\t0);\n-   \t\tlhsCalendar.add(GregorianCalendar.YEAR, getYears() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.MONTH, getMonths() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, getDays() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, getHours() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.MINUTE, getMinutes() * getSign());\n-   \t\tlhsCalendar.add(GregorianCalendar.SECOND, getSeconds() * getSign());\n-   \t\t\n-   \t\t// turn compare Duration into a GregorianCalendar\n-    \tGregorianCalendar rhsCalendar = new GregorianCalendar(\n-\t\t\t\t1970,\n-\t\t\t\t1,\n-\t\t\t\t1,\n-\t\t\t\t0,\n-\t\t\t\t0,\n-\t\t\t\t0);\n-   \t\trhsCalendar.add(GregorianCalendar.YEAR, rhs.getYears() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.MONTH, rhs.getMonths() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, rhs.getDays() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, rhs.getHours() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.MINUTE, rhs.getMinutes() * rhs.getSign());\n-   \t\trhsCalendar.add(GregorianCalendar.SECOND, rhs.getSeconds() * rhs.getSign());\n-   \t\n-   \t\t\n-   \t\tif (lhsCalendar.equals(rhsCalendar)) {\n-   \t\t\treturn DatatypeConstants.EQUAL;\n-   \t\t}\n-\n-   \t\treturn compareDates(this, rhs);\n+    \tif ( rhsSecondsAsBigDecimal == null || seconds == null ) {\n+    \t    // Jena: change: this only works for durations with no fractional seconds.\n+    \t    // Fix is to only use if no seconds in LHS or RHS.\n+    \t    \n+    \t    // turn this Duration into a GregorianCalendar\n+    \t    GregorianCalendar lhsCalendar = new GregorianCalendar(\n+    \t        1970,\n+    \t        1,\n+    \t        1,\n+    \t        0,\n+    \t        0,\n+    \t        0);\n+    \t    lhsCalendar.add(GregorianCalendar.YEAR, getYears() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.MONTH, getMonths() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, getDays() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, getHours() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.MINUTE, getMinutes() * getSign());\n+    \t    lhsCalendar.add(GregorianCalendar.SECOND, getSeconds() * getSign());\n+\n+    \t    // turn compare Duration into a GregorianCalendar\n+    \t    GregorianCalendar rhsCalendar = new GregorianCalendar(\n+    \t        1970,\n+    \t        1,\n+    \t        1,\n+    \t        0,\n+    \t        0,\n+    \t        0);\n+    \t    rhsCalendar.add(GregorianCalendar.YEAR, rhs.getYears() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.MONTH, rhs.getMonths() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.DAY_OF_YEAR, rhs.getDays() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.HOUR_OF_DAY, rhs.getHours() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.MINUTE, rhs.getMinutes() * rhs.getSign());\n+    \t    rhsCalendar.add(GregorianCalendar.SECOND, rhs.getSeconds() * rhs.getSign());\n+\n+    \t    if (lhsCalendar.equals(rhsCalendar)) {\n+    \t        return DatatypeConstants.EQUAL;\n+    \t    }\n+    \t}\n+   \t\treturn compareDuration(this, rhs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyMDUzMQ=="}, "originalCommit": {"oid": "a254043a14fe916edcfff7c15025f297d986a03f"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4472, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}