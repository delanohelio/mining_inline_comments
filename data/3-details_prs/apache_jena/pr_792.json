{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NTI1MjY3", "number": 792, "title": "JENA-1959 Added JsonLdReadContext", "bodyText": "Fixes https://issues.apache.org/jira/browse/JENA-1959\n\n\nAdds the analogous to JsonLdWriteContext when converting JSON to RDF (toRdf on the JSON-LD high level API)\n\n\nUpdates Json-LD Java from 0.12.5 to 0.13.0", "createdAt": "2020-09-03T10:21:08Z", "url": "https://github.com/apache/jena/pull/792", "merged": true, "mergeCommit": {"oid": "76a1f2487d93365acb248a503f7db38b7913a35f"}, "closed": true, "closedAt": "2020-09-11T15:54:25Z", "author": {"login": "umbreak"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFN6KUgH2gAyNDc4NTI1MjY3OmYzNGZlNjI4MjM0OTk0ZGQxNDA4NGE2ZDRjNjQwYWFhYTQ4NGE3ODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdH3XUKgFqTQ4NjkyMDk5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f34fe628234994dd14084a6d4c640aaaa484a788", "author": {"user": {"login": "umbreak", "name": "Didac"}}, "url": "https://github.com/apache/jena/commit/f34fe628234994dd14084a6d4c640aaaa484a788", "committedDate": "2020-09-03T10:19:09Z", "message": "Added JsonLdReadContext"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNjg0NzMy", "url": "https://github.com/apache/jena/pull/792#pullrequestreview-482684732", "createdAt": "2020-09-04T14:10:49Z", "commit": {"oid": "f34fe628234994dd14084a6d4c640aaaa484a788"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDoxMDo0OVrOHNPDpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDozMToyMlrOHNPy_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0MDIzMQ==", "bodyText": "Should be /*. (Yes - some other files have /** and need fixing)", "url": "https://github.com/apache/jena/pull/792#discussion_r483640231", "createdAt": "2020-09-04T14:10:49Z", "author": {"login": "afs"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/JsonLDReadContext.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34fe628234994dd14084a6d4c640aaaa484a788"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0MjkxMA==", "bodyText": "OK - I see the intention here but subclassing isn't going to work. This is because Context is also used in places where it is a container of settings from different subsystems - e.g. RIOT.getContext() is a global system place to have context settings. A subclass doesn't because it can't be shared.\nInstead, have a library class JsonLD with static functions.\npublic static void setOptions(Context cxt, JsonLdOptions opts) {\n        cxt.set(JsonLDReader.JSONLD_OPTIONS, opts);\n}", "url": "https://github.com/apache/jena/pull/792#discussion_r483642910", "createdAt": "2020-09-04T14:15:26Z", "author": {"login": "afs"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/JsonLDReadContext.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.riot;\n+\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import org.apache.jena.atlas.web.ContentType;\n+import org.apache.jena.riot.lang.JsonLDReader;\n+import org.apache.jena.riot.system.StreamRDF;\n+import org.apache.jena.sparql.util.Context;\n+\n+import java.io.InputStream;\n+\n+/**\n+ * Set of parameters that can be used to control the reading of JSON-LD.\n+ *\n+ * This class provides setters to define a \"Context\" suitable to be passed as \n+ * last argument to  {@link ReaderRIOT#read(InputStream, String, ContentType, StreamRDF, Context)}\n+ * when the ReaderRIOT has been created with one of the JSON-LD RDFFormat variants (that is, when it is\n+ * an instance of {@link JsonLDReader})\n+ *\n+ * Parameters that are actually useful are ''documentLoader'' and ''produceGeneralizedRdf''.\n+ *\n+ */\n+public class JsonLDReadContext extends Context {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34fe628234994dd14084a6d4c640aaaa484a788"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NjMxNw==", "bodyText": "RIOT holds the public constants so an app does not need to import class JsonLDReader (which is in a subpackage).\nIt is possibly used by existing Jena applications so there is a compatibility issue here.\nWhile not a perfect way to achieve a tidy separate of public and implementation I think we ought to keep the current style (and for JSONLD_OPTONS) unless there is a specific reason for this change.", "url": "https://github.com/apache/jena/pull/792#discussion_r483646317", "createdAt": "2020-09-04T14:21:24Z", "author": {"login": "afs"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/RIOT.java", "diffHunk": "@@ -109,13 +109,6 @@ public static String getBuildDate() {\n \n     // ---- Symbols\n \n-    /**\n-     * Symbol to use to pass (in a Context object) the \"@context\" to be used when reading jsonld\n-     * (overriding the actual @context in the jsonld)\n-     * Expected value: the value of the \"@context\",\n-     * as expected by the JSONLD-java API (a Map) */\n-    public static final Symbol JSONLD_CONTEXT = Symbol.create(\"http://jena.apache.org/riot/jsonld#JSONLD_CONTEXT\");\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34fe628234994dd14084a6d4c640aaaa484a788"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MTUxNw==", "bodyText": "/*", "url": "https://github.com/apache/jena/pull/792#discussion_r483651517", "createdAt": "2020-09-04T14:30:02Z", "author": {"login": "afs"}, "path": "jena-arq/src/test/java/org/apache/jena/riot/TestJsonLDReader.java", "diffHunk": "@@ -1,4 +1,4 @@\n-/*\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34fe628234994dd14084a6d4c640aaaa484a788"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MTU1Ng==", "bodyText": "I'm getting warnings on lines 114, 139: these should be suppressed (it makes it easier to see when new warnings appear in the codebase).\nMap is a raw type. References to generic type Map<K,V> should be parameterized\n\tJsonLDReader.java\t/jena-arq/src/main/java/org/apache/jena/riot/lang\tline 139\nType safety: The method put(Object, Object) belongs to the raw type Map. References to generic type Map<K,V> should be parameterized\n\tJsonLDReader.java\t/jena-arq/src/main/java/org/apache/jena/riot/lang\tline 139\nUnnecessary @SuppressWarnings(\"rawtypes\")\n\tJsonLDReader.java\t/jena-arq/src/main/java/org/apache/jena/riot/lang\tline 114\nUnnecessary @SuppressWarnings(\"unchecked\")\n\tJsonLDReader.java\t/jena-arq/src/main/java/org/apache/jena/riot/lang\tline 114", "url": "https://github.com/apache/jena/pull/792#discussion_r483651556", "createdAt": "2020-09-04T14:30:07Z", "author": {"login": "afs"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/lang/JsonLDReader.java", "diffHunk": "@@ -112,8 +130,21 @@ public void read(InputStream in, String baseURI, ContentType ct, StreamRDF outpu\n             IO.exception(e) ;\n         }\n     }\n-    \n-    private void read$(Object jsonObject, String baseURI, ContentType ct, final StreamRDF output, Context context) {\n+\n+    private void readWithJsonLDCtxOptions(Object jsonObject, String baseURI, final StreamRDF output, Context context)  throws JsonParseException, IOException {\n+        JsonLdOptions options = getJsonLdOptions(baseURI, context) ;\n+        Object jsonldCtx = getJsonLdContext(context);\n+        if (jsonldCtx != null) {\n+            if (jsonObject instanceof Map) {\n+                ((Map) jsonObject).put(\"@context\", jsonldCtx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34fe628234994dd14084a6d4c640aaaa484a788"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MjM0OA==", "bodyText": "JSON-LD is a dataset format and  can encode datasets (quads) as well as a single graph.", "url": "https://github.com/apache/jena/pull/792#discussion_r483652348", "createdAt": "2020-09-04T14:31:22Z", "author": {"login": "afs"}, "path": "jena-arq/src/test/java/org/apache/jena/riot/TestJsonLDReader.java", "diffHunk": "@@ -18,127 +18,123 @@\n \n package org.apache.jena.riot;\n \n-import static org.junit.Assert.assertTrue;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n-\n import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.github.jsonldjava.core.DocumentLoader;\n+import com.github.jsonldjava.core.JsonLdOptions;\n import com.github.jsonldjava.utils.JsonUtils;\n-\n-import org.apache.jena.query.Dataset;\n-import org.apache.jena.query.DatasetFactory;\n import org.apache.jena.rdf.model.Model;\n import org.apache.jena.rdf.model.ModelFactory;\n+import org.apache.jena.riot.lang.JsonLDReader;\n import org.apache.jena.riot.system.ErrorHandlerFactory;\n import org.apache.jena.sparql.util.Context;\n import org.apache.jena.vocabulary.RDF;\n import org.junit.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertTrue;\n+\n public class TestJsonLDReader {\n \n     @Test\n-    public final void simpleReadTest() {\n-        try {\n-            String jsonld = someSchemaDorOrgJsonld();\n-            Model m = ModelFactory.createDefaultModel();\n-            RDFParser.create()\n-                .errorHandler(ErrorHandlerFactory.errorHandlerNoLogging)\n-                .fromString(jsonld)\n-                .lang(Lang.JSONLD)\n-                .parse(m);\n-            assertJohnDoeIsOK(m);\n-        } catch (RiotException e) {\n-            // cf. org.apache.jena.riot.RiotException: loading remote context failed: http://schema.org/\n-            // There's a line printed anyway\n-            // e.printStackTrace();\n-        }\n+    public final void simpleReadTest() throws IOException {\n+        String jsonld = someSchemaDorOrgJsonld();\n+        Model m = jsonld2model(jsonld, null);\n+        assertJohnDoeIsOK(m);\n     }\n \n-    /** Test using the jena Context mechanism to pass the jsonld \"@context\" */\n-    @Test public final void overrideAtContextTest() throws JsonGenerationException, IOException {\n+    /**\n+     * Test using the jena Context mechanism to pass the jsonld \"@context\"\n+     */\n+    @Test\n+    public final void overrideAtContextTest() throws JsonGenerationException, IOException {\n         // some jsonld using schema.org's URI as \"@context\"\n         String jsonld = someSchemaDorOrgJsonld();\n \n         // a subset of schema.org that can be used as @context for jsonld\n-        String jsonldContext = \"{\\\"name\\\":{\\\"@id\\\":\\\"http://schema.org/name\\\"},\\\"Person\\\": {\\\"@id\\\": \\\"http://schema.org/Person\\\"}}\";\n+        String jsonldContext = \"{\\\"name\\\":{\\\"@id\\\":\\\"http://schema.org/name\\\", \\\"@type\\\": \\\"http://www.w3.org/2001/XMLSchema#other\\\"},\\\"Person\\\": {\\\"@id\\\": \\\"http://schema.org/Person\\\"}}\";\n \n         // pass the jsonldContext to the read using a jena Context\n         Context jenaCtx = new Context();\n         Object jsonldContextAsMap = JsonUtils.fromInputStream(new ByteArrayInputStream(jsonldContext.getBytes(StandardCharsets.UTF_8)));\n-        jenaCtx.set(RIOT.JSONLD_CONTEXT, jsonldContextAsMap);\n+        jenaCtx.set(JsonLDReader.JSONLD_CONTEXT, jsonldContextAsMap);\n \n         // read the jsonld, replacing its \"@context\"\n-        Dataset ds = jsonld2dataset(jsonld, jenaCtx);\n+        Model m = jsonld2model(jsonld, jenaCtx);\n \n         // check ds is correct\n-        assertJohnDoeIsOK(ds.getDefaultModel());\n+        assertJohnDoeIsOK(m);\n     }\n \n-    /** Not really useful, but one can replace the @context by a URI: in this case, this URI is used when expanding the json\n-     * (letting JSON-LD java API taking care of downloading the context. */\n-    // well, as of this writing, it doesn't work, as we get a \"loading remote context failed\"\n-    // But it is about the replacing URI, not the replaced one, showing that the mechanism does work\n-    @Test public final void overrideAtContextByURITest() throws JsonGenerationException, IOException {\n+    /**\n+     * Not really useful, but one can replace the @context by a URI: in this case, this URI is used when expanding the json\n+     * (letting JSON-LD java API taking care of downloading the context.\n+     */\n+    @Test\n+    public final void overrideJsonLdOptionsAndContextUri() throws JsonGenerationException, IOException {\n         // some jsonld using a (fake) pseudo.schema.org's URI as \"@context\"\n         String jsonld = \"{\\\"@id\\\":\\\"_:b0\\\",\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"John Doe\\\",\\\"@context\\\":\\\"http://pseudo.schema.org/\\\"}\";\n \n         // a subset of schema.org that can be used as @context for jsonld\n         String jsonldContext = \"\\\"http://schema.org\\\"\";\n \n-        // pass the jsonldContext to the read using a jena Context\n-        Context jenaCtx = new Context();\n-        Object jsonldContextAsObject = JsonUtils.fromInputStream(new ByteArrayInputStream(jsonldContext.getBytes(StandardCharsets.UTF_8)));\n-        jenaCtx.set(RIOT.JSONLD_CONTEXT, jsonldContextAsObject);\n-\n-        try {\n-            // read the jsonld, replacing its \"@context\"\n-            Dataset ds = jsonld2dataset(jsonld, jenaCtx);\n-\n-            // check ds is correct\n-            assertJohnDoeIsOK(ds.getDefaultModel());\n-        } catch (RiotException e) {\n-            // cf. org.apache.jena.riot.RiotException: loading remote context failed: http://schema.org/\n-            // There's a line printed anyway\n-            // e.printStackTrace();\n-        }\n+        JsonLdOptions options = new JsonLdOptions();\n+        DocumentLoader dl = new DocumentLoader();\n+        dl.addInjectedDoc(\"http://schema.org\", String.format(\"{%s}\", schemaOrgContext()));\n+        options.setDocumentLoader(dl);\n+\n+        // pass the jsonldContext and JsonLdOptions to the read using a jena Context\n+        JsonLDReadContext jenaCtx = new JsonLDReadContext();\n+        jenaCtx.setJsonLDContext(jsonldContext);\n+        jenaCtx.setOptions(options);\n+\n+        // read the jsonld, replacing its \"@context\"\n+        Model m = jsonld2model(jsonld, jenaCtx);\n+\n+        // check ds is correct\n+        assertJohnDoeIsOK(m);\n     }\n \n     //\n     //\n     //\n \n-    /**\n-     * Reading some jsonld String, using a Context\n-     * @return a new Dataset\n-     * @throws IOException\n-     */\n-    private Dataset jsonld2dataset(String jsonld, Context jenaCtx) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34fe628234994dd14084a6d4c640aaaa484a788"}, "originalPosition": 151}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3002f489ed8a439f4083814a9e8bfe35a3bd4a07", "author": {"user": {"login": "umbreak", "name": "Didac"}}, "url": "https://github.com/apache/jena/commit/3002f489ed8a439f4083814a9e8bfe35a3bd4a07", "committedDate": "2020-09-04T19:59:54Z", "message": "Fixed license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bd873f0b1c2b0e47d79297c216c6a10c02348db", "author": {"user": {"login": "umbreak", "name": "Didac"}}, "url": "https://github.com/apache/jena/commit/9bd873f0b1c2b0e47d79297c216c6a10c02348db", "committedDate": "2020-09-04T20:23:09Z", "message": "Supress warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e16f2025434ecc639fdba60c126ceca5500c2d7", "author": {"user": {"login": "umbreak", "name": "Didac"}}, "url": "https://github.com/apache/jena/commit/6e16f2025434ecc639fdba60c126ceca5500c2d7", "committedDate": "2020-09-05T05:47:58Z", "message": "Addressed PR feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "221b2f1172a749fb7d1b3c35a8e1322e41ed89a7", "author": {"user": {"login": "umbreak", "name": "Didac"}}, "url": "https://github.com/apache/jena/commit/221b2f1172a749fb7d1b3c35a8e1322e41ed89a7", "committedDate": "2020-09-05T05:47:09Z", "message": "Addressed PR feedback"}, "afterCommit": {"oid": "6e16f2025434ecc639fdba60c126ceca5500c2d7", "author": {"user": {"login": "umbreak", "name": "Didac"}}, "url": "https://github.com/apache/jena/commit/6e16f2025434ecc639fdba60c126ceca5500c2d7", "committedDate": "2020-09-05T05:47:58Z", "message": "Addressed PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MDQzNDY4", "url": "https://github.com/apache/jena/pull/792#pullrequestreview-486043468", "createdAt": "2020-09-10T15:15:10Z", "commit": {"oid": "6e16f2025434ecc639fdba60c126ceca5500c2d7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNToxNToxMVrOHP5B4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNToyMDo0NVrOHP5S8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNTA1OA==", "bodyText": "Please remove the  and indent the URL so that the text is exactly the same as other files.\nBecause this is a new file, it is better that the contributor does this and not the project. License/copyright notices are sacrosanct!", "url": "https://github.com/apache/jena/pull/792#discussion_r486425058", "createdAt": "2020-09-10T15:15:11Z", "author": {"login": "afs"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/JsonLDReadContext.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e16f2025434ecc639fdba60c126ceca5500c2d7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyOTQyNQ==", "bodyText": "Ditto.", "url": "https://github.com/apache/jena/pull/792#discussion_r486429425", "createdAt": "2020-09-10T15:20:45Z", "author": {"login": "afs"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/JsonLDWriteContext.java", "diffHunk": "@@ -6,15 +6,16 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e16f2025434ecc639fdba60c126ceca5500c2d7"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af3f33d40d8356f0fb5ea0ec82e4894dedc19555", "author": {"user": {"login": "umbreak", "name": "Didac"}}, "url": "https://github.com/apache/jena/commit/af3f33d40d8356f0fb5ea0ec82e4894dedc19555", "committedDate": "2020-09-11T06:16:02Z", "message": "Fixed licensing formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTIwOTk1", "url": "https://github.com/apache/jena/pull/792#pullrequestreview-486920995", "createdAt": "2020-09-11T15:44:57Z", "commit": {"oid": "af3f33d40d8356f0fb5ea0ec82e4894dedc19555"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2945, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}