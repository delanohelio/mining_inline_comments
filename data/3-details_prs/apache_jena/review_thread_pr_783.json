{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4OTAxMDI5", "number": 783, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoxNTozMlrOEZNSQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoxNTozMlrOEZNSQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODY3NTIzOnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/riot/RDFParserRegistry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoxNTozMlrOHB5YCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDo1ODowN1rOHB6oig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1MDY2Nw==", "bodyText": "Should it go to a Logger instead? Or is it expected to be written to stderr?", "url": "https://github.com/apache/jena/pull/783#discussion_r471750667", "createdAt": "2020-08-17T20:15:32Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/RDFParserRegistry.java", "diffHunk": "@@ -206,14 +206,24 @@ public ReaderRIOT create(Lang language, ParserProfile profile) {\n     private static class ReaderRIOTFactoryThrift implements ReaderRIOTFactory {\n         @Override\n         public ReaderRIOT create(Lang language, ParserProfile profile) {\n-            return new ReaderRDFThrift() ;\n+            return new ReaderRDFThrift(profile) ;\n         }\n     }\n \n     private static class ReaderRDFThrift implements ReaderRIOT {\n+        private final ParserProfile profile; \n+        public ReaderRDFThrift(ParserProfile profile) { this.profile = profile; }\n+\n         @Override\n         public void read(InputStream in, String baseURI, ContentType ct, StreamRDF output, Context context) {\n-            BinRDF.inputStreamToStream(in, output) ;\n+            try {\n+                BinRDF.inputStreamToStream(in, output);\n+            } catch (RiotException ex) {\n+                if ( profile != null && profile.getErrorHandler() != null )\n+                    profile.getErrorHandler().error(ex.getMessage(), -1, -1);\n+                else\n+                    System.err.println(ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a017d3fe5fb78ff355b1c4dfe2bce53f2e702d46"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3MTI3NA==", "bodyText": "Thanks for seeing that. Logger in some way would be better\nRDFThrift is a bit different because the parser does not signal errors or warnings like the other text-syntax parsers. Such raw binary is supposed to be \"right\" and errors are actually low level encoding problems that Thrift will catch and complain about. But each case must throw an exception regardless of the errorhandler.", "url": "https://github.com/apache/jena/pull/783#discussion_r471771274", "createdAt": "2020-08-17T20:58:07Z", "author": {"login": "afs"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/RDFParserRegistry.java", "diffHunk": "@@ -206,14 +206,24 @@ public ReaderRIOT create(Lang language, ParserProfile profile) {\n     private static class ReaderRIOTFactoryThrift implements ReaderRIOTFactory {\n         @Override\n         public ReaderRIOT create(Lang language, ParserProfile profile) {\n-            return new ReaderRDFThrift() ;\n+            return new ReaderRDFThrift(profile) ;\n         }\n     }\n \n     private static class ReaderRDFThrift implements ReaderRIOT {\n+        private final ParserProfile profile; \n+        public ReaderRDFThrift(ParserProfile profile) { this.profile = profile; }\n+\n         @Override\n         public void read(InputStream in, String baseURI, ContentType ct, StreamRDF output, Context context) {\n-            BinRDF.inputStreamToStream(in, output) ;\n+            try {\n+                BinRDF.inputStreamToStream(in, output);\n+            } catch (RiotException ex) {\n+                if ( profile != null && profile.getErrorHandler() != null )\n+                    profile.getErrorHandler().error(ex.getMessage(), -1, -1);\n+                else\n+                    System.err.println(ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1MDY2Nw=="}, "originalCommit": {"oid": "a017d3fe5fb78ff355b1c4dfe2bce53f2e702d46"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4480, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}