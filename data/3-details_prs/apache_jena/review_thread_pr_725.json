{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMzM0NjMx", "number": 725, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowNzoyM1rODx-3Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoyMjoxMFrODyAktQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzM2Nzg3OnYy", "diffSide": "RIGHT", "path": "jena-core/src/main/java/org/apache/jena/graph/JenaNodeException.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowNzoyM1rOGFwphA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzozNDo1OVrOGF58mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MzEyNA==", "bodyText": "New files are missing the newline at the end of the file (for git). But not super important.", "url": "https://github.com/apache/jena/pull/725#discussion_r408693124", "createdAt": "2020-04-15T09:07:23Z", "author": {"login": "kinow"}, "path": "jena-core/src/main/java/org/apache/jena/graph/JenaNodeException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.graph;\n+\n+import org.apache.jena.shared.JenaException;\n+\n+public class JenaNodeException extends JenaException {\n+    public JenaNodeException(String message) {\n+        super(message);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c4e7e07d3bf6f1ebef77ebb41ab644f55ce467"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MDAxOA==", "bodyText": "(not all, saw some new files that had the newline, but again, that's not really important)", "url": "https://github.com/apache/jena/pull/725#discussion_r408740018", "createdAt": "2020-04-15T10:27:29Z", "author": {"login": "kinow"}, "path": "jena-core/src/main/java/org/apache/jena/graph/JenaNodeException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.graph;\n+\n+import org.apache.jena.shared.JenaException;\n+\n+public class JenaNodeException extends JenaException {\n+    public JenaNodeException(String message) {\n+        super(message);\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MzEyNA=="}, "originalCommit": {"oid": "80c4e7e07d3bf6f1ebef77ebb41ab644f55ce467"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0NTQ2Ng==", "bodyText": "My Eclipse template for \"new java file\" didn't have a newline on the end. Fixed. And fixed new java files.", "url": "https://github.com/apache/jena/pull/725#discussion_r408845466", "createdAt": "2020-04-15T13:34:59Z", "author": {"login": "afs"}, "path": "jena-core/src/main/java/org/apache/jena/graph/JenaNodeException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.graph;\n+\n+import org.apache.jena.shared.JenaException;\n+\n+public class JenaNodeException extends JenaException {\n+    public JenaNodeException(String message) {\n+        super(message);\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MzEyNA=="}, "originalCommit": {"oid": "80c4e7e07d3bf6f1ebef77ebb41ab644f55ce467"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzYwODQ0OnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/sparql/function/library/triple/FunctionTripleTerm.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoxMDo1NlrOGFy9oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzoxNjoxM1rOGF5JOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMTA0MA==", "bodyText": "Debug left-over?", "url": "https://github.com/apache/jena/pull/725#discussion_r408731040", "createdAt": "2020-04-15T10:10:56Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/sparql/function/library/triple/FunctionTripleTerm.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.sparql.function.library.triple;\n+\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.Node_Triple;\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.sparql.expr.ExprEvalException;\n+import org.apache.jena.sparql.expr.NodeValue;\n+import org.apache.jena.sparql.function.FunctionBase1;\n+\n+/** Base class for one argument functions working on a triple term argument. */\n+public abstract class FunctionTripleTerm extends FunctionBase1 {\n+    public FunctionTripleTerm() { }\n+\n+    @Override\n+    public NodeValue exec(NodeValue nv) {\n+        System.out.println(nv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c4e7e07d3bf6f1ebef77ebb41ab644f55ce467"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMjMxNA==", "bodyText": "Oops. It also shows there are no tests for this new functions.  I'll add some.", "url": "https://github.com/apache/jena/pull/725#discussion_r408832314", "createdAt": "2020-04-15T13:16:13Z", "author": {"login": "afs"}, "path": "jena-arq/src/main/java/org/apache/jena/sparql/function/library/triple/FunctionTripleTerm.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.sparql.function.library.triple;\n+\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.Node_Triple;\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.sparql.expr.ExprEvalException;\n+import org.apache.jena.sparql.expr.NodeValue;\n+import org.apache.jena.sparql.function.FunctionBase1;\n+\n+/** Base class for one argument functions working on a triple term argument. */\n+public abstract class FunctionTripleTerm extends FunctionBase1 {\n+    public FunctionTripleTerm() { }\n+\n+    @Override\n+    public NodeValue exec(NodeValue nv) {\n+        System.out.println(nv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMTA0MA=="}, "originalCommit": {"oid": "80c4e7e07d3bf6f1ebef77ebb41ab644f55ce467"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzYxNDY5OnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/riot/writer/TurtleShell.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoxMjo1MFrOGFzBmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzozNDo1NFrOGF58Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMjA1OQ==", "bodyText": "Extra spaces", "url": "https://github.com/apache/jena/pull/725#discussion_r408732059", "createdAt": "2020-04-15T10:12:50Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/writer/TurtleShell.java", "diffHunk": "@@ -335,25 +333,39 @@ private boolean isDefaultGraph(Node node) {\n         /** Find Bnodes that can written as []\n          * Subject position (top level) - only used for subject position anywhere in the dataset\n          * Object position (any level) - only used as object once anywhere in the dataset\n+         * Not used in triple terms.\n+         *   These must be written with _: syntax or [] no contents.\n+         *   We do not cover the latter case (and it is not legal in PG mode where the\n+         *   triple termmust refer to a triple in the graph so blank node used elsewhere.) \n          */\n         private void findBNodesSyntax1() {\n             Set<Node> rejects = new HashSet<>() ; // Nodes known not to meet the requirement.\n-\n+            \n+            // \n+            Set<Node> blankNodesInTripleTerms = new HashSet<>();\n+            // *** Look inside Triple terms\n             ExtendedIterator<Triple> iter = find(ANY, ANY, ANY) ;\n             try {\n                 for ( ; iter.hasNext() ; ) {\n                     Triple t = iter.next() ;\n                     Node subj = t.getSubject() ;\n                     Node obj = t.getObject() ;\n-\n+                    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c4e7e07d3bf6f1ebef77ebb41ab644f55ce467"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0NTQwMw==", "bodyText": "Gone!", "url": "https://github.com/apache/jena/pull/725#discussion_r408845403", "createdAt": "2020-04-15T13:34:54Z", "author": {"login": "afs"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/writer/TurtleShell.java", "diffHunk": "@@ -335,25 +333,39 @@ private boolean isDefaultGraph(Node node) {\n         /** Find Bnodes that can written as []\n          * Subject position (top level) - only used for subject position anywhere in the dataset\n          * Object position (any level) - only used as object once anywhere in the dataset\n+         * Not used in triple terms.\n+         *   These must be written with _: syntax or [] no contents.\n+         *   We do not cover the latter case (and it is not legal in PG mode where the\n+         *   triple termmust refer to a triple in the graph so blank node used elsewhere.) \n          */\n         private void findBNodesSyntax1() {\n             Set<Node> rejects = new HashSet<>() ; // Nodes known not to meet the requirement.\n-\n+            \n+            // \n+            Set<Node> blankNodesInTripleTerms = new HashSet<>();\n+            // *** Look inside Triple terms\n             ExtendedIterator<Triple> iter = find(ANY, ANY, ANY) ;\n             try {\n                 for ( ; iter.hasNext() ; ) {\n                     Triple t = iter.next() ;\n                     Node subj = t.getSubject() ;\n                     Node obj = t.getObject() ;\n-\n+                    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMjA1OQ=="}, "originalCommit": {"oid": "80c4e7e07d3bf6f1ebef77ebb41ab644f55ce467"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzYyMjI1OnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterAddTripleTerm.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoxNDo1M1rOGFzGPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzoxODoxMFrOGF5OUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMzI0Nw==", "bodyText": "s/avriables/variables", "url": "https://github.com/apache/jena/pull/725#discussion_r408733247", "createdAt": "2020-04-15T10:14:53Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterAddTripleTerm.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.sparql.engine.iterator;\n+\n+import org.apache.jena.atlas.io.IndentedWriter;\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.NodeFactory;\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.sparql.core.Substitute;\n+import org.apache.jena.sparql.core.Var;\n+import org.apache.jena.sparql.engine.ExecutionContext;\n+import org.apache.jena.sparql.engine.QueryIterator;\n+import org.apache.jena.sparql.engine.binding.Binding;\n+import org.apache.jena.sparql.engine.binding.BindingFactory;\n+import org.apache.jena.sparql.serializer.SerializationContext;\n+\n+/**\n+ * Add {@code (var, matchTriple)} to a {@link QueryIterator}.\n+ * <p>\n+ * The supplied triple is a triple pattern which is grounded by replacing avriables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c4e7e07d3bf6f1ebef77ebb41ab644f55ce467"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMzYxNg==", "bodyText": "Done", "url": "https://github.com/apache/jena/pull/725#discussion_r408833616", "createdAt": "2020-04-15T13:18:10Z", "author": {"login": "afs"}, "path": "jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterAddTripleTerm.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.sparql.engine.iterator;\n+\n+import org.apache.jena.atlas.io.IndentedWriter;\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.NodeFactory;\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.sparql.core.Substitute;\n+import org.apache.jena.sparql.core.Var;\n+import org.apache.jena.sparql.engine.ExecutionContext;\n+import org.apache.jena.sparql.engine.QueryIterator;\n+import org.apache.jena.sparql.engine.binding.Binding;\n+import org.apache.jena.sparql.engine.binding.BindingFactory;\n+import org.apache.jena.sparql.serializer.SerializationContext;\n+\n+/**\n+ * Add {@code (var, matchTriple)} to a {@link QueryIterator}.\n+ * <p>\n+ * The supplied triple is a triple pattern which is grounded by replacing avriables", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMzI0Nw=="}, "originalCommit": {"oid": "80c4e7e07d3bf6f1ebef77ebb41ab644f55ce467"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzY0NTk3OnYy", "diffSide": "LEFT", "path": "jena-arq/src/main/java/org/apache/jena/query/ARQ.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoyMTozOFrOGFzUxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoyMTozOFrOGFzUxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczNjk2NA==", "bodyText": "Though a typo, that sounds like a cool name for some project, or sci-fi weapon \ud83d\ude80", "url": "https://github.com/apache/jena/pull/725#discussion_r408736964", "createdAt": "2020-04-15T10:21:38Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/query/ARQ.java", "diffHunk": "@@ -460,7 +460,7 @@ public static void enableOptimizer(Context context, boolean state)\n     public static final Symbol optMergeBGPs = SystemARQ.allocSymbol(\"optMergeBGPs\");\n \n     /**\n-     * Context key controlling whether the standard optimizater applies the optimization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c4e7e07d3bf6f1ebef77ebb41ab644f55ce467"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzY0Nzg5OnYy", "diffSide": "RIGHT", "path": "jena-arq/Grammar/sse/tokens.inc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoyMjoxMFrOGFzV7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzozNDo0MlrOGF57yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczNzI2MQ==", "bodyText": "s/BRCAE/RBRACE ?", "url": "https://github.com/apache/jena/pull/725#discussion_r408737261", "createdAt": "2020-04-15T10:22:10Z", "author": {"login": "kinow"}, "path": "jena-arq/Grammar/sse/tokens.inc", "diffHunk": "@@ -147,12 +146,12 @@ TOKEN:\n TOKEN:\n {\n   // Anything left that isn't structural\n-  // LPAREN and RPAREN / LBRACKET/RBRACKET\n+  // LPAREN and RPAREN / LBRACKET/RBRACKET / LBRACE/BRCAE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c4e7e07d3bf6f1ebef77ebb41ab644f55ce467"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0NTI1OA==", "bodyText": "Done.", "url": "https://github.com/apache/jena/pull/725#discussion_r408845258", "createdAt": "2020-04-15T13:34:42Z", "author": {"login": "afs"}, "path": "jena-arq/Grammar/sse/tokens.inc", "diffHunk": "@@ -147,12 +146,12 @@ TOKEN:\n TOKEN:\n {\n   // Anything left that isn't structural\n-  // LPAREN and RPAREN / LBRACKET/RBRACKET\n+  // LPAREN and RPAREN / LBRACKET/RBRACKET / LBRACE/BRCAE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczNzI2MQ=="}, "originalCommit": {"oid": "80c4e7e07d3bf6f1ebef77ebb41ab644f55ce467"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4572, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}