{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTQzNTMx", "number": 732, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyOTo1MVrOD0mx6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyOTo1MVrOD0mx6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDg3OTE0OnYy", "diffSide": "RIGHT", "path": "jena-core/src/main/java/org/apache/jena/util/SplitIRI.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyOTo1MVrOGJnoVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyOTo1MVrOGJnoVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczOTY2OQ==", "bodyText": "Another interesting way to format code with comments! For one second thought we had two else statements. Nice!", "url": "https://github.com/apache/jena/pull/732#discussion_r412739669", "createdAt": "2020-04-22T07:29:51Z", "author": {"login": "kinow"}, "path": "jena-core/src/main/java/org/apache/jena/util/SplitIRI.java", "diffHunk": "@@ -136,45 +135,66 @@ private static boolean needsEscape(char ch, boolean finalChar) {\n     // @formatter:on\n \n     /** Find the URI split point, return the index into the string that is the\n-     *  first character of a legal Turtle local name.   \n+     *  first character of a legal Turtle local name.\n      * <p>\n      * This is a pragmatic choice, not just finding the maximal point.\n-     * For example, with escaping '/' can be included but that means \n+     * For example, with escaping '/' can be included but that means\n      * {@code http://example/path/abc} could split to give {@code http://example/}\n      * and {@code path/abc} .\n      * <p>\n-     * Split URN's after ':'.  \n-     *   \n+     * Split URN's after ':'.\n+     *\n      * @param uri URI string\n      * @return The split point, or -1 for \"not found\".\n      */\n-    \n     public static int splitpoint(String uri) {\n         boolean isURN = uri.startsWith(\"urn:\") ;\n         // Fast track.  Still need to check validity of the prefix part.\n         int idx1 = uri.lastIndexOf('#') ;\n-        // Not so simple - \\/ in local names \n+        // Not so simple - \\/ in local names\n         int idx2 = isURN ? uri.lastIndexOf(':') : uri.lastIndexOf('/') ;\n \n         // If absolute.\n-        int idx3 = uri.indexOf(':') ; \n-    \n+        int idx3 = uri.indexOf(':') ;\n+\n         // Note: local names can't end in \".\" in Turtle.\n         // This is handled by escape_PN_LOCAL_ESC which will escape it as \"\\.\"\n-        \n-        // Test the discovered local part.\n-        // Limit is exclusive.\n-        int limit = Math.max(idx1, idx2) ;\n-        limit = Math.max(limit, idx3) ;\n-        limit = Math.max(-1, limit) ;\n-        \n+\n+        // Cases\n+        //   \"abc#def\"\n+        //   \"/abc\"\n+        //   \"/\"\n+        //   \"/path/path#frag\n+        //   \"/path/path#abc/def\" :: / in fragment, split is at the \"#\".\n+\n+        int limit;\n+        if ( idx1 >= 0 && idx2 < 0 )\n+            // no \"/\" (or \":\" if a urn)\n+            limit = idx1;\n+        else if ( idx1 < 0 && idx2 >= 0 )\n+            // no fragment\n+            limit = idx2;\n+        else\n+            // Fragment and path.\n+            // If \"/\" is in the fragment, it is not the split.\n+            if ( idx1 >= 0 && idx2 >= 0 )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e19669fd95884c2a2472b6c885d74509e3ae8d"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4576, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}