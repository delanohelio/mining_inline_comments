{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MzUwODg3", "number": 871, "title": "JENA-2003: Handle file URIs with URI scheme name", "bodyText": "This fixes the problems with \"file:\".\nBefore passing to the OS, this has always been stripped and converted to an OS file name. There are other uses of filename handling code from Apache Commons IO, one of which RDFLangauages.filenameToLang, which takes a resource name (URI of filename) and uses the extension to guess the RDF syntax. It is used for file names and also URIs when there isn't content negotiation.\nThe fix, in IO.java, around line 100  (the rest of the PR is naming and cosmetic changes), is to extract the code from Apache Commons IO , remove the check for \":\" as a trailing component of the filename (NTFS ADS) - windows uses \":\" in two places, drive and ADS. This clashes with the use of URI scheme name, which also uses \":\".\nThe fix is the safest approach - copying and restoring the old behaviour in a low risk fashion. Further factoring can be done after the 3.17.0 release to be tidier.", "createdAt": "2020-11-25T10:43:55Z", "url": "https://github.com/apache/jena/pull/871", "merged": true, "mergeCommit": {"oid": "a33b86878e9bba4b06ea14feb251d593aa0821d7"}, "closed": true, "closedAt": "2020-11-25T11:07:14Z", "author": {"login": "afs"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfyifkgH2gAyNTI3MzUwODg3OmM4YzkxZjhiMmUxYzRiNTRlMDA0YjU1ZjJjZjUwZjhmZWI4YjRiOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdf8LopAFqTUzODM3NzAwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c8c91f8b2e1c4b54e004b55f2cf50f8feb8b4b90", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/c8c91f8b2e1c4b54e004b55f2cf50f8feb8b4b90", "committedDate": "2020-11-24T23:41:49Z", "message": "JENA-2003: Handle file URIs with URI scheme name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Mzc3MDAw", "url": "https://github.com/apache/jena/pull/871#pullrequestreview-538377000", "createdAt": "2020-11-25T10:55:34Z", "commit": {"oid": "c8c91f8b2e1c4b54e004b55f2cf50f8feb8b4b90"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo1NTozNFrOH5t5dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo1NTozNFrOH5t5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4Mjg2OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/jena/pull/871#discussion_r530282869", "createdAt": "2020-11-25T10:55:34Z", "author": {"login": "kinow"}, "path": "jena-base/src/main/java/org/apache/jena/atlas/io/IO.java", "diffHunk": "@@ -85,24 +88,75 @@ static public InputStream openFileEx(String filename) throws IOException, FileNo\n             filename = IRILib.decodeHex(filename);\n         }\n         InputStream in = new FileInputStream(filename);\n-        String ext = FilenameUtils.getExtension(filename);\n+        String ext = getExtension(filename);\n         switch ( ext ) {\n             case \"\":        return in;\n-            case \"gz\":      return new GZIPInputStream(in);\n-            case \"bz2\":     return new BZip2CompressorInputStream(in);\n-            case \"sz\":      return new SnappyCompressorInputStream(in);\n+            case ext_gz:    return new GZIPInputStream(in);\n+            case ext_bz2:   return new BZip2CompressorInputStream(in);\n+            case ext_sz:    return new SnappyCompressorInputStream(in);\n         }\n         return in;\n     }\n \n-    private static String[] extensions = { \"gz\", \"bz2\", \"sz\" };\n+    // ---- Extracted from Apache CommonsIO : FilenameUtils (2.8.0) because of the drive letter handling.\n+    private static final int NOT_FOUND = -1;\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String EXTENSION_SEPARATOR = \".\";\n+    private static final char UNIX_SEPARATOR = '/';\n+    private static final char WINDOWS_SEPARATOR = '\\\\';\n+\n+    private static int indexOfLastSeparator(final String fileName) {\n+        if (fileName == null) {\n+            return NOT_FOUND;\n+        }\n+        final int lastUnixPos = fileName.lastIndexOf(UNIX_SEPARATOR);\n+        final int lastWindowsPos = fileName.lastIndexOf(WINDOWS_SEPARATOR);\n+        return Math.max(lastUnixPos, lastWindowsPos);\n+    }\n \n-    /** The filename without any compression extension, or the original filename.\n-     *  It tests for compression types handled by {@link #openFileEx}.\n+    private static int indexOfExtension(final String fileName) throws IllegalArgumentException {\n+        if (fileName == null) {\n+            return NOT_FOUND;\n+        }\n+//        if (isSystemWindows()) {\n+//            // Special handling for NTFS ADS: Don't accept colon in the fileName.\n+//            final int offset = fileName.indexOf(':', getAdsCriticalOffset(fileName));\n+//            if (offset != -1) {\n+//                throw new IllegalArgumentException(\"NTFS ADS separator (':') in file name is forbidden.\");\n+//            }\n+//        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8c91f8b2e1c4b54e004b55f2cf50f8feb8b4b90"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2980, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}