{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MjU3MjY0", "number": 742, "title": "JENA-1881: Support RDF* triple terms in SPARQL XML results", "bodyText": "In the same nested style as the JSON results:\n    {\n      \"type\": \"triple\" , \n      \"value\": {\n        \"subject\":   { \"type\": \"bnode\" , \"value\": \"b0\" } ,\n        \"property\": { \"type\": \"uri\" , \"value\": \"http://example/p\" } ,\n        \"object\":    { \"type\": \"literal\" , \"datatype\": \"http://www.w3.org/2001/XMLSchema#integer\" , \"value\": \"123\" }\n      }\n\nis in SPARQL XML results:\n    <triple>\n      <subject>\n        <bnode>b0</bnode>\n      </subject>\n      <property>\n        <uri>http://example/p</uri>\n      </property>\n      <object>\n        <literal datatype=\"http://www.w3.org/2001/XMLSchema#integer\">123</literal>\n      </object>\n    </triple>", "createdAt": "2020-05-11T18:01:53Z", "url": "https://github.com/apache/jena/pull/742", "merged": true, "mergeCommit": {"oid": "7e71664a38449b1cf3e6fa63d71742a1e72cd734"}, "closed": true, "closedAt": "2020-05-13T13:30:04Z", "author": {"login": "afs"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgTjiIAH2gAyNDE2MjU3MjY0OmU4N2E4NzI5Zjc0MTZmMTgzZjBjZDgyODE5YWIyZWMwYjVlZDlkNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgX08LAFqTQwOTU4Mzc5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e87a8729f7416f183f0cd82819ab2ec0b5ed9d56", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/e87a8729f7416f183f0cd82819ab2ec0b5ed9d56", "committedDate": "2020-05-11T17:58:40Z", "message": "JENA-1881: Support RDF* triple terms in SPARQL XML results"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NTgzNzk0", "url": "https://github.com/apache/jena/pull/742#pullrequestreview-409583794", "createdAt": "2020-05-11T22:47:46Z", "commit": {"oid": "e87a8729f7416f183f0cd82819ab2ec0b5ed9d56"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjo0Nzo0NlrOGTwCOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjo1MDowM1rOGTwFHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzEzMQ==", "bodyText": "Extra white space", "url": "https://github.com/apache/jena/pull/742#discussion_r423363131", "createdAt": "2020-05-11T22:47:46Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/resultset/rw/ResultSetWriterXML.java", "diffHunk": "@@ -253,84 +254,138 @@ public void binding(String varName, RDFNode node) {\n             out.print(varName);\n             out.println(\"\\\">\");\n             out.incIndent(INDENT);\n-            printBindingValue(node);\n+            printBindingValue(rdfNode);\n             out.decIndent(INDENT);\n             out.print(\"</\");\n             out.print(dfBinding);\n             out.println(\">\");\n         }\n \n-        void printBindingValue(RDFNode node) {\n-            if ( node == null ) {\n+        private void printBindingValue(RDFNode rdfNode) {\n+            if ( rdfNode == null ) {\n                 // Unbound\n                 out.print(\"<\");\n                 out.print(dfUnbound);\n                 out.println(\"/>\");\n                 return;\n             }\n \n-            if ( node instanceof Literal ) {\n-                printLiteral((Literal)node);\n+            Node node = rdfNode.asNode();\n+            printBindingValue(node);\n+        }\n+        \n+        private void printBindingValue(Node node) {\n+            if ( node == null )\n+                return;\n+        \n+            if ( node.isLiteral() ) {\n+                printLiteral(node);\n                 return;\n             }\n \n-            if ( node instanceof Resource ) {\n-                printResource((Resource)node);\n+            if ( node.isURI() ) {\n+                printURI(node);\n+                return;\n+            }\n+            \n+            if ( node.isBlank() ) {\n+                printBlankNode(node);\n+                return;\n+            }\n+            if ( node.isNodeTriple() ) {\n+                printTripleTerm(node);\n                 return;\n             }\n+            \n+            if ( node.isNodeGraph() )\n+                throw new UnsupportedOperationException(\"Graph terms\");\n \n-            Log.warn(this, \"Unknown RDFNode type in result set: \" + node.getClass());\n+            Log.warn(this, \"Unknown RDFNode type in result set: \" + node);\n         }\n \n-        void printLiteral(Literal literal) {\n+        private void printURI(Node nodeURI) {\n+            String uri = nodeURI.getURI();\n             out.print(\"<\");\n-            out.print(dfLiteral);\n+            out.print(dfURI);\n+            out.print(\">\");\n+            out.print(xml_escape(uri));\n+            out.print(\"</\");\n+            out.print(dfURI);\n+            out.println(\">\");\n+        }            \n+            \n+        private void printBlankNode(Node node) {\n+            String label = bNodeMap.get(null, node);\n+            // Comes with leading \"_:\"\n+            label = label.substring(2);\n+            out.print(\"<\");\n+            out.print(dfBNode);\n+            out.print(\">\");\n+            out.print(xml_escape(label));\n+            out.print(\"</\");\n+            out.print(dfBNode);\n+            out.println(\">\");\n+        }\n \n+        private void printLiteral(Node literal) {\n+            out.print(\"<\");\n+            out.print(dfLiteral);\n+        \n             if ( Util.isLangString(literal) ) {\n-                String lang = literal.getLanguage();\n+                String lang = literal.getLiteralLanguage();\n                 out.print(\" xml:lang=\\\"\");\n-                out.print(literal.getLanguage());\n+                out.print(lang);\n                 out.print(\"\\\"\");\n             } else if ( !Util.isSimpleString(literal) ) {\n                 // Datatype\n                 // (RDF 1.1) not xsd:string nor rdf:langString.\n                 // (RDF 1.0) any datatype.\n-                String datatype = literal.getDatatypeURI();\n+                String datatype = literal.getLiteralDatatypeURI();\n                 out.print(\" \");\n                 out.print(dfAttrDatatype);\n                 out.print(\"=\\\"\");\n                 out.print(datatype);\n                 out.print(\"\\\"\");\n             }\n-\n+        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e87a8729f7416f183f0cd82819ab2ec0b5ed9d56"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2Mzg3MA==", "bodyText": "The new methods openTag/closeTag cannot be used in printBlankNode too, as in printTripleTerm? (asking because I noticed that method also increments indentation, so maybe not supposed to be always used?)", "url": "https://github.com/apache/jena/pull/742#discussion_r423363870", "createdAt": "2020-05-11T22:50:03Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/resultset/rw/ResultSetWriterXML.java", "diffHunk": "@@ -253,84 +254,138 @@ public void binding(String varName, RDFNode node) {\n             out.print(varName);\n             out.println(\"\\\">\");\n             out.incIndent(INDENT);\n-            printBindingValue(node);\n+            printBindingValue(rdfNode);\n             out.decIndent(INDENT);\n             out.print(\"</\");\n             out.print(dfBinding);\n             out.println(\">\");\n         }\n \n-        void printBindingValue(RDFNode node) {\n-            if ( node == null ) {\n+        private void printBindingValue(RDFNode rdfNode) {\n+            if ( rdfNode == null ) {\n                 // Unbound\n                 out.print(\"<\");\n                 out.print(dfUnbound);\n                 out.println(\"/>\");\n                 return;\n             }\n \n-            if ( node instanceof Literal ) {\n-                printLiteral((Literal)node);\n+            Node node = rdfNode.asNode();\n+            printBindingValue(node);\n+        }\n+        \n+        private void printBindingValue(Node node) {\n+            if ( node == null )\n+                return;\n+        \n+            if ( node.isLiteral() ) {\n+                printLiteral(node);\n                 return;\n             }\n \n-            if ( node instanceof Resource ) {\n-                printResource((Resource)node);\n+            if ( node.isURI() ) {\n+                printURI(node);\n+                return;\n+            }\n+            \n+            if ( node.isBlank() ) {\n+                printBlankNode(node);\n+                return;\n+            }\n+            if ( node.isNodeTriple() ) {\n+                printTripleTerm(node);\n                 return;\n             }\n+            \n+            if ( node.isNodeGraph() )\n+                throw new UnsupportedOperationException(\"Graph terms\");\n \n-            Log.warn(this, \"Unknown RDFNode type in result set: \" + node.getClass());\n+            Log.warn(this, \"Unknown RDFNode type in result set: \" + node);\n         }\n \n-        void printLiteral(Literal literal) {\n+        private void printURI(Node nodeURI) {\n+            String uri = nodeURI.getURI();\n             out.print(\"<\");\n-            out.print(dfLiteral);\n+            out.print(dfURI);\n+            out.print(\">\");\n+            out.print(xml_escape(uri));\n+            out.print(\"</\");\n+            out.print(dfURI);\n+            out.println(\">\");\n+        }            \n+            \n+        private void printBlankNode(Node node) {\n+            String label = bNodeMap.get(null, node);\n+            // Comes with leading \"_:\"\n+            label = label.substring(2);\n+            out.print(\"<\");\n+            out.print(dfBNode);\n+            out.print(\">\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e87a8729f7416f183f0cd82819ab2ec0b5ed9d56"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3032, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}