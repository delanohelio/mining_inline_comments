{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjM0ODE0", "number": 705, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMDowOVrODmcikw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMDowOVrODmcikw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQwMDgzOnYy", "diffSide": "RIGHT", "path": "jena-base/src/main/java/org/apache/jena/atlas/io/IO.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMDowOVrOFz3o2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo0NjoyMFrOF0PcTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzMzI3NQ==", "bodyText": "The buffer here appears to start null/uninitialized. Then on the first call to this method it is created, then populated with whatever we have in the stream. But it's never used again I think.\nCouldn't we define it as a local variable in the skipToEnd method, and just leave it to be collected when the method is done, or = null it?", "url": "https://github.com/apache/jena/pull/705#discussion_r389933275", "createdAt": "2020-03-09T20:10:09Z", "author": {"login": "kinow"}, "path": "jena-base/src/main/java/org/apache/jena/atlas/io/IO.java", "diffHunk": "@@ -437,4 +437,22 @@ public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOExce\n         }\n         catch (IOException ex) { IO.exception(ex); return; }\n     }\n+\n+    // Do nothing buffer.  Never read from this, it may be corrupt because it is shared.\n+    private static int SKIP_BUFFER_LEN = 64*1024;\n+    private static byte[] SKIP_BUFFER = null;\n+    /** Skip to the end of the InputStream, discarding input. */\n+    public static void skipToEnd(InputStream input) {\n+        if ( SKIP_BUFFER == null )\n+            // No harm in concurrent assignment.\n+            SKIP_BUFFER = new byte[SKIP_BUFFER_LEN];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a4909e0fde4c90dc5307063f3632ed05cfda60"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxNzQxMQ==", "bodyText": "I think @afs's goal here is to minimise extra memory usage by having a shared buffer that we can just dump the unread data out into potentially by many threads at once.  We're never going to read the data back out so it doesn't matter if many threads are dumping unusable data into it at once.\nIf you had a local variable then you'd have a buffer by thread and a potential DoS vector because a malicious client could send a load of malformed request bodies in order to get Fuseki to run up its memory usage and OOM.", "url": "https://github.com/apache/jena/pull/705#discussion_r390317411", "createdAt": "2020-03-10T13:37:58Z", "author": {"login": "rvesse"}, "path": "jena-base/src/main/java/org/apache/jena/atlas/io/IO.java", "diffHunk": "@@ -437,4 +437,22 @@ public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOExce\n         }\n         catch (IOException ex) { IO.exception(ex); return; }\n     }\n+\n+    // Do nothing buffer.  Never read from this, it may be corrupt because it is shared.\n+    private static int SKIP_BUFFER_LEN = 64*1024;\n+    private static byte[] SKIP_BUFFER = null;\n+    /** Skip to the end of the InputStream, discarding input. */\n+    public static void skipToEnd(InputStream input) {\n+        if ( SKIP_BUFFER == null )\n+            // No harm in concurrent assignment.\n+            SKIP_BUFFER = new byte[SKIP_BUFFER_LEN];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzMzI3NQ=="}, "originalCommit": {"oid": "f9a4909e0fde4c90dc5307063f3632ed05cfda60"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyMzI3OA==", "bodyText": "Yes, as @rvesse says, the buffer is a \"/dev/null\".\nI copied the pattern from CommonsIO:IOUtils.skip with a bigger buffer. This also explains why InputStream.skip can't be used.\nWe could allocate a local and null it. Allocation does initialize each time. May be a bit of over engineering!", "url": "https://github.com/apache/jena/pull/705#discussion_r390323278", "createdAt": "2020-03-10T13:46:20Z", "author": {"login": "afs"}, "path": "jena-base/src/main/java/org/apache/jena/atlas/io/IO.java", "diffHunk": "@@ -437,4 +437,22 @@ public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOExce\n         }\n         catch (IOException ex) { IO.exception(ex); return; }\n     }\n+\n+    // Do nothing buffer.  Never read from this, it may be corrupt because it is shared.\n+    private static int SKIP_BUFFER_LEN = 64*1024;\n+    private static byte[] SKIP_BUFFER = null;\n+    /** Skip to the end of the InputStream, discarding input. */\n+    public static void skipToEnd(InputStream input) {\n+        if ( SKIP_BUFFER == null )\n+            // No harm in concurrent assignment.\n+            SKIP_BUFFER = new byte[SKIP_BUFFER_LEN];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzMzI3NQ=="}, "originalCommit": {"oid": "f9a4909e0fde4c90dc5307063f3632ed05cfda60"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4558, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}