{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMTAzOTE5", "number": 785, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMToyMDoyOVrOEdLLEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMToyMDoyOVrOEdLLEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDI3MjE2OnYy", "diffSide": "RIGHT", "path": "jena-core/src/main/java/org/apache/jena/graph/impl/LiteralLabelImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMToyMDoyOVrOHILsNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTozMjowNVrOHIV3xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0MjE5OQ==", "bodyText": "Consider caching the hash\nprivate int hash;\n\n/*package*/ ByteArray(byte[] bytes) {\n  this.bytes = bytes;\n}\n\n@Override\npublic int hashCode() {\n    if (hash == 0) {\n      hash = Arrays..hashCode(bytes);\n    }\n    return hash;\n}", "url": "https://github.com/apache/jena/pull/785#discussion_r478342199", "createdAt": "2020-08-27T11:20:29Z", "author": {"login": "strangepleasures"}, "path": "jena-core/src/main/java/org/apache/jena/graph/impl/LiteralLabelImpl.java", "diffHunk": "@@ -303,20 +304,59 @@ public String getLexicalForm() {\n \t\treturn lexicalForm;\n \t}\n     \n-    /** \n-     \tAnswer the value used to index this literal\n-        TODO Consider pushing indexing decisions down to the datatype\n-    */\n+    /**\n+     * Answer an object used to index this literal. This object must provide\n+     * {@link Object#equals} and {@link Object#hashCode} based on values, not object\n+     * instance identity.\n+     */\n     @Override\n     public Object getIndexingValue() {\n-        return\n-            isXML() ? this\n-            : !lang.equals( \"\" ) ? getLexicalForm() + \"@\" + lang.toLowerCase(Locale.ROOT)\n-            : wellformed ? getValue()\n-            : getLexicalForm() \n-            ;\n+        if ( isXML() )\n+            return this;\n+        if ( !lang.equals(\"\") )\n+            return getLexicalForm() + \"@\" + lang.toLowerCase(Locale.ROOT);\n+        if ( wellformed ) {\n+            Object value = getValue();\n+            // JENA-1936\n+            // byte[] does not provide hashCode/equals based on the contents of the array.\n+            if ( value instanceof byte[] )\n+                return new ByteArray((byte[])value);\n+            return value;\n+        }\n+        return getLexicalForm();\n     }\n \n+    /**\n+     * {@code byte[]} wrapper that provides {@code hashCode} and {@code equals} based\n+     * on the value of the array.\n+     */\n+    static class ByteArray {\n+        private final byte[] bytes;\n+        /*package*/ ByteArray(byte[] bytes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651ba80b2d6d1318d8e96545cd19862d9b875e48"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUwODk5Nw==", "bodyText": "OK - done. We are assuming the byte[] isn't changing.", "url": "https://github.com/apache/jena/pull/785#discussion_r478508997", "createdAt": "2020-08-27T15:32:05Z", "author": {"login": "afs"}, "path": "jena-core/src/main/java/org/apache/jena/graph/impl/LiteralLabelImpl.java", "diffHunk": "@@ -303,20 +304,59 @@ public String getLexicalForm() {\n \t\treturn lexicalForm;\n \t}\n     \n-    /** \n-     \tAnswer the value used to index this literal\n-        TODO Consider pushing indexing decisions down to the datatype\n-    */\n+    /**\n+     * Answer an object used to index this literal. This object must provide\n+     * {@link Object#equals} and {@link Object#hashCode} based on values, not object\n+     * instance identity.\n+     */\n     @Override\n     public Object getIndexingValue() {\n-        return\n-            isXML() ? this\n-            : !lang.equals( \"\" ) ? getLexicalForm() + \"@\" + lang.toLowerCase(Locale.ROOT)\n-            : wellformed ? getValue()\n-            : getLexicalForm() \n-            ;\n+        if ( isXML() )\n+            return this;\n+        if ( !lang.equals(\"\") )\n+            return getLexicalForm() + \"@\" + lang.toLowerCase(Locale.ROOT);\n+        if ( wellformed ) {\n+            Object value = getValue();\n+            // JENA-1936\n+            // byte[] does not provide hashCode/equals based on the contents of the array.\n+            if ( value instanceof byte[] )\n+                return new ByteArray((byte[])value);\n+            return value;\n+        }\n+        return getLexicalForm();\n     }\n \n+    /**\n+     * {@code byte[]} wrapper that provides {@code hashCode} and {@code equals} based\n+     * on the value of the array.\n+     */\n+    static class ByteArray {\n+        private final byte[] bytes;\n+        /*package*/ ByteArray(byte[] bytes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0MjE5OQ=="}, "originalCommit": {"oid": "651ba80b2d6d1318d8e96545cd19862d9b875e48"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4482, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}