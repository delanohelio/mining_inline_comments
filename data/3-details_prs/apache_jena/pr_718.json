{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NjE1MzQ2", "number": 718, "title": "JENA-1871: Check and limit the interval for ActionSleep.", "bodyText": "Fixes for:\nJENA-1871 -- ActionSleep\nJENA-1872 -- async task pool", "createdAt": "2020-03-27T08:21:48Z", "url": "https://github.com/apache/jena/pull/718", "merged": true, "mergeCommit": {"oid": "40c5a5ed75815628073db2381e8ae43465f4dff9"}, "closed": true, "closedAt": "2020-03-28T13:37:28Z", "author": {"login": "afs"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRskQQgFqTM4MjY1NjcwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSFWrggBqjMxNzQ5NTkyODE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNjU2NzAy", "url": "https://github.com/apache/jena/pull/718#pullrequestreview-382656702", "createdAt": "2020-03-27T08:26:07Z", "commit": {"oid": "54fc02492b8efe5e35a2337f3aa04e2a815f245b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoyNjowN1rOF8nN5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODozODowOVrOF8nk7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMTQxNQ==", "bodyText": "s/9tasks/(tasks", "url": "https://github.com/apache/jena/pull/718#discussion_r399101415", "createdAt": "2020-03-27T08:26:07Z", "author": {"login": "kinow"}, "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/async/AsyncPool.java", "diffHunk": "@@ -34,10 +35,16 @@\n     // Number of finished tasks kept.\n     private static int MAX_FINISHED = 20;\n \n-    // See Executors.newCachedThreadPool and Executors.newFixedThreadPool\n+    // A ThreadPoolExecutor with\n+    // * 0 to nMaxThreads\n+    // * no queue of waiting tasks 9tasks execute or are rejected)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54fc02492b8efe5e35a2337f3aa04e2a815f245b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMjE4MA==", "bodyText": "maxSleepMillis?", "url": "https://github.com/apache/jena/pull/718#discussion_r399102180", "createdAt": "2020-03-27T08:27:39Z", "author": {"login": "kinow"}, "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/ctl/ActionSleep.java", "diffHunk": "@@ -32,6 +32,8 @@\n /** A task that kicks off a asynchronous operation that simply waits and exits.  For testing. */\n public class ActionSleep extends ActionCtl /* Not ActionAsyncTask - that is a container-item based. */\n {\n+    private static int MaxSleepMillis = 20*1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54fc02492b8efe5e35a2337f3aa04e2a815f245b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMzA0Mw==", "bodyText": "Maybe use the same prefix for all errors?\n\"Bad format for 'interval': integer required\"\n\"Bad format for 'interval': negative sleep interval\"\n\"Bad format for 'interval': sleep internal greater than maximum allowed\"\n?", "url": "https://github.com/apache/jena/pull/718#discussion_r399103043", "createdAt": "2020-03-27T08:29:22Z", "author": {"login": "kinow"}, "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/ctl/ActionSleep.java", "diffHunk": "@@ -50,45 +52,57 @@ public void validate(HttpAction action) {}\n \n     @Override\n     public void execute(HttpAction action) {\n-        Runnable task = createRunnable(action);\n+        SleepTask task = createRunnable(action);\n         AsyncTask aTask = Async.execASyncTask(action, AsyncPool.get(), \"sleep\", task);\n+        action.log.info(format(\"[%d] Sleep %d ms.\", action.id, task.sleepMilli));\n         JsonValue v = Async.asJson(aTask);\n-        Async.setLocationHeader(action, aTask);\n         ServletOps.sendJsonReponse(action, v);\n     }\n \n-    protected Runnable createRunnable(HttpAction action) {\n+    protected SleepTask createRunnable(HttpAction action) {\n         String interval = action.request.getParameter(\"interval\");\n         int sleepMilli = 5000;\n-        if ( interval != null )\n+        if ( interval != null ) {\n             try {\n                 sleepMilli = Integer.parseInt(interval);\n             } catch (NumberFormatException ex) {\n-                action.log.error(format(\"[%d] NumberFormatException: %s\", action.id, interval));\n+                ServletOps.errorBadRequest(\"Bad format for 'interval': integer required\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54fc02492b8efe5e35a2337f3aa04e2a815f245b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzMxMQ==", "bodyText": "Out of curiosity, why / 10? Is it to yield control so other things get a chance to run after every 1/10th of the sleep time?", "url": "https://github.com/apache/jena/pull/718#discussion_r399107311", "createdAt": "2020-03-27T08:38:09Z", "author": {"login": "kinow"}, "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/ctl/ActionSleep.java", "diffHunk": "@@ -50,45 +52,57 @@ public void validate(HttpAction action) {}\n \n     @Override\n     public void execute(HttpAction action) {\n-        Runnable task = createRunnable(action);\n+        SleepTask task = createRunnable(action);\n         AsyncTask aTask = Async.execASyncTask(action, AsyncPool.get(), \"sleep\", task);\n+        action.log.info(format(\"[%d] Sleep %d ms.\", action.id, task.sleepMilli));\n         JsonValue v = Async.asJson(aTask);\n-        Async.setLocationHeader(action, aTask);\n         ServletOps.sendJsonReponse(action, v);\n     }\n \n-    protected Runnable createRunnable(HttpAction action) {\n+    protected SleepTask createRunnable(HttpAction action) {\n         String interval = action.request.getParameter(\"interval\");\n         int sleepMilli = 5000;\n-        if ( interval != null )\n+        if ( interval != null ) {\n             try {\n                 sleepMilli = Integer.parseInt(interval);\n             } catch (NumberFormatException ex) {\n-                action.log.error(format(\"[%d] NumberFormatException: %s\", action.id, interval));\n+                ServletOps.errorBadRequest(\"Bad format for 'interval': integer required\");\n+                return null;\n             }\n-        action.log.info(format(\"[%d] Sleep %d ms\", action.id, sleepMilli));\n-        return new SleepTask(action, sleepMilli);\n+        }\n+        if ( sleepMilli < 0 ) {\n+            ServletOps.errorBadRequest(\"Negative sleep interval\");\n+            return null;\n+        }\n+        if ( sleepMilli > MaxSleepMillis ) {\n+            ServletOps.errorBadRequest(\"Sleep internal greater than maximum allowed\");\n+            return null;\n+        }\n+        return new SleepTask(action, sleepMilli, AsyncPool.get());\n     }\n \n     static class SleepTask implements Runnable {\n         private final Logger log;\n         private final long actionId;\n-        private final int sleepMilli;\n+        public  final int sleepMilli;\n+        private final AsyncPool asyncPool;\n \n-        public SleepTask(HttpAction action, int sleepMilli ) {\n+        public SleepTask(HttpAction action, int sleepMilli, AsyncPool asyncPool ) {\n             this.log = action.log;\n             this.actionId = action.id;\n             this.sleepMilli = sleepMilli;\n+            this.asyncPool = asyncPool; \n         }\n \n         @Override\n         public void run() {\n             try {\n-                log.info(format(\"[%d] >> Sleep start\", actionId));\n-                Lib.sleep(sleepMilli);\n-                log.info(format(\"[%d] << Sleep finish\", actionId));\n+                log.info(format(\"[Task %d] >> Sleep start\", actionId));\n+                for ( int i = 0 ; i < 10 ; i++ )\n+                    Lib.sleep(sleepMilli/10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54fc02492b8efe5e35a2337f3aa04e2a815f245b"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74a76786df12643a3f1886596898f9576a597457", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/74a76786df12643a3f1886596898f9576a597457", "committedDate": "2020-03-27T10:10:36Z", "message": "JENA-1871: Check and limit sleep time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91c350233d09c986e809220a55f731696ad68111", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/91c350233d09c986e809220a55f731696ad68111", "committedDate": "2020-03-27T10:10:36Z", "message": "JENA-1872: Allow concurrent async tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5d645aad058daba30f04403c8f98edd3382fefa", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/b5d645aad058daba30f04403c8f98edd3382fefa", "committedDate": "2020-03-27T10:10:36Z", "message": "JENA-1871: Tests of check and limit sleep time"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzI3MDU1", "url": "https://github.com/apache/jena/pull/718#pullrequestreview-382727055", "createdAt": "2020-03-27T10:11:55Z", "commit": {"oid": "581f9f20bacb864cb53c0bf109557f673e7492fb"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDoxMTo1NVrOF8qvVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDoxNjo1NlrOF8q6HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1OTEyNQ==", "bodyText": "Could we make this public then the test case can refer to the constant rather than hard-coding it", "url": "https://github.com/apache/jena/pull/718#discussion_r399159125", "createdAt": "2020-03-27T10:11:55Z", "author": {"login": "rvesse"}, "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/ctl/ActionSleep.java", "diffHunk": "@@ -32,6 +32,8 @@\n /** A task that kicks off a asynchronous operation that simply waits and exits.  For testing. */\n public class ActionSleep extends ActionCtl /* Not ActionAsyncTask - that is a container-item based. */\n {\n+    private static final int MaxSleepMillis = 20*1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "581f9f20bacb864cb53c0bf109557f673e7492fb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1OTQ4MQ==", "bodyText": "Would be nicer if this just referred to the constant in ActionSleep so if we ever change that the test doesn't break", "url": "https://github.com/apache/jena/pull/718#discussion_r399159481", "createdAt": "2020-03-27T10:12:35Z", "author": {"login": "rvesse"}, "path": "jena-fuseki2/jena-fuseki-webapp/src/test/java/org/apache/jena/fuseki/TestAdmin.java", "diffHunk": "@@ -278,7 +278,29 @@\n         deleteDataset(dsTest);\n     }\n \n-    // Sync task testing\n+    @Test public void sleep_1() {\n+        String x = execSleepTask(null, 1);\n+    }\n+\n+    @Test public void sleep_2() {\n+        try {\n+            String x = execSleepTask(null, -1);\n+            fail(\"Sleep call unexpectedly succeed\");\n+        } catch (HttpException ex) {\n+            assertEquals(400, ex.getStatusCode());\n+        }\n+    }\n+\n+    @Test public void sleep_3() {\n+        try {\n+            String x = execSleepTask(null, 20*1000+1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "581f9f20bacb864cb53c0bf109557f673e7492fb"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MDQyOA==", "bodyText": "+1 So provided there is at least one thread free then submitting a task will succeed, if all threads are in-use then it fails", "url": "https://github.com/apache/jena/pull/718#discussion_r399160428", "createdAt": "2020-03-27T10:14:16Z", "author": {"login": "rvesse"}, "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/async/AsyncPool.java", "diffHunk": "@@ -34,10 +35,16 @@\n     // Number of finished tasks kept.\n     private static int MAX_FINISHED = 20;\n \n-    // See Executors.newCachedThreadPool and Executors.newFixedThreadPool\n+    // A ThreadPoolExecutor with\n+    // * 0 to nMaxThreads\n+    // * no queue of waiting tasks (tasks execute or are rejected)\n+    // * dormant threads released after 120s.\n+    //\n+    // SynchronousQueue is a BlockingQueue that has zero length - it accepts and\n+    // delivers an item or rejects immediately, no delay by queueing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "581f9f20bacb864cb53c0bf109557f673e7492fb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MDk2Mw==", "bodyText": "Should this be more specific so users understand why it was rejected e.g. add something like  - already <maxTasks> in progress", "url": "https://github.com/apache/jena/pull/718#discussion_r399160963", "createdAt": "2020-03-27T10:15:15Z", "author": {"login": "rvesse"}, "path": "jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/async/AsyncPool.java", "diffHunk": "@@ -63,9 +70,14 @@ public AsyncTask submit(Runnable task, String displayName, DataService dataServi\n                 return null;\n             };\n             AsyncTask asyncTask = new AsyncTask(c, this, taskId, displayName, dataService, requestId);\n-            /* Future<Object> future = */ executor.submit(asyncTask);\n-            runningTasks.put(taskId, asyncTask);\n-            return asyncTask;\n+            try {\n+                /* Future<Object> future = */ executor.submit(asyncTask);\n+                runningTasks.put(taskId, asyncTask);\n+                return asyncTask;\n+            } catch (RejectedExecutionException ex) {\n+                ServletOps.errorBadRequest(\"Async task request rejected\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "581f9f20bacb864cb53c0bf109557f673e7492fb"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTg4NA==", "bodyText": "Do we want some additional test cases that validate that we can now have multiple simultaneous async tasks?  I see test cases that cover JENA-1871 but not any that cover JENA-1872", "url": "https://github.com/apache/jena/pull/718#discussion_r399161884", "createdAt": "2020-03-27T10:16:56Z", "author": {"login": "rvesse"}, "path": "jena-fuseki2/jena-fuseki-webapp/src/test/java/org/apache/jena/fuseki/TestAdmin.java", "diffHunk": "@@ -278,7 +278,29 @@\n         deleteDataset(dsTest);\n     }\n \n-    // Sync task testing\n+    @Test public void sleep_1() {\n+        String x = execSleepTask(null, 1);\n+    }\n+\n+    @Test public void sleep_2() {\n+        try {\n+            String x = execSleepTask(null, -1);\n+            fail(\"Sleep call unexpectedly succeed\");\n+        } catch (HttpException ex) {\n+            assertEquals(400, ex.getStatusCode());\n+        }\n+    }\n+\n+    @Test public void sleep_3() {\n+        try {\n+            String x = execSleepTask(null, 20*1000+1);\n+            fail(\"Sleep call unexpectedly succeed\");\n+        } catch (HttpException ex) {\n+            assertEquals(400, ex.getStatusCode());\n+        }\n+    }\n+\n+    // Async task testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "581f9f20bacb864cb53c0bf109557f673e7492fb"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "581f9f20bacb864cb53c0bf109557f673e7492fb", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/581f9f20bacb864cb53c0bf109557f673e7492fb", "committedDate": "2020-03-27T10:03:23Z", "message": "JENA-1871: Review feedback"}, "afterCommit": {"oid": "c5665cb4873a909d3b512d164afc4760e90e4880", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/c5665cb4873a909d3b512d164afc4760e90e4880", "committedDate": "2020-03-27T10:10:36Z", "message": "JENA-1871: Review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzc1MTE1", "url": "https://github.com/apache/jena/pull/718#pullrequestreview-382775115", "createdAt": "2020-03-27T11:26:00Z", "commit": {"oid": "c5665cb4873a909d3b512d164afc4760e90e4880"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a041eb876e3bf2bce96456050527d719d5e404", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/43a041eb876e3bf2bce96456050527d719d5e404", "committedDate": "2020-03-27T21:11:02Z", "message": "JENA-1871: Review feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5665cb4873a909d3b512d164afc4760e90e4880", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/c5665cb4873a909d3b512d164afc4760e90e4880", "committedDate": "2020-03-27T10:10:36Z", "message": "JENA-1871: Review feedback"}, "afterCommit": {"oid": "43a041eb876e3bf2bce96456050527d719d5e404", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/43a041eb876e3bf2bce96456050527d719d5e404", "committedDate": "2020-03-27T21:11:02Z", "message": "JENA-1871: Review feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e22a6c803a8777aaf1eb8fd0cdbbcff5c8fae1e1", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/e22a6c803a8777aaf1eb8fd0cdbbcff5c8fae1e1", "committedDate": "2020-03-28T11:56:13Z", "message": "Try to stabilize tests"}, "afterCommit": {"oid": "9abdbdbe1756b2ed23d264bc7e030994c11ab5e7", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/9abdbdbe1756b2ed23d264bc7e030994c11ab5e7", "committedDate": "2020-03-28T12:15:40Z", "message": "Try to stabilize tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b39868306fdb325ee614858a18d1435a0e506af7", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/b39868306fdb325ee614858a18d1435a0e506af7", "committedDate": "2020-03-28T13:30:40Z", "message": "JENA-1782: test for overlapping async tasks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9abdbdbe1756b2ed23d264bc7e030994c11ab5e7", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/9abdbdbe1756b2ed23d264bc7e030994c11ab5e7", "committedDate": "2020-03-28T12:15:40Z", "message": "Try to stabilize tests"}, "afterCommit": {"oid": "b39868306fdb325ee614858a18d1435a0e506af7", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/b39868306fdb325ee614858a18d1435a0e506af7", "committedDate": "2020-03-28T13:30:40Z", "message": "JENA-1782: test for overlapping async tasks"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3008, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}