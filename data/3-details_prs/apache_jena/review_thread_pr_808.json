{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjY1NTUz", "number": 808, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDo0MjoxMlrOEsMQeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzowMTozNVrOEsPdIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzczNjI2OnYy", "diffSide": "RIGHT", "path": "jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/cmds/FusekiMain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDo0MjoxMlrOHfYDWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDo0MjoxMlrOHfYDWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2MTk3Nw==", "bodyText": "Extra spaces", "url": "https://github.com/apache/jena/pull/808#discussion_r502661977", "createdAt": "2020-10-09T20:42:12Z", "author": {"login": "kinow"}, "path": "jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/cmds/FusekiMain.java", "diffHunk": "@@ -82,8 +82,9 @@\n     private static ArgDecl  argConfig       = new ArgDecl(ArgDecl.HasValue, \"config\", \"conf\");\n     private static ArgDecl  argGZip         = new ArgDecl(ArgDecl.HasValue, \"gzip\");\n     private static ArgDecl  argBase         = new ArgDecl(ArgDecl.HasValue, \"base\", \"files\");\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c953a36d4209fd16b859cb974d11f41edbece45"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODI1ODAzOnYy", "diffSide": "RIGHT", "path": "jena-fuseki2/jena-fuseki-main/src/test/java/org/apache/jena/fuseki/main/examples/InitFusekiCustomOperation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjo1OTowMlrOHfcp_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjo1OTowMlrOHfcp_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNzQwNw==", "bodyText": "Missing newline", "url": "https://github.com/apache/jena/pull/808#discussion_r502737407", "createdAt": "2020-10-10T02:59:02Z", "author": {"login": "kinow"}, "path": "jena-fuseki2/jena-fuseki-main/src/test/java/org/apache/jena/fuseki/main/examples/InitFusekiCustomOperation.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.fuseki.main.examples;\n+\n+import java.io.IOException;\n+\n+import org.apache.jena.atlas.lib.DateTimeUtils;\n+import org.apache.jena.fuseki.Fuseki;\n+import org.apache.jena.fuseki.FusekiException;\n+import org.apache.jena.fuseki.build.FusekiExt;\n+import org.apache.jena.fuseki.server.Operation;\n+import org.apache.jena.fuseki.servlets.ActionService;\n+import org.apache.jena.fuseki.servlets.HttpAction;\n+import org.apache.jena.riot.WebContent;\n+import org.apache.jena.sys.JenaSubsystemLifecycle;\n+import org.apache.jena.web.HttpSC;\n+\n+/**\n+* See https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html\n+*\n+* Example: the file has one line which is the full package, class name.\n+* Build: src/main/resources/META-INF/services/org.apache.jena.sys.JenaSubsystemLifecycle\n+* ----\n+* fuseki.examples.Ex_FusekiCustomOperation.InitFusekiCustomOperation\n+* ----\n+*/\n+public class InitFusekiCustomOperation implements JenaSubsystemLifecycle {\n+\n+    public InitFusekiCustomOperation() {}\n+\n+    @Override\n+    public void start() {\n+        // Can use Fuseki server logging.\n+        Fuseki.configLog.info(\"Add custom operation\");\n+        System.err.println(\"**** Fuseki extension ****\");\n+        Operation op = Operation.alloc(\"http://example/extra-service\", \"extra-service\", \"Test\");\n+        FusekiExt.registerOperation(op, new MyCustomService());\n+        FusekiExt.addDefaultEndpoint(op, \"extra\");\n+    }\n+\n+    @Override\n+    public void stop() {}\n+\n+    @Override\n+    public int level() { return 1000; }\n+\n+    // For convenience of the example - include the implementation of the custom operation in the same file.\n+    private static class MyCustomService extends ActionService {\n+\n+        // Choose.\n+        @Override\n+        public void execGet(HttpAction action) {\n+            executeLifecycle(action);\n+        }\n+\n+        @Override\n+        public void validate(HttpAction action) { }\n+\n+        @Override\n+        public void execute(HttpAction action) {\n+            action.response.setStatus(HttpSC.OK_200);\n+            action.response.setContentType(WebContent.contentTypeTextPlain);\n+            try {\n+                action.response.getOutputStream().print(\"** GET ** \"+DateTimeUtils.nowAsXSDDateTimeString());\n+            } catch (IOException e) {\n+                throw new FusekiException(e);\n+            }\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c953a36d4209fd16b859cb974d11f41edbece45"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODI2MDE4OnYy", "diffSide": "RIGHT", "path": "jena-fuseki2/jena-fuseki-main/src/test/java/org/apache/jena/fuseki/main/examples/ExFuseki_4_CustomOperation_External.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzowMTozNVrOHfcrDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzowMTozNVrOHfcrDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNzY3Ng==", "bodyText": "Missing newline", "url": "https://github.com/apache/jena/pull/808#discussion_r502737676", "createdAt": "2020-10-10T03:01:35Z", "author": {"login": "kinow"}, "path": "jena-fuseki2/jena-fuseki-main/src/test/java/org/apache/jena/fuseki/main/examples/ExFuseki_4_CustomOperation_External.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.fuseki.main.examples;\n+\n+import java.util.ServiceLoader;\n+\n+import org.apache.jena.fuseki.main.FusekiServer;\n+import org.apache.jena.fuseki.system.FusekiLogging;\n+import org.apache.jena.riot.web.HttpOp;\n+import org.apache.jena.sparql.core.DatasetGraphFactory;\n+import org.apache.jena.sys.JenaSystem;\n+\n+/**\n+ * Example of adding a new operation to a Fuseki server by registering it with the\n+ * global Fuseki registries.\n+ *\n+ * The custom operation is loaded using {@link ServiceLoader} as shown in\n+ * {@link InitFusekiCustomOperation}.\n+ *\n+ * Doing this, adding the jar to the classpath, including the {@link ServiceLoader}\n+ * setup, will automatically add it to the server.\n+ * <p>\n+ * See <a href=\"https://jena.apache.org/documentation/notes/jena-repack.html\">Repacking Jena jars</a>.\n+ * <p>\n+ * See <a href=\"https://jena.apache.org/documentation/notes/system-initialization.html\">System Initialization</a>\n+ */\n+public class ExFuseki_4_CustomOperation_External {\n+\n+    static {\n+        JenaSystem.init();\n+        FusekiLogging.setLogging();\n+    }\n+\n+    // Example usage.\n+    public static void main(String...args) {\n+\n+        // Imitate Service loader behaviour.\n+        new InitFusekiCustomOperation().start();\n+\n+\n+        // Standard Fuseki startup by commandline.\n+        // /ds/extra will be added because InitFusekiCustomOperation adds it to the default services.\n+\n+        // ThreadLib.async(()->FusekiMainCmd.main(\"--port=3230\", \"--mem\", \"/ds\"));\n+        //Lib.sleep(1000);\n+        // Same as the above command line except it does not block the thread (which is why the ThreadLib.async is added).\n+        FusekiServer.create().port(3230).add(\"/ds\", DatasetGraphFactory.createTxnMem()).build().start();\n+\n+        callOperation(\"extra\");\n+        System.exit(0);\n+    }\n+\n+    private static void callOperation(String name) {\n+        String x = HttpOp.execHttpGetString(\"http://localhost:3230/ds/\"+name);\n+        if ( x == null ) {\n+            System.out.println(\"Not found : <null>\");\n+        } else {\n+            System.out.print(x);\n+            if ( ! x.endsWith(\"\\n\") )\n+                System.out.println();\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c953a36d4209fd16b859cb974d11f41edbece45"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4512, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}