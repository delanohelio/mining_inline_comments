{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0OTkyMDc3", "number": 776, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzowMjoyOVrOERSaKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzoxNDowNlrOERShJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTYyODU3OnYy", "diffSide": "RIGHT", "path": "jena-shacl/src/main/java/org/apache/jena/shacl/compact/writer/WriterRIOTShaclc.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzowMjoyOVrOG16zXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo1OTowNFrOG2FqMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTEzMw==", "bodyText": "Commented test/debug statement?", "url": "https://github.com/apache/jena/pull/776#discussion_r459191133", "createdAt": "2020-07-23T03:02:29Z", "author": {"login": "kinow"}, "path": "jena-shacl/src/main/java/org/apache/jena/shacl/compact/writer/WriterRIOTShaclc.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.shacl.compact.writer;\n+\n+import java.io.OutputStream;\n+import java.io.Writer;\n+\n+import org.apache.jena.atlas.io.IndentedWriter;\n+import org.apache.jena.graph.Graph;\n+import org.apache.jena.riot.Lang;\n+import org.apache.jena.riot.system.PrefixMap;\n+import org.apache.jena.riot.system.RiotLib;\n+import org.apache.jena.riot.writer.WriterGraphRIOTBase;\n+import org.apache.jena.shacl.Shapes;\n+import org.apache.jena.shacl.compact.ShaclcWriter;\n+import org.apache.jena.sparql.util.Context;\n+\n+public class WriterRIOTShaclc extends WriterGraphRIOTBase {\n+\n+    public WriterRIOTShaclc() {}\n+\n+    @Override\n+    public Lang getLang() {\n+        return Lang.SHACLC;\n+    }\n+\n+    @Override\n+    public void write(Writer out, Graph graph, PrefixMap prefixMap, String baseURI, Context context) {\n+        IndentedWriter iOut = RiotLib.create(out) ;\n+        iOut.setAbsoluteIndent(4);\n+        write(iOut, graph, prefixMap, baseURI, context);\n+    }\n+\n+    @Override\n+    public void write(OutputStream out, Graph graph, PrefixMap prefixMap, String baseURI, Context context) {\n+        IndentedWriter iOut = new IndentedWriter(out);\n+        iOut.setUnitIndent(4);\n+        write(iOut, graph, prefixMap, baseURI, context);\n+    }\n+\n+    private void write(IndentedWriter out, Graph graph, PrefixMap prefixMap, String baseURI, Context context) {\n+        Shapes shapes = Shapes.parse(graph);\n+        ShaclcWriter.print(out, shapes);\n+        //out.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69e126c06fd6b9f3f9f24dac8e33365054000d2f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2OTAwOQ==", "bodyText": "Good catch. It should not be there but the routines that create an IndentedWriter should have a \"flush\". IndentedWriter has it's own buffering for chars to bytes. The builtin IndentedWriter.stdout or IndentedWriter.stderr have setFlushOnNewline (c.f. PrintStream autoFlush).", "url": "https://github.com/apache/jena/pull/776#discussion_r459369009", "createdAt": "2020-07-23T10:59:04Z", "author": {"login": "afs"}, "path": "jena-shacl/src/main/java/org/apache/jena/shacl/compact/writer/WriterRIOTShaclc.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.shacl.compact.writer;\n+\n+import java.io.OutputStream;\n+import java.io.Writer;\n+\n+import org.apache.jena.atlas.io.IndentedWriter;\n+import org.apache.jena.graph.Graph;\n+import org.apache.jena.riot.Lang;\n+import org.apache.jena.riot.system.PrefixMap;\n+import org.apache.jena.riot.system.RiotLib;\n+import org.apache.jena.riot.writer.WriterGraphRIOTBase;\n+import org.apache.jena.shacl.Shapes;\n+import org.apache.jena.shacl.compact.ShaclcWriter;\n+import org.apache.jena.sparql.util.Context;\n+\n+public class WriterRIOTShaclc extends WriterGraphRIOTBase {\n+\n+    public WriterRIOTShaclc() {}\n+\n+    @Override\n+    public Lang getLang() {\n+        return Lang.SHACLC;\n+    }\n+\n+    @Override\n+    public void write(Writer out, Graph graph, PrefixMap prefixMap, String baseURI, Context context) {\n+        IndentedWriter iOut = RiotLib.create(out) ;\n+        iOut.setAbsoluteIndent(4);\n+        write(iOut, graph, prefixMap, baseURI, context);\n+    }\n+\n+    @Override\n+    public void write(OutputStream out, Graph graph, PrefixMap prefixMap, String baseURI, Context context) {\n+        IndentedWriter iOut = new IndentedWriter(out);\n+        iOut.setUnitIndent(4);\n+        write(iOut, graph, prefixMap, baseURI, context);\n+    }\n+\n+    private void write(IndentedWriter out, Graph graph, PrefixMap prefixMap, String baseURI, Context context) {\n+        Shapes shapes = Shapes.parse(graph);\n+        ShaclcWriter.print(out, shapes);\n+        //out.flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MTEzMw=="}, "originalCommit": {"oid": "69e126c06fd6b9f3f9f24dac8e33365054000d2f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTY0NjQ0OnYy", "diffSide": "RIGHT", "path": "jena-shacl/src/main/java/org/apache/jena/shacl/Shapes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzoxNDowNlrOG1687Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo1OTowMlrOG2FqHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MzU4MQ==", "bodyText": "s/dupicates/duplicates", "url": "https://github.com/apache/jena/pull/776#discussion_r459193581", "createdAt": "2020-07-23T03:14:06Z", "author": {"login": "kinow"}, "path": "jena-shacl/src/main/java/org/apache/jena/shacl/Shapes.java", "diffHunk": "@@ -189,7 +196,7 @@ public int numRootShapes() {\n \n     /** Iterator over the shapes with targets and with explicit type NodeShape or PropertyShape. */\n     public Iterator<Shape> iteratorAll() {\n+        // rootsShapes and declShaes are disjoint so no dupicates in the iterator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69e126c06fd6b9f3f9f24dac8e33365054000d2f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2ODk4OA==", "bodyText": "Done", "url": "https://github.com/apache/jena/pull/776#discussion_r459368988", "createdAt": "2020-07-23T10:59:02Z", "author": {"login": "afs"}, "path": "jena-shacl/src/main/java/org/apache/jena/shacl/Shapes.java", "diffHunk": "@@ -189,7 +196,7 @@ public int numRootShapes() {\n \n     /** Iterator over the shapes with targets and with explicit type NodeShape or PropertyShape. */\n     public Iterator<Shape> iteratorAll() {\n+        // rootsShapes and declShaes are disjoint so no dupicates in the iterator.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MzU4MQ=="}, "originalCommit": {"oid": "69e126c06fd6b9f3f9f24dac8e33365054000d2f"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4604, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}