{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0Mjk0MDk0", "number": 673, "title": "JENA-1812: Switch to Murmur3 for blank node allocation", "bodyText": "Use Murmur3-128bit for blank node label allocation. This code is called when a blank node appears in RDF syntax.\nThis is an alternative to #667 as discussed at JENA-1812 (Security software is being to flag up the use of MD5)\nMurmur3-128 retains the length of blank node labels at 32 hex digits while not triggering security scans.\nThe murmurs implementation is the one from Apache Commons Codec. The differences between it and the Guava implementation are, for this usage, slight. For reference, the Guava version is includes in the source but the compiler does not generate any bytecode.", "createdAt": "2020-01-17T19:50:35Z", "url": "https://github.com/apache/jena/pull/673", "merged": true, "mergeCommit": {"oid": "df363ef374f0b5bfa13e35101f49900120f49cf5"}, "closed": true, "closedAt": "2020-01-22T14:03:32Z", "author": {"login": "afs"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7T_fEAH2gAyMzY0Mjk0MDk0OjJlZWE1ZjU3NGZhN2ZmMTY0NTE3OTBkOTYyYmZlZmMwOGNmMzEzNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8Iv_vgFqTM0NTE1NjM5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2eea5f574fa7ff16451790d962bfefc08cf31347", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/2eea5f574fa7ff16451790d962bfefc08cf31347", "committedDate": "2020-01-17T19:34:00Z", "message": "JENA-1812: Switch to Murmur3 for blank node allocation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODI1MDg5", "url": "https://github.com/apache/jena/pull/673#pullrequestreview-344825089", "createdAt": "2020-01-17T20:31:07Z", "commit": {"oid": "2eea5f574fa7ff16451790d962bfefc08cf31347"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMDozMTowN1rOFfEfrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMDozMTowN1rOFfEfrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEyMzgyMw==", "bodyText": "The original commons-codec MurmurHash3.hash128 (like the Guava code) has a sign extension issue with the seed value.  Since the seed is 104729 (for some reason) the hashes will work correctly.  However a fair amount of work has gone into commons-codec recently and v 1.14 fixes the issue.  Because of the change several of the MurmurHash3.hash128(x) methods have been deprecated.  It is probably cleaner to call MurmurHash3.hash128x86( input, 0, input.length, MurmurHash3.DEFAULT_SEED) or  MurmurHash3.hash128x86( input, 0, input.length, 104729L)", "url": "https://github.com/apache/jena/pull/673#discussion_r368123823", "createdAt": "2020-01-17T20:31:07Z", "author": {"login": "Claudenw"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/lang/BlankNodeAllocatorHash.java", "diffHunk": "@@ -113,20 +104,67 @@ public Node call() {\n     public Node create() {\n         counter++;\n         // Make illegal string bytes so can't clash with alloc(String).\n-        // It is different because it has zeros in it.\n+        // It is different because it has a zero (illegal in a Java string) in it.\n         counterBytes[0] = 0;\n         counterBytes[1] = 0;\n         Bytes.setLong(counter, counterBytes, 2);\n         return alloc(counterBytes);\n     }\n \n+    /** Given the per-run seed and label bytes, make a blank node. */\n     private Node alloc(byte[] labelBytes) {\n-        // UUID.nameUUIDFromBytes(seedBytes+labelBytes) uses MD5 but creates the digester\n-        // each time. It also stamps in the UUID version/variant bits.\n-        mDigest.update(seedBytes);\n-        mDigest.update(labelBytes);\n-        byte[] bytes = mDigest.digest(); // resets\n-        String hexString = Bytes.asHexLC(bytes);\n+        byte[] input = new byte[seedBytes.length+labelBytes.length];\n+        System.arraycopy(seedBytes, 0, input, 0, seedBytes.length);\n+        System.arraycopy(labelBytes, 0, input, seedBytes.length, labelBytes.length);\n+        \n+        // Apache Common Codec or Guava. \n+        // The 2 versions of the code below should produce the same hex strings.\n+        //\n+        // The main difference from our perspective is that the Guava version\n+        // returns a byte[]. Hashes are not \"large numbers\" - they are bit patterns --\n+        // but it does create and use internal Java objects.\n+        //\n+        // We need to be careful about byte order. The long[] returned by\n+        // MurmurHash3 (Apache Commons) needs to be stringified as \"low bytes first\"\n+        // which is the reverse of %d-formatting for a long which is \n+        // \"high byte first\" (in a left-to-right writing system).\n+        //\n+        // For byte output compatibility with byte[] from Guava,\n+        // need to reverse the bytes of the longs so that it prints \"low to high\"\n+        // Java works in big-endian -- high bytes first.\n+\n+        String hexString;\n+        if ( true ) {\n+            long[] x = MurmurHash3.hash128(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eea5f574fa7ff16451790d962bfefc08cf31347"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad49bf4e9a9688f3952c47698cfb19dd6bd16fb5", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/ad49bf4e9a9688f3952c47698cfb19dd6bd16fb5", "committedDate": "2020-01-17T21:59:37Z", "message": "JENA-1812: Commons Codec 1.14"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTM2NzI0", "url": "https://github.com/apache/jena/pull/673#pullrequestreview-344936724", "createdAt": "2020-01-18T10:16:19Z", "commit": {"oid": "ad49bf4e9a9688f3952c47698cfb19dd6bd16fb5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MTU2Mzkw", "url": "https://github.com/apache/jena/pull/673#pullrequestreview-345156390", "createdAt": "2020-01-20T09:00:15Z", "commit": {"oid": "ad49bf4e9a9688f3952c47698cfb19dd6bd16fb5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTowMDoxNlrOFfXLqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTowMDoxNlrOFfXLqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQyOTk5NA==", "bodyText": "I assume this is needed because otherwise the version and variant segments of the UUID would always be the same leading to some predictability in the hashing?", "url": "https://github.com/apache/jena/pull/673#discussion_r368429994", "createdAt": "2020-01-20T09:00:16Z", "author": {"login": "rvesse"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/lang/BlankNodeAllocatorHash.java", "diffHunk": "@@ -90,6 +80,12 @@ protected UUID freshSeed() {\n     @Override\n     public void reset() {\n         UUID seed = this.freshSeed();\n+        long mostSigBits = seed.getMostSignificantBits();\n+        long leastSigBits = seed.getLeastSignificantBits();\n+        // Stamp on version and variant. Makes it an illegal UUID (unless all the bits are zero!)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad49bf4e9a9688f3952c47698cfb19dd6bd16fb5"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3065, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}