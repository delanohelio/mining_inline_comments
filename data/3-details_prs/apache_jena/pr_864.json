{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxMDI5NDUx", "number": 864, "title": "JENA-1994: Look in datatype URI", "bodyText": "", "createdAt": "2020-11-14T16:38:09Z", "url": "https://github.com/apache/jena/pull/864", "merged": true, "mergeCommit": {"oid": "b85e31d0526584d6f64662670dce8379c40a28d8"}, "closed": true, "closedAt": "2020-11-15T10:16:19Z", "author": {"login": "afs"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdceeWYgH2gAyNTIxMDI5NDUxOmEyZTk2NzI0ZWYxNTA5Y2UyNzM4NWNjMzExNTlmY2NiNjg3YjhiZGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcmSC2gFqTUzMDc2MDE0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a2e96724ef1509ce27385cc31159fccb687b8bde", "author": {"user": {"login": "afs", "name": "Andy Seaborne"}}, "url": "https://github.com/apache/jena/commit/a2e96724ef1509ce27385cc31159fccb687b8bde", "committedDate": "2020-11-14T16:37:25Z", "message": "JENA-1994: Look in datatype URI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNzYwMTQx", "url": "https://github.com/apache/jena/pull/864#pullrequestreview-530760141", "createdAt": "2020-11-15T01:40:58Z", "commit": {"oid": "a2e96724ef1509ce27385cc31159fccb687b8bde"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwMTo0MDo1OFrOHzVXzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwMTo0MDo1OFrOHzVXzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzU4OTU4MA==", "bodyText": "Tests confirming the prefixes are available after the calc methods are called \ud83d\udc4d", "url": "https://github.com/apache/jena/pull/864#discussion_r523589580", "createdAt": "2020-11-15T01:40:58Z", "author": {"login": "kinow"}, "path": "jena-core/src/test/java/org/apache/jena/util/TestPrefixMappingUtils.java", "diffHunk": "@@ -141,14 +146,125 @@ static int size(PrefixMapping pmap) {\n         Graph graph = create(data) ;\n         PrefixMapping pmap = PrefixMappingUtils.calcInUsePrefixMapping(graph) ;\n         PrefixMapping pmapExpected = new PrefixMappingImpl() ;\n-     \tpmapExpected.setNsPrefix(\"\", \"http://example/\") ;\n-\t\tpmapExpected.setNsPrefix(\"ex\", \"http://example/ex#\") ;\n-\t\tpmapExpected.setNsPrefix(\"indirect\", \"urn:foo:\") ;\n-\t\tpmapExpected.setNsPrefix(\"ns\", \"http://host/ns\") ;\n-\t\tpmapExpected.setNsPrefix(\"ns1\", \"http://host/ns1\") ;\n-\t\tpmapExpected.setNsPrefix(\"indirectx\", \"urn:x:\") ;\n-\t\t//print(\"Expected:\", pmapExpected) ;\n-\t\t//print(\"Got:\", pmap) ;\n+        pmapExpected.setNsPrefix(\"\", \"http://example/\") ;\n+        pmapExpected.setNsPrefix(\"ex\", \"http://example/ex#\") ;\n+        pmapExpected.setNsPrefix(\"indirect\", \"urn:foo:\") ;\n+        pmapExpected.setNsPrefix(\"ns\", \"http://host/ns\") ;\n+        pmapExpected.setNsPrefix(\"ns1\", \"http://host/ns1\") ;\n+        pmapExpected.setNsPrefix(\"indirectx\", \"urn:x:\") ;\n+        //print(\"Expected:\", pmapExpected) ;\n+        //print(\"Got:\", pmap) ;\n+        Assert.assertTrue(sameMapping(pmapExpected, pmap)) ;\n+        Assert.assertTrue(pmap.getNsPrefixURI(\"notinuse\") == null) ;\n+    }\n+\n+    @Test public void prefixesTTL1() {\n+        // All prefixes used.\n+        // Note: XSD as well.\n+        String data1 = StrUtils.strjoinNL\n+            (\"@prefix : <http://example/> .\" ,\n+             \"@prefix ex: <http://example/ex#> .\" ,\n+             \"@prefix xsd: <\"+XSD.getURI()+\"> .\",\n+             \"\" ,\n+             \":s1 :p :x1 .\" ,\n+             \":s1 ex:p :x1 .\",\n+             \":s1 ex:p 1 .\"\n+             ) ;\n+        Graph graph1 = create(data1) ;\n+        PrefixMapping pmap = PrefixMappingUtils.calcInUsePrefixMappingTTL(graph1) ;\n+        PrefixMapping pmapExpected = graph1.getPrefixMapping() ;\n+        Assert.assertEquals(3, size(pmap)) ;\n+        Assert.assertEquals(pmapExpected, pmap) ; \n+    }\n+    \n+    @Test public void prefixesTTL2() {\n+        // Some prefixes used\n+        String data2 = StrUtils.strjoinNL\n+            (\"@prefix : <http://example/> .\" ,\n+             \"@prefix ex: <http://example/ex#> .\" ,\n+             \"@prefix notinuse: <http://example/whatever/> .\" ,\n+             \"\" ,\n+             \":s1 :p :x1 .\" ,\n+             \":s1 ex:p :x1 .\"\n+             ) ;\n+        \n+        Graph graph1 = create(data2) ;\n+        PrefixMapping pmap = PrefixMappingUtils.calcInUsePrefixMappingTTL(graph1) ;\n+        PrefixMapping pmapExpected = new PrefixMappingImpl() ;\n+        pmapExpected.setNsPrefix(\"\", \"http://example/\") ;\n+        pmapExpected.setNsPrefix(\"ex\", \"http://example/ex#\") ;\n+        Assert.assertEquals(2, size(pmap)) ;\n+        Assert.assertTrue(sameMapping(pmapExpected, pmap)) ;\n+        Assert.assertTrue(pmap.getNsPrefixURI(\"notinuse\") == null) ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2e96724ef1509ce27385cc31159fccb687b8bde"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2966, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}