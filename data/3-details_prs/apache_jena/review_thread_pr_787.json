{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MDQ1NTk3", "number": 787, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTo1Njo0MFrOEkBTWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTo1ODowMlrOEkBVLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjA1NTI5OnYy", "diffSide": "RIGHT", "path": "jena-arq/pom.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTo1Njo0MFrOHStWcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDo0Nzo1NVrOHWWOOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3OTQ0Mg==", "bodyText": "I think this should be <optional>true</optional>.\nMy understanding is that the the effect is much the same. It is about the meaning indicated. \"provided\" is for environment capabilities used by this project (e.g running in a application container), \"optional\" is indicating downstream that a capability can be added.\ne.g.\nhttp://maven.40175.n5.nabble.com/lt-scope-gt-provided-lt-scope-gt-vs-lt-optional-gt-true-lt-optional-gt-td2852244.html\nDoes anyone have deeper experience?", "url": "https://github.com/apache/jena/pull/787#discussion_r489379442", "createdAt": "2020-09-16T11:56:40Z", "author": {"login": "afs"}, "path": "jena-arq/pom.xml", "diffHunk": "@@ -111,6 +111,18 @@\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.graalvm.js</groupId>\n+      <artifactId>js</artifactId>\n+      <scope>provided</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55a3354a5deaf40761f5e93efc673d5dd0b4f8dd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMzkyMg==", "bodyText": "Actually, ARQ can be compiled on JDK < 15 without any Graal dependencies, and even on JDK 15 they can be mere test dependencies. Maybe it would rather make sense to include them as compile dependencies in Fuseki? @afs, what do you think?", "url": "https://github.com/apache/jena/pull/787#discussion_r492513922", "createdAt": "2020-09-22T07:04:19Z", "author": {"login": "strangepleasures"}, "path": "jena-arq/pom.xml", "diffHunk": "@@ -111,6 +111,18 @@\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.graalvm.js</groupId>\n+      <artifactId>js</artifactId>\n+      <scope>provided</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3OTQ0Mg=="}, "originalCommit": {"oid": "55a3354a5deaf40761f5e93efc673d5dd0b4f8dd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNzExMA==", "bodyText": "Making them <scope>test</scope> makes sense. At the moment, I think have the tests need this to test an optional feature is acceptable.\nIncluding in Fuseki is another matter. scope=compile would mean the Jena project is shipping the GraalVM engine which itself is GPL2+classpath exception and not acceptable.\nhttp://www.apache.org/legal/resolved.html#optional\nWhile we can't ship it ourselves, we should provide instructions and scripts on how to add GraalVM.\nThere is a separate matter that GraalVM is quite large.\nPMC email:\nhttps://lists.apache.org/thread.html/raf8f65ee6451181560d36b98c6332677a751f86abf4abda2230d3240%40%3Cdev.jena.apache.org%3E", "url": "https://github.com/apache/jena/pull/787#discussion_r493027110", "createdAt": "2020-09-22T20:53:38Z", "author": {"login": "afs"}, "path": "jena-arq/pom.xml", "diffHunk": "@@ -111,6 +111,18 @@\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.graalvm.js</groupId>\n+      <artifactId>js</artifactId>\n+      <scope>provided</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3OTQ0Mg=="}, "originalCommit": {"oid": "55a3354a5deaf40761f5e93efc673d5dd0b4f8dd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5NDgxMA==", "bodyText": "I created another PR for that: #801", "url": "https://github.com/apache/jena/pull/787#discussion_r493194810", "createdAt": "2020-09-23T04:47:55Z", "author": {"login": "strangepleasures"}, "path": "jena-arq/pom.xml", "diffHunk": "@@ -111,6 +111,18 @@\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.graalvm.js</groupId>\n+      <artifactId>js</artifactId>\n+      <scope>provided</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3OTQ0Mg=="}, "originalCommit": {"oid": "55a3354a5deaf40761f5e93efc673d5dd0b4f8dd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjA1OTk4OnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/sparql/function/js/JSEngine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTo1ODowMlrOHStZRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNToyNTozN1rOHS2TYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4MDE2NA==", "bodyText": "I would remove the \"else\" branch.\nIf on Java 8, this warning comes out whereas before there wasn't one.\nThe JDK prints warns its warning anyway on Java11 and Java14:\n\n\"Warning: Nashorn engine is planned to be removed from a future JDK release\"\n\nso we get two.", "url": "https://github.com/apache/jena/pull/787#discussion_r489380164", "createdAt": "2020-09-16T11:58:02Z", "author": {"login": "afs"}, "path": "jena-arq/src/main/java/org/apache/jena/sparql/function/js/JSEngine.java", "diffHunk": "@@ -55,24 +50,31 @@ public static JSEngine createFromFile(String functionLibFile) {\n         return new JSEngine(null, functionLibFile);\n     }\n     \n-    /*package*/ JSEngine(String functions, String functionLibFile) { \n-        this.functions = functions;\n-        this.functionLibFile = functionLibFile;\n+    /*package*/ JSEngine(String functions, String functionLibFile) {\n         invoc = build(functions, functionLibFile);\n     }\n \n     private static Invocable build(String functions, String functionLibFile) {\n         if ( functions == null && functionLibFile == null )\n-            throw new ARQException(\"Both script string and script filename are null\"); \n+            throw new ARQException(\"Both script string and script filename are null\");\n \n         ScriptEngineManager manager = new ScriptEngineManager();\n-        ScriptEngine scriptEngine = manager.getEngineByName(\"nashorn\");\n-        \n+        ScriptEngine scriptEngine = manager.getEngineByName(\"javascript\");\n+        if (scriptEngine == null) {\n+            throw new ARQException(\"Could not load JavaScript script engine. \" +\n+                    \"Make sure that org.graalvm.js:js and org.graalvm.js:js-scriptengine are added to the class path\");\n+        }\n+\n+        if (scriptEngine.getFactory().getEngineName().equals(\"Graal.js\")) {\n+            scriptEngine.getContext().setAttribute(\"polyglot.js.nashorn-compat\", true, ScriptContext.ENGINE_SCOPE);\n+        } else if (scriptEngine.getFactory().getNames().contains(\"Nashorn\")) {\n+            Log.warn(JSEngine.class, \"Nashorn will be permanently removed in JDK 15. Consider switching to Graal VM.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55a3354a5deaf40761f5e93efc673d5dd0b4f8dd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUyNjExMg==", "bodyText": "makes sense", "url": "https://github.com/apache/jena/pull/787#discussion_r489526112", "createdAt": "2020-09-16T15:25:37Z", "author": {"login": "strangepleasures"}, "path": "jena-arq/src/main/java/org/apache/jena/sparql/function/js/JSEngine.java", "diffHunk": "@@ -55,24 +50,31 @@ public static JSEngine createFromFile(String functionLibFile) {\n         return new JSEngine(null, functionLibFile);\n     }\n     \n-    /*package*/ JSEngine(String functions, String functionLibFile) { \n-        this.functions = functions;\n-        this.functionLibFile = functionLibFile;\n+    /*package*/ JSEngine(String functions, String functionLibFile) {\n         invoc = build(functions, functionLibFile);\n     }\n \n     private static Invocable build(String functions, String functionLibFile) {\n         if ( functions == null && functionLibFile == null )\n-            throw new ARQException(\"Both script string and script filename are null\"); \n+            throw new ARQException(\"Both script string and script filename are null\");\n \n         ScriptEngineManager manager = new ScriptEngineManager();\n-        ScriptEngine scriptEngine = manager.getEngineByName(\"nashorn\");\n-        \n+        ScriptEngine scriptEngine = manager.getEngineByName(\"javascript\");\n+        if (scriptEngine == null) {\n+            throw new ARQException(\"Could not load JavaScript script engine. \" +\n+                    \"Make sure that org.graalvm.js:js and org.graalvm.js:js-scriptengine are added to the class path\");\n+        }\n+\n+        if (scriptEngine.getFactory().getEngineName().equals(\"Graal.js\")) {\n+            scriptEngine.getContext().setAttribute(\"polyglot.js.nashorn-compat\", true, ScriptContext.ENGINE_SCOPE);\n+        } else if (scriptEngine.getFactory().getNames().contains(\"Nashorn\")) {\n+            Log.warn(JSEngine.class, \"Nashorn will be permanently removed in JDK 15. Consider switching to Graal VM.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4MDE2NA=="}, "originalCommit": {"oid": "55a3354a5deaf40761f5e93efc673d5dd0b4f8dd"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4488, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}