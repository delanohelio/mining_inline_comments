{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTE2MTQx", "number": 880, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODo1ODo1MFrOE_g-8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDowOToxMlrOFAcaEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDM2MTQ2OnYy", "diffSide": "RIGHT", "path": "jena-integration-tests/src/test/java/org/apache/jena/test/integration/TestDatasetPrefixes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODo1ODo1MFrOH9QlJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODo1ODo1MFrOH9QlJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5NjgzOQ==", "bodyText": "This is a really nice looking new test suite \ud83d\udc4d", "url": "https://github.com/apache/jena/pull/880#discussion_r533996839", "createdAt": "2020-12-02T08:58:50Z", "author": {"login": "rvesse"}, "path": "jena-integration-tests/src/test/java/org/apache/jena/test/integration/TestDatasetPrefixes.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.test.integration;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.apache.jena.atlas.lib.Creator;\n+import org.apache.jena.query.TxnType;\n+import org.apache.jena.riot.system.PrefixMap;\n+import org.apache.jena.riot.system.Prefixes;\n+import org.apache.jena.shared.JenaException;\n+import org.apache.jena.sparql.JenaTransactionException;\n+import org.apache.jena.sparql.core.DatasetGraph;\n+import org.apache.jena.sparql.core.DatasetGraphFactory;\n+import org.apache.jena.sparql.core.DatasetGraphMap;\n+import org.apache.jena.sparql.core.DatasetGraphMapLink;\n+import org.apache.jena.sparql.graph.GraphFactory;\n+import org.apache.jena.system.Txn;\n+import org.apache.jena.tdb.TDBFactory;\n+import org.apache.jena.tdb.transaction.TDBTransactionException;\n+import org.apache.jena.tdb2.DatabaseMgr;\n+import org.junit.Assume;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.MethodSorters;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+// Tests go simple -> complex\n+// Does not matter ass to their execution, it does help pinpoint what has broken.\n+/**\n+ * Test of dataset prefixes.\n+ * See {@code AbstractTestPrefixMap} for tests of prefix maps in general.\n+ */\n+\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+@RunWith(Parameterized.class)\n+public class TestDatasetPrefixes {\n+\n+    @Parameters(name = \"{index}: {0}\")\n+    public static Collection<Object[]> data(){\n+        Creator<DatasetGraph> c1 = ()->DatasetGraphFactory.createTxnMem();\n+        Creator<DatasetGraph> c2 = ()->TDBFactory.createDatasetGraph();\n+        Creator<DatasetGraph> c3 = ()->DatabaseMgr.createDatasetGraph();\n+        Creator<DatasetGraph> c4 = ()->new DatasetGraphMap();     //DatasetGraphFactory.create();\n+        Creator<DatasetGraph> c5 = ()->new DatasetGraphMapLink(GraphFactory.createDefaultGraph()); //DatasetGraphFactory.createGeneral();\n+\n+        Object[] x1 = { \"TIM\",  c1 , false, true, true };\n+        Object[] x2 = { \"TDB1\", c2 , true, true, true };\n+        Object[] x3 = { \"TDB2\", c3 , true, true, true };\n+        Object[] x4 = { \"Map\",  c4 , false, false, false };\n+        Object[] x5 = { \"MapLink\", c5 , false, false, false };\n+        return Arrays.asList(x1, x2, x3, x4,x5);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31475bbb21deb31f0dc286e1e3a3bd061a5ab864"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDA1NjkwOnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/riot/system/PrefixLib.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTo1OToyNlrOH-vELg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTo1OToyNlrOH-vELg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU0NDg3OA==", "bodyText": "s/th/the", "url": "https://github.com/apache/jena/pull/880#discussion_r535544878", "createdAt": "2020-12-03T19:59:26Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/system/PrefixLib.java", "diffHunk": "@@ -80,35 +72,52 @@ public static String abbreviate(PrefixMapI pmap, String uriStr) {\n      * Abbreviate a uriStr, return the prefix and local parts.\n      * This does not guarantee that the result is suitable for all RDF syntaxes.\n      */\n-    public static Pair<String, String> abbrev(PrefixMapI prefixes, String uriStr) {\n-        for ( PrefixEntry e : prefixes ) {\n-            String uriForPrefix = e.getUri();\n-            if ( uriStr.startsWith(uriForPrefix) )\n-                return Pair.create(e.getPrefix(), uriStr.substring(uriForPrefix.length()));\n+    public static Pair<String, String> abbrev(PrefixMap prefixes, String uriStr) {\n+        return abbrev(prefixes.getMapping(), uriStr, true);\n+    }\n+\n+    /**\n+     * Abbreviate a uriStr, return the prefix and local parts, using a {@code Map} of\n+     * prefix string to URI string. This does not guarantee that the result is\n+     * suitable for all RDF syntaxes. In addition, perform a fast check for legal\n+     * turtle local parts using {@link #isSafeLocalPart}. This covers the majority of\n+     * real work cases and allows th code to find a probably-legal abbrev pair if an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31475bbb21deb31f0dc286e1e3a3bd061a5ab864"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDA1NzczOnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/riot/system/PrefixLib.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTo1OTo0MFrOH-vEsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTo1OTo0MFrOH-vEsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU0NTAxMA==", "bodyText": "s/if/is", "url": "https://github.com/apache/jena/pull/880#discussion_r535545010", "createdAt": "2020-12-03T19:59:40Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/system/PrefixLib.java", "diffHunk": "@@ -80,35 +72,52 @@ public static String abbreviate(PrefixMapI pmap, String uriStr) {\n      * Abbreviate a uriStr, return the prefix and local parts.\n      * This does not guarantee that the result is suitable for all RDF syntaxes.\n      */\n-    public static Pair<String, String> abbrev(PrefixMapI prefixes, String uriStr) {\n-        for ( PrefixEntry e : prefixes ) {\n-            String uriForPrefix = e.getUri();\n-            if ( uriStr.startsWith(uriForPrefix) )\n-                return Pair.create(e.getPrefix(), uriStr.substring(uriForPrefix.length()));\n+    public static Pair<String, String> abbrev(PrefixMap prefixes, String uriStr) {\n+        return abbrev(prefixes.getMapping(), uriStr, true);\n+    }\n+\n+    /**\n+     * Abbreviate a uriStr, return the prefix and local parts, using a {@code Map} of\n+     * prefix string to URI string. This does not guarantee that the result is\n+     * suitable for all RDF syntaxes. In addition, perform a fast check for legal\n+     * turtle local parts using {@link #isSafeLocalPart}. This covers the majority of\n+     * real work cases and allows th code to find a probably-legal abbrev pair if an\n+     * illegal one if found. (In practice, illegal local names arise only when one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31475bbb21deb31f0dc286e1e3a3bd061a5ab864"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDA1OTEzOnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/riot/system/PrefixMap.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDowMDowMlrOH-vFjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDowMDowMlrOH-vFjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU0NTIzMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/jena/pull/880#discussion_r535545231", "createdAt": "2020-12-03T20:00:02Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/system/PrefixMap.java", "diffHunk": "@@ -35,6 +36,24 @@\n  * </p>\n  */\n public interface PrefixMap {\n+    /**\n+     * Return the URI for the prefix, or null if there is no entry for this prefix.\n+     */\n+    public String get(String prefix);\n+\n+    // Is this a good idea? Leave out until it is justified.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31475bbb21deb31f0dc286e1e3a3bd061a5ab864"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDA5NzQ2OnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/riot/system/PrefixMapNull.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDowOToxMlrOH-vcdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDowOToxMlrOH-vcdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1MTA5NA==", "bodyText": "Base?", "url": "https://github.com/apache/jena/pull/880#discussion_r535551094", "createdAt": "2020-12-03T20:09:12Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/system/PrefixMapNull.java", "diffHunk": "@@ -18,18 +18,20 @@\n \n package org.apache.jena.riot.system ;\n \n+import static org.apache.jena.atlas.lib.Lib.unsupportedMethod;\n+\n import java.util.Collections ;\n import java.util.Map ;\n import java.util.function.BiConsumer ;\n+import java.util.stream.Stream;\n \n import org.apache.jena.atlas.lib.Pair ;\n import org.apache.jena.shared.PrefixMapping ;\n \n-/** Always empty prefix map */\n-public class PrefixMapNull implements PrefixMap {\n-    public static PrefixMap empty = new PrefixMapNull() ;\n+/** Baes of always empty prefix maps {@link PrefixMapSink} and {@link PrefixMapZero}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31475bbb21deb31f0dc286e1e3a3bd061a5ab864"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4539, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}