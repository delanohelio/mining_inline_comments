{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MzU3Nzk3", "number": 886, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDoxMjoxNFrOFFU5Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDoxNjowOFrOFFU9Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTI5NTM0OnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/riot/RDFParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDoxMjoxNFrOIFyzqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDoxMjoxNFrOIFyzqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk0NjIxOA==", "bodyText": "Format/delete?", "url": "https://github.com/apache/jena/pull/886#discussion_r542946218", "createdAt": "2020-12-15T00:12:14Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/RDFParser.java", "diffHunk": "@@ -334,8 +334,11 @@ private void parseNotUri(StreamRDF destination) {\n             throw new RiotException(\"Failed to determine the RDF syntax (.lang or .base required)\");\n \n         ReaderRIOT readerRiot = createReader(ct);\n-        if ( readerRiot == null )\n-            throw new RiotException(\"No parser registered for content type: \" + ct.getContentTypeStr());\n+        if ( readerRiot == null ) {\n+//            readerRiot = createReader(lang);\n+//            if ( readerRiot == null )\n+                throw new RiotException(\"No parser registered for content type: \" + ct.getContentTypeStr());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c0356bbb54030992f7d74ea2e47d3842c2cf7a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTMwMzAxOnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDoxNToxOFrOIFy4Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDoxNToxOFrOIFy4Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk0NzMzMA==", "bodyText": "s/JaavCC/JavaCC", "url": "https://github.com/apache/jena/pull/886#discussion_r542947330", "createdAt": "2020-12-15T00:15:18Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.riot.lang.extra;\n+\n+import org.apache.jena.atlas.AtlasException;\n+import org.apache.jena.atlas.lib.EscapeStr;\n+import org.apache.jena.datatypes.RDFDatatype;\n+import org.apache.jena.datatypes.TypeMapper;\n+import org.apache.jena.datatypes.xsd.XSDDatatype;\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.NodeFactory;\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.query.ARQ;\n+import org.apache.jena.query.QueryParseException;\n+import org.apache.jena.riot.RiotException;\n+import org.apache.jena.riot.RiotParseException;\n+import org.apache.jena.riot.system.ParserProfile;\n+import org.apache.jena.riot.system.RiotLib;\n+import org.apache.jena.riot.system.StreamRDF;\n+import org.apache.jena.sparql.graph.NodeConst;\n+import org.apache.jena.sparql.lang.ParserBase;\n+import org.apache.jena.vocabulary.RDF;\n+\n+/** \n+ * Base for JavaCC parser of RDF languages.\n+ * See {@link ParserBase} for the base class for SPARQL. \n+ */\n+public class LangParserBase {\n+\n+    protected final Node XSD_TRUE       = NodeConst.nodeTrue ;\n+    protected final Node XSD_FALSE      = NodeConst.nodeFalse ;\n+\n+    protected final Node nRDFtype       = NodeConst.nodeRDFType ;\n+\n+    protected final Node nRDFnil        = NodeConst.nodeNil ;\n+    protected final Node nRDFfirst      = NodeConst.nodeFirst ;\n+    protected final Node nRDFrest       = NodeConst.nodeRest ;\n+\n+    protected final Node nRDFsubject    = RDF.Nodes.subject ;\n+    protected final Node nRDFpredicate  = RDF.Nodes.predicate ;\n+    protected final Node nRDFobject     = RDF.Nodes.object ;\n+\n+    protected StreamRDF stream;\n+    protected ParserProfile profile;\n+\n+    public LangParserBase() { }\n+    \n+    // These are essential calls unless the parser takes over the functions. \n+    // They can't easily be in the constructor because this class is inherited\n+    // by the JaavCC generated parser.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c0356bbb54030992f7d74ea2e47d3842c2cf7a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTMwNTI3OnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDoxNjowOFrOIFy5Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOToyMjozNFrOIGcFOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk0NzY0Mg==", "bodyText": "Was this code elsewhere and it was then moved here? Or is it duplicated? I remember seeing some similar code a few days ago I think.", "url": "https://github.com/apache/jena/pull/886#discussion_r542947642", "createdAt": "2020-12-15T00:16:08Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.riot.lang.extra;\n+\n+import org.apache.jena.atlas.AtlasException;\n+import org.apache.jena.atlas.lib.EscapeStr;\n+import org.apache.jena.datatypes.RDFDatatype;\n+import org.apache.jena.datatypes.TypeMapper;\n+import org.apache.jena.datatypes.xsd.XSDDatatype;\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.NodeFactory;\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.query.ARQ;\n+import org.apache.jena.query.QueryParseException;\n+import org.apache.jena.riot.RiotException;\n+import org.apache.jena.riot.RiotParseException;\n+import org.apache.jena.riot.system.ParserProfile;\n+import org.apache.jena.riot.system.RiotLib;\n+import org.apache.jena.riot.system.StreamRDF;\n+import org.apache.jena.sparql.graph.NodeConst;\n+import org.apache.jena.sparql.lang.ParserBase;\n+import org.apache.jena.vocabulary.RDF;\n+\n+/** \n+ * Base for JavaCC parser of RDF languages.\n+ * See {@link ParserBase} for the base class for SPARQL. \n+ */\n+public class LangParserBase {\n+\n+    protected final Node XSD_TRUE       = NodeConst.nodeTrue ;\n+    protected final Node XSD_FALSE      = NodeConst.nodeFalse ;\n+\n+    protected final Node nRDFtype       = NodeConst.nodeRDFType ;\n+\n+    protected final Node nRDFnil        = NodeConst.nodeNil ;\n+    protected final Node nRDFfirst      = NodeConst.nodeFirst ;\n+    protected final Node nRDFrest       = NodeConst.nodeRest ;\n+\n+    protected final Node nRDFsubject    = RDF.Nodes.subject ;\n+    protected final Node nRDFpredicate  = RDF.Nodes.predicate ;\n+    protected final Node nRDFobject     = RDF.Nodes.object ;\n+\n+    protected StreamRDF stream;\n+    protected ParserProfile profile;\n+\n+    public LangParserBase() { }\n+    \n+    // These are essential calls unless the parser takes over the functions. \n+    // They can't easily be in the constructor because this class is inherited\n+    // by the JaavCC generated parser.\n+    public void setProfile(ParserProfile profile) {\n+        this.profile = profile;\n+    }\n+\n+    public void setDest(StreamRDF stream) {\n+        this.stream = stream;\n+    }\n+    \n+    // ----\n+    \n+    protected String fixupPrefix(String prefix, int line, int column) {\n+        if ( prefix.endsWith(\":\") )\n+            prefix = prefix.substring(0, prefix.length() - 1) ;\n+        return prefix ;\n+    }\n+\n+    protected Node createNode(String iriStr) {\n+        return profile.createURI(iriStr, -1, -1);\n+    }\n+\n+    protected Node createBNode(int line, int column) {\n+        return profile.createBlankNode(null, line, column);\n+    }\n+\n+    protected Node createBNode(String label, int line, int column) {\n+        return profile.createBlankNode(null, label, line, column);\n+    }\n+\n+    protected Node createListNode(int line, int column) {\n+        return  createBNode(line, column);\n+    }\n+\n+    protected void checkString(String string, int line, int column) {\n+        for ( int i = 0 ; i < string.length() ; i++ ) {\n+            // Not \"codePointAt\" which does surrogate processing.\n+            char ch = string.charAt(i);\n+            // Check surrogate pairs are pairs.\n+            if ( Character.isHighSurrogate(ch) ) {\n+                i++;\n+                if ( i == string.length() )\n+                    throw new QueryParseException(\"Bad surrogate pair (end of string)\", line, column);\n+                char ch1 = string.charAt(i);\n+                if ( ! Character.isLowSurrogate(ch1) ) {\n+                    throw new QueryParseException(\"Bad surrogate pair (high surrogate not followed by low surrogate)\", line, column);\n+                }\n+            } else if ( Character.isLowSurrogate(ch) ) {\n+                throw new QueryParseException(\"Bad surrogate pair (low surrogate without high surrogate)\", line, column);\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c0356bbb54030992f7d74ea2e47d3842c2cf7a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyMjQ1Nw==", "bodyText": "Duplicated; there is some other methods copied as well.\nThe tiny difference is that the exceptions are RiotParseException ... except I missed this method!  Changed.", "url": "https://github.com/apache/jena/pull/886#discussion_r543622457", "createdAt": "2020-12-15T19:22:34Z", "author": {"login": "afs"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.jena.riot.lang.extra;\n+\n+import org.apache.jena.atlas.AtlasException;\n+import org.apache.jena.atlas.lib.EscapeStr;\n+import org.apache.jena.datatypes.RDFDatatype;\n+import org.apache.jena.datatypes.TypeMapper;\n+import org.apache.jena.datatypes.xsd.XSDDatatype;\n+import org.apache.jena.graph.Node;\n+import org.apache.jena.graph.NodeFactory;\n+import org.apache.jena.graph.Triple;\n+import org.apache.jena.query.ARQ;\n+import org.apache.jena.query.QueryParseException;\n+import org.apache.jena.riot.RiotException;\n+import org.apache.jena.riot.RiotParseException;\n+import org.apache.jena.riot.system.ParserProfile;\n+import org.apache.jena.riot.system.RiotLib;\n+import org.apache.jena.riot.system.StreamRDF;\n+import org.apache.jena.sparql.graph.NodeConst;\n+import org.apache.jena.sparql.lang.ParserBase;\n+import org.apache.jena.vocabulary.RDF;\n+\n+/** \n+ * Base for JavaCC parser of RDF languages.\n+ * See {@link ParserBase} for the base class for SPARQL. \n+ */\n+public class LangParserBase {\n+\n+    protected final Node XSD_TRUE       = NodeConst.nodeTrue ;\n+    protected final Node XSD_FALSE      = NodeConst.nodeFalse ;\n+\n+    protected final Node nRDFtype       = NodeConst.nodeRDFType ;\n+\n+    protected final Node nRDFnil        = NodeConst.nodeNil ;\n+    protected final Node nRDFfirst      = NodeConst.nodeFirst ;\n+    protected final Node nRDFrest       = NodeConst.nodeRest ;\n+\n+    protected final Node nRDFsubject    = RDF.Nodes.subject ;\n+    protected final Node nRDFpredicate  = RDF.Nodes.predicate ;\n+    protected final Node nRDFobject     = RDF.Nodes.object ;\n+\n+    protected StreamRDF stream;\n+    protected ParserProfile profile;\n+\n+    public LangParserBase() { }\n+    \n+    // These are essential calls unless the parser takes over the functions. \n+    // They can't easily be in the constructor because this class is inherited\n+    // by the JaavCC generated parser.\n+    public void setProfile(ParserProfile profile) {\n+        this.profile = profile;\n+    }\n+\n+    public void setDest(StreamRDF stream) {\n+        this.stream = stream;\n+    }\n+    \n+    // ----\n+    \n+    protected String fixupPrefix(String prefix, int line, int column) {\n+        if ( prefix.endsWith(\":\") )\n+            prefix = prefix.substring(0, prefix.length() - 1) ;\n+        return prefix ;\n+    }\n+\n+    protected Node createNode(String iriStr) {\n+        return profile.createURI(iriStr, -1, -1);\n+    }\n+\n+    protected Node createBNode(int line, int column) {\n+        return profile.createBlankNode(null, line, column);\n+    }\n+\n+    protected Node createBNode(String label, int line, int column) {\n+        return profile.createBlankNode(null, label, line, column);\n+    }\n+\n+    protected Node createListNode(int line, int column) {\n+        return  createBNode(line, column);\n+    }\n+\n+    protected void checkString(String string, int line, int column) {\n+        for ( int i = 0 ; i < string.length() ; i++ ) {\n+            // Not \"codePointAt\" which does surrogate processing.\n+            char ch = string.charAt(i);\n+            // Check surrogate pairs are pairs.\n+            if ( Character.isHighSurrogate(ch) ) {\n+                i++;\n+                if ( i == string.length() )\n+                    throw new QueryParseException(\"Bad surrogate pair (end of string)\", line, column);\n+                char ch1 = string.charAt(i);\n+                if ( ! Character.isLowSurrogate(ch1) ) {\n+                    throw new QueryParseException(\"Bad surrogate pair (high surrogate not followed by low surrogate)\", line, column);\n+                }\n+            } else if ( Character.isLowSurrogate(ch) ) {\n+                throw new QueryParseException(\"Bad surrogate pair (low surrogate without high surrogate)\", line, column);\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk0NzY0Mg=="}, "originalCommit": {"oid": "f9c0356bbb54030992f7d74ea2e47d3842c2cf7a"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4475, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}