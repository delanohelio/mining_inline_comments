{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MTc1NjY3", "number": 741, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMToyOTowNFrOD6m7zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMToyOTowNFrOD6m7zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzgxOTAwOnYy", "diffSide": "RIGHT", "path": "jena-arq/src/main/java/org/apache/jena/riot/resultset/rw/ResultSetReaderJSON.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMToyOTowNFrOGSibKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMToyOTowNFrOGSibKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5MTU2Mw==", "bodyText": "s/inthe/in the", "url": "https://github.com/apache/jena/pull/741#discussion_r422091563", "createdAt": "2020-05-08T11:29:04Z", "author": {"login": "kinow"}, "path": "jena-arq/src/main/java/org/apache/jena/riot/resultset/rw/ResultSetReaderJSON.java", "diffHunk": "@@ -239,20 +239,30 @@ private static Node parseOneTerm(JsonObject term, LabelToNode labelMap) {\n         private static Node parseTripleTerm(JsonObject term, LabelToNode labelMap) {\n             if ( term.entrySet().size() != 3 )\n                 throw new ResultSetException(\"Wrong number of object keys for triple term: should be 3, got \" + term.entrySet().size());\n-            checkContains(term, true, true, kSubject, kObject);\n-            checkContainsOneOf(term, kPredicate, kProperty); \n-            JsonObject sTerm = term.get(kSubject).getAsObject(); \n-            JsonObject pTerm = term.get(kPredicate).getAsObject();\n-            if ( pTerm == null )\n-                pTerm = term.get(kProperty).getAsObject();\n-            JsonObject oTerm = term.get(kObject).getAsObject();\n+            checkContainsOneOf(term, kSubject, kSubjectAlt);\n+            checkContainsOneOf(term, kObject, kObjectAlt);\n+            checkContainsOneOf(term, kPredicate, kProperty, kPredicateAlt);\n+            \n+            JsonObject sTerm = get(term, kSubject, kSubjectAlt); \n+            JsonObject pTerm = get(term, kPredicate, kProperty, kPredicateAlt);\n+            JsonObject oTerm = get(term, kObject, kObjectAlt);\n             if ( sTerm == null || pTerm == null || oTerm == null )\n                 throw new ResultSetException(\"Bad triple term: \"+term);\n             Node s = parseOneTerm(sTerm, labelMap);\n             Node p = parseOneTerm(pTerm, labelMap);\n             Node o = parseOneTerm(oTerm, labelMap);\n             return NodeFactory.createTripleNode(s, p, o);\n         }\n+        \n+        // Get a object from an object - use the first name inthe fields list  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fe34743041d854cec9e5dc0f8cf7c576825044"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4579, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}