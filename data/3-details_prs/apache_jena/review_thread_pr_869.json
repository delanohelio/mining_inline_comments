{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MjgwMzU2", "number": 869, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMDo1ODo0OVrOE8BJlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMDo1ODo0OVrOE8BJlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzY4ODU1OnYy", "diffSide": "RIGHT", "path": "jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/mgt/Backup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMDo1ODo0OVrOH37L6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoyMToxNVrOH4NK1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQwMzQzNQ==", "bodyText": "missing space after comma (just in case it might be picked later by linter/IDE/etc?)", "url": "https://github.com/apache/jena/pull/869#discussion_r528403435", "createdAt": "2020-11-22T20:58:49Z", "author": {"login": "kinow"}, "path": "jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/mgt/Backup.java", "diffHunk": "@@ -61,18 +61,15 @@ public static String chooseFileName(String dsName) {\n     // same dataset multiple times at the same time.\n     private static Set<DatasetGraph> activeBackups = Collections.newSetFromMap(new ConcurrentHashMap<>());\n \n-    /** Perform a backup.\n-     *  A backup is a dump of the dataset in compressed N-Quads, done inside a transaction.\n+    /**\n+     * Perform a backup.\n+     * <p>\n+     * A backup is a dump of the dataset in compressed N-Quads, done inside a transaction.\n      */\n     public static void backup(Transactional transactional, DatasetGraph dsg, String backupfile) {\n         if ( transactional == null )\n             transactional = new TransactionalNull();\n-        transactional.begin(ReadWrite.READ);\n-        try {\n-            Backup.backup(dsg, backupfile);\n-        } finally {\n-            transactional.end();\n-        }\n+        Txn.executeRead(transactional,()->backup(dsg, backupfile));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c3c68b06b19e29e7aaa09d7e9c2c3cd4f68a324"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5ODA2OA==", "bodyText": "Fixed!", "url": "https://github.com/apache/jena/pull/869#discussion_r528698068", "createdAt": "2020-11-23T13:21:15Z", "author": {"login": "afs"}, "path": "jena-fuseki2/jena-fuseki-webapp/src/main/java/org/apache/jena/fuseki/mgt/Backup.java", "diffHunk": "@@ -61,18 +61,15 @@ public static String chooseFileName(String dsName) {\n     // same dataset multiple times at the same time.\n     private static Set<DatasetGraph> activeBackups = Collections.newSetFromMap(new ConcurrentHashMap<>());\n \n-    /** Perform a backup.\n-     *  A backup is a dump of the dataset in compressed N-Quads, done inside a transaction.\n+    /**\n+     * Perform a backup.\n+     * <p>\n+     * A backup is a dump of the dataset in compressed N-Quads, done inside a transaction.\n      */\n     public static void backup(Transactional transactional, DatasetGraph dsg, String backupfile) {\n         if ( transactional == null )\n             transactional = new TransactionalNull();\n-        transactional.begin(ReadWrite.READ);\n-        try {\n-            Backup.backup(dsg, backupfile);\n-        } finally {\n-            transactional.end();\n-        }\n+        Txn.executeRead(transactional,()->backup(dsg, backupfile));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQwMzQzNQ=="}, "originalCommit": {"oid": "2c3c68b06b19e29e7aaa09d7e9c2c3cd4f68a324"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4531, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}