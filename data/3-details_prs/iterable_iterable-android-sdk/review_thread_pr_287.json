{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NzI4NDUw", "number": 287, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjo1MzoxMlrOE9atjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoyMjo1MFrOE_YWJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODM2MjM3OnYy", "diffSide": "LEFT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjo1MzoxMlrOH6GR4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjoxMTo1NFrOH6JcNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4MjMzNg==", "bodyText": "Why did you remove email/userId/authToken?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/287#discussion_r530682336", "createdAt": "2020-11-25T22:53:12Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -429,14 +429,14 @@ public boolean isIterableIntent(@Nullable Intent intent) {\n      * @param deviceToken Push token obtained from GCM or FCM\n      */\n     public void registerDeviceToken(@NonNull String deviceToken) {\n-        registerDeviceToken(_email, _userId, _authToken, getPushIntegrationName(), deviceToken, deviceAttributes);\n+        registerDeviceToken(getPushIntegrationName(), deviceToken, deviceAttributes);\n     }\n \n-    protected void registerDeviceToken(final @Nullable String email, final @Nullable String userId, final @Nullable String authToken, final @NonNull String applicationName, final @NonNull String deviceToken, final HashMap<String, String> deviceAttributes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9c5be040ad79b59de7d56b760f7430523e7d098"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NjI0NQ==", "bodyText": "I am thinking, now that we have authProvider, why not make only requestProcessor take email, userID and auth from that interface.\nAlso noticed that\n\npublic method only takes token.\nwe already have email, userId set before calling registerForPush\n\nAlthough not sure why the line 435 method is protected.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/287#discussion_r530686245", "createdAt": "2020-11-25T23:06:31Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -429,14 +429,14 @@ public boolean isIterableIntent(@Nullable Intent intent) {\n      * @param deviceToken Push token obtained from GCM or FCM\n      */\n     public void registerDeviceToken(@NonNull String deviceToken) {\n-        registerDeviceToken(_email, _userId, _authToken, getPushIntegrationName(), deviceToken, deviceAttributes);\n+        registerDeviceToken(getPushIntegrationName(), deviceToken, deviceAttributes);\n     }\n \n-    protected void registerDeviceToken(final @Nullable String email, final @Nullable String userId, final @Nullable String authToken, final @NonNull String applicationName, final @NonNull String deviceToken, final HashMap<String, String> deviceAttributes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4MjMzNg=="}, "originalCommit": {"oid": "d9c5be040ad79b59de7d56b760f7430523e7d098"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY5MDQ0Nw==", "bodyText": "Hmm.. we should have regression tests for these. Basically, the reason we're passing email, userId and authToken here is because getting a token is asynchronous. By the time we get the token, the user identifiers might've changed.\nExample:\n\nYou set email to null\nIt calls disableDevice to disable the token for the logged out user\nIf we pass the current email/userId/authToken and then set email to null, we'll be able to call disableDevice with old auth even though the current one is all null\nIf we don't store the auth with the token request, it will get the current auth info from authProvider, which is already null, and will fail to disable the device.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/287#discussion_r530690447", "createdAt": "2020-11-25T23:21:51Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -429,14 +429,14 @@ public boolean isIterableIntent(@Nullable Intent intent) {\n      * @param deviceToken Push token obtained from GCM or FCM\n      */\n     public void registerDeviceToken(@NonNull String deviceToken) {\n-        registerDeviceToken(_email, _userId, _authToken, getPushIntegrationName(), deviceToken, deviceAttributes);\n+        registerDeviceToken(getPushIntegrationName(), deviceToken, deviceAttributes);\n     }\n \n-    protected void registerDeviceToken(final @Nullable String email, final @Nullable String userId, final @Nullable String authToken, final @NonNull String applicationName, final @NonNull String deviceToken, final HashMap<String, String> deviceAttributes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4MjMzNg=="}, "originalCommit": {"oid": "d9c5be040ad79b59de7d56b760f7430523e7d098"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczNDEzMw==", "bodyText": "Added an integration/regression test here: #288.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/287#discussion_r530734133", "createdAt": "2020-11-26T02:11:54Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -429,14 +429,14 @@ public boolean isIterableIntent(@Nullable Intent intent) {\n      * @param deviceToken Push token obtained from GCM or FCM\n      */\n     public void registerDeviceToken(@NonNull String deviceToken) {\n-        registerDeviceToken(_email, _userId, _authToken, getPushIntegrationName(), deviceToken, deviceAttributes);\n+        registerDeviceToken(getPushIntegrationName(), deviceToken, deviceAttributes);\n     }\n \n-    protected void registerDeviceToken(final @Nullable String email, final @Nullable String userId, final @Nullable String authToken, final @NonNull String applicationName, final @NonNull String deviceToken, final HashMap<String, String> deviceAttributes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4MjMzNg=="}, "originalCommit": {"oid": "d9c5be040ad79b59de7d56b760f7430523e7d098"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODM2MzgzOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApiClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjo1NDowM1rOH6GStw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjo1OTowOFrOH6GZCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4MjU1MQ==", "bodyText": "Do we need to create the request processor every time?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/287#discussion_r530682551", "createdAt": "2020-11-25T22:54:03Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApiClient.java", "diffHunk": "@@ -473,20 +473,12 @@ void tryAddArrayToJSON(JSONObject requestJSON, String key, Object[] value) {\n      * @param json\n      */\n     void sendPostRequest(@NonNull String resourcePath, @NonNull JSONObject json) {\n-        sendPostRequest(resourcePath, json, authProvider.getAuthToken());\n-    }\n-\n-    void sendPostRequest(@NonNull String resourcePath, @NonNull JSONObject json, @Nullable String authToken) {\n-        sendPostRequest(resourcePath, json, authToken, null, null);\n+        sendPostRequest(resourcePath, json, null, null);\n     }\n \n     void sendPostRequest(@NonNull String resourcePath, @NonNull JSONObject json, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n-        sendPostRequest(resourcePath, json, authProvider.getAuthToken(), onSuccess, onFailure);\n-    }\n-\n-    void sendPostRequest(@NonNull String resourcePath, @NonNull JSONObject json, @Nullable String authToken, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n-        IterableApiRequest request = new IterableApiRequest(authProvider.getApiKey(), resourcePath, json, IterableApiRequest.POST, authToken, onSuccess, onFailure);\n-        new IterableRequest().execute(request);\n+        RequestProcessor requestProcessor = new OnlineRequestProcessor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9c5be040ad79b59de7d56b760f7430523e7d098"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NDE3MQ==", "bodyText": "For now... Once we take parameters from config whether its online or offline, apiclient can create corresponding global request processor.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/287#discussion_r530684171", "createdAt": "2020-11-25T22:59:08Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApiClient.java", "diffHunk": "@@ -473,20 +473,12 @@ void tryAddArrayToJSON(JSONObject requestJSON, String key, Object[] value) {\n      * @param json\n      */\n     void sendPostRequest(@NonNull String resourcePath, @NonNull JSONObject json) {\n-        sendPostRequest(resourcePath, json, authProvider.getAuthToken());\n-    }\n-\n-    void sendPostRequest(@NonNull String resourcePath, @NonNull JSONObject json, @Nullable String authToken) {\n-        sendPostRequest(resourcePath, json, authToken, null, null);\n+        sendPostRequest(resourcePath, json, null, null);\n     }\n \n     void sendPostRequest(@NonNull String resourcePath, @NonNull JSONObject json, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n-        sendPostRequest(resourcePath, json, authProvider.getAuthToken(), onSuccess, onFailure);\n-    }\n-\n-    void sendPostRequest(@NonNull String resourcePath, @NonNull JSONObject json, @Nullable String authToken, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n-        IterableApiRequest request = new IterableApiRequest(authProvider.getApiKey(), resourcePath, json, IterableApiRequest.POST, authToken, onSuccess, onFailure);\n-        new IterableRequest().execute(request);\n+        RequestProcessor requestProcessor = new OnlineRequestProcessor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4MjU1MQ=="}, "originalCommit": {"oid": "d9c5be040ad79b59de7d56b760f7430523e7d098"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODk0NTQ5OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoyMjoyOVrOH9D6lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoyMjoyOVrOH9D6lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4OTMzMw==", "bodyText": "Rebase on latest master and maybe drop the merge commit to drop this change from the PR", "url": "https://github.com/Iterable/iterable-android-sdk/pull/287#discussion_r533789333", "createdAt": "2020-12-01T23:22:29Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiIntegrationTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.iterable.iterableapi;\n+\n+import android.content.Context;\n+\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.robolectric.shadows.ShadowPausedAsyncTask;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+import okhttp3.mockwebserver.RecordedRequest;\n+\n+import static android.os.Looper.getMainLooper;\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+public class IterableApiIntegrationTest extends BaseTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893ef7d7b41fbe344304b7a0d898629f8a6d5ae7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODk0NjI5OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoyMjo1MFrOH9D7GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoyMjo1MFrOH9D7GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4OTQ2NA==", "bodyText": "same, this should already be in master", "url": "https://github.com/Iterable/iterable-android-sdk/pull/287#discussion_r533789464", "createdAt": "2020-12-01T23:22:50Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiTest.java", "diffHunk": "@@ -50,6 +50,7 @@\n     private MockWebServer server;\n     private IterableApiClient originalApiClient;\n     private IterableApiClient mockApiClient;\n+    private IterablePushRegistration.IterablePushRegistrationImpl originalPushRegistrationImpl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "893ef7d7b41fbe344304b7a0d898629f8a6d5ae7"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2218, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}