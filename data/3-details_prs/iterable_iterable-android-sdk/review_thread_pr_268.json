{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMzYyMjc4", "number": 268, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDowMDozM1rOEswxPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxMDo0MlrOEv6jAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzcxODM4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDowMDozM1rOHgLibA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDowMDozM1rOHgLibA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUwNTUxNg==", "bodyText": "Why is it on webViewClient? It's probably better to have everything related to animation in one place, either in IterableInAppFragmentHTMLNotification or a separate class.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r503505516", "createdAt": "2020-10-12T20:00:33Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -138,7 +156,18 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {\n             @Override\n             public void onBackPressed() {\n                 IterableInAppFragmentHTMLNotification.this.onBackPressed();\n-                super.onBackPressed();\n+                Runnable dismissFragmentRunnable = new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        getInstance().dismiss();\n+                    }\n+                };\n+\n+                if (webView != null && webView.webViewClient != null) {\n+                    webView.webViewClient.animateClose(webView, dismissFragmentRunnable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzc0NjE0OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoxMToxN1rOHgLzXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoxMToxN1rOHgLzXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUwOTg1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String ITERABLE_IN_APP_DEFAULT_ANIMATION         = \"shouldAnimate\";\n          \n          \n            \n                public static final String ITERABLE_IN_APP_SHOULD_ANIMATE         = \"shouldAnimate\";", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r503509853", "createdAt": "2020-10-12T20:11:17Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableConstants.java", "diffHunk": "@@ -204,6 +207,7 @@\n     public static final String ITERABLE_INBOX_IMPRESSIONS                = \"impressions\";\n     public static final String ITERABLE_INBOX_IMP_DISPLAY_COUNT          = \"displayCount\";\n     public static final String ITERABLE_INBOX_IMP_DISPLAY_DURATION       = \"displayDuration\";\n+    public static final String ITERABLE_IN_APP_DEFAULT_ANIMATION         = \"shouldAnimate\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzc3OTA2OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyMzoyNlrOHgMG7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyMzoyNlrOHgMG7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNDg2MA==", "bodyText": "webView.webViewClient.htmlView is the same as webView. To understand why this code is checking this state, you'd have to read WebViewClient code. This is generally fragile, I'd rely on more explicit checks.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r503514860", "createdAt": "2020-10-12T20:23:26Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -213,11 +245,15 @@ public void run() {\n \n     private void showDialogView() {\n         try {\n-            getDialog().getWindow().getDecorView().setAlpha(1.0f);\n+            webView.setAlpha(1.0f);\n+            if (webView.webViewClient.htmlView == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzcyNzc0OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxNjoxOVrOHgxb2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxNjoxOVrOHgxb2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNjQyNg==", "bodyText": "Formatting is different in this value (starts with a lowercase letter).", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504126426", "createdAt": "2020-10-13T17:16:19Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -40,6 +40,9 @@\n     private static final String CALLBACK_ON_CANCEL = \"CallbackOnCancel\";\n     private static final String MESSAGE_ID = \"MessageId\";\n     private static final String INAPP_OPEN_TRACKED = \"InAppOpenTracked\";\n+    private static final String INAPP_BGALPHA = \"InAppBgAlpha\";\n+    private static final String INAPP_BGCOLOR = \"InAppBgColor\";\n+    private static final String INAPP_SHOULD_ANIMATE = \"shouldAnimate\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzczNzEzOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxOTowNFrOHgxh7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxOTowNFrOHgxh7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNzk4Mw==", "bodyText": "Use IterableConstants.* instead of importing every constant statically.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504127983", "createdAt": "2020-10-13T17:19:04Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -12,6 +12,11 @@\n \n import java.util.Date;\n \n+import static com.iterable.iterableapi.IterableConstants.ITERABLE_IN_APP_BGCOLOR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc0MDI4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxOTo1MFrOHgxj2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxOTo1MFrOHgxj2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyODQ3NQ==", "bodyText": "The field is called inAppDisplaySettings (plural).", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504128475", "createdAt": "2020-10-13T17:19:50Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -142,6 +149,26 @@ public int hashCode() {\n         }\n     }\n \n+    public static class InAppDisplaySetting {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc0NDA5OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyMDo1MFrOHgxmHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzowMzo0NFrOHg8elA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyOTA1NQ==", "bodyText": "Looks like something temporary.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504129055", "createdAt": "2020-10-13T17:20:50Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -303,11 +330,22 @@ static IterableInAppMessage fromJSONObject(@NonNull JSONObject messageJson, @Nul\n         Date expiresAt = expiresAtLong != 0 ? new Date(expiresAtLong) : null;\n \n         String html = contentJson.optString(IterableConstants.ITERABLE_IN_APP_HTML, null);\n-\n-        JSONObject paddingOptions = contentJson.optJSONObject(IterableConstants.ITERABLE_IN_APP_DISPLAY_SETTINGS);\n-        Rect padding = getPaddingFromPayload(paddingOptions);\n+        JSONObject inAppDisplaySettingsJson = contentJson.optJSONObject(IterableConstants.ITERABLE_IN_APP_DISPLAY_SETTINGS);\n+        Rect padding = getPaddingFromPayload(inAppDisplaySettingsJson);\n         double backgroundAlpha = contentJson.optDouble(IterableConstants.ITERABLE_IN_APP_BACKGROUND_ALPHA, 0);\n+        boolean shouldAnimate = inAppDisplaySettingsJson.optBoolean(ITERABLE_IN_APP_DEFAULT_ANIMATION, true);\n+        JSONObject bgColorSetting = inAppDisplaySettingsJson.optJSONObject(ITERABLE_IN_APP_BGCOLOR);\n+\n+//        String bgColorInHex = \"#00D3D3D3\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwNzM0OA==", "bodyText": "Yes.. kept for test convenience... Easy to uncomment and see in app animation working..\nWill remove it too", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504307348", "createdAt": "2020-10-13T23:03:44Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -303,11 +330,22 @@ static IterableInAppMessage fromJSONObject(@NonNull JSONObject messageJson, @Nul\n         Date expiresAt = expiresAtLong != 0 ? new Date(expiresAtLong) : null;\n \n         String html = contentJson.optString(IterableConstants.ITERABLE_IN_APP_HTML, null);\n-\n-        JSONObject paddingOptions = contentJson.optJSONObject(IterableConstants.ITERABLE_IN_APP_DISPLAY_SETTINGS);\n-        Rect padding = getPaddingFromPayload(paddingOptions);\n+        JSONObject inAppDisplaySettingsJson = contentJson.optJSONObject(IterableConstants.ITERABLE_IN_APP_DISPLAY_SETTINGS);\n+        Rect padding = getPaddingFromPayload(inAppDisplaySettingsJson);\n         double backgroundAlpha = contentJson.optDouble(IterableConstants.ITERABLE_IN_APP_BACKGROUND_ALPHA, 0);\n+        boolean shouldAnimate = inAppDisplaySettingsJson.optBoolean(ITERABLE_IN_APP_DEFAULT_ANIMATION, true);\n+        JSONObject bgColorSetting = inAppDisplaySettingsJson.optJSONObject(ITERABLE_IN_APP_BGCOLOR);\n+\n+//        String bgColorInHex = \"#00D3D3D3\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyOTA1NQ=="}, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc0NTk4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyMToyMFrOHgxnSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyMToyMFrOHgxnSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyOTM1Mg==", "bodyText": "To match the convention used in this method, I'd name it bgColorJson.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504129352", "createdAt": "2020-10-13T17:21:20Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -303,11 +330,22 @@ static IterableInAppMessage fromJSONObject(@NonNull JSONObject messageJson, @Nul\n         Date expiresAt = expiresAtLong != 0 ? new Date(expiresAtLong) : null;\n \n         String html = contentJson.optString(IterableConstants.ITERABLE_IN_APP_HTML, null);\n-\n-        JSONObject paddingOptions = contentJson.optJSONObject(IterableConstants.ITERABLE_IN_APP_DISPLAY_SETTINGS);\n-        Rect padding = getPaddingFromPayload(paddingOptions);\n+        JSONObject inAppDisplaySettingsJson = contentJson.optJSONObject(IterableConstants.ITERABLE_IN_APP_DISPLAY_SETTINGS);\n+        Rect padding = getPaddingFromPayload(inAppDisplaySettingsJson);\n         double backgroundAlpha = contentJson.optDouble(IterableConstants.ITERABLE_IN_APP_BACKGROUND_ALPHA, 0);\n+        boolean shouldAnimate = inAppDisplaySettingsJson.optBoolean(ITERABLE_IN_APP_DEFAULT_ANIMATION, true);\n+        JSONObject bgColorSetting = inAppDisplaySettingsJson.optJSONObject(ITERABLE_IN_APP_BGCOLOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc1MDEzOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyMjozMVrOHgxp1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyMjozMVrOHgxp1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMDAwNQ==", "bodyText": "If there is no bgColor in the payload, do we want to create an InAppBgColor with null values? It might be better to not create one and just pass null.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504130005", "createdAt": "2020-10-13T17:22:31Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -303,11 +330,22 @@ static IterableInAppMessage fromJSONObject(@NonNull JSONObject messageJson, @Nul\n         Date expiresAt = expiresAtLong != 0 ? new Date(expiresAtLong) : null;\n \n         String html = contentJson.optString(IterableConstants.ITERABLE_IN_APP_HTML, null);\n-\n-        JSONObject paddingOptions = contentJson.optJSONObject(IterableConstants.ITERABLE_IN_APP_DISPLAY_SETTINGS);\n-        Rect padding = getPaddingFromPayload(paddingOptions);\n+        JSONObject inAppDisplaySettingsJson = contentJson.optJSONObject(IterableConstants.ITERABLE_IN_APP_DISPLAY_SETTINGS);\n+        Rect padding = getPaddingFromPayload(inAppDisplaySettingsJson);\n         double backgroundAlpha = contentJson.optDouble(IterableConstants.ITERABLE_IN_APP_BACKGROUND_ALPHA, 0);\n+        boolean shouldAnimate = inAppDisplaySettingsJson.optBoolean(ITERABLE_IN_APP_DEFAULT_ANIMATION, true);\n+        JSONObject bgColorSetting = inAppDisplaySettingsJson.optJSONObject(ITERABLE_IN_APP_BGCOLOR);\n+\n+//        String bgColorInHex = \"#00D3D3D3\";\n+//        double bgAlpha = 0.3f;\n+        String bgColorInHex = null;\n+        double bgAlpha = 0.0f;\n+        if (bgColorSetting != null) {\n+            bgColorInHex = bgColorSetting.optString(ITERABLE_IN_APP_BGCOLOR_HEX);\n+            bgAlpha = bgColorSetting.optDouble(ITERABLE_IN_APP_BGCOLOR_ALPHA);\n+        }\n \n+        InAppDisplaySetting inAppDisplaySetting = new InAppDisplaySetting(shouldAnimate, new InAppBgColor(bgColorInHex, bgAlpha));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc1OTUwOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableWebViewClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyNDo1M1rOHgxvcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyNDo1M1rOHgxvcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMTQ0MQ==", "bodyText": "A WebViewClient ideally should not know anything about the view hierarchy.. As I mentioned in an earlier comment, it is probably better to move it up to the *HTMLNotification class.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504131441", "createdAt": "2020-10-13T17:24:53Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableWebViewClient.java", "diffHunk": "@@ -34,12 +45,87 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {\n      */\n     @Override\n     public void onPageFinished(WebView view, String url) {\n+        htmlView = view;\n         inAppHTMLNotification.setLoaded(true);\n         view.loadUrl(RESIZE_SCRIPT);\n     }\n \n+    void showWebView() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc2MjI4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableWebViewClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyNTozN1rOHgxxJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyNTozN1rOHgxxJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMTg3OQ==", "bodyText": "\ud83d\udc4d\nI'd also move this up to the in-app html notification class since that is where we manage the layout.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504131879", "createdAt": "2020-10-13T17:25:37Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableWebViewClient.java", "diffHunk": "@@ -34,12 +45,87 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {\n      */\n     @Override\n     public void onPageFinished(WebView view, String url) {\n+        htmlView = view;\n         inAppHTMLNotification.setLoaded(true);\n         view.loadUrl(RESIZE_SCRIPT);\n     }\n \n+    void showWebView() {\n+        if (htmlView != null) {\n+            if (shouldAnimate) {\n+                animate(htmlView);\n+            } else {\n+                htmlView.setVisibility(View.VISIBLE);\n+            }\n+            //Might need this line.\n+            htmlView.setVisibility(View.VISIBLE);\n+        }\n+    }\n+\n+    private void animate(final WebView view) {\n+        int animationResource;\n+        switch (inAppLayout) {\n+            case TOP:\n+                animationResource = R.anim.slide_down_custom;\n+                break;\n+            case CENTER:\n+            case FULLSCREEN:\n+                animationResource = R.anim.fade_in_custom;\n+                break;\n+            case BOTTOM:\n+                animationResource = R.anim.slide_up_custom;\n+                break;\n+            default:\n+                animationResource = R.anim.fade_in_custom;\n+        }\n+        Animation anim = AnimationUtils.loadAnimation(IterableApi.getInstance().getMainActivityContext(),\n+                animationResource);\n+        view.startAnimation(anim);\n+    }\n+\n+    public void animateClose(final WebView view, Runnable parentViewDismissRunnable) {\n+        if (!shouldAnimate) {\n+            parentViewDismissRunnable.run();\n+            return;\n+        }\n+\n+        int animationResource;\n+        switch (inAppLayout) {\n+            case TOP:\n+                animationResource = R.anim.top_exit;\n+                break;\n+            case CENTER:\n+            case FULLSCREEN:\n+                animationResource = R.anim.fade_out_custom;\n+                break;\n+            case BOTTOM:\n+                animationResource = R.anim.bottom_exit;\n+                break;\n+            default:\n+                animationResource = R.anim.fade_out_custom;\n+        }\n+        Animation anim = AnimationUtils.loadAnimation(IterableApi.getInstance().getMainActivityContext(),\n+                animationResource);\n+        view.startAnimation(anim);\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n+            view.postOnAnimationDelayed(parentViewDismissRunnable, 400);\n+        } else {\n+            parentViewDismissRunnable.run();\n+        }\n+    }\n+\n     interface HTMLNotificationCallbacks {\n         void onUrlClicked(String url);\n+\n         void setLoaded(boolean loaded);\n     }\n+\n }\n+\n+enum InAppLayout {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzc2NjE4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/res/anim/bottom_exit.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoyNjozOFrOHgxzig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo1ODoxNlrOHg8XFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjQ5MA==", "bodyText": "Let's extract the duration to an xml value so we can define it in one place for all animations.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504132490", "createdAt": "2020-10-13T17:26:38Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/res/anim/bottom_exit.xml", "diffHunk": "@@ -0,0 +1,5 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<translate xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:fromYDelta=\"0%p\"\n+    android:toYDelta=\"100%p\"\n+    android:duration=\"500\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwNTQzMQ==", "bodyText": "Agreed", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504305431", "createdAt": "2020-10-13T22:58:16Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/res/anim/bottom_exit.xml", "diffHunk": "@@ -0,0 +1,5 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<translate xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:fromYDelta=\"0%p\"\n+    android:toYDelta=\"100%p\"\n+    android:duration=\"500\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjQ5MA=="}, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzk2Njk4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoxNzoyNlrOHgzvXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzowMDo0OFrOHg8apg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NDE5MQ==", "bodyText": "InAppBgColor isn't actually used yet for background color, right?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504164191", "createdAt": "2020-10-13T18:17:26Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -142,6 +149,26 @@ public int hashCode() {\n         }\n     }\n \n+    public static class InAppDisplaySetting {\n+        boolean shouldAnimate;\n+        InAppBgColor inAppBgColor;\n+\n+        public InAppDisplaySetting(boolean shouldAnimate, InAppBgColor inAppBgColor) {\n+            this.shouldAnimate = shouldAnimate;\n+            this.inAppBgColor = inAppBgColor;\n+        }\n+    }\n+\n+    public static class InAppBgColor {\n+        String bgHexColor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwNjM0Mg==", "bodyText": "Yes, it is used.. In createInstance of IterableInAppFragmentHTMLNotification.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r504306342", "createdAt": "2020-10-13T23:00:48Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -142,6 +149,26 @@ public int hashCode() {\n         }\n     }\n \n+    public static class InAppDisplaySetting {\n+        boolean shouldAnimate;\n+        InAppBgColor inAppBgColor;\n+\n+        public InAppDisplaySetting(boolean shouldAnimate, InAppBgColor inAppBgColor) {\n+            this.shouldAnimate = shouldAnimate;\n+            this.inAppBgColor = inAppBgColor;\n+        }\n+    }\n+\n+    public static class InAppBgColor {\n+        String bgHexColor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE2NDE5MQ=="}, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzc3NzU1OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzo0NjoxNFrOHhrehQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjoxMzozNlrOHiEvwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA3NzM4MQ==", "bodyText": "We'll get a IllegalArgumentException if the color string is invalid here.. Can it possibly be invalid?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r505077381", "createdAt": "2020-10-14T23:46:14Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -297,27 +333,20 @@ public void run() {\n                     if (insetPadding.bottom == 0 && insetPadding.top == 0) {\n                         //Handle full screen\n                         window.setLayout(webViewWidth, webViewHeight);\n-\n                         getDialog().getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n                     } else {\n-                        // Calculates the dialog size\n-                        double notificationWidth = 100 - (insetPadding.left + insetPadding.right);\n-                        float widthPercentage = (float) notificationWidth / 100;\n-                        int maxHeight = Math.min((int) (height * displayMetrics.scaledDensity), webViewHeight);\n-                        int maxWidth = Math.min(webViewWidth, (int) (webViewWidth * widthPercentage));\n-                        window.setLayout(maxWidth, maxHeight);\n-\n-                        //Calculates the horizontal position based on the dialog size\n-                        double center = (insetPadding.left + notificationWidth / 2f);\n-                        int offset = (int) ((center - 50) / 100f * webViewWidth);\n-\n-                        //Set the window properties\n-                        WindowManager.LayoutParams wlp = window.getAttributes();\n-                        wlp.x = offset;\n-                        wlp.gravity = getVerticalLocation(insetPadding);\n-                        wlp.dimAmount = (float) notification.backgroundAlpha;\n-                        wlp.flags = WindowManager.LayoutParams.FLAG_DIM_BEHIND;\n-                        window.setAttributes(wlp);\n+                        //Set background window fading if animation and backgroundAlpha/opacity configured\n+                        if (shouldAnimate && (inAppBackgroundColor != null)) {\n+                            window.setBackgroundDrawable(new ColorDrawable(Color.parseColor(inAppBackgroundColor)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5MTM5Mw==", "bodyText": "We would only get hex strings which should be passed from UI.. probably from a color selection..Shouldnt go wrong.. However, we can default it to transparent though if at all error occurs", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r505491393", "createdAt": "2020-10-15T12:13:36Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -297,27 +333,20 @@ public void run() {\n                     if (insetPadding.bottom == 0 && insetPadding.top == 0) {\n                         //Handle full screen\n                         window.setLayout(webViewWidth, webViewHeight);\n-\n                         getDialog().getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n                     } else {\n-                        // Calculates the dialog size\n-                        double notificationWidth = 100 - (insetPadding.left + insetPadding.right);\n-                        float widthPercentage = (float) notificationWidth / 100;\n-                        int maxHeight = Math.min((int) (height * displayMetrics.scaledDensity), webViewHeight);\n-                        int maxWidth = Math.min(webViewWidth, (int) (webViewWidth * widthPercentage));\n-                        window.setLayout(maxWidth, maxHeight);\n-\n-                        //Calculates the horizontal position based on the dialog size\n-                        double center = (insetPadding.left + notificationWidth / 2f);\n-                        int offset = (int) ((center - 50) / 100f * webViewWidth);\n-\n-                        //Set the window properties\n-                        WindowManager.LayoutParams wlp = window.getAttributes();\n-                        wlp.x = offset;\n-                        wlp.gravity = getVerticalLocation(insetPadding);\n-                        wlp.dimAmount = (float) notification.backgroundAlpha;\n-                        wlp.flags = WindowManager.LayoutParams.FLAG_DIM_BEHIND;\n-                        window.setAttributes(wlp);\n+                        //Set background window fading if animation and backgroundAlpha/opacity configured\n+                        if (shouldAnimate && (inAppBackgroundColor != null)) {\n+                            window.setBackgroundDrawable(new ColorDrawable(Color.parseColor(inAppBackgroundColor)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA3NzM4MQ=="}, "originalCommit": {"oid": "6eb309fed268f35cfb3603ac3353056080349361"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjIwODkxOnYy", "diffSide": "RIGHT", "path": "app/src/androidTest/java/com/iterable/iterableapi/MainActivityTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo1MDowMFrOHkfJew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjo0MTowNFrOHkkNTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMTExNQ==", "bodyText": "Hmm wondering if it's possible to replace these delays with something else..", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508021115", "createdAt": "2020-10-19T19:50:00Z", "author": {"login": "vbabenkoru"}, "path": "app/src/androidTest/java/com/iterable/iterableapi/MainActivityTest.java", "diffHunk": "@@ -143,6 +143,7 @@ public void checkIfMessageShownAsPopUpForImproperIntent() throws Exception {\n         rule.launchActivity(intent);\n \n         onView(withText(\"Tips and tricks 2\")).perform(click());\n+        waitFor(500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNDAxMg==", "bodyText": "Other best alternative this code I found is waitFor(300)\n\ud83d\ude01\nJokes apart..\nThis looked like a different case than our regular threading issues where we could flush background Threads..\nMay be I can looking optimizing it in tomorrow's test day", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508104012", "createdAt": "2020-10-19T22:41:04Z", "author": {"login": "Ayyanchira"}, "path": "app/src/androidTest/java/com/iterable/iterableapi/MainActivityTest.java", "diffHunk": "@@ -143,6 +143,7 @@ public void checkIfMessageShownAsPopUpForImproperIntent() throws Exception {\n         rule.launchActivity(intent);\n \n         onView(withText(\"Tips and tricks 2\")).perform(click());\n+        waitFor(500);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMTExNQ=="}, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjIxMTQ2OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo1MDozOVrOHkfLAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo1MToyM1rOHkfMjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMTUwNw==", "bodyText": "Do you want to keep the duration here or move to xml? I think either option is valid.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508021507", "createdAt": "2020-10-19T19:50:39Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableConstants.java", "diffHunk": "@@ -204,6 +207,8 @@\n     public static final String ITERABLE_INBOX_IMPRESSIONS                = \"impressions\";\n     public static final String ITERABLE_INBOX_IMP_DISPLAY_COUNT          = \"displayCount\";\n     public static final String ITERABLE_INBOX_IMP_DISPLAY_DURATION       = \"displayDuration\";\n+    public static final String ITERABLE_IN_APP_SHOULD_ANIMATE            = \"shouldAnimate\";\n+    public static final int ITERABLE_IN_APP_ANIMATION_DURATION           = 500;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMTkwMA==", "bodyText": "Yeah.. lets keep it here..", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508021900", "createdAt": "2020-10-19T19:51:23Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableConstants.java", "diffHunk": "@@ -204,6 +207,8 @@\n     public static final String ITERABLE_INBOX_IMPRESSIONS                = \"impressions\";\n     public static final String ITERABLE_INBOX_IMP_DISPLAY_COUNT          = \"displayCount\";\n     public static final String ITERABLE_INBOX_IMP_DISPLAY_DURATION       = \"displayDuration\";\n+    public static final String ITERABLE_IN_APP_SHOULD_ANIMATE            = \"shouldAnimate\";\n+    public static final int ITERABLE_IN_APP_ANIMATION_DURATION           = 500;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMTUwNw=="}, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjIxNDIwOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo1MToyNVrOHkfMrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTowNTozOFrOHkhoyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMTkzMw==", "bodyText": "Is anything preventing us from removing it now? (Not necessarily in this PR)", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508021933", "createdAt": "2020-10-19T19:51:25Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -53,8 +61,13 @@\n     private boolean callbackOnCancel = false;\n     private String htmlString;\n     private String messageId;\n+\n+    //TODO: To delete this variable in future iterations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNDU5OQ==", "bodyText": "We were skeptical if backend would ever send that value. But now that we know nothing had been implemented on backend side to send any old backgroundAlpha values, we can delete it right away.. But just to be safe not this time.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508024599", "createdAt": "2020-10-19T19:56:20Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -53,8 +61,13 @@\n     private boolean callbackOnCancel = false;\n     private String htmlString;\n     private String messageId;\n+\n+    //TODO: To delete this variable in future iterations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMTkzMw=="}, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MTg5Nw==", "bodyText": "Sounds good!", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508061897", "createdAt": "2020-10-19T21:05:38Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -53,8 +61,13 @@\n     private boolean callbackOnCancel = false;\n     private String htmlString;\n     private String messageId;\n+\n+    //TODO: To delete this variable in future iterations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMTkzMw=="}, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjIyMzI2OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo1NDoxMFrOHkfSKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo1NDoxMFrOHkfSKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMzMzOA==", "bodyText": "If we're converting padding to InAppLayout here anyway, I think it's better to also replace the condition 2 lines above that is still using insetPadding.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508023338", "createdAt": "2020-10-19T19:54:10Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -151,6 +155,8 @@ public void onBackPressed() {\n         dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n         if (insetPadding.bottom == 0 && insetPadding.top == 0) {\n             dialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n+        } else if (getInAppLayout(insetPadding) != InAppLayout.TOP) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjIyNjI1OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo1NTowMlrOHkfT_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTowNToxN1rOHkhoMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMzgwNg==", "bodyText": "Why are we only setting this if it's centered or bottom?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508023806", "createdAt": "2020-10-19T19:55:02Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -151,6 +155,8 @@ public void onBackPressed() {\n         dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n         if (insetPadding.bottom == 0 && insetPadding.top == 0) {\n             dialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n+        } else if (getInAppLayout(insetPadding) != InAppLayout.TOP) {\n+            dialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNjc2Nw==", "bodyText": "If we do translucent status for TOP, there is a small overlap of in app content and status bar which we discussed earlier. So to avoid that, TOP in apps will have opaque status bar with content starting right after it", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508026767", "createdAt": "2020-10-19T20:00:06Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -151,6 +155,8 @@ public void onBackPressed() {\n         dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n         if (insetPadding.bottom == 0 && insetPadding.top == 0) {\n             dialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n+        } else if (getInAppLayout(insetPadding) != InAppLayout.TOP) {\n+            dialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMzgwNg=="}, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MTc0Nw==", "bodyText": "I think it'd be helpful to add a comment here explaining this, so that next time someone looks at it, there is context for why it's done this way.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508061747", "createdAt": "2020-10-19T21:05:17Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -151,6 +155,8 @@ public void onBackPressed() {\n         dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n         if (insetPadding.bottom == 0 && insetPadding.top == 0) {\n             dialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n+        } else if (getInAppLayout(insetPadding) != InAppLayout.TOP) {\n+            dialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMzgwNg=="}, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjIzMTg2OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo1NjozMFrOHkfXeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDowMTo0OVrOHkfjRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNDY5Ng==", "bodyText": "Background color is dependent on shouldAnimate being enabled. Is that what we want?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508024696", "createdAt": "2020-10-19T19:56:30Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -254,6 +261,108 @@ public void onBackPressed() {\n         IterableApi.sharedInstance.trackInAppClose(messageId, BACK_BUTTON, IterableInAppCloseAction.BACK, location);\n     }\n \n+    private void prepareToShowWebView() {\n+        try {\n+            webView.setAlpha(0.0f);\n+            webView.postDelayed(new Runnable() {\n+                @Override\n+                public void run() {\n+                    showAndAnimateWebView();\n+                }\n+            }, DELAY_THRESHOLD_MS);\n+            loadBackground();\n+        } catch (NullPointerException e) {\n+            IterableLogger.e(TAG, \"View not present. Failed to hide before resizing inapp\");\n+        }\n+    }\n+\n+    private void loadBackground() {\n+        if (shouldAnimate && (inAppBackgroundColor != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNzcxOA==", "bodyText": "I did mentioned it on Slab.. will followup on it urgently", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508027718", "createdAt": "2020-10-19T20:01:49Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -254,6 +261,108 @@ public void onBackPressed() {\n         IterableApi.sharedInstance.trackInAppClose(messageId, BACK_BUTTON, IterableInAppCloseAction.BACK, location);\n     }\n \n+    private void prepareToShowWebView() {\n+        try {\n+            webView.setAlpha(0.0f);\n+            webView.postDelayed(new Runnable() {\n+                @Override\n+                public void run() {\n+                    showAndAnimateWebView();\n+                }\n+            }, DELAY_THRESHOLD_MS);\n+            loadBackground();\n+        } catch (NullPointerException e) {\n+            IterableLogger.e(TAG, \"View not present. Failed to hide before resizing inapp\");\n+        }\n+    }\n+\n+    private void loadBackground() {\n+        if (shouldAnimate && (inAppBackgroundColor != null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNDY5Ng=="}, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjIzOTE5OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo1ODozNFrOHkfcEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo1ODozNFrOHkfcEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNTg3Mg==", "bodyText": "Does this mean we don't animate on Android 4.2 and lower?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508025872", "createdAt": "2020-10-19T19:58:34Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -254,6 +261,108 @@ public void onBackPressed() {\n         IterableApi.sharedInstance.trackInAppClose(messageId, BACK_BUTTON, IterableInAppCloseAction.BACK, location);\n     }\n \n+    private void prepareToShowWebView() {\n+        try {\n+            webView.setAlpha(0.0f);\n+            webView.postDelayed(new Runnable() {\n+                @Override\n+                public void run() {\n+                    showAndAnimateWebView();\n+                }\n+            }, DELAY_THRESHOLD_MS);\n+            loadBackground();\n+        } catch (NullPointerException e) {\n+            IterableLogger.e(TAG, \"View not present. Failed to hide before resizing inapp\");\n+        }\n+    }\n+\n+    private void loadBackground() {\n+        if (shouldAnimate && (inAppBackgroundColor != null)) {\n+            ColorDrawable transparentDrawable = new ColorDrawable(Color.TRANSPARENT);\n+            int backgroundColorWithAlpha;\n+            try {\n+                backgroundColorWithAlpha = ColorUtils.setAlphaComponent(Color.parseColor(inAppBackgroundColor), (int) (inAppBackgroundAlpha * 255));\n+            } catch (IllegalArgumentException e) {\n+                IterableLogger.e(TAG, \"Background color could not be identified for input string \\\"\" + inAppBackgroundColor + \"\\\". Failed to animate background.\");\n+                return;\n+            }\n+\n+            ColorDrawable backgroundColorDrawable = new ColorDrawable(backgroundColorWithAlpha);\n+            Drawable[] layers = new Drawable[2];\n+            layers[0] = transparentDrawable;\n+            layers[1] = backgroundColorDrawable;\n+            TransitionDrawable transitionDrawable = new TransitionDrawable(layers);\n+            getDialog().getWindow().setBackgroundDrawable(transitionDrawable);\n+            transitionDrawable.startTransition(300);\n+        }\n+    }\n+\n+    private void showAndAnimateWebView() {\n+        webView.setAlpha(1.0f);\n+        webView.setVisibility(View.VISIBLE);\n+        if (shouldAnimate) {\n+            int animationResource;\n+            InAppLayout inAppLayout = getInAppLayout(insetPadding);\n+            switch (inAppLayout) {\n+                case TOP:\n+                    animationResource = R.anim.slide_down_custom;\n+                    break;\n+                case CENTER:\n+                case FULLSCREEN:\n+                    animationResource = R.anim.fade_in_custom;\n+                    break;\n+                case BOTTOM:\n+                    animationResource = R.anim.slide_up_custom;\n+                    break;\n+                default:\n+                    animationResource = R.anim.fade_in_custom;\n+            }\n+            Animation anim = AnimationUtils.loadAnimation(getContext(), animationResource);\n+            anim.setDuration(IterableConstants.ITERABLE_IN_APP_ANIMATION_DURATION);\n+            webView.startAnimation(anim);\n+        }\n+    }\n+\n+    private void hideWebView() {\n+        if (shouldAnimate) {\n+            int animationResource;\n+            InAppLayout inAppLayout = getInAppLayout(insetPadding);\n+\n+            switch (inAppLayout) {\n+                case TOP:\n+                    animationResource = R.anim.top_exit;\n+                    break;\n+                case CENTER:\n+                case FULLSCREEN:\n+                    animationResource = R.anim.fade_out_custom;\n+                    break;\n+                case BOTTOM:\n+                    animationResource = R.anim.bottom_exit;\n+                    break;\n+                default:\n+                    animationResource = R.anim.fade_out_custom;\n+            }\n+            Animation anim = AnimationUtils.loadAnimation(getContext(),\n+                    animationResource);\n+            anim.setDuration(IterableConstants.ITERABLE_IN_APP_ANIMATION_DURATION);\n+            webView.startAnimation(anim);\n+        }\n+\n+        Runnable dismissWebviewRunnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                IterableInAppFragmentHTMLNotification.super.dismiss();\n+            }\n+        };\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 299}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjI1MzM4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDowMjoyNlrOHkfk1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjoyNDoyOVrOHkj0gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyODExNg==", "bodyText": "Hmm, if we store padding values within inAppDisplaySettings, maybe it makes sense to move the padding values here as well? (Not necessarily within this PR)", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508028116", "createdAt": "2020-10-19T20:02:26Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -142,6 +144,26 @@ public int hashCode() {\n         }\n     }\n \n+    public static class InAppDisplaySettings {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5NzY2Ng==", "bodyText": "I think html and padding can go together at similar level and we can reserve inAppDisplaySettings for higher functionalities.. (May be custom animation parameters in future).", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508097666", "createdAt": "2020-10-19T22:24:29Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -142,6 +144,26 @@ public int hashCode() {\n         }\n     }\n \n+    public static class InAppDisplaySettings {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyODExNg=="}, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjI2OTU3OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDowNzoxN1rOHkfu0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDowNzoxN1rOHkfu0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzMDY3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        dismissWebviewRunnable.run();\n          \n          \n            \n                        webView.postDelayed(dismissWebviewRunnable, 400);", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508030672", "createdAt": "2020-10-19T20:07:17Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -254,6 +261,108 @@ public void onBackPressed() {\n         IterableApi.sharedInstance.trackInAppClose(messageId, BACK_BUTTON, IterableInAppCloseAction.BACK, location);\n     }\n \n+    private void prepareToShowWebView() {\n+        try {\n+            webView.setAlpha(0.0f);\n+            webView.postDelayed(new Runnable() {\n+                @Override\n+                public void run() {\n+                    showAndAnimateWebView();\n+                }\n+            }, DELAY_THRESHOLD_MS);\n+            loadBackground();\n+        } catch (NullPointerException e) {\n+            IterableLogger.e(TAG, \"View not present. Failed to hide before resizing inapp\");\n+        }\n+    }\n+\n+    private void loadBackground() {\n+        if (shouldAnimate && (inAppBackgroundColor != null)) {\n+            ColorDrawable transparentDrawable = new ColorDrawable(Color.TRANSPARENT);\n+            int backgroundColorWithAlpha;\n+            try {\n+                backgroundColorWithAlpha = ColorUtils.setAlphaComponent(Color.parseColor(inAppBackgroundColor), (int) (inAppBackgroundAlpha * 255));\n+            } catch (IllegalArgumentException e) {\n+                IterableLogger.e(TAG, \"Background color could not be identified for input string \\\"\" + inAppBackgroundColor + \"\\\". Failed to animate background.\");\n+                return;\n+            }\n+\n+            ColorDrawable backgroundColorDrawable = new ColorDrawable(backgroundColorWithAlpha);\n+            Drawable[] layers = new Drawable[2];\n+            layers[0] = transparentDrawable;\n+            layers[1] = backgroundColorDrawable;\n+            TransitionDrawable transitionDrawable = new TransitionDrawable(layers);\n+            getDialog().getWindow().setBackgroundDrawable(transitionDrawable);\n+            transitionDrawable.startTransition(300);\n+        }\n+    }\n+\n+    private void showAndAnimateWebView() {\n+        webView.setAlpha(1.0f);\n+        webView.setVisibility(View.VISIBLE);\n+        if (shouldAnimate) {\n+            int animationResource;\n+            InAppLayout inAppLayout = getInAppLayout(insetPadding);\n+            switch (inAppLayout) {\n+                case TOP:\n+                    animationResource = R.anim.slide_down_custom;\n+                    break;\n+                case CENTER:\n+                case FULLSCREEN:\n+                    animationResource = R.anim.fade_in_custom;\n+                    break;\n+                case BOTTOM:\n+                    animationResource = R.anim.slide_up_custom;\n+                    break;\n+                default:\n+                    animationResource = R.anim.fade_in_custom;\n+            }\n+            Animation anim = AnimationUtils.loadAnimation(getContext(), animationResource);\n+            anim.setDuration(IterableConstants.ITERABLE_IN_APP_ANIMATION_DURATION);\n+            webView.startAnimation(anim);\n+        }\n+    }\n+\n+    private void hideWebView() {\n+        if (shouldAnimate) {\n+            int animationResource;\n+            InAppLayout inAppLayout = getInAppLayout(insetPadding);\n+\n+            switch (inAppLayout) {\n+                case TOP:\n+                    animationResource = R.anim.top_exit;\n+                    break;\n+                case CENTER:\n+                case FULLSCREEN:\n+                    animationResource = R.anim.fade_out_custom;\n+                    break;\n+                case BOTTOM:\n+                    animationResource = R.anim.bottom_exit;\n+                    break;\n+                default:\n+                    animationResource = R.anim.fade_out_custom;\n+            }\n+            Animation anim = AnimationUtils.loadAnimation(getContext(),\n+                    animationResource);\n+            anim.setDuration(IterableConstants.ITERABLE_IN_APP_ANIMATION_DURATION);\n+            webView.startAnimation(anim);\n+        }\n+\n+        Runnable dismissWebviewRunnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                IterableInAppFragmentHTMLNotification.super.dismiss();\n+            }\n+        };\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n+            webView.postOnAnimationDelayed(dismissWebviewRunnable, 400);\n+        } else {\n+            dismissWebviewRunnable.run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 302}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjI3NzM2OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableInAppMessageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDowOToyMVrOHkfz2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDoxODoyOVrOHkgGqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzMTk2MA==", "bodyText": "assertTrue?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508031960", "createdAt": "2020-10-19T20:09:21Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableInAppMessageTest.java", "diffHunk": "@@ -37,11 +37,19 @@ public void testInAppMessageDeserialization() throws Exception {\n                 //Stripping out HTML content from the copy\n                 JSONObject messageJsonHTMLStripped = new JSONObject(messageJson.toString());\n                 JSONObject content = (JSONObject) messageJsonHTMLStripped.get(\"content\");\n+                JSONObject inAppDisplaySettings = content.getJSONObject(\"inAppDisplaySettings\");\n+                assertEquals((Boolean) inAppDisplaySettings.get(\"shouldAnimate\"), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzNjc3OA==", "bodyText": "Actually, you don't need any new code in this file.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508036778", "createdAt": "2020-10-19T20:18:29Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableInAppMessageTest.java", "diffHunk": "@@ -37,11 +37,19 @@ public void testInAppMessageDeserialization() throws Exception {\n                 //Stripping out HTML content from the copy\n                 JSONObject messageJsonHTMLStripped = new JSONObject(messageJson.toString());\n                 JSONObject content = (JSONObject) messageJsonHTMLStripped.get(\"content\");\n+                JSONObject inAppDisplaySettings = content.getJSONObject(\"inAppDisplaySettings\");\n+                assertEquals((Boolean) inAppDisplaySettings.get(\"shouldAnimate\"), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzMTk2MA=="}, "originalCommit": {"oid": "0cea9fbd82be4659a8cda72eb4e09a2d12cc317d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjYzNjAxOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableWebViewClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzozNDo1MlrOHlJcZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1MDo1NFrOHlKDKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxNDA4Ng==", "bodyText": "Why do we set it to GONE here?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508714086", "createdAt": "2020-10-20T17:34:52Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableWebViewClient.java", "diffHunk": "@@ -24,6 +25,7 @@\n     @Override\n     public boolean shouldOverrideUrlLoading(WebView view, String url) {\n         inAppHTMLNotification.onUrlClicked(url);\n+        view.setVisibility(View.GONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f375965e2500b4d788967a66ba26fd93a98f46e3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNDAwOQ==", "bodyText": "Wow.. thank you so much! I dont think we need that code here. Totally forgot to remove this..", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508724009", "createdAt": "2020-10-20T17:50:54Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableWebViewClient.java", "diffHunk": "@@ -24,6 +25,7 @@\n     @Override\n     public boolean shouldOverrideUrlLoading(WebView view, String url) {\n         inAppHTMLNotification.onUrlClicked(url);\n+        view.setVisibility(View.GONE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxNDA4Ng=="}, "originalCommit": {"oid": "f375965e2500b4d788967a66ba26fd93a98f46e3"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Njc3NzYyOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableWebView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxMDo0MlrOHlKznw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoyNDowMlrOHlLT-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczNjQxNQ==", "bodyText": "You can also revert this, since we don't use webViewClient field externally anymore.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508736415", "createdAt": "2020-10-20T18:10:42Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableWebView.java", "diffHunk": "@@ -24,7 +25,7 @@\n      * @param html\n      */\n     void createWithHtml(IterableWebViewClient.HTMLNotificationCallbacks notificationDialog, String html) {\n-        IterableWebViewClient webViewClient = new IterableWebViewClient(notificationDialog);\n+        webViewClient = new IterableWebViewClient(notificationDialog);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a10acae7adb88aac443cd1ece8c44812285b60"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0NDY5OA==", "bodyText": "Missed out this one too... Thanks again", "url": "https://github.com/Iterable/iterable-android-sdk/pull/268#discussion_r508744698", "createdAt": "2020-10-20T18:24:02Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableWebView.java", "diffHunk": "@@ -24,7 +25,7 @@\n      * @param html\n      */\n     void createWithHtml(IterableWebViewClient.HTMLNotificationCallbacks notificationDialog, String html) {\n-        IterableWebViewClient webViewClient = new IterableWebViewClient(notificationDialog);\n+        webViewClient = new IterableWebViewClient(notificationDialog);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczNjQxNQ=="}, "originalCommit": {"oid": "c9a10acae7adb88aac443cd1ece8c44812285b60"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2196, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}