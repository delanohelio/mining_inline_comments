{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNzk3NzI3", "number": 293, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1MjowN1rOFB-1Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozNTowOFrOFCuaTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjIyMjgzOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1MjowN1rOIA6LAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1Mjo1NFrOIA6NUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNDAwMw==", "bodyText": "The names auth and authToken imply different things.. I would expect auth to include email, userId and authToken.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537824003", "createdAt": "2020-12-07T20:52:07Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequest.java", "diffHunk": "@@ -338,4 +340,31 @@ protected void setRetryCount(int count) {\n         this.authToken = authToken;\n         this.legacyCallback = callback;\n     }\n+\n+    public JSONObject toJSONObject() throws JSONException {\n+        JSONObject jsonObject = new JSONObject();\n+        jsonObject.put(\"apiKey\", this.apiKey);\n+        jsonObject.put(\"endPoint\", this.resourcePath);\n+        jsonObject.put(\"auth\", this.authToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a421a559c0378eb79e1d5946bc23f64f6275b549"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNDU5NQ==", "bodyText": "auth itself is an ambiguous term.. Is it auth data? Is it a flag? Is it a token?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537824595", "createdAt": "2020-12-07T20:52:54Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequest.java", "diffHunk": "@@ -338,4 +340,31 @@ protected void setRetryCount(int count) {\n         this.authToken = authToken;\n         this.legacyCallback = callback;\n     }\n+\n+    public JSONObject toJSONObject() throws JSONException {\n+        JSONObject jsonObject = new JSONObject();\n+        jsonObject.put(\"apiKey\", this.apiKey);\n+        jsonObject.put(\"endPoint\", this.resourcePath);\n+        jsonObject.put(\"auth\", this.authToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNDAwMw=="}, "originalCommit": {"oid": "a421a559c0378eb79e1d5946bc23f64f6275b549"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjIzMTQ3OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1NDowOVrOIA6QHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1NDowOVrOIA6QHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNTMxMA==", "bodyText": "Is this deferred to a separate PR?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537825310", "createdAt": "2020-12-07T20:54:09Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -3,17 +3,77 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.android.gms.tasks.Task;\n+\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n public class OfflineRequestProcessor implements RequestProcessor {\n \n+\n     @Override\n     public void processGetRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.IterableActionHandler onCallback) {\n-\n+        //Invoke taskScheduler and add task to database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a421a559c0378eb79e1d5946bc23f64f6275b549"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjIzNzY4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1NTozOVrOIA6Tpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODozMDoxM1rOIBvmxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjIxNQ==", "bodyText": "Can we pass IterableTaskManager as a dependency to this class? This call looks weird.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537826215", "createdAt": "2020-12-07T20:55:39Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -3,17 +3,77 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.android.gms.tasks.Task;\n+\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n public class OfflineRequestProcessor implements RequestProcessor {\n \n+\n     @Override\n     public void processGetRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.IterableActionHandler onCallback) {\n-\n+        //Invoke taskScheduler and add task to database\n     }\n \n     @Override\n     public void processPostRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableApiRequest request = new IterableApiRequest(apiKey, resourcePath, json, IterableApiRequest.POST, authToken, onSuccess, onFailure);\n+        TaskScheduler taskScheduler = new TaskScheduler();\n+        taskScheduler.scheduleTask(request, onSuccess, onFailure);\n+    }\n+}\n+\n+\n+class TaskScheduler {\n+    private final String TAG = \"RequestProcessor\";\n+\n+    static HashMap<String, IterableHelper.SuccessHandler> successCallbackMap = new HashMap<>();\n+    static HashMap<String, IterableHelper.FailureHandler> failureCallbackMap = new HashMap<>();\n+\n+    void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        JSONObject iterableRequestOffline = null;\n+        try {\n+            iterableRequestOffline = request.toJSONObject();\n+        } catch (JSONException e) {\n+            IterableLogger.e(TAG, \"Failed serializating the request for offline execution. Attempting to request the request now...\");\n+            new IterableRequest().execute(request);\n+            return;\n+        }\n+\n+        String taskId = taskManager.createTask(request.resourcePath, IterableTaskType.API, iterableRequestOffline.toString());\n+\n+        successCallbackMap.put(taskId, onSuccess);\n+        failureCallbackMap.put(taskId,onFailure);\n+\n+        processTask();\n+    }\n+\n+    //Temporary function to convert database offline task to ITerableReuqest and execute.\n+    void processTask() {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a421a559c0378eb79e1d5946bc23f64f6275b549"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5OTQ2MA==", "bodyText": "This will eventually be singly invoked during initialization", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r538699460", "createdAt": "2020-12-08T18:30:13Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -3,17 +3,77 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.android.gms.tasks.Task;\n+\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n public class OfflineRequestProcessor implements RequestProcessor {\n \n+\n     @Override\n     public void processGetRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.IterableActionHandler onCallback) {\n-\n+        //Invoke taskScheduler and add task to database\n     }\n \n     @Override\n     public void processPostRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableApiRequest request = new IterableApiRequest(apiKey, resourcePath, json, IterableApiRequest.POST, authToken, onSuccess, onFailure);\n+        TaskScheduler taskScheduler = new TaskScheduler();\n+        taskScheduler.scheduleTask(request, onSuccess, onFailure);\n+    }\n+}\n+\n+\n+class TaskScheduler {\n+    private final String TAG = \"RequestProcessor\";\n+\n+    static HashMap<String, IterableHelper.SuccessHandler> successCallbackMap = new HashMap<>();\n+    static HashMap<String, IterableHelper.FailureHandler> failureCallbackMap = new HashMap<>();\n+\n+    void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        JSONObject iterableRequestOffline = null;\n+        try {\n+            iterableRequestOffline = request.toJSONObject();\n+        } catch (JSONException e) {\n+            IterableLogger.e(TAG, \"Failed serializating the request for offline execution. Attempting to request the request now...\");\n+            new IterableRequest().execute(request);\n+            return;\n+        }\n+\n+        String taskId = taskManager.createTask(request.resourcePath, IterableTaskType.API, iterableRequestOffline.toString());\n+\n+        successCallbackMap.put(taskId, onSuccess);\n+        failureCallbackMap.put(taskId,onFailure);\n+\n+        processTask();\n+    }\n+\n+    //Temporary function to convert database offline task to ITerableReuqest and execute.\n+    void processTask() {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjIxNQ=="}, "originalCommit": {"oid": "a421a559c0378eb79e1d5946bc23f64f6275b549"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjI0MDM2OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1NjoyMlrOIA6VOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo1MTo0NVrOIBDIig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjYxOA==", "bodyText": "I like this approach", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537826618", "createdAt": "2020-12-07T20:56:22Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -3,17 +3,77 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.android.gms.tasks.Task;\n+\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n public class OfflineRequestProcessor implements RequestProcessor {\n \n+\n     @Override\n     public void processGetRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.IterableActionHandler onCallback) {\n-\n+        //Invoke taskScheduler and add task to database\n     }\n \n     @Override\n     public void processPostRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableApiRequest request = new IterableApiRequest(apiKey, resourcePath, json, IterableApiRequest.POST, authToken, onSuccess, onFailure);\n+        TaskScheduler taskScheduler = new TaskScheduler();\n+        taskScheduler.scheduleTask(request, onSuccess, onFailure);\n+    }\n+}\n+\n+\n+class TaskScheduler {\n+    private final String TAG = \"RequestProcessor\";\n+\n+    static HashMap<String, IterableHelper.SuccessHandler> successCallbackMap = new HashMap<>();\n+    static HashMap<String, IterableHelper.FailureHandler> failureCallbackMap = new HashMap<>();\n+\n+    void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        JSONObject iterableRequestOffline = null;\n+        try {\n+            iterableRequestOffline = request.toJSONObject();\n+        } catch (JSONException e) {\n+            IterableLogger.e(TAG, \"Failed serializating the request for offline execution. Attempting to request the request now...\");\n+            new IterableRequest().execute(request);\n+            return;\n+        }\n+\n+        String taskId = taskManager.createTask(request.resourcePath, IterableTaskType.API, iterableRequestOffline.toString());\n+\n+        successCallbackMap.put(taskId, onSuccess);\n+        failureCallbackMap.put(taskId,onFailure);\n+\n+        processTask();\n+    }\n+\n+    //Temporary function to convert database offline task to ITerableReuqest and execute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a421a559c0378eb79e1d5946bc23f64f6275b549"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3MDgyNg==", "bodyText": "\ud83d\ude42", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537970826", "createdAt": "2020-12-08T01:51:45Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -3,17 +3,77 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.android.gms.tasks.Task;\n+\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n public class OfflineRequestProcessor implements RequestProcessor {\n \n+\n     @Override\n     public void processGetRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.IterableActionHandler onCallback) {\n-\n+        //Invoke taskScheduler and add task to database\n     }\n \n     @Override\n     public void processPostRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableApiRequest request = new IterableApiRequest(apiKey, resourcePath, json, IterableApiRequest.POST, authToken, onSuccess, onFailure);\n+        TaskScheduler taskScheduler = new TaskScheduler();\n+        taskScheduler.scheduleTask(request, onSuccess, onFailure);\n+    }\n+}\n+\n+\n+class TaskScheduler {\n+    private final String TAG = \"RequestProcessor\";\n+\n+    static HashMap<String, IterableHelper.SuccessHandler> successCallbackMap = new HashMap<>();\n+    static HashMap<String, IterableHelper.FailureHandler> failureCallbackMap = new HashMap<>();\n+\n+    void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        JSONObject iterableRequestOffline = null;\n+        try {\n+            iterableRequestOffline = request.toJSONObject();\n+        } catch (JSONException e) {\n+            IterableLogger.e(TAG, \"Failed serializating the request for offline execution. Attempting to request the request now...\");\n+            new IterableRequest().execute(request);\n+            return;\n+        }\n+\n+        String taskId = taskManager.createTask(request.resourcePath, IterableTaskType.API, iterableRequestOffline.toString());\n+\n+        successCallbackMap.put(taskId, onSuccess);\n+        failureCallbackMap.put(taskId,onFailure);\n+\n+        processTask();\n+    }\n+\n+    //Temporary function to convert database offline task to ITerableReuqest and execute.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjYxOA=="}, "originalCommit": {"oid": "a421a559c0378eb79e1d5946bc23f64f6275b549"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjI0MjM0OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1Njo1NFrOIA6WeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1Njo1NFrOIA6WeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjkzNw==", "bodyText": "The name of this variable isn't very clear", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537826937", "createdAt": "2020-12-07T20:56:54Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -3,17 +3,77 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.android.gms.tasks.Task;\n+\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n public class OfflineRequestProcessor implements RequestProcessor {\n \n+\n     @Override\n     public void processGetRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.IterableActionHandler onCallback) {\n-\n+        //Invoke taskScheduler and add task to database\n     }\n \n     @Override\n     public void processPostRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableApiRequest request = new IterableApiRequest(apiKey, resourcePath, json, IterableApiRequest.POST, authToken, onSuccess, onFailure);\n+        TaskScheduler taskScheduler = new TaskScheduler();\n+        taskScheduler.scheduleTask(request, onSuccess, onFailure);\n+    }\n+}\n+\n+\n+class TaskScheduler {\n+    private final String TAG = \"RequestProcessor\";\n+\n+    static HashMap<String, IterableHelper.SuccessHandler> successCallbackMap = new HashMap<>();\n+    static HashMap<String, IterableHelper.FailureHandler> failureCallbackMap = new HashMap<>();\n+\n+    void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        JSONObject iterableRequestOffline = null;\n+        try {\n+            iterableRequestOffline = request.toJSONObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a421a559c0378eb79e1d5946bc23f64f6275b549"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Nzc5OTY2OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNTozMDozOFrOIBHw1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNTozMDozOFrOIBHw1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0NjY3Ng==", "bodyText": "Same as in the first review.. does it have to be auth?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r538046676", "createdAt": "2020-12-08T05:30:38Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequest.java", "diffHunk": "@@ -338,4 +340,31 @@ protected void setRetryCount(int count) {\n         this.authToken = authToken;\n         this.legacyCallback = callback;\n     }\n+\n+    public JSONObject toJSONObject() throws JSONException {\n+        JSONObject jsonObject = new JSONObject();\n+        jsonObject.put(\"apiKey\", this.apiKey);\n+        jsonObject.put(\"endPoint\", this.resourcePath);\n+        jsonObject.put(\"authToken\", this.authToken);\n+        jsonObject.put(\"requestType\", this.requestType);\n+        jsonObject.put(\"data\", this.json);\n+        return jsonObject;\n+    }\n+\n+    static IterableApiRequest fromJSON(JSONObject jsonData, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        try {\n+            String apikey = jsonData.getString(\"apiKey\");\n+            String resourcePath = jsonData.getString(\"endPoint\");\n+            String requestType = jsonData.getString(\"requestType\");\n+            String auth = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a4b22714a65fbbf2b82f4c797ffbfc31f9c6e2a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzgwODI4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNTozMzo1OVrOIBH1lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNTozMzo1OVrOIBH1lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0Nzg5Mg==", "bodyText": "Is this an iOS name? Why is it different than resourcePath?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r538047892", "createdAt": "2020-12-08T05:33:59Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequest.java", "diffHunk": "@@ -338,4 +340,31 @@ protected void setRetryCount(int count) {\n         this.authToken = authToken;\n         this.legacyCallback = callback;\n     }\n+\n+    public JSONObject toJSONObject() throws JSONException {\n+        JSONObject jsonObject = new JSONObject();\n+        jsonObject.put(\"apiKey\", this.apiKey);\n+        jsonObject.put(\"endPoint\", this.resourcePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a4b22714a65fbbf2b82f4c797ffbfc31f9c6e2a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDAxODY4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozNTowOFrOICB5QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozNTowOFrOICB5QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5OTEwNQ==", "bodyText": "formatting", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r538999105", "createdAt": "2020-12-09T04:35:08Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -3,17 +3,74 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n public class OfflineRequestProcessor implements RequestProcessor {\n \n+\n     @Override\n     public void processGetRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.IterableActionHandler onCallback) {\n-\n+        //Invoke taskScheduler and add task to database\n     }\n \n     @Override\n     public void processPostRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableApiRequest request = new IterableApiRequest(apiKey, resourcePath, json, IterableApiRequest.POST, authToken, onSuccess, onFailure);\n+        TaskScheduler taskScheduler = new TaskScheduler();\n+        taskScheduler.scheduleTask(request, onSuccess, onFailure);\n+    }\n+}\n+\n+//Placeholder Taskschedular for testing purpose.\n+class TaskScheduler {\n+\n+    static HashMap<String, IterableHelper.SuccessHandler> successCallbackMap = new HashMap<>();\n+    static HashMap<String, IterableHelper.FailureHandler> failureCallbackMap = new HashMap<>();\n+\n+    void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        JSONObject serializedRequest = null;\n+        try {\n+            serializedRequest = request.toJSONObject();\n+        } catch (JSONException e) {\n+            IterableLogger.e(\"RequestProcessor\", \"Failed serializating the request for offline execution. Attempting to request the request now...\");\n+            new IterableRequest().execute(request);\n+            return;\n+        }\n+\n+        String taskId = taskManager.createTask(request.resourcePath, IterableTaskType.API, serializedRequest.toString());\n+\n+        successCallbackMap.put(taskId, onSuccess);\n+        failureCallbackMap.put(taskId, onFailure);\n+\n+        processTasks();\n+    }\n+\n+    //Temporary function to convert database offline task to ITerableReuqest and execute.\n+    void processTasks() {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        ArrayList<String> taskIds = taskManager.getAllTaskIds();\n+        for (String id : taskIds\n+        ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ec5152f53a413cfa848299e0507796f1c58467"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2221, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}