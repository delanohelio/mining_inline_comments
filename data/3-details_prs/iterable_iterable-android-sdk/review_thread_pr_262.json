{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNjQ3ODU0", "number": 262, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOToxMzowMFrOEdWmfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMzo0NjoyMlrOEkWVXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjE0NDYzOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOToxMzowMFrOHIdwEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOToxMzowMFrOHIdwEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYzODA5Ng==", "bodyText": "Hmm at this point I think we should have a common method for handling both normal clicks and back click, since the handling for both is the same.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/262#discussion_r478638096", "createdAt": "2020-08-27T19:13:00Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -252,6 +252,11 @@ public void onUrlClicked(String url) {\n     public void onBackPressed() {\n         IterableApi.sharedInstance.trackInAppClick(messageId, BACK_BUTTON);\n         IterableApi.sharedInstance.trackInAppClose(messageId, BACK_BUTTON, IterableInAppCloseAction.BACK, location);\n+        IterableInAppMessage message = IterableApi.sharedInstance.getInAppManager().getMessageById(messageId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54ba34e0038c16becd11956c32447b0f8dcd2395"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjE0NzYxOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOToxMzo1MlrOHIdx3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOToxNTozOFrOHId1vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYzODU1Nw==", "bodyText": "I think doing setConsumed changes the semantics of what 'consumed' means. Previously it was an indicator that we've sent a consume API call to the server. Now it's not very clear what it means.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/262#discussion_r478638557", "createdAt": "2020-08-27T19:13:52Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppManager.java", "diffHunk": "@@ -235,8 +238,7 @@ public void execute(Uri url) {\n         })) {\n             setRead(message, true);\n             if (consume) {\n-                // Remove the message without tracking\n-                removeMessage(message);\n+                message.setConsumed(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54ba34e0038c16becd11956c32447b0f8dcd2395"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYzOTU1MA==", "bodyText": "Should I introduce new variable - markForRemoval? in inAppMessage?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/262#discussion_r478639550", "createdAt": "2020-08-27T19:15:38Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppManager.java", "diffHunk": "@@ -235,8 +238,7 @@ public void execute(Uri url) {\n         })) {\n             setRead(message, true);\n             if (consume) {\n-                // Remove the message without tracking\n-                removeMessage(message);\n+                message.setConsumed(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYzODU1Nw=="}, "originalCommit": {"oid": "54ba34e0038c16becd11956c32447b0f8dcd2395"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTUwMTA4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMzo0NjoyMlrOHTPnDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyMjoyNlrOHUT0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk0MDc0OQ==", "bodyText": "I think this will track a delete event, unlike the previous code that was calling removeMessage with just one parameter. Is there a reason to use another version of removeMessage here?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/262#discussion_r489940749", "createdAt": "2020-09-17T03:46:22Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -252,6 +253,14 @@ public void onUrlClicked(String url) {\n     public void onBackPressed() {\n         IterableApi.sharedInstance.trackInAppClick(messageId, BACK_BUTTON);\n         IterableApi.sharedInstance.trackInAppClose(messageId, BACK_BUTTON, IterableInAppCloseAction.BACK, location);\n+        processMessageRemoval();\n+    }\n+\n+    private void processMessageRemoval() {\n+        IterableInAppMessage message = IterableApi.sharedInstance.getInAppManager().getMessageById(messageId);\n+        if (message.isMarkedForDeletion() && !message.isConsumed()) {\n+            IterableApi.sharedInstance.getInAppManager().removeMessage(message, IterableInAppDeleteActionType.OTHER, location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9efeae88082a0ea155d6be80c1f47ff4aa8d19a7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1ODIyOA==", "bodyText": "I think we introduced DeleteActionType.Other for this purposes. Also thought it would be better to pass location if we know the context of where the inapp was being displayed.\nMay be we can discuss this in future. Reverting back to using removeMessage with single parameter", "url": "https://github.com/Iterable/iterable-android-sdk/pull/262#discussion_r491058228", "createdAt": "2020-09-18T16:22:26Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppFragmentHTMLNotification.java", "diffHunk": "@@ -252,6 +253,14 @@ public void onUrlClicked(String url) {\n     public void onBackPressed() {\n         IterableApi.sharedInstance.trackInAppClick(messageId, BACK_BUTTON);\n         IterableApi.sharedInstance.trackInAppClose(messageId, BACK_BUTTON, IterableInAppCloseAction.BACK, location);\n+        processMessageRemoval();\n+    }\n+\n+    private void processMessageRemoval() {\n+        IterableInAppMessage message = IterableApi.sharedInstance.getInAppManager().getMessageById(messageId);\n+        if (message.isMarkedForDeletion() && !message.isConsumed()) {\n+            IterableApi.sharedInstance.getInAppManager().removeMessage(message, IterableInAppDeleteActionType.OTHER, location);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk0MDc0OQ=="}, "originalCommit": {"oid": "9efeae88082a0ea155d6be80c1f47ff4aa8d19a7"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2313, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}