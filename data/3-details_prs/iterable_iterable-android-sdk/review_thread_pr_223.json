{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NzUyNzA3", "number": 223, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzowODo1OFrODze--w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDowMDowNFrOD1c44g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzExNjExOnYy", "diffSide": "LEFT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzowODo1OFrOGH-Mxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzowODo1OFrOGH-Mxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMjI5NA==", "bodyText": "Removed redundant import.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r411012294", "createdAt": "2020-04-19T23:08:58Z", "author": {"login": "nkotula"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -7,7 +7,6 @@\n import androidx.annotation.RestrictTo;\n import androidx.core.util.ObjectsCompat;\n \n-import org.json.JSONArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24681786617d2a53ada0ef912a83667832f51573"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzExNzE3OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzowOTozOFrOGH-NPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzowOTozOFrOGH-NPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMjQxMw==", "bodyText": "I reorganized the code here because I find this easier to read, but this is solely a code style change and I could revert this back to one line if that's preferred.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r411012413", "createdAt": "2020-04-19T23:09:38Z", "author": {"login": "nkotula"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -30,8 +30,18 @@\n     private boolean loadedHtmlFromJson = false;\n     private @Nullable IterableInAppStorage inAppStorageInterface;\n \n-    IterableInAppMessage(@NonNull String messageId, @NonNull Content content, @NonNull JSONObject customPayload, @NonNull Date createdAt, @NonNull Date expiresAt, @NonNull Trigger trigger, @Nullable Boolean saveToInbox, @Nullable InboxMetadata inboxMetadata) {\n+    IterableInAppMessage(@NonNull String messageId,\n+                         @NonNull String campaignId,\n+                         @NonNull Content content,\n+                         @NonNull JSONObject customPayload,\n+                         @NonNull Date createdAt,\n+                         @NonNull Date expiresAt,\n+                         @NonNull Trigger trigger,\n+                         @Nullable Boolean saveToInbox,\n+                         @Nullable InboxMetadata inboxMetadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24681786617d2a53ada0ef912a83667832f51573"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzEyMDc2OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzoxMTo0MVrOGH-O1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzoxMTo0MVrOGH-O1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMjgyMQ==", "bodyText": "Again, I find this style of constructor/method invocation where parameters are on individual lines much more readable, but I could very easily revert this as it is only code-style related.  The core change is to simply add the campaignId to the constructor invocation.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r411012821", "createdAt": "2020-04-19T23:11:41Z", "author": {"login": "nkotula"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -306,8 +322,17 @@ static IterableInAppMessage fromJSONObject(@NonNull JSONObject messageJson, @Nul\n         JSONObject inboxPayloadJson = messageJson.optJSONObject(IterableConstants.ITERABLE_IN_APP_INBOX_METADATA);\n         InboxMetadata inboxMetadata = InboxMetadata.fromJSONObject(inboxPayloadJson);\n \n-        IterableInAppMessage message = new IterableInAppMessage(messageId,\n-                new Content(html, padding, backgroundAlpha), customPayload, createdAt, expiresAt, trigger, saveToInbox, inboxMetadata);\n+        IterableInAppMessage message = new IterableInAppMessage(\n+                messageId,\n+                campaignId,\n+                new Content(html, padding, backgroundAlpha),\n+                customPayload,\n+                createdAt,\n+                expiresAt,\n+                trigger,\n+                saveToInbox,\n+                inboxMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24681786617d2a53ada0ef912a83667832f51573"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Nzg2MDUyOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzo1ODozM1rOGKDmFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowNDoxNlrOGLjNbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5Nzg0Nw==", "bodyText": "I'd make it return long and default to 0. Long is here only to serialize/deserialize properly, for a consumer of this API it shouldn't matter whether it is 0 or null.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r413197847", "createdAt": "2020-04-22T17:58:33Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -193,6 +203,11 @@ public String getMessageId() {\n         return messageId;\n     }\n \n+    @Nullable\n+    public Long getCampaignId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "768a55ea6ca04c7ce017c0294216524d7b3abcc2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MzE2NQ==", "bodyText": "Okay, trying some push-back here...  I hope I don't overstep my bounds \ud83d\ude05\nAs a consumer of any API, I actually prefer the distinction between null and a value being present.  null to me clearly states that a value is not present, and more importantly, it shows that a value can be missing.  By changing this to a primitive long, a consumer of this API might assume the value is always present in every message, which could lead to unexpected behavior.  Also, they would not be able to tell the difference between a campaign ID that was missing from the message, and one where the campaign ID is actually 0.\nAnother reason I don't like defaulting to 0 is that it has a kind of \"magic number\" feeling to it.  I as the consumer would have to know what 0 means in the context of this API.  Some maintainer down the line could see a line like this: if (message.getCampaignId() > 0), and think, \"wait, is 0 a valid campaign ID?\"  If instead they saw this:  if (message.getCampaignId() != null) they would immediately know that we're checking if the value is present or not.\nThose are my thoughts on the issue.  After programming in Kotlin for so long, I've become accustomed to the ease-of-use surrounding nullables and leveraging them to alleviate the risks I described above.  I know that Java makes null-checking like this very verbose, so if primitives are still preferred, I will change it as you described \ud83d\ude03", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r413363165", "createdAt": "2020-04-22T22:01:42Z", "author": {"login": "nkotula"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -193,6 +203,11 @@ public String getMessageId() {\n         return messageId;\n     }\n \n+    @Nullable\n+    public Long getCampaignId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5Nzg0Nw=="}, "originalCommit": {"oid": "768a55ea6ca04c7ce017c0294216524d7b3abcc2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MzYzMg==", "bodyText": "It is actually present in responses to all API calls to inApp/getMessages per our API spec.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r413363632", "createdAt": "2020-04-22T22:02:45Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -193,6 +203,11 @@ public String getMessageId() {\n         return messageId;\n     }\n \n+    @Nullable\n+    public Long getCampaignId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5Nzg0Nw=="}, "originalCommit": {"oid": "768a55ea6ca04c7ce017c0294216524d7b3abcc2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2Mzk2MA==", "bodyText": "Because of this I'm not sure additional null-checking and validation is necessary here..", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r413363960", "createdAt": "2020-04-22T22:03:28Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -193,6 +203,11 @@ public String getMessageId() {\n         return messageId;\n     }\n \n+    @Nullable\n+    public Long getCampaignId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5Nzg0Nw=="}, "originalCommit": {"oid": "768a55ea6ca04c7ce017c0294216524d7b3abcc2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NDM3NQ==", "bodyText": "Oh!  Lol that settles that!  I'll change it \ud83d\udc4d", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r413364375", "createdAt": "2020-04-22T22:04:26Z", "author": {"login": "nkotula"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -193,6 +203,11 @@ public String getMessageId() {\n         return messageId;\n     }\n \n+    @Nullable\n+    public Long getCampaignId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5Nzg0Nw=="}, "originalCommit": {"oid": "768a55ea6ca04c7ce017c0294216524d7b3abcc2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NDgzOQ==", "bodyText": "Sorry for the confusion..", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r413364839", "createdAt": "2020-04-22T22:05:31Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -193,6 +203,11 @@ public String getMessageId() {\n         return messageId;\n     }\n \n+    @Nullable\n+    public Long getCampaignId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5Nzg0Nw=="}, "originalCommit": {"oid": "768a55ea6ca04c7ce017c0294216524d7b3abcc2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NTc2Ng==", "bodyText": "And campaignId is also declared as plain int (should make it long at some point) elsewhere, in IterableAttributionInfo. I would make it long in this case, the only reason to keep it nullable internally is to make the tests pass until we add campaignId to all test JSON payloads (how did I even miss that? \ud83e\udd26\u200d\u2642\ufe0f).", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r413365766", "createdAt": "2020-04-22T22:07:16Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -193,6 +203,11 @@ public String getMessageId() {\n         return messageId;\n     }\n \n+    @Nullable\n+    public Long getCampaignId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5Nzg0Nw=="}, "originalCommit": {"oid": "768a55ea6ca04c7ce017c0294216524d7b3abcc2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NzY5MA==", "bodyText": "Oh!  Okay, so do the check for null and convert null to 0 in the getter?\nEDIT: That should bridge the gap between this first pass at getting the ID into IterableInAppMessage and when the rest of the API catches up, correct?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r413367690", "createdAt": "2020-04-22T22:11:23Z", "author": {"login": "nkotula"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -193,6 +203,11 @@ public String getMessageId() {\n         return messageId;\n     }\n \n+    @Nullable\n+    public Long getCampaignId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5Nzg0Nw=="}, "originalCommit": {"oid": "768a55ea6ca04c7ce017c0294216524d7b3abcc2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1OTU5MA==", "bodyText": "So... @vbabenkoru I just did a check with an SSL proxy, and I see that when I send proofs to my device, the campaignId is indeed not present in the raw message JSON with calls to getMessages?email=my.email.here@example.com.  Are we sure we shouldn't keep this nullable?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r414759590", "createdAt": "2020-04-24T17:56:29Z", "author": {"login": "nkotula"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -193,6 +203,11 @@ public String getMessageId() {\n         return messageId;\n     }\n \n+    @Nullable\n+    public Long getCampaignId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5Nzg0Nw=="}, "originalCommit": {"oid": "768a55ea6ca04c7ce017c0294216524d7b3abcc2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2MTY3OQ==", "bodyText": "@nkotula Just went to check again.. You're right, sorry for the confusion. It totally makes sense to make it a nullable Long.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r414761679", "createdAt": "2020-04-24T17:59:46Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -193,6 +203,11 @@ public String getMessageId() {\n         return messageId;\n     }\n \n+    @Nullable\n+    public Long getCampaignId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5Nzg0Nw=="}, "originalCommit": {"oid": "768a55ea6ca04c7ce017c0294216524d7b3abcc2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2NDM5OA==", "bodyText": "Okay, cool beans.  I'll go ahead and revert that change.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r414764398", "createdAt": "2020-04-24T18:04:16Z", "author": {"login": "nkotula"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -193,6 +203,11 @@ public String getMessageId() {\n         return messageId;\n     }\n \n+    @Nullable\n+    public Long getCampaignId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5Nzg0Nw=="}, "originalCommit": {"oid": "768a55ea6ca04c7ce017c0294216524d7b3abcc2"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Mzc0NDM0OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDowMDowNFrOGK5uxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjozMjoxMFrOGMsh5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NDgwNA==", "bodyText": "Why not just use an inline ternary rather than creating separate retrieval/validation methods?\nfinal Long campaignId = (messageJson.isNull(IterableConstants.KEY_CAMPAIGN_ID)) ? null :\njsonObject.optLong(IterableConstants.KEY_CAMPAIGN_ID);", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r414084804", "createdAt": "2020-04-23T20:00:04Z", "author": {"login": "davidtruong"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -281,6 +299,7 @@ static IterableInAppMessage fromJSONObject(@NonNull JSONObject messageJson, @Nul\n         }\n \n         String messageId = messageJson.optString(IterableConstants.KEY_MESSAGE_ID);\n+        final Long campaignId = IterableUtil.retrieveValidCampaignIdOrNull(messageJson, IterableConstants.KEY_CAMPAIGN_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "079f84fe0d797d99b2590bdb9f146af22259724f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjA2Mg==", "bodyText": "I see from the comments that you are checking for a valid non negative campaignId. Not sure if that check is necessary.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r414092062", "createdAt": "2020-04-23T20:12:25Z", "author": {"login": "davidtruong"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -281,6 +299,7 @@ static IterableInAppMessage fromJSONObject(@NonNull JSONObject messageJson, @Nul\n         }\n \n         String messageId = messageJson.optString(IterableConstants.KEY_MESSAGE_ID);\n+        final Long campaignId = IterableUtil.retrieveValidCampaignIdOrNull(messageJson, IterableConstants.KEY_CAMPAIGN_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NDgwNA=="}, "originalCommit": {"oid": "079f84fe0d797d99b2590bdb9f146af22259724f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwMzI4OQ==", "bodyText": "My thought was to centralize validation logic to be used elsewhere.  That, and I had it in my head that it shouldn't be the responsibility of IterableInAppMessage to know how to validate the ID, just in case that validation could ever change in the future.  That may not be relevant here, but that's what I was considering when breaking this out into a Util method.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r414103289", "createdAt": "2020-04-23T20:31:23Z", "author": {"login": "nkotula"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -281,6 +299,7 @@ static IterableInAppMessage fromJSONObject(@NonNull JSONObject messageJson, @Nul\n         }\n \n         String messageId = messageJson.optString(IterableConstants.KEY_MESSAGE_ID);\n+        final Long campaignId = IterableUtil.retrieveValidCampaignIdOrNull(messageJson, IterableConstants.KEY_CAMPAIGN_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NDgwNA=="}, "originalCommit": {"oid": "079f84fe0d797d99b2590bdb9f146af22259724f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc4MDIxOQ==", "bodyText": "@nkotula Do you prefer to validate all data from API responses? My thought was that if there is an API contract, we shouldn't have to do client-side validation (unless it is something that may cause crashes).", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r414780219", "createdAt": "2020-04-24T18:31:10Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -281,6 +299,7 @@ static IterableInAppMessage fromJSONObject(@NonNull JSONObject messageJson, @Nul\n         }\n \n         String messageId = messageJson.optString(IterableConstants.KEY_MESSAGE_ID);\n+        final Long campaignId = IterableUtil.retrieveValidCampaignIdOrNull(messageJson, IterableConstants.KEY_CAMPAIGN_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NDgwNA=="}, "originalCommit": {"oid": "079f84fe0d797d99b2590bdb9f146af22259724f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5MTAzNg==", "bodyText": "I do prefer to sanity-check data integrity on the client-side, but that is totally a personal preference.  To me, having both client-side and server-side validation of the same data makes the system as a whole more resilient because they can provide checks against each other, but it comes at the cost of a larger burden on the maintainers.  I will defer to your team as to whether this should be moved to an inline ternary operation as David mentioned.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r414791036", "createdAt": "2020-04-24T18:49:53Z", "author": {"login": "nkotula"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -281,6 +299,7 @@ static IterableInAppMessage fromJSONObject(@NonNull JSONObject messageJson, @Nul\n         }\n \n         String messageId = messageJson.optString(IterableConstants.KEY_MESSAGE_ID);\n+        final Long campaignId = IterableUtil.retrieveValidCampaignIdOrNull(messageJson, IterableConstants.KEY_CAMPAIGN_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NDgwNA=="}, "originalCommit": {"oid": "079f84fe0d797d99b2590bdb9f146af22259724f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk2NTY2OQ==", "bodyText": "I think it's ok to keep it. Thanks!", "url": "https://github.com/Iterable/iterable-android-sdk/pull/223#discussion_r415965669", "createdAt": "2020-04-27T16:32:10Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableInAppMessage.java", "diffHunk": "@@ -281,6 +299,7 @@ static IterableInAppMessage fromJSONObject(@NonNull JSONObject messageJson, @Nul\n         }\n \n         String messageId = messageJson.optString(IterableConstants.KEY_MESSAGE_ID);\n+        final Long campaignId = IterableUtil.retrieveValidCampaignIdOrNull(messageJson, IterableConstants.KEY_CAMPAIGN_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NDgwNA=="}, "originalCommit": {"oid": "079f84fe0d797d99b2590bdb9f146af22259724f"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2266, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}