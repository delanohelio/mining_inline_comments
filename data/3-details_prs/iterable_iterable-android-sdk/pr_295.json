{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3ODA5MjE3", "number": 295, "title": "[MOB-2372][1] Refactor network requests and task storage", "bodyText": "\ud83d\udd39 Jira Ticket(s) if any\n\nMOB-2372\n\n\u270f\ufe0f Description\nPart 1 of MOB-2372. Multiple refactors to IterableRequest and IterableTaskManager. See individual commits for the steps and individual changes.", "createdAt": "2020-12-12T05:53:39Z", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295", "merged": true, "mergeCommit": {"oid": "09d9e4002ca9ae31dca5c6416b460447550e67de"}, "closed": true, "closedAt": "2020-12-15T17:17:28Z", "author": {"login": "vbabenkoru"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlWLkjgH2gAyNTM3ODA5MjE3OjcxNmFlNjg3YzJmYjBhYTU4NDllMzZjMzYwM2RkNGEwMzEzNDkzZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmdfkQgFqTU1MjY3ODg5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "716ae687c2fb0aa5849e36c3603dd4a0313493e4", "author": {"user": {"login": "vbabenkoru", "name": "Victor Babenko"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/716ae687c2fb0aa5849e36c3603dd4a0313493e4", "committedDate": "2020-12-12T06:02:59Z", "message": "Move column constants from IterableTask to IterableTaskManager\n\nMaking IterableTask a POJO, and all db knowledge lies in IterableTaskManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "343f3a4e8084dbae369fa0b95a3aa08450e7f643", "author": {"user": {"login": "vbabenkoru", "name": "Victor Babenko"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/343f3a4e8084dbae369fa0b95a3aa08450e7f643", "committedDate": "2020-12-12T06:02:59Z", "message": "Add nextTask query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afb187868a57f3f65b67ea7c11acc87ebd4e821c", "author": {"user": {"login": "vbabenkoru", "name": "Victor Babenko"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/afb187868a57f3f65b67ea7c11acc87ebd4e821c", "committedDate": "2020-12-12T06:02:59Z", "message": "Rename IterableTaskManager to IterableTaskStorage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4f693da77689c966cdb53442a5c6be554fe5664", "author": {"user": {"login": "vbabenkoru", "name": "Victor Babenko"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/e4f693da77689c966cdb53442a5c6be554fe5664", "committedDate": "2020-12-12T06:02:59Z", "message": "Refactor IterableRequest: create IterableApiResponse to hold responses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c68bb1ead1f263152929d96f24197d9339289558", "author": {"user": {"login": "vbabenkoru", "name": "Victor Babenko"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/c68bb1ead1f263152929d96f24197d9339289558", "committedDate": "2020-12-12T06:02:59Z", "message": "IterableRequest: move out JWT and retry determination to onPostExecute"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2bcef3c3da1786836e4a2de5a6ef3641c4f7298", "author": {"user": {"login": "vbabenkoru", "name": "Victor Babenko"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/a2bcef3c3da1786836e4a2de5a6ef3641c4f7298", "committedDate": "2020-12-12T06:02:59Z", "message": "IterableRequest: Extract request handling into static methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1349c2c381ad3b5c7841ac8e32ad536c3392a53", "author": {"user": {"login": "vbabenkoru", "name": "Victor Babenko"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/c1349c2c381ad3b5c7841ac8e32ad536c3392a53", "committedDate": "2020-12-11T00:06:33Z", "message": "Rename IterableRequest -> IterableRequestTask"}, "afterCommit": {"oid": "6b99a9a36ad2ad310eeb431aec1b660a636491ee", "author": {"user": {"login": "vbabenkoru", "name": "Victor Babenko"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/6b99a9a36ad2ad310eeb431aec1b660a636491ee", "committedDate": "2020-12-12T06:02:59Z", "message": "Rename IterableRequest -> IterableRequestTask"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506", "author": {"user": {"login": "vbabenkoru", "name": "Victor Babenko"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/458607a1f40f7fd9c10413f3e8e6964e0047d506", "committedDate": "2020-12-12T06:11:16Z", "message": "Rename IterableRequest -> IterableRequestTask"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b99a9a36ad2ad310eeb431aec1b660a636491ee", "author": {"user": {"login": "vbabenkoru", "name": "Victor Babenko"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/6b99a9a36ad2ad310eeb431aec1b660a636491ee", "committedDate": "2020-12-12T06:02:59Z", "message": "Rename IterableRequest -> IterableRequestTask"}, "afterCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506", "author": {"user": {"login": "vbabenkoru", "name": "Victor Babenko"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/458607a1f40f7fd9c10413f3e8e6964e0047d506", "committedDate": "2020-12-12T06:11:16Z", "message": "Rename IterableRequest -> IterableRequestTask"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTQ0MjI1", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#pullrequestreview-550944225", "createdAt": "2020-12-13T18:01:55Z", "commit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODowMTo1NVrOIE3ctg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODowMTo1NVrOIE3ctg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3MzY4Ng==", "bodyText": "Hmm not sure if there will be any behavorial change from moving this from doInBackground to onPostExecute", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r541973686", "createdAt": "2020-12-13T18:01:55Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequestTask.java", "diffHunk": "@@ -264,23 +262,27 @@ protected void onPostExecute(String s) {\n             handler.postDelayed(new Runnable() {\n                 @Override\n                 public void run() {\n-                    request.execute(iterableApiRequest);\n+                    requestTask.execute(iterableApiRequest);\n                 }\n             }, delay);\n             return;\n-        } else if (success) {\n+        } else if (response.success) {\n+            IterableApi.getInstance().getAuthManager().resetFailedAuth();\n             if (iterableApiRequest.successCallback != null) {\n-                iterableApiRequest.successCallback.onSuccess(requestResultJson);\n+                iterableApiRequest.successCallback.onSuccess(response.responseJson);\n             }\n         } else {\n+            if (matchesErrorCode(response.responseJson, ERROR_CODE_INVALID_JWT_PAYLOAD)) {\n+                IterableApi.getInstance().getAuthManager().requestNewAuthToken(true);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 210}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTQ1MTM0", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#pullrequestreview-550945134", "createdAt": "2020-12-13T18:11:28Z", "commit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoxMToyOFrOIE3jFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoxMToyOFrOIE3jFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NTMxNw==", "bodyText": "On the first glance, I felt nextTask should have been relative to some task. Or we can document that it returns a task from the top of the taskStorage table.\nI felt,\nnextTask implies that the task it returns is next to something. But it actually is the first task. It assumes that the previous ones should be deleted. May be it could be nextTaskTo(Task task1) which could delete the existing task and then pass the next one as Next Task.\nEither the next task should delete the current one in context and then pass the top one. Or the name should be something different. Like GetOldestTask, GetFirstTask, GetTask. Or we can just change the description of method on top.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r541975317", "createdAt": "2020-12-13T18:11:28Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableTaskStorage.java", "diffHunk": "@@ -202,11 +228,28 @@ IterableTask getTask(String id) {\n         return taskIds;\n     }\n \n+    /**\n+     * Returns the next scheduled task for processing\n+     * @return next scheduled {@link IterableTask}\n+     */\n+    @Nullable\n+    IterableTask nextTask() {\n+        Cursor cursor = database.rawQuery(\"select * from OfflineTask order by scheduled limit 1\", null);\n+        IterableTask task = null;\n+        if (cursor.moveToFirst()) {\n+            task = createTaskFromCursor(cursor);\n+        }\n+        cursor.close();\n+        return task;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 283}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTQ1NjM0", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#pullrequestreview-550945634", "createdAt": "2020-12-13T18:17:53Z", "commit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoxNzo1M1rOIE3nhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoxNzo1M1rOIE3nhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NjQ1NA==", "bodyText": "I think the best place to deleteTask will be when we get task completion callback. This will also mean that when we ask for nextTask, we might still get the top one which is not deleted yet. Hence the point of nextTask being relative to another/existing task.\nWe can totally defer this for next version if applicable as there is no retries to be done in initial version.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r541976454", "createdAt": "2020-12-13T18:17:53Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -52,13 +52,13 @@ void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHa\n \n     //Temporary function to convert database offline task to ITerableReuqest and execute.\n     void processTasks() {\n-        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n-        ArrayList<String> taskIds = taskManager.getAllTaskIds();\n+        IterableTaskStorage taskStorage = IterableTaskStorage.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        ArrayList<String> taskIds = taskStorage.getAllTaskIds();\n         for (String id : taskIds) {\n             try {\n-                IterableApiRequest request = makeRequestFromTask(taskManager.getTask(id));\n-                new IterableRequest().execute(request);\n-                taskManager.deleteTask(id);\n+                IterableApiRequest request = makeRequestFromTask(taskStorage.getTask(id));\n+                new IterableRequestTask().execute(request);\n+                taskStorage.deleteTask(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTQ2MjEw", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#pullrequestreview-550946210", "createdAt": "2020-12-13T18:24:52Z", "commit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoyNDo1MlrOIE3sFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoyNDo1MlrOIE3sFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NzYyMA==", "bodyText": "Not sure but it's safe to have this function static right?\nWhat happens when multiple requests are fired together? How does the static method behaves in that scenario? Does a static function wait for other tasks to execute?\nWill look it up though... \ud83d\udc4d", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r541977620", "createdAt": "2020-12-13T18:24:52Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequestTask.java", "diffHunk": "@@ -175,58 +176,64 @@ protected String doInBackground(IterableApiRequest... params) {\n                         errorMessage = jsonResponse.getString(\"msg\");\n                     } else if (responseCode >= 500) {\n                         errorMessage = \"Internal Server Error\";\n-                        retryRequest = true;\n                     }\n \n-                    handleFailure(errorMessage, jsonResponse);\n+                    apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, errorMessage);\n                 } else if (responseCode == 200) {\n                     if (error == null && requestResult.length() > 0) {\n                         if (jsonError != null) {\n-                            handleFailure(\"Could not parse json: \" + jsonError, null);\n+                            apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"Could not parse json: \" + jsonError);\n                         } else if (jsonResponse != null) {\n-                            IterableApi.getInstance().getAuthManager().resetFailedAuth();\n-                            handleSuccess(jsonResponse);\n+                            apiResponse = IterableApiResponse.success(responseCode, requestResult, jsonResponse);\n                         } else {\n-                            handleFailure(\"Response is not a JSON object\", jsonResponse);\n+                            apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"Response is not a JSON object\");\n                         }\n                     } else if (error == null && requestResult.length() == 0) {\n-                        handleFailure(\"No data received\", jsonResponse);\n+                        apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"No data received\");\n                     } else if (error != null) {\n-                        handleFailure(error, null);\n+                        apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, error);\n                     }\n                 } else {\n-                    handleFailure(\"Received non-200 response: \" + responseCode, jsonResponse);\n+                    apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"Received non-200 response: \" + responseCode);\n                 }\n             } catch (JSONException e) {\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } catch (IOException e) {\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } catch (ArrayIndexOutOfBoundsException e) {\n                 // This exception is sometimes thrown from the inside of HttpUrlConnection/OkHttp\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } catch (Exception e) {\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } finally {\n                 if (urlConnection != null) {\n                     urlConnection.disconnect();\n                 }\n             }\n             IterableLogger.v(TAG, \"======================================\");\n         }\n-        return requestResult;\n+        return apiResponse;\n     }\n \n-    private void logError(String baseUrl, Exception e) {\n+    private static boolean matchesErrorCode(JSONObject jsonResponse, String errorCode) {\n+        try {\n+            return jsonResponse != null && jsonResponse.has(\"code\") && jsonResponse.getString(\"code\").equals(errorCode);\n+        } catch (JSONException e) {\n+            return false;\n+        }\n+    }\n+\n+    private static void logError(IterableApiRequest iterableApiRequest, String baseUrl, Exception e) {\n         IterableLogger.e(TAG, \"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\\n\" +\n                 \"Exception occurred for : \" + baseUrl + iterableApiRequest.resourcePath);\n         IterableLogger.e(TAG, e.getMessage(), e);\n     }\n \n-    private String buildHeaderString(HttpURLConnection urlConnection) {\n+    private static String buildHeaderString(HttpURLConnection urlConnection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTQ2Mjcx", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#pullrequestreview-550946271", "createdAt": "2020-12-13T18:25:36Z", "commit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoyNTozNlrOIE3slQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoyNTozNlrOIE3slQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3Nzc0OQ==", "bodyText": "\ud83d\udc4c", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r541977749", "createdAt": "2020-12-13T18:25:36Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequestTask.java", "diffHunk": "@@ -368,3 +370,27 @@ static IterableApiRequest fromJSON(JSONObject jsonData, @Nullable IterableHelper\n         return null;\n     }\n }\n+\n+class IterableApiResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 230}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTQ2MzEw", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#pullrequestreview-550946310", "createdAt": "2020-12-13T18:26:11Z", "commit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoyNjoxMlrOIE3s1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoyNjoxMlrOIE3s1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NzgxNQ==", "bodyText": "\ud83d\udc4c", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r541977815", "createdAt": "2020-12-13T18:26:12Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableTaskStorage.java", "diffHunk": "@@ -119,76 +139,82 @@ IterableTask getTask(String id) {\n         if (!isDatabaseReady()) {\n             return null;\n         }\n+        Cursor cursor = database.rawQuery(QUERY_GET_TASK_BY_ID, new String[]{id});\n \n-        String name = null;\n+        if (!cursor.moveToFirst()) {\n+            IterableLogger.d(TAG, \"No record found\");\n+            return null;\n+        }\n+\n+        IterableTask task = createTaskFromCursor(cursor);\n+\n+        IterableLogger.v(TAG, \"Found \" + cursor.getColumnCount() + \"columns\");\n+        cursor.close();\n+        return task;\n+    }\n+\n+    private IterableTask createTaskFromCursor(Cursor cursor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 161}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTQ2NTc0", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#pullrequestreview-550946574", "createdAt": "2020-12-13T18:29:09Z", "commit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ee88a34335c6981c0d98325421b1f91c966ce53", "author": {"user": {"login": "vbabenkoru", "name": "Victor Babenko"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/5ee88a34335c6981c0d98325421b1f91c966ce53", "committedDate": "2020-12-15T04:49:05Z", "message": "Rename nextTask -> getNextScheduledTask"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjc4ODkw", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#pullrequestreview-552678890", "createdAt": "2020-12-15T17:08:05Z", "commit": {"oid": "5ee88a34335c6981c0d98325421b1f91c966ce53"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 563, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}