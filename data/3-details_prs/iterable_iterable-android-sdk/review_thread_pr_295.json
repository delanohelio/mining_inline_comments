{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3ODA5MjE3", "number": 295, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODowMTo1NVrOFEsbHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoyNjoxMlrOFEspQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDY2NDYzOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequestTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODowMTo1NVrOIE3ctg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzowNzowOVrOIE-BPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3MzY4Ng==", "bodyText": "Hmm not sure if there will be any behavorial change from moving this from doInBackground to onPostExecute", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r541973686", "createdAt": "2020-12-13T18:01:55Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequestTask.java", "diffHunk": "@@ -264,23 +262,27 @@ protected void onPostExecute(String s) {\n             handler.postDelayed(new Runnable() {\n                 @Override\n                 public void run() {\n-                    request.execute(iterableApiRequest);\n+                    requestTask.execute(iterableApiRequest);\n                 }\n             }, delay);\n             return;\n-        } else if (success) {\n+        } else if (response.success) {\n+            IterableApi.getInstance().getAuthManager().resetFailedAuth();\n             if (iterableApiRequest.successCallback != null) {\n-                iterableApiRequest.successCallback.onSuccess(requestResultJson);\n+                iterableApiRequest.successCallback.onSuccess(response.responseJson);\n             }\n         } else {\n+            if (matchesErrorCode(response.responseJson, ERROR_CODE_INVALID_JWT_PAYLOAD)) {\n+                IterableApi.getInstance().getAuthManager().requestNewAuthToken(true);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4MTM0MQ==", "bodyText": "The only functional difference I can think of is that requestNewAuthToken will be called on the main thread now. It does call the handler on a background anyway, so it shouldn't matter.\nThe intent of this change is to separate pure network calls from other logic. The method that makes the request is already long and complicated on its own, and I wanted to extract that logic to use in an offline mode processor, without using the async code provided by IterableRequestTask.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r542081341", "createdAt": "2020-12-14T03:07:09Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequestTask.java", "diffHunk": "@@ -264,23 +262,27 @@ protected void onPostExecute(String s) {\n             handler.postDelayed(new Runnable() {\n                 @Override\n                 public void run() {\n-                    request.execute(iterableApiRequest);\n+                    requestTask.execute(iterableApiRequest);\n                 }\n             }, delay);\n             return;\n-        } else if (success) {\n+        } else if (response.success) {\n+            IterableApi.getInstance().getAuthManager().resetFailedAuth();\n             if (iterableApiRequest.successCallback != null) {\n-                iterableApiRequest.successCallback.onSuccess(requestResultJson);\n+                iterableApiRequest.successCallback.onSuccess(response.responseJson);\n             }\n         } else {\n+            if (matchesErrorCode(response.responseJson, ERROR_CODE_INVALID_JWT_PAYLOAD)) {\n+                IterableApi.getInstance().getAuthManager().requestNewAuthToken(true);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3MzY4Ng=="}, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDY3ODcyOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableTaskStorage.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoxMToyOFrOIE3jFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDo0OToyMFrOIF4yFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NTMxNw==", "bodyText": "On the first glance, I felt nextTask should have been relative to some task. Or we can document that it returns a task from the top of the taskStorage table.\nI felt,\nnextTask implies that the task it returns is next to something. But it actually is the first task. It assumes that the previous ones should be deleted. May be it could be nextTaskTo(Task task1) which could delete the existing task and then pass the next one as Next Task.\nEither the next task should delete the current one in context and then pass the top one. Or the name should be something different. Like GetOldestTask, GetFirstTask, GetTask. Or we can just change the description of method on top.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r541975317", "createdAt": "2020-12-13T18:11:28Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableTaskStorage.java", "diffHunk": "@@ -202,11 +228,28 @@ IterableTask getTask(String id) {\n         return taskIds;\n     }\n \n+    /**\n+     * Returns the next scheduled task for processing\n+     * @return next scheduled {@link IterableTask}\n+     */\n+    @Nullable\n+    IterableTask nextTask() {\n+        Cursor cursor = database.rawQuery(\"select * from OfflineTask order by scheduled limit 1\", null);\n+        IterableTask task = null;\n+        if (cursor.moveToFirst()) {\n+            task = createTaskFromCursor(cursor);\n+        }\n+        cursor.close();\n+        return task;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4MjkxOQ==", "bodyText": "I was mirroring iOS naming scheme in this case. nextTask in this case means 'next task to be processed', not adjacent or being in some kind of proximity. How exactly it is determined which task should be processed next should ideally be contained in a single class, in this case IterableTaskStorage.\nSince tasks are not physically located within any kind of space, I think nextTaskTo is even less clear.\nI can think of 2 solutions:\n\nAdd description to this method\nCall it getNextScheduledTask() or something similar. nextTask is not very descriptive, I agree.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r542082919", "createdAt": "2020-12-14T03:12:40Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableTaskStorage.java", "diffHunk": "@@ -202,11 +228,28 @@ IterableTask getTask(String id) {\n         return taskIds;\n     }\n \n+    /**\n+     * Returns the next scheduled task for processing\n+     * @return next scheduled {@link IterableTask}\n+     */\n+    @Nullable\n+    IterableTask nextTask() {\n+        Cursor cursor = database.rawQuery(\"select * from OfflineTask order by scheduled limit 1\", null);\n+        IterableTask task = null;\n+        if (cursor.moveToFirst()) {\n+            task = createTaskFromCursor(cursor);\n+        }\n+        cursor.close();\n+        return task;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NTMxNw=="}, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0Njk0OA==", "bodyText": "Adding description should be good \ud83d\udc4d", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r542146948", "createdAt": "2020-12-14T06:45:08Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableTaskStorage.java", "diffHunk": "@@ -202,11 +228,28 @@ IterableTask getTask(String id) {\n         return taskIds;\n     }\n \n+    /**\n+     * Returns the next scheduled task for processing\n+     * @return next scheduled {@link IterableTask}\n+     */\n+    @Nullable\n+    IterableTask nextTask() {\n+        Cursor cursor = database.rawQuery(\"select * from OfflineTask order by scheduled limit 1\", null);\n+        IterableTask task = null;\n+        if (cursor.moveToFirst()) {\n+            task = createTaskFromCursor(cursor);\n+        }\n+        cursor.close();\n+        return task;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NTMxNw=="}, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MzMxMQ==", "bodyText": "Hm, wait, it already has a description.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r543043311", "createdAt": "2020-12-15T04:46:51Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableTaskStorage.java", "diffHunk": "@@ -202,11 +228,28 @@ IterableTask getTask(String id) {\n         return taskIds;\n     }\n \n+    /**\n+     * Returns the next scheduled task for processing\n+     * @return next scheduled {@link IterableTask}\n+     */\n+    @Nullable\n+    IterableTask nextTask() {\n+        Cursor cursor = database.rawQuery(\"select * from OfflineTask order by scheduled limit 1\", null);\n+        IterableTask task = null;\n+        if (cursor.moveToFirst()) {\n+            task = createTaskFromCursor(cursor);\n+        }\n+        cursor.close();\n+        return task;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NTMxNw=="}, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0NDExOA==", "bodyText": "Renamed to getNextScheduledTask.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r543044118", "createdAt": "2020-12-15T04:49:20Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableTaskStorage.java", "diffHunk": "@@ -202,11 +228,28 @@ IterableTask getTask(String id) {\n         return taskIds;\n     }\n \n+    /**\n+     * Returns the next scheduled task for processing\n+     * @return next scheduled {@link IterableTask}\n+     */\n+    @Nullable\n+    IterableTask nextTask() {\n+        Cursor cursor = database.rawQuery(\"select * from OfflineTask order by scheduled limit 1\", null);\n+        IterableTask task = null;\n+        if (cursor.moveToFirst()) {\n+            task = createTaskFromCursor(cursor);\n+        }\n+        cursor.close();\n+        return task;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NTMxNw=="}, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDY4ODkxOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoxNzo1M1rOIE3nhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzoxNDowM1rOIE-IuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NjQ1NA==", "bodyText": "I think the best place to deleteTask will be when we get task completion callback. This will also mean that when we ask for nextTask, we might still get the top one which is not deleted yet. Hence the point of nextTask being relative to another/existing task.\nWe can totally defer this for next version if applicable as there is no retries to be done in initial version.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r541976454", "createdAt": "2020-12-13T18:17:53Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -52,13 +52,13 @@ void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHa\n \n     //Temporary function to convert database offline task to ITerableReuqest and execute.\n     void processTasks() {\n-        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n-        ArrayList<String> taskIds = taskManager.getAllTaskIds();\n+        IterableTaskStorage taskStorage = IterableTaskStorage.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        ArrayList<String> taskIds = taskStorage.getAllTaskIds();\n         for (String id : taskIds) {\n             try {\n-                IterableApiRequest request = makeRequestFromTask(taskManager.getTask(id));\n-                new IterableRequest().execute(request);\n-                taskManager.deleteTask(id);\n+                IterableApiRequest request = makeRequestFromTask(taskStorage.getTask(id));\n+                new IterableRequestTask().execute(request);\n+                taskStorage.deleteTask(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4MzI1Nw==", "bodyText": "Yeah, this is addressed in follow-up PRs.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r542083257", "createdAt": "2020-12-14T03:14:03Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -52,13 +52,13 @@ void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHa\n \n     //Temporary function to convert database offline task to ITerableReuqest and execute.\n     void processTasks() {\n-        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n-        ArrayList<String> taskIds = taskManager.getAllTaskIds();\n+        IterableTaskStorage taskStorage = IterableTaskStorage.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        ArrayList<String> taskIds = taskStorage.getAllTaskIds();\n         for (String id : taskIds) {\n             try {\n-                IterableApiRequest request = makeRequestFromTask(taskManager.getTask(id));\n-                new IterableRequest().execute(request);\n-                taskManager.deleteTask(id);\n+                IterableApiRequest request = makeRequestFromTask(taskStorage.getTask(id));\n+                new IterableRequestTask().execute(request);\n+                taskStorage.deleteTask(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NjQ1NA=="}, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDY5OTE1OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequestTask.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoyNDo1MlrOIE3sFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzoyMToyMlrOIE-Qnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NzYyMA==", "bodyText": "Not sure but it's safe to have this function static right?\nWhat happens when multiple requests are fired together? How does the static method behaves in that scenario? Does a static function wait for other tasks to execute?\nWill look it up though... \ud83d\udc4d", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r541977620", "createdAt": "2020-12-13T18:24:52Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequestTask.java", "diffHunk": "@@ -175,58 +176,64 @@ protected String doInBackground(IterableApiRequest... params) {\n                         errorMessage = jsonResponse.getString(\"msg\");\n                     } else if (responseCode >= 500) {\n                         errorMessage = \"Internal Server Error\";\n-                        retryRequest = true;\n                     }\n \n-                    handleFailure(errorMessage, jsonResponse);\n+                    apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, errorMessage);\n                 } else if (responseCode == 200) {\n                     if (error == null && requestResult.length() > 0) {\n                         if (jsonError != null) {\n-                            handleFailure(\"Could not parse json: \" + jsonError, null);\n+                            apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"Could not parse json: \" + jsonError);\n                         } else if (jsonResponse != null) {\n-                            IterableApi.getInstance().getAuthManager().resetFailedAuth();\n-                            handleSuccess(jsonResponse);\n+                            apiResponse = IterableApiResponse.success(responseCode, requestResult, jsonResponse);\n                         } else {\n-                            handleFailure(\"Response is not a JSON object\", jsonResponse);\n+                            apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"Response is not a JSON object\");\n                         }\n                     } else if (error == null && requestResult.length() == 0) {\n-                        handleFailure(\"No data received\", jsonResponse);\n+                        apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"No data received\");\n                     } else if (error != null) {\n-                        handleFailure(error, null);\n+                        apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, error);\n                     }\n                 } else {\n-                    handleFailure(\"Received non-200 response: \" + responseCode, jsonResponse);\n+                    apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"Received non-200 response: \" + responseCode);\n                 }\n             } catch (JSONException e) {\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } catch (IOException e) {\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } catch (ArrayIndexOutOfBoundsException e) {\n                 // This exception is sometimes thrown from the inside of HttpUrlConnection/OkHttp\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } catch (Exception e) {\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } finally {\n                 if (urlConnection != null) {\n                     urlConnection.disconnect();\n                 }\n             }\n             IterableLogger.v(TAG, \"======================================\");\n         }\n-        return requestResult;\n+        return apiResponse;\n     }\n \n-    private void logError(String baseUrl, Exception e) {\n+    private static boolean matchesErrorCode(JSONObject jsonResponse, String errorCode) {\n+        try {\n+            return jsonResponse != null && jsonResponse.has(\"code\") && jsonResponse.getString(\"code\").equals(errorCode);\n+        } catch (JSONException e) {\n+            return false;\n+        }\n+    }\n+\n+    private static void logError(IterableApiRequest iterableApiRequest, String baseUrl, Exception e) {\n         IterableLogger.e(TAG, \"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\\n\" +\n                 \"Exception occurred for : \" + baseUrl + iterableApiRequest.resourcePath);\n         IterableLogger.e(TAG, e.getMessage(), e);\n     }\n \n-    private String buildHeaderString(HttpURLConnection urlConnection) {\n+    private static String buildHeaderString(HttpURLConnection urlConnection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4MzQ4MA==", "bodyText": "As long as the function doesn't use any global shared state or modify shared objects, it should be fine. I think this method doesn't use any global variables, and HttpURLConnection passed to it is specific to a single request and is expected to be modified.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r542083480", "createdAt": "2020-12-14T03:14:44Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequestTask.java", "diffHunk": "@@ -175,58 +176,64 @@ protected String doInBackground(IterableApiRequest... params) {\n                         errorMessage = jsonResponse.getString(\"msg\");\n                     } else if (responseCode >= 500) {\n                         errorMessage = \"Internal Server Error\";\n-                        retryRequest = true;\n                     }\n \n-                    handleFailure(errorMessage, jsonResponse);\n+                    apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, errorMessage);\n                 } else if (responseCode == 200) {\n                     if (error == null && requestResult.length() > 0) {\n                         if (jsonError != null) {\n-                            handleFailure(\"Could not parse json: \" + jsonError, null);\n+                            apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"Could not parse json: \" + jsonError);\n                         } else if (jsonResponse != null) {\n-                            IterableApi.getInstance().getAuthManager().resetFailedAuth();\n-                            handleSuccess(jsonResponse);\n+                            apiResponse = IterableApiResponse.success(responseCode, requestResult, jsonResponse);\n                         } else {\n-                            handleFailure(\"Response is not a JSON object\", jsonResponse);\n+                            apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"Response is not a JSON object\");\n                         }\n                     } else if (error == null && requestResult.length() == 0) {\n-                        handleFailure(\"No data received\", jsonResponse);\n+                        apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"No data received\");\n                     } else if (error != null) {\n-                        handleFailure(error, null);\n+                        apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, error);\n                     }\n                 } else {\n-                    handleFailure(\"Received non-200 response: \" + responseCode, jsonResponse);\n+                    apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"Received non-200 response: \" + responseCode);\n                 }\n             } catch (JSONException e) {\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } catch (IOException e) {\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } catch (ArrayIndexOutOfBoundsException e) {\n                 // This exception is sometimes thrown from the inside of HttpUrlConnection/OkHttp\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } catch (Exception e) {\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } finally {\n                 if (urlConnection != null) {\n                     urlConnection.disconnect();\n                 }\n             }\n             IterableLogger.v(TAG, \"======================================\");\n         }\n-        return requestResult;\n+        return apiResponse;\n     }\n \n-    private void logError(String baseUrl, Exception e) {\n+    private static boolean matchesErrorCode(JSONObject jsonResponse, String errorCode) {\n+        try {\n+            return jsonResponse != null && jsonResponse.has(\"code\") && jsonResponse.getString(\"code\").equals(errorCode);\n+        } catch (JSONException e) {\n+            return false;\n+        }\n+    }\n+\n+    private static void logError(IterableApiRequest iterableApiRequest, String baseUrl, Exception e) {\n         IterableLogger.e(TAG, \"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\\n\" +\n                 \"Exception occurred for : \" + baseUrl + iterableApiRequest.resourcePath);\n         IterableLogger.e(TAG, e.getMessage(), e);\n     }\n \n-    private String buildHeaderString(HttpURLConnection urlConnection) {\n+    private static String buildHeaderString(HttpURLConnection urlConnection) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NzYyMA=="}, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4NTI3OQ==", "bodyText": "Basically I wanted to extract all pure networking code from async handling and callbacks here. I guess Ideally it should be extracted to a separate class, but I kept it here for now.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r542085279", "createdAt": "2020-12-14T03:21:22Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequestTask.java", "diffHunk": "@@ -175,58 +176,64 @@ protected String doInBackground(IterableApiRequest... params) {\n                         errorMessage = jsonResponse.getString(\"msg\");\n                     } else if (responseCode >= 500) {\n                         errorMessage = \"Internal Server Error\";\n-                        retryRequest = true;\n                     }\n \n-                    handleFailure(errorMessage, jsonResponse);\n+                    apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, errorMessage);\n                 } else if (responseCode == 200) {\n                     if (error == null && requestResult.length() > 0) {\n                         if (jsonError != null) {\n-                            handleFailure(\"Could not parse json: \" + jsonError, null);\n+                            apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"Could not parse json: \" + jsonError);\n                         } else if (jsonResponse != null) {\n-                            IterableApi.getInstance().getAuthManager().resetFailedAuth();\n-                            handleSuccess(jsonResponse);\n+                            apiResponse = IterableApiResponse.success(responseCode, requestResult, jsonResponse);\n                         } else {\n-                            handleFailure(\"Response is not a JSON object\", jsonResponse);\n+                            apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"Response is not a JSON object\");\n                         }\n                     } else if (error == null && requestResult.length() == 0) {\n-                        handleFailure(\"No data received\", jsonResponse);\n+                        apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"No data received\");\n                     } else if (error != null) {\n-                        handleFailure(error, null);\n+                        apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, error);\n                     }\n                 } else {\n-                    handleFailure(\"Received non-200 response: \" + responseCode, jsonResponse);\n+                    apiResponse = IterableApiResponse.failure(responseCode, requestResult, jsonResponse, \"Received non-200 response: \" + responseCode);\n                 }\n             } catch (JSONException e) {\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } catch (IOException e) {\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } catch (ArrayIndexOutOfBoundsException e) {\n                 // This exception is sometimes thrown from the inside of HttpUrlConnection/OkHttp\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } catch (Exception e) {\n-                logError(baseUrl, e);\n-                handleFailure(e.getMessage(), null);\n+                logError(iterableApiRequest, baseUrl, e);\n+                apiResponse = IterableApiResponse.failure(0, requestResult, null, e.getMessage());\n             } finally {\n                 if (urlConnection != null) {\n                     urlConnection.disconnect();\n                 }\n             }\n             IterableLogger.v(TAG, \"======================================\");\n         }\n-        return requestResult;\n+        return apiResponse;\n     }\n \n-    private void logError(String baseUrl, Exception e) {\n+    private static boolean matchesErrorCode(JSONObject jsonResponse, String errorCode) {\n+        try {\n+            return jsonResponse != null && jsonResponse.has(\"code\") && jsonResponse.getString(\"code\").equals(errorCode);\n+        } catch (JSONException e) {\n+            return false;\n+        }\n+    }\n+\n+    private static void logError(IterableApiRequest iterableApiRequest, String baseUrl, Exception e) {\n         IterableLogger.e(TAG, \"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\\n\" +\n                 \"Exception occurred for : \" + baseUrl + iterableApiRequest.resourcePath);\n         IterableLogger.e(TAG, e.getMessage(), e);\n     }\n \n-    private String buildHeaderString(HttpURLConnection urlConnection) {\n+    private static String buildHeaderString(HttpURLConnection urlConnection) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NzYyMA=="}, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDcwMDI4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequestTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoyNTozNlrOIE3slQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoyNTozNlrOIE3slQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3Nzc0OQ==", "bodyText": "\ud83d\udc4c", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r541977749", "createdAt": "2020-12-13T18:25:36Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequestTask.java", "diffHunk": "@@ -368,3 +370,27 @@ static IterableApiRequest fromJSON(JSONObject jsonData, @Nullable IterableHelper\n         return null;\n     }\n }\n+\n+class IterableApiResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDcwMDgzOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableTaskStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoyNjoxMlrOIE3s1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxODoyNjoxMlrOIE3s1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3NzgxNQ==", "bodyText": "\ud83d\udc4c", "url": "https://github.com/Iterable/iterable-android-sdk/pull/295#discussion_r541977815", "createdAt": "2020-12-13T18:26:12Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableTaskStorage.java", "diffHunk": "@@ -119,76 +139,82 @@ IterableTask getTask(String id) {\n         if (!isDatabaseReady()) {\n             return null;\n         }\n+        Cursor cursor = database.rawQuery(QUERY_GET_TASK_BY_ID, new String[]{id});\n \n-        String name = null;\n+        if (!cursor.moveToFirst()) {\n+            IterableLogger.d(TAG, \"No record found\");\n+            return null;\n+        }\n+\n+        IterableTask task = createTaskFromCursor(cursor);\n+\n+        IterableLogger.v(TAG, \"Found \" + cursor.getColumnCount() + \"columns\");\n+        cursor.close();\n+        return task;\n+    }\n+\n+    private IterableTask createTaskFromCursor(Cursor cursor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458607a1f40f7fd9c10413f3e8e6964e0047d506"}, "originalPosition": 161}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2223, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}