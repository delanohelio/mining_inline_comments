{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNDAxNjkw", "number": 299, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMjowNTo1NlrOFGazgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzo0NjoyMFrOFHYgTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjc0OTQ0OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMjowNTo1NlrOIHbNOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMjowNTo1NlrOIHbNOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY1NjY5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Set<String> offlineApiSet = new HashSet<>(Arrays.asList(\n          \n          \n            \n                private static final Set<String> offlineApiSet = new HashSet<>(Arrays.asList(", "url": "https://github.com/Iterable/iterable-android-sdk/pull/299#discussion_r544656697", "createdAt": "2020-12-16T22:05:56Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -5,22 +5,42 @@\n import androidx.annotation.MainThread;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n \n class OfflineRequestProcessor implements RequestProcessor {\n     private TaskScheduler taskScheduler;\n     private IterableTaskRunner taskRunner;\n+    Set<String> offlineApiSet = new HashSet<>(Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79bd3d4768940418ed3ff6b35ca9ea2ce74fae9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjg5NTgzOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/test/java/com/iterable/iterableapi/OfflineRequestProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMjo0NjoyOVrOIHchkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMjo0NjoyOVrOIHchkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY3ODI5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testAllOfflineApisUseTaskSchedular() {\n          \n          \n            \n                public void testAllOfflineApisUseTaskScheduler() {", "url": "https://github.com/Iterable/iterable-android-sdk/pull/299#discussion_r544678290", "createdAt": "2020-12-16T22:46:29Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/OfflineRequestProcessorTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.iterable.iterableapi;\n+\n+import com.iterable.iterableapi.unit.TestRunner;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(TestRunner.class)\n+public class OfflineRequestProcessorTest extends BaseTest {\n+    private OfflineRequestProcessor offlineRequestProcessor;\n+    private IterableTaskRunner mockTaskRunner;\n+    private IterableTaskStorage mockTaskStorage;\n+\n+\n+    @Before\n+    public void setUp() {\n+        mockTaskStorage = mock(IterableTaskStorage.class);\n+        mockTaskRunner = mock(IterableTaskRunner.class);\n+        offlineRequestProcessor = new OfflineRequestProcessor(getContext(), mockTaskStorage, mockTaskRunner);\n+    }\n+\n+    @Test\n+    public void testOfflineRequestIsStored() throws JSONException {\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", IterableConstants.ENDPOINT_TRACK_INAPP_CLICK, new JSONObject(), \"POST\", null, null, null);\n+        offlineRequestProcessor.processPostRequest(request.apiKey, request.resourcePath, request.json, request.authToken, request.successCallback, request.failureCallback);\n+        verify(mockTaskStorage, times(1)).createTask(IterableConstants.ENDPOINT_TRACK_INAPP_CLICK, IterableTaskType.API, request.toJSONObject().toString());\n+    }\n+\n+    @Test\n+    public void testNonOfflineRequestIsNotStored() throws JSONException {\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", IterableConstants.PUSH_DISABLE_AFTER_REGISTRATION, new JSONObject(), \"POST\", null, null, null);\n+        offlineRequestProcessor.processPostRequest(request.apiKey, request.resourcePath, request.json, request.authToken, request.successCallback, request.failureCallback);\n+        verify(mockTaskStorage, times(0)).createTask(IterableConstants.ENDPOINT_TRACK_INAPP_CLICK, IterableTaskType.API, request.toJSONObject().toString());\n+    }\n+\n+    @Test\n+    public void testAllOfflineApisUseTaskSchedular() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79bd3d4768940418ed3ff6b35ca9ea2ce74fae9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzIwNDEwOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDozMToyOFrOIHfMsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDozMToyOFrOIHfMsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyMjA5OA==", "bodyText": "You can inject just taskRunner and taskScheduler as dependencies, skipping storage.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/299#discussion_r544722098", "createdAt": "2020-12-17T00:31:28Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -5,22 +5,42 @@\n import androidx.annotation.MainThread;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n \n class OfflineRequestProcessor implements RequestProcessor {\n     private TaskScheduler taskScheduler;\n     private IterableTaskRunner taskRunner;\n+    private static final Set<String> offlineApiSet = new HashSet<>(Arrays.asList(\n+            IterableConstants.ENDPOINT_TRACK,\n+            IterableConstants.ENDPOINT_TRACK_PUSH_OPEN,\n+            IterableConstants.ENDPOINT_TRACK_PURCHASE,\n+            IterableConstants.ENDPOINT_TRACK_INAPP_OPEN,\n+            IterableConstants.ENDPOINT_TRACK_INAPP_CLICK,\n+            IterableConstants.ENDPOINT_TRACK_INAPP_CLOSE,\n+            IterableConstants.ENDPOINT_TRACK_INBOX_SESSION,\n+            IterableConstants.ENDPOINT_TRACK_INAPP_DELIVERY,\n+            IterableConstants.ENDPOINT_INAPP_CONSUME));\n \n     OfflineRequestProcessor(Context context) {\n         IterableTaskStorage taskStorage = IterableTaskStorage.sharedInstance(context);\n         taskRunner = new IterableTaskRunner(taskStorage, IterableActivityMonitor.getInstance());\n         taskScheduler = new TaskScheduler(taskStorage, taskRunner);\n     }\n \n+    @VisibleForTesting\n+    OfflineRequestProcessor(Context context, IterableTaskStorage storage, IterableTaskRunner iterableTaskRunner) {\n+        taskRunner = iterableTaskRunner;\n+        taskScheduler = new TaskScheduler(storage, taskRunner);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5edd95583b8e82456f6a692ff11983a015fded8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODg5OTg3OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/test/java/com/iterable/iterableapi/OfflineRequestProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzo0MjoxM1rOIIR9Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzo0MjoxM1rOIIR9Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1Mzc1OQ==", "bodyText": "What are these logging lines for? It seems like they are not part of the test logic.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/299#discussion_r545553759", "createdAt": "2020-12-18T03:42:13Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/OfflineRequestProcessorTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.iterable.iterableapi;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.iterable.iterableapi.unit.TestRunner;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+\n+@RunWith(TestRunner.class)\n+public class OfflineRequestProcessorTest extends BaseTest {\n+    private OfflineRequestProcessor offlineRequestProcessor;\n+    private IterableTaskRunner mockTaskRunner;\n+    private TaskScheduler mockTaskScheduler;\n+\n+    @Before\n+    public void setUp() {\n+        mockTaskRunner = mock(IterableTaskRunner.class);\n+        mockTaskScheduler = mock(TaskScheduler.class);\n+        offlineRequestProcessor = new OfflineRequestProcessor(mockTaskScheduler, mockTaskRunner);\n+    }\n+\n+    @Test\n+    public void testOfflineRequestIsStored() throws JSONException {\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", IterableConstants.ENDPOINT_TRACK_INAPP_CLICK, new JSONObject(), \"POST\", null, new IterableHelper.SuccessHandler() {\n+            @Override\n+            public void onSuccess(@NonNull JSONObject data) {\n+                IterableLogger.v(\"OfflineRequestProcessorTest\", \"OnSuccess callback executed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984190b63fa5eff5960af379cead01e038198f03"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODkwMzM2OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/test/java/com/iterable/iterableapi/OfflineRequestProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMzo0NDowM1rOIIR_Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODo1OTowOVrOIIZlNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1NDI0Mw==", "bodyText": "Why PUSH_DISABLE_AFTER_REGISTRATION? Non-offline endpoint constant would fit better here I think..", "url": "https://github.com/Iterable/iterable-android-sdk/pull/299#discussion_r545554243", "createdAt": "2020-12-18T03:44:03Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/OfflineRequestProcessorTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.iterable.iterableapi;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.iterable.iterableapi.unit.TestRunner;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+\n+@RunWith(TestRunner.class)\n+public class OfflineRequestProcessorTest extends BaseTest {\n+    private OfflineRequestProcessor offlineRequestProcessor;\n+    private IterableTaskRunner mockTaskRunner;\n+    private TaskScheduler mockTaskScheduler;\n+\n+    @Before\n+    public void setUp() {\n+        mockTaskRunner = mock(IterableTaskRunner.class);\n+        mockTaskScheduler = mock(TaskScheduler.class);\n+        offlineRequestProcessor = new OfflineRequestProcessor(mockTaskScheduler, mockTaskRunner);\n+    }\n+\n+    @Test\n+    public void testOfflineRequestIsStored() throws JSONException {\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", IterableConstants.ENDPOINT_TRACK_INAPP_CLICK, new JSONObject(), \"POST\", null, new IterableHelper.SuccessHandler() {\n+            @Override\n+            public void onSuccess(@NonNull JSONObject data) {\n+                IterableLogger.v(\"OfflineRequestProcessorTest\", \"OnSuccess callback executed\");\n+            }\n+        }, new IterableHelper.FailureHandler() {\n+            @Override\n+            public void onFailure(@NonNull String reason, @Nullable JSONObject data) {\n+                IterableLogger.e(\"OfflineRequestProcessorTest\", \"OnFailure callback executed\");\n+            }\n+        });\n+        offlineRequestProcessor.processPostRequest(request.apiKey, request.resourcePath, request.json, request.authToken, request.successCallback, request.failureCallback);\n+        verify(mockTaskScheduler).scheduleTask(any(IterableApiRequest.class), any(IterableHelper.SuccessHandler.class), any(IterableHelper.FailureHandler.class));\n+    }\n+\n+    @Test\n+    public void testNonOfflineRequestIsNotStored() throws JSONException {\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", IterableConstants.PUSH_DISABLE_AFTER_REGISTRATION, new JSONObject(), \"POST\", null, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "984190b63fa5eff5960af379cead01e038198f03"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY3ODY0Nw==", "bodyText": "Oh.. I thought its disableDevice... My bad\ud83d\ude05", "url": "https://github.com/Iterable/iterable-android-sdk/pull/299#discussion_r545678647", "createdAt": "2020-12-18T08:59:09Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/OfflineRequestProcessorTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.iterable.iterableapi;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.iterable.iterableapi.unit.TestRunner;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+\n+@RunWith(TestRunner.class)\n+public class OfflineRequestProcessorTest extends BaseTest {\n+    private OfflineRequestProcessor offlineRequestProcessor;\n+    private IterableTaskRunner mockTaskRunner;\n+    private TaskScheduler mockTaskScheduler;\n+\n+    @Before\n+    public void setUp() {\n+        mockTaskRunner = mock(IterableTaskRunner.class);\n+        mockTaskScheduler = mock(TaskScheduler.class);\n+        offlineRequestProcessor = new OfflineRequestProcessor(mockTaskScheduler, mockTaskRunner);\n+    }\n+\n+    @Test\n+    public void testOfflineRequestIsStored() throws JSONException {\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", IterableConstants.ENDPOINT_TRACK_INAPP_CLICK, new JSONObject(), \"POST\", null, new IterableHelper.SuccessHandler() {\n+            @Override\n+            public void onSuccess(@NonNull JSONObject data) {\n+                IterableLogger.v(\"OfflineRequestProcessorTest\", \"OnSuccess callback executed\");\n+            }\n+        }, new IterableHelper.FailureHandler() {\n+            @Override\n+            public void onFailure(@NonNull String reason, @Nullable JSONObject data) {\n+                IterableLogger.e(\"OfflineRequestProcessorTest\", \"OnFailure callback executed\");\n+            }\n+        });\n+        offlineRequestProcessor.processPostRequest(request.apiKey, request.resourcePath, request.json, request.authToken, request.successCallback, request.failureCallback);\n+        verify(mockTaskScheduler).scheduleTask(any(IterableApiRequest.class), any(IterableHelper.SuccessHandler.class), any(IterableHelper.FailureHandler.class));\n+    }\n+\n+    @Test\n+    public void testNonOfflineRequestIsNotStored() throws JSONException {\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", IterableConstants.PUSH_DISABLE_AFTER_REGISTRATION, new JSONObject(), \"POST\", null, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU1NDI0Mw=="}, "originalCommit": {"oid": "984190b63fa5eff5960af379cead01e038198f03"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjg1ODM4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/test/java/com/iterable/iterableapi/OfflineRequestProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzo0NjoyMFrOII2UVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzo0NjoyMFrOII2UVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0OTQ2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    verify(mockTaskScheduler).scheduleTask(any(IterableApiRequest.class), (IterableHelper.SuccessHandler) isNull(), (IterableHelper.FailureHandler) isNull());\n          \n          \n            \n                    verify(mockTaskScheduler).scheduleTask(any(IterableApiRequest.class), isNull(IterableHelper.SuccessHandler.class), isNull(IterableHelper.FailureHandler.class));", "url": "https://github.com/Iterable/iterable-android-sdk/pull/299#discussion_r546149462", "createdAt": "2020-12-18T23:46:20Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/OfflineRequestProcessorTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.iterable.iterableapi;\n+\n+import com.iterable.iterableapi.unit.TestRunner;\n+\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.isNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+\n+@RunWith(TestRunner.class)\n+public class OfflineRequestProcessorTest extends BaseTest {\n+    private OfflineRequestProcessor offlineRequestProcessor;\n+    private IterableTaskRunner mockTaskRunner;\n+    private TaskScheduler mockTaskScheduler;\n+\n+    @Before\n+    public void setUp() {\n+        mockTaskRunner = mock(IterableTaskRunner.class);\n+        mockTaskScheduler = mock(TaskScheduler.class);\n+        offlineRequestProcessor = new OfflineRequestProcessor(mockTaskScheduler, mockTaskRunner);\n+    }\n+\n+    @Test\n+    public void testOfflineRequestIsStored() {\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", IterableConstants.ENDPOINT_TRACK_INAPP_CLICK, new JSONObject(), \"POST\", null, null, null);\n+        offlineRequestProcessor.processPostRequest(request.apiKey, request.resourcePath, request.json, request.authToken, request.successCallback, request.failureCallback);\n+        verify(mockTaskScheduler).scheduleTask(any(IterableApiRequest.class), (IterableHelper.SuccessHandler) isNull(), (IterableHelper.FailureHandler) isNull());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6b8d8d546465ef7275a43d24a0fa0b27de7bd08"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2234, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}