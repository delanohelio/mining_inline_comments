{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNTk5MjE0", "number": 301, "title": "[MOB-2152] - Offline Network Monitoring", "bodyText": "\ud83d\udd39 Jira Ticket(s) if any\nhttps://iterable.atlassian.net/browse/MOB-2152\n\u270f\ufe0f Description\n\nCreated NetworkConnectivity Manager: One place to have all out network related work. Made it with interface so other modules can subscribe to it and listen to network events\nTaskRunner now implements ConnectivityManager interfaces too and calls RunNow function when onNetworkConnected callback is called.\nProcessTask function will check for networkConnectivity before processing and deleting the task\nConnectivityManager's lifecycle will start with initialization of OfflineRequestProcessor and will remain shared instance\nChanges in Test method to accompany networkConnectivityMonitor in task runner\nPending work: What if device is below LOLLIPOP? What should the networkManager should do?", "createdAt": "2020-12-21T16:52:35Z", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301", "merged": true, "mergeCommit": {"oid": "dabf649427ba5470fad2c0caa535f54fa1723a69"}, "closed": true, "closedAt": "2020-12-28T22:49:46Z", "author": {"login": "Ayyanchira"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoY69yAH2gAyNTQzNTk5MjE0OjQ4N2IyYjA3NDdkYTNhMmY0ZWY4YjlmZjdhMTEwN2FlZjIxNDkwMjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdpLoerAFqTU1ODMyNTM3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "487b2b0747da3a2f4ef8b9ff7a1107aef2149027", "author": {"user": {"login": "Ayyanchira", "name": "Akshay Ayyanchira"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/487b2b0747da3a2f4ef8b9ff7a1107aef2149027", "committedDate": "2020-12-21T16:56:20Z", "message": "[MOB-2152] - Offline Network Monitoring\n\n1. Created NetworkConnectivity Manager: One place to have all out network related work. Made it with interface so other modules can subscribe to it and listen to network events\n2. TaskRunner now implements ConnectivityManager interfaces too and calls RunNow function when onNetworkConnected callback is called.\n3. ProcessTask function will check for networkConnectivity before processing and deleting the task\n4. ConnectivityManager's lifecycle will start with initialization of OfflineRequestProcessor and will remain shared instance\n5. Changes in Test method to accompany networkConnectivityMonitor in task runner\n6. Pending work: What if device is below LOLLIPOP? What should the networkManager should do?"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f38e951026437afbba7292721e5db5dad90c58ad", "author": {"user": {"login": "Ayyanchira", "name": "Akshay Ayyanchira"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/f38e951026437afbba7292721e5db5dad90c58ad", "committedDate": "2020-12-21T16:51:35Z", "message": "[MOB-2152] - Offline Network Monitoring\n\n1. Created NetworkConnectivity Manager: One place to have all out network related work. Made it with interface so other modules can subscribe to it and listen to network events\n2. TaskRunner now implements ConnectivityManager interfaces too and calls RunNow function when onNetworkConnected callback is called.\n3. ProcessTask function will check for networkConnectivity before processing and deleting the task\n4. ConnectivityManager's lifecycle will start with initialization of OfflineRequestProcessor and will remain shared instance\n5. Changes in Test method to accompany networkConnectivityMonitor in task runner\n6. Pending work: What if device is below LOLLIPOP? What should the networkManager should do?"}, "afterCommit": {"oid": "487b2b0747da3a2f4ef8b9ff7a1107aef2149027", "author": {"user": {"login": "Ayyanchira", "name": "Akshay Ayyanchira"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/487b2b0747da3a2f4ef8b9ff7a1107aef2149027", "committedDate": "2020-12-21T16:56:20Z", "message": "[MOB-2152] - Offline Network Monitoring\n\n1. Created NetworkConnectivity Manager: One place to have all out network related work. Made it with interface so other modules can subscribe to it and listen to network events\n2. TaskRunner now implements ConnectivityManager interfaces too and calls RunNow function when onNetworkConnected callback is called.\n3. ProcessTask function will check for networkConnectivity before processing and deleting the task\n4. ConnectivityManager's lifecycle will start with initialization of OfflineRequestProcessor and will remain shared instance\n5. Changes in Test method to accompany networkConnectivityMonitor in task runner\n6. Pending work: What if device is below LOLLIPOP? What should the networkManager should do?"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NjU5OTIw", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#pullrequestreview-556659920", "createdAt": "2020-12-21T20:59:09Z", "commit": {"oid": "487b2b0747da3a2f4ef8b9ff7a1107aef2149027"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDo1OToxMFrOIJlv5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDo1OToxMFrOIJlv5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyNjU2NQ==", "bodyText": "this will be a private function", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r546926565", "createdAt": "2020-12-21T20:59:10Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.iterable.iterableapi;\n+\n+import android.content.Context;\n+import android.net.ConnectivityManager;\n+import android.net.Network;\n+import android.net.NetworkRequest;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+\n+import java.util.ArrayList;\n+\n+class IterableNetworkConnectivityManager {\n+    private static final String TAG = \"NetworkConnectivityManager\";\n+    private boolean isConnected;\n+\n+    private static IterableNetworkConnectivityManager sharedInstance;\n+\n+    private ArrayList<IterableNetworkMonitorListener> networkMonitorListeners = new ArrayList<>();\n+\n+    public interface IterableNetworkMonitorListener {\n+        void onNetworkConnected();\n+\n+        void onNetworkDisconnected();\n+    }\n+\n+    static IterableNetworkConnectivityManager sharedInstance(Context context) {\n+        if (sharedInstance == null) {\n+            sharedInstance = new IterableNetworkConnectivityManager(context);\n+        }\n+        return sharedInstance;\n+    }\n+\n+    private IterableNetworkConnectivityManager(Context context) {\n+        if (context == null) {\n+            return;\n+        }\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            startNetworkCallback(context);\n+        }\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n+    public void startNetworkCallback(Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "487b2b0747da3a2f4ef8b9ff7a1107aef2149027"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NjYwMjIz", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#pullrequestreview-556660223", "createdAt": "2020-12-21T20:59:46Z", "commit": {"oid": "487b2b0747da3a2f4ef8b9ff7a1107aef2149027"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDo1OTo0N1rOIJlw5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDo1OTo0N1rOIJlw5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyNjgyMQ==", "bodyText": "This will be package private", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r546926821", "createdAt": "2020-12-21T20:59:47Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.iterable.iterableapi;\n+\n+import android.content.Context;\n+import android.net.ConnectivityManager;\n+import android.net.Network;\n+import android.net.NetworkRequest;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+\n+import java.util.ArrayList;\n+\n+class IterableNetworkConnectivityManager {\n+    private static final String TAG = \"NetworkConnectivityManager\";\n+    private boolean isConnected;\n+\n+    private static IterableNetworkConnectivityManager sharedInstance;\n+\n+    private ArrayList<IterableNetworkMonitorListener> networkMonitorListeners = new ArrayList<>();\n+\n+    public interface IterableNetworkMonitorListener {\n+        void onNetworkConnected();\n+\n+        void onNetworkDisconnected();\n+    }\n+\n+    static IterableNetworkConnectivityManager sharedInstance(Context context) {\n+        if (sharedInstance == null) {\n+            sharedInstance = new IterableNetworkConnectivityManager(context);\n+        }\n+        return sharedInstance;\n+    }\n+\n+    private IterableNetworkConnectivityManager(Context context) {\n+        if (context == null) {\n+            return;\n+        }\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            startNetworkCallback(context);\n+        }\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n+    public void startNetworkCallback(Context context) {\n+        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n+        NetworkRequest.Builder networkBuilder = new NetworkRequest.Builder();\n+\n+        if (connectivityManager != null) {\n+            connectivityManager.registerNetworkCallback(networkBuilder.build(), new ConnectivityManager.NetworkCallback() {\n+                @Override\n+                public void onAvailable(@NonNull Network network) {\n+                    super.onAvailable(network);\n+                    IterableLogger.v(TAG, \"Network Connected\");\n+                    isConnected = true;\n+                    for (IterableNetworkMonitorListener listener : networkMonitorListeners) {\n+                        listener.onNetworkConnected();\n+                    }\n+                }\n+\n+                @Override\n+                public void onLost(@NonNull Network network) {\n+                    super.onLost(network);\n+                    IterableLogger.v(TAG, \"Network Disconnected\");\n+                    isConnected = false;\n+                    for (IterableNetworkMonitorListener listener : networkMonitorListeners) {\n+                        listener.onNetworkDisconnected();\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    public void addNetworkListener(IterableNetworkMonitorListener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "487b2b0747da3a2f4ef8b9ff7a1107aef2149027"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199", "author": {"user": {"login": "Ayyanchira", "name": "Akshay Ayyanchira"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199", "committedDate": "2020-12-22T18:34:53Z", "message": "Modification 1\n\n1. setOfflineProcessing method checks for SDK version > Lollipop. (Default is onlineProcessing)\n2. made startNetworkCallback private to have it started only once when network manager is constructed\n3. addNetworkListener is package private now\n4. Added test methods to check if request made when network is offline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "157d6874685f2150d0aebafe39e494827dfd6584", "author": {"user": {"login": "Ayyanchira", "name": "Akshay Ayyanchira"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/157d6874685f2150d0aebafe39e494827dfd6584", "committedDate": "2020-12-22T18:28:08Z", "message": "Modification 1\n\n1. setOfflineProcessing method checks for SDK version > Lollipop. (Default is onlineProcessing)\n2. made startNetworkCallback private to have it started only once when network manager is constructed\n3. addNetworkListener is package private now\n4. Added test methods to check if request made when network is offline"}, "afterCommit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199", "author": {"user": {"login": "Ayyanchira", "name": "Akshay Ayyanchira"}}, "url": "https://github.com/Iterable/iterable-android-sdk/commit/fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199", "committedDate": "2020-12-22T18:34:53Z", "message": "Modification 1\n\n1. setOfflineProcessing method checks for SDK version > Lollipop. (Default is onlineProcessing)\n2. made startNetworkCallback private to have it started only once when network manager is constructed\n3. addNetworkListener is package private now\n4. Added test methods to check if request made when network is offline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MzU2MjUw", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#pullrequestreview-557356250", "createdAt": "2020-12-22T20:44:42Z", "commit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDo0NDo0MlrOIKIrvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDo0NDo0MlrOIKIrvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5ODk0MA==", "bodyText": "Which thread is this going to run on?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r547498940", "createdAt": "2020-12-22T20:44:42Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.iterable.iterableapi;\n+\n+import android.content.Context;\n+import android.net.ConnectivityManager;\n+import android.net.Network;\n+import android.net.NetworkRequest;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+\n+import java.util.ArrayList;\n+\n+class IterableNetworkConnectivityManager {\n+    private static final String TAG = \"NetworkConnectivityManager\";\n+    private boolean isConnected;\n+\n+    private static IterableNetworkConnectivityManager sharedInstance;\n+\n+    private ArrayList<IterableNetworkMonitorListener> networkMonitorListeners = new ArrayList<>();\n+\n+    public interface IterableNetworkMonitorListener {\n+        void onNetworkConnected();\n+\n+        void onNetworkDisconnected();\n+    }\n+\n+    static IterableNetworkConnectivityManager sharedInstance(Context context) {\n+        if (sharedInstance == null) {\n+            sharedInstance = new IterableNetworkConnectivityManager(context);\n+        }\n+        return sharedInstance;\n+    }\n+\n+    private IterableNetworkConnectivityManager(Context context) {\n+        if (context == null) {\n+            return;\n+        }\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            startNetworkCallback(context);\n+        }\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n+    private void startNetworkCallback(Context context) {\n+        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n+        NetworkRequest.Builder networkBuilder = new NetworkRequest.Builder();\n+\n+        if (connectivityManager != null) {\n+            connectivityManager.registerNetworkCallback(networkBuilder.build(), new ConnectivityManager.NetworkCallback() {\n+                @Override\n+                public void onAvailable(@NonNull Network network) {\n+                    super.onAvailable(network);\n+                    IterableLogger.v(TAG, \"Network Connected\");\n+                    isConnected = true;\n+                    for (IterableNetworkMonitorListener listener : networkMonitorListeners) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MzU4MDQ3", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#pullrequestreview-557358047", "createdAt": "2020-12-22T20:48:04Z", "commit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDo0ODowNVrOIKIxYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDo0ODowNVrOIKIxYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUwMDM4NA==", "bodyText": "Why is it called twice?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r547500384", "createdAt": "2020-12-22T20:48:05Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableTaskRunnerTest.java", "diffHunk": "@@ -77,6 +84,40 @@ public void testRunOnTaskCreatedCallsCompletionListener() throws Exception {\n         verify(taskCompletedListener).onTaskCompleted(any(String.class), eq(IterableTaskRunner.TaskResult.SUCCESS), any(IterableApiResponse.class));\n     }\n \n+    @Test\n+    public void testNoRequestsWhenOffline() throws Exception {\n+        clearInvocations(mockTaskStorage);\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", \"api/test\", new JSONObject(), \"POST\", null, null, null);\n+        IterableTask task = new IterableTask(\"testTask\", IterableTaskType.API, request.toJSONObject().toString());\n+        when(mockTaskStorage.getNextScheduledTask()).thenReturn(task).thenReturn(null);\n+        when(mockNetworkConnectivityManager.isConnected()).thenReturn(false);\n+        IterableTaskRunner.TaskCompletedListener taskCompletedListener = mock(IterableTaskRunner.TaskCompletedListener.class);\n+        taskRunner.addTaskCompletedListener(taskCompletedListener);\n+\n+        server.enqueue(new MockResponse().setResponseCode(200).setBody(\"{}\"));\n+        taskRunner.onTaskCreated(null);\n+\n+        runHandlerTasks(taskRunner);\n+        verify(mockNetworkConnectivityManager, times(1)).isConnected();\n+        RecordedRequest recordedRequest = server.takeRequest(1, TimeUnit.SECONDS);\n+        assertNull(recordedRequest);\n+        shadowOf(getMainLooper()).idle();\n+        verifyNoInteractions(taskCompletedListener);\n+        verifyNoInteractions(mockTaskStorage);\n+    }\n+\n+    @Test\n+    public void testIfNetworkCheckedBeforeProcessingTask() throws Exception {\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", \"api/test\", new JSONObject(), \"POST\", null, null, null);\n+        IterableTask task = new IterableTask(\"testTask\", IterableTaskType.API, request.toJSONObject().toString());\n+        when(mockTaskStorage.getNextScheduledTask()).thenReturn(task).thenReturn(null);\n+        when(mockNetworkConnectivityManager.isConnected()).thenReturn(true);\n+        taskRunner.onTaskCreated(null);\n+        runHandlerTasks(taskRunner);\n+        shadowOf(getMainLooper()).idle();\n+        verify(mockNetworkConnectivityManager, times(2)).isConnected();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MzI1Mzc5", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#pullrequestreview-558325379", "createdAt": "2020-12-24T04:01:19Z", "commit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 579, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}