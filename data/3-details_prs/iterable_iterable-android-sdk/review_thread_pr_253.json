{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NzY0NDM2", "number": 253, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowMzozMVrOEQ0BfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0NzoxNVrOESg0tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDY1MDIxOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowMzozMVrOG1LcHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowMzozMVrOG1LcHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNTEzNQ==", "bodyText": "I think it should be\nelse if (email == _email && (_authToken == null || _authToken != authToken)) {\n//update the authToken\n}\n\nOnly if the email passed in the function is the one already been set in Iterable, we should update the token.\nIf the email is new, we should perform log out, log in and then store the auth.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r458415135", "createdAt": "2020-07-21T22:03:31Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,20 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (_email != null && !_email.equals(email)) {\n+            onLogOut();\n \n-        if (_email == null && _userId == null && email == null) {\n-            return;\n-        }\n+            _email = email;\n+            _userId = null;\n+            _authToken = authToken;\n+\n+            storeAuthData();\n \n-        onLogOut();\n-        _email = email;\n-        _userId = null;\n-        _authToken = authToken;\n-        storeAuthData();\n-        onLogIn();\n+            onLogIn();\n+        } else if (email != null && (_authToken == null || _authToken != authToken)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd1cbaabb910bc602d2622da043f336507f7711d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDY1NDg4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowNTowNVrOG1LezQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowNTowNVrOG1LezQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNTgyMQ==", "bodyText": "Just like with email,\nwe might have to check if userId == !userId && (_authToken == null || _authToken != authToken)) {\n//update authToken\n}", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r458415821", "createdAt": "2020-07-21T22:05:05Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -324,20 +324,20 @@ public void setUserId(@Nullable String userId) {\n      * @param authToken Authorization token\n      */\n     public void setUserId(@Nullable String userId, @Nullable String authToken) {\n-        if (_userId != null && _userId.equals(userId)) {\n-            return;\n-        }\n+        if (_userId != null && !_userId.equals(userId)) {\n+            onLogOut();\n \n-        if (_email == null && _userId == null && userId == null) {\n-            return;\n-        }\n+            _email = null;\n+            _userId = userId;\n+            _authToken = authToken;\n+\n+            storeAuthData();\n \n-        onLogOut();\n-        _email = null;\n-        _userId = userId;\n-        _authToken = authToken;\n-        storeAuthData();\n-        onLogIn();\n+            onLogIn();\n+        } else if (userId != null & (_authToken == null || _authToken != authToken)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd1cbaabb910bc602d2622da043f336507f7711d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTEwODIyOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMTozOToxNlrOG1Pm1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDowMzowM1rOG14SBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4MzQxMw==", "bodyText": "we will need to set _email to new email", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r458483413", "createdAt": "2020-07-22T01:39:16Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,20 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (_email != null && !_email.equals(email)) {\n+            onLogOut();\n \n-        if (_email == null && _userId == null && email == null) {\n-            return;\n-        }\n+            _email = email;\n+            _userId = null;\n+            _authToken = authToken;\n+\n+            storeAuthData();\n \n-        onLogOut();\n-        _email = email;\n-        _userId = null;\n-        _authToken = authToken;\n-        storeAuthData();\n-        onLogIn();\n+            onLogIn();\n+        } else if (email != null && email.equals(_email) && (_authToken == null || _authToken != authToken)) {\n+            _authToken = authToken;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3648b4944ab08b771426e18caef749dbb5064454"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MjkwOQ==", "bodyText": "It's already the same by that point", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r458942909", "createdAt": "2020-07-22T16:57:35Z", "author": {"login": "roninopf"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,20 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (_email != null && !_email.equals(email)) {\n+            onLogOut();\n \n-        if (_email == null && _userId == null && email == null) {\n-            return;\n-        }\n+            _email = email;\n+            _userId = null;\n+            _authToken = authToken;\n+\n+            storeAuthData();\n \n-        onLogOut();\n-        _email = email;\n-        _userId = null;\n-        _authToken = authToken;\n-        storeAuthData();\n-        onLogIn();\n+            onLogIn();\n+        } else if (email != null && email.equals(_email) && (_authToken == null || _authToken != authToken)) {\n+            _authToken = authToken;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4MzQxMw=="}, "originalCommit": {"oid": "3648b4944ab08b771426e18caef749dbb5064454"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMDM2NA==", "bodyText": "Not when _email(current email) is null as stated in above comments. If null case is handled on top, else if part can be considered as just updating the authToken", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459100364", "createdAt": "2020-07-22T21:41:37Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,20 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (_email != null && !_email.equals(email)) {\n+            onLogOut();\n \n-        if (_email == null && _userId == null && email == null) {\n-            return;\n-        }\n+            _email = email;\n+            _userId = null;\n+            _authToken = authToken;\n+\n+            storeAuthData();\n \n-        onLogOut();\n-        _email = email;\n-        _userId = null;\n-        _authToken = authToken;\n-        storeAuthData();\n-        onLogIn();\n+            onLogIn();\n+        } else if (email != null && email.equals(_email) && (_authToken == null || _authToken != authToken)) {\n+            _authToken = authToken;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4MzQxMw=="}, "originalCommit": {"oid": "3648b4944ab08b771426e18caef749dbb5064454"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTgyOA==", "bodyText": "This got really confusing to follow the flow for something so important, so I simplified it. The handling of null and setting info accurately should be right, now, if I haven't messed anything else up!", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459149828", "createdAt": "2020-07-23T00:03:03Z", "author": {"login": "roninopf"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,20 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (_email != null && !_email.equals(email)) {\n+            onLogOut();\n \n-        if (_email == null && _userId == null && email == null) {\n-            return;\n-        }\n+            _email = email;\n+            _userId = null;\n+            _authToken = authToken;\n+\n+            storeAuthData();\n \n-        onLogOut();\n-        _email = email;\n-        _userId = null;\n-        _authToken = authToken;\n-        storeAuthData();\n-        onLogIn();\n+            onLogIn();\n+        } else if (email != null && email.equals(_email) && (_authToken == null || _authToken != authToken)) {\n+            _authToken = authToken;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4MzQxMw=="}, "originalCommit": {"oid": "3648b4944ab08b771426e18caef749dbb5064454"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDg4Njg0OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1OTo1OFrOG10A9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTozMToxOFrOG10-Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3OTkyNA==", "bodyText": "This will skip execution if _email (current email) is null. The tests caught that.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459079924", "createdAt": "2020-07-22T20:59:58Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,20 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (_email != null && !_email.equals(email)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3648b4944ab08b771426e18caef749dbb5064454"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5NTU5MQ==", "bodyText": "Ah, because it should empty out authentication info if it's null.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459095591", "createdAt": "2020-07-22T21:31:18Z", "author": {"login": "roninopf"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,20 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (_email != null && !_email.equals(email)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3OTkyNA=="}, "originalCommit": {"oid": "3648b4944ab08b771426e18caef749dbb5064454"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODcyNzYyOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxOTo0NlrOG2YRQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxOTo0NlrOG2YRQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MzkyMg==", "bodyText": "I think this still doesn't do what we want it to do.. We don't want to run logout/login if current email & userId are null, and the new email is also null.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459673922", "createdAt": "2020-07-23T19:19:46Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,29 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (email == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efea88220596dbd60c1dcd7126ca14b2f5a88e12"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODczMDE2OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToyMDoyNlrOG2YSyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToyMDoyNlrOG2YSyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NDMxNA==", "bodyText": "Since we don't check for nullity of _email here, if we pass an non-null email when the current _email is null, it will throw an exception.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459674314", "createdAt": "2020-07-23T19:20:26Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,29 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (email == null) {\n+            onLogOut();\n \n-        if (_email == null && _userId == null && email == null) {\n-            return;\n-        }\n+            _email = null;\n+            _userId = null;\n+            _authToken = null;\n+\n+            storeAuthData();\n+        } else if (_email.equals(email) && _authToken != authToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efea88220596dbd60c1dcd7126ca14b2f5a88e12"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTU4NDczOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDo1Nzo1NlrOG2gUBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzowNDowMVrOG23EUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTcwMw==", "bodyText": "if we return here,\nwe won't perform setEmail for where developer doesnt want to implement authToken at all. authToken and _authToken being null should still allow setEmail operation", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459805703", "createdAt": "2020-07-24T00:57:56Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -289,6 +289,17 @@ public void setEmail(@Nullable String email) {\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n         if (_email != null && _email.equals(email)) {\n+            if (_authToken == null && authToken == null) {\n+                return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9289d2f90dae400b87ce93490afc7dccd675cb9a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzNTMzMA==", "bodyText": "Hmm, this is only for when the previous and new emails are the same. Nothing should happen, right? That was the previous behavior too. It just used to return.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459835330", "createdAt": "2020-07-24T03:25:26Z", "author": {"login": "roninopf"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -289,6 +289,17 @@ public void setEmail(@Nullable String email) {\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n         if (_email != null && _email.equals(email)) {\n+            if (_authToken == null && authToken == null) {\n+                return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTcwMw=="}, "originalCommit": {"oid": "9289d2f90dae400b87ce93490afc7dccd675cb9a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2OTc0NQ==", "bodyText": "oh yes.. looks good here.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r460169745", "createdAt": "2020-07-24T16:47:10Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -289,6 +289,17 @@ public void setEmail(@Nullable String email) {\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n         if (_email != null && _email.equals(email)) {\n+            if (_authToken == null && authToken == null) {\n+                return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTcwMw=="}, "originalCommit": {"oid": "9289d2f90dae400b87ce93490afc7dccd675cb9a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MDcyMQ==", "bodyText": "I strongly feel we should have multiple tests written for it first. Kind of -> if those pass, all good", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r460170721", "createdAt": "2020-07-24T16:49:00Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -289,6 +289,17 @@ public void setEmail(@Nullable String email) {\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n         if (_email != null && _email.equals(email)) {\n+            if (_authToken == null && authToken == null) {\n+                return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTcwMw=="}, "originalCommit": {"oid": "9289d2f90dae400b87ce93490afc7dccd675cb9a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3ODUxNA==", "bodyText": "I'll see if I can fit tests into this PR.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r460178514", "createdAt": "2020-07-24T17:04:01Z", "author": {"login": "roninopf"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -289,6 +289,17 @@ public void setEmail(@Nullable String email) {\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n         if (_email != null && _email.equals(email)) {\n+            if (_authToken == null && authToken == null) {\n+                return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTcwMw=="}, "originalCommit": {"oid": "9289d2f90dae400b87ce93490afc7dccd675cb9a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzIyMDM4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMzowMjozOVrOG3B58w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxOTowNjoyNVrOG3vuxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw==", "bodyText": "What do we need this for?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r460356083", "createdAt": "2020-07-25T03:02:39Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -1223,6 +1245,10 @@ protected void registerDeviceToken(@Nullable String email, @Nullable String user\n         }\n     }\n \n+    protected String getAuthToken() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxNzk0MA==", "bodyText": "Oh! I suggested that in case we need to check authToken within our IterableAPI classes internally. Could be useful in test. And possibly in RN too (later).", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461017940", "createdAt": "2020-07-27T16:32:37Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -1223,6 +1245,10 @@ protected void registerDeviceToken(@Nullable String email, @Nullable String user\n         }\n     }\n \n+    protected String getAuthToken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MzU2Mw==", "bodyText": "Yeah, it was only to let the tests verify the authentication token directly. Otherwise the tests had no (easy) way to check them.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461063563", "createdAt": "2020-07-27T17:48:46Z", "author": {"login": "roninopf"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -1223,6 +1245,10 @@ protected void registerDeviceToken(@Nullable String email, @Nullable String user\n         }\n     }\n \n+    protected String getAuthToken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NzA3Mg==", "bodyText": "Hmm, interesting, I didn't know protected was accessible from tests.. I've always used package-private (no modifier) for this.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461097072", "createdAt": "2020-07-27T18:48:28Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -1223,6 +1245,10 @@ protected void registerDeviceToken(@Nullable String email, @Nullable String user\n         }\n     }\n \n+    protected String getAuthToken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5ODQ3NA==", "bodyText": "\"Protected data member and method are only accessible by the classes of the same package and the subclasses present in any package.\"\nTIL! I thought they were only accessible by the subclasses.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461098474", "createdAt": "2020-07-27T18:50:57Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -1223,6 +1245,10 @@ protected void registerDeviceToken(@Nullable String email, @Nullable String user\n         }\n     }\n \n+    protected String getAuthToken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5ODkyNw==", "bodyText": "Oh!!! When I read package-private above, I realized thats I wanted to tell before!\ud83d\ude05 But yeah strange that protected worked too", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461098927", "createdAt": "2020-07-27T18:51:42Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -1223,6 +1245,10 @@ protected void registerDeviceToken(@Nullable String email, @Nullable String user\n         }\n     }\n \n+    protected String getAuthToken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5OTQwNA==", "bodyText": "However in this case we don't have subclasses of IterableApi, so it would also work with package-private. Let me take a look at how getEmail/getUserId are declared..", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461099404", "createdAt": "2020-07-27T18:52:35Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -1223,6 +1245,10 @@ protected void registerDeviceToken(@Nullable String email, @Nullable String user\n         }\n     }\n \n+    protected String getAuthToken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwMDE5Ng==", "bodyText": "They're package-private.. I think next to them would also be a better place for it. @roninopf Could you remove protected keyword and move this method right below getUserId() in \"Package-Protected Functions\" group?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461100196", "createdAt": "2020-07-27T18:53:59Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -1223,6 +1245,10 @@ protected void registerDeviceToken(@Nullable String email, @Nullable String user\n         }\n     }\n \n+    protected String getAuthToken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwNjI1OQ==", "bodyText": "Done", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461106259", "createdAt": "2020-07-27T19:05:11Z", "author": {"login": "roninopf"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -1223,6 +1245,10 @@ protected void registerDeviceToken(@Nullable String email, @Nullable String user\n         }\n     }\n \n+    protected String getAuthToken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwNjQ0OA==", "bodyText": "Is it protected causing the failure in travis?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461106448", "createdAt": "2020-07-27T19:05:34Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -1223,6 +1245,10 @@ protected void registerDeviceToken(@Nullable String email, @Nullable String user\n         }\n     }\n \n+    protected String getAuthToken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwNjg4NQ==", "bodyText": "@Ayyanchira Oh, right. Let's make it package-private to make it visible to tests.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461106885", "createdAt": "2020-07-27T19:06:25Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -1223,6 +1245,10 @@ protected void registerDeviceToken(@Nullable String email, @Nullable String user\n         }\n     }\n \n+    protected String getAuthToken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzIyMjA4OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMzowNTowM1rOG3B6ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0Mzo1MlrOG3u-ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjI4Mg==", "bodyText": "Since these tests aren't testing persistence, I think these shouldn't have *Persistence suffixes.\nThe tests checking persistence create a new instance of IterableApi to make sure it doesn't have values in memory and loads them from disk.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r460356282", "createdAt": "2020-07-25T03:05:03Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiTest.java", "diffHunk": "@@ -630,4 +630,194 @@ public void testTrackInAppDeleteWithNullParameters() throws Exception {\n         assertNull(requestJson.optString(IterableConstants.KEY_INBOX_SESSION_ID, null));\n     }\n \n+    @Test\n+    public void testSetEmailWithTokenPersistence() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MzY4Ng==", "bodyText": "Will change the suffix", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461063686", "createdAt": "2020-07-27T17:48:58Z", "author": {"login": "roninopf"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiTest.java", "diffHunk": "@@ -630,4 +630,194 @@ public void testTrackInAppDeleteWithNullParameters() throws Exception {\n         assertNull(requestJson.optString(IterableConstants.KEY_INBOX_SESSION_ID, null));\n     }\n \n+    @Test\n+    public void testSetEmailWithTokenPersistence() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjI4Mg=="}, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDU1OA==", "bodyText": "Renamed to *Status. There might be something better? But at least now it's not implying disk data.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461094558", "createdAt": "2020-07-27T18:43:52Z", "author": {"login": "roninopf"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiTest.java", "diffHunk": "@@ -630,4 +630,194 @@ public void testTrackInAppDeleteWithNullParameters() throws Exception {\n         assertNull(requestJson.optString(IterableConstants.KEY_INBOX_SESSION_ID, null));\n     }\n \n+    @Test\n+    public void testSetEmailWithTokenPersistence() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjI4Mg=="}, "originalCommit": {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODQ3NjA0OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiAuthTests.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0NzoxNVrOG3vGAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo1NDo1NlrOG3vWuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjQ1MA==", "bodyText": "What does *Status suffix mean?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461096450", "createdAt": "2020-07-27T18:47:15Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiAuthTests.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package com.iterable.iterableapi;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.robolectric.RuntimeEnvironment;\n+\n+import java.io.IOException;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNull;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+\n+public class IterableApiAuthTests extends BaseTest {\n+\n+    private IterableUtil.IterableUtilImpl originalIterableUtil;\n+    private IterableUtil.IterableUtilImpl iterableUtilSpy;\n+\n+    @Before\n+    public void setUp() {\n+        reInitIterableApi();\n+\n+        originalIterableUtil = IterableUtil.instance;\n+        iterableUtilSpy = spy(originalIterableUtil);\n+        IterableUtil.instance = iterableUtilSpy;\n+    }\n+\n+    @After\n+    public void tearDown() throws IOException {\n+        IterableUtil.instance = originalIterableUtil;\n+        iterableUtilSpy = null;\n+    }\n+\n+    private void reInitIterableApi() {\n+        IterableApi.sharedInstance = spy(new IterableApi());\n+        IterableInAppManager inAppManagerMock = mock(IterableInAppManager.class);\n+        doReturn(inAppManagerMock).when(IterableApi.sharedInstance).getInAppManager();\n+    }\n+\n+    @Test\n+    public void testSetEmailWithTokenStatus() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ba4515e3102cab95c979797a6e353c0c24a0cd2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5OTU0Mg==", "bodyText": "It's supposed to represent the status of the authentication data; I couldn't think of a good suffix that didn't make it more confusing, but I wanted to at least evade *Persistence.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461099542", "createdAt": "2020-07-27T18:52:48Z", "author": {"login": "roninopf"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiAuthTests.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package com.iterable.iterableapi;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.robolectric.RuntimeEnvironment;\n+\n+import java.io.IOException;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNull;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+\n+public class IterableApiAuthTests extends BaseTest {\n+\n+    private IterableUtil.IterableUtilImpl originalIterableUtil;\n+    private IterableUtil.IterableUtilImpl iterableUtilSpy;\n+\n+    @Before\n+    public void setUp() {\n+        reInitIterableApi();\n+\n+        originalIterableUtil = IterableUtil.instance;\n+        iterableUtilSpy = spy(originalIterableUtil);\n+        IterableUtil.instance = iterableUtilSpy;\n+    }\n+\n+    @After\n+    public void tearDown() throws IOException {\n+        IterableUtil.instance = originalIterableUtil;\n+        iterableUtilSpy = null;\n+    }\n+\n+    private void reInitIterableApi() {\n+        IterableApi.sharedInstance = spy(new IterableApi());\n+        IterableInAppManager inAppManagerMock = mock(IterableInAppManager.class);\n+        doReturn(inAppManagerMock).when(IterableApi.sharedInstance).getInAppManager();\n+    }\n+\n+    @Test\n+    public void testSetEmailWithTokenStatus() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjQ1MA=="}, "originalCommit": {"oid": "5ba4515e3102cab95c979797a6e353c0c24a0cd2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5OTk2Ng==", "bodyText": "Just plain\ntestSetEmailWithToken\ntestSetEmailEmptyToken\ntestSetEmailWithNullToken\ntestSetNullEmailWithToken\nkind of names would also work", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461099966", "createdAt": "2020-07-27T18:53:37Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiAuthTests.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package com.iterable.iterableapi;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.robolectric.RuntimeEnvironment;\n+\n+import java.io.IOException;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNull;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+\n+public class IterableApiAuthTests extends BaseTest {\n+\n+    private IterableUtil.IterableUtilImpl originalIterableUtil;\n+    private IterableUtil.IterableUtilImpl iterableUtilSpy;\n+\n+    @Before\n+    public void setUp() {\n+        reInitIterableApi();\n+\n+        originalIterableUtil = IterableUtil.instance;\n+        iterableUtilSpy = spy(originalIterableUtil);\n+        IterableUtil.instance = iterableUtilSpy;\n+    }\n+\n+    @After\n+    public void tearDown() throws IOException {\n+        IterableUtil.instance = originalIterableUtil;\n+        iterableUtilSpy = null;\n+    }\n+\n+    private void reInitIterableApi() {\n+        IterableApi.sharedInstance = spy(new IterableApi());\n+        IterableInAppManager inAppManagerMock = mock(IterableInAppManager.class);\n+        doReturn(inAppManagerMock).when(IterableApi.sharedInstance).getInAppManager();\n+    }\n+\n+    @Test\n+    public void testSetEmailWithTokenStatus() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjQ1MA=="}, "originalCommit": {"oid": "5ba4515e3102cab95c979797a6e353c0c24a0cd2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwMDU0NQ==", "bodyText": "I think it won't lose anything without the suffix.. testSetEmailWithToken makes sense.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461100545", "createdAt": "2020-07-27T18:54:38Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiAuthTests.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package com.iterable.iterableapi;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.robolectric.RuntimeEnvironment;\n+\n+import java.io.IOException;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNull;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+\n+public class IterableApiAuthTests extends BaseTest {\n+\n+    private IterableUtil.IterableUtilImpl originalIterableUtil;\n+    private IterableUtil.IterableUtilImpl iterableUtilSpy;\n+\n+    @Before\n+    public void setUp() {\n+        reInitIterableApi();\n+\n+        originalIterableUtil = IterableUtil.instance;\n+        iterableUtilSpy = spy(originalIterableUtil);\n+        IterableUtil.instance = iterableUtilSpy;\n+    }\n+\n+    @After\n+    public void tearDown() throws IOException {\n+        IterableUtil.instance = originalIterableUtil;\n+        iterableUtilSpy = null;\n+    }\n+\n+    private void reInitIterableApi() {\n+        IterableApi.sharedInstance = spy(new IterableApi());\n+        IterableInAppManager inAppManagerMock = mock(IterableInAppManager.class);\n+        doReturn(inAppManagerMock).when(IterableApi.sharedInstance).getInAppManager();\n+    }\n+\n+    @Test\n+    public void testSetEmailWithTokenStatus() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjQ1MA=="}, "originalCommit": {"oid": "5ba4515e3102cab95c979797a6e353c0c24a0cd2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwMDcyOQ==", "bodyText": "Okay! I'll just drop it. I think you're right.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461100729", "createdAt": "2020-07-27T18:54:56Z", "author": {"login": "roninopf"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiAuthTests.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package com.iterable.iterableapi;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.robolectric.RuntimeEnvironment;\n+\n+import java.io.IOException;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNull;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+\n+public class IterableApiAuthTests extends BaseTest {\n+\n+    private IterableUtil.IterableUtilImpl originalIterableUtil;\n+    private IterableUtil.IterableUtilImpl iterableUtilSpy;\n+\n+    @Before\n+    public void setUp() {\n+        reInitIterableApi();\n+\n+        originalIterableUtil = IterableUtil.instance;\n+        iterableUtilSpy = spy(originalIterableUtil);\n+        IterableUtil.instance = iterableUtilSpy;\n+    }\n+\n+    @After\n+    public void tearDown() throws IOException {\n+        IterableUtil.instance = originalIterableUtil;\n+        iterableUtilSpy = null;\n+    }\n+\n+    private void reInitIterableApi() {\n+        IterableApi.sharedInstance = spy(new IterableApi());\n+        IterableInAppManager inAppManagerMock = mock(IterableInAppManager.class);\n+        doReturn(inAppManagerMock).when(IterableApi.sharedInstance).getInAppManager();\n+    }\n+\n+    @Test\n+    public void testSetEmailWithTokenStatus() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjQ1MA=="}, "originalCommit": {"oid": "5ba4515e3102cab95c979797a6e353c0c24a0cd2"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2299, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}