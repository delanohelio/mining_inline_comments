{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNTk5MjE0", "number": 301, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDo1OToxMFrOFH7l-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDo0ODowNVrOFITAJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODYwNzMwOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDo1OToxMFrOIJlv5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDo1OToxMFrOIJlv5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyNjU2NQ==", "bodyText": "this will be a private function", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r546926565", "createdAt": "2020-12-21T20:59:10Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.iterable.iterableapi;\n+\n+import android.content.Context;\n+import android.net.ConnectivityManager;\n+import android.net.Network;\n+import android.net.NetworkRequest;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+\n+import java.util.ArrayList;\n+\n+class IterableNetworkConnectivityManager {\n+    private static final String TAG = \"NetworkConnectivityManager\";\n+    private boolean isConnected;\n+\n+    private static IterableNetworkConnectivityManager sharedInstance;\n+\n+    private ArrayList<IterableNetworkMonitorListener> networkMonitorListeners = new ArrayList<>();\n+\n+    public interface IterableNetworkMonitorListener {\n+        void onNetworkConnected();\n+\n+        void onNetworkDisconnected();\n+    }\n+\n+    static IterableNetworkConnectivityManager sharedInstance(Context context) {\n+        if (sharedInstance == null) {\n+            sharedInstance = new IterableNetworkConnectivityManager(context);\n+        }\n+        return sharedInstance;\n+    }\n+\n+    private IterableNetworkConnectivityManager(Context context) {\n+        if (context == null) {\n+            return;\n+        }\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            startNetworkCallback(context);\n+        }\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n+    public void startNetworkCallback(Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "487b2b0747da3a2f4ef8b9ff7a1107aef2149027"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODYwOTAwOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDo1OTo0N1rOIJlw5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDo1OTo0N1rOIJlw5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyNjgyMQ==", "bodyText": "This will be package private", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r546926821", "createdAt": "2020-12-21T20:59:47Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.iterable.iterableapi;\n+\n+import android.content.Context;\n+import android.net.ConnectivityManager;\n+import android.net.Network;\n+import android.net.NetworkRequest;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+\n+import java.util.ArrayList;\n+\n+class IterableNetworkConnectivityManager {\n+    private static final String TAG = \"NetworkConnectivityManager\";\n+    private boolean isConnected;\n+\n+    private static IterableNetworkConnectivityManager sharedInstance;\n+\n+    private ArrayList<IterableNetworkMonitorListener> networkMonitorListeners = new ArrayList<>();\n+\n+    public interface IterableNetworkMonitorListener {\n+        void onNetworkConnected();\n+\n+        void onNetworkDisconnected();\n+    }\n+\n+    static IterableNetworkConnectivityManager sharedInstance(Context context) {\n+        if (sharedInstance == null) {\n+            sharedInstance = new IterableNetworkConnectivityManager(context);\n+        }\n+        return sharedInstance;\n+    }\n+\n+    private IterableNetworkConnectivityManager(Context context) {\n+        if (context == null) {\n+            return;\n+        }\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            startNetworkCallback(context);\n+        }\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n+    public void startNetworkCallback(Context context) {\n+        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n+        NetworkRequest.Builder networkBuilder = new NetworkRequest.Builder();\n+\n+        if (connectivityManager != null) {\n+            connectivityManager.registerNetworkCallback(networkBuilder.build(), new ConnectivityManager.NetworkCallback() {\n+                @Override\n+                public void onAvailable(@NonNull Network network) {\n+                    super.onAvailable(network);\n+                    IterableLogger.v(TAG, \"Network Connected\");\n+                    isConnected = true;\n+                    for (IterableNetworkMonitorListener listener : networkMonitorListeners) {\n+                        listener.onNetworkConnected();\n+                    }\n+                }\n+\n+                @Override\n+                public void onLost(@NonNull Network network) {\n+                    super.onLost(network);\n+                    IterableLogger.v(TAG, \"Network Disconnected\");\n+                    isConnected = false;\n+                    for (IterableNetworkMonitorListener listener : networkMonitorListeners) {\n+                        listener.onNetworkDisconnected();\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    public void addNetworkListener(IterableNetworkMonitorListener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "487b2b0747da3a2f4ef8b9ff7a1107aef2149027"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjQzMjY5OnYy", "diffSide": "RIGHT", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDo0NDo0MlrOIKIrvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDowMDozNFrOIK9-_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5ODk0MA==", "bodyText": "Which thread is this going to run on?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r547498940", "createdAt": "2020-12-22T20:44:42Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.iterable.iterableapi;\n+\n+import android.content.Context;\n+import android.net.ConnectivityManager;\n+import android.net.Network;\n+import android.net.NetworkRequest;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+\n+import java.util.ArrayList;\n+\n+class IterableNetworkConnectivityManager {\n+    private static final String TAG = \"NetworkConnectivityManager\";\n+    private boolean isConnected;\n+\n+    private static IterableNetworkConnectivityManager sharedInstance;\n+\n+    private ArrayList<IterableNetworkMonitorListener> networkMonitorListeners = new ArrayList<>();\n+\n+    public interface IterableNetworkMonitorListener {\n+        void onNetworkConnected();\n+\n+        void onNetworkDisconnected();\n+    }\n+\n+    static IterableNetworkConnectivityManager sharedInstance(Context context) {\n+        if (sharedInstance == null) {\n+            sharedInstance = new IterableNetworkConnectivityManager(context);\n+        }\n+        return sharedInstance;\n+    }\n+\n+    private IterableNetworkConnectivityManager(Context context) {\n+        if (context == null) {\n+            return;\n+        }\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            startNetworkCallback(context);\n+        }\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n+    private void startNetworkCallback(Context context) {\n+        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n+        NetworkRequest.Builder networkBuilder = new NetworkRequest.Builder();\n+\n+        if (connectivityManager != null) {\n+            connectivityManager.registerNetworkCallback(networkBuilder.build(), new ConnectivityManager.NetworkCallback() {\n+                @Override\n+                public void onAvailable(@NonNull Network network) {\n+                    super.onAvailable(network);\n+                    IterableLogger.v(TAG, \"Network Connected\");\n+                    isConnected = true;\n+                    for (IterableNetworkMonitorListener listener : networkMonitorListeners) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxMjkxMg==", "bodyText": "oh.. it will be on main thread right?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r547512912", "createdAt": "2020-12-22T21:21:05Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.iterable.iterableapi;\n+\n+import android.content.Context;\n+import android.net.ConnectivityManager;\n+import android.net.Network;\n+import android.net.NetworkRequest;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+\n+import java.util.ArrayList;\n+\n+class IterableNetworkConnectivityManager {\n+    private static final String TAG = \"NetworkConnectivityManager\";\n+    private boolean isConnected;\n+\n+    private static IterableNetworkConnectivityManager sharedInstance;\n+\n+    private ArrayList<IterableNetworkMonitorListener> networkMonitorListeners = new ArrayList<>();\n+\n+    public interface IterableNetworkMonitorListener {\n+        void onNetworkConnected();\n+\n+        void onNetworkDisconnected();\n+    }\n+\n+    static IterableNetworkConnectivityManager sharedInstance(Context context) {\n+        if (sharedInstance == null) {\n+            sharedInstance = new IterableNetworkConnectivityManager(context);\n+        }\n+        return sharedInstance;\n+    }\n+\n+    private IterableNetworkConnectivityManager(Context context) {\n+        if (context == null) {\n+            return;\n+        }\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            startNetworkCallback(context);\n+        }\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n+    private void startNetworkCallback(Context context) {\n+        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n+        NetworkRequest.Builder networkBuilder = new NetworkRequest.Builder();\n+\n+        if (connectivityManager != null) {\n+            connectivityManager.registerNetworkCallback(networkBuilder.build(), new ConnectivityManager.NetworkCallback() {\n+                @Override\n+                public void onAvailable(@NonNull Network network) {\n+                    super.onAvailable(network);\n+                    IterableLogger.v(TAG, \"Network Connected\");\n+                    isConnected = true;\n+                    for (IterableNetworkMonitorListener listener : networkMonitorListeners) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5ODk0MA=="}, "originalCommit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDY5OA==", "bodyText": "Depends on the thread ConnectivityManager.NetworkCallback is called from.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r547514698", "createdAt": "2020-12-22T21:26:07Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.iterable.iterableapi;\n+\n+import android.content.Context;\n+import android.net.ConnectivityManager;\n+import android.net.Network;\n+import android.net.NetworkRequest;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+\n+import java.util.ArrayList;\n+\n+class IterableNetworkConnectivityManager {\n+    private static final String TAG = \"NetworkConnectivityManager\";\n+    private boolean isConnected;\n+\n+    private static IterableNetworkConnectivityManager sharedInstance;\n+\n+    private ArrayList<IterableNetworkMonitorListener> networkMonitorListeners = new ArrayList<>();\n+\n+    public interface IterableNetworkMonitorListener {\n+        void onNetworkConnected();\n+\n+        void onNetworkDisconnected();\n+    }\n+\n+    static IterableNetworkConnectivityManager sharedInstance(Context context) {\n+        if (sharedInstance == null) {\n+            sharedInstance = new IterableNetworkConnectivityManager(context);\n+        }\n+        return sharedInstance;\n+    }\n+\n+    private IterableNetworkConnectivityManager(Context context) {\n+        if (context == null) {\n+            return;\n+        }\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            startNetworkCallback(context);\n+        }\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n+    private void startNetworkCallback(Context context) {\n+        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n+        NetworkRequest.Builder networkBuilder = new NetworkRequest.Builder();\n+\n+        if (connectivityManager != null) {\n+            connectivityManager.registerNetworkCallback(networkBuilder.build(), new ConnectivityManager.NetworkCallback() {\n+                @Override\n+                public void onAvailable(@NonNull Network network) {\n+                    super.onAvailable(network);\n+                    IterableLogger.v(TAG, \"Network Connected\");\n+                    isConnected = true;\n+                    for (IterableNetworkMonitorListener listener : networkMonitorListeners) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5ODk0MA=="}, "originalCommit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTMwMg==", "bodyText": "It says default internal handler", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r547515302", "createdAt": "2020-12-22T21:27:47Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.iterable.iterableapi;\n+\n+import android.content.Context;\n+import android.net.ConnectivityManager;\n+import android.net.Network;\n+import android.net.NetworkRequest;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+\n+import java.util.ArrayList;\n+\n+class IterableNetworkConnectivityManager {\n+    private static final String TAG = \"NetworkConnectivityManager\";\n+    private boolean isConnected;\n+\n+    private static IterableNetworkConnectivityManager sharedInstance;\n+\n+    private ArrayList<IterableNetworkMonitorListener> networkMonitorListeners = new ArrayList<>();\n+\n+    public interface IterableNetworkMonitorListener {\n+        void onNetworkConnected();\n+\n+        void onNetworkDisconnected();\n+    }\n+\n+    static IterableNetworkConnectivityManager sharedInstance(Context context) {\n+        if (sharedInstance == null) {\n+            sharedInstance = new IterableNetworkConnectivityManager(context);\n+        }\n+        return sharedInstance;\n+    }\n+\n+    private IterableNetworkConnectivityManager(Context context) {\n+        if (context == null) {\n+            return;\n+        }\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            startNetworkCallback(context);\n+        }\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n+    private void startNetworkCallback(Context context) {\n+        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n+        NetworkRequest.Builder networkBuilder = new NetworkRequest.Builder();\n+\n+        if (connectivityManager != null) {\n+            connectivityManager.registerNetworkCallback(networkBuilder.build(), new ConnectivityManager.NetworkCallback() {\n+                @Override\n+                public void onAvailable(@NonNull Network network) {\n+                    super.onAvailable(network);\n+                    IterableLogger.v(TAG, \"Network Connected\");\n+                    isConnected = true;\n+                    for (IterableNetworkMonitorListener listener : networkMonitorListeners) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5ODk0MA=="}, "originalCommit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxOTkxNA==", "bodyText": "Looks like it is a separate thread/handler spun by Android's ConnectivityManager class.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r547519914", "createdAt": "2020-12-22T21:40:27Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.iterable.iterableapi;\n+\n+import android.content.Context;\n+import android.net.ConnectivityManager;\n+import android.net.Network;\n+import android.net.NetworkRequest;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+\n+import java.util.ArrayList;\n+\n+class IterableNetworkConnectivityManager {\n+    private static final String TAG = \"NetworkConnectivityManager\";\n+    private boolean isConnected;\n+\n+    private static IterableNetworkConnectivityManager sharedInstance;\n+\n+    private ArrayList<IterableNetworkMonitorListener> networkMonitorListeners = new ArrayList<>();\n+\n+    public interface IterableNetworkMonitorListener {\n+        void onNetworkConnected();\n+\n+        void onNetworkDisconnected();\n+    }\n+\n+    static IterableNetworkConnectivityManager sharedInstance(Context context) {\n+        if (sharedInstance == null) {\n+            sharedInstance = new IterableNetworkConnectivityManager(context);\n+        }\n+        return sharedInstance;\n+    }\n+\n+    private IterableNetworkConnectivityManager(Context context) {\n+        if (context == null) {\n+            return;\n+        }\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            startNetworkCallback(context);\n+        }\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n+    private void startNetworkCallback(Context context) {\n+        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n+        NetworkRequest.Builder networkBuilder = new NetworkRequest.Builder();\n+\n+        if (connectivityManager != null) {\n+            connectivityManager.registerNetworkCallback(networkBuilder.build(), new ConnectivityManager.NetworkCallback() {\n+                @Override\n+                public void onAvailable(@NonNull Network network) {\n+                    super.onAvailable(network);\n+                    IterableLogger.v(TAG, \"Network Connected\");\n+                    isConnected = true;\n+                    for (IterableNetworkMonitorListener listener : networkMonitorListeners) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5ODk0MA=="}, "originalCommit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjIyMg==", "bodyText": "I'll create a separate JIRA and take a look at this later as part of my PR.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r548372222", "createdAt": "2020-12-24T04:00:34Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableNetworkConnectivityManager.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.iterable.iterableapi;\n+\n+import android.content.Context;\n+import android.net.ConnectivityManager;\n+import android.net.Network;\n+import android.net.NetworkRequest;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+\n+import java.util.ArrayList;\n+\n+class IterableNetworkConnectivityManager {\n+    private static final String TAG = \"NetworkConnectivityManager\";\n+    private boolean isConnected;\n+\n+    private static IterableNetworkConnectivityManager sharedInstance;\n+\n+    private ArrayList<IterableNetworkMonitorListener> networkMonitorListeners = new ArrayList<>();\n+\n+    public interface IterableNetworkMonitorListener {\n+        void onNetworkConnected();\n+\n+        void onNetworkDisconnected();\n+    }\n+\n+    static IterableNetworkConnectivityManager sharedInstance(Context context) {\n+        if (sharedInstance == null) {\n+            sharedInstance = new IterableNetworkConnectivityManager(context);\n+        }\n+        return sharedInstance;\n+    }\n+\n+    private IterableNetworkConnectivityManager(Context context) {\n+        if (context == null) {\n+            return;\n+        }\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            startNetworkCallback(context);\n+        }\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\n+    private void startNetworkCallback(Context context) {\n+        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n+        NetworkRequest.Builder networkBuilder = new NetworkRequest.Builder();\n+\n+        if (connectivityManager != null) {\n+            connectivityManager.registerNetworkCallback(networkBuilder.build(), new ConnectivityManager.NetworkCallback() {\n+                @Override\n+                public void onAvailable(@NonNull Network network) {\n+                    super.onAvailable(network);\n+                    IterableLogger.v(TAG, \"Network Connected\");\n+                    isConnected = true;\n+                    for (IterableNetworkMonitorListener listener : networkMonitorListeners) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5ODk0MA=="}, "originalCommit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjQ0MjYzOnYy", "diffSide": "RIGHT", "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableTaskRunnerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDo0ODowNVrOIKIxYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToxODo1NlrOIKJfJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUwMDM4NA==", "bodyText": "Why is it called twice?", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r547500384", "createdAt": "2020-12-22T20:48:05Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableTaskRunnerTest.java", "diffHunk": "@@ -77,6 +84,40 @@ public void testRunOnTaskCreatedCallsCompletionListener() throws Exception {\n         verify(taskCompletedListener).onTaskCompleted(any(String.class), eq(IterableTaskRunner.TaskResult.SUCCESS), any(IterableApiResponse.class));\n     }\n \n+    @Test\n+    public void testNoRequestsWhenOffline() throws Exception {\n+        clearInvocations(mockTaskStorage);\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", \"api/test\", new JSONObject(), \"POST\", null, null, null);\n+        IterableTask task = new IterableTask(\"testTask\", IterableTaskType.API, request.toJSONObject().toString());\n+        when(mockTaskStorage.getNextScheduledTask()).thenReturn(task).thenReturn(null);\n+        when(mockNetworkConnectivityManager.isConnected()).thenReturn(false);\n+        IterableTaskRunner.TaskCompletedListener taskCompletedListener = mock(IterableTaskRunner.TaskCompletedListener.class);\n+        taskRunner.addTaskCompletedListener(taskCompletedListener);\n+\n+        server.enqueue(new MockResponse().setResponseCode(200).setBody(\"{}\"));\n+        taskRunner.onTaskCreated(null);\n+\n+        runHandlerTasks(taskRunner);\n+        verify(mockNetworkConnectivityManager, times(1)).isConnected();\n+        RecordedRequest recordedRequest = server.takeRequest(1, TimeUnit.SECONDS);\n+        assertNull(recordedRequest);\n+        shadowOf(getMainLooper()).idle();\n+        verifyNoInteractions(taskCompletedListener);\n+        verifyNoInteractions(mockTaskStorage);\n+    }\n+\n+    @Test\n+    public void testIfNetworkCheckedBeforeProcessingTask() throws Exception {\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", \"api/test\", new JSONObject(), \"POST\", null, null, null);\n+        IterableTask task = new IterableTask(\"testTask\", IterableTaskType.API, request.toJSONObject().toString());\n+        when(mockTaskStorage.getNextScheduledTask()).thenReturn(task).thenReturn(null);\n+        when(mockNetworkConnectivityManager.isConnected()).thenReturn(true);\n+        taskRunner.onTaskCreated(null);\n+        runHandlerTasks(taskRunner);\n+        shadowOf(getMainLooper()).idle();\n+        verify(mockNetworkConnectivityManager, times(2)).isConnected();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUwMjI2Mg==", "bodyText": "while isConnected -> next task -> processes the task\nwhile isConnected -> nextTask is null and breaks.. Thus two times \ud83d\ude05\nI was looking to just see if the networkConnectivityManager is invoked.. but couldn't recall a mockito method for that", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r547502262", "createdAt": "2020-12-22T20:52:39Z", "author": {"login": "Ayyanchira"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableTaskRunnerTest.java", "diffHunk": "@@ -77,6 +84,40 @@ public void testRunOnTaskCreatedCallsCompletionListener() throws Exception {\n         verify(taskCompletedListener).onTaskCompleted(any(String.class), eq(IterableTaskRunner.TaskResult.SUCCESS), any(IterableApiResponse.class));\n     }\n \n+    @Test\n+    public void testNoRequestsWhenOffline() throws Exception {\n+        clearInvocations(mockTaskStorage);\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", \"api/test\", new JSONObject(), \"POST\", null, null, null);\n+        IterableTask task = new IterableTask(\"testTask\", IterableTaskType.API, request.toJSONObject().toString());\n+        when(mockTaskStorage.getNextScheduledTask()).thenReturn(task).thenReturn(null);\n+        when(mockNetworkConnectivityManager.isConnected()).thenReturn(false);\n+        IterableTaskRunner.TaskCompletedListener taskCompletedListener = mock(IterableTaskRunner.TaskCompletedListener.class);\n+        taskRunner.addTaskCompletedListener(taskCompletedListener);\n+\n+        server.enqueue(new MockResponse().setResponseCode(200).setBody(\"{}\"));\n+        taskRunner.onTaskCreated(null);\n+\n+        runHandlerTasks(taskRunner);\n+        verify(mockNetworkConnectivityManager, times(1)).isConnected();\n+        RecordedRequest recordedRequest = server.takeRequest(1, TimeUnit.SECONDS);\n+        assertNull(recordedRequest);\n+        shadowOf(getMainLooper()).idle();\n+        verifyNoInteractions(taskCompletedListener);\n+        verifyNoInteractions(mockTaskStorage);\n+    }\n+\n+    @Test\n+    public void testIfNetworkCheckedBeforeProcessingTask() throws Exception {\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", \"api/test\", new JSONObject(), \"POST\", null, null, null);\n+        IterableTask task = new IterableTask(\"testTask\", IterableTaskType.API, request.toJSONObject().toString());\n+        when(mockTaskStorage.getNextScheduledTask()).thenReturn(task).thenReturn(null);\n+        when(mockNetworkConnectivityManager.isConnected()).thenReturn(true);\n+        taskRunner.onTaskCreated(null);\n+        runHandlerTasks(taskRunner);\n+        shadowOf(getMainLooper()).idle();\n+        verify(mockNetworkConnectivityManager, times(2)).isConnected();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUwMDM4NA=="}, "originalCommit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxMjEwMA==", "bodyText": "Ah, I see.. This sounds good then.", "url": "https://github.com/Iterable/iterable-android-sdk/pull/301#discussion_r547512100", "createdAt": "2020-12-22T21:18:56Z", "author": {"login": "vbabenkoru"}, "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableTaskRunnerTest.java", "diffHunk": "@@ -77,6 +84,40 @@ public void testRunOnTaskCreatedCallsCompletionListener() throws Exception {\n         verify(taskCompletedListener).onTaskCompleted(any(String.class), eq(IterableTaskRunner.TaskResult.SUCCESS), any(IterableApiResponse.class));\n     }\n \n+    @Test\n+    public void testNoRequestsWhenOffline() throws Exception {\n+        clearInvocations(mockTaskStorage);\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", \"api/test\", new JSONObject(), \"POST\", null, null, null);\n+        IterableTask task = new IterableTask(\"testTask\", IterableTaskType.API, request.toJSONObject().toString());\n+        when(mockTaskStorage.getNextScheduledTask()).thenReturn(task).thenReturn(null);\n+        when(mockNetworkConnectivityManager.isConnected()).thenReturn(false);\n+        IterableTaskRunner.TaskCompletedListener taskCompletedListener = mock(IterableTaskRunner.TaskCompletedListener.class);\n+        taskRunner.addTaskCompletedListener(taskCompletedListener);\n+\n+        server.enqueue(new MockResponse().setResponseCode(200).setBody(\"{}\"));\n+        taskRunner.onTaskCreated(null);\n+\n+        runHandlerTasks(taskRunner);\n+        verify(mockNetworkConnectivityManager, times(1)).isConnected();\n+        RecordedRequest recordedRequest = server.takeRequest(1, TimeUnit.SECONDS);\n+        assertNull(recordedRequest);\n+        shadowOf(getMainLooper()).idle();\n+        verifyNoInteractions(taskCompletedListener);\n+        verifyNoInteractions(mockTaskStorage);\n+    }\n+\n+    @Test\n+    public void testIfNetworkCheckedBeforeProcessingTask() throws Exception {\n+        IterableApiRequest request = new IterableApiRequest(\"apiKey\", \"api/test\", new JSONObject(), \"POST\", null, null, null);\n+        IterableTask task = new IterableTask(\"testTask\", IterableTaskType.API, request.toJSONObject().toString());\n+        when(mockTaskStorage.getNextScheduledTask()).thenReturn(task).thenReturn(null);\n+        when(mockNetworkConnectivityManager.isConnected()).thenReturn(true);\n+        taskRunner.onTaskCreated(null);\n+        runHandlerTasks(taskRunner);\n+        shadowOf(getMainLooper()).idle();\n+        verify(mockNetworkConnectivityManager, times(2)).isConnected();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUwMDM4NA=="}, "originalCommit": {"oid": "fcf4a43bfa68bc8a8465b8b25d76f1aa9d65d199"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2237, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}