{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODg0Mjgx", "number": 2202, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowODozOVrOEntY3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDoyNzo0MVrOEntdmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDczNTY1OnYy", "diffSide": "RIGHT", "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowODozOVrOHYdiRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjowNToxNFrOHc3F2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTc4MA==", "bodyText": "Is there any way to compare steps other than toString()?", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r495411780", "createdAt": "2020-09-26T04:08:39Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java", "diffHunk": "@@ -81,4 +91,57 @@ private static boolean isEmpty(Object obj) {\n         throw new IllegalArgumentException(\"Cannot determine size of: \" + obj);\n     }\n \n+    public static void assertNumStep(int expectedResults, int expectedSteps, GraphTraversal traversal, Class<? extends Step>... expectedStepTypes) {\n+        int num = 0;\n+        while (traversal.hasNext()) {\n+            traversal.next();\n+            num++;\n+        }\n+\n+        assertEquals(expectedResults, num);\n+\n+        //Verify that steps line up with what is expected after JanusGraph's optimizations are applied\n+        List<Step> steps = traversal.asAdmin().getSteps();\n+        Set<Class<? extends Step>> expSteps = Sets.newHashSet(expectedStepTypes);\n+        int numSteps = 0;\n+        for (Step s : steps) {\n+            if (s.getClass().equals(GraphStep.class) || s.getClass().equals(StartStep.class)) continue;\n+\n+            if (expSteps.contains(s.getClass())) {\n+                numSteps++;\n+            }\n+        }\n+        assertEquals(expectedSteps, numSteps);\n+    }\n+\n+    public static void assertOptimization(Traversal<?, ?> expectedTraversal, Traversal<?, ?> originalTraversal,\n+                                          TraversalStrategy... optimizationStrategies) {\n+        final TraversalStrategies optimizations = new DefaultTraversalStrategies();\n+        for (final TraversalStrategy<?> strategy : optimizationStrategies) {\n+            optimizations.addStrategies(strategy);\n+        }\n+\n+        originalTraversal.asAdmin().setStrategies(optimizations);\n+        originalTraversal.asAdmin().applyStrategies();\n+\n+        assertEquals(expectedTraversal.asAdmin().getSteps().toString(),\n+            originalTraversal.asAdmin().getSteps().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgwNTA3MA==", "bodyText": "I didn't find one. If you (or anyone) knows how to do it better, please let me know :)", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r495805070", "createdAt": "2020-09-28T09:26:01Z", "author": {"login": "rngcntr"}, "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java", "diffHunk": "@@ -81,4 +91,57 @@ private static boolean isEmpty(Object obj) {\n         throw new IllegalArgumentException(\"Cannot determine size of: \" + obj);\n     }\n \n+    public static void assertNumStep(int expectedResults, int expectedSteps, GraphTraversal traversal, Class<? extends Step>... expectedStepTypes) {\n+        int num = 0;\n+        while (traversal.hasNext()) {\n+            traversal.next();\n+            num++;\n+        }\n+\n+        assertEquals(expectedResults, num);\n+\n+        //Verify that steps line up with what is expected after JanusGraph's optimizations are applied\n+        List<Step> steps = traversal.asAdmin().getSteps();\n+        Set<Class<? extends Step>> expSteps = Sets.newHashSet(expectedStepTypes);\n+        int numSteps = 0;\n+        for (Step s : steps) {\n+            if (s.getClass().equals(GraphStep.class) || s.getClass().equals(StartStep.class)) continue;\n+\n+            if (expSteps.contains(s.getClass())) {\n+                numSteps++;\n+            }\n+        }\n+        assertEquals(expectedSteps, numSteps);\n+    }\n+\n+    public static void assertOptimization(Traversal<?, ?> expectedTraversal, Traversal<?, ?> originalTraversal,\n+                                          TraversalStrategy... optimizationStrategies) {\n+        final TraversalStrategies optimizations = new DefaultTraversalStrategies();\n+        for (final TraversalStrategy<?> strategy : optimizationStrategies) {\n+            optimizations.addStrategies(strategy);\n+        }\n+\n+        originalTraversal.asAdmin().setStrategies(optimizations);\n+        originalTraversal.asAdmin().applyStrategies();\n+\n+        assertEquals(expectedTraversal.asAdmin().getSteps().toString(),\n+            originalTraversal.asAdmin().getSteps().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTc4MA=="}, "originalCommit": {"oid": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMTMyMg==", "bodyText": "What about simply doing assertEquals(expectedTraversal.asAdmin().getSteps(), originalTraversal.asAdmin().getSteps());?", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r499711322", "createdAt": "2020-10-05T16:06:58Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java", "diffHunk": "@@ -81,4 +91,57 @@ private static boolean isEmpty(Object obj) {\n         throw new IllegalArgumentException(\"Cannot determine size of: \" + obj);\n     }\n \n+    public static void assertNumStep(int expectedResults, int expectedSteps, GraphTraversal traversal, Class<? extends Step>... expectedStepTypes) {\n+        int num = 0;\n+        while (traversal.hasNext()) {\n+            traversal.next();\n+            num++;\n+        }\n+\n+        assertEquals(expectedResults, num);\n+\n+        //Verify that steps line up with what is expected after JanusGraph's optimizations are applied\n+        List<Step> steps = traversal.asAdmin().getSteps();\n+        Set<Class<? extends Step>> expSteps = Sets.newHashSet(expectedStepTypes);\n+        int numSteps = 0;\n+        for (Step s : steps) {\n+            if (s.getClass().equals(GraphStep.class) || s.getClass().equals(StartStep.class)) continue;\n+\n+            if (expSteps.contains(s.getClass())) {\n+                numSteps++;\n+            }\n+        }\n+        assertEquals(expectedSteps, numSteps);\n+    }\n+\n+    public static void assertOptimization(Traversal<?, ?> expectedTraversal, Traversal<?, ?> originalTraversal,\n+                                          TraversalStrategy... optimizationStrategies) {\n+        final TraversalStrategies optimizations = new DefaultTraversalStrategies();\n+        for (final TraversalStrategy<?> strategy : optimizationStrategies) {\n+            optimizations.addStrategies(strategy);\n+        }\n+\n+        originalTraversal.asAdmin().setStrategies(optimizations);\n+        originalTraversal.asAdmin().applyStrategies();\n+\n+        assertEquals(expectedTraversal.asAdmin().getSteps().toString(),\n+            originalTraversal.asAdmin().getSteps().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTc4MA=="}, "originalCommit": {"oid": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNDc5NA==", "bodyText": "IIRC there was a problem that equality on steps does not work as expected because of some == / equals discrepancies. I can look at that again and then reply back", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r500024794", "createdAt": "2020-10-06T06:05:14Z", "author": {"login": "rngcntr"}, "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java", "diffHunk": "@@ -81,4 +91,57 @@ private static boolean isEmpty(Object obj) {\n         throw new IllegalArgumentException(\"Cannot determine size of: \" + obj);\n     }\n \n+    public static void assertNumStep(int expectedResults, int expectedSteps, GraphTraversal traversal, Class<? extends Step>... expectedStepTypes) {\n+        int num = 0;\n+        while (traversal.hasNext()) {\n+            traversal.next();\n+            num++;\n+        }\n+\n+        assertEquals(expectedResults, num);\n+\n+        //Verify that steps line up with what is expected after JanusGraph's optimizations are applied\n+        List<Step> steps = traversal.asAdmin().getSteps();\n+        Set<Class<? extends Step>> expSteps = Sets.newHashSet(expectedStepTypes);\n+        int numSteps = 0;\n+        for (Step s : steps) {\n+            if (s.getClass().equals(GraphStep.class) || s.getClass().equals(StartStep.class)) continue;\n+\n+            if (expSteps.contains(s.getClass())) {\n+                numSteps++;\n+            }\n+        }\n+        assertEquals(expectedSteps, numSteps);\n+    }\n+\n+    public static void assertOptimization(Traversal<?, ?> expectedTraversal, Traversal<?, ?> originalTraversal,\n+                                          TraversalStrategy... optimizationStrategies) {\n+        final TraversalStrategies optimizations = new DefaultTraversalStrategies();\n+        for (final TraversalStrategy<?> strategy : optimizationStrategies) {\n+            optimizations.addStrategies(strategy);\n+        }\n+\n+        originalTraversal.asAdmin().setStrategies(optimizations);\n+        originalTraversal.asAdmin().applyStrategies();\n+\n+        assertEquals(expectedTraversal.asAdmin().getSteps().toString(),\n+            originalTraversal.asAdmin().getSteps().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTc4MA=="}, "originalCommit": {"oid": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDczNjM5OnYy", "diffSide": "RIGHT", "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDoxMDowM1rOHYdinQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDoxMDowM1rOHYdinQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTg2OQ==", "bodyText": "Do we have to iterate and count? What about this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(expectedResults, num);\n          \n          \n            \n                    assertEquals(expectedResults, traversal.toList().size());", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r495411869", "createdAt": "2020-09-26T04:10:03Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java", "diffHunk": "@@ -81,4 +91,57 @@ private static boolean isEmpty(Object obj) {\n         throw new IllegalArgumentException(\"Cannot determine size of: \" + obj);\n     }\n \n+    public static void assertNumStep(int expectedResults, int expectedSteps, GraphTraversal traversal, Class<? extends Step>... expectedStepTypes) {\n+        int num = 0;\n+        while (traversal.hasNext()) {\n+            traversal.next();\n+            num++;\n+        }\n+\n+        assertEquals(expectedResults, num);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDczNzM0OnYy", "diffSide": "RIGHT", "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDoxMTowMlrOHYdjBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDoxMTowMlrOHYdjBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTk3NQ==", "bodyText": "nitpick: Can you add Javadoc for this method? The method name itself is not clear enough to understand its usage.", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r495411975", "createdAt": "2020-09-26T04:11:02Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/testutil/JanusGraphAssert.java", "diffHunk": "@@ -81,4 +91,57 @@ private static boolean isEmpty(Object obj) {\n         throw new IllegalArgumentException(\"Cannot determine size of: \" + obj);\n     }\n \n+    public static void assertNumStep(int expectedResults, int expectedSteps, GraphTraversal traversal, Class<? extends Step>... expectedStepTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDc0Nzc3OnYy", "diffSide": "LEFT", "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/graphdb/JanusGraphTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDoyNzo0MVrOHYdn1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0MjoyOFrOHci9qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMzIwNA==", "bodyText": "This test involves composite indexes, which is worth testing against different backends IMO.", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r495413204", "createdAt": "2020-09-26T04:27:41Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/graphdb/JanusGraphTest.java", "diffHunk": "@@ -4058,24 +4037,7 @@ public void testTinkerPopCardinality() {\n     }\n \n     @Test\n-    public void testTinkerPopOptimizationStrategies() {\n-        PropertyKey id = mgmt.makePropertyKey(\"id\").cardinality(Cardinality.SINGLE).dataType(Integer.class).make();\n-        PropertyKey weight = mgmt.makePropertyKey(\"weight\").cardinality(Cardinality.SINGLE).dataType(Integer.class).make();\n-\n-        mgmt.buildIndex(\"byId\", Vertex.class).addKey(id).buildCompositeIndex();\n-        mgmt.buildIndex(\"byWeight\", Vertex.class).addKey(weight).buildCompositeIndex();\n-        mgmt.buildIndex(\"byIdWeight\", Vertex.class).addKey(id).addKey(weight).buildCompositeIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgwMTU5Ng==", "bodyText": "I never thought of it that way. My idea of it is more like: If the backends are well tested, their functioning can be assumed equivalent. Therefore it's the scope of the index tests to ensure that the backend fulfills the specification. Based on that the optimization tests can then assume a functionally correct index.", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r495801596", "createdAt": "2020-09-28T09:20:14Z", "author": {"login": "rngcntr"}, "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/graphdb/JanusGraphTest.java", "diffHunk": "@@ -4058,24 +4037,7 @@ public void testTinkerPopCardinality() {\n     }\n \n     @Test\n-    public void testTinkerPopOptimizationStrategies() {\n-        PropertyKey id = mgmt.makePropertyKey(\"id\").cardinality(Cardinality.SINGLE).dataType(Integer.class).make();\n-        PropertyKey weight = mgmt.makePropertyKey(\"weight\").cardinality(Cardinality.SINGLE).dataType(Integer.class).make();\n-\n-        mgmt.buildIndex(\"byId\", Vertex.class).addKey(id).buildCompositeIndex();\n-        mgmt.buildIndex(\"byWeight\", Vertex.class).addKey(weight).buildCompositeIndex();\n-        mgmt.buildIndex(\"byIdWeight\", Vertex.class).addKey(id).addKey(weight).buildCompositeIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMzIwNA=="}, "originalCommit": {"oid": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzMzM5Nw==", "bodyText": "Are you ok with keeping this as it is? And if so, would you please review the PR again? Thanks!", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r499533397", "createdAt": "2020-10-05T11:37:30Z", "author": {"login": "rngcntr"}, "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/graphdb/JanusGraphTest.java", "diffHunk": "@@ -4058,24 +4037,7 @@ public void testTinkerPopCardinality() {\n     }\n \n     @Test\n-    public void testTinkerPopOptimizationStrategies() {\n-        PropertyKey id = mgmt.makePropertyKey(\"id\").cardinality(Cardinality.SINGLE).dataType(Integer.class).make();\n-        PropertyKey weight = mgmt.makePropertyKey(\"weight\").cardinality(Cardinality.SINGLE).dataType(Integer.class).make();\n-\n-        mgmt.buildIndex(\"byId\", Vertex.class).addKey(id).buildCompositeIndex();\n-        mgmt.buildIndex(\"byWeight\", Vertex.class).addKey(weight).buildCompositeIndex();\n-        mgmt.buildIndex(\"byIdWeight\", Vertex.class).addKey(id).addKey(weight).buildCompositeIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMzIwNA=="}, "originalCommit": {"oid": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NTAxNg==", "bodyText": "That's a fair assumption. I am okay with it but I'd like to leave this conversation open in case anyone has any other opinion.", "url": "https://github.com/JanusGraph/janusgraph/pull/2202#discussion_r499695016", "createdAt": "2020-10-05T15:42:28Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/graphdb/JanusGraphTest.java", "diffHunk": "@@ -4058,24 +4037,7 @@ public void testTinkerPopCardinality() {\n     }\n \n     @Test\n-    public void testTinkerPopOptimizationStrategies() {\n-        PropertyKey id = mgmt.makePropertyKey(\"id\").cardinality(Cardinality.SINGLE).dataType(Integer.class).make();\n-        PropertyKey weight = mgmt.makePropertyKey(\"weight\").cardinality(Cardinality.SINGLE).dataType(Integer.class).make();\n-\n-        mgmt.buildIndex(\"byId\", Vertex.class).addKey(id).buildCompositeIndex();\n-        mgmt.buildIndex(\"byWeight\", Vertex.class).addKey(weight).buildCompositeIndex();\n-        mgmt.buildIndex(\"byIdWeight\", Vertex.class).addKey(id).addKey(weight).buildCompositeIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMzIwNA=="}, "originalCommit": {"oid": "e8fef8a28ace8e31392864296d7ba7fb00abc2d4"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1360, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}