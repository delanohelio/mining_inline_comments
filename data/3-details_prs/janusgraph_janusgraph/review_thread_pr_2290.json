{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMTI0MDk0", "number": 2290, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjoyMzoxM1rOFIN6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjoyMzoxM1rOFIN6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTYwODM0OnYy", "diffSide": "RIGHT", "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjoyMzoxM1rOIKA7FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMTozNDoxOVrOIKOW2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3MTc5Nw==", "bodyText": "LGTM \ud83d\udc4d  I tested locally using the following code which creates and reads 100 thousand vertices. The test passed. I could also see fetchResultSet() is called in hasNext() method.\n   @Test\n    public void testHugeGraph() {\n        int maxK = 100, maxI = 1000;\n        for (int k = 0; k < maxK; k++) {\n            for (int i = 0; i < maxI; i++) {\n                tx.addVertex(\"prop\", k * maxI + i);\n                newTx();\n            }\n        }\n\n        List<Object> props = graph.traversal().V().values(\"prop\").toList();\n        assertEquals(maxK * maxI, new HashSet<>(props).size());\n    }\nThat being said, I also observed something weird: when I ran this locally, I put a debug point (in Intellij) on this line (line 456) to check if this line is reachable. Once I saw the debug point reached, I immediately removed the debug point and resumed the application. Then the test case failed because graph.traversal().V().values(\"prop\").toList() returned fewer results than expected. I could always reproduce it; even when I set maxI = 10 (that is, one thousand vertices in total). However, the same test case always passes as long as I don't set a debug point. I tried letting the thread sleep for 1 or more seconds here, but the test case still passes. Do you have any thoughts?", "url": "https://github.com/JanusGraph/janusgraph/pull/2290#discussion_r547371797", "createdAt": "2020-12-22T16:23:13Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java", "diffHunk": "@@ -441,43 +439,43 @@ public KeyIterator getKeys(final SliceQuery query, final StoreTransaction txh) t\n     private class CQLPagingIterator implements Iterator<Row> {\n \n         private ResultSet currentResultSet;\n-\n-        private int index;\n-        private int paginatedResultSize;\n+        private int availableWithoutFetching;\n         private final Supplier<Statement> statementSupplier;\n \n-        private byte[] lastPagingState = null;\n-\n-        public CQLPagingIterator(final int pageSize, Supplier<Statement> statementSupplier) {\n-            this.index = 0;\n-            this.paginatedResultSize = pageSize;\n+        public CQLPagingIterator(Supplier<Statement> statementSupplier) {\n             this.statementSupplier = statementSupplier;\n-            this.currentResultSet = getResultSet();\n+            fetchResultSet();\n         }\n \n         @Override\n         public boolean hasNext() {\n-            return !currentResultSet.isExhausted();\n+            if(availableWithoutFetching<=0){\n+                if(currentResultSet.isFullyFetched()){\n+                    return false;\n+                }\n+                fetchResultSet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855681621a628e18c68ddc6417daeb982e235ac1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5MTMzNA==", "bodyText": "It's a default behaviour in Intellij debugger to execute the debugged line to print toString() result to convince (most likely you hovered your mouth over this line and thus it executed the line).\nIn you example, you set a debug point on line 456, then you reach that line and when you hover your mouth it will execute fetchResultSet() to check if it can print anything meaningful. After that your resume your debug and go fetching a new page (without actually processing any elements on this page). Basically, calling fetchResultSet() 2 times instead of 1 time.\nThat is why it contains fewer elements (i.e. 1 page fewer elements). Moreover, it's actually can produce more elements (in case you are debugging the last page in multi-page traversal).\nThat said, it's just some debugging problems and not related to the code directly. Also it's just my assumption, in theory it could be something else", "url": "https://github.com/JanusGraph/janusgraph/pull/2290#discussion_r547391334", "createdAt": "2020-12-22T17:00:43Z", "author": {"login": "porunov"}, "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java", "diffHunk": "@@ -441,43 +439,43 @@ public KeyIterator getKeys(final SliceQuery query, final StoreTransaction txh) t\n     private class CQLPagingIterator implements Iterator<Row> {\n \n         private ResultSet currentResultSet;\n-\n-        private int index;\n-        private int paginatedResultSize;\n+        private int availableWithoutFetching;\n         private final Supplier<Statement> statementSupplier;\n \n-        private byte[] lastPagingState = null;\n-\n-        public CQLPagingIterator(final int pageSize, Supplier<Statement> statementSupplier) {\n-            this.index = 0;\n-            this.paginatedResultSize = pageSize;\n+        public CQLPagingIterator(Supplier<Statement> statementSupplier) {\n             this.statementSupplier = statementSupplier;\n-            this.currentResultSet = getResultSet();\n+            fetchResultSet();\n         }\n \n         @Override\n         public boolean hasNext() {\n-            return !currentResultSet.isExhausted();\n+            if(availableWithoutFetching<=0){\n+                if(currentResultSet.isFullyFetched()){\n+                    return false;\n+                }\n+                fetchResultSet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3MTc5Nw=="}, "originalCommit": {"oid": "855681621a628e18c68ddc6417daeb982e235ac1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MTg5Nw==", "bodyText": "Got it thanks, that makes sense!", "url": "https://github.com/JanusGraph/janusgraph/pull/2290#discussion_r547591897", "createdAt": "2020-12-23T01:34:19Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-cql/src/main/java/org/janusgraph/diskstorage/cql/CQLKeyColumnValueStore.java", "diffHunk": "@@ -441,43 +439,43 @@ public KeyIterator getKeys(final SliceQuery query, final StoreTransaction txh) t\n     private class CQLPagingIterator implements Iterator<Row> {\n \n         private ResultSet currentResultSet;\n-\n-        private int index;\n-        private int paginatedResultSize;\n+        private int availableWithoutFetching;\n         private final Supplier<Statement> statementSupplier;\n \n-        private byte[] lastPagingState = null;\n-\n-        public CQLPagingIterator(final int pageSize, Supplier<Statement> statementSupplier) {\n-            this.index = 0;\n-            this.paginatedResultSize = pageSize;\n+        public CQLPagingIterator(Supplier<Statement> statementSupplier) {\n             this.statementSupplier = statementSupplier;\n-            this.currentResultSet = getResultSet();\n+            fetchResultSet();\n         }\n \n         @Override\n         public boolean hasNext() {\n-            return !currentResultSet.isExhausted();\n+            if(availableWithoutFetching<=0){\n+                if(currentResultSet.isFullyFetched()){\n+                    return false;\n+                }\n+                fetchResultSet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3MTc5Nw=="}, "originalCommit": {"oid": "855681621a628e18c68ddc6417daeb982e235ac1"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1425, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}