{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MDA5ODgx", "number": 2132, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo1MTo1MVrOEFhdfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1NTowNVrOEHH-sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjI2NTU5OnYy", "diffSide": "RIGHT", "path": "docs/changelog.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo1MTo1MVrOGjwy1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo1MTo1MVrOGjwy1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1Mjc4OA==", "bodyText": "Replace [...] - This formulation sounds like I have to do the replacement now as the user. Shouldn't this be\nIntroduction of a JanusGraph Server startup class as a replacement for Gremlin Server startup\nor\nReplacing the Gremlin Server startup class with JanusGraph specific variant\n?", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440152788", "createdAt": "2020-06-15T12:51:51Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -131,6 +131,18 @@ Therefore, you should upgrade to Cassandra 3 or higher.\n     or never changed the value of `storage.cql.storage-compact=true`, during the \n     upgrade process you have to ensure your data is correctly migrated.\n \n+##### Replace the Gremlin Server startup class with JanusGraph variant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjI4NDQxOnYy", "diffSide": "RIGHT", "path": "docs/changelog.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo1Njo1NVrOGjw-hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo1Njo1NVrOGjw-hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1NTc4Mg==", "bodyText": "Similarly to my comment above, this doesn't explain that a new JanusGraph specific startup is introduced in this release. I would start with one sentence to explain this fact and afterwards explain the reasoning for it (which is currently the only thing explained here) and then tell the user how they are impacted by this change / which changes they have to make when updating.", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440155782", "createdAt": "2020-06-15T12:56:55Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -131,6 +131,18 @@ Therefore, you should upgrade to Cassandra 3 or higher.\n     or never changed the value of `storage.cql.storage-compact=true`, during the \n     upgrade process you have to ensure your data is correctly migrated.\n \n+##### Replace the Gremlin Server startup class with JanusGraph variant\n+\n+`JanusGraphServer` class allows us to add JanusGraph specfic settings to the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjI5NTAwOnYy", "diffSide": "RIGHT", "path": "docs/changelog.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzowMDowN1rOGjxFew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzowMDowN1rOGjxFew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1NzU2Mw==", "bodyText": "revert, wouldn't prevent be more accurate?", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440157563", "createdAt": "2020-06-15T13:00:07Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -131,6 +131,18 @@ Therefore, you should upgrade to Cassandra 3 or higher.\n     or never changed the value of `storage.cql.storage-compact=true`, during the \n     upgrade process you have to ensure your data is correctly migrated.\n \n+##### Replace the Gremlin Server startup class with JanusGraph variant\n+\n+`JanusGraphServer` class allows us to add JanusGraph specfic settings to the \n+`gremlin-server.yaml` or `janusgraph-server.yaml`. Further, JanusGraph will ensure \n+serializers are configured as expected for running JanusGraph and interact with Gremlin. \n+JanusGraph will also print the JanusGraph version and Tinkerpop version at the start \n+of the `JanusGraphServer`.\n+\n+!!! note\n+    You are able the revert the default configuration of serializers by setting ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjMxODE0OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzowNjoyOFrOGjxUQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzowNjoyOFrOGjxUQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2MTM0Nw==", "bodyText": "(nitpick) unused import", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440161347", "createdAt": "2020-06-15T13:06:28Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphServer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import com.jcabi.manifests.Manifests;\n+import org.apache.tinkerpop.gremlin.server.GremlinServer;\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.apache.tinkerpop.gremlin.util.Gremlin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjMyNTQ3OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzowODozNVrOGjxY9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzowODozNVrOGjxY9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2MjU0OA==", "bodyText": "Was this a TODO or what is its purpose?", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440162548", "createdAt": "2020-06-15T13:08:35Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphServer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import com.jcabi.manifests.Manifests;\n+import org.apache.tinkerpop.gremlin.server.GremlinServer;\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.apache.tinkerpop.gremlin.util.Gremlin;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JanusGraphServer {\n+    private static final Logger logger = LoggerFactory.getLogger(JanusGraphServer.class);\n+\n+    public static void main(final String[] args) throws Exception {\n+        // add to vm options: -Dlog4j.configuration=file:conf/log4j.properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM1MDY5OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNToyMFrOGjxo7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNToyMFrOGjxo7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NjYzNg==", "bodyText": "The read(final String file) is just an overload of read(final InputStream stream) but it has a different behaviour as it also performs autoImport (if preventAutoConfiguration is not set)\nI think that's confusing and would prefer if both overloads would have the same behavior except for the fact that one takes a String while the other takes a Stream. So read(final InputStream stream) should already call autoImport in my opinion.", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440166636", "createdAt": "2020-06-15T13:15:20Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class JanusGraphSettings extends Settings {\n+\n+    /**\n+     * If set to {@code true} the JanusGraph won't automatically configure serializers.\n+     */\n+    public boolean preventAutoConfiguration = false;\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        JanusGraphSettings read = JanusGraphSettings.read(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM1MjA0OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNTozOVrOGjxpwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNTozOVrOGjxpwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2Njg0OA==", "bodyText": "from a file This method isn't taking a file but a Stream.", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440166848", "createdAt": "2020-06-15T13:15:39Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class JanusGraphSettings extends Settings {\n+\n+    /**\n+     * If set to {@code true} the JanusGraph won't automatically configure serializers.\n+     */\n+    public boolean preventAutoConfiguration = false;\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        JanusGraphSettings read = JanusGraphSettings.read(input);\n+        if (read.preventAutoConfiguration) {\n+            return read;\n+        }\n+        return autoImport(read);\n+    }\n+\n+    /**\n+     * Read configuration from a file into a new {@link JanusGraphSettings} object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM1NDUyOnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNjoxNFrOGjxrPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNjoxNFrOGjxrPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NzIyOQ==", "bodyText": "Shouldn't Optional be JanusGraphSettings?", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440167229", "createdAt": "2020-06-15T13:16:14Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class JanusGraphSettings extends Settings {\n+\n+    /**\n+     * If set to {@code true} the JanusGraph won't automatically configure serializers.\n+     */\n+    public boolean preventAutoConfiguration = false;\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        JanusGraphSettings read = JanusGraphSettings.read(input);\n+        if (read.preventAutoConfiguration) {\n+            return read;\n+        }\n+        return autoImport(read);\n+    }\n+\n+    /**\n+     * Read configuration from a file into a new {@link JanusGraphSettings} object.\n+     *\n+     * @param stream an input stream containing a Gremlin Server YAML configuration\n+     * @return a new {@link Optional} object wrapping the created {@link Settings}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM1ODMwOnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNzoxNlrOGjxtkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNzoxNlrOGjxtkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NzgyNw==", "bodyText": "(nitpick) How about moving this copying from one settings to another into a dedicated method for that to not clutter this method?", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440167827", "createdAt": "2020-06-15T13:17:16Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class JanusGraphSettings extends Settings {\n+\n+    /**\n+     * If set to {@code true} the JanusGraph won't automatically configure serializers.\n+     */\n+    public boolean preventAutoConfiguration = false;\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        JanusGraphSettings read = JanusGraphSettings.read(input);\n+        if (read.preventAutoConfiguration) {\n+            return read;\n+        }\n+        return autoImport(read);\n+    }\n+\n+    /**\n+     * Read configuration from a file into a new {@link JanusGraphSettings} object.\n+     *\n+     * @param stream an input stream containing a Gremlin Server YAML configuration\n+     * @return a new {@link Optional} object wrapping the created {@link Settings}\n+     */\n+    public static JanusGraphSettings read(final InputStream stream) {\n+        Objects.requireNonNull(stream);\n+\n+        final Constructor constructor = new Constructor(JanusGraphSettings.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM3MDM1OnYy", "diffSide": "RIGHT", "path": "docs/changelog.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoyMDoxM1rOGjx07Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoyMDoxM1rOGjx07Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2OTcwOQ==", "bodyText": "janusgraph-server.yaml was only added in this PR and it's now the default config file for JanusGraph Server (if I'm not mistaken). This should be explained here. Otherwise users will just think that their gremlin-server.yaml is still being used and wonder why their changes to that config don't have any effect.", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440169709", "createdAt": "2020-06-15T13:20:13Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -131,6 +131,18 @@ Therefore, you should upgrade to Cassandra 3 or higher.\n     or never changed the value of `storage.cql.storage-compact=true`, during the \n     upgrade process you have to ensure your data is correctly migrated.\n \n+##### Replace the Gremlin Server startup class with JanusGraph variant\n+\n+`JanusGraphServer` class allows us to add JanusGraph specfic settings to the \n+`gremlin-server.yaml` or `janusgraph-server.yaml`. Further, JanusGraph will ensure ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjM3ODAwOnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoyMjoxMlrOGjx5oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoyMjoxMlrOGjx5oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3MDkxMg==", "bodyText": "Is there really no other way to use an existing config file and something to it than to copy every element explicitly? This means that we have to change this every time something changes in the GremlinServer settings :/", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440170912", "createdAt": "2020-06-15T13:22:12Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class JanusGraphSettings extends Settings {\n+\n+    /**\n+     * If set to {@code true} the JanusGraph won't automatically configure serializers.\n+     */\n+    public boolean preventAutoConfiguration = false;\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        JanusGraphSettings read = JanusGraphSettings.read(input);\n+        if (read.preventAutoConfiguration) {\n+            return read;\n+        }\n+        return autoImport(read);\n+    }\n+\n+    /**\n+     * Read configuration from a file into a new {@link JanusGraphSettings} object.\n+     *\n+     * @param stream an input stream containing a Gremlin Server YAML configuration\n+     * @return a new {@link Optional} object wrapping the created {@link Settings}\n+     */\n+    public static JanusGraphSettings read(final InputStream stream) {\n+        Objects.requireNonNull(stream);\n+\n+        final Constructor constructor = new Constructor(JanusGraphSettings.class);\n+        final TypeDescription settingsDescription = new TypeDescription(Settings.class);\n+        settingsDescription.putMapPropertyType(\"graphs\", String.class, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mjg1Mzg3OnYy", "diffSide": "RIGHT", "path": "docs/changelog.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxMTowNVrOGj2ktA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxMTowNVrOGj2ktA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NzQ3Ng==", "bodyText": "TinkerPop", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440247476", "createdAt": "2020-06-15T15:11:05Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -131,6 +131,18 @@ Therefore, you should upgrade to Cassandra 3 or higher.\n     or never changed the value of `storage.cql.storage-compact=true`, during the \n     upgrade process you have to ensure your data is correctly migrated.\n \n+##### Replace the Gremlin Server startup class with JanusGraph variant\n+\n+`JanusGraphServer` class allows us to add JanusGraph specfic settings to the \n+`gremlin-server.yaml` or `janusgraph-server.yaml`. Further, JanusGraph will ensure \n+serializers are configured as expected for running JanusGraph and interact with Gremlin. \n+JanusGraph will also print the JanusGraph version and Tinkerpop version at the start ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mjg1Nzc0OnYy", "diffSide": "RIGHT", "path": "docs/changelog.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxMTo1OVrOGj2nTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxMTo1OVrOGj2nTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0ODE0MA==", "bodyText": "I think it would be good state here explicitly which elements are now configured automatically by default to make it easier for users to update their config. The new default config could also be linked as an additional help.", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440248140", "createdAt": "2020-06-15T15:11:59Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -131,6 +131,18 @@ Therefore, you should upgrade to Cassandra 3 or higher.\n     or never changed the value of `storage.cql.storage-compact=true`, during the \n     upgrade process you have to ensure your data is correctly migrated.\n \n+##### Replace the Gremlin Server startup class with JanusGraph variant\n+\n+`JanusGraphServer` class allows us to add JanusGraph specfic settings to the \n+`gremlin-server.yaml` or `janusgraph-server.yaml`. Further, JanusGraph will ensure \n+serializers are configured as expected for running JanusGraph and interact with Gremlin. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mjg2NTIxOnYy", "diffSide": "RIGHT", "path": "janusgraph-dist/src/assembly/static/conf/janusgraph-server.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxMzoyN1rOGj2ruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxMzoyN1rOGj2ruw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0OTI3NQ==", "bodyText": "We already discussed this directly, but just to keep it also here on record: I think that it's a bit confusing that some serializers are configured by default, but these two are still configured here explicitly. So, I would also configure them by default.", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440249275", "createdAt": "2020-06-15T15:13:27Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-dist/src/assembly/static/conf/janusgraph-server.yaml", "diffHunk": "@@ -0,0 +1,38 @@\n+# Copyright 2020 JanusGraph Authors\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+host: 0.0.0.0\n+channelizer: org.apache.tinkerpop.gremlin.server.channel.WebSocketChannelizer\n+graphs: {\n+    graph: conf/janusgraph-inmemory.properties\n+}\n+scriptEngines: {\n+    gremlin-groovy: {\n+        plugins: { org.apache.tinkerpop.gremlin.server.jsr223.GremlinServerGremlinPlugin: {},\n+                   org.apache.tinkerpop.gremlin.tinkergraph.jsr223.TinkerGraphGremlinPlugin: {},\n+                   org.apache.tinkerpop.gremlin.jsr223.ImportGremlinPlugin: {classImports: [java.lang.Math], methodImports: [java.lang.Math#*]},\n+                   org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin: {files: [scripts/empty-sample.groovy]}}}}\n+serializers:\n+    - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1, config: { serializeResultToString: true }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mjg2OTk4OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/test/resources/janusgraph-server.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxNDozN1rOGj2u1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxNDozN1rOGj2u1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MDA2OQ==", "bodyText": "Do we test these old formats or why are they added here?", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440250069", "createdAt": "2020-06-15T15:14:37Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-server/src/test/resources/janusgraph-server.yaml", "diffHunk": "@@ -0,0 +1,46 @@\n+# Copyright 2020 JanusGraph Authors\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+host: 0.0.0.0\n+channelizer: org.apache.tinkerpop.gremlin.server.channel.WebSocketChannelizer\n+graphs: {\n+    graph: conf/janusgraph-inmemory.properties\n+}\n+scriptEngines: {\n+    gremlin-groovy: {\n+        plugins: { org.apache.tinkerpop.gremlin.server.jsr223.GremlinServerGremlinPlugin: {},\n+                   org.apache.tinkerpop.gremlin.tinkergraph.jsr223.TinkerGraphGremlinPlugin: {},\n+                   org.apache.tinkerpop.gremlin.jsr223.ImportGremlinPlugin: {classImports: [java.lang.Math], methodImports: [java.lang.Math#*]},\n+                   org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin: {files: [scripts/empty-sample.groovy]}}}}\n+serializers:\n+    - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1, config: { serializeResultToString: true }}\n+    - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { serializeResultToString: true }}\n+\n+    # Older serialization versions for backwards compatibility:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mjg3OTI3OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxNjoyMlrOGj20fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxNjoyMlrOGj20fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MTUxOQ==", "bodyText": "Is this actually used in any test? (I might have simply missed it.)", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440251519", "createdAt": "2020-06-15T15:16:22Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-server/pom.xml", "diffHunk": "@@ -38,5 +38,11 @@\n             <version>${project.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.janusgraph</groupId>\n+            <artifactId>janusgraph-inmemory</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mjg5MTA0OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/conf/janusgraph-empty.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxOTowOFrOGj28DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxOTowOFrOGj28DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MzQ1Mw==", "bodyText": "Any reason why the file name isn't starting with janusgraph-server?", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440253453", "createdAt": "2020-06-15T15:19:08Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-server/conf/janusgraph-empty.properties", "diffHunk": "@@ -0,0 +1,16 @@\n+# Copyright 2020 JanusGraph Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjkwMDgwOnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/test/resources/janusgraph-server-no-auto.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToyMToyNFrOGj3COg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToyMToyNFrOGj3COg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1NTAzNA==", "bodyText": "(nitpick) I think -no-auto and -cfg aren't descriptive enough to explain the purpose of these config files. Could you make the names a bit more descriptive?\nIsn't the important part of this config file for example that it has no graphManager configured?", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r440255034", "createdAt": "2020-06-15T15:21:24Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-server/src/test/resources/janusgraph-server-no-auto.yaml", "diffHunk": "@@ -0,0 +1,47 @@\n+# Copyright 2020 JanusGraph Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "497562cbd2646c25d7e62084666801d1b9dcb002"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTAxMTc3OnYy", "diffSide": "RIGHT", "path": "docs/basics/server.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo0MDowNVrOGmVN-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo0MDowNVrOGmVN-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0NjcxNQ==", "bodyText": "(nitpick) It isn't really part of this PR, but shouldn't this also include GraphBinary?", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r442846715", "createdAt": "2020-06-19T13:40:05Z", "author": {"login": "FlorianHockmann"}, "path": "docs/basics/server.md", "diffHunk": "@@ -473,32 +473,37 @@ scriptEngines: {\n                org.apache.tinkerpop.gremlin.tinkergraph.jsr223.TinkerGraphGremlinPlugin: {},\n                org.apache.tinkerpop.gremlin.jsr223.ImportGremlinPlugin: {classImports: [java.lang.Math], methodImports: [java.lang.Math#*]},\n                org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin: {files: [scripts/empty-sample.groovy]}}}}\n-serializers:\n-  - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n-  - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { serializeResultToString: true }}\n-  - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n+# JanusGraph sets default serializers. You need to uncomment the following lines, if you require any custom serializers.\n+#\n+# serializers:\n+#   - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "545f804dba6c66515ad4d3fc076ec11c05e3532c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTAxNzYzOnYy", "diffSide": "RIGHT", "path": "docs/basics/server.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo0MTo1MlrOGmVRqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo0MTo1MlrOGmVRqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0NzY1OQ==", "bodyText": "The content of this script should be the next element here.", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r442847659", "createdAt": "2020-06-19T13:41:52Z", "author": {"login": "FlorianHockmann"}, "path": "docs/basics/server.md", "diffHunk": "@@ -473,32 +473,37 @@ scriptEngines: {\n                org.apache.tinkerpop.gremlin.tinkergraph.jsr223.TinkerGraphGremlinPlugin: {},\n                org.apache.tinkerpop.gremlin.jsr223.ImportGremlinPlugin: {classImports: [java.lang.Math], methodImports: [java.lang.Math#*]},\n                org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin: {files: [scripts/empty-sample.groovy]}}}}\n-serializers:\n-  - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n-  - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { serializeResultToString: true }}\n-  - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n+# JanusGraph sets default serializers. You need to uncomment the following lines, if you require any custom serializers.\n+#\n+# serializers:\n+#   - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n+#   - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { serializeResultToString: true }}\n+#   - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n metrics: {\n   slf4jReporter: {enabled: true, interval: 180000}}\n ```\n \n **There are several important parts to this configuration file as they relate to JanusGraph.**\n \n-1.  In the `graphs` map, there is a key called `graph` and its value is\n-    `conf/janusgraph.properties`. This tells Gremlin Server to\n-    instantiate a `Graph` instance called \"graph\" and use the\n-    `conf/janusgraph.properties` file to configure it. The \"graph\" key\n-    becomes the unique name for the `Graph` instance in Gremlin Server\n-    and it can be referenced as such in the scripts submitted to it.\n-\n-2.  In the `plugins` list, there is a reference to\n-    `JanusGraphGremlinPlugin`, which tells Gremlin Server to initialize\n-    the \"JanusGraph Plugin\". The \"JanusGraph Plugin\" will auto-import\n-    JanusGraph specific classes for usage in scripts.\n-\n-3.  Note the `scripts` key and the reference to\n-    `scripts/janusgraph.groovy`. This Groovy file is an initialization\n-    script for Gremlin Server and that particular ScriptEngine. Create\n-    `scripts/janusgraph.groovy` with the following contents:\n+1. In the `graphs` map, there is a key called `graph` and its value is\n+   `conf/janusgraph.properties`. This tells Gremlin Server to\n+   instantiate a `Graph` instance called \"graph\" and use the\n+   `conf/janusgraph.properties` file to configure it. The \"graph\" key\n+   becomes the unique name for the `Graph` instance in Gremlin Server\n+   and it can be referenced as such in the scripts submitted to it.\n+\n+2. In the `plugins` list, there is a reference to\n+   `JanusGraphGremlinPlugin`, which tells Gremlin Server to initialize\n+   the \"JanusGraph Plugin\". The \"JanusGraph Plugin\" will auto-import\n+   JanusGraph specific classes for usage in scripts.\n+\n+3. Note the `scripts` key and the reference to\n+   `scripts/janusgraph.groovy`. This Groovy file is an initialization\n+   script for Gremlin Server and that particular ScriptEngine. Create\n+   `scripts/janusgraph.groovy` with the following contents:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "545f804dba6c66515ad4d3fc076ec11c05e3532c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTAyMjE0OnYy", "diffSide": "RIGHT", "path": "docs/basics/server.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo0MzoxMVrOGmVUbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo0MzoxMVrOGmVUbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0ODM2NQ==", "bodyText": "by an default set of serializers -> with a default set of serializers", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r442848365", "createdAt": "2020-06-19T13:43:11Z", "author": {"login": "FlorianHockmann"}, "path": "docs/basics/server.md", "diffHunk": "@@ -473,32 +473,37 @@ scriptEngines: {\n                org.apache.tinkerpop.gremlin.tinkergraph.jsr223.TinkerGraphGremlinPlugin: {},\n                org.apache.tinkerpop.gremlin.jsr223.ImportGremlinPlugin: {classImports: [java.lang.Math], methodImports: [java.lang.Math#*]},\n                org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin: {files: [scripts/empty-sample.groovy]}}}}\n-serializers:\n-  - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n-  - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { serializeResultToString: true }}\n-  - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n+# JanusGraph sets default serializers. You need to uncomment the following lines, if you require any custom serializers.\n+#\n+# serializers:\n+#   - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n+#   - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { serializeResultToString: true }}\n+#   - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n metrics: {\n   slf4jReporter: {enabled: true, interval: 180000}}\n ```\n \n **There are several important parts to this configuration file as they relate to JanusGraph.**\n \n-1.  In the `graphs` map, there is a key called `graph` and its value is\n-    `conf/janusgraph.properties`. This tells Gremlin Server to\n-    instantiate a `Graph` instance called \"graph\" and use the\n-    `conf/janusgraph.properties` file to configure it. The \"graph\" key\n-    becomes the unique name for the `Graph` instance in Gremlin Server\n-    and it can be referenced as such in the scripts submitted to it.\n-\n-2.  In the `plugins` list, there is a reference to\n-    `JanusGraphGremlinPlugin`, which tells Gremlin Server to initialize\n-    the \"JanusGraph Plugin\". The \"JanusGraph Plugin\" will auto-import\n-    JanusGraph specific classes for usage in scripts.\n-\n-3.  Note the `scripts` key and the reference to\n-    `scripts/janusgraph.groovy`. This Groovy file is an initialization\n-    script for Gremlin Server and that particular ScriptEngine. Create\n-    `scripts/janusgraph.groovy` with the following contents:\n+1. In the `graphs` map, there is a key called `graph` and its value is\n+   `conf/janusgraph.properties`. This tells Gremlin Server to\n+   instantiate a `Graph` instance called \"graph\" and use the\n+   `conf/janusgraph.properties` file to configure it. The \"graph\" key\n+   becomes the unique name for the `Graph` instance in Gremlin Server\n+   and it can be referenced as such in the scripts submitted to it.\n+\n+2. In the `plugins` list, there is a reference to\n+   `JanusGraphGremlinPlugin`, which tells Gremlin Server to initialize\n+   the \"JanusGraph Plugin\". The \"JanusGraph Plugin\" will auto-import\n+   JanusGraph specific classes for usage in scripts.\n+\n+3. Note the `scripts` key and the reference to\n+   `scripts/janusgraph.groovy`. This Groovy file is an initialization\n+   script for Gremlin Server and that particular ScriptEngine. Create\n+   `scripts/janusgraph.groovy` with the following contents:\n+\n+4. Note the `serializers` list will be configured by an default set of serializers, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "545f804dba6c66515ad4d3fc076ec11c05e3532c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTA2MjI3OnYy", "diffSide": "RIGHT", "path": "docs/basics/server.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1NTowNVrOGmVtUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1NTowNVrOGmVtUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1NDczNg==", "bodyText": "How can that happen if the user uses the default bin/gremlin-server.sh script from the Gremlin Server distributed by Apache TinkerPop as described here?\nI think this section needs to mention our custom startup class and that it can be used by adapting the script which will then result in the automatic configuration of serializers. (In that case, the example output from starting the server also needs to be changed to include the JanusGraph ascii art.)", "url": "https://github.com/JanusGraph/janusgraph/pull/2132#discussion_r442854736", "createdAt": "2020-06-19T13:55:05Z", "author": {"login": "FlorianHockmann"}, "path": "docs/basics/server.md", "diffHunk": "@@ -473,32 +473,37 @@ scriptEngines: {\n                org.apache.tinkerpop.gremlin.tinkergraph.jsr223.TinkerGraphGremlinPlugin: {},\n                org.apache.tinkerpop.gremlin.jsr223.ImportGremlinPlugin: {classImports: [java.lang.Math], methodImports: [java.lang.Math#*]},\n                org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin: {files: [scripts/empty-sample.groovy]}}}}\n-serializers:\n-  - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n-  - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { serializeResultToString: true }}\n-  - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n+# JanusGraph sets default serializers. You need to uncomment the following lines, if you require any custom serializers.\n+#\n+# serializers:\n+#   - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n+#   - { className: org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0, config: { serializeResultToString: true }}\n+#   - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphSONMessageSerializerV3d0, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n metrics: {\n   slf4jReporter: {enabled: true, interval: 180000}}\n ```\n \n **There are several important parts to this configuration file as they relate to JanusGraph.**\n \n-1.  In the `graphs` map, there is a key called `graph` and its value is\n-    `conf/janusgraph.properties`. This tells Gremlin Server to\n-    instantiate a `Graph` instance called \"graph\" and use the\n-    `conf/janusgraph.properties` file to configure it. The \"graph\" key\n-    becomes the unique name for the `Graph` instance in Gremlin Server\n-    and it can be referenced as such in the scripts submitted to it.\n-\n-2.  In the `plugins` list, there is a reference to\n-    `JanusGraphGremlinPlugin`, which tells Gremlin Server to initialize\n-    the \"JanusGraph Plugin\". The \"JanusGraph Plugin\" will auto-import\n-    JanusGraph specific classes for usage in scripts.\n-\n-3.  Note the `scripts` key and the reference to\n-    `scripts/janusgraph.groovy`. This Groovy file is an initialization\n-    script for Gremlin Server and that particular ScriptEngine. Create\n-    `scripts/janusgraph.groovy` with the following contents:\n+1. In the `graphs` map, there is a key called `graph` and its value is\n+   `conf/janusgraph.properties`. This tells Gremlin Server to\n+   instantiate a `Graph` instance called \"graph\" and use the\n+   `conf/janusgraph.properties` file to configure it. The \"graph\" key\n+   becomes the unique name for the `Graph` instance in Gremlin Server\n+   and it can be referenced as such in the scripts submitted to it.\n+\n+2. In the `plugins` list, there is a reference to\n+   `JanusGraphGremlinPlugin`, which tells Gremlin Server to initialize\n+   the \"JanusGraph Plugin\". The \"JanusGraph Plugin\" will auto-import\n+   JanusGraph specific classes for usage in scripts.\n+\n+3. Note the `scripts` key and the reference to\n+   `scripts/janusgraph.groovy`. This Groovy file is an initialization\n+   script for Gremlin Server and that particular ScriptEngine. Create\n+   `scripts/janusgraph.groovy` with the following contents:\n+\n+4. Note the `serializers` list will be configured by an default set of serializers, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "545f804dba6c66515ad4d3fc076ec11c05e3532c"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1492, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}