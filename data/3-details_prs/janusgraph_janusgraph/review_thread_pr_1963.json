{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MDE0NTA0", "number": 1963, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOTo0MzowOFrODgfYmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOTo0MzowOFrODgfYmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mzk1MjI0OnYy", "diffSide": "RIGHT", "path": "janusgraph-lucene/src/main/java/org/janusgraph/diskstorage/lucene/LuceneIndex.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOTo0MzowOFrOFquWWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzo1MjoyNFrOFq4Lyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0Mzg5OQ==", "bodyText": "(nitpick)\nSo we are executing new ArrayList<>() even if it isn't absent. Generally it isn't a big deal because GC handles those objects easily but I am not sure if compilator is able to optimize that (I think it isn't).\nYou can either create a static function which returns a new array list (i.e. it is executed only if it is absent) or your can just return your list and create a new one if it is empty.\nSomething like:\nList<String> stemList = stemsByOffset.get(offset);\nif(stemList == null){\n  stemList = new ArrayList<>();\n  stemsByOffset.put(offset, stemList);\n}\nstemList.add(stem);", "url": "https://github.com/JanusGraph/janusgraph/pull/1963#discussion_r380343899", "createdAt": "2020-02-17T19:43:08Z", "author": {"login": "porunov"}, "path": "janusgraph-lucene/src/main/java/org/janusgraph/diskstorage/lucene/LuceneIndex.java", "diffHunk": "@@ -603,23 +605,27 @@ private static Query numericQuery(String key, Cmp relation, Number value) {\n     }\n \n     // adapted from SolrIndex\n-    private List<String> customTokenize(Analyzer analyzer, String fieldName, String value) {\n-        final List<String> terms = new ArrayList<>();\n+    private List<List<String>> customTokenize(Analyzer analyzer, String fieldName, String value) {\n+        Map<Integer, List<String>> stemsByOffset = new HashMap<>();\n         try (CachingTokenFilter stream = new CachingTokenFilter(analyzer.tokenStream(fieldName, value))) {\n+            final OffsetAttribute offsetAtt = stream.getAttribute(OffsetAttribute.class);\n             final TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n             stream.reset();\n             while (stream.incrementToken()) {\n-                terms.add(termAtt.getBytesRef().utf8ToString());\n+                int offset = offsetAtt.startOffset();\n+                String stem = termAtt.getBytesRef().utf8ToString();\n+                stemsByOffset.putIfAbsent(offset, new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656edcc947fbd24c1ca7391547fb336119a9effc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwNTAzNQ==", "bodyText": "It makes sense, thanks.\nDone.", "url": "https://github.com/JanusGraph/janusgraph/pull/1963#discussion_r380505035", "createdAt": "2020-02-18T07:52:24Z", "author": {"login": "VladimirBogomolov"}, "path": "janusgraph-lucene/src/main/java/org/janusgraph/diskstorage/lucene/LuceneIndex.java", "diffHunk": "@@ -603,23 +605,27 @@ private static Query numericQuery(String key, Cmp relation, Number value) {\n     }\n \n     // adapted from SolrIndex\n-    private List<String> customTokenize(Analyzer analyzer, String fieldName, String value) {\n-        final List<String> terms = new ArrayList<>();\n+    private List<List<String>> customTokenize(Analyzer analyzer, String fieldName, String value) {\n+        Map<Integer, List<String>> stemsByOffset = new HashMap<>();\n         try (CachingTokenFilter stream = new CachingTokenFilter(analyzer.tokenStream(fieldName, value))) {\n+            final OffsetAttribute offsetAtt = stream.getAttribute(OffsetAttribute.class);\n             final TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n             stream.reset();\n             while (stream.incrementToken()) {\n-                terms.add(termAtt.getBytesRef().utf8ToString());\n+                int offset = offsetAtt.startOffset();\n+                String stem = termAtt.getBytesRef().utf8ToString();\n+                stemsByOffset.putIfAbsent(offset, new ArrayList<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0Mzg5OQ=="}, "originalCommit": {"oid": "656edcc947fbd24c1ca7391547fb336119a9effc"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1527, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}