{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NzgwODQ2", "number": 1937, "title": "Explain usage of implicit keys for vertex-centric indexes", "bodyText": "Resolves #1935\nI've added a section to the documentation to explain the usage of vertex-centric indexes on implicit keys like IDs. Are there any ideas for further improvements?\nFor all changes:\n\n Is there an issue associated with this PR? Is it referenced in the commit message?\n Does your PR body contain #xyz where xyz is the issue number you are trying to resolve?\n Has your PR been rebased against the latest commit within the target branch (typically master)?\n Is your initial contribution a single, squashed commit?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n If this PR is a documentation-only change, have you added a [doc only]\ntag to the first line of your commit message to avoid spending CPU cycles in\nTravis CI when no code, tests, or build configuration are modified?", "createdAt": "2020-01-24T10:55:05Z", "url": "https://github.com/JanusGraph/janusgraph/pull/1937", "merged": true, "mergeCommit": {"oid": "1b50268c78f9b89dc3eec254e2d2b323a800184a"}, "closed": true, "closedAt": "2020-04-17T05:55:26Z", "author": {"login": "rngcntr"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9cz1UABqjI5NzY4NDAxMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYazkBgFqTM5NTE3ODAyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "696e2fd6344a0a58654257a87d995d90b68e6176", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/696e2fd6344a0a58654257a87d995d90b68e6176", "committedDate": "2020-01-24T10:26:24Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "633f08433f9fa2b04260e9ba8a7c497658bc2668", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/633f08433f9fa2b04260e9ba8a7c497658bc2668", "committedDate": "2020-01-24T10:58:06Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODYzNDY0", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#pullrequestreview-351863464", "createdAt": "2020-02-01T03:52:53Z", "commit": {"oid": "633f08433f9fa2b04260e9ba8a7c497658bc2668"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMzo1Mjo1M1rOFkcOoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMzo1NjoxM1rOFkcPRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTU1Mw==", "bodyText": "You can use\nimport org.janusgraph.graphdb.types.system.ImplicitKey\nin the code block above. (e.g. see https://raw.githubusercontent.com/JanusGraph/janusgraph/master/docs/index-management/index-reindexing.md)", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#discussion_r373755553", "createdAt": "2020-02-01T03:52:53Z", "author": {"login": "li-boxuan"}, "path": "docs/index-management/index-performance.md", "diffHunk": "@@ -466,15 +466,57 @@ increases. Often, such traversals can be rewritten as constrained\n traversals that can utilize a vertex-centric index to ensure acceptable\n performance at scale.\n \n+### Vertex-centric indexes on implicit keys\n+\n+In some cases it is relevant to find an edge based on properties of the adjacent vertex.\n+Let's say we want to find out whether or not Hercules has battled Cerberus.\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+g.V(h).out('battled').has('name', 'cerberus').limit(1).hasNext()\n+```\n+\n+A query like this can not use a vertex centric index because it filters on vertex properties rather than edge properties.\n+But by restructuring the query, we can achieve exactly this.\n+As both vertices are known, the vertex ids can be used to select the edge.\n+In contrast to the name \"Cebereus\", which is a property of the adjacent vertex, the id of this vertex is already saved within the connecting edge itself.\n+Although, this id is internal and therefore not explcitly visible as a property of the edge.\n+This can be solved by referring to the id as an `ImplicitKey`:\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+c = g.V().has('name', 'cerberus').next()\n+g.V(h).outE('battled').has(ImplicitKey.ADJACENT_ID.name(), c.id()).limit(1).hasNext()\n+```\n+\n+!!! note\n+    If the class ImplicitKey can not be found, use the fully qualified class name `org.janusgraph.graphdb.types.system.ImplicitKey` instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "633f08433f9fa2b04260e9ba8a7c497658bc2668"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTcxOA==", "bodyText": "I think there is a trade-off here: it's true that there is no need to fetch every adjacent vertex anymore, but querying global index also brings overhead. If the degree of the vertex is small (in the extreme case, it only has one neighbor), then maybe the naive approach is more preferable. But I am not a JanusGraph developer so I am not 100% sure.", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#discussion_r373755718", "createdAt": "2020-02-01T03:56:13Z", "author": {"login": "li-boxuan"}, "path": "docs/index-management/index-performance.md", "diffHunk": "@@ -466,15 +466,57 @@ increases. Often, such traversals can be rewritten as constrained\n traversals that can utilize a vertex-centric index to ensure acceptable\n performance at scale.\n \n+### Vertex-centric indexes on implicit keys\n+\n+In some cases it is relevant to find an edge based on properties of the adjacent vertex.\n+Let's say we want to find out whether or not Hercules has battled Cerberus.\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+g.V(h).out('battled').has('name', 'cerberus').limit(1).hasNext()\n+```\n+\n+A query like this can not use a vertex centric index because it filters on vertex properties rather than edge properties.\n+But by restructuring the query, we can achieve exactly this.\n+As both vertices are known, the vertex ids can be used to select the edge.\n+In contrast to the name \"Cebereus\", which is a property of the adjacent vertex, the id of this vertex is already saved within the connecting edge itself.\n+Although, this id is internal and therefore not explcitly visible as a property of the edge.\n+This can be solved by referring to the id as an `ImplicitKey`:\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+c = g.V().has('name', 'cerberus').next()\n+g.V(h).outE('battled').has(ImplicitKey.ADJACENT_ID.name(), c.id()).limit(1).hasNext()\n+```\n+\n+!!! note\n+    If the class ImplicitKey can not be found, use the fully qualified class name `org.janusgraph.graphdb.types.system.ImplicitKey` instead.\n+\n+Assuming there is a global index on the 'name' property, this already improves the performance a lot, because it's not necessary to fetch every adjacent vertex anymore.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "633f08433f9fa2b04260e9ba8a7c497658bc2668"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMjA5NzEx", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#pullrequestreview-352209711", "createdAt": "2020-02-03T12:12:28Z", "commit": {"oid": "633f08433f9fa2b04260e9ba8a7c497658bc2668"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMjoxMjoyOFrOFkvWyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMjoxMjoyOFrOFkvWyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA2ODkzNw==", "bodyText": "Seeing this, I think we should implement a traversal strategy that allows JanusGraph to use this implicitly if simply hasId() is used. I would consider ImplicitKey as internal API of JanusGraph that users shouldn't directly use in their applications.", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#discussion_r374068937", "createdAt": "2020-02-03T12:12:28Z", "author": {"login": "FlorianHockmann"}, "path": "docs/index-management/index-performance.md", "diffHunk": "@@ -466,15 +466,57 @@ increases. Often, such traversals can be rewritten as constrained\n traversals that can utilize a vertex-centric index to ensure acceptable\n performance at scale.\n \n+### Vertex-centric indexes on implicit keys\n+\n+In some cases it is relevant to find an edge based on properties of the adjacent vertex.\n+Let's say we want to find out whether or not Hercules has battled Cerberus.\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+g.V(h).out('battled').has('name', 'cerberus').limit(1).hasNext()\n+```\n+\n+A query like this can not use a vertex centric index because it filters on vertex properties rather than edge properties.\n+But by restructuring the query, we can achieve exactly this.\n+As both vertices are known, the vertex ids can be used to select the edge.\n+In contrast to the name \"Cebereus\", which is a property of the adjacent vertex, the id of this vertex is already saved within the connecting edge itself.\n+Although, this id is internal and therefore not explcitly visible as a property of the edge.\n+This can be solved by referring to the id as an `ImplicitKey`:\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+c = g.V().has('name', 'cerberus').next()\n+g.V(h).outE('battled').has(ImplicitKey.ADJACENT_ID.name(), c.id()).limit(1).hasNext()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "633f08433f9fa2b04260e9ba8a7c497658bc2668"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "633f08433f9fa2b04260e9ba8a7c497658bc2668", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/633f08433f9fa2b04260e9ba8a7c497658bc2668", "committedDate": "2020-01-24T10:58:06Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "179ec01c3df81b65cc50402638c0401a60d238bb", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/179ec01c3df81b65cc50402638c0401a60d238bb", "committedDate": "2020-02-10T13:08:18Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b437514b095fec982905840aeeb575a375e6b2f", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/9b437514b095fec982905840aeeb575a375e6b2f", "committedDate": "2020-02-11T12:32:19Z", "message": "Add tests for previous commit\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "8bdbd363473212a04e7bd67f21f5dcd27f34977b", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/8bdbd363473212a04e7bd67f21f5dcd27f34977b", "committedDate": "2020-02-11T12:35:12Z", "message": "Add tests for previous commit [doc only]\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bdbd363473212a04e7bd67f21f5dcd27f34977b", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/8bdbd363473212a04e7bd67f21f5dcd27f34977b", "committedDate": "2020-02-11T12:35:12Z", "message": "Add tests for previous commit [doc only]\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "d12a19afc3c044f0ad727fd7d029e3ac2bba66c5", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/d12a19afc3c044f0ad727fd7d029e3ac2bba66c5", "committedDate": "2020-02-12T08:13:59Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d12a19afc3c044f0ad727fd7d029e3ac2bba66c5", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/d12a19afc3c044f0ad727fd7d029e3ac2bba66c5", "committedDate": "2020-02-12T08:13:59Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "171bb7001bb21c24e18474a1f83bdff5b6d023cb", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/171bb7001bb21c24e18474a1f83bdff5b6d023cb", "committedDate": "2020-02-12T08:17:50Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "171bb7001bb21c24e18474a1f83bdff5b6d023cb", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/171bb7001bb21c24e18474a1f83bdff5b6d023cb", "committedDate": "2020-02-12T08:17:50Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "335d4350a5fa8ea0a1665270390342a39c73a372", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/335d4350a5fa8ea0a1665270390342a39c73a372", "committedDate": "2020-02-12T08:18:23Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "335d4350a5fa8ea0a1665270390342a39c73a372", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/335d4350a5fa8ea0a1665270390342a39c73a372", "committedDate": "2020-02-12T08:18:23Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "6ec88f27a2805a3bae490fd636c9aaa963428572", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/6ec88f27a2805a3bae490fd636c9aaa963428572", "committedDate": "2020-02-12T08:23:06Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NDMyNzY1", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#pullrequestreview-358432765", "createdAt": "2020-02-13T18:00:13Z", "commit": {"oid": "6ec88f27a2805a3bae490fd636c9aaa963428572"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODowMDoxM1rOFpd58g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODowMDoxM1rOFpd58g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyNTkwNg==", "bodyText": "Not necessary to build this index explicitly. It is available automatically from storage layout. See column part of https://docs.janusgraph.org/advanced-topics/data-model/#individual-edge-layout", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#discussion_r379025906", "createdAt": "2020-02-13T18:00:13Z", "author": {"login": "mad"}, "path": "docs/index-management/index-performance.md", "diffHunk": "@@ -466,13 +466,51 @@ increases. Often, such traversals can be rewritten as constrained\n traversals that can utilize a vertex-centric index to ensure acceptable\n performance at scale.\n \n+### Vertex-centric indexes on adjacent vertex ids\n+\n+In some cases it is relevant to find an edge based on properties of the adjacent vertex.\n+Let's say we want to find out whether or not Hercules has battled Cerberus.\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+g.V(h).out('battled').has('name', 'cerberus').limit(1).hasNext()\n+```\n+\n+A query like this can not use a vertex centric index because it filters on vertex properties rather than edge properties.\n+But by restructuring the query, we can achieve exactly this.\n+As both vertices are known, the vertex ids can be used to select the edge.\n+In contrast to the name \"Cebereus\", which is a property of the adjacent vertex, the id of this vertex is already saved within the connecting edge itself.\n+Therefore, this query runs much faster if hercules has battled many opponents:\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+c = g.V().has('name', 'cerberus').next()\n+g.V(h).outE('battled').where(inV().is(c)).limit(1).hasNext()\n+```\n+\n+Assuming there is a global index on the 'name' property, this already improves the performance a lot, because it's not necessary to fetch every adjacent vertex anymore.\n+But analog to other edge properties, a vertex-centric index can be used to further improve the performance:\n+```groovy\n+graph.tx().rollback()  //Never create new indexes while a transaction is active", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ec88f27a2805a3bae490fd636c9aaa963428572"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ec88f27a2805a3bae490fd636c9aaa963428572", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/6ec88f27a2805a3bae490fd636c9aaa963428572", "committedDate": "2020-02-12T08:23:06Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "7ec49e7b06522c1b55f90ea93c8e9435c7d9816b", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/7ec49e7b06522c1b55f90ea93c8e9435c7d9816b", "committedDate": "2020-02-14T08:46:14Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ec49e7b06522c1b55f90ea93c8e9435c7d9816b", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/7ec49e7b06522c1b55f90ea93c8e9435c7d9816b", "committedDate": "2020-02-14T08:46:14Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "b7ccaa00958e50b12654654660534d178c5d1464", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/b7ccaa00958e50b12654654660534d178c5d1464", "committedDate": "2020-02-14T08:46:55Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7ccaa00958e50b12654654660534d178c5d1464", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/b7ccaa00958e50b12654654660534d178c5d1464", "committedDate": "2020-02-14T08:46:55Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "cc5566f6335dffd5a3d08c209b4105d198e70559", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/cc5566f6335dffd5a3d08c209b4105d198e70559", "committedDate": "2020-04-16T11:09:22Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0cf387b81aae71720f4c980c6704418d10e1600", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/e0cf387b81aae71720f4c980c6704418d10e1600", "committedDate": "2020-04-16T11:18:20Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc5566f6335dffd5a3d08c209b4105d198e70559", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/cc5566f6335dffd5a3d08c209b4105d198e70559", "committedDate": "2020-04-16T11:09:22Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "e0cf387b81aae71720f4c980c6704418d10e1600", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/e0cf387b81aae71720f4c980c6704418d10e1600", "committedDate": "2020-04-16T11:18:20Z", "message": "Explain usage of implicit keys for vertex-centric indexes [doc only]\n\nResolves #1935\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NjIwNTQ2", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#pullrequestreview-394620546", "createdAt": "2020-04-16T13:16:05Z", "commit": {"oid": "e0cf387b81aae71720f4c980c6704418d10e1600"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzoxNjowNVrOGGkv9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzo1NDoyMlrOGGmdnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU0Njc0MA==", "bodyText": "(nitpick) I would leave out limit(1) to make the traversal easier to read. It should also not really matter for the performance here I guess.", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#discussion_r409546740", "createdAt": "2020-04-16T13:16:05Z", "author": {"login": "FlorianHockmann"}, "path": "docs/index-management/index-performance.md", "diffHunk": "@@ -466,13 +466,46 @@ increases. Often, such traversals can be rewritten as constrained\n traversals that can utilize a vertex-centric index to ensure acceptable\n performance at scale.\n \n+### Using vertex-centric indexes on adjacent vertex ids\n+\n+In some cases it is relevant to find an edge based on properties of the adjacent vertex.\n+Let's say we want to find out whether or not Hercules has battled Cerberus.\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+g.V(h).out('battled').has('name', 'cerberus').limit(1).hasNext()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cf387b81aae71720f4c980c6704418d10e1600"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NDMwNg==", "bodyText": "name should be in \"`\", not in \"'\"", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#discussion_r409574306", "createdAt": "2020-04-16T13:53:46Z", "author": {"login": "FlorianHockmann"}, "path": "docs/index-management/index-performance.md", "diffHunk": "@@ -466,13 +466,46 @@ increases. Often, such traversals can be rewritten as constrained\n traversals that can utilize a vertex-centric index to ensure acceptable\n performance at scale.\n \n+### Using vertex-centric indexes on adjacent vertex ids\n+\n+In some cases it is relevant to find an edge based on properties of the adjacent vertex.\n+Let's say we want to find out whether or not Hercules has battled Cerberus.\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+g.V(h).out('battled').has('name', 'cerberus').limit(1).hasNext()\n+```\n+\n+A query like this can not use a vertex centric index because it filters on vertex properties rather than edge properties.\n+But by restructuring the query, we can achieve exactly this.\n+As both vertices are known, the vertex ids can be used to select the edge.\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+c = g.V().has('name', 'cerberus').next()\n+```\n+\n+In contrast to the name \"Cebereus\", which is a property of the adjacent vertex, the id of this vertex is already saved within the connecting edge itself.\n+Therefore, this query runs much faster if hercules has battled many opponents:\n+```groovy\n+g.V(h).outE('battled').where(inV().is(c)).limit(1).hasNext()\n+```\n+\n+... or even shorter:\n+```groovy\n+g.V(h).out('battled').is(c).limit(1).hasNext()\n+```\n+\n+Assuming there is a global index on the 'name' property, this improves the performance a lot, because it's not necessary to fetch every adjacent vertex anymore.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cf387b81aae71720f4c980c6704418d10e1600"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NDgxMg==", "bodyText": "Please also wrap long lines.", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#discussion_r409574812", "createdAt": "2020-04-16T13:54:22Z", "author": {"login": "FlorianHockmann"}, "path": "docs/index-management/index-performance.md", "diffHunk": "@@ -466,13 +466,46 @@ increases. Often, such traversals can be rewritten as constrained\n traversals that can utilize a vertex-centric index to ensure acceptable\n performance at scale.\n \n+### Using vertex-centric indexes on adjacent vertex ids\n+\n+In some cases it is relevant to find an edge based on properties of the adjacent vertex.\n+Let's say we want to find out whether or not Hercules has battled Cerberus.\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+g.V(h).out('battled').has('name', 'cerberus').limit(1).hasNext()\n+```\n+\n+A query like this can not use a vertex centric index because it filters on vertex properties rather than edge properties.\n+But by restructuring the query, we can achieve exactly this.\n+As both vertices are known, the vertex ids can be used to select the edge.\n+```groovy\n+h = g.V().has('name', 'hercules').next()\n+c = g.V().has('name', 'cerberus').next()\n+```\n+\n+In contrast to the name \"Cebereus\", which is a property of the adjacent vertex, the id of this vertex is already saved within the connecting edge itself.\n+Therefore, this query runs much faster if hercules has battled many opponents:\n+```groovy\n+g.V(h).outE('battled').where(inV().is(c)).limit(1).hasNext()\n+```\n+\n+... or even shorter:\n+```groovy\n+g.V(h).out('battled').is(c).limit(1).hasNext()\n+```\n+\n+Assuming there is a global index on the 'name' property, this improves the performance a lot, because it's not necessary to fetch every adjacent vertex anymore.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0cf387b81aae71720f4c980c6704418d10e1600"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d438977bc899d8293257bff839ab9d40fff4083", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/2d438977bc899d8293257bff839ab9d40fff4083", "committedDate": "2020-04-16T14:25:26Z", "message": "Apply changes suggested by @FlorianHockmann [doc only]\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "283de7b7b6fb20039722f31f94576128ad239d56", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/283de7b7b6fb20039722f31f94576128ad239d56", "committedDate": "2020-04-16T14:13:27Z", "message": "Apply changes suggested by @FlorianHockmann [doc only]\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "2d438977bc899d8293257bff839ab9d40fff4083", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/2d438977bc899d8293257bff839ab9d40fff4083", "committedDate": "2020-04-16T14:25:26Z", "message": "Apply changes suggested by @FlorianHockmann [doc only]\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NzAwOTI5", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#pullrequestreview-394700929", "createdAt": "2020-04-16T14:39:03Z", "commit": {"oid": "2d438977bc899d8293257bff839ab9d40fff4083"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NzAxMTYw", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#pullrequestreview-394701160", "createdAt": "2020-04-16T14:39:16Z", "commit": {"oid": "2d438977bc899d8293257bff839ab9d40fff4083"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NzAxNTY0", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#pullrequestreview-394701564", "createdAt": "2020-04-16T14:39:39Z", "commit": {"oid": "2d438977bc899d8293257bff839ab9d40fff4083"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTc4MDI5", "url": "https://github.com/JanusGraph/janusgraph/pull/1937#pullrequestreview-395178029", "createdAt": "2020-04-17T05:54:07Z", "commit": {"oid": "2d438977bc899d8293257bff839ab9d40fff4083"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4802, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}