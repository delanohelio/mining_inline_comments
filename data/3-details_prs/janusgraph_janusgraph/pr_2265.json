{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMjEwNDI4", "number": 2265, "title": "Fix neq and null condition query behavior", "bodyText": "Fixes #2205\n\nThank you for contributing to JanusGraph!\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n Is there an issue associated with this PR? Is it referenced in the commit message?\n Does your PR body contain #xyz where xyz is the issue number you are trying to resolve?\n Has your PR been rebased against the latest commit within the target branch (typically master)?\n Is your initial contribution a single, squashed commit?\n\nFor code changes:\n\n Have you written and/or updated unit tests to verify your changes?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE.txt file, including the main LICENSE.txt file in the root of this repository?\n If applicable, have you updated the NOTICE.txt file, including the main NOTICE.txt file found in the root of this repository?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n If this PR is a documentation-only change, have you added a [doc only]\ntag to the first line of your commit message to avoid spending CPU cycles in\nTravis CI when no code, tests, or build configuration are modified?\n\nNote:\nPlease ensure that once the PR is submitted, you check Travis CI for build issues and submit an update to your PR as soon as possible.", "createdAt": "2020-12-06T15:02:21Z", "url": "https://github.com/JanusGraph/janusgraph/pull/2265", "merged": true, "mergeCommit": {"oid": "a19c83498e3dd185216c3101f3c349303de563b4"}, "closed": true, "closedAt": "2020-12-08T12:54:55Z", "author": {"login": "li-boxuan"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjnOomAFqTU0NTc0NjEyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdj1Ht9gFqTU0NjEyMzE0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NzQ2MTIy", "url": "https://github.com/JanusGraph/janusgraph/pull/2265#pullrequestreview-545746122", "createdAt": "2020-12-06T20:46:51Z", "commit": {"oid": "ffc0768f35fab586b926843ab59f15ee691f573b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMDo0Njo1MVrOIAPNaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMDo0Njo1MVrOIAPNaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyMDEwNw==", "bodyText": "Why this test was removed from JanusGraphTest.java? Tests in JanusGraphTest.java are executed against different storages backends. I guess, it would be better to just fix this test instead of removing it.\nI.e. we could change this method to something like:\n@Test\npublic void testHasNot() {\n    graph.addVertex();\n    assertTrue(graph.query().hasNot(\"abcd\").vertices().iterator().hasNext());\n    assertFalse(graph.query().hasNot(\"abcd\", true).vertices().iterator().hasNext());\n}", "url": "https://github.com/JanusGraph/janusgraph/pull/2265#discussion_r537120107", "createdAt": "2020-12-06T20:46:51Z", "author": {"login": "porunov"}, "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/graphdb/JanusGraphTest.java", "diffHunk": "@@ -5792,18 +5792,6 @@ private static void assertElementOrderForWithoutIndex(StandardJanusGraph graph)\n \n     //................................................\n \n-\n-    @Test\n-    public void testHasNot() {\n-        JanusGraphVertex v1, v2;\n-        v1 = graph.addVertex();\n-\n-        v2 = graph.query().hasNot(\"abcd\").vertices().iterator().next();\n-        assertEquals(v1, v2);\n-        v2 = graph.query().hasNot(\"abcd\", true).vertices().iterator().next();\n-        assertEquals(v1, v2);\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffc0768f35fab586b926843ab59f15ee691f573b"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NzQ3MDk0", "url": "https://github.com/JanusGraph/janusgraph/pull/2265#pullrequestreview-545747094", "createdAt": "2020-12-06T20:59:10Z", "commit": {"oid": "ffc0768f35fab586b926843ab59f15ee691f573b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMDo1OToxMFrOIAPVjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMDo1OToxMFrOIAPVjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyMjE4OQ==", "bodyText": "I guess, slightly simplified version would be:\n@Override\npublic boolean test(Object value, Object condition) {\n    // To align with TinkerPop behaviour, if an element does not have property p, then has(p, neq(anything))\n    // should always evaluate to false. Note that JanusGraph does not support null value, so the \"value == null\"\n    // here implies the element does not have such property.\n    return value != null && !value.equals(condition);\n}", "url": "https://github.com/JanusGraph/janusgraph/pull/2265#discussion_r537122189", "createdAt": "2020-12-06T20:59:10Z", "author": {"login": "porunov"}, "path": "janusgraph-driver/src/main/java/org/janusgraph/core/attribute/Cmp.java", "diffHunk": "@@ -73,10 +73,13 @@ public boolean isValidCondition(Object condition) {\n \n         @Override\n         public boolean test(Object value, Object condition) {\n-            if (condition==null) {\n-                return value!=null;\n+            if (value == null) {\n+                // To align with TinkerPop behaviour, if an element does not have property p, then has(p, neq(anything))\n+                // should always evaluate to false. Note that JanusGraph does not support null value, so the \"value == null\"\n+                // here implies the element does not have such property.\n+                return false;\n             } else {\n-                return !condition.equals(value);\n+                return !value.equals(condition);\n             }\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffc0768f35fab586b926843ab59f15ee691f573b"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d9757343257121a3f69dcd5b16d4eeb5685818c", "author": {"user": {"login": "li-boxuan", "name": "Boxuan Li"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/7d9757343257121a3f69dcd5b16d4eeb5685818c", "committedDate": "2020-12-07T12:29:59Z", "message": "Fix neq and null condition query behavior\n\nFixes #2205\n\nSigned-off-by: Boxuan Li <liboxuan@connect.hku.hk>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffc0768f35fab586b926843ab59f15ee691f573b", "author": {"user": {"login": "li-boxuan", "name": "Boxuan Li"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/ffc0768f35fab586b926843ab59f15ee691f573b", "committedDate": "2020-12-06T09:50:10Z", "message": "Fix neq and null condition query behavior\n\nFixes #2205\n\nSigned-off-by: Boxuan Li <liboxuan@connect.hku.hk>"}, "afterCommit": {"oid": "7d9757343257121a3f69dcd5b16d4eeb5685818c", "author": {"user": {"login": "li-boxuan", "name": "Boxuan Li"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/7d9757343257121a3f69dcd5b16d4eeb5685818c", "committedDate": "2020-12-07T12:29:59Z", "message": "Fix neq and null condition query behavior\n\nFixes #2205\n\nSigned-off-by: Boxuan Li <liboxuan@connect.hku.hk>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MTIwNzQ3", "url": "https://github.com/JanusGraph/janusgraph/pull/2265#pullrequestreview-546120747", "createdAt": "2020-12-07T12:54:47Z", "commit": {"oid": "7d9757343257121a3f69dcd5b16d4eeb5685818c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjo1NDo0N1rOIAlb4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMjo1NDo0N1rOIAlb4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4NDI1Nw==", "bodyText": "Doesn't hasNot is Gremlin API?\nhttps://tinkerpop.apache.org/javadocs/3.4.8/core/org/apache/tinkerpop/gremlin/process/traversal/dsl/graph/GraphTraversal.html#hasNot-java.lang.String-", "url": "https://github.com/JanusGraph/janusgraph/pull/2265#discussion_r537484257", "createdAt": "2020-12-07T12:54:47Z", "author": {"login": "porunov"}, "path": "janusgraph-backend-testutils/src/main/java/org/janusgraph/graphdb/JanusGraphTest.java", "diffHunk": "@@ -5792,16 +5792,100 @@ private static void assertElementOrderForWithoutIndex(StandardJanusGraph graph)\n \n     //................................................\n \n+    @Test\n+    public void testNeqQuery() {\n+        makeKey(\"p2\", String.class);\n+        PropertyKey p3 = makeKey(\"p3\", String.class);\n+        mgmt.buildIndex(\"composite\", Vertex.class).addKey(p3).buildCompositeIndex();\n+        finishSchema();\n+\n+        tx.addVertex();\n+        tx.commit();\n+        newTx();\n+\n+        // property not registered in schema\n+        assertFalse(tx.traversal().V().has(\"p1\", P.neq(\"v\")).hasNext());\n+        assertFalse(tx.traversal().V().has(\"p1\", P.neq(null)).hasNext());\n+        // property registered in schema\n+        assertFalse(tx.traversal().V().has(\"p2\", P.neq(\"v\")).hasNext());\n+        assertFalse(tx.traversal().V().has(\"p2\", P.neq(null)).hasNext());\n+        // property registered in schema and has composite index\n+        assertFalse(tx.traversal().V().has(\"p3\", P.neq(\"v\")).hasNext());\n+        assertFalse(tx.traversal().V().has(\"p3\", P.neq(null)).hasNext());\n+    }\n+\n+    /**\n+     * The behaviour of has(p, null) deviates from TinkerGraph. Since JanusGraph does not support null values,\n+     * has(p, null) indicates hasNot(p). In other words, an absent property implicitly implies null value for that property.\n+     */\n+    @Test\n+    public void testHasNullQuery() {\n+        makeKey(\"p2\", String.class);\n+        PropertyKey p3 = makeKey(\"p3\", String.class);\n+        mgmt.buildIndex(\"composite\", Vertex.class).addKey(p3).buildCompositeIndex();\n+        finishSchema();\n+\n+        tx.addVertex();\n+        tx.commit();\n+        newTx();\n+\n+        // property not registered in schema\n+        assertTrue(tx.traversal().V().has(\"p1\", (Object) null).hasNext());\n+        // property registered in schema\n+        assertTrue(tx.traversal().V().has(\"p2\", (Object) null).hasNext());\n+        // property registered in schema and has composite index\n+        assertTrue(tx.traversal().V().has(\"p3\", (Object) null).hasNext());\n+    }\n \n+    /**\n+     * The behaviour of hasNot(p) is straight-forward: hasNot(p) means it does not have such property p.\n+     * Note that hasNot(p, value) (which is a JanusGraph API rather than gremlin API) is a bit tricky and it is equivalent\n+     * to has(p, neq(value)). Therefore, hasNot(p, null) means has(p, neq(null)) which is equivalent to has(p).\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d9757343257121a3f69dcd5b16d4eeb5685818c"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MTIzMTQw", "url": "https://github.com/JanusGraph/janusgraph/pull/2265#pullrequestreview-546123140", "createdAt": "2020-12-07T12:57:59Z", "commit": {"oid": "7d9757343257121a3f69dcd5b16d4eeb5685818c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4685, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}