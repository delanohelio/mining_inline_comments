{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMTE5NTA4", "number": 2103, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDoyMDoxM1rOD4VaXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDoyMDoxM1rOD4VaXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzk3NjYxOnYy", "diffSide": "RIGHT", "path": "janusgraph-es/src/main/java/org/janusgraph/diskstorage/es/ElasticSearchIndex.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDoyMDoxM1rOGPGoOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDozODoxMFrOGPVFtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MDQyNw==", "bodyText": "I think we don't need addition option for that\nSimply we may use cache with 10k LRU enties", "url": "https://github.com/JanusGraph/janusgraph/pull/2103#discussion_r418490427", "createdAt": "2020-05-01T10:20:13Z", "author": {"login": "mad"}, "path": "janusgraph-es/src/main/java/org/janusgraph/diskstorage/es/ElasticSearchIndex.java", "diffHunk": "@@ -243,6 +244,12 @@\n         new ConfigOption<>(ELASTICSEARCH_NS, \"retry_on_conflict\",\n             \"Specify how many times should the operation be retried when a conflict occurs.\", ConfigOption.Type.MASKABLE, 0);\n \n+    public static final ConfigOption<Boolean> ENABLE_INDEX_STORE_NAMES_CACHE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e025eded071ba343de1225333eed139b75fd20d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMzU5Mg==", "bodyText": "Did you check performance of 10k LRU cache and concurrentHashMap? I checked that it is faster to get a name from map than making contact for 50k and less entities. What if user has more indexes (unlikely but possible)? In such scenario the will be forced to use cache that is slower than string concatenation.", "url": "https://github.com/JanusGraph/janusgraph/pull/2103#discussion_r418623592", "createdAt": "2020-05-01T16:38:10Z", "author": {"login": "porunov"}, "path": "janusgraph-es/src/main/java/org/janusgraph/diskstorage/es/ElasticSearchIndex.java", "diffHunk": "@@ -243,6 +244,12 @@\n         new ConfigOption<>(ELASTICSEARCH_NS, \"retry_on_conflict\",\n             \"Specify how many times should the operation be retried when a conflict occurs.\", ConfigOption.Type.MASKABLE, 0);\n \n+    public static final ConfigOption<Boolean> ENABLE_INDEX_STORE_NAMES_CACHE =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MDQyNw=="}, "originalCommit": {"oid": "0e025eded071ba343de1225333eed139b75fd20d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNDQ3NQ==", "bodyText": "Also, LRU cache may evict some names which we would like to avoid because it is a permanent cache", "url": "https://github.com/JanusGraph/janusgraph/pull/2103#discussion_r418624475", "createdAt": "2020-05-01T16:40:08Z", "author": {"login": "porunov"}, "path": "janusgraph-es/src/main/java/org/janusgraph/diskstorage/es/ElasticSearchIndex.java", "diffHunk": "@@ -243,6 +244,12 @@\n         new ConfigOption<>(ELASTICSEARCH_NS, \"retry_on_conflict\",\n             \"Specify how many times should the operation be retried when a conflict occurs.\", ConfigOption.Type.MASKABLE, 0);\n \n+    public static final ConfigOption<Boolean> ENABLE_INDEX_STORE_NAMES_CACHE =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MDQyNw=="}, "originalCommit": {"oid": "0e025eded071ba343de1225333eed139b75fd20d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcxODM5MA==", "bodyText": "Yes you right concurrenthashmap mush faster than cache. But is so rare case when user would be change this option by memory usages cause, i think", "url": "https://github.com/JanusGraph/janusgraph/pull/2103#discussion_r418718390", "createdAt": "2020-05-01T20:15:07Z", "author": {"login": "mad"}, "path": "janusgraph-es/src/main/java/org/janusgraph/diskstorage/es/ElasticSearchIndex.java", "diffHunk": "@@ -243,6 +244,12 @@\n         new ConfigOption<>(ELASTICSEARCH_NS, \"retry_on_conflict\",\n             \"Specify how many times should the operation be retried when a conflict occurs.\", ConfigOption.Type.MASKABLE, 0);\n \n+    public static final ConfigOption<Boolean> ENABLE_INDEX_STORE_NAMES_CACHE =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MDQyNw=="}, "originalCommit": {"oid": "0e025eded071ba343de1225333eed139b75fd20d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcyNzM0OA==", "bodyText": "You are right. Most likely nobody will use this option and most likely it will be true for all usecases but I think, it would be good to have this option in case the user has very unusual usecase.\nAlso, this optimization was introduced here #1695 . This optimization is really tiny, so, regular user won't see any difference but still it speedups index store name retrieval for about 3-4 times faster for regular usages and reduces memory consumptions for unnecessary string concatenations.", "url": "https://github.com/JanusGraph/janusgraph/pull/2103#discussion_r418727348", "createdAt": "2020-05-01T20:38:10Z", "author": {"login": "porunov"}, "path": "janusgraph-es/src/main/java/org/janusgraph/diskstorage/es/ElasticSearchIndex.java", "diffHunk": "@@ -243,6 +244,12 @@\n         new ConfigOption<>(ELASTICSEARCH_NS, \"retry_on_conflict\",\n             \"Specify how many times should the operation be retried when a conflict occurs.\", ConfigOption.Type.MASKABLE, 0);\n \n+    public static final ConfigOption<Boolean> ENABLE_INDEX_STORE_NAMES_CACHE =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MDQyNw=="}, "originalCommit": {"oid": "0e025eded071ba343de1225333eed139b75fd20d"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1479, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}