{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNDgxODA2", "number": 2189, "title": "Optimize adjacency checks with unique index", "bodyText": "This PR aims to make the changes from #1961 more convenient to use. Since then, JanusGraph users are able to make use of adjacent IDs when traversing graphs like this:\nalice = g.V().has('user', 'name', 'alice').next()\nbob = g.V().has('user', 'name', 'bob').next()\ng.V(alice).out('knows').as('x').in('knows').is(bob).select('x')\n\nThis query will efficiently return the people known by both Alice and Bob, even if the person in between is known by very many people. With this PR, we don't need to fetch the vertices of Alice and Bob in advance anymore:\ng.V().has('user', 'name', 'alice').out('knows').as('x').in('knows').has('user', 'name', 'bob').select('x')\n\nAgain, we do not want to traverse all neighbor vertices of x and check their name property for the value bob, if we already know that there will be only a single vertex matching this property. Instead, we can determine the matching vertex and compare it directly as done before in #1961. To do so, we need to ensure that there actually is only one matching vertex. We therefore check for each has step, whether it's combination of properties can be answered by a unique index. If so, this step qualifies for optimization.\nSo far, so good. But there are two little catches which come down to the transaction level:\n\nAt the time the query is optimized, a transaction is necessary to retrieve the uniqueness information about the indexes. So it is theoretically possible that this information changes between the query's optimization phase and it's actual execution. This can have two outcomes:\n\nThe index or it's uniqueness constraint are added after the optimization phase: This is not really a problem because the query will just run without the optimization.\nThe index or it's uniqueness constraint are dropped after the optimization phase: This can have quite an impact on performance. On sparsely connected large graphs, it is obviously better to traverse all neighbors of x instead of searching the whole graph for Bob.\n\n\nPlease see my comment in the code. I don't know for sure if this is a problem so I kindly ask you to share your knowledge here.\n\nBecause of these two points, please see this PR as a PoC and as an opportunity to request comments on the general idea.\n\nThank you for contributing to JanusGraph!\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n Is there an issue associated with this PR? Is it referenced in the commit message?\n Does your PR body contain #xyz where xyz is the issue number you are trying to resolve?\n Has your PR been rebased against the latest commit within the target branch (typically master)?\n Is your initial contribution a single, squashed commit?\n\nFor code changes:\n\n Have you written and/or updated unit tests to verify your changes?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE.txt file, including the main LICENSE.txt file in the root of this repository?\n If applicable, have you updated the NOTICE.txt file, including the main NOTICE.txt file found in the root of this repository?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n If this PR is a documentation-only change, have you added a [doc only]\ntag to the first line of your commit message to avoid spending CPU cycles in\nTravis CI when no code, tests, or build configuration are modified?\n\nNote:\nPlease ensure that once the PR is submitted, you check Travis CI for build issues and submit an update to your PR as soon as possible.", "createdAt": "2020-08-24T12:26:41Z", "url": "https://github.com/JanusGraph/janusgraph/pull/2189", "merged": true, "mergeCommit": {"oid": "8b59b0cff39daca2ca95ef7b2ea157a0944a0037"}, "closed": true, "closedAt": "2021-01-04T06:52:01Z", "author": {"login": "rngcntr"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCBw2ogBqjM2ODUxOTMyMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABds-NSkAFqTU2MTM5NzU4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5dc634bc9481f563052544211b05a77663eb7bf5", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/5dc634bc9481f563052544211b05a77663eb7bf5", "committedDate": "2020-08-24T11:33:19Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "b2b3f95aa644e355cbbcf90a9866a82cc1eb5177", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/b2b3f95aa644e355cbbcf90a9866a82cc1eb5177", "committedDate": "2020-08-24T12:28:13Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNDE3Mzc5", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-473417379", "createdAt": "2020-08-24T12:31:22Z", "commit": {"oid": "b2b3f95aa644e355cbbcf90a9866a82cc1eb5177"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjozMToyMlrOHFiI4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjozMToyMlrOHFiI4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2NDI1Ng==", "bodyText": "At this point, I'm not entirely sure if the filterTraversal uses the same transaction as the surrounding traversal. Does anyone know off the top of their heads, how such an access is handled by JanusGraph? And if not, can you hint me, where I have to look for it? So far, I was not able to find out, whether the same transaction is reused.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r475564256", "createdAt": "2020-08-24T12:31:22Z", "author": {"login": "rngcntr"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/LazyHasStep.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize;\n+\n+import org.apache.tinkerpop.gremlin.process.traversal.P;\n+import org.apache.tinkerpop.gremlin.process.traversal.Traversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.structure.Element;\n+import org.apache.tinkerpop.gremlin.structure.util.StringFactory;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class LazyHasStep<S extends Element, E> extends HasStep<S> implements TraversalParent {\n+\n+    private final Traversal.Admin<? extends Element, E> filterTraversal;\n+\n+    public LazyHasStep(Traversal.Admin traversal,\n+                       final Traversal<? extends Element, E> filterTraversal) {\n+        super(traversal);\n+        this.filterTraversal = filterTraversal.asAdmin();\n+        integrateChild(this.filterTraversal);\n+\n+        HasContainer hc = new LazyHasContainer(ADJACENT_ID.name(), this::initializeFilter);\n+        this.addHasContainer(hc);\n+    }\n+\n+    private P<?> initializeFilter() {\n+        if (filterTraversal.hasNext()) {\n+            return P.eq(filterTraversal.next());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b3f95aa644e355cbbcf90a9866a82cc1eb5177"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2b3f95aa644e355cbbcf90a9866a82cc1eb5177", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/b2b3f95aa644e355cbbcf90a9866a82cc1eb5177", "committedDate": "2020-08-24T12:28:13Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "df5fda521ffb089bca6214d09f1ec6d950da357b", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/df5fda521ffb089bca6214d09f1ec6d950da357b", "committedDate": "2020-08-24T12:42:28Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df5fda521ffb089bca6214d09f1ec6d950da357b", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/df5fda521ffb089bca6214d09f1ec6d950da357b", "committedDate": "2020-08-24T12:42:28Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "728ff9c30ecb7cca7614b18b852bbab721d656bd", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/728ff9c30ecb7cca7614b18b852bbab721d656bd", "committedDate": "2020-08-25T06:15:34Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "728ff9c30ecb7cca7614b18b852bbab721d656bd", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/728ff9c30ecb7cca7614b18b852bbab721d656bd", "committedDate": "2020-08-25T06:15:34Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "8046d08c8fae522d9a056381109869e7101a8302", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/8046d08c8fae522d9a056381109869e7101a8302", "committedDate": "2020-08-25T13:06:33Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8046d08c8fae522d9a056381109869e7101a8302", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/8046d08c8fae522d9a056381109869e7101a8302", "committedDate": "2020-08-25T13:06:33Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "78de033da86639b8fab737281cbb8d01f587a088", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/78de033da86639b8fab737281cbb8d01f587a088", "committedDate": "2020-08-27T08:08:08Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78de033da86639b8fab737281cbb8d01f587a088", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/78de033da86639b8fab737281cbb8d01f587a088", "committedDate": "2020-08-27T08:08:08Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/4822c15868f084ed876ed02f459a202c5a3ead38", "committedDate": "2020-08-27T08:58:54Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3ODc4Nzk0", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-477878794", "createdAt": "2020-08-28T16:45:32Z", "commit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjo0NTozMlrOHJNeUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjo1Mjo0N1rOHJNsiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxOTk4NA==", "bodyText": "Maybe you can put the selection logic into a new class that implements IndexSelectionStrategy interface", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r479419984", "createdAt": "2020-08-28T16:45:32Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterables;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.core.RelationType;\n+import org.janusgraph.graphdb.internal.InternalRelationType;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        TraversalHelper.getStepsOfClass(HasStep.class, traversal)\n+            .forEach(this::optimizeStep);\n+    }\n+\n+    /**\n+     * Determines whether this HasStep can be answered by a unique index and thus, returns either 0 or 1 match\n+     */\n+    @Override\n+    protected boolean isValidStep(HasStep<?> step) {\n+        StandardJanusGraphTx tx;\n+\n+        try {\n+            tx = (StandardJanusGraphTx) JanusGraphTraversalUtil.getTx(step.getTraversal());\n+        } catch (IllegalArgumentException iaex) {\n+            // The traversal needs to be bound to a graph in order to get information about the indexes\n+            return false;\n+        }\n+\n+        List<String> givenKeys = step.getHasContainers().stream()\n+            .map(HasContainer::getKey).collect(Collectors.toList());\n+\n+        List<PredicateCondition<String, JanusGraphElement>> constraints = step.getHasContainers().stream()\n+            .filter(hc -> hc.getBiPredicate() == Compare.eq)\n+            .map(hc -> new PredicateCondition<>(hc.getKey(), JanusGraphPredicateUtils.convert(hc.getBiPredicate()), hc.getValue()))\n+            .collect(Collectors.toList());\n+        final MultiCondition<JanusGraphElement> conditions = QueryUtil.constraints2QNF(tx, constraints);\n+\n+        // collect all matching indexes\n+        final Set<IndexType> availableIndexes = new HashSet<>();\n+        ConditionUtil.traversal(conditions, condition -> {\n+            if (condition instanceof PredicateCondition) {\n+                final RelationType type = ((PredicateCondition<RelationType,JanusGraphElement>) condition).getKey();\n+                Preconditions.checkArgument(type != null && type.isPropertyKey());\n+                Iterables.addAll(availableIndexes, ((InternalRelationType) type).getKeyIndexes());\n+            }\n+            return true;\n+        });\n+\n+        // select only valid unique indexes\n+        return availableIndexes.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyMDQ2Ng==", "bodyText": "When would IllegalArgumentException happen? I don't quite understand the logic here.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r479420466", "createdAt": "2020-08-28T16:46:29Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterables;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.core.RelationType;\n+import org.janusgraph.graphdb.internal.InternalRelationType;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        TraversalHelper.getStepsOfClass(HasStep.class, traversal)\n+            .forEach(this::optimizeStep);\n+    }\n+\n+    /**\n+     * Determines whether this HasStep can be answered by a unique index and thus, returns either 0 or 1 match\n+     */\n+    @Override\n+    protected boolean isValidStep(HasStep<?> step) {\n+        StandardJanusGraphTx tx;\n+\n+        try {\n+            tx = (StandardJanusGraphTx) JanusGraphTraversalUtil.getTx(step.getTraversal());\n+        } catch (IllegalArgumentException iaex) {\n+            // The traversal needs to be bound to a graph in order to get information about the indexes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyMzYyNw==", "bodyText": "Can you profile these optimizations if possible? They could take some time (especially the index selection part). Profiling also makes it clear to users whether this optimization is applied or not.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r479423627", "createdAt": "2020-08-28T16:52:47Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/AdjacentVertexOptimizerStrategy.java", "diffHunk": "@@ -56,21 +51,18 @@\n     }\n \n     protected void optimizeStep(T step) {\n-        P<?> predicate = parsePredicate(step);\n-        if (isValidPredicate(predicate)) {\n-            OptimizablePosition pos = getOptimizablePosition(step);\n-            replaceSequence(step, pos, predicate);\n+        OptimizablePosition pos = getOptimizablePosition(step);\n+        if (pos != OptimizablePosition.NONE && isValidStep(step)) {\n+            replaceSequence(step, pos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDkwNjc1", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-478090675", "createdAt": "2020-08-29T02:23:38Z", "commit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMjoyMzozOVrOHJYMxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMzowMjo1OFrOHJYZjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NTcxOQ==", "bodyText": "I'm not 100% sure but I think you need to add labels of the original step to this new step. Better have a test case to verify.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r479595719", "createdAt": "2020-08-29T02:23:39Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/AdjacentVertexHasIdOptimizerStrategy.java", "diffHunk": "@@ -73,4 +77,10 @@ protected boolean isValidPredicate(P<?> predicate) {\n         Object predicateValue = predicate.getValue();\n         return predicateValue instanceof Vertex || predicateValue instanceof Long;\n     }\n+\n+    @Override\n+    protected FilterStep<Edge> makeFilterByAdjacentIdStep(Traversal.Admin<?, ?> traversal, HasStep<?> originalStep) {\n+        HasContainer hc = new HasContainer(ADJACENT_ID.name(), P.eq(parsePredicate(originalStep).getValue()));\n+        return new HasStep<Edge>(traversal, hc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NjkxOA==", "bodyText": "If the filterTraversal has no result, then the previous step (out(), in(), ...) becomes unnecessary too. It can bring huge performance improvement in the super-node context I guess. This could be potentially optimized.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r479596918", "createdAt": "2020-08-29T02:38:00Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterables;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.core.RelationType;\n+import org.janusgraph.graphdb.internal.InternalRelationType;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        TraversalHelper.getStepsOfClass(HasStep.class, traversal)\n+            .forEach(this::optimizeStep);\n+    }\n+\n+    /**\n+     * Determines whether this HasStep can be answered by a unique index and thus, returns either 0 or 1 match\n+     */\n+    @Override\n+    protected boolean isValidStep(HasStep<?> step) {\n+        StandardJanusGraphTx tx;\n+\n+        try {\n+            tx = (StandardJanusGraphTx) JanusGraphTraversalUtil.getTx(step.getTraversal());\n+        } catch (IllegalArgumentException iaex) {\n+            // The traversal needs to be bound to a graph in order to get information about the indexes\n+            return false;\n+        }\n+\n+        List<String> givenKeys = step.getHasContainers().stream()\n+            .map(HasContainer::getKey).collect(Collectors.toList());\n+\n+        List<PredicateCondition<String, JanusGraphElement>> constraints = step.getHasContainers().stream()\n+            .filter(hc -> hc.getBiPredicate() == Compare.eq)\n+            .map(hc -> new PredicateCondition<>(hc.getKey(), JanusGraphPredicateUtils.convert(hc.getBiPredicate()), hc.getValue()))\n+            .collect(Collectors.toList());\n+        final MultiCondition<JanusGraphElement> conditions = QueryUtil.constraints2QNF(tx, constraints);\n+\n+        // collect all matching indexes\n+        final Set<IndexType> availableIndexes = new HashSet<>();\n+        ConditionUtil.traversal(conditions, condition -> {\n+            if (condition instanceof PredicateCondition) {\n+                final RelationType type = ((PredicateCondition<RelationType,JanusGraphElement>) condition).getKey();\n+                Preconditions.checkArgument(type != null && type.isPropertyKey());\n+                Iterables.addAll(availableIndexes, ((InternalRelationType) type).getKeyIndexes());\n+            }\n+            return true;\n+        });\n+\n+        // select only valid unique indexes\n+        return availableIndexes.stream()\n+            .filter(IndexType::isCompositeIndex)\n+            .map(index -> (CompositeIndexType) index)\n+            .filter(cIndex -> cIndex.getCardinality() == Cardinality.SINGLE)\n+            .filter(cIndex -> isIndexSatisfiedByGivenKeys(cIndex, givenKeys))\n+            .count() > 0;\n+    }\n+\n+    private boolean isIndexSatisfiedByGivenKeys(IndexType index, Collection<String> givenKeys) {\n+        for (int i = 0; i < index.getFieldKeys().length; ++i) {\n+            if (!givenKeys.contains(index.getFieldKeys()[i].getFieldKey().name())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Traversal.Admin<?,Long> generateFilter(Traversal.Admin<?,?> traversal, HasStep<?> originalStep) {\n+        Traversal.Admin filterTraversal = new DefaultGraphTraversal<>(traversal.getGraph().get())\n+            .addStep(\n+                new GraphStep<>(traversal, Vertex.class, true)\n+            );\n+\n+        filterTraversal.addStep(originalStep);\n+        filterTraversal.addStep(new IdStep<>(traversal));\n+        return filterTraversal;\n+    }\n+\n+    private long evaluateFilter(Traversal.Admin<?,Long> filterTraversal) {\n+        // negative IDs are not valid in JanusGraph. Therefore, if the filterTraversal has no result, the newly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NzE5NA==", "bodyText": "I suspect this should be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    filterTraversal.addStep(new IdStep<>(traversal));\n          \n          \n            \n                    filterTraversal.addStep(new IdStep<>(filterTraversal));", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r479597194", "createdAt": "2020-08-29T02:41:11Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterables;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.core.RelationType;\n+import org.janusgraph.graphdb.internal.InternalRelationType;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        TraversalHelper.getStepsOfClass(HasStep.class, traversal)\n+            .forEach(this::optimizeStep);\n+    }\n+\n+    /**\n+     * Determines whether this HasStep can be answered by a unique index and thus, returns either 0 or 1 match\n+     */\n+    @Override\n+    protected boolean isValidStep(HasStep<?> step) {\n+        StandardJanusGraphTx tx;\n+\n+        try {\n+            tx = (StandardJanusGraphTx) JanusGraphTraversalUtil.getTx(step.getTraversal());\n+        } catch (IllegalArgumentException iaex) {\n+            // The traversal needs to be bound to a graph in order to get information about the indexes\n+            return false;\n+        }\n+\n+        List<String> givenKeys = step.getHasContainers().stream()\n+            .map(HasContainer::getKey).collect(Collectors.toList());\n+\n+        List<PredicateCondition<String, JanusGraphElement>> constraints = step.getHasContainers().stream()\n+            .filter(hc -> hc.getBiPredicate() == Compare.eq)\n+            .map(hc -> new PredicateCondition<>(hc.getKey(), JanusGraphPredicateUtils.convert(hc.getBiPredicate()), hc.getValue()))\n+            .collect(Collectors.toList());\n+        final MultiCondition<JanusGraphElement> conditions = QueryUtil.constraints2QNF(tx, constraints);\n+\n+        // collect all matching indexes\n+        final Set<IndexType> availableIndexes = new HashSet<>();\n+        ConditionUtil.traversal(conditions, condition -> {\n+            if (condition instanceof PredicateCondition) {\n+                final RelationType type = ((PredicateCondition<RelationType,JanusGraphElement>) condition).getKey();\n+                Preconditions.checkArgument(type != null && type.isPropertyKey());\n+                Iterables.addAll(availableIndexes, ((InternalRelationType) type).getKeyIndexes());\n+            }\n+            return true;\n+        });\n+\n+        // select only valid unique indexes\n+        return availableIndexes.stream()\n+            .filter(IndexType::isCompositeIndex)\n+            .map(index -> (CompositeIndexType) index)\n+            .filter(cIndex -> cIndex.getCardinality() == Cardinality.SINGLE)\n+            .filter(cIndex -> isIndexSatisfiedByGivenKeys(cIndex, givenKeys))\n+            .count() > 0;\n+    }\n+\n+    private boolean isIndexSatisfiedByGivenKeys(IndexType index, Collection<String> givenKeys) {\n+        for (int i = 0; i < index.getFieldKeys().length; ++i) {\n+            if (!givenKeys.contains(index.getFieldKeys()[i].getFieldKey().name())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Traversal.Admin<?,Long> generateFilter(Traversal.Admin<?,?> traversal, HasStep<?> originalStep) {\n+        Traversal.Admin filterTraversal = new DefaultGraphTraversal<>(traversal.getGraph().get())\n+            .addStep(\n+                new GraphStep<>(traversal, Vertex.class, true)\n+            );\n+\n+        filterTraversal.addStep(originalStep);\n+        filterTraversal.addStep(new IdStep<>(traversal));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NzgwNQ==", "bodyText": "I suggest using Traversal.Admin<S2, E2> removeStep(final int index) here or moving this before makeFilterByAdjacentIdStep .  removeStep(originalStep) internally traverses all steps and compare with originalStep. However, since this originalStep is passed into another filterTraversal, it has a risk of getting modified.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r479597805", "createdAt": "2020-08-29T02:48:41Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/AdjacentVertexOptimizerStrategy.java", "diffHunk": "@@ -90,37 +82,36 @@ private OptimizablePosition getOptimizablePosition(T originalStep) {\n         return OptimizablePosition.NONE;\n     }\n \n-    private void replaceSequence(T originalStep, OptimizablePosition pos,\n-                                   P<?> predicate) {\n+    private void replaceSequence(T originalStep, OptimizablePosition pos) {\n         switch (pos) {\n         case V2E_E2V_ID:\n-            replaceSequenceV2EthenE2VthenID(originalStep, predicate);\n+            replaceSequenceV2EthenE2VthenID(originalStep);\n             break;\n         case V2V_ID:\n-            replaceSequenceV2VthenID(originalStep, predicate);\n+            replaceSequenceV2VthenID(originalStep);\n             break;\n         default:\n             break;\n         }\n     }\n \n-    private void replaceSequenceV2EthenE2VthenID(T originalStep, P<?> predicate) {\n+    private void replaceSequenceV2EthenE2VthenID(T originalStep) {\n         Traversal.Admin<?,?> traversal = originalStep.getTraversal();\n \n         Step<Edge,Vertex> e2vStep;\n         e2vStep = (Step<Edge, Vertex>) originalStep.getPreviousStep();\n \n         // create new has(\"~adjacent\", id_value) step before e2v step\n-        HasStep<Edge> hasAdjacentIdStep = makeHasAdjacentIdStep(traversal, predicate);\n+        FilterStep<Edge> filterByAdjacentIdStep = makeFilterByAdjacentIdStep(traversal, originalStep);\n \n         // remove original selection step\n         traversal.removeStep(originalStep);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5Nzg5Mw==", "bodyText": "If I am understanding it correctly, this creates a new ad-hoc traversal which leverages JanusGraphStepStrategy and GraphCentricQuery. We need to profile it, especially because it fires a backend query.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r479597893", "createdAt": "2020-08-29T02:49:45Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterables;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.core.RelationType;\n+import org.janusgraph.graphdb.internal.InternalRelationType;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        TraversalHelper.getStepsOfClass(HasStep.class, traversal)\n+            .forEach(this::optimizeStep);\n+    }\n+\n+    /**\n+     * Determines whether this HasStep can be answered by a unique index and thus, returns either 0 or 1 match\n+     */\n+    @Override\n+    protected boolean isValidStep(HasStep<?> step) {\n+        StandardJanusGraphTx tx;\n+\n+        try {\n+            tx = (StandardJanusGraphTx) JanusGraphTraversalUtil.getTx(step.getTraversal());\n+        } catch (IllegalArgumentException iaex) {\n+            // The traversal needs to be bound to a graph in order to get information about the indexes\n+            return false;\n+        }\n+\n+        List<String> givenKeys = step.getHasContainers().stream()\n+            .map(HasContainer::getKey).collect(Collectors.toList());\n+\n+        List<PredicateCondition<String, JanusGraphElement>> constraints = step.getHasContainers().stream()\n+            .filter(hc -> hc.getBiPredicate() == Compare.eq)\n+            .map(hc -> new PredicateCondition<>(hc.getKey(), JanusGraphPredicateUtils.convert(hc.getBiPredicate()), hc.getValue()))\n+            .collect(Collectors.toList());\n+        final MultiCondition<JanusGraphElement> conditions = QueryUtil.constraints2QNF(tx, constraints);\n+\n+        // collect all matching indexes\n+        final Set<IndexType> availableIndexes = new HashSet<>();\n+        ConditionUtil.traversal(conditions, condition -> {\n+            if (condition instanceof PredicateCondition) {\n+                final RelationType type = ((PredicateCondition<RelationType,JanusGraphElement>) condition).getKey();\n+                Preconditions.checkArgument(type != null && type.isPropertyKey());\n+                Iterables.addAll(availableIndexes, ((InternalRelationType) type).getKeyIndexes());\n+            }\n+            return true;\n+        });\n+\n+        // select only valid unique indexes\n+        return availableIndexes.stream()\n+            .filter(IndexType::isCompositeIndex)\n+            .map(index -> (CompositeIndexType) index)\n+            .filter(cIndex -> cIndex.getCardinality() == Cardinality.SINGLE)\n+            .filter(cIndex -> isIndexSatisfiedByGivenKeys(cIndex, givenKeys))\n+            .count() > 0;\n+    }\n+\n+    private boolean isIndexSatisfiedByGivenKeys(IndexType index, Collection<String> givenKeys) {\n+        for (int i = 0; i < index.getFieldKeys().length; ++i) {\n+            if (!givenKeys.contains(index.getFieldKeys()[i].getFieldKey().name())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private Traversal.Admin<?,Long> generateFilter(Traversal.Admin<?,?> traversal, HasStep<?> originalStep) {\n+        Traversal.Admin filterTraversal = new DefaultGraphTraversal<>(traversal.getGraph().get())\n+            .addStep(\n+                new GraphStep<>(traversal, Vertex.class, true)\n+            );\n+\n+        filterTraversal.addStep(originalStep);\n+        filterTraversal.addStep(new IdStep<>(traversal));\n+        return filterTraversal;\n+    }\n+\n+    private long evaluateFilter(Traversal.Admin<?,Long> filterTraversal) {\n+        // negative IDs are not valid in JanusGraph. Therefore, if the filterTraversal has no result, the newly\n+        // inserted HasStep should not match anything\n+        long determinedId = -1;\n+        if (filterTraversal.hasNext()) {\n+            determinedId = (long) filterTraversal.next();\n+        }\n+        return determinedId;\n+    }\n+\n+    @Override\n+    protected FilterStep<Edge> makeFilterByAdjacentIdStep(Traversal.Admin<?, ?> traversal, HasStep<?> originalStep) {\n+        Traversal.Admin<?,Long> filterTraversal = generateFilter(traversal, originalStep);\n+        HasContainer hc = new HasContainer(ADJACENT_ID.name(), P.eq(evaluateFilter(filterTraversal)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5ODk4OQ==", "bodyText": "I am not sure here, but maybe you want to skip this optimization if TraversalHelper.onGraphComputer(traversal). TBH I didn't even know we could create nested traversal, thus I don't know what impact it will have on OLAP traversal.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r479598989", "createdAt": "2020-08-29T03:02:58Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterables;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.core.RelationType;\n+import org.janusgraph.graphdb.internal.InternalRelationType;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        TraversalHelper.getStepsOfClass(HasStep.class, traversal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4822c15868f084ed876ed02f459a202c5a3ead38", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/4822c15868f084ed876ed02f459a202c5a3ead38", "committedDate": "2020-08-27T08:58:54Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "f34bb32963c21811e4271538a91173253e7fb2b3", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/f34bb32963c21811e4271538a91173253e7fb2b3", "committedDate": "2020-08-31T06:51:11Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f34bb32963c21811e4271538a91173253e7fb2b3", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/f34bb32963c21811e4271538a91173253e7fb2b3", "committedDate": "2020-08-31T06:51:11Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "644458fc0696129a426101cdbefec19f651d8c74", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/644458fc0696129a426101cdbefec19f651d8c74", "committedDate": "2020-08-31T11:03:38Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "644458fc0696129a426101cdbefec19f651d8c74", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/644458fc0696129a426101cdbefec19f651d8c74", "committedDate": "2020-08-31T11:03:38Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "07f4cc60cacfdaeac9c024c32d92cc130898dc04", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/07f4cc60cacfdaeac9c024c32d92cc130898dc04", "committedDate": "2020-08-31T11:57:58Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07f4cc60cacfdaeac9c024c32d92cc130898dc04", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/07f4cc60cacfdaeac9c024c32d92cc130898dc04", "committedDate": "2020-08-31T11:57:58Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "62b1c9395a3984e8afd6482be843a30bbca42fb4", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/62b1c9395a3984e8afd6482be843a30bbca42fb4", "committedDate": "2020-09-01T06:49:18Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62b1c9395a3984e8afd6482be843a30bbca42fb4", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/62b1c9395a3984e8afd6482be843a30bbca42fb4", "committedDate": "2020-09-01T06:49:18Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "a3d3a16350cbb37117fe4834e79ad896f2ab73d2", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/a3d3a16350cbb37117fe4834e79ad896f2ab73d2", "committedDate": "2020-09-10T07:00:57Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3d3a16350cbb37117fe4834e79ad896f2ab73d2", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/a3d3a16350cbb37117fe4834e79ad896f2ab73d2", "committedDate": "2020-09-10T07:00:57Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "8cbf2e11d37abd2fb5b455467ce2d23313e37085", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/8cbf2e11d37abd2fb5b455467ce2d23313e37085", "committedDate": "2020-10-08T11:34:09Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8cbf2e11d37abd2fb5b455467ce2d23313e37085", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/8cbf2e11d37abd2fb5b455467ce2d23313e37085", "committedDate": "2020-10-08T11:34:09Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "5f26b1ed7a450b1aff1c2146605c5ba38321dffc", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/5f26b1ed7a450b1aff1c2146605c5ba38321dffc", "committedDate": "2020-10-08T11:54:48Z", "message": "Optimize adjacency checks with unique index\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e24868c6fa70bfcf02a4662e90770b2b67fbdd88", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/e24868c6fa70bfcf02a4662e90770b2b67fbdd88", "committedDate": "2020-10-09T05:53:18Z", "message": "Make optimizer backend access configurable\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "3df566ea8648a1e2b835664a8816ca62b48d27f1", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/3df566ea8648a1e2b835664a8816ca62b48d27f1", "committedDate": "2020-10-14T07:30:24Z", "message": "Make optimizer backend access configurable\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MzY5NDI1", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-509369425", "createdAt": "2020-10-15T13:19:27Z", "commit": {"oid": "3df566ea8648a1e2b835664a8816ca62b48d27f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzoxOToyN1rOHiHZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzoxOToyN1rOHiHZjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzNDg2MQ==", "bodyText": "This looks interesting. How did you find this step? Did you know why it is not caught by TraversalHelper.onGraphComputer?", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r505534861", "createdAt": "2020-10-15T13:19:27Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/strategy/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize.strategy;\n+\n+import org.apache.tinkerpop.gremlin.process.computer.traversal.step.map.TraversalVertexProgramStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.query.index.IndexSelectionUtil;\n+import org.janusgraph.graphdb.tinkerpop.optimize.JanusGraphTraversalUtil;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public Set<Class<? extends ProviderOptimizationStrategy>> applyPost() {\n+        Set<Class<? extends ProviderOptimizationStrategy>> postStrategies = new HashSet<>();\n+        postStrategies.add(JanusGraphStepStrategy.class);\n+        postStrategies.add(JanusGraphLocalQueryOptimizerStrategy.class);\n+        return postStrategies;\n+    }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        if (TraversalHelper.onGraphComputer(traversal)\n+            || traversal.getStartStep() instanceof TraversalVertexProgramStep // not caught by TraversalHelper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3df566ea8648a1e2b835664a8816ca62b48d27f1"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MzcxMjk0", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-509371294", "createdAt": "2020-10-15T13:21:21Z", "commit": {"oid": "3df566ea8648a1e2b835664a8816ca62b48d27f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzoyMToyMVrOHiHe9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzoyMToyMVrOHiHe9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzNjI0Ng==", "bodyText": "Curious: when is it a StandardJanusGraph instance and when is it a StandardJanusGraphTx instance?", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r505536246", "createdAt": "2020-10-15T13:21:21Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/strategy/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize.strategy;\n+\n+import org.apache.tinkerpop.gremlin.process.computer.traversal.step.map.TraversalVertexProgramStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.query.index.IndexSelectionUtil;\n+import org.janusgraph.graphdb.tinkerpop.optimize.JanusGraphTraversalUtil;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public Set<Class<? extends ProviderOptimizationStrategy>> applyPost() {\n+        Set<Class<? extends ProviderOptimizationStrategy>> postStrategies = new HashSet<>();\n+        postStrategies.add(JanusGraphStepStrategy.class);\n+        postStrategies.add(JanusGraphLocalQueryOptimizerStrategy.class);\n+        return postStrategies;\n+    }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        if (TraversalHelper.onGraphComputer(traversal)\n+            || traversal.getStartStep() instanceof TraversalVertexProgramStep // not caught by TraversalHelper\n+            || !traversal.getGraph().isPresent()) {\n+            return;\n+        }\n+\n+        Graph graph = traversal.getGraph().get();\n+        StandardJanusGraph janusGraph = graph instanceof StandardJanusGraph\n+            ? (StandardJanusGraph) graph\n+            : ((StandardJanusGraphTx) graph).getGraph();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3df566ea8648a1e2b835664a8816ca62b48d27f1"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MzcxOTg5", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-509371989", "createdAt": "2020-10-15T13:22:02Z", "commit": {"oid": "3df566ea8648a1e2b835664a8816ca62b48d27f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzoyMjowMlrOHiHg3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzoyMjowMlrOHiHg3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzNjczNA==", "bodyText": "Nice. Can you add a test case for this?", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r505536734", "createdAt": "2020-10-15T13:22:02Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/strategy/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize.strategy;\n+\n+import org.apache.tinkerpop.gremlin.process.computer.traversal.step.map.TraversalVertexProgramStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.query.index.IndexSelectionUtil;\n+import org.janusgraph.graphdb.tinkerpop.optimize.JanusGraphTraversalUtil;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public Set<Class<? extends ProviderOptimizationStrategy>> applyPost() {\n+        Set<Class<? extends ProviderOptimizationStrategy>> postStrategies = new HashSet<>();\n+        postStrategies.add(JanusGraphStepStrategy.class);\n+        postStrategies.add(JanusGraphLocalQueryOptimizerStrategy.class);\n+        return postStrategies;\n+    }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        if (TraversalHelper.onGraphComputer(traversal)\n+            || traversal.getStartStep() instanceof TraversalVertexProgramStep // not caught by TraversalHelper\n+            || !traversal.getGraph().isPresent()) {\n+            return;\n+        }\n+\n+        Graph graph = traversal.getGraph().get();\n+        StandardJanusGraph janusGraph = graph instanceof StandardJanusGraph\n+            ? (StandardJanusGraph) graph\n+            : ((StandardJanusGraphTx) graph).getGraph();\n+\n+        if (!janusGraph.getConfiguration().optimizerBackendAccess()) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3df566ea8648a1e2b835664a8816ca62b48d27f1"}, "originalPosition": 83}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5e060b5b9644ae5b484f52eb9efd7d2522b2baf", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/b5e060b5b9644ae5b484f52eb9efd7d2522b2baf", "committedDate": "2020-10-16T08:13:00Z", "message": "Add test for OPTIMIZER_BACKEND_ACCESS option"}, "afterCommit": {"oid": "4357b4db97f615011ee75554faaf865d8af10748", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/4357b4db97f615011ee75554faaf865d8af10748", "committedDate": "2020-10-16T08:14:14Z", "message": "Add test for OPTIMIZER_BACKEND_ACCESS option\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MTUxMjU3", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-516151257", "createdAt": "2020-10-24T02:20:24Z", "commit": {"oid": "4357b4db97f615011ee75554faaf865d8af10748"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMjoyMDoyNFrOHnk1pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMzo0MTozOFrOHnnC_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI2MDA2OQ==", "bodyText": "Seems we can also support P.within(singleton) here.\nIf g.V(sv[0]).out().has(\"uniqueId\", 0) can be optimized, so can g.V(sv[0]).out().has(\"uniqueId\", P.within(0))", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r511260069", "createdAt": "2020-10-24T02:20:24Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/strategy/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize.strategy;\n+\n+import org.apache.tinkerpop.gremlin.process.computer.traversal.step.map.TraversalVertexProgramStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.query.index.IndexSelectionUtil;\n+import org.janusgraph.graphdb.tinkerpop.optimize.JanusGraphTraversalUtil;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public Set<Class<? extends ProviderOptimizationStrategy>> applyPost() {\n+        Set<Class<? extends ProviderOptimizationStrategy>> postStrategies = new HashSet<>();\n+        postStrategies.add(JanusGraphStepStrategy.class);\n+        postStrategies.add(JanusGraphLocalQueryOptimizerStrategy.class);\n+        return postStrategies;\n+    }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        if (TraversalHelper.onGraphComputer(traversal)\n+            || traversal.getStartStep() instanceof TraversalVertexProgramStep // not caught by TraversalHelper\n+            || !traversal.getGraph().isPresent()) {\n+            return;\n+        }\n+\n+        Graph graph = traversal.getGraph().get();\n+        StandardJanusGraph janusGraph = graph instanceof StandardJanusGraph\n+            ? (StandardJanusGraph) graph\n+            : ((StandardJanusGraphTx) graph).getGraph();\n+\n+        if (!janusGraph.getConfiguration().optimizerBackendAccess()) {\n+            return;\n+        }\n+\n+        TraversalHelper.getStepsOfClass(HasStep.class, traversal)\n+            .forEach(this::optimizeStep);\n+    }\n+\n+    /**\n+     * Determines whether this HasStep can be answered by a unique index and thus, returns either 0 or 1 match\n+     */\n+    @Override\n+    protected boolean isValidStep(HasStep<?> step) {\n+        StandardJanusGraphTx tx = (StandardJanusGraphTx) JanusGraphTraversalUtil.getTx(step.getTraversal());\n+\n+        List<String> givenKeys = step.getHasContainers().stream()\n+            .map(HasContainer::getKey).collect(Collectors.toList());\n+\n+        List<PredicateCondition<String, JanusGraphElement>> constraints = step.getHasContainers().stream()\n+            .filter(hc -> hc.getBiPredicate() == Compare.eq)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4357b4db97f615011ee75554faaf865d8af10748"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI2NzY3Ng==", "bodyText": "This assumes and requires conditions is non-null. However, the QueryUtil.constraints2QNF method might return a null value. Although it is not an issue for your current use case, IMO we should simply return an empty set if conditions is null.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r511267676", "createdAt": "2020-10-24T02:35:49Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/index/IndexSelectionUtil.java", "diffHunk": "@@ -25,4 +38,26 @@ public static boolean indexCoversOrder(MixedIndexType index, OrderList orders) {\n         }\n         return true;\n     }\n+\n+    public static Set<IndexType> getMatchingIndexes(MultiCondition<JanusGraphElement> conditions) {\n+        final Set<IndexType> availableIndexes = new HashSet<>();\n+        ConditionUtil.traversal(conditions, condition -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4357b4db97f615011ee75554faaf865d8af10748"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI2OTA0Ng==", "bodyText": "Nitpick: we can use enhanced for loop here: for (IndexField indexField : index.getFieldKeys())", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r511269046", "createdAt": "2020-10-24T02:39:27Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/index/IndexSelectionUtil.java", "diffHunk": "@@ -25,4 +38,26 @@ public static boolean indexCoversOrder(MixedIndexType index, OrderList orders) {\n         }\n         return true;\n     }\n+\n+    public static Set<IndexType> getMatchingIndexes(MultiCondition<JanusGraphElement> conditions) {\n+        final Set<IndexType> availableIndexes = new HashSet<>();\n+        ConditionUtil.traversal(conditions, condition -> {\n+            if (condition instanceof PredicateCondition) {\n+                final RelationType type = ((PredicateCondition<RelationType, JanusGraphElement>) condition).getKey();\n+                Preconditions.checkArgument(type != null && type.isPropertyKey());\n+                Iterables.addAll(availableIndexes, ((InternalRelationType) type).getKeyIndexes());\n+            }\n+            return true;\n+        });\n+        return availableIndexes;\n+    }\n+\n+    public static boolean isIndexSatisfiedByGivenKeys(IndexType index, Collection<String> givenKeys) {\n+        for (int i = 0; i < index.getFieldKeys().length; ++i) {\n+            if (!givenKeys.contains(index.getFieldKeys()[i].getFieldKey().name())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4357b4db97f615011ee75554faaf865d8af10748"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI3MDgzMA==", "bodyText": "Not sure if it's just me but I prefer writing it in multiple lines:\npublic static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() {\n    return INSTANCE;\n}\nand a decent IDE like Intellij can automatically collapse it into one line.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r511270830", "createdAt": "2020-10-24T02:44:03Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/strategy/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize.strategy;\n+\n+import org.apache.tinkerpop.gremlin.process.computer.traversal.step.map.TraversalVertexProgramStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.query.index.IndexSelectionUtil;\n+import org.janusgraph.graphdb.tinkerpop.optimize.JanusGraphTraversalUtil;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4357b4db97f615011ee75554faaf865d8af10748"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI3MjExOA==", "bodyText": "While debugging I found out that TraversalHelper.onGraphComputer() does return false for traversals that start with TraversalVertexProgramSteps, which are obviously graph computer traversals\n\nDo you want to ask or report to the TinkerPop community?", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r511272118", "createdAt": "2020-10-24T02:46:49Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/strategy/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize.strategy;\n+\n+import org.apache.tinkerpop.gremlin.process.computer.traversal.step.map.TraversalVertexProgramStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.query.index.IndexSelectionUtil;\n+import org.janusgraph.graphdb.tinkerpop.optimize.JanusGraphTraversalUtil;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public Set<Class<? extends ProviderOptimizationStrategy>> applyPost() {\n+        Set<Class<? extends ProviderOptimizationStrategy>> postStrategies = new HashSet<>();\n+        postStrategies.add(JanusGraphStepStrategy.class);\n+        postStrategies.add(JanusGraphLocalQueryOptimizerStrategy.class);\n+        return postStrategies;\n+    }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        if (TraversalHelper.onGraphComputer(traversal)\n+            || traversal.getStartStep() instanceof TraversalVertexProgramStep // not caught by TraversalHelper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzNDg2MQ=="}, "originalCommit": {"oid": "3df566ea8648a1e2b835664a8816ca62b48d27f1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI3MjQxOA==", "bodyText": "I see similar handling in JanusGraphLocalQueryOptimizerStrategy, so this should be legitimate.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r511272418", "createdAt": "2020-10-24T02:47:32Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/strategy/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize.strategy;\n+\n+import org.apache.tinkerpop.gremlin.process.computer.traversal.step.map.TraversalVertexProgramStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.query.index.IndexSelectionUtil;\n+import org.janusgraph.graphdb.tinkerpop.optimize.JanusGraphTraversalUtil;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public Set<Class<? extends ProviderOptimizationStrategy>> applyPost() {\n+        Set<Class<? extends ProviderOptimizationStrategy>> postStrategies = new HashSet<>();\n+        postStrategies.add(JanusGraphStepStrategy.class);\n+        postStrategies.add(JanusGraphLocalQueryOptimizerStrategy.class);\n+        return postStrategies;\n+    }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        if (TraversalHelper.onGraphComputer(traversal)\n+            || traversal.getStartStep() instanceof TraversalVertexProgramStep // not caught by TraversalHelper\n+            || !traversal.getGraph().isPresent()) {\n+            return;\n+        }\n+\n+        Graph graph = traversal.getGraph().get();\n+        StandardJanusGraph janusGraph = graph instanceof StandardJanusGraph\n+            ? (StandardJanusGraph) graph\n+            : ((StandardJanusGraphTx) graph).getGraph();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzNjI0Ng=="}, "originalCommit": {"oid": "3df566ea8648a1e2b835664a8816ca62b48d27f1"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTI5NjI1Mw==", "bodyText": "This does not work due to \n  \n    \n      janusgraph/janusgraph-core/src/main/java/org/janusgraph/graphdb/query/vertex/BaseVertexCentricQueryBuilder.java\n    \n    \n        Lines 107 to 111\n      in\n      4f44a1d\n    \n    \n    \n    \n\n        \n          \n           if (type.equals(ImplicitKey.ADJACENT_ID.name())) { \n        \n\n        \n          \n               Preconditions.checkArgument(rel == Cmp.EQUAL, \"Only equality constraints are supported for %s\", type); \n        \n\n        \n          \n               long vertexId = ElementUtils.getVertexId(value); \n        \n\n        \n          \n               Preconditions.checkArgument(vertexId > 0, \"Expected valid vertex id: %s\", value); \n        \n\n        \n          \n               return adjacent(getVertex(vertexId)); \n        \n    \n  \n\n\nYou can see this problem by adding a test case where the adjacent vertex does not exist, e.g. assertNumStep(1, 0, g.V(sv[0]).out().has(\"uniqueId\", 10000), HasStep.class);", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r511296253", "createdAt": "2020-10-24T03:41:38Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/strategy/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize.strategy;\n+\n+import org.apache.tinkerpop.gremlin.process.computer.traversal.step.map.TraversalVertexProgramStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.query.index.IndexSelectionUtil;\n+import org.janusgraph.graphdb.tinkerpop.optimize.JanusGraphTraversalUtil;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() { return INSTANCE; }\n+\n+    @Override\n+    public Set<Class<? extends ProviderOptimizationStrategy>> applyPost() {\n+        Set<Class<? extends ProviderOptimizationStrategy>> postStrategies = new HashSet<>();\n+        postStrategies.add(JanusGraphStepStrategy.class);\n+        postStrategies.add(JanusGraphLocalQueryOptimizerStrategy.class);\n+        return postStrategies;\n+    }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        if (TraversalHelper.onGraphComputer(traversal)\n+            || traversal.getStartStep() instanceof TraversalVertexProgramStep // not caught by TraversalHelper\n+            || !traversal.getGraph().isPresent()) {\n+            return;\n+        }\n+\n+        Graph graph = traversal.getGraph().get();\n+        StandardJanusGraph janusGraph = graph instanceof StandardJanusGraph\n+            ? (StandardJanusGraph) graph\n+            : ((StandardJanusGraphTx) graph).getGraph();\n+\n+        if (!janusGraph.getConfiguration().optimizerBackendAccess()) {\n+            return;\n+        }\n+\n+        TraversalHelper.getStepsOfClass(HasStep.class, traversal)\n+            .forEach(this::optimizeStep);\n+    }\n+\n+    /**\n+     * Determines whether this HasStep can be answered by a unique index and thus, returns either 0 or 1 match\n+     */\n+    @Override\n+    protected boolean isValidStep(HasStep<?> step) {\n+        StandardJanusGraphTx tx = (StandardJanusGraphTx) JanusGraphTraversalUtil.getTx(step.getTraversal());\n+\n+        List<String> givenKeys = step.getHasContainers().stream()\n+            .map(HasContainer::getKey).collect(Collectors.toList());\n+\n+        List<PredicateCondition<String, JanusGraphElement>> constraints = step.getHasContainers().stream()\n+            .filter(hc -> hc.getBiPredicate() == Compare.eq)\n+            .map(hc -> new PredicateCondition<>(hc.getKey(), JanusGraphPredicateUtils.convert(hc.getBiPredicate()), hc.getValue()))\n+            .filter(pc -> tx.validDataType(pc.getValue().getClass()))\n+            .collect(Collectors.toList());\n+        final MultiCondition<JanusGraphElement> conditions = QueryUtil.constraints2QNF(tx, constraints);\n+\n+        // collect all matching indexes\n+        final Set<IndexType> availableIndexes = IndexSelectionUtil.getMatchingIndexes(conditions);\n+\n+        // select only valid unique indexes\n+        return availableIndexes.stream()\n+            .filter(IndexType::isCompositeIndex)\n+            .map(index -> (CompositeIndexType) index)\n+            .filter(cIndex -> cIndex.getCardinality() == Cardinality.SINGLE)\n+            .anyMatch(cIndex -> IndexSelectionUtil.isIndexSatisfiedByGivenKeys(cIndex, givenKeys));\n+    }\n+\n+    private Traversal.Admin<?,Long> generateFilter(Traversal.Admin<?,?> traversal, HasStep<?> originalStep) {\n+        Traversal.Admin filterTraversal = new DefaultGraphTraversal<>(traversal.getGraph().get())\n+            .addStep(\n+                new GraphStep<>(traversal, Vertex.class, true)\n+            );\n+\n+        filterTraversal.addStep(originalStep);\n+        filterTraversal.addStep(new IdStep<>(filterTraversal));\n+        return filterTraversal;\n+    }\n+\n+    private long evaluateFilter(Traversal.Admin<?,Long> filterTraversal) {\n+        // negative IDs are not valid in JanusGraph. Therefore, if the filterTraversal has no result, the newly\n+        // inserted HasStep should not match anything\n+        long determinedId = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4357b4db97f615011ee75554faaf865d8af10748"}, "originalPosition": 132}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4357b4db97f615011ee75554faaf865d8af10748", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/4357b4db97f615011ee75554faaf865d8af10748", "committedDate": "2020-10-16T08:14:14Z", "message": "Add test for OPTIMIZER_BACKEND_ACCESS option\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "ee03a7c487957305e2f4acd424345e322f8627f9", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/ee03a7c487957305e2f4acd424345e322f8627f9", "committedDate": "2020-10-26T07:28:01Z", "message": "Optimize adjacency checks with unique index\nMake optimizer backend access configurable\nAdd test for OPTIMIZER_BACKEND_ACCESS option\nApply suggestions by @li-boxuan\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee03a7c487957305e2f4acd424345e322f8627f9", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/ee03a7c487957305e2f4acd424345e322f8627f9", "committedDate": "2020-10-26T07:28:01Z", "message": "Optimize adjacency checks with unique index\nMake optimizer backend access configurable\nAdd test for OPTIMIZER_BACKEND_ACCESS option\nApply suggestions by @li-boxuan\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "9dd66bb6718e6d255fffc5518b2d5cb359a8ed9a", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/9dd66bb6718e6d255fffc5518b2d5cb359a8ed9a", "committedDate": "2020-10-26T08:00:29Z", "message": "Optimize adjacency checks with unique index\n\nMake optimizer backend access configurable\nAdd test for OPTIMIZER_BACKEND_ACCESS option\nApply suggestions by @li-boxuan\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NTc2ODg4", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-518576888", "createdAt": "2020-10-28T11:48:17Z", "commit": {"oid": "9dd66bb6718e6d255fffc5518b2d5cb359a8ed9a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTo0ODoxN1rOHpmPDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjowMjoxOVrOHpmuCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4MDEwOA==", "bodyText": "NoneStep looks nice! One suggestion: can we avoid using magic number -1 here?\nSince the 'evaluateFilter' method now is quite simple, probably we don't need it anymore:\nif (filterTraversal.hasNext()) {\n        HasContainer hc = new HasContainer(ADJACENT_ID.name(), P.eq(adjacentId));\n        return new HasStep<>(traversal, hc);\n} else {\n        return new NoneStep<>(traversal);\n}", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r513380108", "createdAt": "2020-10-28T11:48:17Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/strategy/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,152 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize.strategy;\n+\n+import org.apache.tinkerpop.gremlin.process.computer.traversal.step.map.TraversalVertexProgramStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.NoneStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.query.index.IndexSelectionUtil;\n+import org.janusgraph.graphdb.tinkerpop.optimize.JanusGraphTraversalUtil;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public Set<Class<? extends ProviderOptimizationStrategy>> applyPost() {\n+        Set<Class<? extends ProviderOptimizationStrategy>> postStrategies = new HashSet<>();\n+        postStrategies.add(JanusGraphStepStrategy.class);\n+        postStrategies.add(JanusGraphLocalQueryOptimizerStrategy.class);\n+        return postStrategies;\n+    }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        if (TraversalHelper.onGraphComputer(traversal) || !traversal.getGraph().isPresent()) {\n+            return;\n+        }\n+\n+        Graph graph = traversal.getGraph().get();\n+        StandardJanusGraph janusGraph = graph instanceof StandardJanusGraph\n+            ? (StandardJanusGraph) graph\n+            : ((StandardJanusGraphTx) graph).getGraph();\n+\n+        if (!janusGraph.getConfiguration().optimizerBackendAccess()) {\n+            return;\n+        }\n+\n+        TraversalHelper.getStepsOfClass(HasStep.class, traversal)\n+            .forEach(this::optimizeStep);\n+    }\n+\n+    /**\n+     * Determines whether this HasStep can be answered by a unique index and thus, returns either 0 or 1 match\n+     */\n+    @Override\n+    protected boolean isValidStep(HasStep<?> step) {\n+        StandardJanusGraphTx tx = (StandardJanusGraphTx) JanusGraphTraversalUtil.getTx(step.getTraversal());\n+\n+        List<String> givenKeys = step.getHasContainers().stream()\n+            .map(HasContainer::getKey).collect(Collectors.toList());\n+\n+        List<PredicateCondition<String, JanusGraphElement>> constraints = step.getHasContainers().stream()\n+            .filter(hc -> hc.getBiPredicate() == Compare.eq)\n+            .map(hc -> new PredicateCondition<>(hc.getKey(), JanusGraphPredicateUtils.convert(hc.getBiPredicate()), hc.getValue()))\n+            .filter(pc -> tx.validDataType(pc.getValue().getClass()))\n+            .collect(Collectors.toList());\n+        final MultiCondition<JanusGraphElement> conditions = QueryUtil.constraints2QNF(tx, constraints);\n+\n+        // collect all matching indexes\n+        final Set<IndexType> availableIndexes = IndexSelectionUtil.getMatchingIndexes(conditions);\n+\n+        // select only valid unique indexes\n+        return availableIndexes.stream()\n+            .filter(IndexType::isCompositeIndex)\n+            .map(index -> (CompositeIndexType) index)\n+            .filter(cIndex -> cIndex.getCardinality() == Cardinality.SINGLE)\n+            .anyMatch(cIndex -> IndexSelectionUtil.isIndexSatisfiedByGivenKeys(cIndex, givenKeys));\n+    }\n+\n+    private Traversal.Admin<?,Long> generateFilter(Traversal.Admin<?,?> traversal, HasStep<?> originalStep) {\n+        Traversal.Admin filterTraversal = new DefaultGraphTraversal<>(traversal.getGraph().get())\n+            .addStep(\n+                new GraphStep<>(traversal, Vertex.class, true)\n+            );\n+\n+        filterTraversal.addStep(originalStep);\n+        filterTraversal.addStep(new IdStep<>(filterTraversal));\n+        return filterTraversal;\n+    }\n+\n+    private long evaluateFilter(Traversal.Admin<?,Long> filterTraversal) {\n+        // negative IDs are not valid in JanusGraph. Therefore, if the filterTraversal has no result, the newly\n+        // inserted HasStep should not match anything\n+        long determinedId = -1;\n+        if (filterTraversal.hasNext()) {\n+            determinedId = filterTraversal.next();\n+        }\n+        return determinedId;\n+    }\n+\n+    @Override\n+    protected FilterStep<Edge> makeFilterByAdjacentIdStep(Traversal.Admin<?, ?> traversal, HasStep<?> originalStep) {\n+        Traversal.Admin<?,Long> filterTraversal = generateFilter(traversal, originalStep);\n+        long adjacentId = evaluateFilter(filterTraversal);\n+        if (adjacentId == -1) {\n+            return new NoneStep<>(traversal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd66bb6718e6d255fffc5518b2d5cb359a8ed9a"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4Mjc4MA==", "bodyText": "Since you have NoneStep put in place, maybe you want to assert NoneStep.class here.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r513382780", "createdAt": "2020-10-28T11:52:57Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-test/src/test/java/org/janusgraph/graphdb/tinkerpop/optimize/AdjacentVertexHasUniquePropertyOptimizerStrategyTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize;\n+\n+import org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.NoOpBarrierStep;\n+import org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration;\n+import org.janusgraph.graphdb.tinkerpop.optimize.strategy.AdjacentVertexHasUniquePropertyOptimizerStrategy;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.janusgraph.graphdb.JanusGraphBaseTest.option;\n+import static org.janusgraph.testutil.JanusGraphAssert.assertNumStep;\n+import static org.janusgraph.testutil.JanusGraphAssert.assertSameResultWithOptimizations;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategyTest extends OptimizerStrategyTest {\n+\n+    private static TraversalStrategy optimizer = AdjacentVertexHasUniquePropertyOptimizerStrategy.instance();\n+\n+    @Test\n+    public void testWithBackendAccess() {\n+        makeSampleGraph();\n+\n+        // AdjacentVertexHasUniquePropertyOptimizer\n+        assertNumStep(1, 0, g.V(sv[0]).out().has(\"uniqueId\", 0), HasStep.class);\n+        assertNumStep(1, 0, g.V(sv[0]).out().barrier(2500).has(\"uniqueId\", 0), NoOpBarrierStep.class);\n+        assertNumStep(1, 1, g.V(sv[0]).barrier(2500).out().barrier(2500).has(\"uniqueId\", 0), NoOpBarrierStep.class);\n+        assertNumStep(1, 0, g.V(sv[0]).out().barrier(2500).has(\"uniqueId\", 0), HasStep.class);\n+        assertNumStep(1, 1, g.V(sv[0]).out().has(\"id\", 0), HasStep.class);\n+        assertNumStep(1, 0, g.V(sv[0]).out().has(\"id\", 0).has(\"uniqueId\", 0), HasStep.class);\n+        assertNumStep(0, 0, g.V(sv[0]).out().has(\"uniqueId\", 10000), HasStep.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd66bb6718e6d255fffc5518b2d5cb359a8ed9a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4ODA0MA==", "bodyText": "Question (not directly related to this line but since you are testing barrier step): is there any difference if your Strategy is put before / after LazyBarrierStrategy?", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r513388040", "createdAt": "2020-10-28T12:02:19Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-test/src/test/java/org/janusgraph/graphdb/tinkerpop/optimize/AdjacentVertexHasUniquePropertyOptimizerStrategyTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize;\n+\n+import org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.NoOpBarrierStep;\n+import org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration;\n+import org.janusgraph.graphdb.tinkerpop.optimize.strategy.AdjacentVertexHasUniquePropertyOptimizerStrategy;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.janusgraph.graphdb.JanusGraphBaseTest.option;\n+import static org.janusgraph.testutil.JanusGraphAssert.assertNumStep;\n+import static org.janusgraph.testutil.JanusGraphAssert.assertSameResultWithOptimizations;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategyTest extends OptimizerStrategyTest {\n+\n+    private static TraversalStrategy optimizer = AdjacentVertexHasUniquePropertyOptimizerStrategy.instance();\n+\n+    @Test\n+    public void testWithBackendAccess() {\n+        makeSampleGraph();\n+\n+        // AdjacentVertexHasUniquePropertyOptimizer\n+        assertNumStep(1, 0, g.V(sv[0]).out().has(\"uniqueId\", 0), HasStep.class);\n+        assertNumStep(1, 0, g.V(sv[0]).out().barrier(2500).has(\"uniqueId\", 0), NoOpBarrierStep.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd66bb6718e6d255fffc5518b2d5cb359a8ed9a"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9dd66bb6718e6d255fffc5518b2d5cb359a8ed9a", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/9dd66bb6718e6d255fffc5518b2d5cb359a8ed9a", "committedDate": "2020-10-26T08:00:29Z", "message": "Optimize adjacency checks with unique index\n\nMake optimizer backend access configurable\nAdd test for OPTIMIZER_BACKEND_ACCESS option\nApply suggestions by @li-boxuan\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "37ba127ce4df64f4c1740c39e545135cb73f89c4", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/37ba127ce4df64f4c1740c39e545135cb73f89c4", "committedDate": "2020-10-29T07:04:41Z", "message": "Optimize adjacency checks with unique index\n\nMake optimizer backend access configurable\nAdd test for OPTIMIZER_BACKEND_ACCESS option\nApply suggestions by @li-boxuan\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NjY3Mzc3", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-519667377", "createdAt": "2020-10-29T13:33:25Z", "commit": {"oid": "37ba127ce4df64f4c1740c39e545135cb73f89c4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzozMzoyNVrOHqb-6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzozMzoyNVrOHqb-6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2MDcxNA==", "bodyText": "What about the case you mentioned in the #2189 (comment), i.e.,\ng.V().has('user', 'name', 'alice').out('knows').as('x').in('knows').has('user', 'name', 'bob').select('x')", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r514260714", "createdAt": "2020-10-29T13:33:25Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-test/src/test/java/org/janusgraph/graphdb/tinkerpop/optimize/AdjacentVertexHasUniquePropertyOptimizerStrategyTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize;\n+\n+import org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.NoneStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.NoOpBarrierStep;\n+import org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration;\n+import org.janusgraph.graphdb.tinkerpop.optimize.strategy.AdjacentVertexHasUniquePropertyOptimizerStrategy;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.janusgraph.graphdb.JanusGraphBaseTest.option;\n+import static org.janusgraph.testutil.JanusGraphAssert.assertNumStep;\n+import static org.janusgraph.testutil.JanusGraphAssert.assertSameResultWithOptimizations;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategyTest extends OptimizerStrategyTest {\n+\n+    private static TraversalStrategy optimizer = AdjacentVertexHasUniquePropertyOptimizerStrategy.instance();\n+\n+    @Test\n+    public void testWithAndWithoutStrategy() {\n+        makeSampleGraph();\n+        assertNumStep(1, 0, g.V(sv[0]).out().has(\"uniqueId\", 0), HasStep.class);\n+        assertNumStep(1, 1, graph.traversal().withoutStrategies(AdjacentVertexHasUniquePropertyOptimizerStrategy.class).V(sv[0]).out().has(\"uniqueId\", 0), HasStep.class);\n+    }\n+\n+    @Test\n+    public void testWithBackendAccess() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ba127ce4df64f4c1740c39e545135cb73f89c4"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37ba127ce4df64f4c1740c39e545135cb73f89c4", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/37ba127ce4df64f4c1740c39e545135cb73f89c4", "committedDate": "2020-10-29T07:04:41Z", "message": "Optimize adjacency checks with unique index\n\nMake optimizer backend access configurable\nAdd test for OPTIMIZER_BACKEND_ACCESS option\nApply suggestions by @li-boxuan\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "dc106920ad633244867937f5e609f748deb4e588", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/dc106920ad633244867937f5e609f748deb4e588", "committedDate": "2020-10-30T07:01:12Z", "message": "Optimize adjacency checks with unique index\n\nMake optimizer backend access configurable\nAdd test for OPTIMIZER_BACKEND_ACCESS option\nApply suggestions by @li-boxuan\nImprove test coverage\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNjQ2MTEw", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-521646110", "createdAt": "2020-11-02T13:53:42Z", "commit": {"oid": "dc106920ad633244867937f5e609f748deb4e588"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNjM0ODQ0", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-560634844", "createdAt": "2021-01-02T12:49:24Z", "commit": {"oid": "dc106920ad633244867937f5e609f748deb4e588"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56bccce8313ca3c624f2dd8b7395a51b8207714b", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/56bccce8313ca3c624f2dd8b7395a51b8207714b", "committedDate": "2021-01-04T05:58:26Z", "message": "Optimize adjacency checks with unique index\n\nMake optimizer backend access configurable\nAdd test for OPTIMIZER_BACKEND_ACCESS option\nApply suggestions by @li-boxuan\nImprove test coverage\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc106920ad633244867937f5e609f748deb4e588", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/dc106920ad633244867937f5e609f748deb4e588", "committedDate": "2020-10-30T07:01:12Z", "message": "Optimize adjacency checks with unique index\n\nMake optimizer backend access configurable\nAdd test for OPTIMIZER_BACKEND_ACCESS option\nApply suggestions by @li-boxuan\nImprove test coverage\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "56bccce8313ca3c624f2dd8b7395a51b8207714b", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/56bccce8313ca3c624f2dd8b7395a51b8207714b", "committedDate": "2021-01-04T05:58:26Z", "message": "Optimize adjacency checks with unique index\n\nMake optimizer backend access configurable\nAdd test for OPTIMIZER_BACKEND_ACCESS option\nApply suggestions by @li-boxuan\nImprove test coverage\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMDE0NzAy", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-561014702", "createdAt": "2021-01-04T13:06:41Z", "commit": {"oid": "56bccce8313ca3c624f2dd8b7395a51b8207714b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzowNjo0MVrOINxC-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzowNjo0MVrOINxC-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNTk3OA==", "bodyText": "Nitpick: The result of this method is always filtered. Instead of filling Set with values and then removing them, we could just pass filter (or predicate) function to this method and filter it directly here without conducting additional pass to filter the resulting set afterwards.", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r551305978", "createdAt": "2021-01-04T13:06:41Z", "author": {"login": "porunov"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/index/IndexSelectionUtil.java", "diffHunk": "@@ -25,4 +40,29 @@ public static boolean indexCoversOrder(MixedIndexType index, OrderList orders) {\n         }\n         return true;\n     }\n+\n+    public static Set<IndexType> getMatchingIndexes(MultiCondition<JanusGraphElement> conditions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56bccce8313ca3c624f2dd8b7395a51b8207714b"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMzk3NTg2", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#pullrequestreview-561397586", "createdAt": "2021-01-04T22:38:32Z", "commit": {"oid": "56bccce8313ca3c624f2dd8b7395a51b8207714b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMjozODozMlrOIODqYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMjozODozMlrOIODqYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYxMDk3Nw==", "bodyText": "I think this check could be placed on a more high level. Instead of always triggering AdjacentVertexHasUniquePropertyOptimizerStrategy.java for each query we can just skip adding this optimization strategy when this check is disabled in JanusGraph. When janusGraph.getConfiguration().optimizerBackendAccess() is false we don't even need to add this optimization to our life-cycle. Unless I miss something", "url": "https://github.com/JanusGraph/janusgraph/pull/2189#discussion_r551610977", "createdAt": "2021-01-04T22:38:32Z", "author": {"login": "porunov"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/tinkerpop/optimize/strategy/AdjacentVertexHasUniquePropertyOptimizerStrategy.java", "diffHunk": "@@ -0,0 +1,141 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.optimize.strategy;\n+\n+import org.apache.tinkerpop.gremlin.process.computer.traversal.step.map.TraversalVertexProgramStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.FilterStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.HasStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.filter.NoneStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.map.IdStep;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.Cardinality;\n+import org.janusgraph.core.JanusGraphElement;\n+import org.janusgraph.graphdb.database.StandardJanusGraph;\n+import org.janusgraph.graphdb.query.JanusGraphPredicateUtils;\n+import org.janusgraph.graphdb.query.QueryUtil;\n+import org.janusgraph.graphdb.query.condition.*;\n+import org.janusgraph.graphdb.query.index.IndexSelectionUtil;\n+import org.janusgraph.graphdb.tinkerpop.optimize.JanusGraphTraversalUtil;\n+import org.janusgraph.graphdb.transaction.StandardJanusGraphTx;\n+import org.janusgraph.graphdb.types.CompositeIndexType;\n+import org.janusgraph.graphdb.types.IndexType;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ADJACENT_ID;\n+import static org.janusgraph.graphdb.types.system.ImplicitKey.ID;\n+\n+/**\n+ * @author Florian Grieskamp (Florian.Grieskamp@gdata.de)\n+ */\n+public class AdjacentVertexHasUniquePropertyOptimizerStrategy\n+    extends AdjacentVertexOptimizerStrategy<HasStep<?>> {\n+\n+    private static final AdjacentVertexHasUniquePropertyOptimizerStrategy INSTANCE =\n+        new AdjacentVertexHasUniquePropertyOptimizerStrategy();\n+\n+    private AdjacentVertexHasUniquePropertyOptimizerStrategy() {}\n+\n+    public static AdjacentVertexHasUniquePropertyOptimizerStrategy instance() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public Set<Class<? extends ProviderOptimizationStrategy>> applyPost() {\n+        Set<Class<? extends ProviderOptimizationStrategy>> postStrategies = new HashSet<>();\n+        postStrategies.add(JanusGraphStepStrategy.class);\n+        postStrategies.add(JanusGraphLocalQueryOptimizerStrategy.class);\n+        return postStrategies;\n+    }\n+\n+    @Override\n+    public void apply(final Traversal.Admin<?, ?> traversal) {\n+        if (TraversalHelper.onGraphComputer(traversal) || !traversal.getGraph().isPresent()) {\n+            return;\n+        }\n+\n+        Graph graph = traversal.getGraph().get();\n+        StandardJanusGraph janusGraph = graph instanceof StandardJanusGraph\n+            ? (StandardJanusGraph) graph\n+            : ((StandardJanusGraphTx) graph).getGraph();\n+\n+        if (!janusGraph.getConfiguration().optimizerBackendAccess()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56bccce8313ca3c624f2dd8b7395a51b8207714b"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4614, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}