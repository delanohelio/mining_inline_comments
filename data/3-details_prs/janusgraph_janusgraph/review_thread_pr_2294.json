{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNTc3NDA4", "number": 2294, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwNzozNTo0N1rOFJHlDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjozMTo0M1rOFJ6fYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTA1Njc3OnYy", "diffSide": "RIGHT", "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPageUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwNzozNTo0N1rOILZkGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxODoxODo1M1rOILtWsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgyNDA4OA==", "bodyText": "Just a nitpick: we could use ByteBuffer.wrap(rawData, offset, Integer.BYTES).order(ByteOrder.BIG_ENDIAN) to explicitly set the endianness, or we could add an assertion to make sure order() is equivalent to BIG_ENDIAN.", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r548824088", "createdAt": "2020-12-25T07:35:47Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPageUtils.java", "diffHunk": "@@ -92,6 +93,30 @@ public static SharedEntryBuffer readFrom(DataInputStream in) throws IOException\n         }\n     }\n \n+    static int computeValPosSize(Entry e)\n+    {\n+        //this assumes that the key size will almost never be > 127 bytes,\n+        // thus most of the time saving 3 out of 4 bytes to store the value position within the buffer\n+        return e.getValuePosition() > 127 ? Integer.BYTES : 1;\n+    }\n+\n+    static int writeValPos(Entry e, byte[] rawData, int offset)\n+    {\n+        if (e.getValuePosition() <= 127) //\"column\" name length fits into one byte - should be 99.99% of cases\n+        {\n+            final byte entryValPos = (byte) e.getValuePosition();\n+            rawData[offset] = entryValPos;\n+            return 1;\n+        }\n+        else //doesn't fit in 1 byte - use full integer\n+        {\n+            //ByteBuffer is in BigENdian mode by default, so if we write -valuePosition,\n+            // 1st byte should have a negative value, indicating full int\n+            ByteBuffer.wrap(rawData, offset, Integer.BYTES).asIntBuffer().put(-e.getValuePosition());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE0ODMzOA==", "bodyText": "done", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r549148338", "createdAt": "2020-12-27T18:18:53Z", "author": {"login": "dk-github"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPageUtils.java", "diffHunk": "@@ -92,6 +93,30 @@ public static SharedEntryBuffer readFrom(DataInputStream in) throws IOException\n         }\n     }\n \n+    static int computeValPosSize(Entry e)\n+    {\n+        //this assumes that the key size will almost never be > 127 bytes,\n+        // thus most of the time saving 3 out of 4 bytes to store the value position within the buffer\n+        return e.getValuePosition() > 127 ? Integer.BYTES : 1;\n+    }\n+\n+    static int writeValPos(Entry e, byte[] rawData, int offset)\n+    {\n+        if (e.getValuePosition() <= 127) //\"column\" name length fits into one byte - should be 99.99% of cases\n+        {\n+            final byte entryValPos = (byte) e.getValuePosition();\n+            rawData[offset] = entryValPos;\n+            return 1;\n+        }\n+        else //doesn't fit in 1 byte - use full integer\n+        {\n+            //ByteBuffer is in BigENdian mode by default, so if we write -valuePosition,\n+            // 1st byte should have a negative value, indicating full int\n+            ByteBuffer.wrap(rawData, offset, Integer.BYTES).asIntBuffer().put(-e.getValuePosition());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgyNDA4OA=="}, "originalCommit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTA3MzkzOnYy", "diffSide": "RIGHT", "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPageUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwNzo0OTozN1rOILZs7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNzowODoyM1rOIMT9Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgyNjM0OA==", "bodyText": "I think if you can change the signature of this method into\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static int computeValPosSize(Entry e)\n          \n          \n            \n                static int computeValPosSize(int valPos)\n          \n      \n    \n    \n  \n\nthen it could be reused in BufferPage.java.", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r548826348", "createdAt": "2020-12-25T07:49:37Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPageUtils.java", "diffHunk": "@@ -92,6 +93,30 @@ public static SharedEntryBuffer readFrom(DataInputStream in) throws IOException\n         }\n     }\n \n+    static int computeValPosSize(Entry e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE0NzgwNg==", "bodyText": "I could change it here, but not sure how it could help reuse it in BufferPage - here we have an \"unpacked\" entry and decide how we are going to pack, there we get the packed entry and need to find out how it WAS packed - so it needs to take the byte array etc...", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r549147806", "createdAt": "2020-12-27T18:13:39Z", "author": {"login": "dk-github"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPageUtils.java", "diffHunk": "@@ -92,6 +93,30 @@ public static SharedEntryBuffer readFrom(DataInputStream in) throws IOException\n         }\n     }\n \n+    static int computeValPosSize(Entry e)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgyNjM0OA=="}, "originalCommit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE5NzgxNw==", "bodyText": "What I noticed is, in BufferPage.java, you always retrieve valPos before retrieving valPosSize. Since you have valPos available, you could call BufferPageUtils::computeValPosSize(int valPos) to retrieve valPosSize.\nThe caller in this class should then call computeValPosSize((array[start+i]).getValuePosition()) to retrieve valPosSize.", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r549197817", "createdAt": "2020-12-28T02:55:07Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPageUtils.java", "diffHunk": "@@ -92,6 +93,30 @@ public static SharedEntryBuffer readFrom(DataInputStream in) throws IOException\n         }\n     }\n \n+    static int computeValPosSize(Entry e)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgyNjM0OA=="}, "originalCommit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc4MDc4Mg==", "bodyText": "ok, got you now - done", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r549780782", "createdAt": "2020-12-29T17:08:23Z", "author": {"login": "dk-github"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPageUtils.java", "diffHunk": "@@ -92,6 +93,30 @@ public static SharedEntryBuffer readFrom(DataInputStream in) throws IOException\n         }\n     }\n \n+    static int computeValPosSize(Entry e)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgyNjM0OA=="}, "originalCommit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTEwNTAzOnYy", "diffSide": "RIGHT", "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwODoxNjoxOFrOILZ9eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxODoxOTowNVrOILtW0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgzMDU4Ng==", "bodyText": "It took me some time to understand this method thoroughly. I think the usage of entryBuffer here is not straight-forward to understand, since you are kind of mixing the two use cases (reading and moving cursor v.s. purely reading) together in one method. Would be helpful if you can add some javadoc.", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r548830586", "createdAt": "2020-12-25T08:16:18Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPage.java", "diffHunk": "@@ -111,24 +113,64 @@ private int getEntryEndOffset(final int index) {\n         }\n     }\n \n+    static int readValPos(byte[] rawData, int entryOffset, ByteBuffer entryBuffer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE0ODM3MA==", "bodyText": "done", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r549148370", "createdAt": "2020-12-27T18:19:05Z", "author": {"login": "dk-github"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPage.java", "diffHunk": "@@ -111,24 +113,64 @@ private int getEntryEndOffset(final int index) {\n         }\n     }\n \n+    static int readValPos(byte[] rawData, int entryOffset, ByteBuffer entryBuffer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgzMDU4Ng=="}, "originalCommit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM5ODA4OnYy", "diffSide": "RIGHT", "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjozMTo0M1rOIMcJjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjozMTo0M1rOIMcJjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNTAyMw==", "bodyText": "nitpick: don't put the curly brace on a new line, to be consistent with the convention used in the codebase.", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r549915023", "createdAt": "2020-12-30T02:31:43Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPage.java", "diffHunk": "@@ -111,24 +113,62 @@ private int getEntryEndOffset(final int index) {\n         }\n     }\n \n+    /**\n+     * This figures out how the \"valuePosition\" was stored (i.e. 1 byte or 4), reads it correctly,\n+     * and leaves the byte buffer (if given) at the beginning of the key value\n+     */\n+    static int readValPos(byte[] rawData, int entryOffset, ByteBuffer entryBuffer)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2c46e3b346d781e04e4dcc6e28c7ad531c4e6dd"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1430, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}