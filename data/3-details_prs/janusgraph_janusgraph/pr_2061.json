{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NDM1NDg4", "number": 2061, "title": "Add support for graph binary", "bodyText": "Fixes #1564\nSigned-off-by: Jan Jansen jan.jansen@gdata.de\n\nThank you for contributing to JanusGraph!\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n Is there an issue associated with this PR? Is it referenced in the commit message?\n Does your PR body contain #xyz where xyz is the issue number you are trying to resolve?\n Has your PR been rebased against the latest commit within the target branch (typically master)?\n Is your initial contribution a single, squashed commit?\n\nFor code changes:\n\n Have you written and/or updated unit tests to verify your changes?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE.txt file, including the main LICENSE.txt file in the root of this repository?\n If applicable, have you updated the NOTICE.txt file, including the main NOTICE.txt file found in the root of this repository?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n If this PR is a documentation-only change, have you added a [doc only]\ntag to the first line of your commit message to avoid spending CPU cycles in\nTravis CI when no code, tests, or build configuration are modified?\n\nNote:\nPlease ensure that once the PR is submitted, you check Travis CI for build issues and submit an update to your PR as soon as possible.", "createdAt": "2020-03-26T21:33:35Z", "url": "https://github.com/JanusGraph/janusgraph/pull/2061", "merged": true, "mergeCommit": {"oid": "1cb4b6e849e3f9c2802722fe7f84c760cd471429"}, "closed": true, "closedAt": "2020-04-16T06:54:27Z", "author": {"login": "farodin91"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRjipdgBqjMxNzAyNjE2NjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX7f8lABqjMyMzY1MjM3ODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13ab20373274b5398931435df11a044d92a1544e", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/13ab20373274b5398931435df11a044d92a1544e", "committedDate": "2020-03-26T21:31:26Z", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}, "afterCommit": {"oid": "9df0e5eb8ab11d52e192ae3896862f2063d50e6a", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/9df0e5eb8ab11d52e192ae3896862f2063d50e6a", "committedDate": "2020-03-26T22:06:58Z", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9df0e5eb8ab11d52e192ae3896862f2063d50e6a", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/9df0e5eb8ab11d52e192ae3896862f2063d50e6a", "committedDate": "2020-03-26T22:06:58Z", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}, "afterCommit": {"oid": "fdcc61232f9527d743c849b473e1d9266a52f1df", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/fdcc61232f9527d743c849b473e1d9266a52f1df", "committedDate": "2020-03-26T22:24:00Z", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdcc61232f9527d743c849b473e1d9266a52f1df", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/fdcc61232f9527d743c849b473e1d9266a52f1df", "committedDate": "2020-03-26T22:24:00Z", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}, "afterCommit": {"oid": "8fbab2a9b94b31994d8a10f48bf96f14d672a63f", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/8fbab2a9b94b31994d8a10f48bf96f14d672a63f", "committedDate": "2020-03-26T22:26:52Z", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fbab2a9b94b31994d8a10f48bf96f14d672a63f", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/8fbab2a9b94b31994d8a10f48bf96f14d672a63f", "committedDate": "2020-03-26T22:26:52Z", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}, "afterCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/dfb96894b77bc80d04f610c6bf91e23b79bfc92d", "committedDate": "2020-04-09T11:41:01Z", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNjgzNDM5", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#pullrequestreview-390683439", "createdAt": "2020-04-09T10:43:26Z", "commit": {"oid": "8fbab2a9b94b31994d8a10f48bf96f14d672a63f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDo0MzoyN1rOGDTbng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo0NToyOFrOGDcAfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExNzI3OA==", "bodyText": "Please stay consistent here with the casing of janusgraph. I would use only lower case letters here as we also do it like that in the package name.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406117278", "createdAt": "2020-04-09T10:43:27Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-driver/src/main/java/org/janusgraph/graphdb/tinkerpop/io/binary/GraphBinaryType.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+public enum GraphBinaryType {\n+    Geoshape(0x1000, \"janusgraph.Geoshape\"),\n+    RelationIdentifier(0x1001, \"janusGraph.RelationIdentifier\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fbab2a9b94b31994d8a10f48bf96f14d672a63f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExOTAwMQ==", "bodyText": "You copied this 1:1 from the TinkerPop sample, right?\nThis exception message however doesn't make much sense as you actually expect a custom_type_info, but one that is supported by the current type serializer.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406119001", "createdAt": "2020-04-09T10:46:56Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-driver/src/main/java/org/janusgraph/graphdb/tinkerpop/io/binary/JanusGraphTypeSerializer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import org.apache.commons.lang.SerializationException;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.DataType;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+import org.apache.tinkerpop.gremlin.structure.io.binary.types.CustomTypeSerializer;\n+\n+import java.io.IOException;\n+\n+public abstract class JanusGraphTypeSerializer<T> implements CustomTypeSerializer<T> {\n+\n+    private GraphBinaryType type;\n+\n+    protected JanusGraphTypeSerializer(GraphBinaryType type){\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public String getTypeName() {\n+        return type.getTypeName();\n+    }\n+\n+    @Override\n+    public DataType getDataType() {\n+        return DataType.CUSTOM;\n+    }\n+\n+    @Override\n+    public T read(Buffer buffer, GraphBinaryReader context) throws IOException {\n+        // {custom type info}, {value_flag} and {value}\n+        // No custom_type_info\n+        if (buffer.readInt() != type.getTypeId()) {\n+            throw new SerializationException(\"{custom_type_info} should not be provided for this custom type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fbab2a9b94b31994d8a10f48bf96f14d672a63f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyMzE0NQ==", "bodyText": "The header should come before the imports.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406123145", "createdAt": "2020-04-09T10:55:36Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-driver/src/main/java/org/janusgraph/graphdb/tinkerpop/io/binary/JanusGraphTypeSerializer.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import org.apache.commons.lang.SerializationException;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.DataType;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+// Copyright 2020 JanusGraph Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fbab2a9b94b31994d8a10f48bf96f14d672a63f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzNTY3Mg==", "bodyText": "(nitpick) I would prefer not to use random data in unit tests as it makes it slightly harder to debug in my opinion as I cannot see the expected values directly in the code. However, this is just my personal opinion. So, feel free to ignore it if you disagree.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406135672", "createdAt": "2020-04-09T11:22:15Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/io/binary/RelationIdentifierGraphBinarySerializerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import org.apache.tinkerpop.gremlin.driver.message.ResponseMessage;\n+import org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1;\n+import org.apache.tinkerpop.gremlin.driver.ser.NettyBufferFactory;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.TypeSerializerRegistry;\n+import org.janusgraph.graphdb.relations.RelationIdentifier;\n+import org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.tinkerpop.gremlin.driver.ser.AbstractMessageSerializer.TOKEN_IO_REGISTRIES;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class RelationIdentifierGraphBinarySerializerTest {\n+\n+    private static final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n+    private static final NettyBufferFactory bufferFactory = new NettyBufferFactory();\n+\n+    @Test\n+    public void shouldCustomSerialization() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1(\n+            TypeSerializerRegistry.build().addCustomType(RelationIdentifier.class, new RelationIdentifierGraphBinarySerializer()).create());\n+        assertRelationIdentifier(serializer);\n+    }\n+\n+    @Test\n+    public void shouldSerializeViaIoRegistry() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1();\n+        final Map<String,Object> config = new HashMap<>();\n+        config.put(TOKEN_IO_REGISTRIES, Collections.singletonList(JanusGraphIoRegistry.class.getName()));\n+        serializer.configure(config, Collections.emptyMap());\n+\n+        assertRelationIdentifier(serializer);\n+    }\n+\n+    @Test\n+    public void readValueAndWriteValueShouldBeSymmetric() throws IOException {\n+        final TypeSerializerRegistry registry = TypeSerializerRegistry.build()\n+            .addCustomType(RelationIdentifier.class, new RelationIdentifierGraphBinarySerializer()).create();\n+        final GraphBinaryReader reader = new GraphBinaryReader(registry);\n+        final GraphBinaryWriter writer = new GraphBinaryWriter(registry);\n+\n+        final RelationIdentifier relationIdentifier = createRelationIdentifier();\n+\n+        for (boolean nullable: new boolean[] { true, false }) {\n+            final Buffer buffer = bufferFactory.create(allocator.buffer());\n+            writer.writeValue(relationIdentifier, buffer, nullable);\n+            final RelationIdentifier actual = reader.readValue(buffer, RelationIdentifier.class, nullable);\n+\n+            assertEquals(actual.toString(), relationIdentifier.toString());\n+            buffer.release();\n+        }\n+    }\n+\n+    @NotNull\n+    private RelationIdentifier createRelationIdentifier() {\n+        Random random = new Random();\n+        return new RelationIdentifier(random.nextInt(1000), random.nextInt(1000), random.nextInt(1000), random.nextInt(1000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fbab2a9b94b31994d8a10f48bf96f14d672a63f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3NjcxMQ==", "bodyText": "Don't you think that it would be a good idea to test all geoshapes like this? I know that you didn't add any specific logic for the individual shapes, but I think we should make sure that everyone of them actually works.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406176711", "createdAt": "2020-04-09T12:43:52Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/io/binary/GeoshapeGraphBinarySerializerTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import org.apache.tinkerpop.gremlin.driver.message.ResponseMessage;\n+import org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1;\n+import org.apache.tinkerpop.gremlin.driver.ser.NettyBufferFactory;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.TypeSerializerRegistry;\n+import org.janusgraph.core.attribute.Geoshape;\n+import org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.tinkerpop.gremlin.driver.ser.AbstractMessageSerializer.TOKEN_IO_REGISTRIES;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class GeoshapeGraphBinarySerializerTest {\n+    private static final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n+    private static final NettyBufferFactory bufferFactory = new NettyBufferFactory();\n+\n+    @Test\n+    public void shouldCustomSerialization() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1(\n+            TypeSerializerRegistry.build().addCustomType(Geoshape.class, new GeoshapeGraphBinarySerializer()).create());\n+\n+        assertPoint(serializer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3NzY2OA==", "bodyText": "(nitpick) I would use one test per shape as each test should only test one thing in my opinion. That makes it easier to spot directly what is not working if a test fails. If this test fails in assertPoint, we won't know whether geoshape serialization is broken completely or only for points.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406177668", "createdAt": "2020-04-09T12:45:37Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/io/binary/GeoshapeGraphBinarySerializerTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import org.apache.tinkerpop.gremlin.driver.message.ResponseMessage;\n+import org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1;\n+import org.apache.tinkerpop.gremlin.driver.ser.NettyBufferFactory;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.TypeSerializerRegistry;\n+import org.janusgraph.core.attribute.Geoshape;\n+import org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.apache.tinkerpop.gremlin.driver.ser.AbstractMessageSerializer.TOKEN_IO_REGISTRIES;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class GeoshapeGraphBinarySerializerTest {\n+    private static final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n+    private static final NettyBufferFactory bufferFactory = new NettyBufferFactory();\n+\n+    @Test\n+    public void shouldCustomSerialization() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1(\n+            TypeSerializerRegistry.build().addCustomType(Geoshape.class, new GeoshapeGraphBinarySerializer()).create());\n+\n+        assertPoint(serializer);\n+        assertCircle(serializer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMDg2MA==", "bodyText": "I think it would be good to have some exception message explaining that an unsupported predicate name was used and that also includes that predicate name.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406210860", "createdAt": "2020-04-09T13:39:04Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-driver/src/main/java/org/janusgraph/graphdb/tinkerpop/JanusGraphPSerializer.java", "diffHunk": "@@ -129,9 +74,7 @@ public static P createPredicateWithValue(String predicate, Object value) throws\n             case \"textRegex\":\n                 return Text.textRegex(value);\n             default:\n-                return (P) P.class.getMethod(predicate, Object.class).invoke(null, value);\n-            }\n+                throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxODYzNw==", "bodyText": "Is the problem here that the serialization is not compatible with the current janusgraph/janusgraph:latest image from Docker Hub? Do you mean that with this note in the release notes?\n\nGraphSON and Gryo Serialization has changed so both version need to be aligned\n\nIf this breaks serialization completely with all versions <0.6.0, then we definitely need a bigger warning in the release notes.\nApart from that, can't we fix this here by building the image directly during the build for these tests?", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406218637", "createdAt": "2020-04-09T13:50:33Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/JanusGraphSerializerBaseIT.java", "diffHunk": "@@ -91,6 +92,7 @@ public void testRelationIdentifier(TestInfo testInfo) {\n     }\n \n     @Test\n+    @Disabled(\"JanusGraphPredicate serialization won't work an older version of JanusGraph.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMTM2Mg==", "bodyText": "geoshape should have a more generic name, like predicate for example, as you also use this to test text predicates.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406221362", "createdAt": "2020-04-09T13:54:22Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/io/binary/JanusGraphPGraphBinarySerializerTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import org.apache.tinkerpop.gremlin.driver.message.ResponseMessage;\n+import org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1;\n+import org.apache.tinkerpop.gremlin.driver.ser.NettyBufferFactory;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.TypeSerializerRegistry;\n+import org.janusgraph.core.attribute.Geo;\n+import org.janusgraph.core.attribute.Geoshape;\n+import org.janusgraph.graphdb.tinkerpop.io.JanusGraphP;\n+import org.janusgraph.core.attribute.Text;\n+import org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.apache.tinkerpop.gremlin.driver.ser.AbstractMessageSerializer.TOKEN_IO_REGISTRIES;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class JanusGraphPGraphBinarySerializerTest {\n+\n+    private static final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n+    private static final NettyBufferFactory bufferFactory = new NettyBufferFactory();\n+\n+    @Test\n+    public void shouldCustomSerialization() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1(\n+            TypeSerializerRegistry.build()\n+                .addCustomType(JanusGraphP.class, new JanusGraphPBinarySerializer())\n+                .addCustomType(Geoshape.class, new GeoshapeGraphBinarySerializer())\n+                .create());\n+\n+        assertTextContains(serializer);\n+        assertGeoIntersect(serializer);\n+    }\n+\n+    @Test\n+    public void shouldSerializePersonViaIoRegistry() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1();\n+        final Map<String, Object> config = new HashMap<>();\n+        config.put(TOKEN_IO_REGISTRIES, Collections.singletonList(JanusGraphIoRegistry.class.getName()));\n+        serializer.configure(config, Collections.emptyMap());\n+\n+        assertTextContains(serializer);\n+        assertGeoIntersect(serializer);\n+    }\n+\n+    @Test\n+    public void readValueAndWriteValueShouldBeSymmetric() throws IOException {\n+        final TypeSerializerRegistry registry = TypeSerializerRegistry.build()\n+            .addCustomType(JanusGraphP.class, new JanusGraphPBinarySerializer()).create();\n+        final GraphBinaryReader reader = new GraphBinaryReader(registry);\n+        final GraphBinaryWriter writer = new GraphBinaryWriter(registry);\n+\n+        final JanusGraphP relationIdentifier = Text.textContains(\"test\");\n+\n+        for (boolean nullable : new boolean[]{true, false}) {\n+            final Buffer buffer = bufferFactory.create(allocator.buffer());\n+            writer.writeValue(relationIdentifier, buffer, nullable);\n+            final JanusGraphP actual = reader.readValue(buffer, JanusGraphP.class, nullable);\n+\n+            assertEquals(actual.toString(), relationIdentifier.toString());\n+            buffer.release();\n+        }\n+    }\n+\n+    private void assertTextContains(final GraphBinaryMessageSerializerV1 serializer) throws IOException {\n+        final JanusGraphP janusGraphP = Text.textContains(\"test\");\n+        assertJanusGraphP(serializer, janusGraphP);\n+    }\n+\n+    private void assertGeoIntersect(final GraphBinaryMessageSerializerV1 serializer) throws IOException {\n+        final JanusGraphP janusGraphP = Geo.geoIntersect(Geoshape.circle(37.97, 23.72, 50));\n+        assertJanusGraphP(serializer, janusGraphP);\n+    }\n+\n+    private void assertJanusGraphP(final GraphBinaryMessageSerializerV1 serializer, final JanusGraphP geoshape) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMjIyNw==", "bodyText": "(nitpick) Please also change the variable name here.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406222227", "createdAt": "2020-04-09T13:55:30Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/io/binary/JanusGraphPGraphBinarySerializerTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.tinkerpop.io.binary;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import org.apache.tinkerpop.gremlin.driver.message.ResponseMessage;\n+import org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1;\n+import org.apache.tinkerpop.gremlin.driver.ser.NettyBufferFactory;\n+import org.apache.tinkerpop.gremlin.structure.io.Buffer;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryReader;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.GraphBinaryWriter;\n+import org.apache.tinkerpop.gremlin.structure.io.binary.TypeSerializerRegistry;\n+import org.janusgraph.core.attribute.Geo;\n+import org.janusgraph.core.attribute.Geoshape;\n+import org.janusgraph.graphdb.tinkerpop.io.JanusGraphP;\n+import org.janusgraph.core.attribute.Text;\n+import org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.apache.tinkerpop.gremlin.driver.ser.AbstractMessageSerializer.TOKEN_IO_REGISTRIES;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class JanusGraphPGraphBinarySerializerTest {\n+\n+    private static final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n+    private static final NettyBufferFactory bufferFactory = new NettyBufferFactory();\n+\n+    @Test\n+    public void shouldCustomSerialization() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1(\n+            TypeSerializerRegistry.build()\n+                .addCustomType(JanusGraphP.class, new JanusGraphPBinarySerializer())\n+                .addCustomType(Geoshape.class, new GeoshapeGraphBinarySerializer())\n+                .create());\n+\n+        assertTextContains(serializer);\n+        assertGeoIntersect(serializer);\n+    }\n+\n+    @Test\n+    public void shouldSerializePersonViaIoRegistry() throws IOException {\n+        final GraphBinaryMessageSerializerV1 serializer = new GraphBinaryMessageSerializerV1();\n+        final Map<String, Object> config = new HashMap<>();\n+        config.put(TOKEN_IO_REGISTRIES, Collections.singletonList(JanusGraphIoRegistry.class.getName()));\n+        serializer.configure(config, Collections.emptyMap());\n+\n+        assertTextContains(serializer);\n+        assertGeoIntersect(serializer);\n+    }\n+\n+    @Test\n+    public void readValueAndWriteValueShouldBeSymmetric() throws IOException {\n+        final TypeSerializerRegistry registry = TypeSerializerRegistry.build()\n+            .addCustomType(JanusGraphP.class, new JanusGraphPBinarySerializer()).create();\n+        final GraphBinaryReader reader = new GraphBinaryReader(registry);\n+        final GraphBinaryWriter writer = new GraphBinaryWriter(registry);\n+\n+        final JanusGraphP relationIdentifier = Text.textContains(\"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyNzAzNA==", "bodyText": "(nitpick) Again, please change the name of relationIdentifier.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406227034", "createdAt": "2020-04-09T14:02:35Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-driver/src/main/java/org/janusgraph/graphdb/tinkerpop/io/graphson/JanusGraphSONModule.java", "diffHunk": "@@ -144,32 +145,46 @@ public RelationIdentifier createObject(Map data) {\n         }\n     }\n \n-    public static class JanusGraphPDeserializerV2d0 extends StdDeserializer<P> {\n+    public static class JanusGraphPSerializerV2d0 extends StdSerializer<JanusGraphP> {\n+        public JanusGraphPSerializerV2d0() {\n+            super(JanusGraphP.class);\n+        }\n \n-        public JanusGraphPDeserializerV2d0() {\n-            super(P.class);\n+        @Override\n+        public void serialize(final JanusGraphP relationIdentifier, final JsonGenerator jsonGenerator,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MTQ5OQ==", "bodyText": "Any reason not to simply change the serializer in remote.yaml? GraphBinary will replace Gryo in TinkerPop which is what we currently use in remote.yaml. I think that we should therefore also stop using that and make GraphBinary the new default.\nOr do you want to wait a bit and then make this maybe the default in version 0.7.0?", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406241499", "createdAt": "2020-04-09T14:23:05Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-dist/src/assembly/static/conf/remote-graph-binary.yaml", "diffHunk": "@@ -0,0 +1,17 @@\n+# Copyright 2020 JanusGraph Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MzU3Ng==", "bodyText": "gremlin-server-cql-es.yaml has been added on master and also needs the new serializer.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406243576", "createdAt": "2020-04-09T14:25:54Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-dist/src/assembly/static/conf/gremlin-server/gremlin-server-berkeleyje.yaml", "diffHunk": "@@ -26,6 +26,8 @@ scriptEngines: {\n                org.apache.tinkerpop.gremlin.jsr223.ImportGremlinPlugin: {classImports: [java.lang.Math], methodImports: [java.lang.Math#*]},\n                org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin: {files: [scripts/empty-sample.groovy]}}}}\n serializers:\n+  - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1, config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NTM3OA==", "bodyText": "I think this should be: Serialization of JanusGraph predicates has changed", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406245378", "createdAt": "2020-04-09T14:28:26Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -27,6 +27,54 @@ use the latest versions of the software.\n \n ## Release Notes\n \n+### Version 0.6.0 (Release Date: X, 2020)\n+\n+```xml tab='Maven'\n+<dependency>\n+    <groupId>org.janusgraph</groupId>\n+    <artifactId>janusgraph-core</artifactId>\n+    <version>0.6.0</version>\n+</dependency>\n+```\n+\n+```groovy tab='Gradle'\n+compile \"org.janusgraph:janusgraph-core:0.6.0\"\n+```\n+\n+**Tested Compatibility:**\n+\n+* Apache Cassandra 2.2.10, 3.0.14, 3.11.0\n+* Apache HBase 1.2.6, 1.3.1, 1.4.10, 2.1.5\n+* Google Bigtable 1.3.0, 1.4.0, 1.5.0, 1.6.0, 1.7.0, 1.8.0, 1.9.0, 1.10.0, 1.11.0\n+* Oracle BerkeleyJE 7.5.11\n+* Elasticsearch 6.0.1, 6.6.0, 7.6.1\n+* Apache Lucene 7.0.0\n+* Apache Solr 7.0.0\n+* Apache TinkerPop 3.4.6\n+* Java 1.8\n+\n+For more information on features and bug fixes in 0.6.0, see the GitHub milestone:\n+\n+-   <https://github.com/JanusGraph/janusgraph/milestone/17?closed=1>\n+\n+#### Upgrade Instructions\n+\n+##### Serialization JanusGraphPredicates has changed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1Mjk0NQ==", "bodyText": "I commented on this already where you disabled a test that seems to be related to this, but this really needs some more explanation in my opinion to make it clear that serialization won't work between client and server if either is still on a version lower than 0.6.0 when the other is already updated to 0.6.0.\nHow about something like this:\n\nThe serialization of JanusGraph predicates has changed in this version for both GraphSON and Gryo. It is therefore necessary to update both the client and the server to this version in parallel as the server will not be able to deserialize a JanusGraph predicate that was serialized by a client prior to version 0.6.0 once it was updated to version 0.6.0.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406252945", "createdAt": "2020-04-09T14:38:54Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -27,6 +27,54 @@ use the latest versions of the software.\n \n ## Release Notes\n \n+### Version 0.6.0 (Release Date: X, 2020)\n+\n+```xml tab='Maven'\n+<dependency>\n+    <groupId>org.janusgraph</groupId>\n+    <artifactId>janusgraph-core</artifactId>\n+    <version>0.6.0</version>\n+</dependency>\n+```\n+\n+```groovy tab='Gradle'\n+compile \"org.janusgraph:janusgraph-core:0.6.0\"\n+```\n+\n+**Tested Compatibility:**\n+\n+* Apache Cassandra 2.2.10, 3.0.14, 3.11.0\n+* Apache HBase 1.2.6, 1.3.1, 1.4.10, 2.1.5\n+* Google Bigtable 1.3.0, 1.4.0, 1.5.0, 1.6.0, 1.7.0, 1.8.0, 1.9.0, 1.10.0, 1.11.0\n+* Oracle BerkeleyJE 7.5.11\n+* Elasticsearch 6.0.1, 6.6.0, 7.6.1\n+* Apache Lucene 7.0.0\n+* Apache Solr 7.0.0\n+* Apache TinkerPop 3.4.6\n+* Java 1.8\n+\n+For more information on features and bug fixes in 0.6.0, see the GitHub milestone:\n+\n+-   <https://github.com/JanusGraph/janusgraph/milestone/17?closed=1>\n+\n+#### Upgrade Instructions\n+\n+##### Serialization JanusGraphPredicates has changed\n+\n+GraphSON and Gryo Serialization has changed so both version need to be aligned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MzEyOQ==", "bodyText": "supported", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406253129", "createdAt": "2020-04-09T14:39:09Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -27,6 +27,54 @@ use the latest versions of the software.\n \n ## Release Notes\n \n+### Version 0.6.0 (Release Date: X, 2020)\n+\n+```xml tab='Maven'\n+<dependency>\n+    <groupId>org.janusgraph</groupId>\n+    <artifactId>janusgraph-core</artifactId>\n+    <version>0.6.0</version>\n+</dependency>\n+```\n+\n+```groovy tab='Gradle'\n+compile \"org.janusgraph:janusgraph-core:0.6.0\"\n+```\n+\n+**Tested Compatibility:**\n+\n+* Apache Cassandra 2.2.10, 3.0.14, 3.11.0\n+* Apache HBase 1.2.6, 1.3.1, 1.4.10, 2.1.5\n+* Google Bigtable 1.3.0, 1.4.0, 1.5.0, 1.6.0, 1.7.0, 1.8.0, 1.9.0, 1.10.0, 1.11.0\n+* Oracle BerkeleyJE 7.5.11\n+* Elasticsearch 6.0.1, 6.6.0, 7.6.1\n+* Apache Lucene 7.0.0\n+* Apache Solr 7.0.0\n+* Apache TinkerPop 3.4.6\n+* Java 1.8\n+\n+For more information on features and bug fixes in 0.6.0, see the GitHub milestone:\n+\n+-   <https://github.com/JanusGraph/janusgraph/milestone/17?closed=1>\n+\n+#### Upgrade Instructions\n+\n+##### Serialization JanusGraphPredicates has changed\n+\n+GraphSON and Gryo Serialization has changed so both version need to be aligned.\n+\n+##### GraphBinary is now support", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MzM5Mw==", "bodyText": "add (without -ed)", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406253393", "createdAt": "2020-04-09T14:39:30Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -27,6 +27,54 @@ use the latest versions of the software.\n \n ## Release Notes\n \n+### Version 0.6.0 (Release Date: X, 2020)\n+\n+```xml tab='Maven'\n+<dependency>\n+    <groupId>org.janusgraph</groupId>\n+    <artifactId>janusgraph-core</artifactId>\n+    <version>0.6.0</version>\n+</dependency>\n+```\n+\n+```groovy tab='Gradle'\n+compile \"org.janusgraph:janusgraph-core:0.6.0\"\n+```\n+\n+**Tested Compatibility:**\n+\n+* Apache Cassandra 2.2.10, 3.0.14, 3.11.0\n+* Apache HBase 1.2.6, 1.3.1, 1.4.10, 2.1.5\n+* Google Bigtable 1.3.0, 1.4.0, 1.5.0, 1.6.0, 1.7.0, 1.8.0, 1.9.0, 1.10.0, 1.11.0\n+* Oracle BerkeleyJE 7.5.11\n+* Elasticsearch 6.0.1, 6.6.0, 7.6.1\n+* Apache Lucene 7.0.0\n+* Apache Solr 7.0.0\n+* Apache TinkerPop 3.4.6\n+* Java 1.8\n+\n+For more information on features and bug fixes in 0.6.0, see the GitHub milestone:\n+\n+-   <https://github.com/JanusGraph/janusgraph/milestone/17?closed=1>\n+\n+#### Upgrade Instructions\n+\n+##### Serialization JanusGraphPredicates has changed\n+\n+GraphSON and Gryo Serialization has changed so both version need to be aligned.\n+\n+##### GraphBinary is now support\n+\n+If you want to use GraphBinary, you have to add following to the `gremlin-server.yaml` after the keyword `serializers`. \n+This will added the support on the server site. For client site, you have to checkout based on the driver.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1Mzg5NQ==", "bodyText": "checkout based on the driver <- What does that mean? What if I'm using janusgraph-driver?", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406253895", "createdAt": "2020-04-09T14:40:08Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -27,6 +27,54 @@ use the latest versions of the software.\n \n ## Release Notes\n \n+### Version 0.6.0 (Release Date: X, 2020)\n+\n+```xml tab='Maven'\n+<dependency>\n+    <groupId>org.janusgraph</groupId>\n+    <artifactId>janusgraph-core</artifactId>\n+    <version>0.6.0</version>\n+</dependency>\n+```\n+\n+```groovy tab='Gradle'\n+compile \"org.janusgraph:janusgraph-core:0.6.0\"\n+```\n+\n+**Tested Compatibility:**\n+\n+* Apache Cassandra 2.2.10, 3.0.14, 3.11.0\n+* Apache HBase 1.2.6, 1.3.1, 1.4.10, 2.1.5\n+* Google Bigtable 1.3.0, 1.4.0, 1.5.0, 1.6.0, 1.7.0, 1.8.0, 1.9.0, 1.10.0, 1.11.0\n+* Oracle BerkeleyJE 7.5.11\n+* Elasticsearch 6.0.1, 6.6.0, 7.6.1\n+* Apache Lucene 7.0.0\n+* Apache Solr 7.0.0\n+* Apache TinkerPop 3.4.6\n+* Java 1.8\n+\n+For more information on features and bug fixes in 0.6.0, see the GitHub milestone:\n+\n+-   <https://github.com/JanusGraph/janusgraph/milestone/17?closed=1>\n+\n+#### Upgrade Instructions\n+\n+##### Serialization JanusGraphPredicates has changed\n+\n+GraphSON and Gryo Serialization has changed so both version need to be aligned.\n+\n+##### GraphBinary is now support\n+\n+If you want to use GraphBinary, you have to add following to the `gremlin-server.yaml` after the keyword `serializers`. \n+This will added the support on the server site. For client site, you have to checkout based on the driver.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1Nzc5MQ==", "bodyText": "I think we should add 1-2 sentences about what GraphBinary is in the first place as we cannot expect all users to follow development of TinkerPop. GraphBinary is a new feature we're introducing here to JanusGraph.\nI suggest something like this:\n\nGraphBinary is a new binary serialization format from TinkerPop that supersedes Gryo and it will eventually also replace GraphSON. GraphBinary is language independent and has a low serialization overhead which results in an improved performance.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r406257791", "createdAt": "2020-04-09T14:45:28Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -27,6 +27,54 @@ use the latest versions of the software.\n \n ## Release Notes\n \n+### Version 0.6.0 (Release Date: X, 2020)\n+\n+```xml tab='Maven'\n+<dependency>\n+    <groupId>org.janusgraph</groupId>\n+    <artifactId>janusgraph-core</artifactId>\n+    <version>0.6.0</version>\n+</dependency>\n+```\n+\n+```groovy tab='Gradle'\n+compile \"org.janusgraph:janusgraph-core:0.6.0\"\n+```\n+\n+**Tested Compatibility:**\n+\n+* Apache Cassandra 2.2.10, 3.0.14, 3.11.0\n+* Apache HBase 1.2.6, 1.3.1, 1.4.10, 2.1.5\n+* Google Bigtable 1.3.0, 1.4.0, 1.5.0, 1.6.0, 1.7.0, 1.8.0, 1.9.0, 1.10.0, 1.11.0\n+* Oracle BerkeleyJE 7.5.11\n+* Elasticsearch 6.0.1, 6.6.0, 7.6.1\n+* Apache Lucene 7.0.0\n+* Apache Solr 7.0.0\n+* Apache TinkerPop 3.4.6\n+* Java 1.8\n+\n+For more information on features and bug fixes in 0.6.0, see the GitHub milestone:\n+\n+-   <https://github.com/JanusGraph/janusgraph/milestone/17?closed=1>\n+\n+#### Upgrade Instructions\n+\n+##### Serialization JanusGraphPredicates has changed\n+\n+GraphSON and Gryo Serialization has changed so both version need to be aligned.\n+\n+##### GraphBinary is now support\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6cb1f6c3e77cf4db1f9e3e402e9291277567b34", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/f6cb1f6c3e77cf4db1f9e3e402e9291277567b34", "committedDate": "2020-04-10T10:52:47Z", "message": "review updates\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}, "afterCommit": {"oid": "8530f8812b1651abf4f98d5aa27a433819b35e9c", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/8530f8812b1651abf4f98d5aa27a433819b35e9c", "committedDate": "2020-04-10T12:41:13Z", "message": "review updates\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTUzNTky", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#pullrequestreview-392953592", "createdAt": "2020-04-14T13:58:21Z", "commit": {"oid": "8530f8812b1651abf4f98d5aa27a433819b35e9c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo1ODoyMVrOGFP9kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDowNjoyOVrOGFQWmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1NzU4NA==", "bodyText": "That's really a nice way to test all these predicates :)", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r408157584", "createdAt": "2020-04-14T13:58:21Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-driver/src/test/java/org/janusgraph/graphdb/tinkerpop/io/binary/JanusGraphPGraphBinarySerializerTest.java", "diffHunk": "@@ -44,65 +46,72 @@\n     private static final ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n     private static final NettyBufferFactory bufferFactory = new NettyBufferFactory();\n \n-    @Test\n-    public void shouldCustomSerialization() throws IOException {\n+    private static Stream<JanusGraphP> janusGraphPProvider() {\n+        return Stream.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8530f8812b1651abf4f98d5aa27a433819b35e9c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2Mzk5NQ==", "bodyText": "Good point, I didn't think about that use case.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r408163995", "createdAt": "2020-04-14T14:06:29Z", "author": {"login": "FlorianHockmann"}, "path": "janusgraph-dist/src/assembly/static/conf/remote-graph-binary.yaml", "diffHunk": "@@ -0,0 +1,17 @@\n+# Copyright 2020 JanusGraph Authors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MTQ5OQ=="}, "originalCommit": {"oid": "dfb96894b77bc80d04f610c6bf91e23b79bfc92d"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTY1Njc4", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#pullrequestreview-392965678", "createdAt": "2020-04-14T14:10:45Z", "commit": {"oid": "8530f8812b1651abf4f98d5aa27a433819b35e9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoxMDo0NVrOGFQjQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoxMDo0NVrOGFQjQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2NzIzMw==", "bodyText": "Not sure if this table adds much value. Just saying that this is currently only supported in our Java driver would be enough in my opinion (in addition with a short explanation / link how that can be configured). We don't have a Python driver yet, so I wouldn't even mention that here.", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#discussion_r408167233", "createdAt": "2020-04-14T14:10:45Z", "author": {"login": "FlorianHockmann"}, "path": "docs/changelog.md", "diffHunk": "@@ -59,21 +59,37 @@ For more information on features and bug fixes in 0.6.0, see the GitHub mileston\n \n #### Upgrade Instructions\n \n-##### Serialization JanusGraphPredicates has changed\n+##### Serialization of JanusGraph predicates has changed\n \n-GraphSON and Gryo Serialization has changed so both version need to be aligned.\n+The serialization of JanusGraph predicates has changed in this version for both \n+GraphSON and Gryo. It is therefore necessary to update both the client and \n+the server to this version in parallel as the server will not be able to \n+deserialize a JanusGraph predicate that was serialized by a client prior \n+to version 0.6.0 once it was updated to version 0.6.0.\n \n-##### GraphBinary is now support\n+##### GraphBinary is now supported\n \n-If you want to use GraphBinary, you have to add following to the `gremlin-server.yaml` after the keyword `serializers`. \n-This will added the support on the server site. For client site, you have to checkout based on the driver.\n+[GraphBinary](http://tinkerpop.apache.org/docs/current/dev/io/#graphbinary) is a \n+new binary serialization format from TinkerPop that supersedes Gryo and it will \n+eventually also replace GraphSON. GraphBinary is language independent and has a \n+low serialization overhead which results in an improved performance.\n+\n+If you want to use GraphBinary, you have to add following to the `gremlin-server.yaml` \n+after the keyword `serializers`. This will add the support on the server site. \n \n ```yaml\n     - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1, \n         config: { ioRegistries: [org.janusgraph.graphdb.tinkerpop.JanusGraphIoRegistry] }}\n     - { className: org.apache.tinkerpop.gremlin.driver.ser.GraphBinaryMessageSerializerV1, \n         config: { serializeResultToString: true }}\n ```\n+JanusGraph Extensions for GraphBinary are currently supported by following clients:\n+\n+| Language | Version |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8530f8812b1651abf4f98d5aa27a433819b35e9c"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzODc4NTI2", "url": "https://github.com/JanusGraph/janusgraph/pull/2061#pullrequestreview-393878526", "createdAt": "2020-04-15T15:18:34Z", "commit": {"oid": "77d258e607bc3d2a852163e51dbe2db71b037691"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77d258e607bc3d2a852163e51dbe2db71b037691", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/77d258e607bc3d2a852163e51dbe2db71b037691", "committedDate": "2020-04-15T11:19:41Z", "message": "Update connection documentation"}, "afterCommit": {"oid": "8332e8311f0e819cd6bb2856ef0c018158ee5c5c", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/8332e8311f0e819cd6bb2856ef0c018158ee5c5c", "committedDate": "2020-04-15T17:24:59Z", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38d43f55331d3f110b821d873b447202f047398b", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/38d43f55331d3f110b821d873b447202f047398b", "committedDate": "2020-04-15T17:25:29Z", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8332e8311f0e819cd6bb2856ef0c018158ee5c5c", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/8332e8311f0e819cd6bb2856ef0c018158ee5c5c", "committedDate": "2020-04-15T17:24:59Z", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}, "afterCommit": {"oid": "38d43f55331d3f110b821d873b447202f047398b", "author": {"user": {"login": "farodin91", "name": "Jan Jansen"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/38d43f55331d3f110b821d873b447202f047398b", "committedDate": "2020-04-15T17:25:29Z", "message": "Add support for graph binary\n\nFixes #1564\n\nSigned-off-by: Jan Jansen <jan.jansen@gdata.de>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4746, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}