{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MDYyODIz", "number": 2198, "title": "Allow nesting CONTAIN predicates with and/or", "bodyText": "Fixes #2188\nThe needed changes are already described in #2188. To solve this issue, it was also necessary to alter the definition of two PredicateConditions being equal to each other. Nesting P.without() predicates on a property value within an and() step automatically adds a PredicateCondition that this property value must not equal null. Therefore, PredicateCondition should handle null values on equality checks.\n\nThank you for contributing to JanusGraph!\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n Is there an issue associated with this PR? Is it referenced in the commit message?\n Does your PR body contain #xyz where xyz is the issue number you are trying to resolve?\n Has your PR been rebased against the latest commit within the target branch (typically master)?\n Is your initial contribution a single, squashed commit?\n\nFor code changes:\n\n Have you written and/or updated unit tests to verify your changes?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE.txt file, including the main LICENSE.txt file in the root of this repository?\n If applicable, have you updated the NOTICE.txt file, including the main NOTICE.txt file found in the root of this repository?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n If this PR is a documentation-only change, have you added a [doc only]\ntag to the first line of your commit message to avoid spending CPU cycles in\nTravis CI when no code, tests, or build configuration are modified?\n\nNote:\nPlease ensure that once the PR is submitted, you check Travis CI for build issues and submit an update to your PR as soon as possible.", "createdAt": "2020-09-01T12:57:15Z", "url": "https://github.com/JanusGraph/janusgraph/pull/2198", "merged": true, "mergeCommit": {"oid": "6432d39f7c54ef040c0afc3b2a505f73c28b764e"}, "closed": true, "closedAt": "2020-09-18T10:07:58Z", "author": {"login": "rngcntr"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdICqeZAFqTQ4NzIwMzQ0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJw1GoABqjM3Nzc5MTcwOTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjAzNDQ2", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#pullrequestreview-487203446", "createdAt": "2020-09-12T04:51:46Z", "commit": {"oid": "6f6b481e19e5332896a9ca12ef5bdccd08b25bc6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNDo1MTo0NlrOHQylQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNDo1MTo0NlrOHQylQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2ODAwMQ==", "bodyText": "This would fail the test\nassertEquals(3, g.V().or(__.has(\"id\", P.within(2, 3, 4)), __.has(\"id\", P.within())).count().next());", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r487368001", "createdAt": "2020-09-12T04:51:46Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,29 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.isEmpty()) continue; //Simply ignore since trivially satisfied\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    final And<E> nested = new And<>(childValues.size());\n+                    for (final Object inValue : childValues) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, inValue, nested, tx);\n+                    }\n+                    or.add(nested);\n+                } else {\n+                    Preconditions.checkArgument(janusGraphPredicate == Contain.IN);\n+                    if (childValues.isEmpty()) {\n+                        return null; //Cannot be satisfied", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6b481e19e5332896a9ca12ef5bdccd08b25bc6"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04ae00d7def1c0c07b8f2a811fcf8e5fa2fd4e96", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/04ae00d7def1c0c07b8f2a811fcf8e5fa2fd4e96", "committedDate": "2020-09-14T05:26:24Z", "message": "Fix broken logic for or() constraints in QueryUtil\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/73fa20aba135ac7f98e033eb4f0c3a156bc6f106", "committedDate": "2020-09-14T05:32:11Z", "message": "Fix broken logic for or() constraints in QueryUtil\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5Njk5NTU2", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#pullrequestreview-489699556", "createdAt": "2020-09-16T14:42:25Z", "commit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0MjoyNVrOHS0Ryw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0NzowOFrOHS0gMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MjkzOQ==", "bodyText": "I wonder if there is any performance difference between:\nOR(NOT_EQUAL(x) AND NOT_EQUAL(y))\nv.s.\nOR(NOT_EQUAL(x)) OR(NOT_EQUAL(y))?", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r489492939", "createdAt": "2020-09-16T14:42:25Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,30 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    // Don't need to handle the case where childValues is empty, because it defaults to\n+                    // an or(and()) is added, which is a tautology\n+                    final And<E> nested = new And<>(childValues.size());\n+                    for (final Object inValue : childValues) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, inValue, nested, tx);\n+                    }\n+                    or.add(nested);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5Mzc5MQ==", "bodyText": "I understand they are semantically the same, but will there be a performance difference (even if very little)?", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r489493791", "createdAt": "2020-09-16T14:43:33Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,30 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    // Don't need to handle the case where childValues is empty, because it defaults to\n+                    // an or(and()) is added, which is a tautology", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5NjYyNg==", "bodyText": "nitpick: it took me a while to understand the comment. I guess you mean \"Handle unsatisfiable condition or(within()) like it does not exist\"", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r489496626", "createdAt": "2020-09-16T14:47:08Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,30 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    // Don't need to handle the case where childValues is empty, because it defaults to\n+                    // an or(and()) is added, which is a tautology\n+                    final And<E> nested = new And<>(childValues.size());\n+                    for (final Object inValue : childValues) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, inValue, nested, tx);\n+                    }\n+                    or.add(nested);\n+                } else {\n+                    Preconditions.checkArgument(janusGraphPredicate == Contain.IN);\n+                    if (childValues.isEmpty()) {\n+                        continue; // Handle unsatisfiable condition within or like it does not exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/73fa20aba135ac7f98e033eb4f0c3a156bc6f106", "committedDate": "2020-09-14T05:32:11Z", "message": "Fix broken logic for or() constraints in QueryUtil\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "aa522d55751503ea33408c82cbf82a1349d276a7", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/aa522d55751503ea33408c82cbf82a1349d276a7", "committedDate": "2020-09-17T05:31:39Z", "message": "Fix broken logic for or() constraints in QueryUtil\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTI5MzE5", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#pullrequestreview-490529319", "createdAt": "2020-09-17T12:14:50Z", "commit": {"oid": "aa522d55751503ea33408c82cbf82a1349d276a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d728a4784460f44fedc04983478850422466f961", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/d728a4784460f44fedc04983478850422466f961", "committedDate": "2020-09-17T13:15:26Z", "message": "Allow nesting CONTAIN predicates with and/or\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa522d55751503ea33408c82cbf82a1349d276a7", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/aa522d55751503ea33408c82cbf82a1349d276a7", "committedDate": "2020-09-17T05:31:39Z", "message": "Fix broken logic for or() constraints in QueryUtil\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}, "afterCommit": {"oid": "d728a4784460f44fedc04983478850422466f961", "author": {"user": {"login": "rngcntr", "name": null}}, "url": "https://github.com/JanusGraph/janusgraph/commit/d728a4784460f44fedc04983478850422466f961", "committedDate": "2020-09-17T13:15:26Z", "message": "Allow nesting CONTAIN predicates with and/or\n\nSigned-off-by: Florian Grieskamp <florian.grieskamp@gdata.de>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4619, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}