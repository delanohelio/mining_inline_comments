{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMTg0MDEx", "number": 2221, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNDo1ODoxNFrOEpUHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwNjoxNzoyN1rOFYvj4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzU2NjgyOnYy", "diffSide": "RIGHT", "path": "janusgraph-server/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNDo1ODoxNFrOHa6hoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNTozODoyNVrOHc2k-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4MzkwNA==", "bodyText": "There is an open issue that says we should try to remove dependencies to guava if possible. If it is easily possible to replace the corresponding code by a different solution, please do so. If not, just ignore this comment.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r497983904", "createdAt": "2020-10-01T04:58:14Z", "author": {"login": "rngcntr"}, "path": "janusgraph-server/pom.xml", "diffHunk": "@@ -22,6 +24,33 @@\n             <groupId>org.apache.tinkerpop</groupId>\n             <artifactId>gremlin-server</artifactId>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.guava</groupId>\n+            <artifactId>guava</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd71056ba753c3990e010856b1f1e46df815bcf2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxNjM3Nw==", "bodyText": "It will be dependency of grpc.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r500016377", "createdAt": "2020-10-06T05:38:25Z", "author": {"login": "farodin91"}, "path": "janusgraph-server/pom.xml", "diffHunk": "@@ -22,6 +24,33 @@\n             <groupId>org.apache.tinkerpop</groupId>\n             <artifactId>gremlin-server</artifactId>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.guava</groupId>\n+            <artifactId>guava</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4MzkwNA=="}, "originalCommit": {"oid": "dd71056ba753c3990e010856b1f1e46df815bcf2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzYyMjE2OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphManagerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNToyOTo1OFrOHa7Ang==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNTozOTowN1rOHc2l3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk5MTgzOA==", "bodyText": "Where do JanusGraphManagerGrpc, JanusGraphManagerImplBase, GetJanusGraphContextRequest, JanusGraphContext and GetJanusGraphContextByGraphNameRequest come from? Although I do see the correlation to the messages in the proto definition for these ones, I can't find the point where this file is referenced.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r497991838", "createdAt": "2020-10-01T05:29:58Z", "author": {"login": "rngcntr"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphManagerImpl.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import io.grpc.Status;\n+import io.grpc.stub.StreamObserver;\n+import org.apache.commons.lang.NullArgumentException;\n+import org.apache.tinkerpop.gremlin.server.GraphManager;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.janusgraph.core.JanusGraph;\n+\n+public class JanusGraphManagerImpl extends JanusGraphManagerGrpc.JanusGraphManagerImplBase {\n+    private final GraphManager graphManager;\n+\n+    public JanusGraphManagerImpl(GraphManager graphManager) {\n+        this.graphManager = graphManager;\n+    }\n+\n+    @Override\n+    public void getJanusGraphContexts(GetJanusGraphContextsRequest request, StreamObserver<JanusGraphContext> responseObserver) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd71056ba753c3990e010856b1f1e46df815bcf2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwNTk0NA==", "bodyText": "Alright, @farodin91 says the classes are generated by maven. I never used proto, so is there a way to have the classes compiled and present so the IDE can resolve them?", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r498005944", "createdAt": "2020-10-01T06:17:08Z", "author": {"login": "rngcntr"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphManagerImpl.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import io.grpc.Status;\n+import io.grpc.stub.StreamObserver;\n+import org.apache.commons.lang.NullArgumentException;\n+import org.apache.tinkerpop.gremlin.server.GraphManager;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.janusgraph.core.JanusGraph;\n+\n+public class JanusGraphManagerImpl extends JanusGraphManagerGrpc.JanusGraphManagerImplBase {\n+    private final GraphManager graphManager;\n+\n+    public JanusGraphManagerImpl(GraphManager graphManager) {\n+        this.graphManager = graphManager;\n+    }\n+\n+    @Override\n+    public void getJanusGraphContexts(GetJanusGraphContextsRequest request, StreamObserver<JanusGraphContext> responseObserver) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk5MTgzOA=="}, "originalCommit": {"oid": "dd71056ba753c3990e010856b1f1e46df815bcf2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxNjYwNQ==", "bodyText": "It is done automatically on my site using intellij and maven.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r500016605", "createdAt": "2020-10-06T05:39:07Z", "author": {"login": "farodin91"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphManagerImpl.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import io.grpc.Status;\n+import io.grpc.stub.StreamObserver;\n+import org.apache.commons.lang.NullArgumentException;\n+import org.apache.tinkerpop.gremlin.server.GraphManager;\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.janusgraph.core.JanusGraph;\n+\n+public class JanusGraphManagerImpl extends JanusGraphManagerGrpc.JanusGraphManagerImplBase {\n+    private final GraphManager graphManager;\n+\n+    public JanusGraphManagerImpl(GraphManager graphManager) {\n+        this.graphManager = graphManager;\n+    }\n+\n+    @Override\n+    public void getJanusGraphContexts(GetJanusGraphContextsRequest request, StreamObserver<JanusGraphContext> responseObserver) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk5MTgzOA=="}, "originalCommit": {"oid": "dd71056ba753c3990e010856b1f1e46df815bcf2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzcwMDQzOnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNjowOTo0NVrOHa7tYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNTozNjozN1rOIMSAog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwMzI5Ng==", "bodyText": "I find it very error-prone to just copy&paste the code from the TinkerPop Settings class here. Especially because SnakeYaml uses Reflection, the compiler will not instantly notice a change in the TinkerPop class and therefore resulting incompatibilities.\nWould it be possible to call super.read(...) and somehow integrate the obtained Settings object into the JanusGraphSettings? This isn't a nice solution either but at least it would not require to duplicate code.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r498003296", "createdAt": "2020-10-01T06:09:45Z", "author": {"login": "rngcntr"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+public class JanusGraphSettings extends Settings {\n+    public JanusGraphSettings.GrpcServerSettings grpcServer = new JanusGraphSettings.GrpcServerSettings();\n+\n+    public static class GrpcServerSettings {\n+        public boolean enable = true;\n+        public int port = 10182;\n+    }\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        return read(input);\n+    }\n+\n+    public static JanusGraphSettings read(final InputStream stream) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd71056ba753c3990e010856b1f1e46df815bcf2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxNzYwNQ==", "bodyText": "Yaml fails to parse, if anything is not correctly defined.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r500017605", "createdAt": "2020-10-06T05:42:25Z", "author": {"login": "farodin91"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+public class JanusGraphSettings extends Settings {\n+    public JanusGraphSettings.GrpcServerSettings grpcServer = new JanusGraphSettings.GrpcServerSettings();\n+\n+    public static class GrpcServerSettings {\n+        public boolean enable = true;\n+        public int port = 10182;\n+    }\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        return read(input);\n+    }\n+\n+    public static JanusGraphSettings read(final InputStream stream) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwMzI5Ng=="}, "originalCommit": {"oid": "dd71056ba753c3990e010856b1f1e46df815bcf2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0ODg5OA==", "bodyText": "We are now using the default gremlin settings parser.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r549748898", "createdAt": "2020-12-29T15:36:37Z", "author": {"login": "farodin91"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+public class JanusGraphSettings extends Settings {\n+    public JanusGraphSettings.GrpcServerSettings grpcServer = new JanusGraphSettings.GrpcServerSettings();\n+\n+    public static class GrpcServerSettings {\n+        public boolean enable = true;\n+        public int port = 10182;\n+    }\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(new File(file));\n+        return read(input);\n+    }\n+\n+    public static JanusGraphSettings read(final InputStream stream) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwMzI5Ng=="}, "originalCommit": {"oid": "dd71056ba753c3990e010856b1f1e46df815bcf2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzcyNjYwOnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/test/java/org/janusgraph/graphdb/server/JanusGraphSettingsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNjoyMDoyNlrOHa78Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNjoyMDoyNlrOHa78Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwNzEwMg==", "bodyText": "You should add more tests which also overwrite the default values.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r498007102", "createdAt": "2020-10-01T06:20:26Z", "author": {"login": "rngcntr"}, "path": "janusgraph-server/src/test/java/org/janusgraph/graphdb/server/JanusGraphSettingsTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JanusGraphSettingsTest {\n+\n+    @Test\n+    public void testGrpcServerDefaultValues() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd71056ba753c3990e010856b1f1e46df815bcf2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzc0MzkxOnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/test/java/org/janusgraph/graphdb/server/JanusGraphManagerImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNjoyNzozOVrOHa8GTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNjoyNzozOVrOHa8GTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAwOTY3OA==", "bodyText": "Nit: These two lines are often repeated so you could move them to a method which then takes the graph name as a parameter and returns the JanusGraphContext.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r498009678", "createdAt": "2020-10-01T06:27:39Z", "author": {"login": "rngcntr"}, "path": "janusgraph-server/src/test/java/org/janusgraph/graphdb/server/JanusGraphManagerImplTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import org.apache.tinkerpop.gremlin.server.GraphManager;\n+import org.apache.tinkerpop.gremlin.server.GremlinServer;\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.apache.tinkerpop.gremlin.server.util.DefaultGraphManager;\n+import org.javatuples.Pair;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class JanusGraphManagerImplTest {\n+\n+    private GraphManager getGraphManager() {\n+        Settings settings = new Settings();\n+        HashMap<String, String> map = new HashMap<>();\n+        map.put(\"graph\", \"src/test/resources/janusgraph-inmemory.properties\");\n+        map.put(\"graph2\", \"src/test/resources/janusgraph-inmemory.properties\");\n+        map.put(\"tinkergraph\", \"src/test/resources/tinkergraph.properties\");\n+        settings.graphs = map;\n+        return new DefaultGraphManager(settings);\n+    }\n+\n+    private Pair<Server, String> createServer(GraphManager graphManager) throws IOException {\n+        String serverName = InProcessServerBuilder.generateName();\n+        Server server = InProcessServerBuilder\n+            .forName(serverName).directExecutor().addService(new JanusGraphManagerImpl(graphManager)).build().start();\n+        return new Pair<>(server, serverName);\n+    }\n+\n+    private Pair<TestingServerClosable, JanusGraphManagerGrpc.JanusGraphManagerBlockingStub> createServerStub(GraphManager graphManager) throws IOException {\n+        Pair<Server, String> server = createServer(graphManager);\n+        ManagedChannel channel = InProcessChannelBuilder.forName(server.getValue1()).directExecutor().build();\n+        JanusGraphManagerGrpc.JanusGraphManagerBlockingStub stub = JanusGraphManagerGrpc.newBlockingStub(channel);\n+        TestingServerClosable testingServerClosable = new TestingServerClosable(server.getValue0(), channel);\n+        return new Pair<>(testingServerClosable, stub);\n+    }\n+\n+    @Test\n+    public void testContextIsReturnedForGivenGraphName() throws IOException {\n+        GraphManager graphManager = getGraphManager();\n+        Pair<TestingServerClosable, JanusGraphManagerGrpc.JanusGraphManagerBlockingStub> serverStub = createServerStub(graphManager);\n+\n+        JanusGraphContext test = serverStub.getValue1().getJanusGraphContextByGraphName(\n+            GetJanusGraphContextByGraphNameRequest.newBuilder().setGraphName(\"graph\").build());\n+\n+        assertEquals(\"graph\", test.getGraphName());\n+        serverStub.getValue0().close();\n+    }\n+\n+    @Test\n+    public void testErrorIsReturnedForGivenGraphNameWhichIsNotAJanusGraph() throws IOException {\n+        GraphManager graphManager = getGraphManager();\n+        Pair<TestingServerClosable, JanusGraphManagerGrpc.JanusGraphManagerBlockingStub> serverStub = createServerStub(graphManager);\n+\n+        assertThrows(StatusRuntimeException.class, () ->\n+            serverStub.getValue1().getJanusGraphContextByGraphName(\n+                GetJanusGraphContextByGraphNameRequest.newBuilder().setGraphName(\"tinkergraph\").build()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd71056ba753c3990e010856b1f1e46df815bcf2"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzc1NDM1OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/test/java/org/janusgraph/graphdb/server/TestingServerClosable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNjozMjowM1rOHa8MkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNjozNjozMVrOHa8SyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAxMTI4MQ==", "bodyText": "Nit: If this class is only going to be used in JanusGraphManagerImplTest, it can be moved there as a private inner class.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r498011281", "createdAt": "2020-10-01T06:32:03Z", "author": {"login": "rngcntr"}, "path": "janusgraph-server/src/test/java/org/janusgraph/graphdb/server/TestingServerClosable.java", "diffHunk": "@@ -0,0 +1,44 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.Server;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+public class TestingServerClosable implements Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd71056ba753c3990e010856b1f1e46df815bcf2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAxMjg3Mg==", "bodyText": "I think that will be used for all upcoming test classes for the grpc api.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r498012872", "createdAt": "2020-10-01T06:36:31Z", "author": {"login": "farodin91"}, "path": "janusgraph-server/src/test/java/org/janusgraph/graphdb/server/TestingServerClosable.java", "diffHunk": "@@ -0,0 +1,44 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.Server;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+public class TestingServerClosable implements Closeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAxMTI4MQ=="}, "originalCommit": {"oid": "dd71056ba753c3990e010856b1f1e46df815bcf2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTQzMzg0OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNToyNDo1NlrOIMvdJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwNTozNToyNVrOIi5Rhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMTMzMw==", "bodyText": "@spmallette Do you have a better idea to extend default gremlin server config by custom values?", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r550231333", "createdAt": "2020-12-30T15:24:56Z", "author": {"login": "farodin91"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+import org.yaml.snakeyaml.representer.Representer;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class JanusGraphSettings {\n+    public JanusGraphSettings.GrpcServerSettings grpcServer = new JanusGraphSettings.GrpcServerSettings();\n+\n+    public static class GrpcServerSettings {\n+        public boolean enable = false;\n+        public int port = 10182;\n+    }\n+    private Settings gremlinSettings;\n+\n+    public Settings GetGremlinSettings() {\n+        return gremlinSettings;\n+    }\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(file);\n+        return read(input);\n+    }\n+\n+    public static JanusGraphSettings read(final InputStream stream) throws IOException {\n+        Objects.requireNonNull(stream);\n+        Constructor constructor = new Constructor(JanusGraphSettings.class);\n+        TypeDescription grpcServerSettings = new TypeDescription(JanusGraphSettings.GrpcServerSettings.class);\n+        constructor.addTypeDescription(grpcServerSettings);\n+        Representer representer = new Representer();\n+        representer.getPropertyUtils().setSkipMissingProperties(true);\n+\n+        String yamlInput = getStringFromInputStream(stream);\n+\n+        Yaml yaml = new Yaml(constructor, representer);\n+        JanusGraphSettings settings = yaml.loadAs(yamlInput, JanusGraphSettings.class);\n+        Yaml yamlMap = new Yaml();\n+        Map<String, Object> obj = yamlMap.load(yamlInput);\n+        obj.remove(\"grpcServer\");\n+        String dump = yamlMap.dump(obj);\n+        settings.gremlinSettings = Settings.read(new ByteArrayInputStream(dump.getBytes()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "857c8f1f970a3a277757a83ed576e144baeb98bf"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0MDkyMA==", "bodyText": "I'm not sure. I suppose you've already tried to just extend Settings directly and ran into a wall.  I'm afraid that I don't remember the particulars of snakeyaml and its parsing capabilities.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r550240920", "createdAt": "2020-12-30T15:54:31Z", "author": {"login": "spmallette"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+import org.yaml.snakeyaml.representer.Representer;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class JanusGraphSettings {\n+    public JanusGraphSettings.GrpcServerSettings grpcServer = new JanusGraphSettings.GrpcServerSettings();\n+\n+    public static class GrpcServerSettings {\n+        public boolean enable = false;\n+        public int port = 10182;\n+    }\n+    private Settings gremlinSettings;\n+\n+    public Settings GetGremlinSettings() {\n+        return gremlinSettings;\n+    }\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(file);\n+        return read(input);\n+    }\n+\n+    public static JanusGraphSettings read(final InputStream stream) throws IOException {\n+        Objects.requireNonNull(stream);\n+        Constructor constructor = new Constructor(JanusGraphSettings.class);\n+        TypeDescription grpcServerSettings = new TypeDescription(JanusGraphSettings.GrpcServerSettings.class);\n+        constructor.addTypeDescription(grpcServerSettings);\n+        Representer representer = new Representer();\n+        representer.getPropertyUtils().setSkipMissingProperties(true);\n+\n+        String yamlInput = getStringFromInputStream(stream);\n+\n+        Yaml yaml = new Yaml(constructor, representer);\n+        JanusGraphSettings settings = yaml.loadAs(yamlInput, JanusGraphSettings.class);\n+        Yaml yamlMap = new Yaml();\n+        Map<String, Object> obj = yamlMap.load(yamlInput);\n+        obj.remove(\"grpcServer\");\n+        String dump = yamlMap.dump(obj);\n+        settings.gremlinSettings = Settings.read(new ByteArrayInputStream(dump.getBytes()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMTMzMw=="}, "originalCommit": {"oid": "857c8f1f970a3a277757a83ed576e144baeb98bf"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0NDU5Nw==", "bodyText": "with:\nRepresenter representer = new Representer();\nrepresenter.getPropertyUtils().setSkipMissingProperties(true);\n\nYou can ignore unkown fields, but Settings doesn't set or allow to set this value.", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r550244597", "createdAt": "2020-12-30T16:05:47Z", "author": {"login": "farodin91"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+import org.yaml.snakeyaml.representer.Representer;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class JanusGraphSettings {\n+    public JanusGraphSettings.GrpcServerSettings grpcServer = new JanusGraphSettings.GrpcServerSettings();\n+\n+    public static class GrpcServerSettings {\n+        public boolean enable = false;\n+        public int port = 10182;\n+    }\n+    private Settings gremlinSettings;\n+\n+    public Settings GetGremlinSettings() {\n+        return gremlinSettings;\n+    }\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(file);\n+        return read(input);\n+    }\n+\n+    public static JanusGraphSettings read(final InputStream stream) throws IOException {\n+        Objects.requireNonNull(stream);\n+        Constructor constructor = new Constructor(JanusGraphSettings.class);\n+        TypeDescription grpcServerSettings = new TypeDescription(JanusGraphSettings.GrpcServerSettings.class);\n+        constructor.addTypeDescription(grpcServerSettings);\n+        Representer representer = new Representer();\n+        representer.getPropertyUtils().setSkipMissingProperties(true);\n+\n+        String yamlInput = getStringFromInputStream(stream);\n+\n+        Yaml yaml = new Yaml(constructor, representer);\n+        JanusGraphSettings settings = yaml.loadAs(yamlInput, JanusGraphSettings.class);\n+        Yaml yamlMap = new Yaml();\n+        Map<String, Object> obj = yamlMap.load(yamlInput);\n+        obj.remove(\"grpcServer\");\n+        String dump = yamlMap.dump(obj);\n+        settings.gremlinSettings = Settings.read(new ByteArrayInputStream(dump.getBytes()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMTMzMw=="}, "originalCommit": {"oid": "857c8f1f970a3a277757a83ed576e144baeb98bf"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5NDczMA==", "bodyText": "Please feel free to propose a change on the TinkerPop dev list if you feel like this area of the code could be made more extensible:\nhttps://lists.apache.org/list.html?dev@tinkerpop.apache.org", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r550494730", "createdAt": "2020-12-31T14:31:44Z", "author": {"login": "spmallette"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+import org.yaml.snakeyaml.representer.Representer;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class JanusGraphSettings {\n+    public JanusGraphSettings.GrpcServerSettings grpcServer = new JanusGraphSettings.GrpcServerSettings();\n+\n+    public static class GrpcServerSettings {\n+        public boolean enable = false;\n+        public int port = 10182;\n+    }\n+    private Settings gremlinSettings;\n+\n+    public Settings GetGremlinSettings() {\n+        return gremlinSettings;\n+    }\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(file);\n+        return read(input);\n+    }\n+\n+    public static JanusGraphSettings read(final InputStream stream) throws IOException {\n+        Objects.requireNonNull(stream);\n+        Constructor constructor = new Constructor(JanusGraphSettings.class);\n+        TypeDescription grpcServerSettings = new TypeDescription(JanusGraphSettings.GrpcServerSettings.class);\n+        constructor.addTypeDescription(grpcServerSettings);\n+        Representer representer = new Representer();\n+        representer.getPropertyUtils().setSkipMissingProperties(true);\n+\n+        String yamlInput = getStringFromInputStream(stream);\n+\n+        Yaml yaml = new Yaml(constructor, representer);\n+        JanusGraphSettings settings = yaml.loadAs(yamlInput, JanusGraphSettings.class);\n+        Yaml yamlMap = new Yaml();\n+        Map<String, Object> obj = yamlMap.load(yamlInput);\n+        obj.remove(\"grpcServer\");\n+        String dump = yamlMap.dump(obj);\n+        settings.gremlinSettings = Settings.read(new ByteArrayInputStream(dump.getBytes()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMTMzMw=="}, "originalCommit": {"oid": "857c8f1f970a3a277757a83ed576e144baeb98bf"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzQ2MDg3MQ==", "bodyText": "@farodin91 Do you want to leave a TODO here and include the link to the proposed change (if you already created a thread on TinkerPop dev list)?", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r573460871", "createdAt": "2021-02-10T05:35:25Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+import org.yaml.snakeyaml.representer.Representer;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class JanusGraphSettings {\n+    public JanusGraphSettings.GrpcServerSettings grpcServer = new JanusGraphSettings.GrpcServerSettings();\n+\n+    public static class GrpcServerSettings {\n+        public boolean enable = false;\n+        public int port = 10182;\n+    }\n+    private Settings gremlinSettings;\n+\n+    public Settings GetGremlinSettings() {\n+        return gremlinSettings;\n+    }\n+\n+    public static JanusGraphSettings read(final String file) throws Exception {\n+        InputStream input = new FileInputStream(file);\n+        return read(input);\n+    }\n+\n+    public static JanusGraphSettings read(final InputStream stream) throws IOException {\n+        Objects.requireNonNull(stream);\n+        Constructor constructor = new Constructor(JanusGraphSettings.class);\n+        TypeDescription grpcServerSettings = new TypeDescription(JanusGraphSettings.GrpcServerSettings.class);\n+        constructor.addTypeDescription(grpcServerSettings);\n+        Representer representer = new Representer();\n+        representer.getPropertyUtils().setSkipMissingProperties(true);\n+\n+        String yamlInput = getStringFromInputStream(stream);\n+\n+        Yaml yaml = new Yaml(constructor, representer);\n+        JanusGraphSettings settings = yaml.loadAs(yamlInput, JanusGraphSettings.class);\n+        Yaml yamlMap = new Yaml();\n+        Map<String, Object> obj = yamlMap.load(yamlInput);\n+        obj.remove(\"grpcServer\");\n+        String dump = yamlMap.dump(obj);\n+        settings.gremlinSettings = Settings.read(new ByteArrayInputStream(dump.getBytes()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMTMzMw=="}, "originalCommit": {"oid": "857c8f1f970a3a277757a83ed576e144baeb98bf"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMDAwMTU0OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/proto/graph-manager.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQwOTowOTo1MVrOIiLdFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwODoxMzo0NlrOIi9Gsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjcxMDE2Nw==", "bodyText": "why 2? Is 1 is reserved for future use?", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r572710167", "createdAt": "2021-02-09T09:09:51Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-server/src/main/proto/graph-manager.proto", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+syntax = \"proto3\";\n+\n+package grpc;\n+\n+option java_multiple_files = true;\n+option java_package = \"org.janusgraph.graphdb.server\";\n+option java_outer_classname = \"GraphManagerProto\";\n+\n+message JanusGraphContext {\n+    string graphName = 1;\n+}\n+\n+message GetJanusGraphContextByGraphNameRequest {\n+    string graphName = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89edea7b0bd0870a284840ec543d446c111d6735"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUyMzYzNA==", "bodyText": "no", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r573523634", "createdAt": "2021-02-10T08:13:46Z", "author": {"login": "farodin91"}, "path": "janusgraph-server/src/main/proto/graph-manager.proto", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+syntax = \"proto3\";\n+\n+package grpc;\n+\n+option java_multiple_files = true;\n+option java_package = \"org.janusgraph.graphdb.server\";\n+option java_outer_classname = \"GraphManagerProto\";\n+\n+message JanusGraphContext {\n+    string graphName = 1;\n+}\n+\n+message GetJanusGraphContextByGraphNameRequest {\n+    string graphName = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjcxMDE2Nw=="}, "originalCommit": {"oid": "89edea7b0bd0870a284840ec543d446c111d6735"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxNDYzMjY0OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwNDoxOTozM1rOIi3s6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwNDoxOTozM1rOIi3s6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzQzNTExNA==", "bodyText": "nitpick: this line is not correctly indented", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r573435114", "createdAt": "2021-02-10T04:19:33Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-server/pom.xml", "diffHunk": "@@ -22,6 +24,39 @@\n             <groupId>org.apache.tinkerpop</groupId>\n             <artifactId>gremlin-server</artifactId>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.guava</groupId>\n+            <artifactId>guava</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.protobuf</groupId>\n+            <artifactId>protobuf-java-util</artifactId>\n+            <version>${protobuf.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <scope>runtime</scope>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-protobuf</artifactId>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-stub</artifactId>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency> <!-- necessary for Java 9+ -->\n+            <groupId>org.apache.tomcat</groupId>\n+            <artifactId>annotations-api</artifactId>\n+            <version>6.0.53</version>\n+            <scope>provided</scope>\n+          </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89edea7b0bd0870a284840ec543d446c111d6735"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxNDY1ODAxOnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwNDozNDoxN1rOIi38Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwNDozNDoxN1rOIi38Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzQzOTA2Mg==", "bodyText": "Why making them public? Is this a requirement for snakeyaml?", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r573439062", "createdAt": "2021-02-10T04:34:17Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+import org.yaml.snakeyaml.representer.Representer;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class JanusGraphSettings {\n+    public JanusGraphSettings.GrpcServerSettings grpcServer = new JanusGraphSettings.GrpcServerSettings();\n+\n+    private Settings gremlinSettings;\n+\n+    public static class GrpcServerSettings {\n+        public boolean enable = false;\n+        public int port = 10182;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89edea7b0bd0870a284840ec543d446c111d6735"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxNDg4Njc5OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwNjoxNDoyNFrOIi6DFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwNjoxNDoyNFrOIi6DFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzQ3MzU1OQ==", "bodyText": "\"enabled\" sounds more suitable to me", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r573473559", "createdAt": "2021-02-10T06:14:24Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-server/src/main/java/org/janusgraph/graphdb/server/JanusGraphSettings.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+import org.yaml.snakeyaml.representer.Representer;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class JanusGraphSettings {\n+    public JanusGraphSettings.GrpcServerSettings grpcServer = new JanusGraphSettings.GrpcServerSettings();\n+\n+    private Settings gremlinSettings;\n+\n+    public static class GrpcServerSettings {\n+        public boolean enable = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89edea7b0bd0870a284840ec543d446c111d6735"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxNDg5Mzc3OnYy", "diffSide": "RIGHT", "path": "janusgraph-server/src/test/java/org/janusgraph/graphdb/server/JanusGraphSettingsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwNjoxNzoyN1rOIi6HKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwNjoxNzoyN1rOIi6HKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzQ3NDYwMA==", "bodyText": "janusgraph-server-with-server-configs.yaml sounds a bit confusing to me, coz it gives me an illusion that janusgraph-server-with(out)-serializers.yaml does not contain server configs. What about janusgraph-server-with-rpc.yaml?", "url": "https://github.com/JanusGraph/janusgraph/pull/2221#discussion_r573474600", "createdAt": "2021-02-10T06:17:27Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-server/src/test/java/org/janusgraph/graphdb/server/JanusGraphSettingsTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright 2020 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.graphdb.server;\n+\n+import org.apache.tinkerpop.gremlin.server.Settings;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JanusGraphSettingsTest {\n+\n+    @Test\n+    public void testGrpcServerDefaultValues() throws Exception {\n+        JanusGraphSettings settings = JanusGraphSettings.read(\"src/test/resources/janusgraph-server-without-serializers.yaml\");\n+\n+        assertFalse(settings.grpcServer.enable);\n+        assertEquals(10182, settings.grpcServer.port);\n+    }\n+\n+    @Test\n+    public void testGrpcServerOverwriteDefaultValues() throws Exception {\n+        JanusGraphSettings settings = JanusGraphSettings.read(\"src/test/resources/janusgraph-server-with-server-configs.yaml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89edea7b0bd0870a284840ec543d446c111d6735"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1375, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}