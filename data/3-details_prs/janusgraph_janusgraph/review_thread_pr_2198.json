{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MDYyODIz", "number": 2198, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNDo1MTo0NlrOEivrYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0NzowOFrOEkF08g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODY4MTk1OnYy", "diffSide": "RIGHT", "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNDo1MTo0NlrOHQylQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNTozMTozNFrOHREajA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2ODAwMQ==", "bodyText": "This would fail the test\nassertEquals(3, g.V().or(__.has(\"id\", P.within(2, 3, 4)), __.has(\"id\", P.within())).count().next());", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r487368001", "createdAt": "2020-09-12T04:51:46Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,29 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.isEmpty()) continue; //Simply ignore since trivially satisfied\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    final And<E> nested = new And<>(childValues.size());\n+                    for (final Object inValue : childValues) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, inValue, nested, tx);\n+                    }\n+                    or.add(nested);\n+                } else {\n+                    Preconditions.checkArgument(janusGraphPredicate == Contain.IN);\n+                    if (childValues.isEmpty()) {\n+                        return null; //Cannot be satisfied", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6b481e19e5332896a9ca12ef5bdccd08b25bc6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2MDE3Mg==", "bodyText": "Thanks for the review. Basically needed to change two lines within the definition of OR to catch that bug. I updated the branch by pushing a separate commit containing the fix so it is easier to review.\nAlso added 14 new test cases which cover all of the empty argument cases as well as some previously untested combinations of with and without cases. If you can find different combinations worth testing, please let me know.", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r487660172", "createdAt": "2020-09-14T05:31:34Z", "author": {"login": "rngcntr"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,29 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.isEmpty()) continue; //Simply ignore since trivially satisfied\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    final And<E> nested = new And<>(childValues.size());\n+                    for (final Object inValue : childValues) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, inValue, nested, tx);\n+                    }\n+                    or.add(nested);\n+                } else {\n+                    Preconditions.checkArgument(janusGraphPredicate == Contain.IN);\n+                    if (childValues.isEmpty()) {\n+                        return null; //Cannot be satisfied", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2ODAwMQ=="}, "originalCommit": {"oid": "6f6b481e19e5332896a9ca12ef5bdccd08b25bc6"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Mjc3MzI2OnYy", "diffSide": "RIGHT", "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0MjoyNVrOHS0Ryw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjoxMDo1NFrOHTfB8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MjkzOQ==", "bodyText": "I wonder if there is any performance difference between:\nOR(NOT_EQUAL(x) AND NOT_EQUAL(y))\nv.s.\nOR(NOT_EQUAL(x)) OR(NOT_EQUAL(y))?", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r489492939", "createdAt": "2020-09-16T14:42:25Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,30 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    // Don't need to handle the case where childValues is empty, because it defaults to\n+                    // an or(and()) is added, which is a tautology\n+                    final And<E> nested = new And<>(childValues.size());\n+                    for (final Object inValue : childValues) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, inValue, nested, tx);\n+                    }\n+                    or.add(nested);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk3ODg2Mw==", "bodyText": "I don't quite get your point here. It looks like your second case is missing a logical operator between the two ORs. Anyway, I can't spot what kind of possible change in the code you refer to, in order to create one or the other of your examples.", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r489978863", "createdAt": "2020-09-17T05:27:04Z", "author": {"login": "rngcntr"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,30 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    // Don't need to handle the case where childValues is empty, because it defaults to\n+                    // an or(and()) is added, which is a tautology\n+                    final And<E> nested = new And<>(childValues.size());\n+                    for (final Object inValue : childValues) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, inValue, nested, tx);\n+                    }\n+                    or.add(nested);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MjkzOQ=="}, "originalCommit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE5MzM5NQ==", "bodyText": "Oh never mind, I got it wrong", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r490193395", "createdAt": "2020-09-17T12:10:54Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,30 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    // Don't need to handle the case where childValues is empty, because it defaults to\n+                    // an or(and()) is added, which is a tautology\n+                    final And<E> nested = new And<>(childValues.size());\n+                    for (final Object inValue : childValues) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, inValue, nested, tx);\n+                    }\n+                    or.add(nested);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5MjkzOQ=="}, "originalCommit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Mjc3ODc0OnYy", "diffSide": "RIGHT", "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0MzozM1rOHS0VHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNToxNzo0MFrOHTRxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5Mzc5MQ==", "bodyText": "I understand they are semantically the same, but will there be a performance difference (even if very little)?", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r489493791", "createdAt": "2020-09-16T14:43:33Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,30 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    // Don't need to handle the case where childValues is empty, because it defaults to\n+                    // an or(and()) is added, which is a tautology", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk3NjExOQ==", "bodyText": "There may be a little difference in performance, but the empty and actually serves a functional purpose. Otherwise the surrounding or can be empty which results in or() being evaluated as false instead of or(and()) which is true.", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r489976119", "createdAt": "2020-09-17T05:17:40Z", "author": {"login": "rngcntr"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,30 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    // Don't need to handle the case where childValues is empty, because it defaults to\n+                    // an or(and()) is added, which is a tautology", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5Mzc5MQ=="}, "originalCommit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Mjc5NjY2OnYy", "diffSide": "RIGHT", "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0NzowOFrOHS0gMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNToyODo0MlrOHTR9sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5NjYyNg==", "bodyText": "nitpick: it took me a while to understand the comment. I guess you mean \"Handle unsatisfiable condition or(within()) like it does not exist\"", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r489496626", "createdAt": "2020-09-16T14:47:08Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,30 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    // Don't need to handle the case where childValues is empty, because it defaults to\n+                    // an or(and()) is added, which is a tautology\n+                    final And<E> nested = new And<>(childValues.size());\n+                    for (final Object inValue : childValues) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, inValue, nested, tx);\n+                    }\n+                    or.add(nested);\n+                } else {\n+                    Preconditions.checkArgument(janusGraphPredicate == Contain.IN);\n+                    if (childValues.isEmpty()) {\n+                        continue; // Handle unsatisfiable condition within or like it does not exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk3OTMxMw==", "bodyText": "It was actually meant to say \"Handle any unsatisfiable condition within an OR statement like it does not exist.\"", "url": "https://github.com/JanusGraph/janusgraph/pull/2198#discussion_r489979313", "createdAt": "2020-09-17T05:28:42Z", "author": {"login": "rngcntr"}, "path": "janusgraph-core/src/main/java/org/janusgraph/graphdb/query/QueryUtil.java", "diffHunk": "@@ -241,7 +262,30 @@ public static boolean isEmpty(Condition<?> condition) {\n     private static <E extends JanusGraphElement> Or<E> addConstraint(final RelationType type, OrJanusPredicate predicate, List<Object> values, Or<E> or, StandardJanusGraphTx tx) {\n         for (int i = 0 ; i < values.size(); i++) {\n             final JanusGraphPredicate janusGraphPredicate = predicate.get(i);\n-            if (janusGraphPredicate instanceof AndJanusPredicate) {\n+            if (janusGraphPredicate instanceof Contain) {\n+                //Rewrite contains conditions\n+                final Collection childValues = (Collection) values.get(i);\n+                if (janusGraphPredicate == Contain.NOT_IN) {\n+                    if (childValues.size() == 1) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, childValues.iterator().next(), or, tx);\n+                    }\n+                    // Don't need to handle the case where childValues is empty, because it defaults to\n+                    // an or(and()) is added, which is a tautology\n+                    final And<E> nested = new And<>(childValues.size());\n+                    for (final Object inValue : childValues) {\n+                        addConstraint(type, Cmp.NOT_EQUAL, inValue, nested, tx);\n+                    }\n+                    or.add(nested);\n+                } else {\n+                    Preconditions.checkArgument(janusGraphPredicate == Contain.IN);\n+                    if (childValues.isEmpty()) {\n+                        continue; // Handle unsatisfiable condition within or like it does not exist", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5NjYyNg=="}, "originalCommit": {"oid": "73fa20aba135ac7f98e033eb4f0c3a156bc6f106"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1352, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}