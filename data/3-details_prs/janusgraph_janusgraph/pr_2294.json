{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNTc3NDA4", "number": 2294, "title": "issue #2273 - implement variable length \"valuePosition\" in page storage", "bodyText": "to allow for Entry keys of arbitrary length, while not incurring unnecessary overhead (as 99% of keys are typically quite short)\n\nThank you for contributing to JanusGraph!\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n Is there an issue associated with this PR? Is it referenced in the commit message?\n Does your PR body contain #xyz where xyz is the issue number you are trying to resolve?\n Has your PR been rebased against the latest commit within the target branch (typically master)?\n Is your initial contribution a single, squashed commit?\n\nFor code changes:\n\n Have you written and/or updated unit tests to verify your changes?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE.txt file, including the main LICENSE.txt file in the root of this repository?\n If applicable, have you updated the NOTICE.txt file, including the main NOTICE.txt file found in the root of this repository?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n If this PR is a documentation-only change, have you added a [doc only]\ntag to the first line of your commit message to avoid spending CPU cycles in\nTravis CI when no code, tests, or build configuration are modified?\n\nNote:\nPlease ensure that once the PR is submitted, you check Travis CI for build issues and submit an update to your PR as soon as possible.", "createdAt": "2020-12-21T16:20:24Z", "url": "https://github.com/JanusGraph/janusgraph/pull/2294", "merged": true, "mergeCommit": {"oid": "fb38d44c002494c8e71a762b1b44aa2bab08d94a"}, "closed": true, "closedAt": "2021-01-08T16:20:44Z", "author": {"login": "dk-github"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpSZO9gFqTU1ODQ3OTA5Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABduGt8hABqjQxODM5NDAyNzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NDc5MDkz", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#pullrequestreview-558479093", "createdAt": "2020-12-24T11:53:59Z", "commit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Nzc1NDgy", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#pullrequestreview-558775482", "createdAt": "2020-12-25T07:35:47Z", "commit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwNzozNTo0N1rOILZkGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwODoxNjoxOFrOILZ9eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgyNDA4OA==", "bodyText": "Just a nitpick: we could use ByteBuffer.wrap(rawData, offset, Integer.BYTES).order(ByteOrder.BIG_ENDIAN) to explicitly set the endianness, or we could add an assertion to make sure order() is equivalent to BIG_ENDIAN.", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r548824088", "createdAt": "2020-12-25T07:35:47Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPageUtils.java", "diffHunk": "@@ -92,6 +93,30 @@ public static SharedEntryBuffer readFrom(DataInputStream in) throws IOException\n         }\n     }\n \n+    static int computeValPosSize(Entry e)\n+    {\n+        //this assumes that the key size will almost never be > 127 bytes,\n+        // thus most of the time saving 3 out of 4 bytes to store the value position within the buffer\n+        return e.getValuePosition() > 127 ? Integer.BYTES : 1;\n+    }\n+\n+    static int writeValPos(Entry e, byte[] rawData, int offset)\n+    {\n+        if (e.getValuePosition() <= 127) //\"column\" name length fits into one byte - should be 99.99% of cases\n+        {\n+            final byte entryValPos = (byte) e.getValuePosition();\n+            rawData[offset] = entryValPos;\n+            return 1;\n+        }\n+        else //doesn't fit in 1 byte - use full integer\n+        {\n+            //ByteBuffer is in BigENdian mode by default, so if we write -valuePosition,\n+            // 1st byte should have a negative value, indicating full int\n+            ByteBuffer.wrap(rawData, offset, Integer.BYTES).asIntBuffer().put(-e.getValuePosition());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgyNjM0OA==", "bodyText": "I think if you can change the signature of this method into\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static int computeValPosSize(Entry e)\n          \n          \n            \n                static int computeValPosSize(int valPos)\n          \n      \n    \n    \n  \n\nthen it could be reused in BufferPage.java.", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r548826348", "createdAt": "2020-12-25T07:49:37Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPageUtils.java", "diffHunk": "@@ -92,6 +93,30 @@ public static SharedEntryBuffer readFrom(DataInputStream in) throws IOException\n         }\n     }\n \n+    static int computeValPosSize(Entry e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgzMDU4Ng==", "bodyText": "It took me some time to understand this method thoroughly. I think the usage of entryBuffer here is not straight-forward to understand, since you are kind of mixing the two use cases (reading and moving cursor v.s. purely reading) together in one method. Would be helpful if you can add some javadoc.", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r548830586", "createdAt": "2020-12-25T08:16:18Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPage.java", "diffHunk": "@@ -111,24 +113,64 @@ private int getEntryEndOffset(final int index) {\n         }\n     }\n \n+    static int readValPos(byte[] rawData, int entryOffset, ByteBuffer entryBuffer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3674776e68e5eca45dd238c3bdbe350afe36757", "author": {"user": {"login": "dk-github", "name": "Dmitry Kovalev"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/a3674776e68e5eca45dd238c3bdbe350afe36757", "committedDate": "2020-12-21T16:18:29Z", "message": "issue #2273 - implement variable length \"valuePosition\" in page storage, to allow for Entry keys of arbitrary length, while not incurring unnecessary overhead (as 99% of keys are typically quite short)\n\nSigned-off-by: Dmitry Kovalev <dk.global@gmail.com>"}, "afterCommit": {"oid": "010179f72dce076b5015dbcd85ac9c3c82403150", "author": {"user": {"login": "dk-github", "name": "Dmitry Kovalev"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/010179f72dce076b5015dbcd85ac9c3c82403150", "committedDate": "2020-12-27T18:27:11Z", "message": "issue #2273 - implement variable length \"valuePosition\" in page storage, to allow for Entry keys of arbitrary length, while not incurring unnecessary overhead (as 99% of keys are typically quite short)\n\nSigned-off-by: Dmitry Kovalev <dk.global@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "010179f72dce076b5015dbcd85ac9c3c82403150", "author": {"user": {"login": "dk-github", "name": "Dmitry Kovalev"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/010179f72dce076b5015dbcd85ac9c3c82403150", "committedDate": "2020-12-27T18:27:11Z", "message": "issue #2273 - implement variable length \"valuePosition\" in page storage, to allow for Entry keys of arbitrary length, while not incurring unnecessary overhead (as 99% of keys are typically quite short)\n\nSigned-off-by: Dmitry Kovalev <dk.global@gmail.com>"}, "afterCommit": {"oid": "b2c46e3b346d781e04e4dcc6e28c7ad531c4e6dd", "author": {"user": {"login": "dk-github", "name": "Dmitry Kovalev"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/b2c46e3b346d781e04e4dcc6e28c7ad531c4e6dd", "committedDate": "2020-12-29T17:07:06Z", "message": "issue #2273 - implement variable length \"valuePosition\" in page storage, to allow for Entry keys of arbitrary length, while not incurring unnecessary overhead (as 99% of keys are typically quite short)\n\nSigned-off-by: Dmitry Kovalev <dk.global@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzYxNzY4", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#pullrequestreview-559761768", "createdAt": "2020-12-30T02:31:43Z", "commit": {"oid": "b2c46e3b346d781e04e4dcc6e28c7ad531c4e6dd"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjozMTo0M1rOIMcJjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjozMTo0M1rOIMcJjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxNTAyMw==", "bodyText": "nitpick: don't put the curly brace on a new line, to be consistent with the convention used in the codebase.", "url": "https://github.com/JanusGraph/janusgraph/pull/2294#discussion_r549915023", "createdAt": "2020-12-30T02:31:43Z", "author": {"login": "li-boxuan"}, "path": "janusgraph-inmemory/src/main/java/org/janusgraph/diskstorage/inmemory/BufferPage.java", "diffHunk": "@@ -111,24 +113,62 @@ private int getEntryEndOffset(final int index) {\n         }\n     }\n \n+    /**\n+     * This figures out how the \"valuePosition\" was stored (i.e. 1 byte or 4), reads it correctly,\n+     * and leaves the byte buffer (if given) at the beginning of the key value\n+     */\n+    static int readValPos(byte[] rawData, int entryOffset, ByteBuffer entryBuffer)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2c46e3b346d781e04e4dcc6e28c7ad531c4e6dd"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2c46e3b346d781e04e4dcc6e28c7ad531c4e6dd", "author": {"user": {"login": "dk-github", "name": "Dmitry Kovalev"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/b2c46e3b346d781e04e4dcc6e28c7ad531c4e6dd", "committedDate": "2020-12-29T17:07:06Z", "message": "issue #2273 - implement variable length \"valuePosition\" in page storage, to allow for Entry keys of arbitrary length, while not incurring unnecessary overhead (as 99% of keys are typically quite short)\n\nSigned-off-by: Dmitry Kovalev <dk.global@gmail.com>"}, "afterCommit": {"oid": "d936872df4c815ef524a4c78013d90f45a886af8", "author": {"user": {"login": "dk-github", "name": "Dmitry Kovalev"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/d936872df4c815ef524a4c78013d90f45a886af8", "committedDate": "2021-01-07T22:46:10Z", "message": "issue #2273 - implement variable length \"valuePosition\" in page storage, to allow for Entry keys of arbitrary length, while not incurring unnecessary overhead (as 99% of keys are typically quite short)\n\nSigned-off-by: Dmitry Kovalev <dk.global@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2b4431939055237b3e280ea7873bd53232731bd", "author": {"user": {"login": "dk-github", "name": "Dmitry Kovalev"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/f2b4431939055237b3e280ea7873bd53232731bd", "committedDate": "2021-01-08T11:04:07Z", "message": "issue #2273 - implement variable length \"valuePosition\" in page storage, to allow for Entry keys of arbitrary length, while not incurring unnecessary overhead (as 99% of keys are typically quite short)\n\nSigned-off-by: Dmitry Kovalev <dk.global@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d936872df4c815ef524a4c78013d90f45a886af8", "author": {"user": {"login": "dk-github", "name": "Dmitry Kovalev"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/d936872df4c815ef524a4c78013d90f45a886af8", "committedDate": "2021-01-07T22:46:10Z", "message": "issue #2273 - implement variable length \"valuePosition\" in page storage, to allow for Entry keys of arbitrary length, while not incurring unnecessary overhead (as 99% of keys are typically quite short)\n\nSigned-off-by: Dmitry Kovalev <dk.global@gmail.com>"}, "afterCommit": {"oid": "f2b4431939055237b3e280ea7873bd53232731bd", "author": {"user": {"login": "dk-github", "name": "Dmitry Kovalev"}}, "url": "https://github.com/JanusGraph/janusgraph/commit/f2b4431939055237b3e280ea7873bd53232731bd", "committedDate": "2021-01-08T11:04:07Z", "message": "issue #2273 - implement variable length \"valuePosition\" in page storage, to allow for Entry keys of arbitrary length, while not incurring unnecessary overhead (as 99% of keys are typically quite short)\n\nSigned-off-by: Dmitry Kovalev <dk.global@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4708, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}