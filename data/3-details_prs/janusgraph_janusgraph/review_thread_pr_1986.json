{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NzQ1MDQ5", "number": 1986, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMDoyNjo0MlrODi5yuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyODozN1rODjP5Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTI1MDQ4OnYy", "diffSide": "RIGHT", "path": "janusgraph-es/src/main/java/org/janusgraph/diskstorage/es/ElasticSearchScroll.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMDoyNjo0MlrOFuaTHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMDo0ODo0NlrOFuar5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIwOTY5NQ==", "bodyText": "Why did you change this to non blocking queue? What about thread safety?", "url": "https://github.com/JanusGraph/janusgraph/pull/1986#discussion_r384209695", "createdAt": "2020-02-26T00:26:42Z", "author": {"login": "porunov"}, "path": "janusgraph-es/src/main/java/org/janusgraph/diskstorage/es/ElasticSearchScroll.java", "diffHunk": "@@ -28,19 +28,28 @@\n  */\n public class ElasticSearchScroll implements Iterator<RawQuery.Result<String>> {\n \n-    private final BlockingQueue<RawQuery.Result<String>> queue;\n+    private final Queue<Result<String>> queue;\n     private boolean isFinished;\n     private final ElasticSearchClient client;\n     private final String scrollId;\n     private final int batchSize;\n \n     public ElasticSearchScroll(ElasticSearchClient client, ElasticSearchResponse initialResponse, int nbDocByQuery) {\n-        queue = new LinkedBlockingQueue<>();\n+        queue = new ArrayDeque<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e519f12fd763ca1c93a1e9389ebe4786dd7842f4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIxMzIzMw==", "bodyText": "I could undo this change as I have fixes the problem in a better way by calling hasNext in the next method to make sure that if a loop is just calling next that it reads all records.\nI don't believe that this is used from multiple threads though.", "url": "https://github.com/JanusGraph/janusgraph/pull/1986#discussion_r384213233", "createdAt": "2020-02-26T00:39:03Z", "author": {"login": "pkendall64"}, "path": "janusgraph-es/src/main/java/org/janusgraph/diskstorage/es/ElasticSearchScroll.java", "diffHunk": "@@ -28,19 +28,28 @@\n  */\n public class ElasticSearchScroll implements Iterator<RawQuery.Result<String>> {\n \n-    private final BlockingQueue<RawQuery.Result<String>> queue;\n+    private final Queue<Result<String>> queue;\n     private boolean isFinished;\n     private final ElasticSearchClient client;\n     private final String scrollId;\n     private final int batchSize;\n \n     public ElasticSearchScroll(ElasticSearchClient client, ElasticSearchResponse initialResponse, int nbDocByQuery) {\n-        queue = new LinkedBlockingQueue<>();\n+        queue = new ArrayDeque<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIwOTY5NQ=="}, "originalCommit": {"oid": "e519f12fd763ca1c93a1e9389ebe4786dd7842f4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIxNjAzNg==", "bodyText": "Reverted this part of the commit", "url": "https://github.com/JanusGraph/janusgraph/pull/1986#discussion_r384216036", "createdAt": "2020-02-26T00:48:46Z", "author": {"login": "pkendall64"}, "path": "janusgraph-es/src/main/java/org/janusgraph/diskstorage/es/ElasticSearchScroll.java", "diffHunk": "@@ -28,19 +28,28 @@\n  */\n public class ElasticSearchScroll implements Iterator<RawQuery.Result<String>> {\n \n-    private final BlockingQueue<RawQuery.Result<String>> queue;\n+    private final Queue<Result<String>> queue;\n     private boolean isFinished;\n     private final ElasticSearchClient client;\n     private final String scrollId;\n     private final int batchSize;\n \n     public ElasticSearchScroll(ElasticSearchClient client, ElasticSearchResponse initialResponse, int nbDocByQuery) {\n-        queue = new LinkedBlockingQueue<>();\n+        queue = new ArrayDeque<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIwOTY5NQ=="}, "originalCommit": {"oid": "e519f12fd763ca1c93a1e9389ebe4786dd7842f4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjg2Mjc2OnYy", "diffSide": "RIGHT", "path": "janusgraph-es/src/test/java/org/janusgraph/diskstorage/es/ElasticSearchScrollTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyNjowMFrOFu82GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo0MTo1NVrOFvcxiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NTcwNQ==", "bodyText": "nit: 2020", "url": "https://github.com/JanusGraph/janusgraph/pull/1986#discussion_r384775705", "createdAt": "2020-02-26T21:26:00Z", "author": {"login": "farodin91"}, "path": "janusgraph-es/src/test/java/org/janusgraph/diskstorage/es/ElasticSearchScrollTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright 2017 JanusGraph Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41ea169086dfe01dbc244fb5f03be8100e9fe8d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1NDAwOQ==", "bodyText": "fixed", "url": "https://github.com/JanusGraph/janusgraph/pull/1986#discussion_r384854009", "createdAt": "2020-02-27T00:46:53Z", "author": {"login": "pkendall64"}, "path": "janusgraph-es/src/test/java/org/janusgraph/diskstorage/es/ElasticSearchScrollTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright 2017 JanusGraph Authors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NTcwNQ=="}, "originalCommit": {"oid": "d41ea169086dfe01dbc244fb5f03be8100e9fe8d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5ODgyNA==", "bodyText": "updated", "url": "https://github.com/JanusGraph/janusgraph/pull/1986#discussion_r385298824", "createdAt": "2020-02-27T18:41:55Z", "author": {"login": "pkendall64"}, "path": "janusgraph-es/src/test/java/org/janusgraph/diskstorage/es/ElasticSearchScrollTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright 2017 JanusGraph Authors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NTcwNQ=="}, "originalCommit": {"oid": "d41ea169086dfe01dbc244fb5f03be8100e9fe8d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjg2ODI5OnYy", "diffSide": "RIGHT", "path": "janusgraph-es/src/test/java/org/janusgraph/diskstorage/es/ElasticSearchScrollTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyNzo0NVrOFu85gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo0MTozNlrOFvcw9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NjU3OA==", "bodyText": "nit: if you know where exception will be thrown use assertThrows.", "url": "https://github.com/JanusGraph/janusgraph/pull/1986#discussion_r384776578", "createdAt": "2020-02-26T21:27:45Z", "author": {"login": "farodin91"}, "path": "janusgraph-es/src/test/java/org/janusgraph/diskstorage/es/ElasticSearchScrollTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright 2017 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.diskstorage.es;\n+\n+import io.vavr.collection.List;\n+import org.janusgraph.diskstorage.indexing.RawQuery;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.NoSuchElementException;\n+\n+import static org.easymock.EasyMock.mock;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.easymock.EasyMock.expect;\n+\n+public class ElasticSearchScrollTest {\n+    @Test\n+    public void testShortResultSetDeletesScroll() throws IOException {\n+        String SCROLL_NAME = \"scroll-1\";\n+        ElasticSearchResponse response = new ElasticSearchResponse();\n+        response.setScrollId(SCROLL_NAME);\n+        response.setTotal(0);\n+        response.setResults(Collections.emptyList());\n+\n+        ElasticSearchClient client = mock(ElasticSearchClient.class);\n+        client.deleteScroll(SCROLL_NAME);\n+        replay(client);\n+\n+        new ElasticSearchScroll(client, response, 5);\n+\n+        verify(client);\n+    }\n+\n+    @Test\n+    public void testLongResultSetDoesNotDeleteScrollOnConstruction() throws IOException {\n+        List x = List.of(new RawQuery.Result<String>(\"\", 0.0),\n+            new RawQuery.Result<String>(\"\", 0.0),\n+            new RawQuery.Result<String>(\"\", 0.0),\n+            new RawQuery.Result<String>(\"\", 0.0),\n+            new RawQuery.Result<String>(\"\", 0.0));\n+        String SCROLL_NAME = \"scroll-2\";\n+        ElasticSearchResponse response = new ElasticSearchResponse();\n+        response.setScrollId(SCROLL_NAME);\n+        response.setTotal(x.size());\n+        response.setResults(x.asJava());\n+\n+        ElasticSearchClient client = mock(ElasticSearchClient.class);\n+        replay(client);\n+\n+        new ElasticSearchScroll(client, response, x.length());\n+\n+        verify(client);\n+    }\n+\n+    @Test\n+    public void testLongResultSetDeleteScrollOnLastShortPage() throws IOException {\n+        List x1 = List.of(new RawQuery.Result<String>(\"1\", 10.0),\n+            new RawQuery.Result<String>(\"2\", 10.0),\n+            new RawQuery.Result<String>(\"3\", 10.0),\n+            new RawQuery.Result<String>(\"4\", 10.0),\n+            new RawQuery.Result<String>(\"5\", 10.0));\n+\n+        List x2 = List.of(new RawQuery.Result<String>(\"6\", 10.0),\n+            new RawQuery.Result<String>(\"7\", 10.0));\n+\n+        String SCROLL_NAME = \"scroll-2\";\n+        ElasticSearchResponse r1 = new ElasticSearchResponse();\n+        r1.setScrollId(SCROLL_NAME);\n+        r1.setTotal(x1.size());\n+        r1.setResults(x1.asJava());\n+\n+        ElasticSearchResponse r2 = new ElasticSearchResponse();\n+        r2.setScrollId(SCROLL_NAME);\n+        r2.setTotal(x2.size());\n+        r2.setResults(x2.asJava());\n+\n+        ElasticSearchClient client = mock(ElasticSearchClient.class);\n+\n+        expect(client.search(SCROLL_NAME)).andReturn(r2);\n+        client.deleteScroll(SCROLL_NAME);\n+        replay(client);\n+\n+        ElasticSearchScroll scroll = new ElasticSearchScroll(client, r1, 5);\n+        for (int i=0 ; i<6 ; i++) {\n+            scroll.hasNext();\n+            scroll.next();\n+        }\n+\n+        verify(client);\n+    }\n+\n+    @Test(expected = NoSuchElementException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41ea169086dfe01dbc244fb5f03be8100e9fe8d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1NDExNw==", "bodyText": "fixed", "url": "https://github.com/JanusGraph/janusgraph/pull/1986#discussion_r384854117", "createdAt": "2020-02-27T00:47:15Z", "author": {"login": "pkendall64"}, "path": "janusgraph-es/src/test/java/org/janusgraph/diskstorage/es/ElasticSearchScrollTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright 2017 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.diskstorage.es;\n+\n+import io.vavr.collection.List;\n+import org.janusgraph.diskstorage.indexing.RawQuery;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.NoSuchElementException;\n+\n+import static org.easymock.EasyMock.mock;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.easymock.EasyMock.expect;\n+\n+public class ElasticSearchScrollTest {\n+    @Test\n+    public void testShortResultSetDeletesScroll() throws IOException {\n+        String SCROLL_NAME = \"scroll-1\";\n+        ElasticSearchResponse response = new ElasticSearchResponse();\n+        response.setScrollId(SCROLL_NAME);\n+        response.setTotal(0);\n+        response.setResults(Collections.emptyList());\n+\n+        ElasticSearchClient client = mock(ElasticSearchClient.class);\n+        client.deleteScroll(SCROLL_NAME);\n+        replay(client);\n+\n+        new ElasticSearchScroll(client, response, 5);\n+\n+        verify(client);\n+    }\n+\n+    @Test\n+    public void testLongResultSetDoesNotDeleteScrollOnConstruction() throws IOException {\n+        List x = List.of(new RawQuery.Result<String>(\"\", 0.0),\n+            new RawQuery.Result<String>(\"\", 0.0),\n+            new RawQuery.Result<String>(\"\", 0.0),\n+            new RawQuery.Result<String>(\"\", 0.0),\n+            new RawQuery.Result<String>(\"\", 0.0));\n+        String SCROLL_NAME = \"scroll-2\";\n+        ElasticSearchResponse response = new ElasticSearchResponse();\n+        response.setScrollId(SCROLL_NAME);\n+        response.setTotal(x.size());\n+        response.setResults(x.asJava());\n+\n+        ElasticSearchClient client = mock(ElasticSearchClient.class);\n+        replay(client);\n+\n+        new ElasticSearchScroll(client, response, x.length());\n+\n+        verify(client);\n+    }\n+\n+    @Test\n+    public void testLongResultSetDeleteScrollOnLastShortPage() throws IOException {\n+        List x1 = List.of(new RawQuery.Result<String>(\"1\", 10.0),\n+            new RawQuery.Result<String>(\"2\", 10.0),\n+            new RawQuery.Result<String>(\"3\", 10.0),\n+            new RawQuery.Result<String>(\"4\", 10.0),\n+            new RawQuery.Result<String>(\"5\", 10.0));\n+\n+        List x2 = List.of(new RawQuery.Result<String>(\"6\", 10.0),\n+            new RawQuery.Result<String>(\"7\", 10.0));\n+\n+        String SCROLL_NAME = \"scroll-2\";\n+        ElasticSearchResponse r1 = new ElasticSearchResponse();\n+        r1.setScrollId(SCROLL_NAME);\n+        r1.setTotal(x1.size());\n+        r1.setResults(x1.asJava());\n+\n+        ElasticSearchResponse r2 = new ElasticSearchResponse();\n+        r2.setScrollId(SCROLL_NAME);\n+        r2.setTotal(x2.size());\n+        r2.setResults(x2.asJava());\n+\n+        ElasticSearchClient client = mock(ElasticSearchClient.class);\n+\n+        expect(client.search(SCROLL_NAME)).andReturn(r2);\n+        client.deleteScroll(SCROLL_NAME);\n+        replay(client);\n+\n+        ElasticSearchScroll scroll = new ElasticSearchScroll(client, r1, 5);\n+        for (int i=0 ; i<6 ; i++) {\n+            scroll.hasNext();\n+            scroll.next();\n+        }\n+\n+        verify(client);\n+    }\n+\n+    @Test(expected = NoSuchElementException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NjU3OA=="}, "originalCommit": {"oid": "d41ea169086dfe01dbc244fb5f03be8100e9fe8d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5ODY3Ng==", "bodyText": "done", "url": "https://github.com/JanusGraph/janusgraph/pull/1986#discussion_r385298676", "createdAt": "2020-02-27T18:41:36Z", "author": {"login": "pkendall64"}, "path": "janusgraph-es/src/test/java/org/janusgraph/diskstorage/es/ElasticSearchScrollTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright 2017 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.diskstorage.es;\n+\n+import io.vavr.collection.List;\n+import org.janusgraph.diskstorage.indexing.RawQuery;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.NoSuchElementException;\n+\n+import static org.easymock.EasyMock.mock;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.easymock.EasyMock.expect;\n+\n+public class ElasticSearchScrollTest {\n+    @Test\n+    public void testShortResultSetDeletesScroll() throws IOException {\n+        String SCROLL_NAME = \"scroll-1\";\n+        ElasticSearchResponse response = new ElasticSearchResponse();\n+        response.setScrollId(SCROLL_NAME);\n+        response.setTotal(0);\n+        response.setResults(Collections.emptyList());\n+\n+        ElasticSearchClient client = mock(ElasticSearchClient.class);\n+        client.deleteScroll(SCROLL_NAME);\n+        replay(client);\n+\n+        new ElasticSearchScroll(client, response, 5);\n+\n+        verify(client);\n+    }\n+\n+    @Test\n+    public void testLongResultSetDoesNotDeleteScrollOnConstruction() throws IOException {\n+        List x = List.of(new RawQuery.Result<String>(\"\", 0.0),\n+            new RawQuery.Result<String>(\"\", 0.0),\n+            new RawQuery.Result<String>(\"\", 0.0),\n+            new RawQuery.Result<String>(\"\", 0.0),\n+            new RawQuery.Result<String>(\"\", 0.0));\n+        String SCROLL_NAME = \"scroll-2\";\n+        ElasticSearchResponse response = new ElasticSearchResponse();\n+        response.setScrollId(SCROLL_NAME);\n+        response.setTotal(x.size());\n+        response.setResults(x.asJava());\n+\n+        ElasticSearchClient client = mock(ElasticSearchClient.class);\n+        replay(client);\n+\n+        new ElasticSearchScroll(client, response, x.length());\n+\n+        verify(client);\n+    }\n+\n+    @Test\n+    public void testLongResultSetDeleteScrollOnLastShortPage() throws IOException {\n+        List x1 = List.of(new RawQuery.Result<String>(\"1\", 10.0),\n+            new RawQuery.Result<String>(\"2\", 10.0),\n+            new RawQuery.Result<String>(\"3\", 10.0),\n+            new RawQuery.Result<String>(\"4\", 10.0),\n+            new RawQuery.Result<String>(\"5\", 10.0));\n+\n+        List x2 = List.of(new RawQuery.Result<String>(\"6\", 10.0),\n+            new RawQuery.Result<String>(\"7\", 10.0));\n+\n+        String SCROLL_NAME = \"scroll-2\";\n+        ElasticSearchResponse r1 = new ElasticSearchResponse();\n+        r1.setScrollId(SCROLL_NAME);\n+        r1.setTotal(x1.size());\n+        r1.setResults(x1.asJava());\n+\n+        ElasticSearchResponse r2 = new ElasticSearchResponse();\n+        r2.setScrollId(SCROLL_NAME);\n+        r2.setTotal(x2.size());\n+        r2.setResults(x2.asJava());\n+\n+        ElasticSearchClient client = mock(ElasticSearchClient.class);\n+\n+        expect(client.search(SCROLL_NAME)).andReturn(r2);\n+        client.deleteScroll(SCROLL_NAME);\n+        replay(client);\n+\n+        ElasticSearchScroll scroll = new ElasticSearchScroll(client, r1, 5);\n+        for (int i=0 ; i<6 ; i++) {\n+            scroll.hasNext();\n+            scroll.next();\n+        }\n+\n+        verify(client);\n+    }\n+\n+    @Test(expected = NoSuchElementException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NjU3OA=="}, "originalCommit": {"oid": "d41ea169086dfe01dbc244fb5f03be8100e9fe8d"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjg3MTM4OnYy", "diffSide": "RIGHT", "path": "janusgraph-es/src/test/java/org/janusgraph/diskstorage/es/ElasticSearchScrollTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyODozN1rOFu87cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo0MTo0M1rOFvcxJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzA3Mg==", "bodyText": "nit: this should be the junit5 test-method.", "url": "https://github.com/JanusGraph/janusgraph/pull/1986#discussion_r384777072", "createdAt": "2020-02-26T21:28:37Z", "author": {"login": "farodin91"}, "path": "janusgraph-es/src/test/java/org/janusgraph/diskstorage/es/ElasticSearchScrollTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright 2017 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.diskstorage.es;\n+\n+import io.vavr.collection.List;\n+import org.janusgraph.diskstorage.indexing.RawQuery;\n+import org.junit.Test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41ea169086dfe01dbc244fb5f03be8100e9fe8d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1NDA4MA==", "bodyText": "fixed", "url": "https://github.com/JanusGraph/janusgraph/pull/1986#discussion_r384854080", "createdAt": "2020-02-27T00:47:06Z", "author": {"login": "pkendall64"}, "path": "janusgraph-es/src/test/java/org/janusgraph/diskstorage/es/ElasticSearchScrollTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright 2017 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.diskstorage.es;\n+\n+import io.vavr.collection.List;\n+import org.janusgraph.diskstorage.indexing.RawQuery;\n+import org.junit.Test;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzA3Mg=="}, "originalCommit": {"oid": "d41ea169086dfe01dbc244fb5f03be8100e9fe8d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5ODcyNQ==", "bodyText": "done", "url": "https://github.com/JanusGraph/janusgraph/pull/1986#discussion_r385298725", "createdAt": "2020-02-27T18:41:43Z", "author": {"login": "pkendall64"}, "path": "janusgraph-es/src/test/java/org/janusgraph/diskstorage/es/ElasticSearchScrollTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright 2017 JanusGraph Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package org.janusgraph.diskstorage.es;\n+\n+import io.vavr.collection.List;\n+import org.janusgraph.diskstorage.indexing.RawQuery;\n+import org.junit.Test;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzA3Mg=="}, "originalCommit": {"oid": "d41ea169086dfe01dbc244fb5f03be8100e9fe8d"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1538, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}