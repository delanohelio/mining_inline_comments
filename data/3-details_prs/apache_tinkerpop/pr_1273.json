{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODkwNTEw", "number": 1273, "title": "TINKERPOP-2349 Migrate JSON serialization to System.Text.Json in Gremlin.NET", "bodyText": "https://issues.apache.org/jira/browse/TINKERPOP-2349\nResults from a simple benchmark with BenchmarkDotNet showed that this improves the performance of the deserialization roughly by a factor of 2. The deserialization now also allocates far less memory, by a factor of ~7 which also results in less garbage collections. The performance of the serialization however stayed basically the same. It got even slightly slower by ~4% in this benchmark, but it also\nallocates a bit less memory (-12%). This seems acceptable in my opinion, given that it is only a very small increase, especially compared to the differences for the deserialization and because it allocates less\nmemory now.\nOutput from BenchmarkDotNet:\nBefore:\n\n\n\nMethod\nMean\nError\nStdDev\nGen 0\nGen 1\nGen 2\nAllocated\n\n\n\n\nSerialization\n22.41 us\n0.616 us\n0.659 us\n1.5564\n-\n-\n9.72 KB\n\n\nDeserialization\n40.50 us\n1.075 us\n1.150 us\n6.3477\n0.6104\n-\n39.06 KB\n\n\n\nAfter:\n\n\n\nMethod\nMean\nError\nStdDev\nGen 0\nGen 1\nGen 2\nAllocated\n\n\n\n\nSerialization\n23.25 us\n0.103 us\n0.091 us\n1.3733\n-\n-\n8.58 KB\n\n\nDeserialization\n25.89 us\n0.583 us\n0.545 us\n0.9155\n-\n-\n5.74 KB\n\n\n\nAnother advantage of using System.Text.Json is that it supports Span<T> so we could make use of that in the future to reduce memory allocations in the driver even more.\nVOTE +1", "createdAt": "2020-04-01T10:01:27Z", "url": "https://github.com/apache/tinkerpop/pull/1273", "merged": true, "mergeCommit": {"oid": "0ea73362630a4f4a242964a0cb723bc89e90c9ca"}, "closed": true, "closedAt": "2020-04-09T08:42:03Z", "author": {"login": "FlorianHockmann"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTVhcpgFqTM4NTQ3MTQxNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVpbjtABqjMyMTQ1NzMwMDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDcxNDE3", "url": "https://github.com/apache/tinkerpop/pull/1273#pullrequestreview-385471417", "createdAt": "2020-04-01T10:49:54Z", "commit": {"oid": "2cbcbfb17539a20250893d5346e33dd3e66e10f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0OTo1NFrOF-7K9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo0OTo1NFrOF-7K9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNTQ5NA==", "bodyText": "I think there's no need to add netcoreapp3.0 as a target for the core project, given that netcoreapp3.0 implements netstandard2.0.", "url": "https://github.com/apache/tinkerpop/pull/1273#discussion_r401525494", "createdAt": "2020-04-01T10:49:54Z", "author": {"login": "jorgebay"}, "path": "gremlin-dotnet/glv/Gremlin.Net.csproj.template", "diffHunk": "@@ -19,7 +19,7 @@ limitations under the License.\n <Project Sdk=\"Microsoft.NET.Sdk\">\n \n   <PropertyGroup Label=\"Build\">\n-    <TargetFramework>netstandard2.0</TargetFramework>\n+    <TargetFrameworks>netstandard2.0;netcoreapp3.0</TargetFrameworks>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cbcbfb17539a20250893d5346e33dd3e66e10f1"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2cbcbfb17539a20250893d5346e33dd3e66e10f1", "author": {"user": {"login": "FlorianHockmann", "name": "Florian Hockmann"}}, "url": "https://github.com/apache/tinkerpop/commit/2cbcbfb17539a20250893d5346e33dd3e66e10f1", "committedDate": "2020-04-01T09:54:58Z", "message": "TINKERPOP-2349 Migrate to System.Text.Json\n\n.NET Core 3.0 is added as a target framework as it already includes\nsupport for System.Text.Json and therefore doesn't need the NuGet\npackage.\n\nResults from a simple benchmark with BenchmarkDotNet showed that this\nimproves the performance of the deserialization roughly by a factor of\n2. The deserialization now also allocates far less memory, by a factor\nof ~7 which also results in less garbage collections.\nThe performance of the serialization however stayed basically the same.\nIt got even slightly slower by ~4% in this benchmark, but it also\nallocates a bit less memory (-12%). This seems acceptable in my opinion,\ngiven that it is only a very small increase, especially compared to the\ndifferences for the deserialization and because it allocates less\nmemory now.\n\nOutput from BenchmarkDotNet:\n\nBefore:\n\n|          Method |     Mean |    Error |   StdDev |  Gen 0 |  Gen 1 | Gen 2 | Allocated |\n|---------------- |---------:|---------:|---------:|-------:|-------:|------:|----------:|\n|   Serialization | 22.41 us | 0.616 us | 0.659 us | 1.5564 |      - |     - |   9.72 KB |\n| Deserialization | 40.50 us | 1.075 us | 1.150 us | 6.3477 | 0.6104 |     - |  39.06 KB |\n\nAfter:\n\n|          Method |     Mean |    Error |   StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\n|---------------- |---------:|---------:|---------:|-------:|------:|------:|----------:|\n|   Serialization | 23.25 us | 0.103 us | 0.091 us | 1.3733 |     - |     - |   8.58 KB |\n| Deserialization | 25.89 us | 0.583 us | 0.545 us | 0.9155 |     - |     - |   5.74 KB |"}, "afterCommit": {"oid": "a1a8e1ec52a235bd5a62fc1009597a04a955dabe", "author": {"user": {"login": "FlorianHockmann", "name": "Florian Hockmann"}}, "url": "https://github.com/apache/tinkerpop/commit/a1a8e1ec52a235bd5a62fc1009597a04a955dabe", "committedDate": "2020-04-01T13:25:49Z", "message": " TINKERPOP-2349 Migrate to System.Text.Json\n\nResults from a simple benchmark with BenchmarkDotNet showed that this\nimproves the performance of the deserialization roughly by a factor of\n2. The deserialization now also allocates far less memory, by a factor\nof ~7 which also results in less garbage collections.\nThe performance of the serialization however stayed basically the same.\nIt got even slightly slower by ~4% in this benchmark, but it also\nallocates a bit less memory (-12%). This seems acceptable in my opinion,\ngiven that it is only a very small increase, especially compared to the\ndifferences for the deserialization and because it allocates less\nmemory now.\n\nOutput from BenchmarkDotNet:\n\nBefore:\n\n|          Method |     Mean |    Error |   StdDev |  Gen 0 |  Gen 1 | Gen 2 | Allocated |\n|---------------- |---------:|---------:|---------:|-------:|-------:|------:|----------:|\n|   Serialization | 22.41 us | 0.616 us | 0.659 us | 1.5564 |      - |     - |   9.72 KB |\n| Deserialization | 40.50 us | 1.075 us | 1.150 us | 6.3477 | 0.6104 |     - |  39.06 KB |\n\nAfter:\n\n|          Method |     Mean |    Error |   StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\n|---------------- |---------:|---------:|---------:|-------:|------:|------:|----------:|\n|   Serialization | 23.25 us | 0.103 us | 0.091 us | 1.3733 |     - |     - |   8.58 KB |\n| Deserialization | 25.89 us | 0.583 us | 0.545 us | 0.9155 |     - |     - |   5.74 KB |"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTg0MzEy", "url": "https://github.com/apache/tinkerpop/pull/1273#pullrequestreview-385584312", "createdAt": "2020-04-01T13:28:27Z", "commit": {"oid": "a1a8e1ec52a235bd5a62fc1009597a04a955dabe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ea73362630a4f4a242964a0cb723bc89e90c9ca", "author": {"user": {"login": "FlorianHockmann", "name": "Florian Hockmann"}}, "url": "https://github.com/apache/tinkerpop/commit/0ea73362630a4f4a242964a0cb723bc89e90c9ca", "committedDate": "2020-04-08T15:14:05Z", "message": " TINKERPOP-2349 Migrate to System.Text.Json\n\nResults from a simple benchmark with BenchmarkDotNet showed that this\nimproves the performance of the deserialization roughly by a factor of\n2. The deserialization now also allocates far less memory, by a factor\nof ~7 which also results in less garbage collections.\nThe performance of the serialization however stayed basically the same.\nIt got even slightly slower by ~4% in this benchmark, but it also\nallocates a bit less memory (-12%). This seems acceptable in my opinion,\ngiven that it is only a very small increase, especially compared to the\ndifferences for the deserialization and because it allocates less\nmemory now.\n\nOutput from BenchmarkDotNet:\n\nBefore:\n\n|          Method |     Mean |    Error |   StdDev |  Gen 0 |  Gen 1 | Gen 2 | Allocated |\n|---------------- |---------:|---------:|---------:|-------:|-------:|------:|----------:|\n|   Serialization | 22.41 us | 0.616 us | 0.659 us | 1.5564 |      - |     - |   9.72 KB |\n| Deserialization | 40.50 us | 1.075 us | 1.150 us | 6.3477 | 0.6104 |     - |  39.06 KB |\n\nAfter:\n\n|          Method |     Mean |    Error |   StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\n|---------------- |---------:|---------:|---------:|-------:|------:|------:|----------:|\n|   Serialization | 23.25 us | 0.103 us | 0.091 us | 1.3733 |     - |     - |   8.58 KB |\n| Deserialization | 25.89 us | 0.583 us | 0.545 us | 0.9155 |     - |     - |   5.74 KB |"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1a8e1ec52a235bd5a62fc1009597a04a955dabe", "author": {"user": {"login": "FlorianHockmann", "name": "Florian Hockmann"}}, "url": "https://github.com/apache/tinkerpop/commit/a1a8e1ec52a235bd5a62fc1009597a04a955dabe", "committedDate": "2020-04-01T13:25:49Z", "message": " TINKERPOP-2349 Migrate to System.Text.Json\n\nResults from a simple benchmark with BenchmarkDotNet showed that this\nimproves the performance of the deserialization roughly by a factor of\n2. The deserialization now also allocates far less memory, by a factor\nof ~7 which also results in less garbage collections.\nThe performance of the serialization however stayed basically the same.\nIt got even slightly slower by ~4% in this benchmark, but it also\nallocates a bit less memory (-12%). This seems acceptable in my opinion,\ngiven that it is only a very small increase, especially compared to the\ndifferences for the deserialization and because it allocates less\nmemory now.\n\nOutput from BenchmarkDotNet:\n\nBefore:\n\n|          Method |     Mean |    Error |   StdDev |  Gen 0 |  Gen 1 | Gen 2 | Allocated |\n|---------------- |---------:|---------:|---------:|-------:|-------:|------:|----------:|\n|   Serialization | 22.41 us | 0.616 us | 0.659 us | 1.5564 |      - |     - |   9.72 KB |\n| Deserialization | 40.50 us | 1.075 us | 1.150 us | 6.3477 | 0.6104 |     - |  39.06 KB |\n\nAfter:\n\n|          Method |     Mean |    Error |   StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\n|---------------- |---------:|---------:|---------:|-------:|------:|------:|----------:|\n|   Serialization | 23.25 us | 0.103 us | 0.091 us | 1.3733 |     - |     - |   8.58 KB |\n| Deserialization | 25.89 us | 0.583 us | 0.545 us | 0.9155 |     - |     - |   5.74 KB |"}, "afterCommit": {"oid": "0ea73362630a4f4a242964a0cb723bc89e90c9ca", "author": {"user": {"login": "FlorianHockmann", "name": "Florian Hockmann"}}, "url": "https://github.com/apache/tinkerpop/commit/0ea73362630a4f4a242964a0cb723bc89e90c9ca", "committedDate": "2020-04-08T15:14:05Z", "message": " TINKERPOP-2349 Migrate to System.Text.Json\n\nResults from a simple benchmark with BenchmarkDotNet showed that this\nimproves the performance of the deserialization roughly by a factor of\n2. The deserialization now also allocates far less memory, by a factor\nof ~7 which also results in less garbage collections.\nThe performance of the serialization however stayed basically the same.\nIt got even slightly slower by ~4% in this benchmark, but it also\nallocates a bit less memory (-12%). This seems acceptable in my opinion,\ngiven that it is only a very small increase, especially compared to the\ndifferences for the deserialization and because it allocates less\nmemory now.\n\nOutput from BenchmarkDotNet:\n\nBefore:\n\n|          Method |     Mean |    Error |   StdDev |  Gen 0 |  Gen 1 | Gen 2 | Allocated |\n|---------------- |---------:|---------:|---------:|-------:|-------:|------:|----------:|\n|   Serialization | 22.41 us | 0.616 us | 0.659 us | 1.5564 |      - |     - |   9.72 KB |\n| Deserialization | 40.50 us | 1.075 us | 1.150 us | 6.3477 | 0.6104 |     - |  39.06 KB |\n\nAfter:\n\n|          Method |     Mean |    Error |   StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\n|---------------- |---------:|---------:|---------:|-------:|------:|------:|----------:|\n|   Serialization | 23.25 us | 0.103 us | 0.091 us | 1.3733 |     - |     - |   8.58 KB |\n| Deserialization | 25.89 us | 0.583 us | 0.545 us | 0.9155 |     - |     - |   5.74 KB |"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4429, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}