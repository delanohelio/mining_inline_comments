{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MzgyNzg5", "number": 1371, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDozNDozMVrOFFNeLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDo0MDo1MVrOFFNtRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDA3OTE5OnYy", "diffSide": "RIGHT", "path": "gremlin-groovy/src/test/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptCheckerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDozNDozMVrOIFnAiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDozNDozMVrOIFnAiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1MjkwNQ==", "bodyText": "This should probably have a ; at the end?", "url": "https://github.com/apache/tinkerpop/pull/1371#discussion_r542752905", "createdAt": "2020-12-14T20:34:31Z", "author": {"login": "divijvaidya"}, "path": "gremlin-groovy/src/test/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptCheckerTest.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.groovy.jsr223;\n+\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+import static org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinScriptChecker.EMPTY_RESULT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+\n+public class GremlinScriptCheckerTest {\n+\n+    @Test\n+    public void shouldNotFindTimeout() {\n+        assertEquals(Optional.empty(), GremlinScriptChecker.parse(\"g.with(true).V().out('knows')\").getTimeout());\n+    }\n+\n+    @Test\n+    public void shouldReturnEmpty() {\n+        assertSame(EMPTY_RESULT, GremlinScriptChecker.parse(\"\"));\n+    }\n+\n+    @Test\n+    public void shouldNotFindTimeoutCozWeCommentedItOut() {\n+        assertEquals(Optional.empty(), GremlinScriptChecker.parse(\"g.\\n\" +\n+                \"                                                  // with('evaluationTimeout', 1000L).\\n\" +\n+                \"                                                  with(true).V().out('knows')\").getTimeout());\n+    }\n+\n+    @Test\n+    public void shouldIdentifyTimeoutAsStringKeySingleQuoted() {\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with('evaluationTimeout', 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with('scriptEvaluationTimeout', 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+    }\n+\n+    @Test\n+    public void shouldIdentifyTimeoutAsStringKeyDoubleQuoted() {\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with(\\\"evaluationTimeout\\\", 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with(\\\"scriptEvaluationTimeout\\\", 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+    }\n+\n+    @Test\n+    public void shouldIdentifyTimeoutAsTokenKey() {\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with(Tokens.ARGS_EVAL_TIMEOUT, 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with(Tokens.ARGS_SCRIPT_EVAL_TIMEOUT, 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+    }\n+\n+    @Test\n+    public void shouldIdentifyTimeoutAsTokenKeyWithoutClassName() {\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with(ARGS_EVAL_TIMEOUT, 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with(ARGS_SCRIPT_EVAL_TIMEOUT, 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+    }\n+\n+    @Test\n+    public void shouldIdentifyMultipleTimeouts() {\n+        assertEquals(6000, GremlinScriptChecker.parse(\"g.with('evaluationTimeout', 1000L).with(true).V().out('knows');\" +\n+                \"g.with('evaluationTimeout', 1000L).with(true).V().out('knows')\\n\" +\n+                \"                                                   //g.with('evaluationTimeout', 1000L).with(true).V().out('knows')\\n\" +\n+                \"                                                   /* g.with('evaluationTimeout', 1000L).with(true).V().out('knows')*/\\n\" +\n+                \"                                                   /* \\n\" +\n+                \"g.with('evaluationTimeout', 1000L).with(true).V().out('knows') \\n\" +\n+                \"*/ \\n\" +\n+                \"                                                   g.with('evaluationTimeout', 1000L).with(true).V().out('knows')\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5cb7ec208f1355046b2c56f21dcc9ebfc309c01"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDEwMDU3OnYy", "diffSide": "RIGHT", "path": "gremlin-groovy/src/main/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDozODowN1rOIFnOCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo1MTozOVrOIGCNLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1NjM2MA==", "bodyText": "Documentation on this regEx would be nice. Something like:\n//.$ --> match strings starting with // followed by zero or more chars till the end of line\n| --> OR\n\\(. --> match string ...\n...\nYou can choose to copy these comments from an online regex tester. They usually print out a detailed description of the regex.", "url": "https://github.com/apache/tinkerpop/pull/1371#discussion_r542756360", "createdAt": "2020-12-14T20:38:07Z", "author": {"login": "divijvaidya"}, "path": "gremlin-groovy/src/main/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptChecker.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.groovy.jsr223;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Processes Gremlin strings using regex so as to try to detect certain properties from the script without actual\n+ * having to execute a {@code eval()} on it.\n+ */\n+public class GremlinScriptChecker {\n+\n+    public static final Result EMPTY_RESULT = new Result(0);\n+    private static final List<String> tokens = Arrays.asList(\"evaluationTimeout\", \"scriptEvaluationTimeout\",\n+                                                             \"ARGS_EVAL_TIMEOUT\", \"ARGS_SCRIPT_EVAL_TIMEOUT\");\n+\n+    private static final Pattern patternClean = Pattern.compile(\"//.*$|/\\\\*(.|[\\\\r\\\\n])*?\\\\*/|\\\\s\", Pattern.MULTILINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5cb7ec208f1355046b2c56f21dcc9ebfc309c01"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE5ODUxMQ==", "bodyText": "Interesting - the tool I've always used didn't produce that nice explain stuff. I didn't realize that such a thing existed. \ud83d\udc4d", "url": "https://github.com/apache/tinkerpop/pull/1371#discussion_r543198511", "createdAt": "2020-12-15T09:51:39Z", "author": {"login": "spmallette"}, "path": "gremlin-groovy/src/main/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptChecker.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.groovy.jsr223;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Processes Gremlin strings using regex so as to try to detect certain properties from the script without actual\n+ * having to execute a {@code eval()} on it.\n+ */\n+public class GremlinScriptChecker {\n+\n+    public static final Result EMPTY_RESULT = new Result(0);\n+    private static final List<String> tokens = Arrays.asList(\"evaluationTimeout\", \"scriptEvaluationTimeout\",\n+                                                             \"ARGS_EVAL_TIMEOUT\", \"ARGS_SCRIPT_EVAL_TIMEOUT\");\n+\n+    private static final Pattern patternClean = Pattern.compile(\"//.*$|/\\\\*(.|[\\\\r\\\\n])*?\\\\*/|\\\\s\", Pattern.MULTILINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1NjM2MA=="}, "originalCommit": {"oid": "f5cb7ec208f1355046b2c56f21dcc9ebfc309c01"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDEwMzY3OnYy", "diffSide": "RIGHT", "path": "gremlin-groovy/src/main/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDozODozN1rOIFnQFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDozODozN1rOIFnQFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1Njg4NA==", "bodyText": "Please add documentation about this regex so that reader understands what it is doing.", "url": "https://github.com/apache/tinkerpop/pull/1371#discussion_r542756884", "createdAt": "2020-12-14T20:38:37Z", "author": {"login": "divijvaidya"}, "path": "gremlin-groovy/src/main/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptChecker.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.groovy.jsr223;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Processes Gremlin strings using regex so as to try to detect certain properties from the script without actual\n+ * having to execute a {@code eval()} on it.\n+ */\n+public class GremlinScriptChecker {\n+\n+    public static final Result EMPTY_RESULT = new Result(0);\n+    private static final List<String> tokens = Arrays.asList(\"evaluationTimeout\", \"scriptEvaluationTimeout\",\n+                                                             \"ARGS_EVAL_TIMEOUT\", \"ARGS_SCRIPT_EVAL_TIMEOUT\");\n+\n+    private static final Pattern patternClean = Pattern.compile(\"//.*$|/\\\\*(.|[\\\\r\\\\n])*?\\\\*/|\\\\s\", Pattern.MULTILINE);\n+    private static final String timeoutTokens = \"[\\\"']evaluationTimeout[\\\"']|[\\\"']scriptEvaluationTimeout[\\\"']|(?:Tokens\\\\.)?ARGS_EVAL_TIMEOUT|(?:Tokens\\\\.)?ARGS_SCRIPT_EVAL_TIMEOUT\";\n+    private static final Pattern patternTimeout = Pattern.compile(\"\\\\.with\\\\((?:\" + timeoutTokens + \"),(\\\\d*)(:?L|l)?\\\\)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5cb7ec208f1355046b2c56f21dcc9ebfc309c01"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDExNzgxOnYy", "diffSide": "RIGHT", "path": "gremlin-groovy/src/main/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDo0MDo1MVrOIFnZBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo1Mzo0MVrOIGCS0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1OTE3NQ==", "bodyText": "Please document the behaviour for multiple queries (that we add their timeouts). This should probably go in reference docs as well.", "url": "https://github.com/apache/tinkerpop/pull/1371#discussion_r542759175", "createdAt": "2020-12-14T20:40:51Z", "author": {"login": "divijvaidya"}, "path": "gremlin-groovy/src/main/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptChecker.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.groovy.jsr223;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5cb7ec208f1355046b2c56f21dcc9ebfc309c01"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE5OTk1Mg==", "bodyText": "It is documented here: https://github.com/apache/tinkerpop/pull/1371/files#diff-0c5246d79c924132b94fc6af68af66b1f81faebac2410ca9e2af663388c31bb2R73-R79\nWill add something to the reference documentation.", "url": "https://github.com/apache/tinkerpop/pull/1371#discussion_r543199952", "createdAt": "2020-12-15T09:53:41Z", "author": {"login": "spmallette"}, "path": "gremlin-groovy/src/main/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptChecker.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.groovy.jsr223;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1OTE3NQ=="}, "originalCommit": {"oid": "f5cb7ec208f1355046b2c56f21dcc9ebfc309c01"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4152, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}