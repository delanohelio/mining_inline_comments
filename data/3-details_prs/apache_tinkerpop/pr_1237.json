{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTU1OTA3", "number": 1237, "title": "TINKERPOP-2325 - Modifications for use of indexes in FILTER", "bodyText": "I modified only the class \"WhereTrafersalBuilder\" and some row in SparqlToGremlinCompiler in respect to the branch master.\nPlease note that my optimization tecnique involves looking into all source triples for creating a more concise one. For this reason it has to be evaluated if this kind of optimization has to be done in this classes (where formally you have to translate the single triple in the single traversal step) or in the SparqlTraversalStrategy that optimize the whole traversal.", "createdAt": "2020-01-13T14:46:46Z", "url": "https://github.com/apache/tinkerpop/pull/1237", "merged": true, "mergeCommit": {"oid": "3150d599d59e97a2fc865947622072e3ad36968c"}, "closed": true, "closedAt": "2020-01-28T14:24:21Z", "author": {"login": "thevalzo"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb59bHFAH2gAyMzYyMTU1OTA3OjhkYjljMWQ0OGVmZGYxYzgxYjZiZTY5MDM5NjFiYzZkZjdjY2QzZGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-eZ_7gH2gAyMzYyMTU1OTA3OjMxNTBkNTk5ZDU5ZTk3YTJmYzg2NTk0NzYyMjA3MmUzYWQzNjk2OGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8db9c1d48efdf1c81b6be6903961bc6df7ccd3db", "author": {"user": {"login": "thevalzo", "name": null}}, "url": "https://github.com/apache/tinkerpop/commit/8db9c1d48efdf1c81b6be6903961bc6df7ccd3db", "committedDate": "2020-01-13T14:42:26Z", "message": "Modifications for better indexing in FILTER"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0468a23bdf17394e82d4add215846a0d76524211", "author": {"user": {"login": "thevalzo", "name": null}}, "url": "https://github.com/apache/tinkerpop/commit/0468a23bdf17394e82d4add215846a0d76524211", "committedDate": "2020-01-13T14:45:18Z", "message": "Modifications for use of indexes in FILTER"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4c4eb0e12bf69a63b5318f9e95461fd882d3973", "author": {"user": null}, "url": "https://github.com/apache/tinkerpop/commit/b4c4eb0e12bf69a63b5318f9e95461fd882d3973", "committedDate": "2020-01-21T13:46:49Z", "message": "addedd missing imports and other small fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Njg1NDE5", "url": "https://github.com/apache/tinkerpop/pull/1237#pullrequestreview-348685419", "createdAt": "2020-01-27T14:06:49Z", "commit": {"oid": "b4c4eb0e12bf69a63b5318f9e95461fd882d3973"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDowNjo1MFrOFiDxyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDowNjo1MFrOFiDxyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NzgwMw==", "bodyText": "I'm not terribly familiar with the APIs at play here so I'm not sure what to expect - if the \"triples\" List has multiple Triple objects in it, this function will only return a GraphTraversal using the last one and the others will be ignored. Is that ok?", "url": "https://github.com/apache/tinkerpop/pull/1237#discussion_r371257803", "createdAt": "2020-01-27T14:06:50Z", "author": {"login": "spmallette"}, "path": "sparql-gremlin/src/main/java/org/apache/tinkerpop/gremlin/sparql/WhereTraversalBuilder.java", "diffHunk": "@@ -47,79 +49,248 @@\n     /**\n      * Converts a general {@code Expr} to an anonymous {@link GraphTraversal}.\n      */\n-    static GraphTraversal<?, ?> transform(final Expr expression) {\n-        if (expression instanceof E_Equals) return transform((E_Equals) expression);\n-        if (expression instanceof E_NotEquals) return transform((E_NotEquals) expression);\n-        if (expression instanceof E_LessThan) return transform((E_LessThan) expression);\n-        if (expression instanceof E_LessThanOrEqual) return transform((E_LessThanOrEqual) expression);\n-        if (expression instanceof E_GreaterThan) return transform((E_GreaterThan) expression);\n-        if (expression instanceof E_GreaterThanOrEqual) return transform((E_GreaterThanOrEqual) expression);\n-        if (expression instanceof E_LogicalAnd) return transform((E_LogicalAnd) expression);\n-        if (expression instanceof E_LogicalOr) return transform((E_LogicalOr) expression);\n-        if (expression instanceof E_Exists) return transform((E_Exists) expression);\n-        if (expression instanceof E_NotExists) return transform((E_NotExists) expression);\n+    public static GraphTraversal<?, ?> transform(final Expr expression, List<Triple> triples) {\n+        if (expression instanceof E_Equals) return transform((E_Equals) expression, triples);\n+        if (expression instanceof E_NotEquals) return transform((E_NotEquals) expression, triples);\n+        if (expression instanceof E_LessThan) return transform((E_LessThan) expression, triples);\n+        if (expression instanceof E_LessThanOrEqual) return transform((E_LessThanOrEqual) expression, triples);\n+        if (expression instanceof E_GreaterThan) return transform((E_GreaterThan) expression, triples);\n+        if (expression instanceof E_GreaterThanOrEqual) return transform((E_GreaterThanOrEqual) expression, triples);\n+        if (expression instanceof E_LogicalAnd) return transform((E_LogicalAnd) expression, triples);\n+        if (expression instanceof E_LogicalOr) return transform((E_LogicalOr) expression, triples);\n+        if (expression instanceof E_Exists) return transform((E_Exists) expression, triples);\n+        if (expression instanceof E_NotExists) return transform((E_NotExists) expression, triples);\n         throw new IllegalStateException(String.format(\"Unhandled expression: %s\", expression));\n     }\n \n-    private static GraphTraversal<?, ?> transform(final E_Equals expression) {\n-        final Object value = expression.getArg2().getConstant().getNode().getLiteralValue();\n-        return __.as(expression.getArg1().getVarName()).is(P.eq(value));\n+   public static GraphTraversal<?, ?> transform(final E_Equals e, List<Triple> triples) {\n+        GraphTraversal traversal = null;\n+         for(final Triple triple : triples){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4c4eb0e12bf69a63b5318f9e95461fd882d3973"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3150d599d59e97a2fc865947622072e3ad36968c", "author": {"user": {"login": "thevalzo", "name": null}}, "url": "https://github.com/apache/tinkerpop/commit/3150d599d59e97a2fc865947622072e3ad36968c", "committedDate": "2020-01-27T15:23:47Z", "message": "improved readability of returned traversal"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4406, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}