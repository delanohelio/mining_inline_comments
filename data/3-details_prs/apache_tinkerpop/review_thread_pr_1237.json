{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTU1OTA3", "number": 1237, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDowNjo1MFrODa41-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDowNjo1MFrODa41-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTIwODkwOnYy", "diffSide": "RIGHT", "path": "sparql-gremlin/src/main/java/org/apache/tinkerpop/gremlin/sparql/WhereTraversalBuilder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDowNjo1MFrOFiDxyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo1NzowMlrOFiFlaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NzgwMw==", "bodyText": "I'm not terribly familiar with the APIs at play here so I'm not sure what to expect - if the \"triples\" List has multiple Triple objects in it, this function will only return a GraphTraversal using the last one and the others will be ignored. Is that ok?", "url": "https://github.com/apache/tinkerpop/pull/1237#discussion_r371257803", "createdAt": "2020-01-27T14:06:50Z", "author": {"login": "spmallette"}, "path": "sparql-gremlin/src/main/java/org/apache/tinkerpop/gremlin/sparql/WhereTraversalBuilder.java", "diffHunk": "@@ -47,79 +49,248 @@\n     /**\n      * Converts a general {@code Expr} to an anonymous {@link GraphTraversal}.\n      */\n-    static GraphTraversal<?, ?> transform(final Expr expression) {\n-        if (expression instanceof E_Equals) return transform((E_Equals) expression);\n-        if (expression instanceof E_NotEquals) return transform((E_NotEquals) expression);\n-        if (expression instanceof E_LessThan) return transform((E_LessThan) expression);\n-        if (expression instanceof E_LessThanOrEqual) return transform((E_LessThanOrEqual) expression);\n-        if (expression instanceof E_GreaterThan) return transform((E_GreaterThan) expression);\n-        if (expression instanceof E_GreaterThanOrEqual) return transform((E_GreaterThanOrEqual) expression);\n-        if (expression instanceof E_LogicalAnd) return transform((E_LogicalAnd) expression);\n-        if (expression instanceof E_LogicalOr) return transform((E_LogicalOr) expression);\n-        if (expression instanceof E_Exists) return transform((E_Exists) expression);\n-        if (expression instanceof E_NotExists) return transform((E_NotExists) expression);\n+    public static GraphTraversal<?, ?> transform(final Expr expression, List<Triple> triples) {\n+        if (expression instanceof E_Equals) return transform((E_Equals) expression, triples);\n+        if (expression instanceof E_NotEquals) return transform((E_NotEquals) expression, triples);\n+        if (expression instanceof E_LessThan) return transform((E_LessThan) expression, triples);\n+        if (expression instanceof E_LessThanOrEqual) return transform((E_LessThanOrEqual) expression, triples);\n+        if (expression instanceof E_GreaterThan) return transform((E_GreaterThan) expression, triples);\n+        if (expression instanceof E_GreaterThanOrEqual) return transform((E_GreaterThanOrEqual) expression, triples);\n+        if (expression instanceof E_LogicalAnd) return transform((E_LogicalAnd) expression, triples);\n+        if (expression instanceof E_LogicalOr) return transform((E_LogicalOr) expression, triples);\n+        if (expression instanceof E_Exists) return transform((E_Exists) expression, triples);\n+        if (expression instanceof E_NotExists) return transform((E_NotExists) expression, triples);\n         throw new IllegalStateException(String.format(\"Unhandled expression: %s\", expression));\n     }\n \n-    private static GraphTraversal<?, ?> transform(final E_Equals expression) {\n-        final Object value = expression.getArg2().getConstant().getNode().getLiteralValue();\n-        return __.as(expression.getArg1().getVarName()).is(P.eq(value));\n+   public static GraphTraversal<?, ?> transform(final E_Equals e, List<Triple> triples) {\n+        GraphTraversal traversal = null;\n+         for(final Triple triple : triples){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4c4eb0e12bf69a63b5318f9e95461fd882d3973"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI3ODY2OQ==", "bodyText": "In this function I iterate over \"triples\" to search for the variable used in FILTER condition, ( ?b in my example) so I can replace it with the label (name). Once i found it, i can discard the others triples. Maybe  I could add a breack instruction in the last IF for clarity.", "url": "https://github.com/apache/tinkerpop/pull/1237#discussion_r371278669", "createdAt": "2020-01-27T14:42:17Z", "author": {"login": "thevalzo"}, "path": "sparql-gremlin/src/main/java/org/apache/tinkerpop/gremlin/sparql/WhereTraversalBuilder.java", "diffHunk": "@@ -47,79 +49,248 @@\n     /**\n      * Converts a general {@code Expr} to an anonymous {@link GraphTraversal}.\n      */\n-    static GraphTraversal<?, ?> transform(final Expr expression) {\n-        if (expression instanceof E_Equals) return transform((E_Equals) expression);\n-        if (expression instanceof E_NotEquals) return transform((E_NotEquals) expression);\n-        if (expression instanceof E_LessThan) return transform((E_LessThan) expression);\n-        if (expression instanceof E_LessThanOrEqual) return transform((E_LessThanOrEqual) expression);\n-        if (expression instanceof E_GreaterThan) return transform((E_GreaterThan) expression);\n-        if (expression instanceof E_GreaterThanOrEqual) return transform((E_GreaterThanOrEqual) expression);\n-        if (expression instanceof E_LogicalAnd) return transform((E_LogicalAnd) expression);\n-        if (expression instanceof E_LogicalOr) return transform((E_LogicalOr) expression);\n-        if (expression instanceof E_Exists) return transform((E_Exists) expression);\n-        if (expression instanceof E_NotExists) return transform((E_NotExists) expression);\n+    public static GraphTraversal<?, ?> transform(final Expr expression, List<Triple> triples) {\n+        if (expression instanceof E_Equals) return transform((E_Equals) expression, triples);\n+        if (expression instanceof E_NotEquals) return transform((E_NotEquals) expression, triples);\n+        if (expression instanceof E_LessThan) return transform((E_LessThan) expression, triples);\n+        if (expression instanceof E_LessThanOrEqual) return transform((E_LessThanOrEqual) expression, triples);\n+        if (expression instanceof E_GreaterThan) return transform((E_GreaterThan) expression, triples);\n+        if (expression instanceof E_GreaterThanOrEqual) return transform((E_GreaterThanOrEqual) expression, triples);\n+        if (expression instanceof E_LogicalAnd) return transform((E_LogicalAnd) expression, triples);\n+        if (expression instanceof E_LogicalOr) return transform((E_LogicalOr) expression, triples);\n+        if (expression instanceof E_Exists) return transform((E_Exists) expression, triples);\n+        if (expression instanceof E_NotExists) return transform((E_NotExists) expression, triples);\n         throw new IllegalStateException(String.format(\"Unhandled expression: %s\", expression));\n     }\n \n-    private static GraphTraversal<?, ?> transform(final E_Equals expression) {\n-        final Object value = expression.getArg2().getConstant().getNode().getLiteralValue();\n-        return __.as(expression.getArg1().getVarName()).is(P.eq(value));\n+   public static GraphTraversal<?, ?> transform(final E_Equals e, List<Triple> triples) {\n+        GraphTraversal traversal = null;\n+         for(final Triple triple : triples){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NzgwMw=="}, "originalCommit": {"oid": "b4c4eb0e12bf69a63b5318f9e95461fd882d3973"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4NDc0Mg==", "bodyText": "seems like you could just:\n            if (object.equals(arg1)){\n                return  __.as(subject).has(uri, P.eq(value));\n            }\nand just return null at the end assuming nothing was built?", "url": "https://github.com/apache/tinkerpop/pull/1237#discussion_r371284742", "createdAt": "2020-01-27T14:52:34Z", "author": {"login": "spmallette"}, "path": "sparql-gremlin/src/main/java/org/apache/tinkerpop/gremlin/sparql/WhereTraversalBuilder.java", "diffHunk": "@@ -47,79 +49,248 @@\n     /**\n      * Converts a general {@code Expr} to an anonymous {@link GraphTraversal}.\n      */\n-    static GraphTraversal<?, ?> transform(final Expr expression) {\n-        if (expression instanceof E_Equals) return transform((E_Equals) expression);\n-        if (expression instanceof E_NotEquals) return transform((E_NotEquals) expression);\n-        if (expression instanceof E_LessThan) return transform((E_LessThan) expression);\n-        if (expression instanceof E_LessThanOrEqual) return transform((E_LessThanOrEqual) expression);\n-        if (expression instanceof E_GreaterThan) return transform((E_GreaterThan) expression);\n-        if (expression instanceof E_GreaterThanOrEqual) return transform((E_GreaterThanOrEqual) expression);\n-        if (expression instanceof E_LogicalAnd) return transform((E_LogicalAnd) expression);\n-        if (expression instanceof E_LogicalOr) return transform((E_LogicalOr) expression);\n-        if (expression instanceof E_Exists) return transform((E_Exists) expression);\n-        if (expression instanceof E_NotExists) return transform((E_NotExists) expression);\n+    public static GraphTraversal<?, ?> transform(final Expr expression, List<Triple> triples) {\n+        if (expression instanceof E_Equals) return transform((E_Equals) expression, triples);\n+        if (expression instanceof E_NotEquals) return transform((E_NotEquals) expression, triples);\n+        if (expression instanceof E_LessThan) return transform((E_LessThan) expression, triples);\n+        if (expression instanceof E_LessThanOrEqual) return transform((E_LessThanOrEqual) expression, triples);\n+        if (expression instanceof E_GreaterThan) return transform((E_GreaterThan) expression, triples);\n+        if (expression instanceof E_GreaterThanOrEqual) return transform((E_GreaterThanOrEqual) expression, triples);\n+        if (expression instanceof E_LogicalAnd) return transform((E_LogicalAnd) expression, triples);\n+        if (expression instanceof E_LogicalOr) return transform((E_LogicalOr) expression, triples);\n+        if (expression instanceof E_Exists) return transform((E_Exists) expression, triples);\n+        if (expression instanceof E_NotExists) return transform((E_NotExists) expression, triples);\n         throw new IllegalStateException(String.format(\"Unhandled expression: %s\", expression));\n     }\n \n-    private static GraphTraversal<?, ?> transform(final E_Equals expression) {\n-        final Object value = expression.getArg2().getConstant().getNode().getLiteralValue();\n-        return __.as(expression.getArg1().getVarName()).is(P.eq(value));\n+   public static GraphTraversal<?, ?> transform(final E_Equals e, List<Triple> triples) {\n+        GraphTraversal traversal = null;\n+         for(final Triple triple : triples){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NzgwMw=="}, "originalCommit": {"oid": "b4c4eb0e12bf69a63b5318f9e95461fd882d3973"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4NzQwMQ==", "bodyText": "Yes, this seems a better solution.", "url": "https://github.com/apache/tinkerpop/pull/1237#discussion_r371287401", "createdAt": "2020-01-27T14:57:02Z", "author": {"login": "thevalzo"}, "path": "sparql-gremlin/src/main/java/org/apache/tinkerpop/gremlin/sparql/WhereTraversalBuilder.java", "diffHunk": "@@ -47,79 +49,248 @@\n     /**\n      * Converts a general {@code Expr} to an anonymous {@link GraphTraversal}.\n      */\n-    static GraphTraversal<?, ?> transform(final Expr expression) {\n-        if (expression instanceof E_Equals) return transform((E_Equals) expression);\n-        if (expression instanceof E_NotEquals) return transform((E_NotEquals) expression);\n-        if (expression instanceof E_LessThan) return transform((E_LessThan) expression);\n-        if (expression instanceof E_LessThanOrEqual) return transform((E_LessThanOrEqual) expression);\n-        if (expression instanceof E_GreaterThan) return transform((E_GreaterThan) expression);\n-        if (expression instanceof E_GreaterThanOrEqual) return transform((E_GreaterThanOrEqual) expression);\n-        if (expression instanceof E_LogicalAnd) return transform((E_LogicalAnd) expression);\n-        if (expression instanceof E_LogicalOr) return transform((E_LogicalOr) expression);\n-        if (expression instanceof E_Exists) return transform((E_Exists) expression);\n-        if (expression instanceof E_NotExists) return transform((E_NotExists) expression);\n+    public static GraphTraversal<?, ?> transform(final Expr expression, List<Triple> triples) {\n+        if (expression instanceof E_Equals) return transform((E_Equals) expression, triples);\n+        if (expression instanceof E_NotEquals) return transform((E_NotEquals) expression, triples);\n+        if (expression instanceof E_LessThan) return transform((E_LessThan) expression, triples);\n+        if (expression instanceof E_LessThanOrEqual) return transform((E_LessThanOrEqual) expression, triples);\n+        if (expression instanceof E_GreaterThan) return transform((E_GreaterThan) expression, triples);\n+        if (expression instanceof E_GreaterThanOrEqual) return transform((E_GreaterThanOrEqual) expression, triples);\n+        if (expression instanceof E_LogicalAnd) return transform((E_LogicalAnd) expression, triples);\n+        if (expression instanceof E_LogicalOr) return transform((E_LogicalOr) expression, triples);\n+        if (expression instanceof E_Exists) return transform((E_Exists) expression, triples);\n+        if (expression instanceof E_NotExists) return transform((E_NotExists) expression, triples);\n         throw new IllegalStateException(String.format(\"Unhandled expression: %s\", expression));\n     }\n \n-    private static GraphTraversal<?, ?> transform(final E_Equals expression) {\n-        final Object value = expression.getArg2().getConstant().getNode().getLiteralValue();\n-        return __.as(expression.getArg1().getVarName()).is(P.eq(value));\n+   public static GraphTraversal<?, ?> transform(final E_Equals e, List<Triple> triples) {\n+        GraphTraversal traversal = null;\n+         for(final Triple triple : triples){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NzgwMw=="}, "originalCommit": {"oid": "b4c4eb0e12bf69a63b5318f9e95461fd882d3973"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4157, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}