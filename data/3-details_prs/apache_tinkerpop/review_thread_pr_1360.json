{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNjYzNzc0", "number": 1360, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzowMzo0NVrOE6jncg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzowOToyMFrOE6jvQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODM2NDAyOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzowMzo0NVrOH1sufA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxOTozMTo1OFrOH7G6gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA2OTM3Mg==", "bodyText": "I'm not sure what the implications are but i just checked to see if you could mock final classes with just mockito and came across this:\nhttps://www.baeldung.com/mockito-final\nany chance that will suffice rather than adding another testing dependency. definitely don't want to make things harder but every new bit of testing syntax seems to make it harder to get to junit5 without tons of adapters and shims (even powermock holds a powermock-module-junit4. Anyway, if it can't be done without the additional dependency or you see a bigger plan for testing with powermock in the future, then I suppose it's fine to keep it, otherwise my preference would be to try to do it with the test modules we already have.", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r526069372", "createdAt": "2020-11-18T13:03:45Z", "author": {"login": "spmallette"}, "path": "pom.xml", "diffHunk": "@@ -721,6 +722,18 @@ limitations under the License.\n                     </exclusion>\n                 </exclusions>\n             </dependency>\n+            <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NTAwMw==", "bodyText": "We have two requirements here. Ability to mock a final class and use spy to mock a new initialization inside method which is being tested. Using mockito to mock final classes require using an incubating feature in mockito. I tried using that feature but it doesn't work very nicely with spy right now. Hence, powermock is the next best option.", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r526365003", "createdAt": "2020-11-18T19:32:37Z", "author": {"login": "divijvaidya"}, "path": "pom.xml", "diffHunk": "@@ -721,6 +722,18 @@ limitations under the License.\n                     </exclusion>\n                 </exclusions>\n             </dependency>\n+            <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA2OTM3Mg=="}, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4NjY0OQ==", "bodyText": "ok - thanks for the explanation. let's go with what you've done then. thanks", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r526386649", "createdAt": "2020-11-18T20:08:30Z", "author": {"login": "spmallette"}, "path": "pom.xml", "diffHunk": "@@ -721,6 +722,18 @@ limitations under the License.\n                     </exclusion>\n                 </exclusions>\n             </dependency>\n+            <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA2OTM3Mg=="}, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMTIxOQ==", "bodyText": "build failures on master are due to powermock incompatibility with java 11 and our upgrade on the mockito version. not sure how you want to best resolve those - i tried a couple quick things but couldn't get it working immediately:\nhttps://stackoverflow.com/questions/52966897/powermock-java-11\nhttps://stackoverflow.com/questions/62305373/how-to-use-powermock-with-mockito3-x\nI sense it is something that can be resolved though, but i'll leave it to you at this point.", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r531031219", "createdAt": "2020-11-26T13:31:44Z", "author": {"login": "spmallette"}, "path": "pom.xml", "diffHunk": "@@ -721,6 +722,18 @@ limitations under the License.\n                     </exclusion>\n                 </exclusions>\n             </dependency>\n+            <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA2OTM3Mg=="}, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYyMzMwMQ==", "bodyText": "Figured out the fix i think: 8ea559e - builds for me locally now with mvn clean install.  will keep an eye on travis for the full build though.", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r531623301", "createdAt": "2020-11-27T14:10:04Z", "author": {"login": "spmallette"}, "path": "pom.xml", "diffHunk": "@@ -721,6 +722,18 @@ limitations under the License.\n                     </exclusion>\n                 </exclusions>\n             </dependency>\n+            <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA2OTM3Mg=="}, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc0MTMxNQ==", "bodyText": "Thank you for helping fix this Stephen. Appreciate it \ud83e\udd47", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r531741315", "createdAt": "2020-11-27T19:31:58Z", "author": {"login": "divijvaidya"}, "path": "pom.xml", "diffHunk": "@@ -721,6 +722,18 @@ limitations under the License.\n                     </exclusion>\n                 </exclusions>\n             </dependency>\n+            <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA2OTM3Mg=="}, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODM3MDMyOnYy", "diffSide": "RIGHT", "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/GremlinDriverIntegrateTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzowNTozM1rOH1sycA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTo0MToxMlrOH1_Gbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA3MDM4NA==", "bodyText": "If we expect an exception here (i.e. i see it's meant to be ignored) should the test fail() if the request succeeds?", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r526070384", "createdAt": "2020-11-18T13:05:33Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/GremlinDriverIntegrateTest.java", "diffHunk": "@@ -861,12 +864,28 @@ public void shouldMarkHostDeadSinceServerIsDown() throws Exception {\n         final Cluster cluster = TestClientFactory.open();\n         try {\n             assertEquals(0, cluster.availableHosts().size());\n-            cluster.connect().init();\n+            final Client client1 = cluster.connect().init();\n             assertEquals(1, cluster.availableHosts().size());\n \n             stopServer();\n \n+            // We create a new client here which will fail to initialize but the original client still has\n+            // host marked as connected. Since the second client failed during initialization, it has no way to\n+            // test if a host is indeed unreachable because it doesn't have any established connections. It will not add\n+            // the host to load balancer but it will also not remove it if it already exists there. Leave that\n+            // responsibility to a client that added it. In this case, let the second client perform it's own mechanism\n+            // to mark host as unavailable. The first client will discover that the host has failed either with next\n+            // keepAlive message or the next request, whichever is earlier. In this case, we will simulate the second\n+            // scenario by sending a new request on first client. The request would fail (since server is down) and\n+            // client should mark the host unavailable.\n             cluster.connect().init();\n+\n+            try {\n+                client1.submit(\"1+1\").all().join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM3MDQxNA==", "bodyText": "Good point. Added.", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r526370414", "createdAt": "2020-11-18T19:41:12Z", "author": {"login": "divijvaidya"}, "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/GremlinDriverIntegrateTest.java", "diffHunk": "@@ -861,12 +864,28 @@ public void shouldMarkHostDeadSinceServerIsDown() throws Exception {\n         final Cluster cluster = TestClientFactory.open();\n         try {\n             assertEquals(0, cluster.availableHosts().size());\n-            cluster.connect().init();\n+            final Client client1 = cluster.connect().init();\n             assertEquals(1, cluster.availableHosts().size());\n \n             stopServer();\n \n+            // We create a new client here which will fail to initialize but the original client still has\n+            // host marked as connected. Since the second client failed during initialization, it has no way to\n+            // test if a host is indeed unreachable because it doesn't have any established connections. It will not add\n+            // the host to load balancer but it will also not remove it if it already exists there. Leave that\n+            // responsibility to a client that added it. In this case, let the second client perform it's own mechanism\n+            // to mark host as unavailable. The first client will discover that the host has failed either with next\n+            // keepAlive message or the next request, whichever is earlier. In this case, we will simulate the second\n+            // scenario by sending a new request on first client. The request would fail (since server is down) and\n+            // client should mark the host unavailable.\n             cluster.connect().init();\n+\n+            try {\n+                client1.submit(\"1+1\").all().join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA3MDM4NA=="}, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODM4NDAzOnYy", "diffSide": "RIGHT", "path": "gremlin-driver/src/test/java/org/apache/tinkerpop/gremlin/driver/ser/binary/types/sample/SamplePersonSerializerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzowOToyMFrOH1s7Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTozODowMFrOH1--jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA3MjYxNQ==", "bodyText": "nit: we tend to prefer to statically import the assertion method and to avoid assertTrue() which provides a terrible failure message, thus we would typically prefer: assertThat(new ReflectionEquals(person).matches(actual), is(true))", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r526072615", "createdAt": "2020-11-18T13:09:20Z", "author": {"login": "spmallette"}, "path": "gremlin-driver/src/test/java/org/apache/tinkerpop/gremlin/driver/ser/binary/types/sample/SamplePersonSerializerTest.java", "diffHunk": "@@ -93,7 +93,7 @@ public void readValueAndWriteValueShouldBeSymmetric() throws IOException {\n             writer.writeValue(person, buffer, nullable);\n             final SamplePerson actual = reader.readValue(buffer, SamplePerson.class, nullable);\n \n-            assertThat(actual, new ReflectionEquals(person));\n+            Assert.assertTrue(new ReflectionEquals(person).matches(actual));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2ODM5OA==", "bodyText": "Oh yes. This is a side effect of the change when I upgraded mockito to 2.x so that we could use it to mock final classes. It's not required in current review since we are using powermock. I will revert it back.", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r526368398", "createdAt": "2020-11-18T19:38:00Z", "author": {"login": "divijvaidya"}, "path": "gremlin-driver/src/test/java/org/apache/tinkerpop/gremlin/driver/ser/binary/types/sample/SamplePersonSerializerTest.java", "diffHunk": "@@ -93,7 +93,7 @@ public void readValueAndWriteValueShouldBeSymmetric() throws IOException {\n             writer.writeValue(person, buffer, nullable);\n             final SamplePerson actual = reader.readValue(buffer, SamplePerson.class, nullable);\n \n-            assertThat(actual, new ReflectionEquals(person));\n+            Assert.assertTrue(new ReflectionEquals(person).matches(actual));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA3MjYxNQ=="}, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4148, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}