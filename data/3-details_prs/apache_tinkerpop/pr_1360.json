{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNjYzNzc0", "number": 1360, "title": "TINKERPOP-2445 Parallelize connection creation", "bodyText": "https://issues.apache.org/jira/browse/TINKERPOP-2445\nChanges\n\nCreate connections in a connection pool simultaneously instead of serially.\nCreate connection pools simultaneously for multiple host endpoints instead of serially.\nAdd a new exception NoHostAvailableException for cases when no host with active connections is available to send the query. This replaces TimeoutConnection which was confusing earlier.\nDo not try to reconnect to host if the connection pool initialization to that host has failed. Attempt to reconnect requires connection but we have a failure in the constructor of connection pool itself. Log the exception and don't add host in load balancer.\nAdded powermock dependency for mocking a new constructor inside a final class.\nChanged some String.format to concatenation as the former is adding latency during client initialization.\nChanged ConnectionException to extend RuntimeException. This simplifies exception handling. Prior to this we had to do multiple wrap and unwraps, hence, adding unnecessary values to the stack trace.", "createdAt": "2020-11-17T19:45:21Z", "url": "https://github.com/apache/tinkerpop/pull/1360", "merged": true, "mergeCommit": {"oid": "43f729216015c8f2374b42c1b619a16d1e00396e"}, "closed": true, "closedAt": "2020-11-25T20:06:15Z", "author": {"login": "divijvaidya"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddt0L1AFqTUzMzQyMjYwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgDYb2gBqjQwMzk1NDUxMjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNDIyNjA2", "url": "https://github.com/apache/tinkerpop/pull/1360#pullrequestreview-533422606", "createdAt": "2020-11-18T13:03:45Z", "commit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzowMzo0NVrOH1sufA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzowMzo0NVrOH1sufA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA2OTM3Mg==", "bodyText": "I'm not sure what the implications are but i just checked to see if you could mock final classes with just mockito and came across this:\nhttps://www.baeldung.com/mockito-final\nany chance that will suffice rather than adding another testing dependency. definitely don't want to make things harder but every new bit of testing syntax seems to make it harder to get to junit5 without tons of adapters and shims (even powermock holds a powermock-module-junit4. Anyway, if it can't be done without the additional dependency or you see a bigger plan for testing with powermock in the future, then I suppose it's fine to keep it, otherwise my preference would be to try to do it with the test modules we already have.", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r526069372", "createdAt": "2020-11-18T13:03:45Z", "author": {"login": "spmallette"}, "path": "pom.xml", "diffHunk": "@@ -721,6 +722,18 @@ limitations under the License.\n                     </exclusion>\n                 </exclusions>\n             </dependency>\n+            <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNDIzOTIz", "url": "https://github.com/apache/tinkerpop/pull/1360#pullrequestreview-533423923", "createdAt": "2020-11-18T13:05:33Z", "commit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzowNTozM1rOH1sycA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzowNTozM1rOH1sycA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA3MDM4NA==", "bodyText": "If we expect an exception here (i.e. i see it's meant to be ignored) should the test fail() if the request succeeds?", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r526070384", "createdAt": "2020-11-18T13:05:33Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/GremlinDriverIntegrateTest.java", "diffHunk": "@@ -861,12 +864,28 @@ public void shouldMarkHostDeadSinceServerIsDown() throws Exception {\n         final Cluster cluster = TestClientFactory.open();\n         try {\n             assertEquals(0, cluster.availableHosts().size());\n-            cluster.connect().init();\n+            final Client client1 = cluster.connect().init();\n             assertEquals(1, cluster.availableHosts().size());\n \n             stopServer();\n \n+            // We create a new client here which will fail to initialize but the original client still has\n+            // host marked as connected. Since the second client failed during initialization, it has no way to\n+            // test if a host is indeed unreachable because it doesn't have any established connections. It will not add\n+            // the host to load balancer but it will also not remove it if it already exists there. Leave that\n+            // responsibility to a client that added it. In this case, let the second client perform it's own mechanism\n+            // to mark host as unavailable. The first client will discover that the host has failed either with next\n+            // keepAlive message or the next request, whichever is earlier. In this case, we will simulate the second\n+            // scenario by sending a new request on first client. The request would fail (since server is down) and\n+            // client should mark the host unavailable.\n             cluster.connect().init();\n+\n+            try {\n+                client1.submit(\"1+1\").all().join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNDI2ODc0", "url": "https://github.com/apache/tinkerpop/pull/1360#pullrequestreview-533426874", "createdAt": "2020-11-18T13:09:20Z", "commit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzowOToyMFrOH1s7Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzowOToyMFrOH1s7Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA3MjYxNQ==", "bodyText": "nit: we tend to prefer to statically import the assertion method and to avoid assertTrue() which provides a terrible failure message, thus we would typically prefer: assertThat(new ReflectionEquals(person).matches(actual), is(true))", "url": "https://github.com/apache/tinkerpop/pull/1360#discussion_r526072615", "createdAt": "2020-11-18T13:09:20Z", "author": {"login": "spmallette"}, "path": "gremlin-driver/src/test/java/org/apache/tinkerpop/gremlin/driver/ser/binary/types/sample/SamplePersonSerializerTest.java", "diffHunk": "@@ -93,7 +93,7 @@ public void readValueAndWriteValueShouldBeSymmetric() throws IOException {\n             writer.writeValue(person, buffer, nullable);\n             final SamplePerson actual = reader.readValue(buffer, SamplePerson.class, nullable);\n \n-            assertThat(actual, new ReflectionEquals(person));\n+            Assert.assertTrue(new ReflectionEquals(person).matches(actual));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8ba840d87f85714380f978d1f5678e5fa8832d5"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "646371ec9fbe82e216ef99df6d0406b71dccf1f0", "author": {"user": {"login": "divijvaidya", "name": "Divij Vaidya"}}, "url": "https://github.com/apache/tinkerpop/commit/646371ec9fbe82e216ef99df6d0406b71dccf1f0", "committedDate": "2020-11-18T19:54:50Z", "message": "add changelog"}, "afterCommit": {"oid": "6f0cb18390c429b7d88edc9f11d4a30c5aebf576", "author": {"user": {"login": "divijvaidya", "name": "Divij Vaidya"}}, "url": "https://github.com/apache/tinkerpop/commit/6f0cb18390c429b7d88edc9f11d4a30c5aebf576", "committedDate": "2020-11-18T20:09:51Z", "message": "add changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83a1df177865ad23d78a11efa8abd9afc037e3ee", "author": {"user": {"login": "divijvaidya", "name": "Divij Vaidya"}}, "url": "https://github.com/apache/tinkerpop/commit/83a1df177865ad23d78a11efa8abd9afc037e3ee", "committedDate": "2020-11-25T19:18:00Z", "message": "Change exceptions thrown to user"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0655720644240119625ffbad0e2f94906e7243fb", "author": {"user": {"login": "divijvaidya", "name": "Divij Vaidya"}}, "url": "https://github.com/apache/tinkerpop/commit/0655720644240119625ffbad0e2f94906e7243fb", "committedDate": "2020-11-25T19:18:00Z", "message": "fix a unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d0df856d3acd67da94fc43db4e55fa9c9fb38b2", "author": {"user": {"login": "divijvaidya", "name": "Divij Vaidya"}}, "url": "https://github.com/apache/tinkerpop/commit/9d0df856d3acd67da94fc43db4e55fa9c9fb38b2", "committedDate": "2020-11-25T19:18:00Z", "message": "Fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1c21a68a79f2d00475f7f01f599321b3242a2e", "author": {"user": {"login": "divijvaidya", "name": "Divij Vaidya"}}, "url": "https://github.com/apache/tinkerpop/commit/0e1c21a68a79f2d00475f7f01f599321b3242a2e", "committedDate": "2020-11-25T19:18:00Z", "message": "Revert some test changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0022cac0f1793111e52c4220993e55d1d78fca9", "author": {"user": {"login": "divijvaidya", "name": "Divij Vaidya"}}, "url": "https://github.com/apache/tinkerpop/commit/b0022cac0f1793111e52c4220993e55d1d78fca9", "committedDate": "2020-11-25T19:18:00Z", "message": "add fail if no exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7a4fd599b2ef4d54741df278faad39bf83a5998", "author": {"user": {"login": "divijvaidya", "name": "Divij Vaidya"}}, "url": "https://github.com/apache/tinkerpop/commit/c7a4fd599b2ef4d54741df278faad39bf83a5998", "committedDate": "2020-11-25T19:18:00Z", "message": "revert asserttrue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21205d0410f91fae1c8da7333dc52b4c2d915f5a", "author": {"user": {"login": "divijvaidya", "name": "Divij Vaidya"}}, "url": "https://github.com/apache/tinkerpop/commit/21205d0410f91fae1c8da7333dc52b4c2d915f5a", "committedDate": "2020-11-25T19:18:00Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59a43ef8c3936db0d75d3f341cf3f482d1cb802c", "author": {"user": {"login": "divijvaidya", "name": "Divij Vaidya"}}, "url": "https://github.com/apache/tinkerpop/commit/59a43ef8c3936db0d75d3f341cf3f482d1cb802c", "committedDate": "2020-11-25T19:18:50Z", "message": "add changelog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f0cb18390c429b7d88edc9f11d4a30c5aebf576", "author": {"user": {"login": "divijvaidya", "name": "Divij Vaidya"}}, "url": "https://github.com/apache/tinkerpop/commit/6f0cb18390c429b7d88edc9f11d4a30c5aebf576", "committedDate": "2020-11-18T20:09:51Z", "message": "add changelog"}, "afterCommit": {"oid": "59a43ef8c3936db0d75d3f341cf3f482d1cb802c", "author": {"user": {"login": "divijvaidya", "name": "Divij Vaidya"}}, "url": "https://github.com/apache/tinkerpop/commit/59a43ef8c3936db0d75d3f341cf3f482d1cb802c", "committedDate": "2020-11-25T19:18:50Z", "message": "add changelog"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4391, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}