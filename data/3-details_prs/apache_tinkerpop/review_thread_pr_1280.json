{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1ODA2Njk4", "number": 1280, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjowMjoxMFrODzsRbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo1MToxOVrOD2o9FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTI5MzI2OnYy", "diffSide": "RIGHT", "path": "gremlin-python/src/main/jython/tests/driver/test_client.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjowMjoxMFrOGIRDNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoxNzowOVrOGIRlDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMTE0Mg==", "bodyText": "Thus far we've forced python users to be explicit and think in java terms, thus:\ng.V().has('age', long(851401972585122)).count()\nbut I suppose it's better if this were just handled automatically as it might yield less confusion and be more pythonic.  The test you added here is fine but please add a test here:\nhttps://github.com/apache/tinkerpop/blob/3.3-dev/gremlin-python/src/main/jython/tests/structure/io/test_graphsonV2d0.py#L306\nand here:\nhttps://github.com/apache/tinkerpop/blob/3.3-dev/gremlin-python/src/main/jython/tests/structure/io/test_graphsonV3d0.py#L357\nto more directly test GraphSON. Please do not remove the existing tests that use the old long() syntax as I think it's still worth testing that since it's something we will continue to support.  Just add new assertions for your new logic. I guess it wouldn't hurt to add tests to cover both positive and negative values in your range.", "url": "https://github.com/apache/tinkerpop/pull/1280#discussion_r411321142", "createdAt": "2020-04-20T12:02:10Z", "author": {"login": "spmallette"}, "path": "gremlin-python/src/main/jython/tests/driver/test_client.py", "diffHunk": "@@ -129,6 +129,17 @@ def test_multi_conn_pool(client):\n     assert len(result_set.all().result()) == 6\n \n \n+def test_client_bytecode_with_int(client):\n+    g = Graph().traversal()\n+    t = g.V().has('age', 851401972585122).count()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9dd4b097f70911120ee2ab3981e28b26110c46"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyOTgwNw==", "bodyText": "en, it's about serialization, I will move UT", "url": "https://github.com/apache/tinkerpop/pull/1280#discussion_r411329807", "createdAt": "2020-04-20T12:17:09Z", "author": {"login": "heljoyLiu"}, "path": "gremlin-python/src/main/jython/tests/driver/test_client.py", "diffHunk": "@@ -129,6 +129,17 @@ def test_multi_conn_pool(client):\n     assert len(result_set.all().result()) == 6\n \n \n+def test_client_bytecode_with_int(client):\n+    g = Graph().traversal()\n+    t = g.V().has('age', 851401972585122).count()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMTE0Mg=="}, "originalCommit": {"oid": "3a9dd4b097f70911120ee2ab3981e28b26110c46"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjIwNjkyOnYy", "diffSide": "RIGHT", "path": "gremlin-python/src/main/jython/tests/structure/io/test_graphsonV2d0.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo1MToxOVrOGMfIlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo1MToxOVrOGMfIlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0NjE5Nw==", "bodyText": "Could we please take this opportunity to improve our unit testing in general:\n\nAdd tests for the negative ranges in the int/long/bigint serializers.\nWe validate long(2) which is in the range of int and coerces to Int64 but could you please add a test for something like long(851401972585122) which is in the range of long to cover that case.", "url": "https://github.com/apache/tinkerpop/pull/1280#discussion_r415746197", "createdAt": "2020-04-27T11:51:19Z", "author": {"login": "spmallette"}, "path": "gremlin-python/src/main/jython/tests/structure/io/test_graphsonV2d0.py", "diffHunk": "@@ -307,6 +307,7 @@ def test_numbers(self):\n         assert {\"@type\": \"gx:Byte\", \"@value\": 1} == json.loads(self.graphson_writer.writeObject(int.__new__(SingleByte, 1)))\n         assert {\"@type\": \"g:Int64\", \"@value\": 2} == json.loads(self.graphson_writer.writeObject(long(2)))\n         assert {\"@type\": \"g:Int32\", \"@value\": 1} == json.loads(self.graphson_writer.writeObject(1))\n+        assert {\"@type\": \"g:Int64\", \"@value\": 851401972585122} == json.loads(self.graphson_writer.writeObject(851401972585122))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c08cce3b57888ebd2620de24175466f19498302"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4175, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}