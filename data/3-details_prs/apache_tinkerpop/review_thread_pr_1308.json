{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MDI3Njgw", "number": 1308, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTo1NjozNFrOEyUPXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTo1NDozMFrOFFjI4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTk1ODcwOnYy", "diffSide": "RIGHT", "path": "docs/src/dev/provider/index.asciidoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTo1NjozNFrOHo4mIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo0ODoxOFrOHpt4pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzMjM1Mg==", "bodyText": "nit: Capital \"A\" in \"Authorization\" please since it's a title.\nnit: There's a bit more formatting to do in the text like enclosing class names in backticks.\nI think it would be worth adding some note here to providers to say that while Gremlin Server supports this authorization feature it is not a feature that TinkerPop requires of graph providers as part of the agreement between client and server. Graph providers may choose to implement their own methods for authorization in the manner they see fit.  I would say a similar \"IMPORTANT\" callout box should probably be added to the reference documentation to alert users to this notion. Finally, as you draw closer to a final body of work, this is a neat new feature that should have upgrade documentation. (and perhaps more user facing documentation?))\nUPDATE: I read a bit further on and saw you linked from the user documentation to this page....that could suffice, but if I'm thinking of this feature right I sense that users will write these authorizors and i think it could be a popular feature which means more front facing documentation.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r512632352", "createdAt": "2020-10-27T11:56:34Z", "author": {"login": "spmallette"}, "path": "docs/src/dev/provider/index.asciidoc", "diffHunk": "@@ -1147,25 +1147,64 @@ one key value pair present (since only one `Traversal` is being submitted, there\n single alias).\n |=========================================================\n \n-=== Authentication\n+=== Authentication and authorization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ1OTgwMw==", "bodyText": "Fair - I must admit that this was the easiest way to start with the documentation. Adding to the ref docs implies reorganizing the gremlin server chapter because the security section is already way too big.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r513459803", "createdAt": "2020-10-28T13:52:11Z", "author": {"login": "vtslab"}, "path": "docs/src/dev/provider/index.asciidoc", "diffHunk": "@@ -1147,25 +1147,64 @@ one key value pair present (since only one `Traversal` is being submitted, there\n single alias).\n |=========================================================\n \n-=== Authentication\n+=== Authentication and authorization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzMjM1Mg=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwNTQ0Ng==", "bodyText": "As expansive as our documentation is, we still continue to get feedback that it is confusing, incomplete, etc. Perhaps reorganization wouldn't be a really bad thing except that it means \"more work\". Let's see what your next iteration of this PR looks like and we can discuss further then.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r513505446", "createdAt": "2020-10-28T14:48:18Z", "author": {"login": "spmallette"}, "path": "docs/src/dev/provider/index.asciidoc", "diffHunk": "@@ -1147,25 +1147,64 @@ one key value pair present (since only one `Traversal` is being submitted, there\n single alias).\n |=========================================================\n \n-=== Authentication\n+=== Authentication and authorization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzMjM1Mg=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTk2NDk2OnYy", "diffSide": "RIGHT", "path": "docs/src/reference/gremlin-applications.asciidoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTo1ODowOVrOHo4pwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1NDo0NVrOHprN0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzMzI4Mg==", "bodyText": "graph system providers can choose to do so\n\nis it just up to graph system providers? couldn't users write them as well?", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r512633282", "createdAt": "2020-10-27T11:58:09Z", "author": {"login": "spmallette"}, "path": "docs/src/reference/gremlin-applications.asciidoc", "diffHunk": "@@ -942,8 +942,10 @@ The following table describes the various YAML configuration options that Gremli\n |authentication.authenticator |The fully qualified classname of an `Authenticator` implementation to use.  If this setting is not present, then authentication is effectively disabled. |`AllowAllAuthenticator`\n |authentication.authenticationHandler | The fully qualified classname of an `AbstractAuthenticationHandler` implementation to use. If this setting is not present, but the `authentication.authenticator` is, it will use that authenticator with the default `AbstractAuthenticationHandler` implementation for the specified `Channelizer` |_none_\n |authentication.config |A `Map` of configuration settings to be passes to the `Authenticator` when it is constructed.  The settings available are dependent on the implementation. |_none_\n-|authentication.enableAuditLog |The available authenticators can issue audit logging messages, binding the authenticated user to his remote socket address and binding requests with a gremlin query to the remote socket address. For privacy reasons, the default value of this setting is false. The audit logging messages are logged at the INFO level via the `audit.org.apache.tinkerpop.gremlin.server` logger, which can be configured using the log4j.properties file. |false\n+|authentication.authorizer |The fully qualified classname of an `Authorizer` implementation to use.  Gremlin server does not offer `Authorizer` implementations, but link:https://tinkerpop.apache.org/docs/x.y.z/dev/provider/#_authentication_and_authorization[graph system providers can choose to do so]. |_none_", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2MTcxNQ==", "bodyText": "Indeed, if we document in the ref docs we do not need the provider term any more.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r513461715", "createdAt": "2020-10-28T13:54:45Z", "author": {"login": "vtslab"}, "path": "docs/src/reference/gremlin-applications.asciidoc", "diffHunk": "@@ -942,8 +942,10 @@ The following table describes the various YAML configuration options that Gremli\n |authentication.authenticator |The fully qualified classname of an `Authenticator` implementation to use.  If this setting is not present, then authentication is effectively disabled. |`AllowAllAuthenticator`\n |authentication.authenticationHandler | The fully qualified classname of an `AbstractAuthenticationHandler` implementation to use. If this setting is not present, but the `authentication.authenticator` is, it will use that authenticator with the default `AbstractAuthenticationHandler` implementation for the specified `Channelizer` |_none_\n |authentication.config |A `Map` of configuration settings to be passes to the `Authenticator` when it is constructed.  The settings available are dependent on the implementation. |_none_\n-|authentication.enableAuditLog |The available authenticators can issue audit logging messages, binding the authenticated user to his remote socket address and binding requests with a gremlin query to the remote socket address. For privacy reasons, the default value of this setting is false. The audit logging messages are logged at the INFO level via the `audit.org.apache.tinkerpop.gremlin.server` logger, which can be configured using the log4j.properties file. |false\n+|authentication.authorizer |The fully qualified classname of an `Authorizer` implementation to use.  Gremlin server does not offer `Authorizer` implementations, but link:https://tinkerpop.apache.org/docs/x.y.z/dev/provider/#_authentication_and_authorization[graph system providers can choose to do so]. |_none_", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzMzI4Mg=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTk4MjgyOnYy", "diffSide": "RIGHT", "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/Settings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjowMzowOVrOHo40nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjowMzowOVrOHo40nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzNjA2MA==", "bodyText": "I think you can safely put 3.5.0 as the version.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r512636060", "createdAt": "2020-10-27T12:03:09Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/Settings.java", "diffHunk": "@@ -418,7 +426,10 @@ public SerializerSettings() {}\n \n         /**\n          * Enable audit logging of authenticated users and gremlin evaluation requests.\n+         * @deprecated As of release x.y.z, replaced by {@link Settings#enableAuditLog} with slight changes in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjAwOTI4OnYy", "diffSide": "RIGHT", "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/handler/HttpGremlinEndpointHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjoxMDowNVrOHo5FCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxMTowMDo0M1rOHzKOxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY0MDI2Nw==", "bodyText": "I haven't thought this through at all but is it desirable that we would double-log here if the user has somehow used both settings (the new and deprecated one as true)? I see this sort of code in the AbstractEvalOpProcessor as well. Perhaps setting both to true should be considered an \"illegal\" configuration or the setting of the new one to true should override the old to false? Perhaps, setting the old to true and the new to false should result in a WARN to the logger to let them know they are using a deprecated settings?", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r512640267", "createdAt": "2020-10-27T12:10:05Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/handler/HttpGremlinEndpointHandler.java", "diffHunk": "@@ -189,6 +191,12 @@ public void channelRead(final ChannelHandlerContext ctx, final Object msg) {\n             try {\n                 logger.debug(\"Processing request containing script [{}] and bindings of [{}] on {}\",\n                         requestArguments.getValue0(), requestArguments.getValue1(), Thread.currentThread().getName());\n+                if (settings.enableAuditLog) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2NjAyNA==", "bodyText": "Agreed. I thought about this, but this check ends up in the gremlin server startup code, which I had not touched yet... Good to see that you are not afraid to touch your own code!", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r513466024", "createdAt": "2020-10-28T14:00:03Z", "author": {"login": "vtslab"}, "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/handler/HttpGremlinEndpointHandler.java", "diffHunk": "@@ -189,6 +191,12 @@ public void channelRead(final ChannelHandlerContext ctx, final Object msg) {\n             try {\n                 logger.debug(\"Processing request containing script [{}] and bindings of [{}] on {}\",\n                         requestArguments.getValue0(), requestArguments.getValue1(), Thread.currentThread().getName());\n+                if (settings.enableAuditLog) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY0MDI2Nw=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwNzA0Nw==", "bodyText": "Settings.java now logs an appropriate warning.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r523407047", "createdAt": "2020-11-14T11:00:43Z", "author": {"login": "vtslab"}, "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/handler/HttpGremlinEndpointHandler.java", "diffHunk": "@@ -189,6 +191,12 @@ public void channelRead(final ChannelHandlerContext ctx, final Object msg) {\n             try {\n                 logger.debug(\"Processing request containing script [{}] and bindings of [{}] on {}\",\n                         requestArguments.getValue0(), requestArguments.getValue1(), Thread.currentThread().getName());\n+                if (settings.enableAuditLog) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY0MDI2Nw=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjAxMzEyOnYy", "diffSide": "RIGHT", "path": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/BytecodeUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjoxMTowOVrOHo5HZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjoxMTowOVrOHo5HZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY0MDg2OQ==", "bodyText": "nit: looks like your IDE is making a mockery of our code style by doing a wildcard import \ud83d\ude04", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r512640869", "createdAt": "2020-10-27T12:11:09Z", "author": {"login": "spmallette"}, "path": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/BytecodeUtil.java", "diffHunk": "@@ -18,9 +18,12 @@\n  */\n package org.apache.tinkerpop.gremlin.process.traversal.util;\n \n-import org.apache.tinkerpop.gremlin.process.traversal.Bytecode;\n-import org.apache.tinkerpop.gremlin.process.traversal.TraversalSource;\n-import org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy;\n+import org.apache.tinkerpop.gremlin.jsr223.JavaTranslator;\n+import org.apache.tinkerpop.gremlin.process.traversal.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjA4MTE4OnYy", "diffSide": "RIGHT", "path": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/BytecodeUtil.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjoyOToxOVrOHo5w-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjo0Mjo1NFrOHwOOJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1MTUxMg==", "bodyText": "I sense that we will do more with Bytecode analysis so this class will grow in functionality. Perhaps this PR is not the time to think it all through, but I'd offer that I think that we would want to avoid doing a Translator operation here and try to work on pure bytecode when doing these sorts of operations. I see the main use for this method in this PR is to detect lambdas. If that is the case, then I would instead write a hasLambda() function here and have it simply dig through the bytecode to look for Lambda objects.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r512651512", "createdAt": "2020-10-27T12:29:19Z", "author": {"login": "spmallette"}, "path": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/BytecodeUtil.java", "diffHunk": "@@ -43,4 +47,16 @@ private BytecodeUtil() {}\n                         s -> s.getOperator().equals(TraversalSource.Symbols.withStrategies) && clazz.isAssignableFrom(s.getArguments()[0].getClass())),\n                 os -> (A) os.getArguments()[0]);\n     }\n+\n+    /**\n+     * Parses {@link Bytecode} to find {@link Step} objects in the step instructions.\n+     * @return\n+     */\n+    public static Iterator<Step> findSteps(final Bytecode bytecode, final Class<?> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3MTg2MQ==", "bodyText": "OK, I will do that. Note that the bytecode analysis of lambdas depends on magic strings that will come from the JavaTranslator anyway. So, this implies moving the magic strings to ByteUtil and also touching JavaTranslator (for the better!)", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r513471861", "createdAt": "2020-10-28T14:07:35Z", "author": {"login": "vtslab"}, "path": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/BytecodeUtil.java", "diffHunk": "@@ -43,4 +47,16 @@ private BytecodeUtil() {}\n                         s -> s.getOperator().equals(TraversalSource.Symbols.withStrategies) && clazz.isAssignableFrom(s.getArguments()[0].getClass())),\n                 os -> (A) os.getArguments()[0]);\n     }\n+\n+    /**\n+     * Parses {@link Bytecode} to find {@link Step} objects in the step instructions.\n+     * @return\n+     */\n+    public static Iterator<Step> findSteps(final Bytecode bytecode, final Class<?> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1MTUxMg=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODQ1OA==", "bodyText": "Note that the bytecode analysis of lambdas depends on magic strings\n\nI'm not sure what you mean by that. I would expect the Bytecode object to contain an actual org.apache.tinkerpop.gremlin.util.function.Lambda object within it. You just need to detect that, no?", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r513508458", "createdAt": "2020-10-28T14:51:45Z", "author": {"login": "spmallette"}, "path": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/BytecodeUtil.java", "diffHunk": "@@ -43,4 +47,16 @@ private BytecodeUtil() {}\n                         s -> s.getOperator().equals(TraversalSource.Symbols.withStrategies) && clazz.isAssignableFrom(s.getArguments()[0].getClass())),\n                 os -> (A) os.getArguments()[0]);\n     }\n+\n+    /**\n+     * Parses {@link Bytecode} to find {@link Step} objects in the step instructions.\n+     * @return\n+     */\n+    public static Iterator<Step> findSteps(final Bytecode bytecode, final Class<?> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1MTUxMg=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYwNzE5MQ==", "bodyText": "That was an excellent pointer and brought me to BytecodeHelper.getLambdaLanguage(bytecode).isPresent(). This means that I will not touch the BytecodeUtil code any more.\nYou may want to merge the BytecodeUtil and  BytecodeHelper classes in a separate PR, so that you can properly deprecate one in 3.4.x and get things right for 3.5.0 (assuming there is no valid reason for these classes to both exist). In a large codebase it is easy to overlook the other if you arrive at one via your IDE goTo.\n[Edited] I created the issue below because I also ran into minor issues regarding BytecodeHelper:\nhttps://issues.apache.org/jira/browse/TINKERPOP-2462", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r515607191", "createdAt": "2020-11-01T11:01:45Z", "author": {"login": "vtslab"}, "path": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/BytecodeUtil.java", "diffHunk": "@@ -43,4 +47,16 @@ private BytecodeUtil() {}\n                         s -> s.getOperator().equals(TraversalSource.Symbols.withStrategies) && clazz.isAssignableFrom(s.getArguments()[0].getClass())),\n                 os -> (A) os.getArguments()[0]);\n     }\n+\n+    /**\n+     * Parses {@link Bytecode} to find {@link Step} objects in the step instructions.\n+     * @return\n+     */\n+    public static Iterator<Step> findSteps(final Bytecode bytecode, final Class<?> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1MTUxMg=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkzNDYxOQ==", "bodyText": "yeah - thanks for pointing that out. i shouldnt have added BytecodeUtil....", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r515934619", "createdAt": "2020-11-02T12:21:29Z", "author": {"login": "spmallette"}, "path": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/BytecodeUtil.java", "diffHunk": "@@ -43,4 +47,16 @@ private BytecodeUtil() {}\n                         s -> s.getOperator().equals(TraversalSource.Symbols.withStrategies) && clazz.isAssignableFrom(s.getArguments()[0].getClass())),\n                 os -> (A) os.getArguments()[0]);\n     }\n+\n+    /**\n+     * Parses {@link Bytecode} to find {@link Step} objects in the step instructions.\n+     * @return\n+     */\n+    public static Iterator<Step> findSteps(final Bytecode bytecode, final Class<?> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1MTUxMg=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4NjY5NA==", "bodyText": "I've implemented TINKERPOP-2462 on 7325846 - going to remove BytecodeUtil completely in master", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r520086694", "createdAt": "2020-11-09T20:04:05Z", "author": {"login": "spmallette"}, "path": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/BytecodeUtil.java", "diffHunk": "@@ -43,4 +47,16 @@ private BytecodeUtil() {}\n                         s -> s.getOperator().equals(TraversalSource.Symbols.withStrategies) && clazz.isAssignableFrom(s.getArguments()[0].getClass())),\n                 os -> (A) os.getArguments()[0]);\n     }\n+\n+    /**\n+     * Parses {@link Bytecode} to find {@link Step} objects in the step instructions.\n+     * @return\n+     */\n+    public static Iterator<Step> findSteps(final Bytecode bytecode, final Class<?> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1MTUxMg=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5OTAyMg==", "bodyText": "Removed here: 6e47f53 - when you rebase it will be gone.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r520099022", "createdAt": "2020-11-09T20:26:50Z", "author": {"login": "spmallette"}, "path": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/BytecodeUtil.java", "diffHunk": "@@ -43,4 +47,16 @@ private BytecodeUtil() {}\n                         s -> s.getOperator().equals(TraversalSource.Symbols.withStrategies) && clazz.isAssignableFrom(s.getArguments()[0].getClass())),\n                 os -> (A) os.getArguments()[0]);\n     }\n+\n+    /**\n+     * Parses {@link Bytecode} to find {@link Step} objects in the step instructions.\n+     * @return\n+     */\n+    public static Iterator<Step> findSteps(final Bytecode bytecode, final Class<?> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1MTUxMg=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyNjY5NQ==", "bodyText": "Great! Over here, documentation is becoming completer.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r520326695", "createdAt": "2020-11-10T06:42:54Z", "author": {"login": "vtslab"}, "path": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/BytecodeUtil.java", "diffHunk": "@@ -43,4 +47,16 @@ private BytecodeUtil() {}\n                         s -> s.getOperator().equals(TraversalSource.Symbols.withStrategies) && clazz.isAssignableFrom(s.getArguments()[0].getClass())),\n                 os -> (A) os.getArguments()[0]);\n     }\n+\n+    /**\n+     * Parses {@link Bytecode} to find {@link Step} objects in the step instructions.\n+     * @return\n+     */\n+    public static Iterator<Step> findSteps(final Bytecode bytecode, final Class<?> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1MTUxMg=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjExMDE1OnYy", "diffSide": "RIGHT", "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/AbstractChannelizer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjozNjo1NlrOHo6CZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTowMToxMVrOHpukKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1NTk3Mw==", "bodyText": "setup() for authentication and configure() for authorization - could we simply unify these and go with setup() for both? As long as the two methods have the same name/signature then it should look like one method from an inheritance perspective, no?", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r512655973", "createdAt": "2020-10-27T12:36:56Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/AbstractChannelizer.java", "diffHunk": "@@ -200,6 +211,35 @@ private Authenticator createAuthenticator(final Settings.AuthenticationSettings\n         }\n     }\n \n+    private Authorizer createAuthorizer(final Settings.AuthorizationSettings config) {\n+        final String authorizerClass = config.authorizer;\n+        if (null == authorizerClass) {\n+            return null;\n+        }\n+        try {\n+            final Class<?> clazz = Class.forName(authorizerClass);\n+            final Authorizer authorizer = (Authorizer) clazz.newInstance();\n+            authorizer.configure(config.config);\n+            return authorizer;\n+        } catch (Exception ex) {\n+            logger.warn(ex.getMessage());\n+            throw new IllegalStateException(String.format(\"Could not create/configure Authorizer %s\", authorizer), ex);\n+        }\n+    }\n+\n+    private AuthenticatorAuthorizer createAuthenticatorAuthorizer(final Settings settings) {\n+        try {\n+            final Class<?> clazz = Class.forName(settings.authentication.authenticator);\n+            final AuthenticatorAuthorizer authenticatorAuthorizer = (AuthenticatorAuthorizer) clazz.newInstance();\n+            authenticatorAuthorizer.setup(settings.authentication.config);\n+            authenticatorAuthorizer.configure(settings.authorization.config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3ODI4MQ==", "bodyText": "This refers to my earlier question (that you possibly overlooked) whether we should have this AuthenticatorAuthorizer interface anyway. Only reason for its existence is for the Authorizer to have easy access to any user details not present in the AuthenticatedUser (QwentB's request). The user or provide could realize this in an alternative way by building or wrapping an Authenticator implementation into a singleton.\nAgreed, that the setup/configure thing is too ugly too keep, but is also ugly to not give the AuthentionSetting and AuthorizationSetting their own config map. Not relevant if we do away with the AuthenticatorAuthorizer.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r513478281", "createdAt": "2020-10-28T14:15:37Z", "author": {"login": "vtslab"}, "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/AbstractChannelizer.java", "diffHunk": "@@ -200,6 +211,35 @@ private Authenticator createAuthenticator(final Settings.AuthenticationSettings\n         }\n     }\n \n+    private Authorizer createAuthorizer(final Settings.AuthorizationSettings config) {\n+        final String authorizerClass = config.authorizer;\n+        if (null == authorizerClass) {\n+            return null;\n+        }\n+        try {\n+            final Class<?> clazz = Class.forName(authorizerClass);\n+            final Authorizer authorizer = (Authorizer) clazz.newInstance();\n+            authorizer.configure(config.config);\n+            return authorizer;\n+        } catch (Exception ex) {\n+            logger.warn(ex.getMessage());\n+            throw new IllegalStateException(String.format(\"Could not create/configure Authorizer %s\", authorizer), ex);\n+        }\n+    }\n+\n+    private AuthenticatorAuthorizer createAuthenticatorAuthorizer(final Settings settings) {\n+        try {\n+            final Class<?> clazz = Class.forName(settings.authentication.authenticator);\n+            final AuthenticatorAuthorizer authenticatorAuthorizer = (AuthenticatorAuthorizer) clazz.newInstance();\n+            authenticatorAuthorizer.setup(settings.authentication.config);\n+            authenticatorAuthorizer.configure(settings.authorization.config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1NTk3Mw=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUxNjU4NA==", "bodyText": "I'm +0 with the AuthenticatorAuthorizer - whatever you decide on that is fine by me. I'm more concerned in just naming those methods the same thing.  I probably shouldn't have written that the methods should have the same signature I guess...just the same name. I guess we would go with setup() which is somewhat at odds with all our other things which use configure() but meh...it's fine", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r513516584", "createdAt": "2020-10-28T15:01:11Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/AbstractChannelizer.java", "diffHunk": "@@ -200,6 +211,35 @@ private Authenticator createAuthenticator(final Settings.AuthenticationSettings\n         }\n     }\n \n+    private Authorizer createAuthorizer(final Settings.AuthorizationSettings config) {\n+        final String authorizerClass = config.authorizer;\n+        if (null == authorizerClass) {\n+            return null;\n+        }\n+        try {\n+            final Class<?> clazz = Class.forName(authorizerClass);\n+            final Authorizer authorizer = (Authorizer) clazz.newInstance();\n+            authorizer.configure(config.config);\n+            return authorizer;\n+        } catch (Exception ex) {\n+            logger.warn(ex.getMessage());\n+            throw new IllegalStateException(String.format(\"Could not create/configure Authorizer %s\", authorizer), ex);\n+        }\n+    }\n+\n+    private AuthenticatorAuthorizer createAuthenticatorAuthorizer(final Settings settings) {\n+        try {\n+            final Class<?> clazz = Class.forName(settings.authentication.authenticator);\n+            final AuthenticatorAuthorizer authenticatorAuthorizer = (AuthenticatorAuthorizer) clazz.newInstance();\n+            authenticatorAuthorizer.setup(settings.authentication.config);\n+            authenticatorAuthorizer.configure(settings.authorization.config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY1NTk3Mw=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjE1MjY4OnYy", "diffSide": "RIGHT", "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/authz/AbstractAuthorizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo0Nzo1NlrOHo6chw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDoxNjoyMFrOHpsQ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2MjY2Mw==", "bodyText": "Under what circumstance does it happen that we get a OPS_BYTECODE but its value remains a GraphSON 2.0 string that needs to be deserialized? if so, i would think we would want to figure out how to not let that happen and keep deserialization details out of the Authorizer?", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r512662663", "createdAt": "2020-10-27T12:47:56Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/authz/AbstractAuthorizer.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.server.authz;\n+\n+import org.apache.tinkerpop.gremlin.driver.Tokens;\n+import org.apache.tinkerpop.gremlin.driver.message.RequestMessage;\n+import org.apache.tinkerpop.gremlin.process.computer.traversal.strategy.decoration.VertexProgramStrategy;\n+import org.apache.tinkerpop.gremlin.process.traversal.Bytecode;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.LambdaHolder;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.BytecodeUtil;\n+import org.apache.tinkerpop.gremlin.server.auth.AuthenticatedUser;\n+import org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper;\n+import org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion;\n+import org.apache.tinkerpop.shaded.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+\n+\n+/**\n+ * Provides utilities for implementing the {@link Authorizer} interface.\n+ *\n+ * @author Marc de Lignie\n+ */\n+public abstract class AbstractAuthorizer implements Authorizer{\n+    private static final ObjectMapper mapper = GraphSONMapper.build().version(GraphSONVersion.V2_0).create().createMapper();\n+\n+    /**\n+     * Authorizes a user for a request.\n+     *\n+     * @param user {@link AuthenticatedUser} to be used for the authorization\n+     * @param msg RequestMessage to authorize the user for\n+     */\n+    public void authorize(final AuthenticatedUser user, final RequestMessage msg) throws AuthorizationException {\n+        switch (msg.getOp()) {\n+            case Tokens.OPS_EVAL:\n+                final String script = (String) msg.getArgs().get(Tokens.ARGS_GREMLIN);\n+                authorizeString(user, script, msg);\n+                break;\n+            case Tokens.OPS_BYTECODE:\n+                final Bytecode bytecode;\n+                try {\n+                    final Object bytecodeObj = msg.getArgs().get(Tokens.ARGS_GREMLIN);\n+                    bytecode = bytecodeObj instanceof Bytecode ? (Bytecode) bytecodeObj :\n+                            mapper.readValue(bytecodeObj.toString(), Bytecode.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3ODg3Mw==", "bodyText": "I will look into this, probably an oversight or some old test configs.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r513478873", "createdAt": "2020-10-28T14:16:20Z", "author": {"login": "vtslab"}, "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/authz/AbstractAuthorizer.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.server.authz;\n+\n+import org.apache.tinkerpop.gremlin.driver.Tokens;\n+import org.apache.tinkerpop.gremlin.driver.message.RequestMessage;\n+import org.apache.tinkerpop.gremlin.process.computer.traversal.strategy.decoration.VertexProgramStrategy;\n+import org.apache.tinkerpop.gremlin.process.traversal.Bytecode;\n+import org.apache.tinkerpop.gremlin.process.traversal.step.LambdaHolder;\n+import org.apache.tinkerpop.gremlin.process.traversal.util.BytecodeUtil;\n+import org.apache.tinkerpop.gremlin.server.auth.AuthenticatedUser;\n+import org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper;\n+import org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion;\n+import org.apache.tinkerpop.shaded.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+\n+\n+/**\n+ * Provides utilities for implementing the {@link Authorizer} interface.\n+ *\n+ * @author Marc de Lignie\n+ */\n+public abstract class AbstractAuthorizer implements Authorizer{\n+    private static final ObjectMapper mapper = GraphSONMapper.build().version(GraphSONVersion.V2_0).create().createMapper();\n+\n+    /**\n+     * Authorizes a user for a request.\n+     *\n+     * @param user {@link AuthenticatedUser} to be used for the authorization\n+     * @param msg RequestMessage to authorize the user for\n+     */\n+    public void authorize(final AuthenticatedUser user, final RequestMessage msg) throws AuthorizationException {\n+        switch (msg.getOp()) {\n+            case Tokens.OPS_EVAL:\n+                final String script = (String) msg.getArgs().get(Tokens.ARGS_GREMLIN);\n+                authorizeString(user, script, msg);\n+                break;\n+            case Tokens.OPS_BYTECODE:\n+                final Bytecode bytecode;\n+                try {\n+                    final Object bytecodeObj = msg.getArgs().get(Tokens.ARGS_GREMLIN);\n+                    bytecode = bytecodeObj instanceof Bytecode ? (Bytecode) bytecodeObj :\n+                            mapper.readValue(bytecodeObj.toString(), Bytecode.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2MjY2Mw=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjE5MjYzOnYy", "diffSide": "RIGHT", "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/handler/StateKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo1Nzo0MVrOHo61mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxMTowMjo1OVrOHzKPfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2OTA4MQ==", "bodyText": "nice. looks like this body of work will also close:\nhttps://issues.apache.org/jira/browse/TINKERPOP-2418\nWe will need to remember to close that issue too when this merges", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r512669081", "createdAt": "2020-10-27T12:57:41Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/handler/StateKey.java", "diffHunk": "@@ -57,4 +58,9 @@ private StateKey() {}\n      * The key for the current request.\n      */\n     public static final AttributeKey<RequestMessage> REQUEST_MESSAGE = AttributeKey.valueOf(\"request\");\n+\n+    /**\n+     * The key for the current {@link AuthenticatedUser}.\n+     */\n+    public static final AttributeKey<AuthenticatedUser> AUTHENTICATED_USER = AttributeKey.valueOf(\"authenticatedUser\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwNzIyOQ==", "bodyText": "There is a warning in the changelog you cannot miss before the release.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r523407229", "createdAt": "2020-11-14T11:02:59Z", "author": {"login": "vtslab"}, "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/handler/StateKey.java", "diffHunk": "@@ -57,4 +58,9 @@ private StateKey() {}\n      * The key for the current request.\n      */\n     public static final AttributeKey<RequestMessage> REQUEST_MESSAGE = AttributeKey.valueOf(\"request\");\n+\n+    /**\n+     * The key for the current {@link AuthenticatedUser}.\n+     */\n+    public static final AttributeKey<AuthenticatedUser> AUTHENTICATED_USER = AttributeKey.valueOf(\"authenticatedUser\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2OTA4MQ=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjI0NDg3OnYy", "diffSide": "RIGHT", "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/GremlinServerAuthIntegrateTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzoxMDoyN1rOHo7V_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxMTowNTowMFrOHzKQLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NzM3Mw==", "bodyText": "i suppose the addition of the marko user was the change here:\nhttps://github.com/apache/tinkerpop/pull/1308/files#diff-a73da218a425ffa2b99f8c287c3ff3477426bb72748d0c21894d5067485b12a8R47\njust a new user...is that right? perhaps now would be a smart time to add a README.md to gremlin-server/data to remind us what the contents of those files are. i'm not even sure what gremlin-server/data/sample.kryo contains anymore.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r512677373", "createdAt": "2020-10-27T13:10:27Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/GremlinServerAuthIntegrateTest.java", "diffHunk": "@@ -56,7 +56,7 @@ public Settings overrideSettings(final Settings settings) {\n         final Settings.AuthenticationSettings authSettings = new Settings.AuthenticationSettings();\n         authSettings.authenticator = SimpleAuthenticator.class.getName();\n \n-        // use a credentials graph with one user in it: stephen/password\n+        // use a credentials graph with two users in it: stephen/password and marko/rainbow-dash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwNDc0Mg==", "bodyText": "Yes, I picked this user from the credentials-dsl example from the ref docs...\nI better leave this to you, because this also relates to preparing the console and server distributions.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r513504742", "createdAt": "2020-10-28T14:47:31Z", "author": {"login": "vtslab"}, "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/GremlinServerAuthIntegrateTest.java", "diffHunk": "@@ -56,7 +56,7 @@ public Settings overrideSettings(final Settings settings) {\n         final Settings.AuthenticationSettings authSettings = new Settings.AuthenticationSettings();\n         authSettings.authenticator = SimpleAuthenticator.class.getName();\n \n-        // use a credentials graph with one user in it: stephen/password\n+        // use a credentials graph with two users in it: stephen/password and marko/rainbow-dash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NzM3Mw=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3OTcwNg==", "bodyText": "I've added the README to master - aea5d9a\nWhen you rebase you can just modify what I wrote for your purposes.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r519879706", "createdAt": "2020-11-09T15:02:40Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/GremlinServerAuthIntegrateTest.java", "diffHunk": "@@ -56,7 +56,7 @@ public Settings overrideSettings(final Settings settings) {\n         final Settings.AuthenticationSettings authSettings = new Settings.AuthenticationSettings();\n         authSettings.authenticator = SimpleAuthenticator.class.getName();\n \n-        // use a credentials graph with one user in it: stephen/password\n+        // use a credentials graph with two users in it: stephen/password and marko/rainbow-dash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NzM3Mw=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5MDIyMQ==", "bodyText": "Thanks, will do that.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r519890221", "createdAt": "2020-11-09T15:17:09Z", "author": {"login": "vtslab"}, "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/GremlinServerAuthIntegrateTest.java", "diffHunk": "@@ -56,7 +56,7 @@ public Settings overrideSettings(final Settings settings) {\n         final Settings.AuthenticationSettings authSettings = new Settings.AuthenticationSettings();\n         authSettings.authenticator = SimpleAuthenticator.class.getName();\n \n-        // use a credentials graph with one user in it: stephen/password\n+        // use a credentials graph with two users in it: stephen/password and marko/rainbow-dash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NzM3Mw=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwNzQwNA==", "bodyText": "Done", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r523407404", "createdAt": "2020-11-14T11:05:00Z", "author": {"login": "vtslab"}, "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/GremlinServerAuthIntegrateTest.java", "diffHunk": "@@ -56,7 +56,7 @@ public Settings overrideSettings(final Settings settings) {\n         final Settings.AuthenticationSettings authSettings = new Settings.AuthenticationSettings();\n         authSettings.authenticator = SimpleAuthenticator.class.getName();\n \n-        // use a credentials graph with one user in it: stephen/password\n+        // use a credentials graph with two users in it: stephen/password and marko/rainbow-dash", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NzM3Mw=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjI1NDI4OnYy", "diffSide": "RIGHT", "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/authz/Whitelist.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzoxMjo0MlrOHo7b1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo0Nzo0NVrOHpt2xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3ODg2OA==", "bodyText": "I know this is just for testing but could you please change the naming (to this class and related ones) to AllowList?", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r512678868", "createdAt": "2020-10-27T13:12:42Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/authz/Whitelist.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.server.authz;\n+\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+\n+/**\n+ * Whitelist for the WhitelistAuthorizer as configured by a YAML file.\n+ *\n+ * @author Marc de Lignie\n+ */\n+public class Whitelist {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwNDk2Nw==", "bodyText": "Sure!", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r513504967", "createdAt": "2020-10-28T14:47:45Z", "author": {"login": "vtslab"}, "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/authz/Whitelist.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.server.authz;\n+\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+\n+/**\n+ * Whitelist for the WhitelistAuthorizer as configured by a YAML file.\n+ *\n+ * @author Marc de Lignie\n+ */\n+public class Whitelist {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3ODg2OA=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjI2Njg0OnYy", "diffSide": "RIGHT", "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/authz/WhitelistAuthorizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzoxNToyN1rOHo7jYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo0ODoyM1rOHpt44Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY4MDgwMQ==", "bodyText": "This is a fairly advanced implementation for testing. It should provide a nice example for folks to learn from. would it be good to write user docs around this example and then snippet this code explicitly in the reference documentation?", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r512680801", "createdAt": "2020-10-27T13:15:27Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/authz/WhitelistAuthorizer.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.server.authz;\n+\n+import org.apache.tinkerpop.gremlin.driver.Tokens;\n+import org.apache.tinkerpop.gremlin.driver.message.RequestMessage;\n+import org.apache.tinkerpop.gremlin.process.traversal.Bytecode;\n+import org.apache.tinkerpop.gremlin.process.traversal.TraversalSource;\n+import org.apache.tinkerpop.gremlin.server.Settings.AuthenticationSettings;\n+import org.apache.tinkerpop.gremlin.server.auth.AuthenticatedUser;\n+import org.apache.tinkerpop.gremlin.server.auth.Authenticator;\n+import org.apache.tinkerpop.gremlin.server.auth.SimpleAuthenticator;\n+\n+import java.util.*;\n+\n+\n+/**\n+ * Authorizes a user per request, based on a whitelist that grants access to {@link TraversalSource} instances for\n+ * bytecode requests and to gremlin server's sandbox for string requests and lambdas. The {@link\n+ * AuthenticationSettings}.config must have an authorizationWhitelist entry that contains the filename of the whitelist.\n+ * This authorizer is for demonstration purposes only. It does not scale well in the number of users regarding\n+ * memory usage and administrative burden.\n+ *\n+ * @author Marc de Lignie\n+ */\n+public class WhitelistAuthorizer extends AbstractAuthorizer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwNTUwNQ==", "bodyText": "Fine to me: explain by example!", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r513505505", "createdAt": "2020-10-28T14:48:23Z", "author": {"login": "vtslab"}, "path": "gremlin-server/src/test/java/org/apache/tinkerpop/gremlin/server/authz/WhitelistAuthorizer.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.server.authz;\n+\n+import org.apache.tinkerpop.gremlin.driver.Tokens;\n+import org.apache.tinkerpop.gremlin.driver.message.RequestMessage;\n+import org.apache.tinkerpop.gremlin.process.traversal.Bytecode;\n+import org.apache.tinkerpop.gremlin.process.traversal.TraversalSource;\n+import org.apache.tinkerpop.gremlin.server.Settings.AuthenticationSettings;\n+import org.apache.tinkerpop.gremlin.server.auth.AuthenticatedUser;\n+import org.apache.tinkerpop.gremlin.server.auth.Authenticator;\n+import org.apache.tinkerpop.gremlin.server.auth.SimpleAuthenticator;\n+\n+import java.util.*;\n+\n+\n+/**\n+ * Authorizes a user per request, based on a whitelist that grants access to {@link TraversalSource} instances for\n+ * bytecode requests and to gremlin server's sandbox for string requests and lambdas. The {@link\n+ * AuthenticationSettings}.config must have an authorizationWhitelist entry that contains the filename of the whitelist.\n+ * This authorizer is for demonstration purposes only. It does not scale well in the number of users regarding\n+ * memory usage and administrative burden.\n+ *\n+ * @author Marc de Lignie\n+ */\n+public class WhitelistAuthorizer extends AbstractAuthorizer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY4MDgwMQ=="}, "originalCommit": {"oid": "709f812af2046f5bf45f99155405d3fa7ccedd4f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzM2OTA3OnYy", "diffSide": "RIGHT", "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/handler/HttpBasicAuthorizationHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzoyNToxNFrOICgdkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzoyNToxNFrOICgdkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5OTkyMw==", "bodyText": "As they are all static methods I think you could refactor to create a small final utility class to house them - HttpUtil or something like that?", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r539499923", "createdAt": "2020-12-09T17:25:14Z", "author": {"login": "spmallette"}, "path": "gremlin-server/src/main/java/org/apache/tinkerpop/gremlin/server/handler/HttpBasicAuthorizationHandler.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.server.handler;\n+\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.handler.codec.http.DefaultFullHttpResponse;\n+import io.netty.handler.codec.http.FullHttpMessage;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.netty.util.ReferenceCountUtil;\n+import org.apache.tinkerpop.gremlin.driver.Tokens;\n+import org.apache.tinkerpop.gremlin.driver.message.RequestMessage;\n+import org.apache.tinkerpop.gremlin.server.GremlinServer;\n+import org.apache.tinkerpop.gremlin.server.auth.AuthenticatedUser;\n+import org.apache.tinkerpop.gremlin.server.authz.AuthorizationException;\n+import org.apache.tinkerpop.gremlin.server.authz.Authorizer;\n+import org.javatuples.Quartet;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;\n+import static io.netty.handler.codec.http.HttpResponseStatus.INTERNAL_SERVER_ERROR;\n+import static io.netty.handler.codec.http.HttpResponseStatus.UNAUTHORIZED;\n+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n+\n+\n+/**\n+ *  An authorization handler for the http channel that allows the {@link Authorizer} to be plugged into it.\n+ *\n+ * @author Marc de Lignie\n+ */\n+@ChannelHandler.Sharable\n+public class HttpBasicAuthorizationHandler extends ChannelInboundHandlerAdapter {\n+    private static final Logger logger = LoggerFactory.getLogger(HttpBasicAuthorizationHandler.class);\n+    private static final Logger auditLogger = LoggerFactory.getLogger(GremlinServer.AUDIT_LOGGER_NAME);\n+\n+    private AuthenticatedUser user;\n+    private final Authorizer authorizer;\n+\n+    public HttpBasicAuthorizationHandler(Authorizer authorizer) {\n+        this.authorizer = authorizer;\n+    }\n+\n+    @Override\n+    public void channelRead(final ChannelHandlerContext ctx, final Object msg) {\n+        if (msg instanceof FullHttpMessage){\n+            final FullHttpMessage request = (FullHttpMessage) msg;\n+            try {\n+                user = ctx.channel().attr(StateKey.AUTHENTICATED_USER).get();\n+                if (null == user) {    // This is expected when using the AllowAllAuthenticator\n+                    user = AuthenticatedUser.ANONYMOUS_USER;\n+                }\n+                // ToDo: move getRequestArguments to a new preceding pipeline step in the Channelizer, but @Stephen,\n+                //       how about the sendAndCleanupConnection logic in HttpGremlinEndpointHandler?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39db2b60da01125a2049a7e8a38a133e38cbcd57"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzYyNzcyOnYy", "diffSide": "RIGHT", "path": "docs/src/dev/provider/index.asciidoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTo1NDoxMVrOIGHL1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDoyNToxNlrOIIdS0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI4MDA4NA==", "bodyText": "Please use the template variable for the documentation version in your link, thus: https://tinkerpop.apache.org/docs/x.y.z/reference/#security", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r543280084", "createdAt": "2020-12-15T11:54:11Z", "author": {"login": "spmallette"}, "path": "docs/src/dev/provider/index.asciidoc", "diffHunk": "@@ -1147,25 +1147,43 @@ one key value pair present (since only one `Traversal` is being submitted, there\n single alias).\n |=========================================================\n \n-=== Authentication\n+=== Authentication and Authorization\n \n Gremlin Server supports link:https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer[SASL-based]\n authentication.  A SASL implementation provides a series of challenges and responses that a driver must comply with\n-in order to authenticate.  By default, Gremlin Server only supports the \"PLAIN\" SASL mechanism, which is a cleartext\n-password system.  When authentication is enabled, an incoming request is intercepted before it is evaluated by the\n-`ScriptEngine`.  The request is saved on the server and a `AUTHENTICATE` challenge response (status code `407`) is\n-returned to the client.\n-\n-The client will detect the `AUTHENTICATE` and respond with an `authentication` for the `op` and an `arg` named `sasl`\n-that contains the password.  The password should be either, an encoded sequence of UTF-8 bytes, delimited by 0\n-(US-ASCII NUL), where the form is : `<NUL>username<NUL>password`, or a Base64 encoded string of the former (which\n-in this instance would be `AHVzZXJuYW1lAHBhc3N3b3Jk`).  Should Gremlin Server be able to authenticate with the\n-provided credentials, the server will return the results of the original request as it normally does without\n-authentication.  If it cannot authenticate given the challenge response from the client, it will return `UNAUTHORIZED`\n-(status code `401`).\n+in order to authenticate.  Gremlin Server supports the \"PLAIN\" SASL mechanism, which is a cleartext\n+password system, for all link:https://tinkerpop.apache.org/docs/current/tutorials/gremlin-language-variants/[Gremlin Language Variants].\n+Other SASL mechanisms supported for selected clients are listed in the\n+link:https://tinkerpop.apache.org/docs/current/reference/#security[security section of the Gremlin Server reference documentation].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39db2b60da01125a2049a7e8a38a133e38cbcd57"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczOTQ3NQ==", "bodyText": "You are right. Although a bit messy to also put in in this PR, I caught a few other instances while at the job. Just say it, if you do not want these corrections here.", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r545739475", "createdAt": "2020-12-18T10:25:16Z", "author": {"login": "vtslab"}, "path": "docs/src/dev/provider/index.asciidoc", "diffHunk": "@@ -1147,25 +1147,43 @@ one key value pair present (since only one `Traversal` is being submitted, there\n single alias).\n |=========================================================\n \n-=== Authentication\n+=== Authentication and Authorization\n \n Gremlin Server supports link:https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer[SASL-based]\n authentication.  A SASL implementation provides a series of challenges and responses that a driver must comply with\n-in order to authenticate.  By default, Gremlin Server only supports the \"PLAIN\" SASL mechanism, which is a cleartext\n-password system.  When authentication is enabled, an incoming request is intercepted before it is evaluated by the\n-`ScriptEngine`.  The request is saved on the server and a `AUTHENTICATE` challenge response (status code `407`) is\n-returned to the client.\n-\n-The client will detect the `AUTHENTICATE` and respond with an `authentication` for the `op` and an `arg` named `sasl`\n-that contains the password.  The password should be either, an encoded sequence of UTF-8 bytes, delimited by 0\n-(US-ASCII NUL), where the form is : `<NUL>username<NUL>password`, or a Base64 encoded string of the former (which\n-in this instance would be `AHVzZXJuYW1lAHBhc3N3b3Jk`).  Should Gremlin Server be able to authenticate with the\n-provided credentials, the server will return the results of the original request as it normally does without\n-authentication.  If it cannot authenticate given the challenge response from the client, it will return `UNAUTHORIZED`\n-(status code `401`).\n+in order to authenticate.  Gremlin Server supports the \"PLAIN\" SASL mechanism, which is a cleartext\n+password system, for all link:https://tinkerpop.apache.org/docs/current/tutorials/gremlin-language-variants/[Gremlin Language Variants].\n+Other SASL mechanisms supported for selected clients are listed in the\n+link:https://tinkerpop.apache.org/docs/current/reference/#security[security section of the Gremlin Server reference documentation].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI4MDA4NA=="}, "originalCommit": {"oid": "39db2b60da01125a2049a7e8a38a133e38cbcd57"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzYyOTEyOnYy", "diffSide": "RIGHT", "path": "docs/src/dev/provider/index.asciidoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTo1NDozMFrOIGHMog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTo1NDozMFrOIGHMog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI4MDI5MA==", "bodyText": "Please use the template variable for the documentation version in your link, thus: https://tinkerpop.apache.org/docs/x.y.z/reference/#security", "url": "https://github.com/apache/tinkerpop/pull/1308#discussion_r543280290", "createdAt": "2020-12-15T11:54:30Z", "author": {"login": "spmallette"}, "path": "docs/src/dev/provider/index.asciidoc", "diffHunk": "@@ -1147,25 +1147,43 @@ one key value pair present (since only one `Traversal` is being submitted, there\n single alias).\n |=========================================================\n \n-=== Authentication\n+=== Authentication and Authorization\n \n Gremlin Server supports link:https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer[SASL-based]\n authentication.  A SASL implementation provides a series of challenges and responses that a driver must comply with\n-in order to authenticate.  By default, Gremlin Server only supports the \"PLAIN\" SASL mechanism, which is a cleartext\n-password system.  When authentication is enabled, an incoming request is intercepted before it is evaluated by the\n-`ScriptEngine`.  The request is saved on the server and a `AUTHENTICATE` challenge response (status code `407`) is\n-returned to the client.\n-\n-The client will detect the `AUTHENTICATE` and respond with an `authentication` for the `op` and an `arg` named `sasl`\n-that contains the password.  The password should be either, an encoded sequence of UTF-8 bytes, delimited by 0\n-(US-ASCII NUL), where the form is : `<NUL>username<NUL>password`, or a Base64 encoded string of the former (which\n-in this instance would be `AHVzZXJuYW1lAHBhc3N3b3Jk`).  Should Gremlin Server be able to authenticate with the\n-provided credentials, the server will return the results of the original request as it normally does without\n-authentication.  If it cannot authenticate given the challenge response from the client, it will return `UNAUTHORIZED`\n-(status code `401`).\n+in order to authenticate.  Gremlin Server supports the \"PLAIN\" SASL mechanism, which is a cleartext\n+password system, for all link:https://tinkerpop.apache.org/docs/current/tutorials/gremlin-language-variants/[Gremlin Language Variants].\n+Other SASL mechanisms supported for selected clients are listed in the\n+link:https://tinkerpop.apache.org/docs/current/reference/#security[security section of the Gremlin Server reference documentation].\n+\n+When authentication is enabled, an incoming request is intercepted before it is evaluated by the `ScriptEngine`.  The\n+request is saved on the server and a `AUTHENTICATE` challenge response (status code `407`) is returned to the client.\n+\n+The client will detect the `AUTHENTICATE` and respond with an `authentication` for the `op` and an `arg` named `sasl`.\n+In case of the \"PLAIN\" SASL mechanism the `arg` contains the password.  The password should be either, an encoded\n+sequence of UTF-8 bytes, delimited by 0 (US-ASCII NUL), where the form is : `<NUL>username<NUL>password`, or a Base64\n+encoded string of the former (which in this instance would be `AHVzZXJuYW1lAHBhc3N3b3Jk`).  Should Gremlin Server be\n+able to authenticate with the provided credentials, the server will return the results of the original request as it\n+normally does without authentication.  If it cannot authenticate given the challenge response from the client, it will\n+return `UNAUTHORIZED` (status code `401`).\n \n NOTE: Gremlin Server does not support the \"authorization identity\" as described in link:https://tools.ietf.org/html/rfc4616[RFC4616].\n \n+In addition to authenticating users at the start of a connection, Gremlin Server allows providers to authorize users on\n+a per request basis. If\n+link:https://tinkerpop.apache.org/docs/x.y.z/reference/#_configuring_2[a java class is configured] that implements the\n+link:https://tinkerpop.apache.org/javadocs/x.y.z/full/org/apache/tinkerpop/gremlin/server/authz/Authorizer.html[Authorizer interface],\n+Gremlin Server passes each request to this `Authorizer`. The `Authorizer` can deny authorization for the request by\n+throwing an exception and Gremlin Server returns `UNAUTHORIZED` (status code `401`) to the client. The `Authorizer`\n+authorizes the request by returning the original request or the request with some additional constraints. Gremlin Server\n+proceeds with the returned request and on its turn returns the result of the request to the client. More details on\n+implementing authorization can be found in the\n+link:https://tinkerpop.apache.org/docs/current/reference/#security[reference documentation for Gremlin Server security].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39db2b60da01125a2049a7e8a38a133e38cbcd57"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4126, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}