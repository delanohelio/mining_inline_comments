{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NjYxMzY0", "number": 1263, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTo1MDoxN1rODpQYzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MzowOVrODtg6cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTg2NzAyOnYy", "diffSide": "RIGHT", "path": "gremlin-dotnet/src/Gremlin.Net/Driver/Connection.cs", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTo1MDoxN1rOF4UfZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNzoyMjo1OFrOF4ikyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMDI5NA==", "bodyText": "It seems we accepted this pattern here for Javascript:\n1751d25#diff-9ec1348d608a722cece8543e6db87a23R225\nI think I overlooked that in review. I don't think we should include an arg just for the sake of it. I would also go a step further and say that we probably shouldn't bother to add support for the \"close\" message at all.  We just deprecated the \"close\" message in a recent batch of changes and no longer send it at all in the Java driver in 3.5.0:\nhttps://github.com/apache/tinkerpop/blob/0a7769eea651ab0e72d3a6a0bd424fbb1197bd47/docs/src/upgrade/release-3.5.x.asciidoc#session-close\nI don't think it's worth adding now, unless we can come up with a good reason for doing so. The only argument I can think of is that it would make the drivers backward compatible with sessions starting at 3.4.7, but even then the \"close\" message is a bit flawed on the server in those earlier versions:\nhttps://issues.apache.org/jira/browse/TINKERPOP-2336\nso, is there real value to adding the code on the client? If the answer to that is \"yes\" with some reasoning then we'd need a second PR to remove the code on the \"master\" branch to match the Java Driver. Thoughts?", "url": "https://github.com/apache/tinkerpop/pull/1263#discussion_r394600294", "createdAt": "2020-03-18T19:50:17Z", "author": {"login": "spmallette"}, "path": "gremlin-dotnet/src/Gremlin.Net/Driver/Connection.cs", "diffHunk": "@@ -235,17 +243,52 @@ private void NotifyAboutConnectionFailure(Exception exception)\n \n         private async Task SendMessageAsync(RequestMessage message)\n         {\n+            if (_sessionEnabled)\n+            {\n+                message = RebuildSessionMessage(message);\n+            }\n             var graphsonMsg = _graphSONWriter.WriteObject(message);\n             var serializedMsg = _messageSerializer.SerializeMessage(graphsonMsg);\n             await _webSocketConnection.SendMessageAsync(serializedMsg).ConfigureAwait(false);\n         }\n \n+        private RequestMessage RebuildSessionMessage(RequestMessage message)\n+        {\n+            if (message.Processor == Tokens.OpsAuthentication)\n+            {\n+                return message;\n+            }\n+\n+            var msgBuilder = RequestMessage.Build(message.Operation)\n+              .OverrideRequestId(message.RequestId).Processor(Tokens.ProcessorSession);\n+            foreach(var kv in message.Arguments)\n+            {\n+                msgBuilder.AddArgument(kv.Key, kv.Value);\n+            }\n+            msgBuilder.AddArgument(Tokens.ArgsSession, _sessionId);\n+            return msgBuilder.Create();\n+        }\n+\n         public async Task CloseAsync()\n         {\n             Interlocked.Exchange(ref _connectionState, Closed);\n+\n+            if (_sessionEnabled)\n+            {\n+                await CloseSession().ConfigureAwait(false);\n+            }\n             await _webSocketConnection.CloseAsync().ConfigureAwait(false);\n         }\n \n+        private async Task CloseSession()\n+        {\n+            // build a request to close this session, 'gremlin' in args as tips and not be executed actually\n+            var msg = RequestMessage.Build(Tokens.OpsClose).Processor(Tokens.ProcessorSession)\n+              .AddArgument(Tokens.ArgsGremlin, \"session.close()\").Create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea03249113199d45af04a89e68f98b8370d001b2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgzMTA0OQ==", "bodyText": "I don't notice that sorry, and a good job to bound to client, great\nI will remove 'close'  in this PR,\nand another PR for javascript is going on. thanks", "url": "https://github.com/apache/tinkerpop/pull/1263#discussion_r394831049", "createdAt": "2020-03-19T07:22:58Z", "author": {"login": "heljoyLiu"}, "path": "gremlin-dotnet/src/Gremlin.Net/Driver/Connection.cs", "diffHunk": "@@ -235,17 +243,52 @@ private void NotifyAboutConnectionFailure(Exception exception)\n \n         private async Task SendMessageAsync(RequestMessage message)\n         {\n+            if (_sessionEnabled)\n+            {\n+                message = RebuildSessionMessage(message);\n+            }\n             var graphsonMsg = _graphSONWriter.WriteObject(message);\n             var serializedMsg = _messageSerializer.SerializeMessage(graphsonMsg);\n             await _webSocketConnection.SendMessageAsync(serializedMsg).ConfigureAwait(false);\n         }\n \n+        private RequestMessage RebuildSessionMessage(RequestMessage message)\n+        {\n+            if (message.Processor == Tokens.OpsAuthentication)\n+            {\n+                return message;\n+            }\n+\n+            var msgBuilder = RequestMessage.Build(message.Operation)\n+              .OverrideRequestId(message.RequestId).Processor(Tokens.ProcessorSession);\n+            foreach(var kv in message.Arguments)\n+            {\n+                msgBuilder.AddArgument(kv.Key, kv.Value);\n+            }\n+            msgBuilder.AddArgument(Tokens.ArgsSession, _sessionId);\n+            return msgBuilder.Create();\n+        }\n+\n         public async Task CloseAsync()\n         {\n             Interlocked.Exchange(ref _connectionState, Closed);\n+\n+            if (_sessionEnabled)\n+            {\n+                await CloseSession().ConfigureAwait(false);\n+            }\n             await _webSocketConnection.CloseAsync().ConfigureAwait(false);\n         }\n \n+        private async Task CloseSession()\n+        {\n+            // build a request to close this session, 'gremlin' in args as tips and not be executed actually\n+            var msg = RequestMessage.Build(Tokens.OpsClose).Processor(Tokens.ProcessorSession)\n+              .AddArgument(Tokens.ArgsGremlin, \"session.close()\").Create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMDI5NA=="}, "originalCommit": {"oid": "ea03249113199d45af04a89e68f98b8370d001b2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDUwNTY1OnYy", "diffSide": "RIGHT", "path": "gremlin-dotnet/test/Gremlin.Net.IntegrationTest/Driver/GremlinClientTests.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozOTo1MVrOF--qug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0ODoxM1rOF_Be4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4Mjc3OA==", "bodyText": "The test looks good in general, but it is not really an integration test as it works without any external dependencies like a Gremlin Server instance. Could you therefore please move it into the Gremlin.Net.UnitTest project? You can create a new class GremlinClientTests in the Driver directory there as there probably are no unit tests yet for this class.", "url": "https://github.com/apache/tinkerpop/pull/1263#discussion_r401582778", "createdAt": "2020-04-01T12:39:51Z", "author": {"login": "FlorianHockmann"}, "path": "gremlin-dotnet/test/Gremlin.Net.IntegrationTest/Driver/GremlinClientTests.cs", "diffHunk": "@@ -285,12 +285,22 @@ public async Task ShouldSaveVariableBetweenRequestsInSession()\n             var gremlinServer = new GremlinServer(TestHost, TestPort);\n             using (var gremlinClient = new GremlinClient(gremlinServer, sessionId: Guid.NewGuid().ToString()))\n             {\n-\n                 await gremlinClient.SubmitWithSingleResultAsync<int>(\"x = 1\");\n \n                 var response = await gremlinClient.SubmitWithSingleResultAsync<int>(\"x + 2\");\n                 Assert.Equal(3, response);\n             }\n         }\n+\n+        [Fact]\n+        public void ShouldThrowOnExecutionOfMultiConnectionInPool()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "001baf4585a3a7a95d04ec076f6e3c8c0dad7632"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyODg5OQ==", "bodyText": "ok, it's UnitTest, thanks", "url": "https://github.com/apache/tinkerpop/pull/1263#discussion_r401628899", "createdAt": "2020-04-01T13:48:13Z", "author": {"login": "heljoyLiu"}, "path": "gremlin-dotnet/test/Gremlin.Net.IntegrationTest/Driver/GremlinClientTests.cs", "diffHunk": "@@ -285,12 +285,22 @@ public async Task ShouldSaveVariableBetweenRequestsInSession()\n             var gremlinServer = new GremlinServer(TestHost, TestPort);\n             using (var gremlinClient = new GremlinClient(gremlinServer, sessionId: Guid.NewGuid().ToString()))\n             {\n-\n                 await gremlinClient.SubmitWithSingleResultAsync<int>(\"x = 1\");\n \n                 var response = await gremlinClient.SubmitWithSingleResultAsync<int>(\"x + 2\");\n                 Assert.Equal(3, response);\n             }\n         }\n+\n+        [Fact]\n+        public void ShouldThrowOnExecutionOfMultiConnectionInPool()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4Mjc3OA=="}, "originalCommit": {"oid": "001baf4585a3a7a95d04ec076f6e3c8c0dad7632"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDUxNzYyOnYy", "diffSide": "RIGHT", "path": "gremlin-dotnet/src/Gremlin.Net/Driver/GremlinClient.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MzowOVrOF--ybg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0OToyMFrOF_BiWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NDc1MA==", "bodyText": "I am not sure whether every user will understand what Session Client means as we don't use that term any where else I think. Could you maybe reword it to something like: Only a pool size of 1 is supported in session mode.?", "url": "https://github.com/apache/tinkerpop/pull/1263#discussion_r401584750", "createdAt": "2020-04-01T12:43:09Z", "author": {"login": "FlorianHockmann"}, "path": "gremlin-dotnet/src/Gremlin.Net/Driver/GremlinClient.cs", "diffHunk": "@@ -69,6 +69,21 @@ public class GremlinClient : IGremlinClient\n             var writer = graphSONWriter ?? new GraphSON3Writer();\n             var connectionFactory = new ConnectionFactory(gremlinServer, reader, writer, mimeType ?? DefaultMimeType,\n                 webSocketConfiguration, sessionId);\n+\n+            // make sure one connection in pool as session mode\n+            if (!String.IsNullOrEmpty(sessionId))\n+            {\n+                if (connectionPoolSettings != null)\n+                {\n+                    if (connectionPoolSettings.PoolSize != 1)\n+                        throw new ArgumentOutOfRangeException(nameof(connectionPoolSettings), \"Session Client PoolSize must be 1!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "001baf4585a3a7a95d04ec076f6e3c8c0dad7632"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyOTc4NQ==", "bodyText": "ok, session mode should be better", "url": "https://github.com/apache/tinkerpop/pull/1263#discussion_r401629785", "createdAt": "2020-04-01T13:49:20Z", "author": {"login": "heljoyLiu"}, "path": "gremlin-dotnet/src/Gremlin.Net/Driver/GremlinClient.cs", "diffHunk": "@@ -69,6 +69,21 @@ public class GremlinClient : IGremlinClient\n             var writer = graphSONWriter ?? new GraphSON3Writer();\n             var connectionFactory = new ConnectionFactory(gremlinServer, reader, writer, mimeType ?? DefaultMimeType,\n                 webSocketConfiguration, sessionId);\n+\n+            // make sure one connection in pool as session mode\n+            if (!String.IsNullOrEmpty(sessionId))\n+            {\n+                if (connectionPoolSettings != null)\n+                {\n+                    if (connectionPoolSettings.PoolSize != 1)\n+                        throw new ArgumentOutOfRangeException(nameof(connectionPoolSettings), \"Session Client PoolSize must be 1!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NDc1MA=="}, "originalCommit": {"oid": "001baf4585a3a7a95d04ec076f6e3c8c0dad7632"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4162, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}