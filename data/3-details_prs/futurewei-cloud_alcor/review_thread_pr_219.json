{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjg0Mjk2", "number": 219, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTowNzo1NVrOEAJGtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyMzozMlrOED7_CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTg0NjI4OnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/filter/KeystoneAuthWebFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTowNzo1NVrOGbPR8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTowNzo1NVrOGbPR8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNTA5MA==", "bodyText": "I would recommend to use constant variables to store \"/v2.0\" and other versioning related variable so that it is easy to identify and change in the future once OpenStack advances its feature.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r431215090", "createdAt": "2020-05-27T15:07:55Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/filter/KeystoneAuthWebFilter.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.futurewei.alcor.apigateway.filter;\n+\n+import com.futurewei.alcor.apigateway.utils.KeystoneClient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebFilter;\n+import org.springframework.web.server.WebFilterChain;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+\n+\n+@Component\n+public class KeystoneAuthWebFilter implements WebFilter {\n+\n+    private static final String AUTHORIZE_TOKEN = \"X-Auth-Token\";\n+\n+    @Autowired\n+    private KeystoneClient keystoneClient;\n+\n+    @Override\n+    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n+        String token = exchange.getRequest().getHeaders().getFirst(AUTHORIZE_TOKEN);\n+        try {\n+            String projectId = keystoneClient.verifyToken(token);\n+            if(\"\".equals(projectId)){\n+                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);\n+                return exchange.getResponse().setComplete();\n+            }\n+            // rewrite uri path include project id\n+            ServerHttpRequest req = exchange.getRequest();\n+            ServerWebExchangeUtils.addOriginalRequestUrl(exchange, req.getURI());\n+            String path = req.getURI().getRawPath();\n+            String newPath = path.replaceAll(\"/v2.0\", \"/project/\" + projectId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78385e3bef3a2b400d58c9d613e1e353e46c50b9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTg1MDk5OnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/filter/KeystoneAuthWebFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTowOTowMlrOGbPVGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTowOTowMlrOGbPVGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNTg5OQ==", "bodyText": "I see most of the payload is feature codes for integration with KeyStone. Can we add it to description accordingly.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r431215899", "createdAt": "2020-05-27T15:09:02Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/filter/KeystoneAuthWebFilter.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.futurewei.alcor.apigateway.filter;\n+\n+import com.futurewei.alcor.apigateway.utils.KeystoneClient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebFilter;\n+import org.springframework.web.server.WebFilterChain;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+\n+\n+@Component\n+public class KeystoneAuthWebFilter implements WebFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78385e3bef3a2b400d58c9d613e1e353e46c50b9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjE2Mjk5OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMzozNjoxOFrOGcNteg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMzozNjoxOFrOGcNteg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzNzk0Ng==", "bodyText": "Add the following line to define the imagesdir variable. Otherwise, the images don't show up (check https://github.com/Gzure/alcor/blob/master/docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc)\n:imagesdir: ../../images", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r432237946", "createdAt": "2020-05-29T03:36:18Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ad3c713ff08c2b9901c6adb303fdc8b86786d5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjE5NTUyOnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMzo1ODo1NVrOGcOA2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoyOTo0OFrOGdvV8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0MjkwNg==", "bodyText": "The workflow diagram is very good \ud83d\udc4d Thank you for putting efforts on it.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r432242906", "createdAt": "2020-05-29T03:58:55Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ad3c713ff08c2b9901c6adb303fdc8b86786d5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0NTAxNQ==", "bodyText": "I have a few comments:\n\nIt seems that Steps 2 - 5 are not required for every customer request, meaning that every API Gateway instance could proactively retrieve the \"alcor token\" when the instance launches. Is this understanding right? If so, we could split the diagram into two diagrams, one for the preparation phase of Alcor and the other for customer request.\nCould you elaborate what \"Alcor token\" is, what will it be used for?\nWe could need a cache layer to store the Alcor token and customer tokens as well. Could you add the cache into this diagram and details in the design doc? Thank you.\nSome minor typos in the diagram:\n\n\nGateway Api Layter => Gateway API Layer\nMicro Service 1 => Microservice 1\nRequest Realy Service => do you mean \"Request Real Service\" or \"Request Ready Service\"", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r432245015", "createdAt": "2020-05-29T04:08:37Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0MjkwNg=="}, "originalCommit": {"oid": "01ad3c713ff08c2b9901c6adb303fdc8b86786d5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5NjE2OA==", "bodyText": "An Alcor token is used for verifying customer request token, it is different from request token that has more permissions than a request token. An Alcor is generate from keystone by using Alcor local keystone properties.\nSteps 2-3 are required for the first customer request come, it will init keystone available endpoint. But steps 4-5 are required for every customer when the Alcor token is null or expired.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r432796168", "createdAt": "2020-05-30T01:12:38Z", "author": {"login": "Gzure"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0MjkwNg=="}, "originalCommit": {"oid": "01ad3c713ff08c2b9901c6adb303fdc8b86786d5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMTIxOQ==", "bodyText": "An Alcor token is used for verifying customer request token, it is different from request token that has more permissions than a request token. An Alcor is generate from keystone by using Alcor local keystone properties.\n\n\nI see. Alcor token is a token owned by infra and used to verify the request token.\n\n\nSteps 2-3 are required for the first customer request come, it will init keystone available endpoint. But steps 4-5 are required for every customer when the Alcor token is null or expired.\n\n\nOkay. Neither Steps 2-3 nor Steps 4-5 are executed for every customer request. Instead, they will be executed proactively. For example,\n\nSteps 2-3 could be triggered when we launch a new Alcor instance, no need to wait until the first call comes.\nSteps 4-5 could be proactively triggered when the existing Alcor token is null or close to expiry, meaning that we need to maintain at least two tokens at that time. We can't wait until the \"first\" customer request arrives, as there might be multiple such calls arriving almost at the same time.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r432801219", "createdAt": "2020-05-30T02:15:21Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0MjkwNg=="}, "originalCommit": {"oid": "01ad3c713ff08c2b9901c6adb303fdc8b86786d5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwNDQ3NA==", "bodyText": "Ok,\n\nAlcor could execute steps 2-5 to get available endpoints and token when it starts.\nI think the remaining two tokens are the same as the remaining one token. Because a token have a solid expire time, two tokens will expire at the same time. Alcor could request a new token when the current token expiring soon.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r432804474", "createdAt": "2020-05-30T03:07:27Z", "author": {"login": "Gzure"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0MjkwNg=="}, "originalCommit": {"oid": "01ad3c713ff08c2b9901c6adb303fdc8b86786d5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzNzU1Mg==", "bodyText": "Saw the new diagrams. Awesome!", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r433837552", "createdAt": "2020-06-02T12:29:48Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0MjkwNg=="}, "originalCommit": {"oid": "01ad3c713ff08c2b9901c6adb303fdc8b86786d5"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjIwOTc0OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNDowOToyM1rOGcOJuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNDowOToyM1rOGcOJuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0NTE3Nw==", "bodyText": "Microservice APIs", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r432245177", "createdAt": "2020-05-29T04:09:23Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,53 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]\n+\n+== Integration Proposal\n+\n+. Micro Service api should support multi params query eg: show/list actions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01ad3c713ff08c2b9901c6adb303fdc8b86786d5"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY0NzA3OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoxOTozOFrOGePG5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODowNDoyMlrOGeQnlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1Nzk5MA==", "bodyText": "@Gzure Are we following similar steps as keystonemiddle?", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r434357990", "createdAt": "2020-06-03T07:19:38Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4Mjc0Mw==", "bodyText": "Most steps are similar to keystonemiddle\u3002", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r434382743", "createdAt": "2020-06-03T08:04:22Z", "author": {"login": "Gzure"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1Nzk5MA=="}, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY1MzAyOnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyMToxNFrOGePKRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjoyMDo0MFrOGfeQlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1ODg1NQ==", "bodyText": "In the start_workflow, I believe we likely need to add one more step -- store the Alcor Token to the cache.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r434358855", "createdAt": "2020-06-03T07:21:14Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4NTE3Mw==", "bodyText": "Why should we store the Alcor Token to the cache? It stores in application local can work well, we can get the token directly and don't need to get from the cache.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r434385173", "createdAt": "2020-06-03T08:08:32Z", "author": {"login": "Gzure"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1ODg1NQ=="}, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1NDgwNg==", "bodyText": "Okay you refer to storing the Alcor Token in the API gateway memory, right? It is okay for now. But I was wondering we could store the Alcor token in the cache (maybe separate cache repo from the customer token).", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435654806", "createdAt": "2020-06-05T02:20:40Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1ODg1NQ=="}, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY2NTI2OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyNDo0MFrOGePRXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyNDo0MFrOGePRXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MDY2OA==", "bodyText": "Agreed! Like the write-through cache design.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r434360668", "createdAt": "2020-06-03T07:24:40Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]\n+\n+== Token Cache Design\n+Consider multi customer requests have a same token, it's not need to send a request to keystone to verfiy the same token for every request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY3MTczOnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyNjozNVrOGePVZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyNjozNVrOGePVZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MTcwMQ==", "bodyText": "Use a table to list the schema.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r434361701", "createdAt": "2020-06-03T07:26:35Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]\n+\n+== Token Cache Design\n+Consider multi customer requests have a same token, it's not need to send a request to keystone to verfiy the same token for every request.\n+A cache component can cache all verified token. Alcor will check cache first that the customer request token is verifed,\n+it will return token info if cache have the customer token. If the customer token not in cache , it will send a request to keystone\n+and check response and cache the token result.\n+\n+\n+A cache data have a expired time to clear no use cache tokens.And Double the token expiration as the cache expiration time.\n+This can prevent customer request from still carrying expired tokens for verification.\n+\n+== Data Schema\n+How token store in cache\uff1a +\n+A cache token key is token self. +\n+A token entity include: +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY3NDg1OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyNzoyNVrOGePXMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyNzoyNVrOGePXMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MjE2Mw==", "bodyText": "We could make the example a bit pretty :-) by formatting it in an env.\nExample: https://github.com/futurewei-cloud/alcor/blob/master/docs/modules/ROOT/pages/mgmt_services/private_ip_manager.adoc", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r434362163", "createdAt": "2020-06-03T07:27:25Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]\n+\n+== Token Cache Design\n+Consider multi customer requests have a same token, it's not need to send a request to keystone to verfiy the same token for every request.\n+A cache component can cache all verified token. Alcor will check cache first that the customer request token is verifed,\n+it will return token info if cache have the customer token. If the customer token not in cache , it will send a request to keystone\n+and check response and cache the token result.\n+\n+\n+A cache data have a expired time to clear no use cache tokens.And Double the token expiration as the cache expiration time.\n+This can prevent customer request from still carrying expired tokens for verification.\n+\n+== Data Schema\n+How token store in cache\uff1a +\n+A cache token key is token self. +\n+A token entity include: +\n+. string token: a token self +\n+. date expireAt: the date which token expire at +\n+. string user: the token user name  +\n+. string userId: the token user id +\n+. string domainId: the token user domain id +\n+. string domainName: the token user domain name +\n+. string projectName: the token project name +\n+. string projectId: the token project id +\n+. string projectDomain: the token project domain +\n+. boolean invalid: the token whether valid from keystone, true\uff1a invalid  false: valid +\n+. list<String> roles: the token user role names +\n+\n+examples: +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY3Nzc5OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyODoxMlrOGePY6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODoyMzo1OVrOGe7GDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MjYwMg==", "bodyText": "Yes, how are you going to test this change? Thoughts?", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r434362602", "createdAt": "2020-06-03T07:28:12Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]\n+\n+== Token Cache Design\n+Consider multi customer requests have a same token, it's not need to send a request to keystone to verfiy the same token for every request.\n+A cache component can cache all verified token. Alcor will check cache first that the customer request token is verifed,\n+it will return token info if cache have the customer token. If the customer token not in cache , it will send a request to keystone\n+and check response and cache the token result.\n+\n+\n+A cache data have a expired time to clear no use cache tokens.And Double the token expiration as the cache expiration time.\n+This can prevent customer request from still carrying expired tokens for verification.\n+\n+== Data Schema\n+How token store in cache\uff1a +\n+A cache token key is token self. +\n+A token entity include: +\n+. string token: a token self +\n+. date expireAt: the date which token expire at +\n+. string user: the token user name  +\n+. string userId: the token user id +\n+. string domainId: the token user domain id +\n+. string domainName: the token user domain name +\n+. string projectName: the token project name +\n+. string projectId: the token project id +\n+. string projectDomain: the token project domain +\n+. boolean invalid: the token whether valid from keystone, true\uff1a invalid  false: valid +\n+. list<String> roles: the token user role names +\n+\n+examples: +\n+{ +\n+  \"token\"\uff1a \u201cgAAAAABex0sfasdf2234234asdfBSDFREW32324234\u201d\uff0c +\n+  \"expireAt\": \"2020-05-30T16:00:00.000+0000\", +\n+  \"user\": \"neutron\", +\n+  \"useId\": \"10a2e6e717a245d9acad3e5f97aeca3d\", +\n+  \"domainId\": \"default\", +\n+  \"domainName\": \"Default\", +\n+  \"projectName\": \"admin\", +\n+  \"projectId\": \"a6944d763bf64ee6a275f1263fae0352\", +\n+  \"projectDomain\": \"Default\", +\n+  \"invalid\": false, +\n+  \"roles\": [\"admin\", \"demo\"] +\n+}\n+\n+== Integration Proposal\n+\n+. Microservice APIs should support multi params query eg: show/list actions\n+. Rename resource name in url path or add same resource name in url path\n+. Support \"field\" params in api and response body should have the \"field\" params content\n+\n+== Test Plan\n+\n+TBD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4OTUxMg==", "bodyText": "Use unit tests to test whether basic functions are faulty.\nTest whether there is a problem with the simulated Keystone environment test.\nTest whether the function integrated into the real OpenStack environment is normal.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r434389512", "createdAt": "2020-06-03T08:16:17Z", "author": {"login": "Gzure"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]\n+\n+== Token Cache Design\n+Consider multi customer requests have a same token, it's not need to send a request to keystone to verfiy the same token for every request.\n+A cache component can cache all verified token. Alcor will check cache first that the customer request token is verifed,\n+it will return token info if cache have the customer token. If the customer token not in cache , it will send a request to keystone\n+and check response and cache the token result.\n+\n+\n+A cache data have a expired time to clear no use cache tokens.And Double the token expiration as the cache expiration time.\n+This can prevent customer request from still carrying expired tokens for verification.\n+\n+== Data Schema\n+How token store in cache\uff1a +\n+A cache token key is token self. +\n+A token entity include: +\n+. string token: a token self +\n+. date expireAt: the date which token expire at +\n+. string user: the token user name  +\n+. string userId: the token user id +\n+. string domainId: the token user domain id +\n+. string domainName: the token user domain name +\n+. string projectName: the token project name +\n+. string projectId: the token project id +\n+. string projectDomain: the token project domain +\n+. boolean invalid: the token whether valid from keystone, true\uff1a invalid  false: valid +\n+. list<String> roles: the token user role names +\n+\n+examples: +\n+{ +\n+  \"token\"\uff1a \u201cgAAAAABex0sfasdf2234234asdfBSDFREW32324234\u201d\uff0c +\n+  \"expireAt\": \"2020-05-30T16:00:00.000+0000\", +\n+  \"user\": \"neutron\", +\n+  \"useId\": \"10a2e6e717a245d9acad3e5f97aeca3d\", +\n+  \"domainId\": \"default\", +\n+  \"domainName\": \"Default\", +\n+  \"projectName\": \"admin\", +\n+  \"projectId\": \"a6944d763bf64ee6a275f1263fae0352\", +\n+  \"projectDomain\": \"Default\", +\n+  \"invalid\": false, +\n+  \"roles\": [\"admin\", \"demo\"] +\n+}\n+\n+== Integration Proposal\n+\n+. Microservice APIs should support multi params query eg: show/list actions\n+. Rename resource name in url path or add same resource name in url path\n+. Support \"field\" params in api and response body should have the \"field\" params content\n+\n+== Test Plan\n+\n+TBD", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MjYwMg=="}, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0Nzc1Nw==", "bodyText": "Sounds like a plan. Regarding 3, I would suggest to do an integration test with a running OpenStack KeyStone server.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435047757", "createdAt": "2020-06-04T07:29:01Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]\n+\n+== Token Cache Design\n+Consider multi customer requests have a same token, it's not need to send a request to keystone to verfiy the same token for every request.\n+A cache component can cache all verified token. Alcor will check cache first that the customer request token is verifed,\n+it will return token info if cache have the customer token. If the customer token not in cache , it will send a request to keystone\n+and check response and cache the token result.\n+\n+\n+A cache data have a expired time to clear no use cache tokens.And Double the token expiration as the cache expiration time.\n+This can prevent customer request from still carrying expired tokens for verification.\n+\n+== Data Schema\n+How token store in cache\uff1a +\n+A cache token key is token self. +\n+A token entity include: +\n+. string token: a token self +\n+. date expireAt: the date which token expire at +\n+. string user: the token user name  +\n+. string userId: the token user id +\n+. string domainId: the token user domain id +\n+. string domainName: the token user domain name +\n+. string projectName: the token project name +\n+. string projectId: the token project id +\n+. string projectDomain: the token project domain +\n+. boolean invalid: the token whether valid from keystone, true\uff1a invalid  false: valid +\n+. list<String> roles: the token user role names +\n+\n+examples: +\n+{ +\n+  \"token\"\uff1a \u201cgAAAAABex0sfasdf2234234asdfBSDFREW32324234\u201d\uff0c +\n+  \"expireAt\": \"2020-05-30T16:00:00.000+0000\", +\n+  \"user\": \"neutron\", +\n+  \"useId\": \"10a2e6e717a245d9acad3e5f97aeca3d\", +\n+  \"domainId\": \"default\", +\n+  \"domainName\": \"Default\", +\n+  \"projectName\": \"admin\", +\n+  \"projectId\": \"a6944d763bf64ee6a275f1263fae0352\", +\n+  \"projectDomain\": \"Default\", +\n+  \"invalid\": false, +\n+  \"roles\": [\"admin\", \"demo\"] +\n+}\n+\n+== Integration Proposal\n+\n+. Microservice APIs should support multi params query eg: show/list actions\n+. Rename resource name in url path or add same resource name in url path\n+. Support \"field\" params in api and response body should have the \"field\" params content\n+\n+== Test Plan\n+\n+TBD", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MjYwMg=="}, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1ODE4MQ==", "bodyText": "@Gzure also, I would recommend to deploy multiple API gateway instance and test that scenarios.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435058181", "createdAt": "2020-06-04T07:48:36Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]\n+\n+== Token Cache Design\n+Consider multi customer requests have a same token, it's not need to send a request to keystone to verfiy the same token for every request.\n+A cache component can cache all verified token. Alcor will check cache first that the customer request token is verifed,\n+it will return token info if cache have the customer token. If the customer token not in cache , it will send a request to keystone\n+and check response and cache the token result.\n+\n+\n+A cache data have a expired time to clear no use cache tokens.And Double the token expiration as the cache expiration time.\n+This can prevent customer request from still carrying expired tokens for verification.\n+\n+== Data Schema\n+How token store in cache\uff1a +\n+A cache token key is token self. +\n+A token entity include: +\n+. string token: a token self +\n+. date expireAt: the date which token expire at +\n+. string user: the token user name  +\n+. string userId: the token user id +\n+. string domainId: the token user domain id +\n+. string domainName: the token user domain name +\n+. string projectName: the token project name +\n+. string projectId: the token project id +\n+. string projectDomain: the token project domain +\n+. boolean invalid: the token whether valid from keystone, true\uff1a invalid  false: valid +\n+. list<String> roles: the token user role names +\n+\n+examples: +\n+{ +\n+  \"token\"\uff1a \u201cgAAAAABex0sfasdf2234234asdfBSDFREW32324234\u201d\uff0c +\n+  \"expireAt\": \"2020-05-30T16:00:00.000+0000\", +\n+  \"user\": \"neutron\", +\n+  \"useId\": \"10a2e6e717a245d9acad3e5f97aeca3d\", +\n+  \"domainId\": \"default\", +\n+  \"domainName\": \"Default\", +\n+  \"projectName\": \"admin\", +\n+  \"projectId\": \"a6944d763bf64ee6a275f1263fae0352\", +\n+  \"projectDomain\": \"Default\", +\n+  \"invalid\": false, +\n+  \"roles\": [\"admin\", \"demo\"] +\n+}\n+\n+== Integration Proposal\n+\n+. Microservice APIs should support multi params query eg: show/list actions\n+. Rename resource name in url path or add same resource name in url path\n+. Support \"field\" params in api and response body should have the \"field\" params content\n+\n+== Test Plan\n+\n+TBD", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MjYwMg=="}, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA3ODY3MQ==", "bodyText": "OK", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435078671", "createdAt": "2020-06-04T08:23:59Z", "author": {"login": "Gzure"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]\n+\n+== Token Cache Design\n+Consider multi customer requests have a same token, it's not need to send a request to keystone to verfiy the same token for every request.\n+A cache component can cache all verified token. Alcor will check cache first that the customer request token is verifed,\n+it will return token info if cache have the customer token. If the customer token not in cache , it will send a request to keystone\n+and check response and cache the token result.\n+\n+\n+A cache data have a expired time to clear no use cache tokens.And Double the token expiration as the cache expiration time.\n+This can prevent customer request from still carrying expired tokens for verification.\n+\n+== Data Schema\n+How token store in cache\uff1a +\n+A cache token key is token self. +\n+A token entity include: +\n+. string token: a token self +\n+. date expireAt: the date which token expire at +\n+. string user: the token user name  +\n+. string userId: the token user id +\n+. string domainId: the token user domain id +\n+. string domainName: the token user domain name +\n+. string projectName: the token project name +\n+. string projectId: the token project id +\n+. string projectDomain: the token project domain +\n+. boolean invalid: the token whether valid from keystone, true\uff1a invalid  false: valid +\n+. list<String> roles: the token user role names +\n+\n+examples: +\n+{ +\n+  \"token\"\uff1a \u201cgAAAAABex0sfasdf2234234asdfBSDFREW32324234\u201d\uff0c +\n+  \"expireAt\": \"2020-05-30T16:00:00.000+0000\", +\n+  \"user\": \"neutron\", +\n+  \"useId\": \"10a2e6e717a245d9acad3e5f97aeca3d\", +\n+  \"domainId\": \"default\", +\n+  \"domainName\": \"Default\", +\n+  \"projectName\": \"admin\", +\n+  \"projectId\": \"a6944d763bf64ee6a275f1263fae0352\", +\n+  \"projectDomain\": \"Default\", +\n+  \"invalid\": false, +\n+  \"roles\": [\"admin\", \"demo\"] +\n+}\n+\n+== Integration Proposal\n+\n+. Microservice APIs should support multi params query eg: show/list actions\n+. Rename resource name in url path or add same resource name in url path\n+. Support \"field\" params in api and response body should have the \"field\" params content\n+\n+== Test Plan\n+\n+TBD", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MjYwMg=="}, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTY4MjYyOnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzoyOToyNFrOGePbpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzozODoxNFrOGe5f0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MzMwMQ==", "bodyText": "I believe you've listed all the missing APIs and behaviors in the other Nova doc. Could you also work with @chenpiaoping to add the support for the multi-param query? This is quite critical.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r434363301", "createdAt": "2020-06-03T07:29:24Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]\n+\n+== Token Cache Design\n+Consider multi customer requests have a same token, it's not need to send a request to keystone to verfiy the same token for every request.\n+A cache component can cache all verified token. Alcor will check cache first that the customer request token is verifed,\n+it will return token info if cache have the customer token. If the customer token not in cache , it will send a request to keystone\n+and check response and cache the token result.\n+\n+\n+A cache data have a expired time to clear no use cache tokens.And Double the token expiration as the cache expiration time.\n+This can prevent customer request from still carrying expired tokens for verification.\n+\n+== Data Schema\n+How token store in cache\uff1a +\n+A cache token key is token self. +\n+A token entity include: +\n+. string token: a token self +\n+. date expireAt: the date which token expire at +\n+. string user: the token user name  +\n+. string userId: the token user id +\n+. string domainId: the token user domain id +\n+. string domainName: the token user domain name +\n+. string projectName: the token project name +\n+. string projectId: the token project id +\n+. string projectDomain: the token project domain +\n+. boolean invalid: the token whether valid from keystone, true\uff1a invalid  false: valid +\n+. list<String> roles: the token user role names +\n+\n+examples: +\n+{ +\n+  \"token\"\uff1a \u201cgAAAAABex0sfasdf2234234asdfBSDFREW32324234\u201d\uff0c +\n+  \"expireAt\": \"2020-05-30T16:00:00.000+0000\", +\n+  \"user\": \"neutron\", +\n+  \"useId\": \"10a2e6e717a245d9acad3e5f97aeca3d\", +\n+  \"domainId\": \"default\", +\n+  \"domainName\": \"Default\", +\n+  \"projectName\": \"admin\", +\n+  \"projectId\": \"a6944d763bf64ee6a275f1263fae0352\", +\n+  \"projectDomain\": \"Default\", +\n+  \"invalid\": false, +\n+  \"roles\": [\"admin\", \"demo\"] +\n+}\n+\n+== Integration Proposal\n+\n+. Microservice APIs should support multi params query eg: show/list actions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwMTEzNg==", "bodyText": "Ok, I will follow this.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r434401136", "createdAt": "2020-06-03T08:35:36Z", "author": {"login": "Gzure"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]\n+\n+== Token Cache Design\n+Consider multi customer requests have a same token, it's not need to send a request to keystone to verfiy the same token for every request.\n+A cache component can cache all verified token. Alcor will check cache first that the customer request token is verifed,\n+it will return token info if cache have the customer token. If the customer token not in cache , it will send a request to keystone\n+and check response and cache the token result.\n+\n+\n+A cache data have a expired time to clear no use cache tokens.And Double the token expiration as the cache expiration time.\n+This can prevent customer request from still carrying expired tokens for verification.\n+\n+== Data Schema\n+How token store in cache\uff1a +\n+A cache token key is token self. +\n+A token entity include: +\n+. string token: a token self +\n+. date expireAt: the date which token expire at +\n+. string user: the token user name  +\n+. string userId: the token user id +\n+. string domainId: the token user domain id +\n+. string domainName: the token user domain name +\n+. string projectName: the token project name +\n+. string projectId: the token project id +\n+. string projectDomain: the token project domain +\n+. boolean invalid: the token whether valid from keystone, true\uff1a invalid  false: valid +\n+. list<String> roles: the token user role names +\n+\n+examples: +\n+{ +\n+  \"token\"\uff1a \u201cgAAAAABex0sfasdf2234234asdfBSDFREW32324234\u201d\uff0c +\n+  \"expireAt\": \"2020-05-30T16:00:00.000+0000\", +\n+  \"user\": \"neutron\", +\n+  \"useId\": \"10a2e6e717a245d9acad3e5f97aeca3d\", +\n+  \"domainId\": \"default\", +\n+  \"domainName\": \"Default\", +\n+  \"projectName\": \"admin\", +\n+  \"projectId\": \"a6944d763bf64ee6a275f1263fae0352\", +\n+  \"projectDomain\": \"Default\", +\n+  \"invalid\": false, +\n+  \"roles\": [\"admin\", \"demo\"] +\n+}\n+\n+== Integration Proposal\n+\n+. Microservice APIs should support multi params query eg: show/list actions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MzMwMQ=="}, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1MjQ5OQ==", "bodyText": "Thank you. Issue #233 for tracking.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435052499", "createdAt": "2020-06-04T07:38:14Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,98 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]\n+\n+== Token Cache Design\n+Consider multi customer requests have a same token, it's not need to send a request to keystone to verfiy the same token for every request.\n+A cache component can cache all verified token. Alcor will check cache first that the customer request token is verifed,\n+it will return token info if cache have the customer token. If the customer token not in cache , it will send a request to keystone\n+and check response and cache the token result.\n+\n+\n+A cache data have a expired time to clear no use cache tokens.And Double the token expiration as the cache expiration time.\n+This can prevent customer request from still carrying expired tokens for verification.\n+\n+== Data Schema\n+How token store in cache\uff1a +\n+A cache token key is token self. +\n+A token entity include: +\n+. string token: a token self +\n+. date expireAt: the date which token expire at +\n+. string user: the token user name  +\n+. string userId: the token user id +\n+. string domainId: the token user domain id +\n+. string domainName: the token user domain name +\n+. string projectName: the token project name +\n+. string projectId: the token project id +\n+. string projectDomain: the token project domain +\n+. boolean invalid: the token whether valid from keystone, true\uff1a invalid  false: valid +\n+. list<String> roles: the token user role names +\n+\n+examples: +\n+{ +\n+  \"token\"\uff1a \u201cgAAAAABex0sfasdf2234234asdfBSDFREW32324234\u201d\uff0c +\n+  \"expireAt\": \"2020-05-30T16:00:00.000+0000\", +\n+  \"user\": \"neutron\", +\n+  \"useId\": \"10a2e6e717a245d9acad3e5f97aeca3d\", +\n+  \"domainId\": \"default\", +\n+  \"domainName\": \"Default\", +\n+  \"projectName\": \"admin\", +\n+  \"projectId\": \"a6944d763bf64ee6a275f1263fae0352\", +\n+  \"projectDomain\": \"Default\", +\n+  \"invalid\": false, +\n+  \"roles\": [\"admin\", \"demo\"] +\n+}\n+\n+== Integration Proposal\n+\n+. Microservice APIs should support multi params query eg: show/list actions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MzMwMQ=="}, "originalCommit": {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTk3MzIyOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/entity/TokenEntity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzo0MzozNlrOGe5qvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzo0MzozNlrOGe5qvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1NTI5Mg==", "bodyText": "For the getter and setter, we can use an annotation @DaTa to automatically generate the methods.\nA good example: https://github.com/futurewei-cloud/alcor/blob/master/web/src/main/java/com/futurewei/alcor/web/entity/port/PortEntity.java", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435055292", "createdAt": "2020-06-04T07:43:36Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/entity/TokenEntity.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.common.entity;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+public class TokenEntity {\n+\n+    String token;\n+    Date expireAt;\n+    String user;\n+    String userId;\n+    String domainId;\n+    String domainName;\n+    String projectName;\n+    String projectId;\n+    String projectDomain;\n+    boolean invalid;\n+    List<String> roles;\n+\n+    public TokenEntity(String token, boolean invalid){\n+        this.invalid = invalid;\n+        this.token = token;\n+    }\n+\n+    public boolean isExpired(){\n+        return invalid || (expireAt != null && expireAt.before(new Date()));\n+    }\n+\n+    public String getToken() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86ccba3b6531529ffff03f84e25c92e45327d942"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzYxNjc2OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/CacheFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTo0NToxNlrOGfdupw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjo1NzowNFrOGfeyLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0NjExOQ==", "bodyText": "As this is a general interface for Ignite, Redis and other DBs, ideally we should keep the interface db-independent. Could we move this method to Redis class only?\n@Gzure @chenpiaoping We need to add a comment to this interface. Thank you.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435646119", "createdAt": "2020-06-05T01:45:16Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/CacheFactory.java", "diffHunk": "@@ -43,27 +49,46 @@ CacheFactory cacheFactoryInstance() {\n         return new CacheFactory();\n     }\n \n-    private ICache getIgniteCache(String cacheName) {\n+    private <K, V> ICache<K, V> getIgniteCache(String cacheName) {\n         return new IgniteCache<>(igniteClient, cacheName);\n     }\n \n-    public <K, V> ICache getRedisCache(Class<V> v, String cacheName) {\n-        RedisTemplate<K, V> template = new RedisTemplate<K, V>();\n+    public <K, V> RedisTemplate<K, V> getRedisTemplate(Class<V> v){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MzQwNg==", "bodyText": "I think we could create a CacheFactory interface, and a DB interface implement a CacheFactory. So we will return different DB CacheFactory from application properties. We can make all DB keep independent.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435663406", "createdAt": "2020-06-05T02:57:04Z", "author": {"login": "Gzure"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/CacheFactory.java", "diffHunk": "@@ -43,27 +49,46 @@ CacheFactory cacheFactoryInstance() {\n         return new CacheFactory();\n     }\n \n-    private ICache getIgniteCache(String cacheName) {\n+    private <K, V> ICache<K, V> getIgniteCache(String cacheName) {\n         return new IgniteCache<>(igniteClient, cacheName);\n     }\n \n-    public <K, V> ICache getRedisCache(Class<V> v, String cacheName) {\n-        RedisTemplate<K, V> template = new RedisTemplate<K, V>();\n+    public <K, V> RedisTemplate<K, V> getRedisTemplate(Class<V> v){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0NjExOQ=="}, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzYxOTM4OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/CacheFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTo0NzowMVrOGfdwSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTo0NzowMVrOGfdwSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0NjUzOA==", "bodyText": "We could use a generic name \"getExpireCache\" and implement it different in Ignite and Redis.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435646538", "createdAt": "2020-06-05T01:47:01Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/CacheFactory.java", "diffHunk": "@@ -43,27 +49,46 @@ CacheFactory cacheFactoryInstance() {\n         return new CacheFactory();\n     }\n \n-    private ICache getIgniteCache(String cacheName) {\n+    private <K, V> ICache<K, V> getIgniteCache(String cacheName) {\n         return new IgniteCache<>(igniteClient, cacheName);\n     }\n \n-    public <K, V> ICache getRedisCache(Class<V> v, String cacheName) {\n-        RedisTemplate<K, V> template = new RedisTemplate<K, V>();\n+    public <K, V> RedisTemplate<K, V> getRedisTemplate(Class<V> v){\n+        RedisTemplate<K, V> template = new RedisTemplate<>();\n         template.setConnectionFactory(lettuceConnectionFactory);\n         template.setKeySerializer(new StringRedisSerializer());\n \n         template.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(v));\n         template.setValueSerializer(new Jackson2JsonRedisSerializer<>(v));\n         template.afterPropertiesSet();\n \n+        return template;\n+    }\n+\n+    public <K, V> ICache<K, V> getRedisCache(Class<V> v, String cacheName) {\n+        RedisTemplate<K, V> template = getRedisTemplate(v);\n         return new RedisCache<>(template, cacheName);\n     }\n \n-    public <K, V> ICache getCache(Class<V> v) {\n+    public <K, V> ICache<K, V> getRedisExpireCache(Class<V> v, long timeout, TimeUnit timeUnit){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzY2OTEyOnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjoxODozOVrOGfeOuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjoxODozOVrOGfeOuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1NDMyOQ==", "bodyText": "In this diagram, there was no step 2. I guess you wanted to use \"2.1 and 2.2\" to represent the optional steps to get the Alcor Token.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435654329", "createdAt": "2020-06-05T02:18:39Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/deploy_related/integration_keystone.adoc", "diffHunk": "@@ -0,0 +1,141 @@\n+= Integration with OpenStack Keystone\n+v0.1, 2020-05-28\n+:toc: right\n+:imagesdir: ../../images\n+\n+NOTE: This document is under development\n+\n+== Overview\n+\n+Alcor API currently requires a project id in the API Url.Neutron 2.0 APIs, however, don't need to provide a project id as\n+it generates the project id based on the Authentication token in the X-Auth-Token request header, when Keystone is enabled.\n+\n+Reference: https://docs.openstack.org/api-ref/network/v2/\n+\"The Networking API v2.0 uses the OpenStack Identity service as the default authentication service.\n+When Keystone is enabled, users that submit requests to the OpenStack Networking service must provide an authentication\n+token in X-Auth-Token request header. You obtain the token by authenticating to the Keystone endpoint.\n+\n+When Keystone is enabled, the project_id attribute is not required in create requests\n+because the project ID is derived from the authentication token.\"\n+\n+[#system-requirements]\n+== Integration Requirements\n+\n+. Identify Neutron's algorithm that generates project id based on X-Auth-Token.\n+. Make changes to API Gateway to support Authentication & Authorization with KeyStone, and support same way how project id is generated based on X-Auth-Token in API Gateway.\n+. Integration testing with KeyStone.\n+\n+== Review of OpenStack Workflow\n+https://docs.openstack.org/api-ref/identity/v3/index.html#check-token[Openstack keystone apis]\n+\n+In openstack neutron project, it use keystonemiddle to verify request token. .\n+Verify request token have few steps.\n+\n+. get available keystone endpoints from keystone server\n+. request local token from keystone server with keystone client conf in neutron.conf\n+. verify request token from keystone server\n+\n+== Required Changes\n+\n+. Add a KeystoneAuthWebFilter class to fetch all api-gateway request token and verify token from keystone server and get project_id from verify api response.\n+. Add keystone conf in application.properties file (https://docs.openstack.org/keystone/latest/user/supported_clients.html[keystone config example])\n+\n+== KeystoneAuthWebFilter Start Workflow\n+image::keystone_filter_start_workflow.jpg[\"KeystoneAuthWebFilter Start Workflow\", width=1024, link=\"keystone_filter_start_workflow.jpg\"]\n+\n+== KeystoneAuthWebFilter Workflow\n+image::keystone_filter_workflow.jpg[\"KeystoneAuthWebFilter Workflow\", width=1024]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzY4NzQ1OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjozMDoxM1rOGfeZmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjozMDoxM1rOGfeZmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1NzExMw==", "bodyText": "Please remove the \"vpc\" stuff from the logger message.\nRecommend to use \"Create cache failed for client \" + name + \" \" + e.getMessage().\nPlease also update the message in other constructor as well. Thank you.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435657113", "createdAt": "2020-06-05T02:30:13Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteCache.java", "diffHunk": "@@ -57,6 +59,25 @@ public IgniteCache(IgniteClient igniteClient, String name) {\n         Assert.notNull(igniteClient, \"Create cache for vpc failed\");\n     }\n \n+    public IgniteCache(IgniteClient igniteClient, String name, ExpiryPolicy ep) {\n+        this.igniteClient = igniteClient;\n+\n+        try {\n+            ClientCacheConfiguration cfg = new ClientCacheConfiguration();\n+            cfg.setName(name);\n+            cfg.setExpiryPolicy(ep);\n+            cache = igniteClient.getOrCreateCache(cfg);\n+        } catch (ClientException e) {\n+            logger.log(Level.WARNING, \"Create cache for vpc failed:\" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzY4ODQ0OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjozMDo0OVrOGfeaKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjozMDo0OVrOGfeaKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1NzI1Nw==", "bodyText": "Same here. This is not related to \"vpc\"", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435657257", "createdAt": "2020-06-05T02:30:49Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteCache.java", "diffHunk": "@@ -57,6 +59,25 @@ public IgniteCache(IgniteClient igniteClient, String name) {\n         Assert.notNull(igniteClient, \"Create cache for vpc failed\");\n     }\n \n+    public IgniteCache(IgniteClient igniteClient, String name, ExpiryPolicy ep) {\n+        this.igniteClient = igniteClient;\n+\n+        try {\n+            ClientCacheConfiguration cfg = new ClientCacheConfiguration();\n+            cfg.setName(name);\n+            cfg.setExpiryPolicy(ep);\n+            cache = igniteClient.getOrCreateCache(cfg);\n+        } catch (ClientException e) {\n+            logger.log(Level.WARNING, \"Create cache for vpc failed:\" + e.getMessage());\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"Unexpected failure:\" + e.getMessage());\n+        }\n+\n+        transaction = new IgniteTransaction(igniteClient);\n+\n+        Assert.notNull(igniteClient, \"Create cache for vpc failed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzY5NTA1OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/redis/RedisExpireCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjozNToxN1rOGfeePA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjozNToxN1rOGfeePA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1ODMwMA==", "bodyText": "Let us add comment to the constructor, and give an example. Thank you.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435658300", "createdAt": "2020-06-05T02:35:17Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/redis/RedisExpireCache.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.common.db.redis;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.core.ValueOperations;\n+import sun.reflect.generics.reflectiveObjects.NotImplementedException;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+\n+public class RedisExpireCache<K, V> implements ICache<K, V> {\n+    private static final Logger logger = LoggerFactory.getLogger();\n+\n+    private RedisTemplate<K, V> redisTemplate;\n+    private ValueOperations<K, V> valueOperations;\n+    private long timeout;\n+    private TimeUnit timeUnit;\n+    private RedisTransaction transaction;\n+\n+    public RedisExpireCache(RedisTemplate<K, V> redisTemplate,  long timeout, TimeUnit timeUnit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzY5ODQ5OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/redis/RedisExpireCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjozNzo0NVrOGfegZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjozNzo0NVrOGfegZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1ODg1Mw==", "bodyText": "Like this class!", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435658853", "createdAt": "2020-06-05T02:37:45Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/redis/RedisExpireCache.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.common.db.redis;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.core.ValueOperations;\n+import sun.reflect.generics.reflectiveObjects.NotImplementedException;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+\n+public class RedisExpireCache<K, V> implements ICache<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzcxOTk0OnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/main/resources/application.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjo1MTo1OFrOGfetVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozOTozMFrOGhQrVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MjE2Nw==", "bodyText": "I was a little worries about putting an password here as the password is a keystone is critical infra component. Spring should have some mechanism to prevent writing an explicit password in a configuration file.\n@cj-chung Feel free to weigh in.\n@Gzure This is not blocking for now.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435662167", "createdAt": "2020-06-05T02:51:58Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/resources/application.properties", "diffHunk": "@@ -9,8 +9,32 @@ management.endpoints.web.exposure.include=health,prometheus\n spring.sleuth.sampler.probability=1.0\n spring.sleuth.web.skipPattern=(^health.*)\n \n+#Redis configuration\n+#spring.redis.host=localhost\n+#spring.redis.port=6380\n+#Ignite configuration\n+ignite.host=localhost\n+ignite.port=10801\n+ignite.key-store-path=keystore.jks\n+ignite.key-store-password=123456\n+ignite.trust-store-path=truststore.jks\n+ignite.trust-store-password=123456\n+\n #URL\n microservices.vpc.service.url=http://192.168.1.17:30001/\n microservices.subnet.service.url=http://192.168.1.17:30006/\n \n+#keystone\n+# if enable keystone auth filter\n+keystone.enable=false\n+\n+keystone.project_domain_name=Default\n+keystone.project_name=service\n+keystone.user_domain_name=Default\n+keystone.username=xxxxx\n+keystone.password=xxxxxx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyOTQyOA==", "bodyText": "@cj-chung @Gzure Tracked by Issue #242", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r437529428", "createdAt": "2020-06-09T15:39:30Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/resources/application.properties", "diffHunk": "@@ -9,8 +9,32 @@ management.endpoints.web.exposure.include=health,prometheus\n spring.sleuth.sampler.probability=1.0\n spring.sleuth.web.skipPattern=(^health.*)\n \n+#Redis configuration\n+#spring.redis.host=localhost\n+#spring.redis.port=6380\n+#Ignite configuration\n+ignite.host=localhost\n+ignite.port=10801\n+ignite.key-store-path=keystore.jks\n+ignite.key-store-password=123456\n+ignite.trust-store-path=truststore.jks\n+ignite.trust-store-password=123456\n+\n #URL\n microservices.vpc.service.url=http://192.168.1.17:30001/\n microservices.subnet.service.url=http://192.168.1.17:30006/\n \n+#keystone\n+# if enable keystone auth filter\n+keystone.enable=false\n+\n+keystone.project_domain_name=Default\n+keystone.project_name=service\n+keystone.user_domain_name=Default\n+keystone.username=xxxxx\n+keystone.password=xxxxxx", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MjE2Nw=="}, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzcyNjQyOnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjo1NjowOVrOGfexWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjo0MjoyOVrOGfiM3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MzE5Mw==", "bodyText": "Maybe rename the package name to com.futurewei.alcor.apigateway.client?", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435663193", "createdAt": "2020-06-05T02:56:09Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxOTM5MA==", "bodyText": "OK", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435719390", "createdAt": "2020-06-05T06:42:29Z", "author": {"login": "Gzure"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.utils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MzE5Mw=="}, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzc5NTcwOnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/test/java/com/futurewei/alcor/apigateway/KeystoneAuthWebFilterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMzo0Mjo0NlrOGffa3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDozNTo0M1rOGfgHAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3MzgyMg==", "bodyText": "Like it!", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435673822", "createdAt": "2020-06-05T03:42:46Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/test/java/com/futurewei/alcor/apigateway/KeystoneAuthWebFilterTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway;\n+\n+import com.futurewei.alcor.apigateway.filter.KeystoneAuthWebFilter;\n+import com.futurewei.alcor.apigateway.subnet.SubnetWebHandlers;\n+import com.futurewei.alcor.apigateway.utils.KeystoneClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.web.reactive.function.BodyInserters;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+import reactor.core.publisher.Mono;\n+\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n+        properties = {\"httpbin=http://localhost:${wiremock.server.port}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4NTEyMw==", "bodyText": "@Gzure As the code logics in KeyStoneAUthWebFilter and KeystoneClient are not simple, we would like to have UT coverage if possible? Ideally UTs should cover the happy path but the most important, the sad path with different unexpected input?", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435685123", "createdAt": "2020-06-05T04:35:43Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/test/java/com/futurewei/alcor/apigateway/KeystoneAuthWebFilterTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway;\n+\n+import com.futurewei.alcor.apigateway.filter.KeystoneAuthWebFilter;\n+import com.futurewei.alcor.apigateway.subnet.SubnetWebHandlers;\n+import com.futurewei.alcor.apigateway.utils.KeystoneClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.web.reactive.function.BodyInserters;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+import reactor.core.publisher.Mono;\n+\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n+        properties = {\"httpbin=http://localhost:${wiremock.server.port}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3MzgyMg=="}, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzc5ODk2OnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/test/java/com/futurewei/alcor/apigateway/KeystoneAuthWebFilterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMzo0NToxNVrOGffc1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjowODoxNVrOGfhgxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NDMyNw==", "bodyText": "Does this test case needs a running SubnetManager, just for my curiosity?", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435674327", "createdAt": "2020-06-05T03:45:15Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/test/java/com/futurewei/alcor/apigateway/KeystoneAuthWebFilterTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway;\n+\n+import com.futurewei.alcor.apigateway.filter.KeystoneAuthWebFilter;\n+import com.futurewei.alcor.apigateway.subnet.SubnetWebHandlers;\n+import com.futurewei.alcor.apigateway.utils.KeystoneClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.web.reactive.function.BodyInserters;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+import reactor.core.publisher.Mono;\n+\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n+        properties = {\"httpbin=http://localhost:${wiremock.server.port}\",\n+                \"keystone.enable=true\", \"neutron.url_prefix=/v2.0\"})\n+@AutoConfigureWireMock(port = 0)\n+public class KeystoneAuthWebFilterTest {\n+\n+    private static final String TEST_TOKEN = \"gaaaaaBex0xWssdfsadfDSSDFSDF\";\n+    private static final String TEST_PROJECT_ID = \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\";\n+\n+\n+    @Autowired\n+    private WebTestClient webClient;\n+\n+    @Autowired\n+    private KeystoneAuthWebFilter keystoneAuthWebFilter;\n+\n+    @MockBean\n+    private KeystoneClient keystoneClient;\n+\n+    @MockBean\n+    private SubnetWebHandlers subnetWebHandlers;\n+\n+    @Before\n+    public void setUp(){\n+        ReflectionTestUtils.setField(keystoneAuthWebFilter, \"keystoneClient\", keystoneClient);\n+    }\n+\n+    @Test\n+    public void TestFilter(){\n+        when(keystoneClient.verifyToken(TEST_TOKEN)).thenReturn(TEST_PROJECT_ID);\n+\n+        Mono<ServerResponse> response =ServerResponse.ok().body(BodyInserters.fromObject(\"[{\\\"network_id\\\":\\\"bbaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\\\"}]\"));\n+        when(subnetWebHandlers.getSubnets(ArgumentMatchers.any(ServerRequest.class))).thenReturn(response);\n+\n+        webClient\n+                .get().uri(\"/v2.0/subnets\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwODEwMw==", "bodyText": "It uses a mock SubnetHandler.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435708103", "createdAt": "2020-06-05T06:08:15Z", "author": {"login": "Gzure"}, "path": "services/api_gateway/src/test/java/com/futurewei/alcor/apigateway/KeystoneAuthWebFilterTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway;\n+\n+import com.futurewei.alcor.apigateway.filter.KeystoneAuthWebFilter;\n+import com.futurewei.alcor.apigateway.subnet.SubnetWebHandlers;\n+import com.futurewei.alcor.apigateway.utils.KeystoneClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.web.reactive.function.BodyInserters;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+import reactor.core.publisher.Mono;\n+\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n+        properties = {\"httpbin=http://localhost:${wiremock.server.port}\",\n+                \"keystone.enable=true\", \"neutron.url_prefix=/v2.0\"})\n+@AutoConfigureWireMock(port = 0)\n+public class KeystoneAuthWebFilterTest {\n+\n+    private static final String TEST_TOKEN = \"gaaaaaBex0xWssdfsadfDSSDFSDF\";\n+    private static final String TEST_PROJECT_ID = \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\";\n+\n+\n+    @Autowired\n+    private WebTestClient webClient;\n+\n+    @Autowired\n+    private KeystoneAuthWebFilter keystoneAuthWebFilter;\n+\n+    @MockBean\n+    private KeystoneClient keystoneClient;\n+\n+    @MockBean\n+    private SubnetWebHandlers subnetWebHandlers;\n+\n+    @Before\n+    public void setUp(){\n+        ReflectionTestUtils.setField(keystoneAuthWebFilter, \"keystoneClient\", keystoneClient);\n+    }\n+\n+    @Test\n+    public void TestFilter(){\n+        when(keystoneClient.verifyToken(TEST_TOKEN)).thenReturn(TEST_PROJECT_ID);\n+\n+        Mono<ServerResponse> response =ServerResponse.ok().body(BodyInserters.fromObject(\"[{\\\"network_id\\\":\\\"bbaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\\\"}]\"));\n+        when(subnetWebHandlers.getSubnets(ArgumentMatchers.any(ServerRequest.class))).thenReturn(response);\n+\n+        webClient\n+                .get().uri(\"/v2.0/subnets\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NDMyNw=="}, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzgxMjk1OnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMzo1NTowMVrOGfflHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMzo1NTowMVrOGfflHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NjQ0Nw==", "bodyText": "Could we make checkEndpoints and getLocalToken private?", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435676447", "createdAt": "2020-06-05T03:55:01Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.utils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.entity.TokenEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.*;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class KeystoneClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KeystoneClient.class);\n+\n+    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+\n+    private static final String TOKEN_URL = \"/auth/tokens\";\n+    private static final String VALIDATE_TOKEN_HEADER = \"X-Subject-Token\";\n+    private static final String AUTH_TOKEN_HEADER = \"X-Auth-Token\";\n+    private static final String JSON_PROJECT_KEY = \"project\";\n+    private static final String JSON_DOMAIN_KEY = \"domain\";\n+    private static final String JSON_LINKS_KEY = \"links\";\n+    private static final long CACHE_EXPIRE_HOUR = 2;\n+\n+    private String baseUrl = \"\";\n+    private volatile String localToken = \"\";\n+    private volatile Date localTokenExpireDate;\n+\n+    @Value(\"${keystone.project_domain_name}\")\n+    private String projectDomainName;\n+\n+    @Value(\"${keystone.project_name}\")\n+    private String projectName;\n+\n+    @Value(\"${keystone.user_domain_name}\")\n+    private String userDomainName;\n+\n+    @Value(\"${keystone.username}\")\n+    private String username;\n+\n+    @Value(\"${keystone.password}\")\n+    private String password;\n+\n+    @Value(\"${keystone.auth_type}\")\n+    private String authType;\n+\n+    @Value(\"${keystone.auth_url}\")\n+    private String authUrl;\n+\n+    private RestTemplate restTemplate;\n+    private ICache<String, TokenEntity> cache;\n+\n+    public KeystoneClient(CacheFactory cacheFactory){\n+        this.restTemplate = new RestTemplate();\n+        this.cache = cacheFactory.getExpireCache(TokenEntity.class, CACHE_EXPIRE_HOUR, TimeUnit.HOURS);\n+    }\n+\n+    @PostConstruct\n+    public void setUp() throws IOException{\n+        checkEndPoints();\n+        getLocalToken();\n+    }\n+\n+    public void checkEndPoints() throws IOException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzgyNDI1OnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDowMzozOVrOGffsLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDoxMzozOFrOGff0xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3ODI1NQ==", "bodyText": "Can we give a brief comment here about the algorithm to pick the best endpoint?", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435678255", "createdAt": "2020-06-05T04:03:39Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.utils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.entity.TokenEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.*;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class KeystoneClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KeystoneClient.class);\n+\n+    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+\n+    private static final String TOKEN_URL = \"/auth/tokens\";\n+    private static final String VALIDATE_TOKEN_HEADER = \"X-Subject-Token\";\n+    private static final String AUTH_TOKEN_HEADER = \"X-Auth-Token\";\n+    private static final String JSON_PROJECT_KEY = \"project\";\n+    private static final String JSON_DOMAIN_KEY = \"domain\";\n+    private static final String JSON_LINKS_KEY = \"links\";\n+    private static final long CACHE_EXPIRE_HOUR = 2;\n+\n+    private String baseUrl = \"\";\n+    private volatile String localToken = \"\";\n+    private volatile Date localTokenExpireDate;\n+\n+    @Value(\"${keystone.project_domain_name}\")\n+    private String projectDomainName;\n+\n+    @Value(\"${keystone.project_name}\")\n+    private String projectName;\n+\n+    @Value(\"${keystone.user_domain_name}\")\n+    private String userDomainName;\n+\n+    @Value(\"${keystone.username}\")\n+    private String username;\n+\n+    @Value(\"${keystone.password}\")\n+    private String password;\n+\n+    @Value(\"${keystone.auth_type}\")\n+    private String authType;\n+\n+    @Value(\"${keystone.auth_url}\")\n+    private String authUrl;\n+\n+    private RestTemplate restTemplate;\n+    private ICache<String, TokenEntity> cache;\n+\n+    public KeystoneClient(CacheFactory cacheFactory){\n+        this.restTemplate = new RestTemplate();\n+        this.cache = cacheFactory.getExpireCache(TokenEntity.class, CACHE_EXPIRE_HOUR, TimeUnit.HOURS);\n+    }\n+\n+    @PostConstruct\n+    public void setUp() throws IOException{\n+        checkEndPoints();\n+        getLocalToken();\n+    }\n+\n+    public void checkEndPoints() throws IOException{\n+        if(!\"\".equals(baseUrl)){\n+            return;\n+        }else if (authUrl.contains(\"v3\") || authUrl.contains(\"v2\")){\n+            baseUrl = authUrl;\n+            return;\n+        }\n+\n+        String response = restTemplate.getForObject(authUrl, String.class);\n+\n+        JsonNode versions = json2Map(response);\n+\n+        //in v3 apis resp have versions key\n+        if(versions.has(\"versions\")){\n+            JsonNode endpoints = versions.path(\"versions\");\n+            //maybe there are no values key\n+            if(endpoints.has(\"values\")){\n+                endpoints = endpoints.path(\"values\");\n+            }\n+            Iterator<JsonNode> endpointsIt = endpoints.elements();\n+            findBestEndPoint(endpointsIt);\n+\n+            if(\"\".equals(baseUrl)){\n+                findEndPoint(endpointsIt);\n+            }\n+        }\n+    }\n+\n+    public void getLocalToken() throws IOException{\n+        //if have token and not expire use it\n+        if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+            return;\n+        }\n+\n+        checkEndPoints();\n+\n+        synchronized(this) {\n+            if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+                return;\n+            }\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            HttpEntity<String> entity = new HttpEntity<>(buildLocalTokenParams(), headers);\n+            HttpEntity<String> response = restTemplate.postForEntity(baseUrl + TOKEN_URL + \"?nocatalog\", entity, String.class);\n+\n+            localToken = response.getHeaders().getFirst(VALIDATE_TOKEN_HEADER);\n+            JsonNode result = json2Map(response.getBody());\n+            JsonNode token = result.path(\"token\");\n+            String expireDateStr = token.path(\"expires_at\").asText();\n+            if (!\"null\".equals(expireDateStr)) {\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                try {\n+                    localTokenExpireDate = dateFormat.parse(expireDateStr);\n+                } catch (ParseException e) {\n+                    LOG.error(\"Get Alcor Token failed, {}\", e.getMessage());\n+                    localToken = \"\";\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    public String verifyToken(String token){\n+        try {\n+\n+            TokenEntity tokenEntity = cache.get(token);\n+            if(tokenEntity != null){\n+                return tokenEntity.isExpired() ? \"\" : tokenEntity.getProjectId();\n+            }\n+\n+            checkEndPoints();\n+            getLocalToken();\n+\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            headers.set(VALIDATE_TOKEN_HEADER, token);\n+            headers.set(AUTH_TOKEN_HEADER, localToken);\n+\n+            HttpEntity<String> entity = new HttpEntity<>(null, headers);\n+            ResponseEntity<String> response = restTemplate.exchange(baseUrl + TOKEN_URL + \"?nocatalog\",\n+                    HttpMethod.GET, entity, String.class);\n+\n+            // check headers\n+            if(response.getStatusCode().equals(HttpStatus.OK)){\n+\n+\n+                String resultStr = response.getBody();\n+                JsonNode result = json2Map(resultStr);\n+                JsonNode tokenNode = result.path(\"token\");\n+\n+                TokenEntity te = new TokenEntity(token,false);\n+                JsonNode user = tokenNode.path(\"user\");\n+                te.setUser(user.path(\"name\").asText(\"\"));\n+                te.setUserId(user.path(\"id\").asText(\"\"));\n+\n+                String expireDateStr = tokenNode.path(\"expires_at\").asText();\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                Date expireDate = dateFormat.parse(expireDateStr);\n+                te.setExpireAt(expireDate);\n+\n+                if(tokenNode.has(\"roles\")){\n+                    JsonNode roles = tokenNode.path(\"roles\");\n+                    Iterator<JsonNode> rolesIt = roles.elements();\n+                    List<String> roleNames = new ArrayList<>();\n+                    rolesIt.forEachRemaining(role -> roleNames.add(role.path(\"name\").asText(\"\")));\n+                    te.setRoles(roleNames);\n+                }\n+\n+                if(tokenNode.has(JSON_PROJECT_KEY)){\n+                    JsonNode project = tokenNode.path(JSON_PROJECT_KEY);\n+                    String projectId = project.path(\"id\").asText();\n+\n+                    if(project.has(JSON_DOMAIN_KEY)){\n+                        JsonNode domain = project.path(JSON_DOMAIN_KEY);\n+                        te.setDomainId(domain.path(\"id\").asText(\"\"));\n+                        te.setDomainName(domain.path(\"name\").asText(\"\"));\n+                    }\n+\n+                    projectId = transformProjectIdToUUID(projectId);\n+                    te.setProjectId(projectId);\n+                    te.setProjectName(project.path(\"name\").asText(\"\"));\n+                    cache.put(token, te);\n+                    return projectId;\n+                }\n+            }else{\n+                cache.put(token, new TokenEntity(token,true));\n+            }\n+        } catch (IOException | CacheException | ParseException e) {\n+            LOG.error(\"verify token failed, {}\", e.getMessage());\n+        }\n+        return \"\";\n+    }\n+\n+    private String transformProjectIdToUUID(String projectId){\n+        return projectId.substring(0, 8) + \"-\" + projectId.substring(8, 12) +\n+                \"-\" + projectId.substring(12, 16) + \"-\" +\n+                projectId.substring(16, 20) + \"-\" +\n+                projectId.substring(20);\n+    }\n+\n+    private String buildLocalTokenParams() throws JsonProcessingException {\n+        //build params\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode auth = mapper.createObjectNode();\n+\n+        ObjectNode identity = mapper.createObjectNode();\n+        ArrayNode methods = mapper.createArrayNode();\n+        methods.add(authType);\n+        identity.set(\"methods\", methods);\n+\n+        ObjectNode passwordNode = mapper.createObjectNode();\n+        ObjectNode user = mapper.createObjectNode();\n+        user.put(\"name\", username);\n+        user.put(\"password\", password);\n+\n+        ObjectNode domain = mapper.createObjectNode();\n+        domain.put(\"name\", userDomainName);\n+        user.set(JSON_DOMAIN_KEY, domain);\n+\n+        passwordNode.set(\"user\", user);\n+        identity.set(\"password\", passwordNode);\n+\n+        auth.set(\"identity\", identity);\n+\n+        ObjectNode scope = mapper.createObjectNode();\n+        ObjectNode project = mapper.createObjectNode();\n+        project.put(\"name\", projectName);\n+        project.set(JSON_DOMAIN_KEY, domain);\n+        scope.set(JSON_PROJECT_KEY, project);\n+\n+        auth.set(\"scope\", scope);\n+        ObjectNode root = mapper.createObjectNode();\n+        root.set(\"auth\", auth);\n+        return mapper.writeValueAsString(root);\n+    }\n+\n+    private void findBestEndPoint(Iterator<JsonNode> endpoints){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4MDQ1Mg==", "bodyText": "For the method name, recommend to use \"AssignBaseUrlWithBestEndpoint\"", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435680452", "createdAt": "2020-06-05T04:13:38Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.utils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.entity.TokenEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.*;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class KeystoneClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KeystoneClient.class);\n+\n+    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+\n+    private static final String TOKEN_URL = \"/auth/tokens\";\n+    private static final String VALIDATE_TOKEN_HEADER = \"X-Subject-Token\";\n+    private static final String AUTH_TOKEN_HEADER = \"X-Auth-Token\";\n+    private static final String JSON_PROJECT_KEY = \"project\";\n+    private static final String JSON_DOMAIN_KEY = \"domain\";\n+    private static final String JSON_LINKS_KEY = \"links\";\n+    private static final long CACHE_EXPIRE_HOUR = 2;\n+\n+    private String baseUrl = \"\";\n+    private volatile String localToken = \"\";\n+    private volatile Date localTokenExpireDate;\n+\n+    @Value(\"${keystone.project_domain_name}\")\n+    private String projectDomainName;\n+\n+    @Value(\"${keystone.project_name}\")\n+    private String projectName;\n+\n+    @Value(\"${keystone.user_domain_name}\")\n+    private String userDomainName;\n+\n+    @Value(\"${keystone.username}\")\n+    private String username;\n+\n+    @Value(\"${keystone.password}\")\n+    private String password;\n+\n+    @Value(\"${keystone.auth_type}\")\n+    private String authType;\n+\n+    @Value(\"${keystone.auth_url}\")\n+    private String authUrl;\n+\n+    private RestTemplate restTemplate;\n+    private ICache<String, TokenEntity> cache;\n+\n+    public KeystoneClient(CacheFactory cacheFactory){\n+        this.restTemplate = new RestTemplate();\n+        this.cache = cacheFactory.getExpireCache(TokenEntity.class, CACHE_EXPIRE_HOUR, TimeUnit.HOURS);\n+    }\n+\n+    @PostConstruct\n+    public void setUp() throws IOException{\n+        checkEndPoints();\n+        getLocalToken();\n+    }\n+\n+    public void checkEndPoints() throws IOException{\n+        if(!\"\".equals(baseUrl)){\n+            return;\n+        }else if (authUrl.contains(\"v3\") || authUrl.contains(\"v2\")){\n+            baseUrl = authUrl;\n+            return;\n+        }\n+\n+        String response = restTemplate.getForObject(authUrl, String.class);\n+\n+        JsonNode versions = json2Map(response);\n+\n+        //in v3 apis resp have versions key\n+        if(versions.has(\"versions\")){\n+            JsonNode endpoints = versions.path(\"versions\");\n+            //maybe there are no values key\n+            if(endpoints.has(\"values\")){\n+                endpoints = endpoints.path(\"values\");\n+            }\n+            Iterator<JsonNode> endpointsIt = endpoints.elements();\n+            findBestEndPoint(endpointsIt);\n+\n+            if(\"\".equals(baseUrl)){\n+                findEndPoint(endpointsIt);\n+            }\n+        }\n+    }\n+\n+    public void getLocalToken() throws IOException{\n+        //if have token and not expire use it\n+        if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+            return;\n+        }\n+\n+        checkEndPoints();\n+\n+        synchronized(this) {\n+            if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+                return;\n+            }\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            HttpEntity<String> entity = new HttpEntity<>(buildLocalTokenParams(), headers);\n+            HttpEntity<String> response = restTemplate.postForEntity(baseUrl + TOKEN_URL + \"?nocatalog\", entity, String.class);\n+\n+            localToken = response.getHeaders().getFirst(VALIDATE_TOKEN_HEADER);\n+            JsonNode result = json2Map(response.getBody());\n+            JsonNode token = result.path(\"token\");\n+            String expireDateStr = token.path(\"expires_at\").asText();\n+            if (!\"null\".equals(expireDateStr)) {\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                try {\n+                    localTokenExpireDate = dateFormat.parse(expireDateStr);\n+                } catch (ParseException e) {\n+                    LOG.error(\"Get Alcor Token failed, {}\", e.getMessage());\n+                    localToken = \"\";\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    public String verifyToken(String token){\n+        try {\n+\n+            TokenEntity tokenEntity = cache.get(token);\n+            if(tokenEntity != null){\n+                return tokenEntity.isExpired() ? \"\" : tokenEntity.getProjectId();\n+            }\n+\n+            checkEndPoints();\n+            getLocalToken();\n+\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            headers.set(VALIDATE_TOKEN_HEADER, token);\n+            headers.set(AUTH_TOKEN_HEADER, localToken);\n+\n+            HttpEntity<String> entity = new HttpEntity<>(null, headers);\n+            ResponseEntity<String> response = restTemplate.exchange(baseUrl + TOKEN_URL + \"?nocatalog\",\n+                    HttpMethod.GET, entity, String.class);\n+\n+            // check headers\n+            if(response.getStatusCode().equals(HttpStatus.OK)){\n+\n+\n+                String resultStr = response.getBody();\n+                JsonNode result = json2Map(resultStr);\n+                JsonNode tokenNode = result.path(\"token\");\n+\n+                TokenEntity te = new TokenEntity(token,false);\n+                JsonNode user = tokenNode.path(\"user\");\n+                te.setUser(user.path(\"name\").asText(\"\"));\n+                te.setUserId(user.path(\"id\").asText(\"\"));\n+\n+                String expireDateStr = tokenNode.path(\"expires_at\").asText();\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                Date expireDate = dateFormat.parse(expireDateStr);\n+                te.setExpireAt(expireDate);\n+\n+                if(tokenNode.has(\"roles\")){\n+                    JsonNode roles = tokenNode.path(\"roles\");\n+                    Iterator<JsonNode> rolesIt = roles.elements();\n+                    List<String> roleNames = new ArrayList<>();\n+                    rolesIt.forEachRemaining(role -> roleNames.add(role.path(\"name\").asText(\"\")));\n+                    te.setRoles(roleNames);\n+                }\n+\n+                if(tokenNode.has(JSON_PROJECT_KEY)){\n+                    JsonNode project = tokenNode.path(JSON_PROJECT_KEY);\n+                    String projectId = project.path(\"id\").asText();\n+\n+                    if(project.has(JSON_DOMAIN_KEY)){\n+                        JsonNode domain = project.path(JSON_DOMAIN_KEY);\n+                        te.setDomainId(domain.path(\"id\").asText(\"\"));\n+                        te.setDomainName(domain.path(\"name\").asText(\"\"));\n+                    }\n+\n+                    projectId = transformProjectIdToUUID(projectId);\n+                    te.setProjectId(projectId);\n+                    te.setProjectName(project.path(\"name\").asText(\"\"));\n+                    cache.put(token, te);\n+                    return projectId;\n+                }\n+            }else{\n+                cache.put(token, new TokenEntity(token,true));\n+            }\n+        } catch (IOException | CacheException | ParseException e) {\n+            LOG.error(\"verify token failed, {}\", e.getMessage());\n+        }\n+        return \"\";\n+    }\n+\n+    private String transformProjectIdToUUID(String projectId){\n+        return projectId.substring(0, 8) + \"-\" + projectId.substring(8, 12) +\n+                \"-\" + projectId.substring(12, 16) + \"-\" +\n+                projectId.substring(16, 20) + \"-\" +\n+                projectId.substring(20);\n+    }\n+\n+    private String buildLocalTokenParams() throws JsonProcessingException {\n+        //build params\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode auth = mapper.createObjectNode();\n+\n+        ObjectNode identity = mapper.createObjectNode();\n+        ArrayNode methods = mapper.createArrayNode();\n+        methods.add(authType);\n+        identity.set(\"methods\", methods);\n+\n+        ObjectNode passwordNode = mapper.createObjectNode();\n+        ObjectNode user = mapper.createObjectNode();\n+        user.put(\"name\", username);\n+        user.put(\"password\", password);\n+\n+        ObjectNode domain = mapper.createObjectNode();\n+        domain.put(\"name\", userDomainName);\n+        user.set(JSON_DOMAIN_KEY, domain);\n+\n+        passwordNode.set(\"user\", user);\n+        identity.set(\"password\", passwordNode);\n+\n+        auth.set(\"identity\", identity);\n+\n+        ObjectNode scope = mapper.createObjectNode();\n+        ObjectNode project = mapper.createObjectNode();\n+        project.put(\"name\", projectName);\n+        project.set(JSON_DOMAIN_KEY, domain);\n+        scope.set(JSON_PROJECT_KEY, project);\n+\n+        auth.set(\"scope\", scope);\n+        ObjectNode root = mapper.createObjectNode();\n+        root.set(\"auth\", auth);\n+        return mapper.writeValueAsString(root);\n+    }\n+\n+    private void findBestEndPoint(Iterator<JsonNode> endpoints){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3ODI1NQ=="}, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzgzMzg2OnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDoxMDoxNlrOGffx4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDoxMDoxNlrOGffx4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3OTcxNA==", "bodyText": "Please store it in a constant.", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435679714", "createdAt": "2020-06-05T04:10:16Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.utils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.entity.TokenEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.*;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class KeystoneClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KeystoneClient.class);\n+\n+    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+\n+    private static final String TOKEN_URL = \"/auth/tokens\";\n+    private static final String VALIDATE_TOKEN_HEADER = \"X-Subject-Token\";\n+    private static final String AUTH_TOKEN_HEADER = \"X-Auth-Token\";\n+    private static final String JSON_PROJECT_KEY = \"project\";\n+    private static final String JSON_DOMAIN_KEY = \"domain\";\n+    private static final String JSON_LINKS_KEY = \"links\";\n+    private static final long CACHE_EXPIRE_HOUR = 2;\n+\n+    private String baseUrl = \"\";\n+    private volatile String localToken = \"\";\n+    private volatile Date localTokenExpireDate;\n+\n+    @Value(\"${keystone.project_domain_name}\")\n+    private String projectDomainName;\n+\n+    @Value(\"${keystone.project_name}\")\n+    private String projectName;\n+\n+    @Value(\"${keystone.user_domain_name}\")\n+    private String userDomainName;\n+\n+    @Value(\"${keystone.username}\")\n+    private String username;\n+\n+    @Value(\"${keystone.password}\")\n+    private String password;\n+\n+    @Value(\"${keystone.auth_type}\")\n+    private String authType;\n+\n+    @Value(\"${keystone.auth_url}\")\n+    private String authUrl;\n+\n+    private RestTemplate restTemplate;\n+    private ICache<String, TokenEntity> cache;\n+\n+    public KeystoneClient(CacheFactory cacheFactory){\n+        this.restTemplate = new RestTemplate();\n+        this.cache = cacheFactory.getExpireCache(TokenEntity.class, CACHE_EXPIRE_HOUR, TimeUnit.HOURS);\n+    }\n+\n+    @PostConstruct\n+    public void setUp() throws IOException{\n+        checkEndPoints();\n+        getLocalToken();\n+    }\n+\n+    public void checkEndPoints() throws IOException{\n+        if(!\"\".equals(baseUrl)){\n+            return;\n+        }else if (authUrl.contains(\"v3\") || authUrl.contains(\"v2\")){\n+            baseUrl = authUrl;\n+            return;\n+        }\n+\n+        String response = restTemplate.getForObject(authUrl, String.class);\n+\n+        JsonNode versions = json2Map(response);\n+\n+        //in v3 apis resp have versions key\n+        if(versions.has(\"versions\")){\n+            JsonNode endpoints = versions.path(\"versions\");\n+            //maybe there are no values key\n+            if(endpoints.has(\"values\")){\n+                endpoints = endpoints.path(\"values\");\n+            }\n+            Iterator<JsonNode> endpointsIt = endpoints.elements();\n+            findBestEndPoint(endpointsIt);\n+\n+            if(\"\".equals(baseUrl)){\n+                findEndPoint(endpointsIt);\n+            }\n+        }\n+    }\n+\n+    public void getLocalToken() throws IOException{\n+        //if have token and not expire use it\n+        if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+            return;\n+        }\n+\n+        checkEndPoints();\n+\n+        synchronized(this) {\n+            if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+                return;\n+            }\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            HttpEntity<String> entity = new HttpEntity<>(buildLocalTokenParams(), headers);\n+            HttpEntity<String> response = restTemplate.postForEntity(baseUrl + TOKEN_URL + \"?nocatalog\", entity, String.class);\n+\n+            localToken = response.getHeaders().getFirst(VALIDATE_TOKEN_HEADER);\n+            JsonNode result = json2Map(response.getBody());\n+            JsonNode token = result.path(\"token\");\n+            String expireDateStr = token.path(\"expires_at\").asText();\n+            if (!\"null\".equals(expireDateStr)) {\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                try {\n+                    localTokenExpireDate = dateFormat.parse(expireDateStr);\n+                } catch (ParseException e) {\n+                    LOG.error(\"Get Alcor Token failed, {}\", e.getMessage());\n+                    localToken = \"\";\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    public String verifyToken(String token){\n+        try {\n+\n+            TokenEntity tokenEntity = cache.get(token);\n+            if(tokenEntity != null){\n+                return tokenEntity.isExpired() ? \"\" : tokenEntity.getProjectId();\n+            }\n+\n+            checkEndPoints();\n+            getLocalToken();\n+\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            headers.set(VALIDATE_TOKEN_HEADER, token);\n+            headers.set(AUTH_TOKEN_HEADER, localToken);\n+\n+            HttpEntity<String> entity = new HttpEntity<>(null, headers);\n+            ResponseEntity<String> response = restTemplate.exchange(baseUrl + TOKEN_URL + \"?nocatalog\",\n+                    HttpMethod.GET, entity, String.class);\n+\n+            // check headers\n+            if(response.getStatusCode().equals(HttpStatus.OK)){\n+\n+\n+                String resultStr = response.getBody();\n+                JsonNode result = json2Map(resultStr);\n+                JsonNode tokenNode = result.path(\"token\");\n+\n+                TokenEntity te = new TokenEntity(token,false);\n+                JsonNode user = tokenNode.path(\"user\");\n+                te.setUser(user.path(\"name\").asText(\"\"));\n+                te.setUserId(user.path(\"id\").asText(\"\"));\n+\n+                String expireDateStr = tokenNode.path(\"expires_at\").asText();\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                Date expireDate = dateFormat.parse(expireDateStr);\n+                te.setExpireAt(expireDate);\n+\n+                if(tokenNode.has(\"roles\")){\n+                    JsonNode roles = tokenNode.path(\"roles\");\n+                    Iterator<JsonNode> rolesIt = roles.elements();\n+                    List<String> roleNames = new ArrayList<>();\n+                    rolesIt.forEachRemaining(role -> roleNames.add(role.path(\"name\").asText(\"\")));\n+                    te.setRoles(roleNames);\n+                }\n+\n+                if(tokenNode.has(JSON_PROJECT_KEY)){\n+                    JsonNode project = tokenNode.path(JSON_PROJECT_KEY);\n+                    String projectId = project.path(\"id\").asText();\n+\n+                    if(project.has(JSON_DOMAIN_KEY)){\n+                        JsonNode domain = project.path(JSON_DOMAIN_KEY);\n+                        te.setDomainId(domain.path(\"id\").asText(\"\"));\n+                        te.setDomainName(domain.path(\"name\").asText(\"\"));\n+                    }\n+\n+                    projectId = transformProjectIdToUUID(projectId);\n+                    te.setProjectId(projectId);\n+                    te.setProjectName(project.path(\"name\").asText(\"\"));\n+                    cache.put(token, te);\n+                    return projectId;\n+                }\n+            }else{\n+                cache.put(token, new TokenEntity(token,true));\n+            }\n+        } catch (IOException | CacheException | ParseException e) {\n+            LOG.error(\"verify token failed, {}\", e.getMessage());\n+        }\n+        return \"\";\n+    }\n+\n+    private String transformProjectIdToUUID(String projectId){\n+        return projectId.substring(0, 8) + \"-\" + projectId.substring(8, 12) +\n+                \"-\" + projectId.substring(12, 16) + \"-\" +\n+                projectId.substring(16, 20) + \"-\" +\n+                projectId.substring(20);\n+    }\n+\n+    private String buildLocalTokenParams() throws JsonProcessingException {\n+        //build params\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode auth = mapper.createObjectNode();\n+\n+        ObjectNode identity = mapper.createObjectNode();\n+        ArrayNode methods = mapper.createArrayNode();\n+        methods.add(authType);\n+        identity.set(\"methods\", methods);\n+\n+        ObjectNode passwordNode = mapper.createObjectNode();\n+        ObjectNode user = mapper.createObjectNode();\n+        user.put(\"name\", username);\n+        user.put(\"password\", password);\n+\n+        ObjectNode domain = mapper.createObjectNode();\n+        domain.put(\"name\", userDomainName);\n+        user.set(JSON_DOMAIN_KEY, domain);\n+\n+        passwordNode.set(\"user\", user);\n+        identity.set(\"password\", passwordNode);\n+\n+        auth.set(\"identity\", identity);\n+\n+        ObjectNode scope = mapper.createObjectNode();\n+        ObjectNode project = mapper.createObjectNode();\n+        project.put(\"name\", projectName);\n+        project.set(JSON_DOMAIN_KEY, domain);\n+        scope.set(JSON_PROJECT_KEY, project);\n+\n+        auth.set(\"scope\", scope);\n+        ObjectNode root = mapper.createObjectNode();\n+        root.set(\"auth\", auth);\n+        return mapper.writeValueAsString(root);\n+    }\n+\n+    private void findBestEndPoint(Iterator<JsonNode> endpoints){\n+        SortedMap<String, Iterator<JsonNode>> sortedMap = new TreeMap<>();\n+        while(endpoints.hasNext()){\n+            JsonNode endpoint = endpoints.next();\n+\n+            //check id\n+            if(!endpoint.has(\"id\") || !endpoint.has(\"status\") || !endpoint.has(JSON_LINKS_KEY)){\n+                continue;\n+            }\n+\n+            JsonNode id = endpoint.path(\"id\");\n+            JsonNode status = endpoint.path(\"status\");\n+            String statusStr = status.asText(\"unknown\");\n+            if(\"stable, current, supported\".contains(statusStr)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 286}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzg1Nzk0OnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDoyODoxOVrOGfgA8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDoyODoxOVrOGfgA8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4MzU3MA==", "bodyText": "Can we give an OpenStack KeyStone link about different roles to improve the readability?", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435683570", "createdAt": "2020-06-05T04:28:19Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.utils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.entity.TokenEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.*;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class KeystoneClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KeystoneClient.class);\n+\n+    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+\n+    private static final String TOKEN_URL = \"/auth/tokens\";\n+    private static final String VALIDATE_TOKEN_HEADER = \"X-Subject-Token\";\n+    private static final String AUTH_TOKEN_HEADER = \"X-Auth-Token\";\n+    private static final String JSON_PROJECT_KEY = \"project\";\n+    private static final String JSON_DOMAIN_KEY = \"domain\";\n+    private static final String JSON_LINKS_KEY = \"links\";\n+    private static final long CACHE_EXPIRE_HOUR = 2;\n+\n+    private String baseUrl = \"\";\n+    private volatile String localToken = \"\";\n+    private volatile Date localTokenExpireDate;\n+\n+    @Value(\"${keystone.project_domain_name}\")\n+    private String projectDomainName;\n+\n+    @Value(\"${keystone.project_name}\")\n+    private String projectName;\n+\n+    @Value(\"${keystone.user_domain_name}\")\n+    private String userDomainName;\n+\n+    @Value(\"${keystone.username}\")\n+    private String username;\n+\n+    @Value(\"${keystone.password}\")\n+    private String password;\n+\n+    @Value(\"${keystone.auth_type}\")\n+    private String authType;\n+\n+    @Value(\"${keystone.auth_url}\")\n+    private String authUrl;\n+\n+    private RestTemplate restTemplate;\n+    private ICache<String, TokenEntity> cache;\n+\n+    public KeystoneClient(CacheFactory cacheFactory){\n+        this.restTemplate = new RestTemplate();\n+        this.cache = cacheFactory.getExpireCache(TokenEntity.class, CACHE_EXPIRE_HOUR, TimeUnit.HOURS);\n+    }\n+\n+    @PostConstruct\n+    public void setUp() throws IOException{\n+        checkEndPoints();\n+        getLocalToken();\n+    }\n+\n+    public void checkEndPoints() throws IOException{\n+        if(!\"\".equals(baseUrl)){\n+            return;\n+        }else if (authUrl.contains(\"v3\") || authUrl.contains(\"v2\")){\n+            baseUrl = authUrl;\n+            return;\n+        }\n+\n+        String response = restTemplate.getForObject(authUrl, String.class);\n+\n+        JsonNode versions = json2Map(response);\n+\n+        //in v3 apis resp have versions key\n+        if(versions.has(\"versions\")){\n+            JsonNode endpoints = versions.path(\"versions\");\n+            //maybe there are no values key\n+            if(endpoints.has(\"values\")){\n+                endpoints = endpoints.path(\"values\");\n+            }\n+            Iterator<JsonNode> endpointsIt = endpoints.elements();\n+            findBestEndPoint(endpointsIt);\n+\n+            if(\"\".equals(baseUrl)){\n+                findEndPoint(endpointsIt);\n+            }\n+        }\n+    }\n+\n+    public void getLocalToken() throws IOException{\n+        //if have token and not expire use it\n+        if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+            return;\n+        }\n+\n+        checkEndPoints();\n+\n+        synchronized(this) {\n+            if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+                return;\n+            }\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            HttpEntity<String> entity = new HttpEntity<>(buildLocalTokenParams(), headers);\n+            HttpEntity<String> response = restTemplate.postForEntity(baseUrl + TOKEN_URL + \"?nocatalog\", entity, String.class);\n+\n+            localToken = response.getHeaders().getFirst(VALIDATE_TOKEN_HEADER);\n+            JsonNode result = json2Map(response.getBody());\n+            JsonNode token = result.path(\"token\");\n+            String expireDateStr = token.path(\"expires_at\").asText();\n+            if (!\"null\".equals(expireDateStr)) {\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                try {\n+                    localTokenExpireDate = dateFormat.parse(expireDateStr);\n+                } catch (ParseException e) {\n+                    LOG.error(\"Get Alcor Token failed, {}\", e.getMessage());\n+                    localToken = \"\";\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    public String verifyToken(String token){\n+        try {\n+\n+            TokenEntity tokenEntity = cache.get(token);\n+            if(tokenEntity != null){\n+                return tokenEntity.isExpired() ? \"\" : tokenEntity.getProjectId();\n+            }\n+\n+            checkEndPoints();\n+            getLocalToken();\n+\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            headers.set(VALIDATE_TOKEN_HEADER, token);\n+            headers.set(AUTH_TOKEN_HEADER, localToken);\n+\n+            HttpEntity<String> entity = new HttpEntity<>(null, headers);\n+            ResponseEntity<String> response = restTemplate.exchange(baseUrl + TOKEN_URL + \"?nocatalog\",\n+                    HttpMethod.GET, entity, String.class);\n+\n+            // check headers\n+            if(response.getStatusCode().equals(HttpStatus.OK)){\n+\n+\n+                String resultStr = response.getBody();\n+                JsonNode result = json2Map(resultStr);\n+                JsonNode tokenNode = result.path(\"token\");\n+\n+                TokenEntity te = new TokenEntity(token,false);\n+                JsonNode user = tokenNode.path(\"user\");\n+                te.setUser(user.path(\"name\").asText(\"\"));\n+                te.setUserId(user.path(\"id\").asText(\"\"));\n+\n+                String expireDateStr = tokenNode.path(\"expires_at\").asText();\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                Date expireDate = dateFormat.parse(expireDateStr);\n+                te.setExpireAt(expireDate);\n+\n+                if(tokenNode.has(\"roles\")){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTUwNjg1OnYy", "diffSide": "LEFT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/CacheFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTowNjozNlrOGhOrKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTowNjozNlrOGhOrKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5NjYxNg==", "bodyText": "Like it!", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r437496616", "createdAt": "2020-06-09T15:06:36Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/CacheFactory.java", "diffHunk": "@@ -16,54 +16,36 @@\n \n package com.futurewei.alcor.common.db;\n \n-import com.futurewei.alcor.common.db.ignite.IgniteCache;\n-import com.futurewei.alcor.common.db.redis.RedisCache;\n+import com.futurewei.alcor.common.db.ignite.IgniteCacheFactory;\n+import com.futurewei.alcor.common.db.redis.RedisCacheFactory;\n import org.apache.ignite.client.IgniteClient;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\n-import org.springframework.data.redis.core.RedisTemplate;\n-import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n-import org.springframework.data.redis.serializer.StringRedisSerializer;\n import org.springframework.stereotype.Component;\n \n+import java.util.concurrent.TimeUnit;\n+\n \n @ComponentScan\n @Component\n public class CacheFactory {\n-    @Autowired(required = false)\n-    private IgniteClient igniteClient;\n-\n-    @Autowired\n-    LettuceConnectionFactory lettuceConnectionFactory;\n \n-    @Bean\n-    CacheFactory cacheFactoryInstance() {\n-        return new CacheFactory();\n-    }\n+    private ICacheFactory iCacheFactory;\n \n-    private ICache getIgniteCache(String cacheName) {\n-        return new IgniteCache<>(igniteClient, cacheName);\n+    public CacheFactory(@Autowired(required=false)IgniteClient igniteClient, LettuceConnectionFactory lettuceConnectionFactory){\n+        if(igniteClient == null){\n+            this.iCacheFactory = new RedisCacheFactory(lettuceConnectionFactory);\n+        }else{\n+            this.iCacheFactory = new IgniteCacheFactory(igniteClient);\n+        }\n     }\n \n-    public <K, V> ICache getRedisCache(Class<V> v, String cacheName) {\n-        RedisTemplate<K, V> template = new RedisTemplate<K, V>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34bac4a3bbb4777ff3760e7ed186d8a66908048"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTYzNTQ1OnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/client/KeystoneClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyMjo1MVrOGhP5CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyMjo1MVrOGhP5CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxNjU1Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r437516553", "createdAt": "2020-06-09T15:22:51Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/client/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.client;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.entity.TokenEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.*;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class KeystoneClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KeystoneClient.class);\n+\n+    private final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+\n+    private static final String TOKEN_URL = \"/auth/tokens\";\n+    private static final String AUTH_URL_V3 = \"v3\";\n+    private static final String AUTH_URL_V2 = \"v2\";\n+    private static final String AUTH_URL_QUERY_PARAM = \"?nocatalog\";\n+    private static final String VALIDATE_TOKEN_HEADER = \"X-Subject-Token\";\n+    private static final String AUTH_TOKEN_HEADER = \"X-Auth-Token\";\n+    private static final long CACHE_EXPIRE_HOUR = 2;\n+\n+    private static final String JSON_PROJECT_KEY = \"project\";\n+    private static final String JSON_TOKEN_KEY = \"token\";\n+    private static final String JSON_DOMAIN_KEY = \"domain\";\n+    private static final String JSON_LINKS_KEY = \"links\";\n+    private static final String JSON_ID_KEY = \"id\";\n+    private static final String JSON_REL_KEY = \"rel\";\n+    private static final String JSON_HREF_KEY = \"href\";\n+    private static final String JSON_IDENTITY_KEY = \"identity\";\n+    private static final String JSON_PASSWORD_KEY = \"password\";\n+    private static final String JSON_VERSIONS_KEY = \"versions\";\n+    private static final String JSON_VALUES_KEY = \"values\";\n+    private static final String JSON_EXPIRES_AT_KEY = \"expires_at\";\n+    private static final String JSON_NAME_KEY = \"name\";\n+    private static final String JSON_SCOPE_KEY = \"scope\";\n+    private static final String JSON_AUTH_KEY = \"auth\";\n+    private static final String JSON_USER_KEY = \"user\";\n+    private static final String JSON_ROLES_KEY = \"roles\";\n+    private static final String JSON_METHODS_KEY = \"methods\";\n+    private static final String JSON_STATUS_KEY = \"status\";\n+    private static final String JSON_ENDPOINTS_AVAILABLE_STATUS = \"stable, current, supported\";\n+\n+\n+    private String baseUrl = \"\";\n+    private volatile String localToken = \"\";\n+    private volatile Date localTokenExpireDate;\n+\n+    @Value(\"${keystone.project_domain_name}\")\n+    private String projectDomainName;\n+\n+    @Value(\"${keystone.project_name}\")\n+    private String projectName;\n+\n+    @Value(\"${keystone.user_domain_name}\")\n+    private String userDomainName;\n+\n+    @Value(\"${keystone.username}\")\n+    private String username;\n+\n+    @Value(\"${keystone.password}\")\n+    private String password;\n+\n+    @Value(\"${keystone.auth_type}\")\n+    private String authType;\n+\n+    @Value(\"${keystone.auth_url}\")\n+    private String authUrl;\n+\n+    private RestTemplate restTemplate;\n+    private ICache<String, TokenEntity> cache;\n+\n+    public KeystoneClient(CacheFactory cacheFactory){\n+        this.restTemplate = new RestTemplate();\n+        this.cache = cacheFactory.getExpireCache(TokenEntity.class, CACHE_EXPIRE_HOUR, TimeUnit.HOURS);\n+    }\n+\n+    @PostConstruct\n+    public void setUp() {\n+        try {\n+            checkEndPoints();\n+            getLocalToken();\n+        } catch (Exception e) {\n+            LOG.error(\"Keystone client init failed: {}\", e.getMessage());\n+        }\n+    }\n+\n+    private void checkEndPoints() throws IOException{\n+        if(!\"\".equals(baseUrl)){\n+            return;\n+        }else if (authUrl.contains(AUTH_URL_V3) || authUrl.contains(AUTH_URL_V2)){\n+            baseUrl = authUrl;\n+            return;\n+        }\n+\n+        String response = restTemplate.getForObject(authUrl, String.class);\n+\n+        JsonNode versions = json2Map(response);\n+\n+        //in v3 apis resp have versions key\n+        if(versions.has(JSON_VERSIONS_KEY)){\n+            JsonNode endpoints = versions.path(JSON_VERSIONS_KEY);\n+            //maybe there are no values key\n+            if(endpoints.has(JSON_VALUES_KEY)){\n+                endpoints = endpoints.path(JSON_VALUES_KEY);\n+            }\n+            Iterator<JsonNode> endpointsIt = endpoints.elements();\n+            assignBaseUrlWithBestEndpoint(endpointsIt);\n+\n+            if(\"\".equals(baseUrl)){\n+                findEndPoint(endpointsIt);\n+            }\n+        }\n+    }\n+\n+    private void getLocalToken() throws IOException{\n+        //if have token and not expire use it\n+        if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+            return;\n+        }\n+\n+        checkEndPoints();\n+\n+        synchronized(this) {\n+            if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+                return;\n+            }\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            HttpEntity<String> entity = new HttpEntity<>(buildLocalTokenParams(), headers);\n+            HttpEntity<String> response = restTemplate.postForEntity(baseUrl + TOKEN_URL + AUTH_URL_QUERY_PARAM, entity, String.class);\n+\n+            localToken = response.getHeaders().getFirst(VALIDATE_TOKEN_HEADER);\n+            JsonNode result = json2Map(response.getBody());\n+            JsonNode token = result.path(JSON_TOKEN_KEY);\n+            String expireDateStr = token.path(JSON_EXPIRES_AT_KEY).asText();\n+            if (!\"null\".equals(expireDateStr)) {\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                try {\n+                    localTokenExpireDate = dateFormat.parse(expireDateStr);\n+                } catch (ParseException e) {\n+                    LOG.error(\"Get Alcor Token failed, {}\", e.getMessage());\n+                    localToken = \"\";\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    /**\n+     * verify client request token, and cache the token info which get from keystone\n+     *\n+     * @param token the customer request token in 'X-Auth-Token'\n+     * @return a token project id from keystone\n+     *\n+     * @see <a href=\"https://docs.openstack.org/api-ref/identity/v3/index.html?expanded=password-authentication-with-scoped-authorization-detail#identity-api-operations\">Keystone api operations</a>\n+     */\n+    public String verifyToken(String token){\n+        try {\n+\n+            TokenEntity tokenEntity = cache.get(token);\n+            if(tokenEntity != null){\n+                return tokenEntity.isExpired() ? \"\" : tokenEntity.getProjectId();\n+            }\n+\n+            checkEndPoints();\n+            getLocalToken();\n+\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            headers.set(VALIDATE_TOKEN_HEADER, token);\n+            headers.set(AUTH_TOKEN_HEADER, localToken);\n+\n+            HttpEntity<String> entity = new HttpEntity<>(null, headers);\n+            ResponseEntity<String> response = restTemplate.exchange(baseUrl + TOKEN_URL + AUTH_URL_QUERY_PARAM,\n+                    HttpMethod.GET, entity, String.class);\n+\n+            // check headers\n+            if(response.getStatusCode().equals(HttpStatus.OK)){\n+\n+\n+                String resultStr = response.getBody();\n+                JsonNode result = json2Map(resultStr);\n+                JsonNode tokenNode = result.path(JSON_TOKEN_KEY);\n+\n+                TokenEntity te = new TokenEntity(token,false);\n+                JsonNode user = tokenNode.path(JSON_USER_KEY);\n+                te.setUser(user.path(JSON_NAME_KEY).asText(\"\"));\n+                te.setUserId(user.path(JSON_ID_KEY).asText(\"\"));\n+\n+                String expireDateStr = tokenNode.path(JSON_EXPIRES_AT_KEY).asText();\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                Date expireDate = dateFormat.parse(expireDateStr);\n+                te.setExpireAt(expireDate);\n+\n+                if(tokenNode.has(JSON_ROLES_KEY)){\n+                    JsonNode roles = tokenNode.path(JSON_ROLES_KEY);\n+                    Iterator<JsonNode> rolesIt = roles.elements();\n+                    List<String> roleNames = new ArrayList<>();\n+                    rolesIt.forEachRemaining(role -> roleNames.add(role.path(JSON_NAME_KEY).asText(\"\")));\n+                    te.setRoles(roleNames);\n+                }\n+\n+                if(tokenNode.has(JSON_PROJECT_KEY)){\n+                    JsonNode project = tokenNode.path(JSON_PROJECT_KEY);\n+                    String projectId = project.path(JSON_ID_KEY).asText();\n+\n+                    if(project.has(JSON_DOMAIN_KEY)){\n+                        JsonNode domain = project.path(JSON_DOMAIN_KEY);\n+                        te.setDomainId(domain.path(JSON_ID_KEY).asText(\"\"));\n+                        te.setDomainName(domain.path(JSON_NAME_KEY).asText(\"\"));\n+                    }\n+\n+                    projectId = transformProjectIdToUuid(projectId);\n+                    te.setProjectId(projectId);\n+                    te.setProjectName(project.path(JSON_NAME_KEY).asText(\"\"));\n+                    cache.put(token, te);\n+                    return projectId;\n+                }\n+            }else{\n+                cache.put(token, new TokenEntity(token,true));\n+            }\n+        } catch (IOException | CacheException | ParseException e) {\n+            LOG.error(\"verify token failed, {}\", e.getMessage());\n+        }\n+        return \"\";\n+    }\n+\n+    private String transformProjectIdToUuid(String projectId){\n+        int uuidLength = 32;\n+        if (projectId.length() != uuidLength){\n+            throw new IllegalArgumentException(\"Invalid UUID string: \"+ projectId);\n+        }\n+        return projectId.substring(0, 8) + \"-\" + projectId.substring(8, 12) +\n+                \"-\" + projectId.substring(12, 16) + \"-\" +\n+                projectId.substring(16, 20) + \"-\" +\n+                projectId.substring(20);\n+    }\n+\n+    private String buildLocalTokenParams() throws JsonProcessingException {\n+        //build params\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode auth = mapper.createObjectNode();\n+\n+        ObjectNode identity = mapper.createObjectNode();\n+        ArrayNode methods = mapper.createArrayNode();\n+        methods.add(authType);\n+        identity.set(JSON_METHODS_KEY, methods);\n+\n+        ObjectNode passwordNode = mapper.createObjectNode();\n+        ObjectNode user = mapper.createObjectNode();\n+        user.put(JSON_NAME_KEY, username);\n+        user.put(JSON_PASSWORD_KEY, password);\n+\n+        ObjectNode domain = mapper.createObjectNode();\n+        domain.put(JSON_NAME_KEY, userDomainName);\n+        user.set(JSON_DOMAIN_KEY, domain);\n+\n+        passwordNode.set(JSON_USER_KEY, user);\n+        identity.set(JSON_PASSWORD_KEY, passwordNode);\n+\n+        auth.set(JSON_IDENTITY_KEY, identity);\n+\n+        ObjectNode scope = mapper.createObjectNode();\n+        ObjectNode project = mapper.createObjectNode();\n+        project.put(JSON_NAME_KEY, projectName);\n+        project.set(JSON_DOMAIN_KEY, domain);\n+        scope.set(JSON_PROJECT_KEY, project);\n+\n+        auth.set(JSON_SCOPE_KEY, scope);\n+        ObjectNode root = mapper.createObjectNode();\n+        root.set(JSON_AUTH_KEY, auth);\n+        return mapper.writeValueAsString(root);\n+    }\n+\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34bac4a3bbb4777ff3760e7ed186d8a66908048"}, "originalPosition": 312}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTYzOTc3OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/redis/RedisExpireCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyMzozMlrOGhP7uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyMzozMlrOGhP7uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxNzI0MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r437517240", "createdAt": "2020-06-09T15:23:32Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/redis/RedisExpireCache.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.common.db.redis;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.core.ValueOperations;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+\n+public class RedisExpireCache<K, V> implements ICache<K, V> {\n+    private static final Logger logger = LoggerFactory.getLogger();\n+\n+    private RedisTemplate<K, V> redisTemplate;\n+    private ValueOperations<K, V> valueOperations;\n+    private long timeout;\n+    private TimeUnit timeUnit;\n+    private RedisTransaction transaction;\n+\n+    /**\n+     * return a new redis cache client with auto set expire time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34bac4a3bbb4777ff3760e7ed186d8a66908048"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4533, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}