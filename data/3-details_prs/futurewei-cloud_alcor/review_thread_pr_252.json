{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MTYzNTMy", "number": 252, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjowOToxMVrOEF6Ikw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMToxMzowOFrOELGCfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjMwODAzOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteCacheFactory.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjowOToxMVrOGkYTqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzozMzowNVrOGqveyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwMDE2OQ==", "bodyText": "What is the difference of ignite.Ignite and ignite.client.IgniteClient? Is it Ignite some sort of client?", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r440800169", "createdAt": "2020-06-16T12:09:11Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteCacheFactory.java", "diffHunk": "@@ -18,33 +18,35 @@\n \n import com.futurewei.alcor.common.db.ICache;\n import com.futurewei.alcor.common.db.ICacheFactory;\n-import org.apache.ignite.client.IgniteClient;\n+import org.apache.ignite.Ignite;\n+\n import javax.cache.expiry.CreatedExpiryPolicy;\n import javax.cache.expiry.Duration;\n import javax.cache.expiry.ExpiryPolicy;\n import java.util.concurrent.TimeUnit;\n \n public class IgniteCacheFactory implements ICacheFactory {\n \n-    private IgniteClient igniteClient;\n+    private Ignite ignite;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98436060d7b04dc990854daca20740d57537d1e7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNTIwNA==", "bodyText": "@Gzure Could you think of renaming the class \"ignite.Ignite\" with more specific meaning, for example, IgniteXYZClient?", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r441315204", "createdAt": "2020-06-17T06:43:50Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteCacheFactory.java", "diffHunk": "@@ -18,33 +18,35 @@\n \n import com.futurewei.alcor.common.db.ICache;\n import com.futurewei.alcor.common.db.ICacheFactory;\n-import org.apache.ignite.client.IgniteClient;\n+import org.apache.ignite.Ignite;\n+\n import javax.cache.expiry.CreatedExpiryPolicy;\n import javax.cache.expiry.Duration;\n import javax.cache.expiry.ExpiryPolicy;\n import java.util.concurrent.TimeUnit;\n \n public class IgniteCacheFactory implements ICacheFactory {\n \n-    private IgniteClient igniteClient;\n+    private Ignite ignite;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwMDE2OQ=="}, "originalCommit": {"oid": "98436060d7b04dc990854daca20740d57537d1e7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM5MzQ1Mg==", "bodyText": "Ignite.client.IgniteClient is a thin ignite client, about thin client https://www.gridgain.com/docs/latest/developers-guide/thin-clients/getting-started-with-thin-clients. A ignite. Ignite as an Ignite cluster node in client mode can support more functions than IgniteClient class, but it does not store data.", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r441393452", "createdAt": "2020-06-17T09:00:30Z", "author": {"login": "Gzure"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteCacheFactory.java", "diffHunk": "@@ -18,33 +18,35 @@\n \n import com.futurewei.alcor.common.db.ICache;\n import com.futurewei.alcor.common.db.ICacheFactory;\n-import org.apache.ignite.client.IgniteClient;\n+import org.apache.ignite.Ignite;\n+\n import javax.cache.expiry.CreatedExpiryPolicy;\n import javax.cache.expiry.Duration;\n import javax.cache.expiry.ExpiryPolicy;\n import java.util.concurrent.TimeUnit;\n \n public class IgniteCacheFactory implements ICacheFactory {\n \n-    private IgniteClient igniteClient;\n+    private Ignite ignite;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwMDE2OQ=="}, "originalCommit": {"oid": "98436060d7b04dc990854daca20740d57537d1e7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNzA4MA==", "bodyText": "Okay. Thanks.\nWe might need to consider:\n\nSlow client handling (ref: https://apacheignite.readme.io/docs/clients-vs-servers#managing-slow-clients).\nClient reconnect handling (ref: https://apacheignite.readme.io/docs/clients-vs-servers#reconnecting-a-client). This requires adding a special exception handling in the catch block.\nNumber of Ignite nodes in client mode. If the number goes large, it could affect the performance on the server side.", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r447417080", "createdAt": "2020-06-30T05:24:28Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteCacheFactory.java", "diffHunk": "@@ -18,33 +18,35 @@\n \n import com.futurewei.alcor.common.db.ICache;\n import com.futurewei.alcor.common.db.ICacheFactory;\n-import org.apache.ignite.client.IgniteClient;\n+import org.apache.ignite.Ignite;\n+\n import javax.cache.expiry.CreatedExpiryPolicy;\n import javax.cache.expiry.Duration;\n import javax.cache.expiry.ExpiryPolicy;\n import java.util.concurrent.TimeUnit;\n \n public class IgniteCacheFactory implements ICacheFactory {\n \n-    private IgniteClient igniteClient;\n+    private Ignite ignite;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwMDE2OQ=="}, "originalCommit": {"oid": "98436060d7b04dc990854daca20740d57537d1e7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ3MTMwNQ==", "bodyText": "ok", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r447471305", "createdAt": "2020-06-30T07:33:05Z", "author": {"login": "Gzure"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteCacheFactory.java", "diffHunk": "@@ -18,33 +18,35 @@\n \n import com.futurewei.alcor.common.db.ICache;\n import com.futurewei.alcor.common.db.ICacheFactory;\n-import org.apache.ignite.client.IgniteClient;\n+import org.apache.ignite.Ignite;\n+\n import javax.cache.expiry.CreatedExpiryPolicy;\n import javax.cache.expiry.Duration;\n import javax.cache.expiry.ExpiryPolicy;\n import java.util.concurrent.TimeUnit;\n \n public class IgniteCacheFactory implements ICacheFactory {\n \n-    private IgniteClient igniteClient;\n+    private Ignite ignite;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwMDE2OQ=="}, "originalCommit": {"oid": "98436060d7b04dc990854daca20740d57537d1e7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjk1NTIyOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteDbCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMzowNjo0M1rOGp55YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMzowNjo0M1rOGp55YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MzM3Nw==", "bodyText": "Since we have used Ignite instead of IgniteClient, the exceptions of cache operations should be modified accordingly.", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r446593377", "createdAt": "2020-06-28T03:06:43Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteDbCache.java", "diffHunk": "@@ -19,63 +19,64 @@\n import com.futurewei.alcor.common.db.CacheException;\n import com.futurewei.alcor.common.db.ICache;\n import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.common.db.query.CachePredicate;\n+import com.futurewei.alcor.common.db.query.ScanQueryBuilder;\n+import com.futurewei.alcor.common.db.query.impl.MapPredicate;\n import com.futurewei.alcor.common.logging.Logger;\n import com.futurewei.alcor.common.logging.LoggerFactory;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n import org.apache.ignite.cache.query.Query;\n import org.apache.ignite.cache.query.QueryCursor;\n import org.apache.ignite.cache.query.ScanQuery;\n-import org.apache.ignite.client.ClientCache;\n-import org.apache.ignite.client.ClientCacheConfiguration;\n import org.apache.ignite.client.ClientException;\n-import org.apache.ignite.client.IgniteClient;\n import org.springframework.util.Assert;\n \n import javax.cache.Cache;\n import javax.cache.expiry.ExpiryPolicy;\n+import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.logging.Level;\n import java.util.stream.Collectors;\n \n \n-public class IgniteCache<K, V> implements ICache<K, V> {\n+public class IgniteDbCache<K, V> implements ICache<K, V> {\n     private static final Logger logger = LoggerFactory.getLogger();\n-    private ClientCache<K, V> cache;\n-    private IgniteClient igniteClient;\n+\n+    private static final int RESULT_THRESHOLD_SIZE = 100000;\n+    private IgniteCache<K, V> cache;\n     private IgniteTransaction transaction;\n \n-    public IgniteCache(IgniteClient igniteClient, String name) {\n-        this.igniteClient = igniteClient;\n+    public IgniteDbCache(Ignite ignite, String name) {\n \n         try {\n-            cache = igniteClient.getOrCreateCache(name);\n+            cache = ignite.getOrCreateCache(name);\n         } catch (ClientException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa769da8a38285649cc0453e26337cca6a44ae17"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjk2ODg5OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteDbCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMzozMDoxNlrOGp5_rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMzozMDoxNlrOGp5_rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5NDk4OA==", "bodyText": "How to ensure that there is only one result of the query? if so, is the getAll (CachePredicate < E1, E2 > cachePredicate) interface sufficient?", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r446594988", "createdAt": "2020-06-28T03:30:16Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteDbCache.java", "diffHunk": "@@ -142,6 +143,61 @@ public boolean remove(K key) throws CacheException {\n         }\n     }\n \n+    @Override\n+    public V get(Map<String, Object[]> filterParams) throws CacheException {\n+        CachePredicate<String, BinaryObject> predicate = MapPredicate.getInstance(filterParams);\n+        return get(predicate);\n+    }\n+\n+    @Override\n+    public <E1, E2> V get(CachePredicate<E1, E2> cachePredicate) throws CacheException {\n+        QueryCursor<Cache.Entry<E1, E2>> cursor =\n+                cache.withKeepBinary().query(ScanQueryBuilder.newScanQuery(cachePredicate));\n+        List<Cache.Entry<E1, E2>> result = cursor.getAll();\n+        if(result.size() > 1){\n+            throw new CacheException(\"more than one rows found!\");\n+        }\n+\n+        if(result.isEmpty()){\n+            return null;\n+        }\n+\n+        E2 obj = result.get(0).getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa769da8a38285649cc0453e26337cca6a44ae17"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjk2OTc5OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/query/impl/MapPredicate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMzozMjowN1rOGp6AGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMzozMjowN1rOGp6AGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5NTA5OQ==", "bodyText": "Let's delete useless import.", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r446595099", "createdAt": "2020-06-28T03:32:07Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/query/impl/MapPredicate.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ *\n+ * Copyright 2019 The Alcor Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *         you may not use this file except in compliance with the License.\n+ *         You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *         Unless required by applicable law or agreed to in writing, software\n+ *         distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *         See the License for the specific language governing permissions and\n+ *         limitations under the License.\n+ * /\n+ */\n+\n+package com.futurewei.alcor.common.db.query.impl;\n+\n+import com.futurewei.alcor.common.db.query.CachePredicate;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cache.query.ScanQuery;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa769da8a38285649cc0453e26337cca6a44ae17"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODQ2MjYyOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ICache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNDo0NTowN1rOGqrgcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNDo0NTowN1rOGqrgcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwNjE5NQ==", "bodyText": "Seems that we need to update the comments here.", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r447406195", "createdAt": "2020-06-30T04:45:07Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ICache.java", "diffHunk": "@@ -17,17 +17,57 @@\n package com.futurewei.alcor.common.db;\n \n \n+import com.futurewei.alcor.common.db.query.CachePredicate;\n+\n import java.util.Map;\n \n public interface ICache<K, V> {\n     V get(K var1) throws CacheException;\n \n+    /**\n+     * Get Cache value from cache db by multi params\n+     *\n+     * @param var1 the cache key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf67abdc2e3ed4f451297dee78a353b7fddfc69"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODQ2OTcyOnYy", "diffSide": "RIGHT", "path": "lib/src/test/java/com/futurewei/alcor/common/cache/ControllerUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNDo0OToxMFrOGqrkmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNDo0OToxMFrOGqrkmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwNzI1OQ==", "bodyText": "Like it.", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r447407259", "createdAt": "2020-06-30T04:49:10Z", "author": {"login": "xieus"}, "path": "lib/src/test/java/com/futurewei/alcor/common/cache/ControllerUtilTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *\n+ * Copyright 2019 The Alcor Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *         you may not use this file except in compliance with the License.\n+ *         You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *         Unless required by applicable law or agreed to in writing, software\n+ *         distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *         See the License for the specific language governing permissions and\n+ *         limitations under the License.\n+ * /\n+ */\n+\n+package com.futurewei.alcor.common.cache;\n+\n+import com.futurewei.alcor.common.cache.entity.TestEntity;\n+import com.futurewei.alcor.common.exception.QueryParamTypeNotSupportException;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ControllerUtilTest {\n+\n+    @Test\n+    public void transformUrlPathParamsTest() throws QueryParamTypeNotSupportException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf67abdc2e3ed4f451297dee78a353b7fddfc69"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODQ3Mjc0OnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/filter/KeystoneConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNDo1MDozNFrOGqrmPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoxNDoyN1rOGq-cvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwNzY3Ng==", "bodyText": "duplicated issue or merge issue?", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r447407676", "createdAt": "2020-06-30T04:50:34Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/filter/KeystoneConfiguration.java", "diffHunk": "@@ -34,14 +34,22 @@\n     @Autowired\n     private CacheFactory cacheFactory;\n \n-    @Bean\n+    //@Bean\n     public KeystoneAuthWebFilter keystoneAuthWebFilter(){\n         if(!keystoneEnable){\n             return null;\n         }\n         return new KeystoneAuthWebFilter();\n     }\n \n+    @Bean\n+    public KeystoneAuthGwFilter keystoneAuthGwFilter(){\n+        if(!keystoneEnable){\n+            return null;\n+        }\n+        return new KeystoneAuthGwFilter();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf67abdc2e3ed4f451297dee78a353b7fddfc69"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMzk5NQ==", "bodyText": "They are different filter. KeystoneAuthGwFilter is used for Spring Gateway. KeystoneAuthWebFilter is used for Webflux filter.\nSince webflux is now replaced with spring gateway, KeystoneAuthWebFilteris no longer useful\u3002", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r447433995", "createdAt": "2020-06-30T06:15:07Z", "author": {"login": "Gzure"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/filter/KeystoneConfiguration.java", "diffHunk": "@@ -34,14 +34,22 @@\n     @Autowired\n     private CacheFactory cacheFactory;\n \n-    @Bean\n+    //@Bean\n     public KeystoneAuthWebFilter keystoneAuthWebFilter(){\n         if(!keystoneEnable){\n             return null;\n         }\n         return new KeystoneAuthWebFilter();\n     }\n \n+    @Bean\n+    public KeystoneAuthGwFilter keystoneAuthGwFilter(){\n+        if(!keystoneEnable){\n+            return null;\n+        }\n+        return new KeystoneAuthGwFilter();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwNzY3Ng=="}, "originalCommit": {"oid": "7bf67abdc2e3ed4f451297dee78a353b7fddfc69"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxNjU0MQ==", "bodyText": "I see. Thanks for the clarification.", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r447716541", "createdAt": "2020-06-30T14:14:27Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/filter/KeystoneConfiguration.java", "diffHunk": "@@ -34,14 +34,22 @@\n     @Autowired\n     private CacheFactory cacheFactory;\n \n-    @Bean\n+    //@Bean\n     public KeystoneAuthWebFilter keystoneAuthWebFilter(){\n         if(!keystoneEnable){\n             return null;\n         }\n         return new KeystoneAuthWebFilter();\n     }\n \n+    @Bean\n+    public KeystoneAuthGwFilter keystoneAuthGwFilter(){\n+        if(!keystoneEnable){\n+            return null;\n+        }\n+        return new KeystoneAuthGwFilter();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwNzY3Ng=="}, "originalCommit": {"oid": "7bf67abdc2e3ed4f451297dee78a353b7fddfc69"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjcwOTI1OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/query/ScanQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMTo0Njo0NFrOGrUDqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMTo0Njo0NFrOGrUDqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3MDU3MQ==", "bodyText": "This class depends on ignite.\nShould it be put in the ignite directory?", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r448070571", "createdAt": "2020-07-01T01:46:44Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/query/ScanQueryBuilder.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ *\n+ * Copyright 2019 The Alcor Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *         you may not use this file except in compliance with the License.\n+ *         You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *         Unless required by applicable law or agreed to in writing, software\n+ *         distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *         See the License for the specific language governing permissions and\n+ *         limitations under the License.\n+ * /\n+ */\n+\n+package com.futurewei.alcor.common.db.query;\n+\n+import org.apache.ignite.cache.query.ScanQuery;\n+\n+public class ScanQueryBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dd6d31c98c5d64b7d5573efa5061b1837bb2eda"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjcxMTMwOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/query/impl/MapPredicate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMTo0ODowMVrOGrUE0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMTo0ODowMVrOGrUE0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3MDg2Nw==", "bodyText": "This class depends on ignite. should it be put in the ignite directory?", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r448070867", "createdAt": "2020-07-01T01:48:01Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/query/impl/MapPredicate.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ *\n+ * Copyright 2019 The Alcor Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *         you may not use this file except in compliance with the License.\n+ *         You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *         Unless required by applicable law or agreed to in writing, software\n+ *         distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *         See the License for the specific language governing permissions and\n+ *         limitations under the License.\n+ * /\n+ */\n+\n+package com.futurewei.alcor.common.db.query.impl;\n+\n+import com.futurewei.alcor.common.db.query.CachePredicate;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cache.query.ScanQuery;\n+\n+import java.util.Map;\n+\n+\n+public class MapPredicate implements CachePredicate<String, BinaryObject> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dd6d31c98c5d64b7d5573efa5061b1837bb2eda"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjczNTQ3OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteDbCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjowMzowMFrOGrUTdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjowMzowMFrOGrUTdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NDYxNA==", "bodyText": "There is still ClientException in the constructor.", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r448074614", "createdAt": "2020-07-01T02:03:00Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteDbCache.java", "diffHunk": "@@ -83,7 +85,7 @@ public IgniteDbCache(Ignite client, String name, ExpiryPolicy ep) {\n     public V get(K key) throws CacheException {\n         try {\n             return cache.get(key);\n-        } catch (ClientException e) {\n+        } catch (IgniteException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1918bd9657b223c1c7f43ece2cd4be950ded0679"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjc1NzEwOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteDbCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjoxNTozOFrOGrUf4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjoxNTozOFrOGrUf4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3Nzc5Mg==", "bodyText": "If an exception is not thrown here, subsequent cache operations (for example: cache.put()) may cause null pointer exceptions. This Modification may cause all microservices to be changed, and the priority can be lowered.", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r448077792", "createdAt": "2020-07-01T02:15:38Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteDbCache.java", "diffHunk": "@@ -19,63 +19,64 @@\n import com.futurewei.alcor.common.db.CacheException;\n import com.futurewei.alcor.common.db.ICache;\n import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.common.db.query.CachePredicate;\n+import com.futurewei.alcor.common.db.query.ScanQueryBuilder;\n+import com.futurewei.alcor.common.db.query.impl.MapPredicate;\n import com.futurewei.alcor.common.logging.Logger;\n import com.futurewei.alcor.common.logging.LoggerFactory;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n import org.apache.ignite.cache.query.Query;\n import org.apache.ignite.cache.query.QueryCursor;\n import org.apache.ignite.cache.query.ScanQuery;\n-import org.apache.ignite.client.ClientCache;\n-import org.apache.ignite.client.ClientCacheConfiguration;\n import org.apache.ignite.client.ClientException;\n-import org.apache.ignite.client.IgniteClient;\n import org.springframework.util.Assert;\n \n import javax.cache.Cache;\n import javax.cache.expiry.ExpiryPolicy;\n+import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.logging.Level;\n import java.util.stream.Collectors;\n \n \n-public class IgniteCache<K, V> implements ICache<K, V> {\n+public class IgniteDbCache<K, V> implements ICache<K, V> {\n     private static final Logger logger = LoggerFactory.getLogger();\n-    private ClientCache<K, V> cache;\n-    private IgniteClient igniteClient;\n+\n+    private static final int RESULT_THRESHOLD_SIZE = 100000;\n+    private IgniteCache<K, V> cache;\n     private IgniteTransaction transaction;\n \n-    public IgniteCache(IgniteClient igniteClient, String name) {\n-        this.igniteClient = igniteClient;\n+    public IgniteDbCache(Ignite ignite, String name) {\n \n         try {\n-            cache = igniteClient.getOrCreateCache(name);\n+            cache = ignite.getOrCreateCache(name);\n         } catch (ClientException e) {\n             logger.log(Level.WARNING, \"Create cache for client \" + name + \" failed:\" + e.getMessage());\n         } catch (Exception e) {\n             logger.log(Level.WARNING, \"Unexpected failure:\" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dd6d31c98c5d64b7d5573efa5061b1837bb2eda"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI0NjgxOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0NTowOFrOGr_fFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo0NDo0NFrOGsBN6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MjEwMw==", "bodyText": "Do we still need throws CacheException here?", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r448782103", "createdAt": "2020-07-02T06:45:08Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteTransaction.java", "diffHunk": "@@ -33,55 +31,43 @@\n public class IgniteTransaction implements Transaction {\n     private static final Logger logger = LoggerFactory.getLogger();\n \n-    private IgniteClient igniteClient;\n-    private ClientTransaction clientTransaction;\n+    private final Ignite client;\n+    private org.apache.ignite.transactions.Transaction transaction;\n \n-    public IgniteTransaction(IgniteClient igniteClient) {\n-        this.igniteClient = igniteClient;\n+    public IgniteTransaction(Ignite client) {\n+        this.client = client;\n     }\n \n+    @Override\n     public Transaction start() throws CacheException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14d746fb5826f2e54d182f7efa863a98a6316c3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxMDQ3Mw==", "bodyText": "IgniteClienTransaction need", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r448810473", "createdAt": "2020-07-02T07:44:44Z", "author": {"login": "Gzure"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteTransaction.java", "diffHunk": "@@ -33,55 +31,43 @@\n public class IgniteTransaction implements Transaction {\n     private static final Logger logger = LoggerFactory.getLogger();\n \n-    private IgniteClient igniteClient;\n-    private ClientTransaction clientTransaction;\n+    private final Ignite client;\n+    private org.apache.ignite.transactions.Transaction transaction;\n \n-    public IgniteTransaction(IgniteClient igniteClient) {\n-        this.igniteClient = igniteClient;\n+    public IgniteTransaction(Ignite client) {\n+        this.client = client;\n     }\n \n+    @Override\n     public Transaction start() throws CacheException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MjEwMw=="}, "originalCommit": {"oid": "c14d746fb5826f2e54d182f7efa863a98a6316c3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI1MDY0OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteTransaction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0NjoyNVrOGr_hRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo0NjoyNVrOGr_hRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4MjY2Mw==", "bodyText": "May need to catch IgniteException here.", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r448782663", "createdAt": "2020-07-02T06:46:25Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteTransaction.java", "diffHunk": "@@ -33,55 +31,43 @@\n public class IgniteTransaction implements Transaction {\n     private static final Logger logger = LoggerFactory.getLogger();\n \n-    private IgniteClient igniteClient;\n-    private ClientTransaction clientTransaction;\n+    private final Ignite client;\n+    private org.apache.ignite.transactions.Transaction transaction;\n \n-    public IgniteTransaction(IgniteClient igniteClient) {\n-        this.igniteClient = igniteClient;\n+    public IgniteTransaction(Ignite client) {\n+        this.client = client;\n     }\n \n+    @Override\n     public Transaction start() throws CacheException {\n-        try {\n-            clientTransaction = igniteClient.transactions().txStart(PESSIMISTIC, SERIALIZABLE);\n-        } catch (ClientServerError e) {\n-            logger.log(Level.WARNING, \"IgniteTransaction start error:\" + e.getMessage());\n-            throw new CacheException(e.getMessage());\n-        } catch (ClientException e) {\n-            logger.log(Level.WARNING, \"IgniteTransaction start error:\" + e.getMessage());\n-            throw new CacheException(e.getMessage());\n-        }\n-\n+        transaction = client.transactions().txStart(PESSIMISTIC, SERIALIZABLE);\n         return this;\n     }\n \n+    @Override\n     public void commit() throws CacheException {\n         try {\n-            clientTransaction.commit();\n-        } catch (ClientServerError e) {\n-            logger.log(Level.WARNING, \"IgniteTransaction commit error:\" + e.getMessage());\n-            throw new CacheException(e.getMessage());\n-        } catch (ClientException e) {\n+            transaction.commit();\n+        } catch (IgniteException e) {\n             logger.log(Level.WARNING, \"IgniteTransaction commit error:\" + e.getMessage());\n             throw new CacheException(e.getMessage());\n         }\n     }\n \n+    @Override\n     public void rollback() throws CacheException {\n         try {\n-            clientTransaction.rollback();\n-        } catch (ClientServerError e) {\n-            logger.log(Level.WARNING, \"IgniteTransaction rollback error:\" + e.getMessage());\n-            throw new CacheException(e.getMessage());\n-        } catch (ClientException e) {\n+            transaction.rollback();\n+        } catch (IgniteException e) {\n             logger.log(Level.WARNING, \"IgniteTransaction rollback error:\" + e.getMessage());\n             throw new CacheException(e.getMessage());\n         }\n     }\n \n     @Override\n     public void close() {\n-        if (clientTransaction != null) {\n-            clientTransaction.close();\n+        if (transaction != null) {\n+            transaction.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14d746fb5826f2e54d182f7efa863a98a6316c3"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzI2NDk3OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/redis/RedisExpireCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1MTozOVrOGr_qTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjo1MTozOVrOGr_qTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NDk3NQ==", "bodyText": "Should there be no iginte-related information in redis?", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r448784975", "createdAt": "2020-07-02T06:51:39Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/redis/RedisExpireCache.java", "diffHunk": "@@ -113,6 +114,26 @@ public boolean remove(K key) throws CacheException {\n         }\n     }\n \n+    @Override\n+    public V get(Map<String, Object[]> filterParams) throws CacheException {\n+        return null;\n+    }\n+\n+    @Override\n+    public <E1, E2> V get(IgniteBiPredicate<E1, E2> igniteBiPredicate) throws CacheException {\n+        return null;\n+    }\n+\n+    @Override\n+    public <E1, E2> Map<K, V> getAll(Map<String, Object[]> filterParams) throws CacheException {\n+        return null;\n+    }\n+\n+    @Override\n+    public <E1, E2> Map<K, V> getAll(IgniteBiPredicate<E1, E2> igniteBiPredicate) throws CacheException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14d746fb5826f2e54d182f7efa863a98a6316c3"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDY2OTgwOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMTowMDo0MlrOGsgyyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMToyNTozMFrOGshG0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyNzgxOA==", "bodyText": "@Gzure Should Ignitetransaction also support IgniteClient based on the setting?\nThis is non-blocking. If we do need that, we can do it next PR.", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r449327818", "createdAt": "2020-07-03T01:00:42Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteTransaction.java", "diffHunk": "@@ -33,55 +31,48 @@\n public class IgniteTransaction implements Transaction {\n     private static final Logger logger = LoggerFactory.getLogger();\n \n-    private IgniteClient igniteClient;\n-    private ClientTransaction clientTransaction;\n+    private final Ignite client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de99e62709d42f996eae5d9a64fcde19d7aab57d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzMjk0NA==", "bodyText": "@Gzure Should Ignitetransaction also support IgniteClient based on the setting?\nThis is non-blocking. If we do need that, we can do it next PR.\n\nI had added a IgniteClientTransaction which according to Ignite thin client", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r449332944", "createdAt": "2020-07-03T01:25:30Z", "author": {"login": "Gzure"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteTransaction.java", "diffHunk": "@@ -33,55 +31,48 @@\n public class IgniteTransaction implements Transaction {\n     private static final Logger logger = LoggerFactory.getLogger();\n \n-    private IgniteClient igniteClient;\n-    private ClientTransaction clientTransaction;\n+    private final Ignite client;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyNzgxOA=="}, "originalCommit": {"oid": "de99e62709d42f996eae5d9a64fcde19d7aab57d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDY3MzQzOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMTowMzoyNlrOGsg1AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMTowMzoyNlrOGsg1AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyODM4NQ==", "bodyText": "In our MockIgniteServer, do we need to test both IgniteClient and Ignite?", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r449328385", "createdAt": "2020-07-03T01:03:26Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -16,26 +16,45 @@\n package com.futurewei.alcor.common.db.ignite;\n \n import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCache;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.Ignition;\n-import org.apache.ignite.configuration.ClientConnectorConfiguration;\n+import org.apache.ignite.internal.IgniteKernal;\n+import org.apache.ignite.internal.processors.cache.IgniteCacheProxyImpl;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n \n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n \n public class MockIgniteServer {\n+\n+    private static final String LOCAL_ADDRESS = \"127.0.0.1\";\n+    private static final int LISTEN_PORT = 11801;\n+    private static final int LISTEN_PORT_RANGE = 10;\n+\n     private static Ignite igniteServer = null;\n-    private static int ListenPort = 10801;\n \n     @BeforeClass\n     public static void init() {\n         if (igniteServer == null) {\n             try {\n-                ClientConnectorConfiguration clientConfig = new ClientConnectorConfiguration();\n-                clientConfig.setPort(ListenPort);\n-\n                 org.apache.ignite.configuration.IgniteConfiguration cfg = new org.apache.ignite.configuration.IgniteConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de99e62709d42f996eae5d9a64fcde19d7aab57d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDY4NzM0OnYy", "diffSide": "RIGHT", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/proxies/SubnetManagerServiceProxy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMToxMzowOFrOGsg8-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMToxMzowOFrOGsg8-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzMDQyNQ==", "bodyText": "If not that in use anyway, we can consider deprecate then remove them", "url": "https://github.com/futurewei-cloud/alcor/pull/252#discussion_r449330425", "createdAt": "2020-07-03T01:13:08Z", "author": {"login": "xieus"}, "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/proxies/SubnetManagerServiceProxy.java", "diffHunk": "@@ -28,7 +28,7 @@\n \n import java.util.UUID;\n \n-@Service\n+//@Service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de99e62709d42f996eae5d9a64fcde19d7aab57d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4561, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}