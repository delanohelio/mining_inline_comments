{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMDgzNzYx", "number": 481, "title": "[Data Plane Mgr] Support Pulsar Publisher ", "bodyText": "This PR proposes the following change:\n\nAdd pulsar client as a publisher\nFix gRPC client to allow it coexist with the new pulsar client\nAdd logic to support GS programming based on port-level configuration", "createdAt": "2020-11-18T10:33:07Z", "url": "https://github.com/futurewei-cloud/alcor/pull/481", "merged": true, "mergeCommit": {"oid": "a89370932acbde3aba55d0fbf993f7e36039d925"}, "closed": true, "closedAt": "2020-11-30T19:03:09Z", "author": {"login": "VanderChen"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddroahAH2gAyNTIzMDgzNzYxOjMwMWRhYTVhZGFhZmMxNTcyZDQ2OGYyZGEwYjc3OTQ2NTAzNGI1Y2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhqJO5AFqTU0MTE1MTk2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "301daa5adaafc1572d468f2da0b779465034b5cb", "author": {"user": {"login": "VanderChen", "name": "Min Chen"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/301daa5adaafc1572d468f2da0b779465034b5cb", "committedDate": "2020-11-18T10:31:06Z", "message": "Merge pulsar to dpm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8", "author": {"user": {"login": "VanderChen", "name": "Min Chen"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ddf8f06693f047aebd64f19903e5d765bfaa89e8", "committedDate": "2020-11-18T10:36:11Z", "message": "Merge pulsar to dpm"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MTMwNTUx", "url": "https://github.com/futurewei-cloud/alcor/pull/481#pullrequestreview-534130551", "createdAt": "2020-11-19T07:06:19Z", "commit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNzowNjoxOVrOH2PT_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNzozNzo1MVrOH2QHhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzNjAzMA==", "bodyText": "I remember we had an old issue in the new DPM when we enable gRPC client and pulsar client, DPM can't launch. Not sure if it has been fixed. @chenpiaoping @VanderChen", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r526636030", "createdAt": "2020-11-19T07:06:19Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/DataPlaneClientImpl.java", "diffHunk": "@@ -18,24 +18,151 @@\n import com.futurewei.alcor.dataplane.client.DataPlaneClient;\n import com.futurewei.alcor.dataplane.entity.MulticastGoalState;\n import com.futurewei.alcor.dataplane.entity.UnicastGoalState;\n+import com.futurewei.alcor.dataplane.exception.GroupTopicNotFound;\n+import com.futurewei.alcor.dataplane.exception.MulticastTopicNotFound;\n import com.futurewei.alcor.schema.Goalstate;\n import com.futurewei.alcor.schema.Goalstateprovisioner;\n+import com.futurewei.alcor.web.entity.dataplane.MulticastGoalStateByte;\n+import com.futurewei.alcor.web.entity.dataplane.UnicastGoalStateByte;\n+\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.impl.schema.JSONSchema;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n //@Component", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzOTA2Ng==", "bodyText": "This is an OK short-term solution. Let us plan a long-term solution. One possibility to store the mapping in node metadata manager, as this is a host-level resource.\n@chenpiaoping @VanderChen what do you think of?", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r526639066", "createdAt": "2020-11-19T07:13:54Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/resources/application.properties", "diffHunk": "@@ -13,3 +13,10 @@ grpc.threads-pool-name = grpc-thread-pool\n #logging.level.root=INFO\n \n \n+mq.type=pulsar\n+#####Pulsar configuration#####\n+pulsar.url=pulsar://127.0.0.1:6650\n+pulsar.unicast.topic=unicast-topic1\n+host.ip.to.group.topic.map=group-topic1:192.168.131.131,10.10.10.11 group-topic2:192.168.131.131,11.11.11.12", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzOTU2OQ==", "bodyText": "Like this config \ud83d\udc4d", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r526639569", "createdAt": "2020-11-19T07:15:04Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/resources/application.properties", "diffHunk": "@@ -13,3 +13,10 @@ grpc.threads-pool-name = grpc-thread-pool\n #logging.level.root=INFO\n \n \n+mq.type=pulsar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0MDk0NA==", "bodyText": "Let us plan to build these mapping from node metadata manager and store it in the local cache under development.", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r526640944", "createdAt": "2020-11-19T07:18:23Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/TopicManager.java", "diffHunk": "@@ -15,9 +15,72 @@\n */\n package com.futurewei.alcor.dataplane.client.pulsar;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Configuration;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.*;\n+\n+@Configuration\n+@ConditionalOnProperty(prefix = \"mq\", name = \"type\", havingValue = \"pulsar\")\n public class TopicManager {\n+    private static final Logger LOG = LoggerFactory.getLogger(TopicManager.class);\n+\n+    @Autowired\n+    private PulsarConfiguration configuration;\n+\n+    private Map<String, String> hostIpToGroupTopic;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0MTk2OQ==", "bodyText": "We can define an explicit exception for this parsing error. Please find an example in https://github.com/futurewei-cloud/alcor/tree/master/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/exception\nThe idea is that we know every possible exception our own program may throw, and define it before hand. In each of the predefined exception, we can define its error code and message, and come to the debugging time, we can quickly locate where the exception is thrown and why based on the given error code and message.", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r526641969", "createdAt": "2020-11-19T07:20:46Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/TopicManager.java", "diffHunk": "@@ -15,9 +15,72 @@\n */\n package com.futurewei.alcor.dataplane.client.pulsar;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Configuration;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.*;\n+\n+@Configuration\n+@ConditionalOnProperty(prefix = \"mq\", name = \"type\", havingValue = \"pulsar\")\n public class TopicManager {\n+    private static final Logger LOG = LoggerFactory.getLogger(TopicManager.class);\n+\n+    @Autowired\n+    private PulsarConfiguration configuration;\n+\n+    private Map<String, String> hostIpToGroupTopic;\n+\n+    private Map<String, String> groupTopicToMulticastTopic;\n+\n+    private Set<String> groupTopics;\n+\n+    private Set<String> multicastTopics;\n+\n+    @PostConstruct\n+    public void init() throws Exception {\n+        try {\n+            this.hostIpToGroupTopic = parseTopicConfig(configuration.getHostIpToGroupTopicMap());\n+            this.groupTopicToMulticastTopic = parseTopicConfig(configuration.getGroupTopicToMulticastTopicMap());\n+        }catch (Exception e) {\n+            throw new Exception(\"Parse topic config error: \" + e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0MjM1Mw==", "bodyText": "Like this function implementation, which is neat.", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r526642353", "createdAt": "2020-11-19T07:21:49Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/UnicastFunction.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.client.pulsar;\n+\n+import com.futurewei.alcor.web.entity.dataplane.UnicastGoalStateByte;\n+import org.apache.pulsar.client.api.Schema;\n+import org.apache.pulsar.functions.api.Context;\n+import org.apache.pulsar.functions.api.Function;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnicastFunction implements Function<UnicastGoalStateByte, UnicastGoalStateByte> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0NDE3MA==", "bodyText": "btw, where is this UnicastFunction used?", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r526644170", "createdAt": "2020-11-19T07:26:18Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/UnicastFunction.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.client.pulsar;\n+\n+import com.futurewei.alcor.web.entity.dataplane.UnicastGoalStateByte;\n+import org.apache.pulsar.client.api.Schema;\n+import org.apache.pulsar.functions.api.Context;\n+import org.apache.pulsar.functions.api.Function;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class UnicastFunction implements Function<UnicastGoalStateByte, UnicastGoalStateByte> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0MjM1Mw=="}, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0NTE4OQ==", "bodyText": "we should use configuration here.\nCheck the thread pool configurations in application.properties\ngrpc.min-threads = 100\ngrpc.max-threads = 200", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r526645189", "createdAt": "2020-11-19T07:28:38Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/MulticastFunction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.client.pulsar;\n+\n+import com.futurewei.alcor.web.entity.dataplane.MulticastGoalStateByte;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.apache.pulsar.client.api.Schema;\n+import org.apache.pulsar.functions.api.Context;\n+import org.apache.pulsar.functions.api.Function;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MulticastFunction implements Function<MulticastGoalStateByte, MulticastGoalStateByte> {\n+    private static final Logger LOG = LoggerFactory.getLogger(MulticastFunction.class);\n+    public static final ThreadPoolExecutor executor = new ThreadPoolExecutor(\n+            20,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0NjY3OQ==", "bodyText": "In addition to JSONSchema, what does other schema Pulsar support?", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r526646679", "createdAt": "2020-11-19T07:32:05Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/DataPlaneClientImpl.java", "diffHunk": "@@ -18,24 +18,151 @@\n import com.futurewei.alcor.dataplane.client.DataPlaneClient;\n import com.futurewei.alcor.dataplane.entity.MulticastGoalState;\n import com.futurewei.alcor.dataplane.entity.UnicastGoalState;\n+import com.futurewei.alcor.dataplane.exception.GroupTopicNotFound;\n+import com.futurewei.alcor.dataplane.exception.MulticastTopicNotFound;\n import com.futurewei.alcor.schema.Goalstate;\n import com.futurewei.alcor.schema.Goalstateprovisioner;\n+import com.futurewei.alcor.web.entity.dataplane.MulticastGoalStateByte;\n+import com.futurewei.alcor.web.entity.dataplane.UnicastGoalStateByte;\n+\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.impl.schema.JSONSchema;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n //@Component\n public class DataPlaneClientImpl implements DataPlaneClient {\n+    private static final Logger LOG = LoggerFactory.getLogger(DataPlaneClientImpl.class);\n+\n+    @Autowired\n+    private PulsarClient pulsarClient;\n+\n+    @Autowired\n+    private TopicManager topicManager;\n \n     @Override\n     public Map<String, List<Goalstateprovisioner.GoalStateOperationReply.GoalStateOperationStatus>> createGoalStates(Goalstate.GoalState goalState, String hostIp) throws Exception {\n         return null;\n     }\n \n+    private UnicastGoalStateByte buildUnicastGoalStateByte(UnicastGoalState unicastGoalState) {\n+        UnicastGoalStateByte unicastGoalStateByte = new UnicastGoalStateByte();\n+        unicastGoalStateByte.setNextTopic(unicastGoalState.getNextTopic());\n+        unicastGoalStateByte.setGoalStateByte(unicastGoalState.getGoalState().toByteArray());\n+\n+        return unicastGoalStateByte;\n+    }\n+\n+    private List<String> getGroupTopics(List<String> hostIps) throws Exception {\n+        List<String> groupTopics = new ArrayList<>();\n+\n+        for (String hostIp: hostIps) {\n+            String groupTopic = topicManager.getGroupTopicByHostIp(hostIp);\n+            if (StringUtils.isEmpty(groupTopic)) {\n+                LOG.error(\"Can not find group topic by host ip:{}\", hostIp);\n+                throw new GroupTopicNotFound();\n+            }\n+\n+            groupTopics.add(groupTopic);\n+        }\n+\n+        return groupTopics;\n+    }\n+\n+    private Map<String, List<String>> getMulticastTopics(List<String> hostIps) throws Exception {\n+        Map<String, List<String>> multicastTopics = new HashMap<>();\n+\n+        List<String> groupTopics = this.getGroupTopics(hostIps);\n+        for (String groupTopic: groupTopics) {\n+            String multicastTopic = topicManager.getMulticastTopicByGroupTopic(groupTopic);\n+            if (StringUtils.isEmpty(multicastTopic)) {\n+                LOG.error(\"Can not find multicast topic by group topic:{}\", groupTopic);\n+                throw new MulticastTopicNotFound();\n+            }\n+\n+            if (!multicastTopics.containsKey(multicastTopic)) {\n+                multicastTopics.put(multicastTopic, new ArrayList<>());\n+            }\n+\n+            multicastTopics.get(multicastTopic).add(groupTopic);\n+        }\n+\n+        return multicastTopics;\n+    }\n+\n+    private MulticastGoalStateByte buildMulticastGoalStateByte(MulticastGoalState multicastGoalState) {\n+        MulticastGoalStateByte multicastGoalStateByte = new MulticastGoalStateByte();\n+        multicastGoalStateByte.setNextTopics(multicastGoalState.getNextTopics());\n+        multicastGoalStateByte.setGoalStateByte(multicastGoalState.getGoalState().toByteArray());\n+\n+        return multicastGoalStateByte;\n+    }\n+\n+    private void createGoalState(MulticastGoalState multicastGoalState) throws Exception {\n+        Map<String, List<String>> multicastTopics = getMulticastTopics(multicastGoalState.getHostIps());\n+\n+        for (Map.Entry<String, List<String>> entry: multicastTopics.entrySet()) {\n+            String multicastTopic = entry.getKey();\n+            List<String> groupTopics = entry.getValue();\n+\n+            multicastGoalState.setNextTopics(groupTopics);\n+\n+            Producer<MulticastGoalStateByte> producer = pulsarClient\n+                    .newProducer(JSONSchema.of(MulticastGoalStateByte.class))\n+                    .topic(multicastTopic)\n+                    .enableBatching(false)\n+                    .create();\n+\n+            producer.send(buildMulticastGoalStateByte(multicastGoalState));\n+\n+            LOG.info(\"Send multicastGoalState to topic:{} success, \" +\n+                            \"groupTopics: {}, unicastGoalStates: {}\",\n+                    multicastTopic, groupTopics, multicastGoalState);\n+        }\n+    }\n+\n     @Override\n     public List<Map<String, List<Goalstateprovisioner.GoalStateOperationReply.GoalStateOperationStatus>>> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception {\n-        return null;\n+        for (UnicastGoalState unicastGoalState: unicastGoalStates) {\n+            String nextTopic = topicManager.getGroupTopicByHostIp(unicastGoalState.getHostIp());\n+            if (StringUtils.isEmpty(nextTopic)) {\n+                LOG.error(\"Can not find next topic by host ip:{}\", unicastGoalState.getHostIp());\n+                throw new GroupTopicNotFound();\n+            }\n+\n+            String topic = nextTopic;\n+            String unicastTopic = topicManager.getUnicastTopic();\n+            if (!StringUtils.isEmpty(unicastTopic)) {\n+                unicastGoalState.setNextTopic(nextTopic);\n+                topic = unicastTopic;\n+            }\n+\n+            Producer<UnicastGoalStateByte> producer = pulsarClient\n+                    .newProducer(JSONSchema.of(UnicastGoalStateByte.class))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0NzMyMA==", "bodyText": "I know we don't have a response from MQ for now. @chenpiaoping Let us plan to design a feedback channel here: it would be ideal if we can reuse the same topic with different key.", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r526647320", "createdAt": "2020-11-19T07:33:42Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/DataPlaneClientImpl.java", "diffHunk": "@@ -18,24 +18,151 @@\n import com.futurewei.alcor.dataplane.client.DataPlaneClient;\n import com.futurewei.alcor.dataplane.entity.MulticastGoalState;\n import com.futurewei.alcor.dataplane.entity.UnicastGoalState;\n+import com.futurewei.alcor.dataplane.exception.GroupTopicNotFound;\n+import com.futurewei.alcor.dataplane.exception.MulticastTopicNotFound;\n import com.futurewei.alcor.schema.Goalstate;\n import com.futurewei.alcor.schema.Goalstateprovisioner;\n+import com.futurewei.alcor.web.entity.dataplane.MulticastGoalStateByte;\n+import com.futurewei.alcor.web.entity.dataplane.UnicastGoalStateByte;\n+\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.impl.schema.JSONSchema;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n //@Component\n public class DataPlaneClientImpl implements DataPlaneClient {\n+    private static final Logger LOG = LoggerFactory.getLogger(DataPlaneClientImpl.class);\n+\n+    @Autowired\n+    private PulsarClient pulsarClient;\n+\n+    @Autowired\n+    private TopicManager topicManager;\n \n     @Override\n     public Map<String, List<Goalstateprovisioner.GoalStateOperationReply.GoalStateOperationStatus>> createGoalStates(Goalstate.GoalState goalState, String hostIp) throws Exception {\n         return null;\n     }\n \n+    private UnicastGoalStateByte buildUnicastGoalStateByte(UnicastGoalState unicastGoalState) {\n+        UnicastGoalStateByte unicastGoalStateByte = new UnicastGoalStateByte();\n+        unicastGoalStateByte.setNextTopic(unicastGoalState.getNextTopic());\n+        unicastGoalStateByte.setGoalStateByte(unicastGoalState.getGoalState().toByteArray());\n+\n+        return unicastGoalStateByte;\n+    }\n+\n+    private List<String> getGroupTopics(List<String> hostIps) throws Exception {\n+        List<String> groupTopics = new ArrayList<>();\n+\n+        for (String hostIp: hostIps) {\n+            String groupTopic = topicManager.getGroupTopicByHostIp(hostIp);\n+            if (StringUtils.isEmpty(groupTopic)) {\n+                LOG.error(\"Can not find group topic by host ip:{}\", hostIp);\n+                throw new GroupTopicNotFound();\n+            }\n+\n+            groupTopics.add(groupTopic);\n+        }\n+\n+        return groupTopics;\n+    }\n+\n+    private Map<String, List<String>> getMulticastTopics(List<String> hostIps) throws Exception {\n+        Map<String, List<String>> multicastTopics = new HashMap<>();\n+\n+        List<String> groupTopics = this.getGroupTopics(hostIps);\n+        for (String groupTopic: groupTopics) {\n+            String multicastTopic = topicManager.getMulticastTopicByGroupTopic(groupTopic);\n+            if (StringUtils.isEmpty(multicastTopic)) {\n+                LOG.error(\"Can not find multicast topic by group topic:{}\", groupTopic);\n+                throw new MulticastTopicNotFound();\n+            }\n+\n+            if (!multicastTopics.containsKey(multicastTopic)) {\n+                multicastTopics.put(multicastTopic, new ArrayList<>());\n+            }\n+\n+            multicastTopics.get(multicastTopic).add(groupTopic);\n+        }\n+\n+        return multicastTopics;\n+    }\n+\n+    private MulticastGoalStateByte buildMulticastGoalStateByte(MulticastGoalState multicastGoalState) {\n+        MulticastGoalStateByte multicastGoalStateByte = new MulticastGoalStateByte();\n+        multicastGoalStateByte.setNextTopics(multicastGoalState.getNextTopics());\n+        multicastGoalStateByte.setGoalStateByte(multicastGoalState.getGoalState().toByteArray());\n+\n+        return multicastGoalStateByte;\n+    }\n+\n+    private void createGoalState(MulticastGoalState multicastGoalState) throws Exception {\n+        Map<String, List<String>> multicastTopics = getMulticastTopics(multicastGoalState.getHostIps());\n+\n+        for (Map.Entry<String, List<String>> entry: multicastTopics.entrySet()) {\n+            String multicastTopic = entry.getKey();\n+            List<String> groupTopics = entry.getValue();\n+\n+            multicastGoalState.setNextTopics(groupTopics);\n+\n+            Producer<MulticastGoalStateByte> producer = pulsarClient\n+                    .newProducer(JSONSchema.of(MulticastGoalStateByte.class))\n+                    .topic(multicastTopic)\n+                    .enableBatching(false)\n+                    .create();\n+\n+            producer.send(buildMulticastGoalStateByte(multicastGoalState));\n+\n+            LOG.info(\"Send multicastGoalState to topic:{} success, \" +\n+                            \"groupTopics: {}, unicastGoalStates: {}\",\n+                    multicastTopic, groupTopics, multicastGoalState);\n+        }\n+    }\n+\n     @Override\n     public List<Map<String, List<Goalstateprovisioner.GoalStateOperationReply.GoalStateOperationStatus>>> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception {\n-        return null;\n+        for (UnicastGoalState unicastGoalState: unicastGoalStates) {\n+            String nextTopic = topicManager.getGroupTopicByHostIp(unicastGoalState.getHostIp());\n+            if (StringUtils.isEmpty(nextTopic)) {\n+                LOG.error(\"Can not find next topic by host ip:{}\", unicastGoalState.getHostIp());\n+                throw new GroupTopicNotFound();\n+            }\n+\n+            String topic = nextTopic;\n+            String unicastTopic = topicManager.getUnicastTopic();\n+            if (!StringUtils.isEmpty(unicastTopic)) {\n+                unicastGoalState.setNextTopic(nextTopic);\n+                topic = unicastTopic;\n+            }\n+\n+            Producer<UnicastGoalStateByte> producer = pulsarClient\n+                    .newProducer(JSONSchema.of(UnicastGoalStateByte.class))\n+                    .topic(topic)\n+                    .enableBatching(false)\n+                    .create();\n+            producer.send(buildUnicastGoalStateByte(unicastGoalState));\n+\n+            LOG.info(\"Send unicastGoalStates to topic:{} success, \" +\n+                    \"unicastGoalStates: {}\", nextTopic, unicastGoalState);\n+        }\n+\n+        List<Goalstateprovisioner.GoalStateOperationReply.GoalStateOperationStatus> tempList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0OTIyMg==", "bodyText": "This basically converts UnicastGoalState to UnicastGoalStateByte. Can we define it inside the class of UnicastGoalState?", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r526649222", "createdAt": "2020-11-19T07:37:51Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/DataPlaneClientImpl.java", "diffHunk": "@@ -18,24 +18,151 @@\n import com.futurewei.alcor.dataplane.client.DataPlaneClient;\n import com.futurewei.alcor.dataplane.entity.MulticastGoalState;\n import com.futurewei.alcor.dataplane.entity.UnicastGoalState;\n+import com.futurewei.alcor.dataplane.exception.GroupTopicNotFound;\n+import com.futurewei.alcor.dataplane.exception.MulticastTopicNotFound;\n import com.futurewei.alcor.schema.Goalstate;\n import com.futurewei.alcor.schema.Goalstateprovisioner;\n+import com.futurewei.alcor.web.entity.dataplane.MulticastGoalStateByte;\n+import com.futurewei.alcor.web.entity.dataplane.UnicastGoalStateByte;\n+\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.impl.schema.JSONSchema;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n //@Component\n public class DataPlaneClientImpl implements DataPlaneClient {\n+    private static final Logger LOG = LoggerFactory.getLogger(DataPlaneClientImpl.class);\n+\n+    @Autowired\n+    private PulsarClient pulsarClient;\n+\n+    @Autowired\n+    private TopicManager topicManager;\n \n     @Override\n     public Map<String, List<Goalstateprovisioner.GoalStateOperationReply.GoalStateOperationStatus>> createGoalStates(Goalstate.GoalState goalState, String hostIp) throws Exception {\n         return null;\n     }\n \n+    private UnicastGoalStateByte buildUnicastGoalStateByte(UnicastGoalState unicastGoalState) {\n+        UnicastGoalStateByte unicastGoalStateByte = new UnicastGoalStateByte();\n+        unicastGoalStateByte.setNextTopic(unicastGoalState.getNextTopic());\n+        unicastGoalStateByte.setGoalStateByte(unicastGoalState.getGoalState().toByteArray());\n+\n+        return unicastGoalStateByte;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d59d4fc4e1260f10eb5c5b57af6b2a3124d41993", "author": {"user": {"login": "VanderChen", "name": "Min Chen"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/d59d4fc4e1260f10eb5c5b57af6b2a3124d41993", "committedDate": "2020-11-26T13:36:49Z", "message": "Enable gRPC and Pulsar client. Fix part of comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cebaba7ae415ed9ba71add1034eccf4bb6699004", "author": {"user": {"login": "VanderChen", "name": "Min Chen"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/cebaba7ae415ed9ba71add1034eccf4bb6699004", "committedDate": "2020-11-27T02:07:55Z", "message": "Add filed to decide client for createPort"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5Njg1NjIz", "url": "https://github.com/futurewei-cloud/alcor/pull/481#pullrequestreview-539685623", "createdAt": "2020-11-27T03:13:21Z", "commit": {"oid": "cebaba7ae415ed9ba71add1034eccf4bb6699004"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMzoxMzoyMVrOH6vv_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMzoxMzoyMVrOH6vv_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM2MTc4OA==", "bodyText": "I have a question about this. Will there be different isFastPath values in multiple portEntity? How to deal with this situation.", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r531361788", "createdAt": "2020-11-27T03:13:21Z", "author": {"login": "VanderChen"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/ovs/DataPlaneServiceImpl.java", "diffHunk": "@@ -557,12 +557,11 @@ private UnicastGoalState buildUnicastGoalState(NetworkConfiguration networkConfi\n         multicastGoalState.setGoalState(multicastGoalState.getGoalStateBuilder().build());\n         multicastGoalState.setGoalStateBuilder(null);\n \n-        // TODO: Find a field to decide client\n-        if (true){\n-            return pulsarDataPlaneClient.createGoalStates(unicastGoalStates, multicastGoalState);\n+        if (networkConfig.getPortEntities().get(0).isFastPath()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebaba7ae415ed9ba71add1034eccf4bb6699004"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b92ec05eccb3fdf2f7284a466f2f12b64c1ada52", "author": {"user": {"login": "VanderChen", "name": "Min Chen"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b92ec05eccb3fdf2f7284a466f2f12b64c1ada52", "committedDate": "2020-11-27T13:09:06Z", "message": "Add consumer in UT test. Fix comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "645608c7066c42dc5553cc868558633ecbda9605", "author": {"user": {"login": "VanderChen", "name": "Min Chen"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/645608c7066c42dc5553cc868558633ecbda9605", "committedDate": "2020-11-29T08:22:36Z", "message": "Enable port-level isFastPath client choice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55a5ee27759124bee9664ef0973274089ed14d66", "author": {"user": {"login": "VanderChen", "name": "Min Chen"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/55a5ee27759124bee9664ef0973274089ed14d66", "committedDate": "2020-11-30T07:13:45Z", "message": "Encapsulate repeated code segments as a function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d84f3db77cc453eea2412d4d6a929b0e0c752a38", "author": {"user": {"login": "VanderChen", "name": "Min Chen"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/d84f3db77cc453eea2412d4d6a929b0e0c752a38", "committedDate": "2020-11-30T07:42:04Z", "message": "Change function name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0882ced771d52990c5abaef53479906e109265a", "author": {"user": {"login": "VanderChen", "name": "Min Chen"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/e0882ced771d52990c5abaef53479906e109265a", "committedDate": "2020-11-30T07:49:44Z", "message": "Fix bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b1a466995636e0243d539e5bb0323a5d522a9d9", "author": {"user": {"login": "VanderChen", "name": "Min Chen"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/3b1a466995636e0243d539e5bb0323a5d522a9d9", "committedDate": "2020-11-30T07:53:10Z", "message": "Merge branch 'master' into dpm"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNjgwMzA5", "url": "https://github.com/futurewei-cloud/alcor/pull/481#pullrequestreview-540680309", "createdAt": "2020-11-30T08:21:55Z", "commit": {"oid": "3b1a466995636e0243d539e5bb0323a5d522a9d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTUxOTY1", "url": "https://github.com/futurewei-cloud/alcor/pull/481#pullrequestreview-541151965", "createdAt": "2020-11-30T17:51:29Z", "commit": {"oid": "3b1a466995636e0243d539e5bb0323a5d522a9d9"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo1MToyOVrOH8Gt0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowMDoxOFrOH8JQsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NjY0Mw==", "bodyText": "Like this method abstraction and its renaming!", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r532786643", "createdAt": "2020-11-30T17:51:29Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/ovs/DataPlaneServiceImpl.java", "diffHunk": "@@ -517,24 +522,13 @@ private UnicastGoalState buildUnicastGoalState(NetworkConfiguration networkConfi\n         return unicastGoalState;\n     }\n \n-    private List<Map<String, List<GoalStateOperationStatus>>> createPortConfiguration(NetworkConfiguration networkConfig) throws Exception {\n+    private List<Map<String, List<GoalStateOperationStatus>>> doCreatePortConfiguration(NetworkConfiguration networkConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1a466995636e0243d539e5bb0323a5d522a9d9"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxOTUyMQ==", "bodyText": "@VanderChen I was wondering how the function-deploy.sh gets triggered.", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r532819521", "createdAt": "2020-11-30T18:45:31Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/function/function-deploy.sh", "diffHunk": "@@ -0,0 +1,15 @@\n+pulsar-admin functions create \\\n+--jar target/dataplanemanager-0.1.0-SNAPSHOT.jar \\\n+--classname com.futurewei.alcor.dataplane.client.pulsar.function.UnicastFunction \\\n+--tenant public --namespace default \\\n+--name unicast-function \\\n+--inputs persistent://public/default/unicast-topic1 \\\n+--output persistent://public/default/group-topic1\n+\n+pulsar-admin functions create \\\n+--jar target/dataplanemanager-0.1.0-SNAPSHOT.jar \\\n+--classname com.futurewei.alcor.dataplane.client.pulsar.MulticastFunction \\\n+--tenant public --namespace default \\\n+--name multicast-function \\\n+--inputs persistent://public/default/multicast-topic1 \\\n+--output persistent://public/default/group-topic1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1a466995636e0243d539e5bb0323a5d522a9d9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyMTI3NQ==", "bodyText": "Saw the change in grpc/DataPlaneClientImpl to make the client as a service.", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r532821275", "createdAt": "2020-11-30T18:48:29Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/DataPlaneClientImpl.java", "diffHunk": "@@ -18,24 +18,151 @@\n import com.futurewei.alcor.dataplane.client.DataPlaneClient;\n import com.futurewei.alcor.dataplane.entity.MulticastGoalState;\n import com.futurewei.alcor.dataplane.entity.UnicastGoalState;\n+import com.futurewei.alcor.dataplane.exception.GroupTopicNotFound;\n+import com.futurewei.alcor.dataplane.exception.MulticastTopicNotFound;\n import com.futurewei.alcor.schema.Goalstate;\n import com.futurewei.alcor.schema.Goalstateprovisioner;\n+import com.futurewei.alcor.web.entity.dataplane.MulticastGoalStateByte;\n+import com.futurewei.alcor.web.entity.dataplane.UnicastGoalStateByte;\n+\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.impl.schema.JSONSchema;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n //@Component", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzNjAzMA=="}, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyMzcxMw==", "bodyText": "Create a tracking issue #489 @chenpiaoping", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r532823713", "createdAt": "2020-11-30T18:52:33Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/DataPlaneClientImpl.java", "diffHunk": "@@ -18,24 +18,151 @@\n import com.futurewei.alcor.dataplane.client.DataPlaneClient;\n import com.futurewei.alcor.dataplane.entity.MulticastGoalState;\n import com.futurewei.alcor.dataplane.entity.UnicastGoalState;\n+import com.futurewei.alcor.dataplane.exception.GroupTopicNotFound;\n+import com.futurewei.alcor.dataplane.exception.MulticastTopicNotFound;\n import com.futurewei.alcor.schema.Goalstate;\n import com.futurewei.alcor.schema.Goalstateprovisioner;\n+import com.futurewei.alcor.web.entity.dataplane.MulticastGoalStateByte;\n+import com.futurewei.alcor.web.entity.dataplane.UnicastGoalStateByte;\n+\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.impl.schema.JSONSchema;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n //@Component\n public class DataPlaneClientImpl implements DataPlaneClient {\n+    private static final Logger LOG = LoggerFactory.getLogger(DataPlaneClientImpl.class);\n+\n+    @Autowired\n+    private PulsarClient pulsarClient;\n+\n+    @Autowired\n+    private TopicManager topicManager;\n \n     @Override\n     public Map<String, List<Goalstateprovisioner.GoalStateOperationReply.GoalStateOperationStatus>> createGoalStates(Goalstate.GoalState goalState, String hostIp) throws Exception {\n         return null;\n     }\n \n+    private UnicastGoalStateByte buildUnicastGoalStateByte(UnicastGoalState unicastGoalState) {\n+        UnicastGoalStateByte unicastGoalStateByte = new UnicastGoalStateByte();\n+        unicastGoalStateByte.setNextTopic(unicastGoalState.getNextTopic());\n+        unicastGoalStateByte.setGoalStateByte(unicastGoalState.getGoalState().toByteArray());\n+\n+        return unicastGoalStateByte;\n+    }\n+\n+    private List<String> getGroupTopics(List<String> hostIps) throws Exception {\n+        List<String> groupTopics = new ArrayList<>();\n+\n+        for (String hostIp: hostIps) {\n+            String groupTopic = topicManager.getGroupTopicByHostIp(hostIp);\n+            if (StringUtils.isEmpty(groupTopic)) {\n+                LOG.error(\"Can not find group topic by host ip:{}\", hostIp);\n+                throw new GroupTopicNotFound();\n+            }\n+\n+            groupTopics.add(groupTopic);\n+        }\n+\n+        return groupTopics;\n+    }\n+\n+    private Map<String, List<String>> getMulticastTopics(List<String> hostIps) throws Exception {\n+        Map<String, List<String>> multicastTopics = new HashMap<>();\n+\n+        List<String> groupTopics = this.getGroupTopics(hostIps);\n+        for (String groupTopic: groupTopics) {\n+            String multicastTopic = topicManager.getMulticastTopicByGroupTopic(groupTopic);\n+            if (StringUtils.isEmpty(multicastTopic)) {\n+                LOG.error(\"Can not find multicast topic by group topic:{}\", groupTopic);\n+                throw new MulticastTopicNotFound();\n+            }\n+\n+            if (!multicastTopics.containsKey(multicastTopic)) {\n+                multicastTopics.put(multicastTopic, new ArrayList<>());\n+            }\n+\n+            multicastTopics.get(multicastTopic).add(groupTopic);\n+        }\n+\n+        return multicastTopics;\n+    }\n+\n+    private MulticastGoalStateByte buildMulticastGoalStateByte(MulticastGoalState multicastGoalState) {\n+        MulticastGoalStateByte multicastGoalStateByte = new MulticastGoalStateByte();\n+        multicastGoalStateByte.setNextTopics(multicastGoalState.getNextTopics());\n+        multicastGoalStateByte.setGoalStateByte(multicastGoalState.getGoalState().toByteArray());\n+\n+        return multicastGoalStateByte;\n+    }\n+\n+    private void createGoalState(MulticastGoalState multicastGoalState) throws Exception {\n+        Map<String, List<String>> multicastTopics = getMulticastTopics(multicastGoalState.getHostIps());\n+\n+        for (Map.Entry<String, List<String>> entry: multicastTopics.entrySet()) {\n+            String multicastTopic = entry.getKey();\n+            List<String> groupTopics = entry.getValue();\n+\n+            multicastGoalState.setNextTopics(groupTopics);\n+\n+            Producer<MulticastGoalStateByte> producer = pulsarClient\n+                    .newProducer(JSONSchema.of(MulticastGoalStateByte.class))\n+                    .topic(multicastTopic)\n+                    .enableBatching(false)\n+                    .create();\n+\n+            producer.send(buildMulticastGoalStateByte(multicastGoalState));\n+\n+            LOG.info(\"Send multicastGoalState to topic:{} success, \" +\n+                            \"groupTopics: {}, unicastGoalStates: {}\",\n+                    multicastTopic, groupTopics, multicastGoalState);\n+        }\n+    }\n+\n     @Override\n     public List<Map<String, List<Goalstateprovisioner.GoalStateOperationReply.GoalStateOperationStatus>>> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception {\n-        return null;\n+        for (UnicastGoalState unicastGoalState: unicastGoalStates) {\n+            String nextTopic = topicManager.getGroupTopicByHostIp(unicastGoalState.getHostIp());\n+            if (StringUtils.isEmpty(nextTopic)) {\n+                LOG.error(\"Can not find next topic by host ip:{}\", unicastGoalState.getHostIp());\n+                throw new GroupTopicNotFound();\n+            }\n+\n+            String topic = nextTopic;\n+            String unicastTopic = topicManager.getUnicastTopic();\n+            if (!StringUtils.isEmpty(unicastTopic)) {\n+                unicastGoalState.setNextTopic(nextTopic);\n+                topic = unicastTopic;\n+            }\n+\n+            Producer<UnicastGoalStateByte> producer = pulsarClient\n+                    .newProducer(JSONSchema.of(UnicastGoalStateByte.class))\n+                    .topic(topic)\n+                    .enableBatching(false)\n+                    .create();\n+            producer.send(buildUnicastGoalStateByte(unicastGoalState));\n+\n+            LOG.info(\"Send unicastGoalStates to topic:{} success, \" +\n+                    \"unicastGoalStates: {}\", nextTopic, unicastGoalState);\n+        }\n+\n+        List<Goalstateprovisioner.GoalStateOperationReply.GoalStateOperationStatus> tempList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0NzMyMA=="}, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyODMzOA==", "bodyText": "Create a tracking issue #490\n@VanderChen If you can take this item, that would be great. Let us sync on Slack for more details.", "url": "https://github.com/futurewei-cloud/alcor/pull/481#discussion_r532828338", "createdAt": "2020-11-30T19:00:18Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/resources/application.properties", "diffHunk": "@@ -13,3 +13,10 @@ grpc.threads-pool-name = grpc-thread-pool\n #logging.level.root=INFO\n \n \n+mq.type=pulsar\n+#####Pulsar configuration#####\n+pulsar.url=pulsar://127.0.0.1:6650\n+pulsar.unicast.topic=unicast-topic1\n+host.ip.to.group.topic.map=group-topic1:192.168.131.131,10.10.10.11 group-topic2:192.168.131.131,11.11.11.12", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzOTA2Ng=="}, "originalCommit": {"oid": "ddf8f06693f047aebd64f19903e5d765bfaa89e8"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2035, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}