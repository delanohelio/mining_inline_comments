{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMjM3MTMw", "number": 154, "reviewThreads": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozMDowMlrODw1tjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxMTo0OVrOD1aJkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTM4MjU0OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/pom.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozMDowMlrOGEDtHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMToxOTo0NVrOGGL8lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODE5MQ==", "bodyText": "I think we should remove most of the dependencies in this pom file.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r406908191", "createdAt": "2020-04-10T19:30:02Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/pom.xml", "diffHunk": "@@ -0,0 +1,217 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>SubnetManager</artifactId>\n+    <version>0.1.0-SNAPSHOT</version>\n+    <name>AlcorSubnetManager</name>\n+    <description>AlcorSubnet</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+        <maven.compiler.source>1.7</maven.compiler.source>\n+        <maven.compiler.target>1.7</maven.compiler.target>\n+        <asciidoctor-plugin.version>1.5.6</asciidoctor-plugin.version>\n+        <snippets>${project.basedir}/target/generated-snippets/</snippets>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-actuator</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-redis</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka-clients</artifactId>\n+            <version>2.3.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.protobuf</groupId>\n+            <artifactId>protobuf-java</artifactId>\n+            <version>3.8.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <version>1.18.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>mysql</groupId>\n+            <artifactId>mysql-connector-java</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a5da46bc6110e0039c7c0e82a88cc51d6d86e1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNTkyOQ==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408315929", "createdAt": "2020-04-14T17:36:50Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/pom.xml", "diffHunk": "@@ -0,0 +1,217 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>SubnetManager</artifactId>\n+    <version>0.1.0-SNAPSHOT</version>\n+    <name>AlcorSubnetManager</name>\n+    <description>AlcorSubnet</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+        <maven.compiler.source>1.7</maven.compiler.source>\n+        <maven.compiler.target>1.7</maven.compiler.target>\n+        <asciidoctor-plugin.version>1.5.6</asciidoctor-plugin.version>\n+        <snippets>${project.basedir}/target/generated-snippets/</snippets>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-actuator</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-redis</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka-clients</artifactId>\n+            <version>2.3.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.protobuf</groupId>\n+            <artifactId>protobuf-java</artifactId>\n+            <version>3.8.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <version>1.18.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>mysql</groupId>\n+            <artifactId>mysql-connector-java</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODE5MQ=="}, "originalCommit": {"oid": "f9a5da46bc6110e0039c7c0e82a88cc51d6d86e1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzOTI5NQ==", "bodyText": "If we haven't cleaned up the dependencies, here is an example of a clean pom: https://github.com/futurewei-cloud/alcor/pull/164/files#diff-7b4475d284b9ffe96a9f7dd20be9f3d3", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r409139295", "createdAt": "2020-04-15T21:17:31Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/pom.xml", "diffHunk": "@@ -0,0 +1,217 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>SubnetManager</artifactId>\n+    <version>0.1.0-SNAPSHOT</version>\n+    <name>AlcorSubnetManager</name>\n+    <description>AlcorSubnet</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+        <maven.compiler.source>1.7</maven.compiler.source>\n+        <maven.compiler.target>1.7</maven.compiler.target>\n+        <asciidoctor-plugin.version>1.5.6</asciidoctor-plugin.version>\n+        <snippets>${project.basedir}/target/generated-snippets/</snippets>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-actuator</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-redis</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka-clients</artifactId>\n+            <version>2.3.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.protobuf</groupId>\n+            <artifactId>protobuf-java</artifactId>\n+            <version>3.8.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <version>1.18.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>mysql</groupId>\n+            <artifactId>mysql-connector-java</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODE5MQ=="}, "originalCommit": {"oid": "f9a5da46bc6110e0039c7c0e82a88cc51d6d86e1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0MDM3Mw==", "bodyText": "Also can we clean pom file in VpcManager and RouteManager as well? The dependencies should be very similar for these managers.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r409140373", "createdAt": "2020-04-15T21:19:45Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/pom.xml", "diffHunk": "@@ -0,0 +1,217 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>SubnetManager</artifactId>\n+    <version>0.1.0-SNAPSHOT</version>\n+    <name>AlcorSubnetManager</name>\n+    <description>AlcorSubnet</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+        <maven.compiler.source>1.7</maven.compiler.source>\n+        <maven.compiler.target>1.7</maven.compiler.target>\n+        <asciidoctor-plugin.version>1.5.6</asciidoctor-plugin.version>\n+        <snippets>${project.basedir}/target/generated-snippets/</snippets>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-actuator</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-redis</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka-clients</artifactId>\n+            <version>2.3.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.protobuf</groupId>\n+            <artifactId>protobuf-java</artifactId>\n+            <version>3.8.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <version>1.18.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>mysql</groupId>\n+            <artifactId>mysql-connector-java</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODE5MQ=="}, "originalCommit": {"oid": "f9a5da46bc6110e0039c7c0e82a88cc51d6d86e1"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTM4MzE3OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/config/ControllerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozMDoyNFrOGEDtjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozMzo0NFrOGFZg_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODMwMQ==", "bodyText": "Can we remove this file if not necessary?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r406908301", "createdAt": "2020-04-10T19:30:24Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/config/ControllerConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.config;\n+\n+public class ControllerConfig {\n+\n+    public static String projectId = \"3dda2801-d675-4688-a63f-dcda8d327f50\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a5da46bc6110e0039c7c0e82a88cc51d6d86e1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNDExMQ==", "bodyText": "Yeah you are right.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408314111", "createdAt": "2020-04-14T17:33:44Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/config/ControllerConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.config;\n+\n+public class ControllerConfig {\n+\n+    public static String projectId = \"3dda2801-d675-4688-a63f-dcda8d327f50\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODMwMQ=="}, "originalCommit": {"oid": "f9a5da46bc6110e0039c7c0e82a88cc51d6d86e1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTM4NDgwOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/DebugController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozMToxNFrOGEDulQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTo1NTozNVrOGFViWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODU2NQ==", "bodyText": "Is this controller necessary for SubnetManager? Please clean up codes which are not needed.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r406908565", "createdAt": "2020-04-10T19:31:14Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/DebugController.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a5da46bc6110e0039c7c0e82a88cc51d6d86e1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0ODkyMA==", "bodyText": "\"Git pull upstream master\" resolved the problem.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408248920", "createdAt": "2020-04-14T15:55:35Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/DebugController.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODU2NQ=="}, "originalCommit": {"oid": "f9a5da46bc6110e0039c7c0e82a88cc51d6d86e1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDU3MTIzOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/config/RedisConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowMzozNFrOGFV5Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxNjowNVrOGFY1WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NDc0Mw==", "bodyText": "Do we need a dedicated RedisConfiguration file every microservice, or could share one file in the /lib folder?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408254743", "createdAt": "2020-04-14T16:03:34Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/config/RedisConfiguration.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.config;\n+\n+import com.futurewei.alcor.common.service.RedisListener;\n+import com.futurewei.alcor.subnet.entity.SubnetState;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.redis.connection.RedisStandaloneConfiguration;\n+import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.listener.ChannelTopic;\n+import org.springframework.data.redis.listener.RedisMessageListenerContainer;\n+import org.springframework.data.redis.listener.adapter.MessageListenerAdapter;\n+import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n+import org.springframework.data.redis.serializer.StringRedisSerializer;\n+\n+@Configuration\n+@ComponentScan({\"com.futurewei.alcor.subnet.service\", \"com.futurewei.alcor.common.service\"})\n+@EntityScan({\"com.futurewei.alcor.subnet.entity}\", \"com.futurewei.alcor.common.entity\"})\n+public class RedisConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3NTg2MA==", "bodyText": "I think it is better to keep it in every microservce because they have different redis-host and redis-post", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408275860", "createdAt": "2020-04-14T16:33:45Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/config/RedisConfiguration.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.config;\n+\n+import com.futurewei.alcor.common.service.RedisListener;\n+import com.futurewei.alcor.subnet.entity.SubnetState;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.redis.connection.RedisStandaloneConfiguration;\n+import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.listener.ChannelTopic;\n+import org.springframework.data.redis.listener.RedisMessageListenerContainer;\n+import org.springframework.data.redis.listener.adapter.MessageListenerAdapter;\n+import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n+import org.springframework.data.redis.serializer.StringRedisSerializer;\n+\n+@Configuration\n+@ComponentScan({\"com.futurewei.alcor.subnet.service\", \"com.futurewei.alcor.common.service\"})\n+@EntityScan({\"com.futurewei.alcor.subnet.entity}\", \"com.futurewei.alcor.common.entity\"})\n+public class RedisConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NDc0Mw=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwMjkzNw==", "bodyText": "Got it thanks", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408302937", "createdAt": "2020-04-14T17:16:05Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/config/RedisConfiguration.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.config;\n+\n+import com.futurewei.alcor.common.service.RedisListener;\n+import com.futurewei.alcor.subnet.entity.SubnetState;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.redis.connection.RedisStandaloneConfiguration;\n+import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.listener.ChannelTopic;\n+import org.springframework.data.redis.listener.RedisMessageListenerContainer;\n+import org.springframework.data.redis.listener.adapter.MessageListenerAdapter;\n+import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n+import org.springframework.data.redis.serializer.StringRedisSerializer;\n+\n+@Configuration\n+@ComponentScan({\"com.futurewei.alcor.subnet.service\", \"com.futurewei.alcor.common.service\"})\n+@EntityScan({\"com.futurewei.alcor.subnet.entity}\", \"com.futurewei.alcor.common.entity\"})\n+public class RedisConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NDc0Mw=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDU3MzgwOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/DebugController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowNDowNVrOGFV6rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozNDoxM1rOGFXM7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTE1MQ==", "bodyText": "We should remove this file too.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408255151", "createdAt": "2020-04-14T16:04:05Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/DebugController.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.subnet.dao.SubnetRedisRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+\n+@RestController\n+public class DebugController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3NjIwNA==", "bodyText": "Sure ~", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408276204", "createdAt": "2020-04-14T16:34:13Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/DebugController.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.subnet.dao.SubnetRedisRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+\n+@RestController\n+public class DebugController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTE1MQ=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDU4MzMwOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowNjoxNVrOGFWAow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozNjo1MlrOGFXTfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NjY3NQ==", "bodyText": "Suggest to use \"createRouteRules\"", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408256675", "createdAt": "2020-04-14T16:06:15Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Prepare Route Rule(IPv4/6) for Subnet\n+            RouteWebJson routeResponse = this.subnetService.prepeareRouteRule(inSubnetState.getVpcId(), vpcResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3Nzg4NA==", "bodyText": "Yes, this is easier to understand", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408277884", "createdAt": "2020-04-14T16:36:52Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Prepare Route Rule(IPv4/6) for Subnet\n+            RouteWebJson routeResponse = this.subnetService.prepeareRouteRule(inSubnetState.getVpcId(), vpcResponse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NjY3NQ=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDU4NzMwOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowNzoxNlrOGFWDYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxNzo1M1rOGFY55A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NzM3OA==", "bodyText": "Why vcResponse = ResourcePersistence?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408257378", "createdAt": "2020-04-14T16:07:16Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new ResourcePersistenceException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1ODc1OQ==", "bodyText": "You might want to throw a more specific exception for the case of \"vpc doesn't exist\"?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408258759", "createdAt": "2020-04-14T16:09:10Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new ResourcePersistenceException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NzM3OA=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4OTMzOQ==", "bodyText": "At the beginning, I set it to a specific exception because UTs are convenient for testing. Now I make it throw new Exception()", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408289339", "createdAt": "2020-04-14T16:54:22Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new ResourcePersistenceException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NzM3OA=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwNDEwMA==", "bodyText": "a new generic Exception? I don't think you want to do that as you can't tell which block of codes threw the exception.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408304100", "createdAt": "2020-04-14T17:17:53Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new ResourcePersistenceException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NzM3OA=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDU4ODk5OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowNzo0MFrOGFWEbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxOToxM1rOGFY9VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NzY0NA==", "bodyText": "Which operation will throw ResourceNullException?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408257644", "createdAt": "2020-04-14T16:07:40Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Prepare Route Rule(IPv4/6) for Subnet\n+            RouteWebJson routeResponse = this.subnetService.prepeareRouteRule(inSubnetState.getVpcId(), vpcResponse);\n+            if (routeResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Allocate Gateway Mac\n+//            MacState macState = new MacState();\n+//            String portId = UUID.randomUUID().toString();\n+//            macState.setProjectId(projectid);\n+//            macState.setPortId(portId);\n+//            macState.setVpcId(inSubnetState.getVpcId());\n+//\n+//            HttpEntity<MacStateJson> macRequest = new HttpEntity<>(new MacStateJson(macState));\n+//            MacStateJson macResponse = restTemplate.postForObject(macUrl, macRequest, MacStateJson.class);\n+//            if (macResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n+//            IPState ipState = new IPState();\n+//            ipState.setSubnetId(inSubnetState.getId());\n+//            ipState.setPortId(portId);\n+//            ipState.setSubnetCidr(inSubnetState.getCidr());\n+//\n+//            String ipManagerServiceUrl = ipUrl + inSubnetState.getId() + \"/routes\"; // for kubernetes test\n+//            HttpEntity<IPStateJson> ipRequest = new HttpEntity<>(new IPStateJson(ipState));\n+//            IPStateJson ipResponse = restTemplate.postForObject(ipManagerServiceUrl, ipRequest, IPStateJson.class);\n+//            if (ipResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // set up value of properties for subnetState\n+            List<RouteWebObject> routes = subnetState.getRoutes();\n+            if (routes == null) {\n+                routes = new ArrayList<>();\n+            }\n+            routes.add(routeResponse.getRoute());\n+            subnetState.setRoutes(routes);\n+            //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n+\n+        } catch (ResourceNullException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4OTU1OQ==", "bodyText": "There also change to Exception", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408289559", "createdAt": "2020-04-14T16:54:43Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Prepare Route Rule(IPv4/6) for Subnet\n+            RouteWebJson routeResponse = this.subnetService.prepeareRouteRule(inSubnetState.getVpcId(), vpcResponse);\n+            if (routeResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Allocate Gateway Mac\n+//            MacState macState = new MacState();\n+//            String portId = UUID.randomUUID().toString();\n+//            macState.setProjectId(projectid);\n+//            macState.setPortId(portId);\n+//            macState.setVpcId(inSubnetState.getVpcId());\n+//\n+//            HttpEntity<MacStateJson> macRequest = new HttpEntity<>(new MacStateJson(macState));\n+//            MacStateJson macResponse = restTemplate.postForObject(macUrl, macRequest, MacStateJson.class);\n+//            if (macResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n+//            IPState ipState = new IPState();\n+//            ipState.setSubnetId(inSubnetState.getId());\n+//            ipState.setPortId(portId);\n+//            ipState.setSubnetCidr(inSubnetState.getCidr());\n+//\n+//            String ipManagerServiceUrl = ipUrl + inSubnetState.getId() + \"/routes\"; // for kubernetes test\n+//            HttpEntity<IPStateJson> ipRequest = new HttpEntity<>(new IPStateJson(ipState));\n+//            IPStateJson ipResponse = restTemplate.postForObject(ipManagerServiceUrl, ipRequest, IPStateJson.class);\n+//            if (ipResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // set up value of properties for subnetState\n+            List<RouteWebObject> routes = subnetState.getRoutes();\n+            if (routes == null) {\n+                routes = new ArrayList<>();\n+            }\n+            routes.add(routeResponse.getRoute());\n+            subnetState.setRoutes(routes);\n+            //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n+\n+        } catch (ResourceNullException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NzY0NA=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwNDk4MA==", "bodyText": "Same rational as above. You want to a specific exception, with better name than \"ResourceNullException\", maybe \"VpcNotExistException\"", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408304980", "createdAt": "2020-04-14T17:19:13Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Prepare Route Rule(IPv4/6) for Subnet\n+            RouteWebJson routeResponse = this.subnetService.prepeareRouteRule(inSubnetState.getVpcId(), vpcResponse);\n+            if (routeResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Allocate Gateway Mac\n+//            MacState macState = new MacState();\n+//            String portId = UUID.randomUUID().toString();\n+//            macState.setProjectId(projectid);\n+//            macState.setPortId(portId);\n+//            macState.setVpcId(inSubnetState.getVpcId());\n+//\n+//            HttpEntity<MacStateJson> macRequest = new HttpEntity<>(new MacStateJson(macState));\n+//            MacStateJson macResponse = restTemplate.postForObject(macUrl, macRequest, MacStateJson.class);\n+//            if (macResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n+//            IPState ipState = new IPState();\n+//            ipState.setSubnetId(inSubnetState.getId());\n+//            ipState.setPortId(portId);\n+//            ipState.setSubnetCidr(inSubnetState.getCidr());\n+//\n+//            String ipManagerServiceUrl = ipUrl + inSubnetState.getId() + \"/routes\"; // for kubernetes test\n+//            HttpEntity<IPStateJson> ipRequest = new HttpEntity<>(new IPStateJson(ipState));\n+//            IPStateJson ipResponse = restTemplate.postForObject(ipManagerServiceUrl, ipRequest, IPStateJson.class);\n+//            if (ipResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // set up value of properties for subnetState\n+            List<RouteWebObject> routes = subnetState.getRoutes();\n+            if (routes == null) {\n+                routes = new ArrayList<>();\n+            }\n+            routes.add(routeResponse.getRoute());\n+            subnetState.setRoutes(routes);\n+            //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n+\n+        } catch (ResourceNullException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NzY0NA=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDYwNjMxOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxMTo0M1rOGFWPkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoyMDo0M1rOGFZA8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MDQ5OQ==", "bodyText": "Do we need to call other microservices here?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408260499", "createdAt": "2020-04-14T16:11:43Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Prepare Route Rule(IPv4/6) for Subnet\n+            RouteWebJson routeResponse = this.subnetService.prepeareRouteRule(inSubnetState.getVpcId(), vpcResponse);\n+            if (routeResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Allocate Gateway Mac\n+//            MacState macState = new MacState();\n+//            String portId = UUID.randomUUID().toString();\n+//            macState.setProjectId(projectid);\n+//            macState.setPortId(portId);\n+//            macState.setVpcId(inSubnetState.getVpcId());\n+//\n+//            HttpEntity<MacStateJson> macRequest = new HttpEntity<>(new MacStateJson(macState));\n+//            MacStateJson macResponse = restTemplate.postForObject(macUrl, macRequest, MacStateJson.class);\n+//            if (macResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n+//            IPState ipState = new IPState();\n+//            ipState.setSubnetId(inSubnetState.getId());\n+//            ipState.setPortId(portId);\n+//            ipState.setSubnetCidr(inSubnetState.getCidr());\n+//\n+//            String ipManagerServiceUrl = ipUrl + inSubnetState.getId() + \"/routes\"; // for kubernetes test\n+//            HttpEntity<IPStateJson> ipRequest = new HttpEntity<>(new IPStateJson(ipState));\n+//            IPStateJson ipResponse = restTemplate.postForObject(ipManagerServiceUrl, ipRequest, IPStateJson.class);\n+//            if (ipResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // set up value of properties for subnetState\n+            List<RouteWebObject> routes = subnetState.getRoutes();\n+            if (routes == null) {\n+                routes = new ArrayList<>();\n+            }\n+            routes.add(routeResponse.getRoute());\n+            subnetState.setRoutes(routes);\n+            //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n+\n+        } catch (ResourceNullException e) {\n+            // Route info of subnet rollback\n+            List<RouteWebObject> routes = resource.getSubnet().getRoutes();\n+            if (routes != null) {\n+                RouteWebObject route = routes.get(routes.size() - 1);\n+                this.subnetService.routeRollback(route.getId(), resource.getSubnet().getVpcId());\n+            }\n+            throw new Exception(e);\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/subnets/{subnetid}\", \"v4/{projectid}/vpcs/{vpcid}/subnets/{subnetid}\"})\n+    public SubnetStateJson updateSubnetState(@PathVariable String projectid, @PathVariable String vpcid, @PathVariable String subnetid, @RequestBody SubnetStateJson resource) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetid);\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceNotNull(inSubnetState);\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+            RestPreconditionsUtil.populateResourceVpcId(inSubnetState, vpcid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetid);\n+            if (subnetState == null) {\n+                throw new ResourceNotFoundException(\"Subnet not found : \" + subnetid);\n+            }\n+\n+            RestPreconditionsUtil.verifyParameterEqual(subnetState.getProjectId(), projectid);\n+            RestPreconditionsUtil.verifyParameterEqual(subnetState.getVpcId(), vpcid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5NzU0Mw==", "bodyText": "I don't think so, I will add a new UT to test it.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408297543", "createdAt": "2020-04-14T17:07:10Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Prepare Route Rule(IPv4/6) for Subnet\n+            RouteWebJson routeResponse = this.subnetService.prepeareRouteRule(inSubnetState.getVpcId(), vpcResponse);\n+            if (routeResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Allocate Gateway Mac\n+//            MacState macState = new MacState();\n+//            String portId = UUID.randomUUID().toString();\n+//            macState.setProjectId(projectid);\n+//            macState.setPortId(portId);\n+//            macState.setVpcId(inSubnetState.getVpcId());\n+//\n+//            HttpEntity<MacStateJson> macRequest = new HttpEntity<>(new MacStateJson(macState));\n+//            MacStateJson macResponse = restTemplate.postForObject(macUrl, macRequest, MacStateJson.class);\n+//            if (macResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n+//            IPState ipState = new IPState();\n+//            ipState.setSubnetId(inSubnetState.getId());\n+//            ipState.setPortId(portId);\n+//            ipState.setSubnetCidr(inSubnetState.getCidr());\n+//\n+//            String ipManagerServiceUrl = ipUrl + inSubnetState.getId() + \"/routes\"; // for kubernetes test\n+//            HttpEntity<IPStateJson> ipRequest = new HttpEntity<>(new IPStateJson(ipState));\n+//            IPStateJson ipResponse = restTemplate.postForObject(ipManagerServiceUrl, ipRequest, IPStateJson.class);\n+//            if (ipResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // set up value of properties for subnetState\n+            List<RouteWebObject> routes = subnetState.getRoutes();\n+            if (routes == null) {\n+                routes = new ArrayList<>();\n+            }\n+            routes.add(routeResponse.getRoute());\n+            subnetState.setRoutes(routes);\n+            //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n+\n+        } catch (ResourceNullException e) {\n+            // Route info of subnet rollback\n+            List<RouteWebObject> routes = resource.getSubnet().getRoutes();\n+            if (routes != null) {\n+                RouteWebObject route = routes.get(routes.size() - 1);\n+                this.subnetService.routeRollback(route.getId(), resource.getSubnet().getVpcId());\n+            }\n+            throw new Exception(e);\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/subnets/{subnetid}\", \"v4/{projectid}/vpcs/{vpcid}/subnets/{subnetid}\"})\n+    public SubnetStateJson updateSubnetState(@PathVariable String projectid, @PathVariable String vpcid, @PathVariable String subnetid, @RequestBody SubnetStateJson resource) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetid);\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceNotNull(inSubnetState);\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+            RestPreconditionsUtil.populateResourceVpcId(inSubnetState, vpcid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetid);\n+            if (subnetState == null) {\n+                throw new ResourceNotFoundException(\"Subnet not found : \" + subnetid);\n+            }\n+\n+            RestPreconditionsUtil.verifyParameterEqual(subnetState.getProjectId(), projectid);\n+            RestPreconditionsUtil.verifyParameterEqual(subnetState.getVpcId(), vpcid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MDQ5OQ=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwNTkwNA==", "bodyText": "When a customer updates a subnet, if some resources in the subnet (for example, gateway IP) are changing, we might need to call other microservices to make changes accordingly.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408305904", "createdAt": "2020-04-14T17:20:43Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Prepare Route Rule(IPv4/6) for Subnet\n+            RouteWebJson routeResponse = this.subnetService.prepeareRouteRule(inSubnetState.getVpcId(), vpcResponse);\n+            if (routeResponse == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            //Allocate Gateway Mac\n+//            MacState macState = new MacState();\n+//            String portId = UUID.randomUUID().toString();\n+//            macState.setProjectId(projectid);\n+//            macState.setPortId(portId);\n+//            macState.setVpcId(inSubnetState.getVpcId());\n+//\n+//            HttpEntity<MacStateJson> macRequest = new HttpEntity<>(new MacStateJson(macState));\n+//            MacStateJson macResponse = restTemplate.postForObject(macUrl, macRequest, MacStateJson.class);\n+//            if (macResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n+//            IPState ipState = new IPState();\n+//            ipState.setSubnetId(inSubnetState.getId());\n+//            ipState.setPortId(portId);\n+//            ipState.setSubnetCidr(inSubnetState.getCidr());\n+//\n+//            String ipManagerServiceUrl = ipUrl + inSubnetState.getId() + \"/routes\"; // for kubernetes test\n+//            HttpEntity<IPStateJson> ipRequest = new HttpEntity<>(new IPStateJson(ipState));\n+//            IPStateJson ipResponse = restTemplate.postForObject(ipManagerServiceUrl, ipRequest, IPStateJson.class);\n+//            if (ipResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // set up value of properties for subnetState\n+            List<RouteWebObject> routes = subnetState.getRoutes();\n+            if (routes == null) {\n+                routes = new ArrayList<>();\n+            }\n+            routes.add(routeResponse.getRoute());\n+            subnetState.setRoutes(routes);\n+            //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n+\n+        } catch (ResourceNullException e) {\n+            // Route info of subnet rollback\n+            List<RouteWebObject> routes = resource.getSubnet().getRoutes();\n+            if (routes != null) {\n+                RouteWebObject route = routes.get(routes.size() - 1);\n+                this.subnetService.routeRollback(route.getId(), resource.getSubnet().getVpcId());\n+            }\n+            throw new Exception(e);\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/subnets/{subnetid}\", \"v4/{projectid}/vpcs/{vpcid}/subnets/{subnetid}\"})\n+    public SubnetStateJson updateSubnetState(@PathVariable String projectid, @PathVariable String vpcid, @PathVariable String subnetid, @RequestBody SubnetStateJson resource) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetid);\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceNotNull(inSubnetState);\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+            RestPreconditionsUtil.populateResourceVpcId(inSubnetState, vpcid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetid);\n+            if (subnetState == null) {\n+                throw new ResourceNotFoundException(\"Subnet not found : \" + subnetid);\n+            }\n+\n+            RestPreconditionsUtil.verifyParameterEqual(subnetState.getProjectId(), projectid);\n+            RestPreconditionsUtil.verifyParameterEqual(subnetState.getVpcId(), vpcid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MDQ5OQ=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDYxNjUxOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/SubnetService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxMzo1OFrOGFWV8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzowNzozM1rOGFYhPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MjEzMA==", "bodyText": "Please add interface for Mac and IP manager. it is time for us to think about it.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408262130", "createdAt": "2020-04-14T16:13:58Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/SubnetService.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.futurewei.alcor.subnet.service;\n+\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.subnet.entity.RouteWebJson;\n+import com.futurewei.alcor.subnet.entity.SubnetState;\n+import com.futurewei.alcor.subnet.entity.VpcStateJson;\n+\n+public interface SubnetService {\n+\n+    // Subnet Route info Rollback\n+    public void routeRollback (String routeId, String vpcId);\n+\n+    // Verify VPC ID\n+    public VpcStateJson verifyVpcId (String projectid, String vpcId) throws ResourcePersistenceException;\n+\n+    // Prepare Route Rule(IPv4/6) for Subnet\n+    public RouteWebJson prepeareRouteRule (String vpcId, VpcStateJson vpcResponse) throws ResourcePersistenceException;\n+\n+    // TODO : Allocate Gateway Mac", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5Nzc5MQ==", "bodyText": "No problem", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408297791", "createdAt": "2020-04-14T17:07:33Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/SubnetService.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.futurewei.alcor.subnet.service;\n+\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.subnet.entity.RouteWebJson;\n+import com.futurewei.alcor.subnet.entity.SubnetState;\n+import com.futurewei.alcor.subnet.entity.VpcStateJson;\n+\n+public interface SubnetService {\n+\n+    // Subnet Route info Rollback\n+    public void routeRollback (String routeId, String vpcId);\n+\n+    // Verify VPC ID\n+    public VpcStateJson verifyVpcId (String projectid, String vpcId) throws ResourcePersistenceException;\n+\n+    // Prepare Route Rule(IPv4/6) for Subnet\n+    public RouteWebJson prepeareRouteRule (String vpcId, VpcStateJson vpcResponse) throws ResourcePersistenceException;\n+\n+    // TODO : Allocate Gateway Mac", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MjEzMA=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDYyMDczOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/RedisPublisherServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxNDo1NVrOGFWYtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo0MzozNVrOGF6WIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MjgzNg==", "bodyText": "Can you use the same one in /lib folder?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408262836", "createdAt": "2020-04-14T16:14:55Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/RedisPublisherServiceImpl.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.service.implement;\n+\n+import com.futurewei.alcor.common.repo.ICachePublisher;\n+import com.futurewei.alcor.subnet.entity.VpcState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.listener.ChannelTopic;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class RedisPublisherServiceImpl implements ICachePublisher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwOTcxMA==", "bodyText": "I dont think so, cause we need set different redisTemplate for different manager, like:\nprivate RedisTemplate<String, SubnetState> redisTemplate = new RedisTemplate<>();\nprivate RedisTemplate<String, VpcState> redisTemplate = new RedisTemplate<>();", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408309710", "createdAt": "2020-04-14T17:26:42Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/RedisPublisherServiceImpl.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.service.implement;\n+\n+import com.futurewei.alcor.common.repo.ICachePublisher;\n+import com.futurewei.alcor.subnet.entity.VpcState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.listener.ChannelTopic;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class RedisPublisherServiceImpl implements ICachePublisher {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MjgzNg=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1MjAwMQ==", "bodyText": "Okay in that case let us keep it as is.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408852001", "createdAt": "2020-04-15T13:43:35Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/RedisPublisherServiceImpl.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.service.implement;\n+\n+import com.futurewei.alcor.common.repo.ICachePublisher;\n+import com.futurewei.alcor.subnet.entity.VpcState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.listener.ChannelTopic;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class RedisPublisherServiceImpl implements ICachePublisher {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MjgzNg=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDYyODM3OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxNjo0M1rOGFWdaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoyNzowM1rOGFZQog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NDA0MA==", "bodyText": "Like the UTs. This is a very good start. Keep going :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408264040", "createdAt": "2020-04-14T16:16:43Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package com.futurewei.alcor.subnet;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.junit.Assert.*;\n+\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.subnet.config.UnitTestConfig;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+@RunWith(SpringRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwOTkyMg==", "bodyText": "Thanks so much for your help !", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408309922", "createdAt": "2020-04-14T17:27:03Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTest.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package com.futurewei.alcor.subnet;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.junit.Assert.*;\n+\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.subnet.config.UnitTestConfig;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+@RunWith(SpringRunner.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NDA0MA=="}, "originalCommit": {"oid": "4d24063119fa0c59051cda61c356346d4d89b7eb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODM3NzIwOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo0NDo0OVrOGF6Z4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxMjozMVrOGGDhzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1Mjk2MA==", "bodyText": "Can we have a better name for the UTs, a recommended name should mention what the main test scenario is.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408852960", "createdAt": "2020-04-15T13:44:49Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTest.java", "diffHunk": "@@ -133,8 +133,8 @@ public void subnetCreateTest2 () throws Exception {\n     public void subnetUpdateTest1 () throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291555968c8ee49f5e63327a8e344ddfb009ff57"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjQ0Ng==", "bodyText": "Thanks for suggestions ~ now I make the method name as [Method name] _ [Test condition] _ [Expected return] form.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r409002446", "createdAt": "2020-04-15T17:12:31Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTest.java", "diffHunk": "@@ -133,8 +133,8 @@ public void subnetCreateTest2 () throws Exception {\n     public void subnetUpdateTest1 () throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1Mjk2MA=="}, "originalCommit": {"oid": "291555968c8ee49f5e63327a8e344ddfb009ff57"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODQwNjIwOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/RestPreconditionsUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo1MDo1OVrOGF6ryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoxNDo1NVrOGGDnsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1NzU0Ng==", "bodyText": "Since this file is not SubnetManager specific, let us use the one under /lib.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408857546", "createdAt": "2020-04-15T13:50:59Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/RestPreconditionsUtil.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.utils;\n+\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.subnet.entity.VpcState;\n+import org.thymeleaf.util.StringUtils;\n+\n+public class RestPreconditionsUtil {\n+    public static <T> T verifyResourceFound(T resource) throws ResourceNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291555968c8ee49f5e63327a8e344ddfb009ff57"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMzk1NA==", "bodyText": "Okay ~ I'll move this utils to lib", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r409003954", "createdAt": "2020-04-15T17:14:55Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/RestPreconditionsUtil.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.utils;\n+\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.subnet.entity.VpcState;\n+import org.thymeleaf.util.StringUtils;\n+\n+public class RestPreconditionsUtil {\n+    public static <T> T verifyResourceFound(T resource) throws ResourceNotFoundException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1NzU0Ng=="}, "originalCommit": {"oid": "291555968c8ee49f5e63327a8e344ddfb009ff57"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODQyMTYzOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/entity/VpcState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo1NDoxMVrOGF61WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0OToxOVrOGGE4qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1OTk5Mg==", "bodyText": "Do you think it will be a good idea to use VpcState and VpcStateJson under /web folder, or replicate one copy in the microservice that needs that?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r408859992", "createdAt": "2020-04-15T13:54:11Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/entity/VpcState.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.entity;\n+\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+@Data\n+public class VpcState extends CustomerResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291555968c8ee49f5e63327a8e344ddfb009ff57"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNDY4MA==", "bodyText": "I used to replicate one copy in the microservice that needs that, but we can talk about it ~", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r409024680", "createdAt": "2020-04-15T17:49:19Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/entity/VpcState.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.entity;\n+\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+@Data\n+public class VpcState extends CustomerResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1OTk5Mg=="}, "originalCommit": {"oid": "291555968c8ee49f5e63327a8e344ddfb009ff57"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDAxODE3OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDozOTowM1rOGGKq1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyMzo0M1rOGGPBkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTQ0Ng==", "bodyText": "I don't think failing to create route rules should trigger fall back. We should retry first.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r409119446", "createdAt": "2020-04-15T20:39:03Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+        String portId = UUID.randomUUID().toString();\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new FallbackException(\"fallback request\");\n+            }\n+\n+            //Prepare Route Rule(IPv4/6) for Subnet\n+            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+            if (routeResponse == null) {\n+                throw new FallbackException(\"fallback request\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797642f1dbada9af1fec5575b62865aa6a019559"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MDgwMQ==", "bodyText": "yeah I agree with you, let me think about it", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r409190801", "createdAt": "2020-04-15T23:23:43Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+        String portId = UUID.randomUUID().toString();\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new FallbackException(\"fallback request\");\n+            }\n+\n+            //Prepare Route Rule(IPv4/6) for Subnet\n+            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+            if (routeResponse == null) {\n+                throw new FallbackException(\"fallback request\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTQ0Ng=="}, "originalCommit": {"oid": "797642f1dbada9af1fec5575b62865aa6a019559"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDAyMDY4OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDozOTo1MVrOGGKsZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyMzoxN1rOGGPA9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTg0Ng==", "bodyText": "You might want to log different message in different logging level here.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r409119846", "createdAt": "2020-04-15T20:39:51Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+        String portId = UUID.randomUUID().toString();\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new FallbackException(\"fallback request\");\n+            }\n+\n+            //Prepare Route Rule(IPv4/6) for Subnet\n+            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+            if (routeResponse == null) {\n+                throw new FallbackException(\"fallback request\");\n+            }\n+\n+            //Allocate Gateway Mac\n+//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+//            if (macResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n+//            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n+//            if (ipResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // set up value of properties for subnetState\n+            List<RouteWebObject> routes = subnetState.getRoutes();\n+            if (routes == null) {\n+                routes = new ArrayList<>();\n+            }\n+            routes.add(routeResponse.getRoute());\n+            subnetState.setRoutes(routes);\n+            //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n+\n+        } catch (ResourcePersistenceException e) {\n+            throw new Exception(e);\n+        } catch (FallbackException e) {\n+            // Route info of subnet rollback\n+            List<RouteWebObject> routes = resource.getSubnet().getRoutes();\n+            if (routes != null) {\n+                RouteWebObject route = routes.get(routes.size() - 1);\n+                this.subnetService.routeRollback(route.getId(), resource.getSubnet().getVpcId());\n+            }\n+            throw new Exception(e);\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/subnets/{subnetid}\", \"v4/{projectid}/vpcs/{vpcid}/subnets/{subnetid}\"})\n+    public SubnetStateJson updateSubnetState(@PathVariable String projectid, @PathVariable String vpcid, @PathVariable String subnetid, @RequestBody SubnetStateJson resource) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetid);\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceNotNull(inSubnetState);\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+            RestPreconditionsUtil.populateResourceVpcId(inSubnetState, vpcid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetid);\n+            if (subnetState == null) {\n+                throw new ResourceNotFoundException(\"Subnet not found : \" + subnetid);\n+            }\n+\n+            RestPreconditionsUtil.verifyParameterEqual(subnetState.getProjectId(), projectid);\n+            RestPreconditionsUtil.verifyParameterEqual(subnetState.getVpcId(), vpcid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797642f1dbada9af1fec5575b62865aa6a019559"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MDY0NA==", "bodyText": "NP", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r409190644", "createdAt": "2020-04-15T23:23:17Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.subnet.controller;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n+import com.futurewei.alcor.subnet.service.SubnetService;\n+import com.futurewei.alcor.subnet.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class SubnetController {\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;\n+\n+    @Autowired\n+    private SubnetService subnetService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetId}\", \"v4/{projectid}/subnets/{subnetId}\"})\n+    public SubnetStateJson getSubnetStateById(@PathVariable String projectid, @PathVariable String subnetId) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (subnetState == null) {\n+            //TODO: REST error code\n+            return new SubnetStateJson();\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/subnets\", \"v4/{projectid}/subnets\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public SubnetStateJson createSubnetState(@PathVariable String projectid, @RequestBody SubnetStateJson resource) throws Exception {\n+        SubnetState subnetState = null;\n+        String portId = UUID.randomUUID().toString();\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceNotNull(resource.getSubnet());\n+\n+            // TODO: Create a verification framework for all resources\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            // Verify VPC ID\n+            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+            if (vpcResponse == null) {\n+                throw new FallbackException(\"fallback request\");\n+            }\n+\n+            //Prepare Route Rule(IPv4/6) for Subnet\n+            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+            if (routeResponse == null) {\n+                throw new FallbackException(\"fallback request\");\n+            }\n+\n+            //Allocate Gateway Mac\n+//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+//            if (macResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n+//            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n+//            if (ipResponse == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n+\n+            // set up value of properties for subnetState\n+            List<RouteWebObject> routes = subnetState.getRoutes();\n+            if (routes == null) {\n+                routes = new ArrayList<>();\n+            }\n+            routes.add(routeResponse.getRoute());\n+            subnetState.setRoutes(routes);\n+            //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n+\n+        } catch (ResourcePersistenceException e) {\n+            throw new Exception(e);\n+        } catch (FallbackException e) {\n+            // Route info of subnet rollback\n+            List<RouteWebObject> routes = resource.getSubnet().getRoutes();\n+            if (routes != null) {\n+                RouteWebObject route = routes.get(routes.size() - 1);\n+                this.subnetService.routeRollback(route.getId(), resource.getSubnet().getVpcId());\n+            }\n+            throw new Exception(e);\n+        }\n+\n+        return new SubnetStateJson(subnetState);\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/subnets/{subnetid}\", \"v4/{projectid}/vpcs/{vpcid}/subnets/{subnetid}\"})\n+    public SubnetStateJson updateSubnetState(@PathVariable String projectid, @PathVariable String vpcid, @PathVariable String subnetid, @RequestBody SubnetStateJson resource) throws Exception {\n+\n+        SubnetState subnetState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetid);\n+            SubnetState inSubnetState = resource.getSubnet();\n+            RestPreconditionsUtil.verifyResourceNotNull(inSubnetState);\n+            RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n+            RestPreconditionsUtil.populateResourceVpcId(inSubnetState, vpcid);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetid);\n+            if (subnetState == null) {\n+                throw new ResourceNotFoundException(\"Subnet not found : \" + subnetid);\n+            }\n+\n+            RestPreconditionsUtil.verifyParameterEqual(subnetState.getProjectId(), projectid);\n+            RestPreconditionsUtil.verifyParameterEqual(subnetState.getVpcId(), vpcid);\n+\n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+            subnetState = this.subnetDatabaseService.getBySubnetId(subnetid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTg0Ng=="}, "originalCommit": {"oid": "797642f1dbada9af1fec5575b62865aa6a019559"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDAyNTMwOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/entity/IPState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo0MTowOFrOGGKvLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyMzowNVrOGGPAwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMDU1OA==", "bodyText": "We could update the ip related data structure to be aligned with the IP manager PR.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r409120558", "createdAt": "2020-04-15T20:41:08Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/entity/IPState.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.futurewei.alcor.subnet.entity;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+\n+public class IPState  extends CustomerResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797642f1dbada9af1fec5575b62865aa6a019559"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MDU5NA==", "bodyText": "Okay ~ I'll update it", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r409190594", "createdAt": "2020-04-15T23:23:05Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/entity/IPState.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.futurewei.alcor.subnet.entity;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+\n+public class IPState  extends CustomerResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMDU1OA=="}, "originalCommit": {"oid": "797642f1dbada9af1fec5575b62865aa6a019559"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0OTc3NTIzOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTowODoxOVrOGHm00g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMzo1NTozM1rOGHvtHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYyOTMzMA==", "bodyText": "does allFuture.join not include macFuture.join?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410629330", "createdAt": "2020-04-18T05:08:19Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc3MjI1OQ==", "bodyText": "allFuture.join() means sync up all futures (vpc, route, mac), when all above futures are done, this method will be Executed.\nmacResponse = macFuture.join() means make macResponse value", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410772259", "createdAt": "2020-04-18T23:39:25Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYyOTMzMA=="}, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc3NDgxNQ==", "bodyText": "Makes sense. Thanks.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410774815", "createdAt": "2020-04-18T23:55:33Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYyOTMzMA=="}, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0OTgwMzM4OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNToxNjowOFrOGHnBPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODo0Mzo1M1rOGH7WVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzMjUxMQ==", "bodyText": "if inSubnetState.getVpcId() is used multiple times, we should use an individual variable to store its value.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410632511", "createdAt": "2020-04-18T05:16:08Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2NTU5MA==", "bodyText": "Okay ~", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410965590", "createdAt": "2020-04-19T18:43:53Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzMjUxMQ=="}, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0OTgxMjQ0OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNToxODo0MFrOGHnFXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODo1NDo0OVrOGH7d3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzMzU2NQ==", "bodyText": "Why is the atomic reference used here?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410633565", "createdAt": "2020-04-18T05:18:40Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2NzUxNg==", "bodyText": "This is the way to execute asynchronously\uff0c because we can not use MacStateJson directly here (I mean it is in  CompletableFuture.handle() method).\nSo I use the atomic reference", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410967516", "createdAt": "2020-04-19T18:54:49Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzMzU2NQ=="}, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDYzNTgxOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoxNToyN1rOGHtENw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxODo1NzowOVrOGH7fXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMTU3NQ==", "bodyText": "what would happen if inSubnetState includes some route rules, and we add some more from routeResponse which could be duplicated? Will that create multiple copies of the same rules? like so as we are using List", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410731575", "createdAt": "2020-04-18T18:15:27Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();\n+            routeResponse = routeFuture.join();\n+            logger.info(\"Total processing time:\" + (System.currentTimeMillis() - start) + \"ms\");\n+\n             // set up value of properties for subnetState\n-            List<RouteWebObject> routes = subnetState.getRoutes();\n+            List<RouteWebObject> routes = inSubnetState.getRoutes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMTYwMw==", "bodyText": "Can we skip inSubnetState.getRoutes()", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410731603", "createdAt": "2020-04-18T18:15:43Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();\n+            routeResponse = routeFuture.join();\n+            logger.info(\"Total processing time:\" + (System.currentTimeMillis() - start) + \"ms\");\n+\n             // set up value of properties for subnetState\n-            List<RouteWebObject> routes = subnetState.getRoutes();\n+            List<RouteWebObject> routes = inSubnetState.getRoutes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMTU3NQ=="}, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk2NzkwMw==", "bodyText": "Yeah, if inSubnetState includes some route rules already, we will just add the rules just created into the list. Do you have any good suggestion?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410967903", "createdAt": "2020-04-19T18:57:09Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();\n+            routeResponse = routeFuture.join();\n+            logger.info(\"Total processing time:\" + (System.currentTimeMillis() - start) + \"ms\");\n+\n             // set up value of properties for subnetState\n-            List<RouteWebObject> routes = subnetState.getRoutes();\n+            List<RouteWebObject> routes = inSubnetState.getRoutes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMTU3NQ=="}, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDYzNjk5OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoxNzozOFrOGHtE3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyOTo1MlrOGIFFkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMTc0Mw==", "bodyText": "When Database fails to store the data, actually we will need to roll back the allocated resources as well? What do you think?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410731743", "createdAt": "2020-04-18T18:17:38Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();\n+            routeResponse = routeFuture.join();\n+            logger.info(\"Total processing time:\" + (System.currentTimeMillis() - start) + \"ms\");\n+\n             // set up value of properties for subnetState\n-            List<RouteWebObject> routes = subnetState.getRoutes();\n+            List<RouteWebObject> routes = inSubnetState.getRoutes();\n             if (routes == null) {\n                 routes = new ArrayList<>();\n             }\n             routes.add(routeResponse.getRoute());\n-            subnetState.setRoutes(routes);\n+            inSubnetState.setRoutes(routes);\n             //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n \n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTEzOQ==", "bodyText": "Updated as discussed..", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411125139", "createdAt": "2020-04-20T06:29:52Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();\n+            routeResponse = routeFuture.join();\n+            logger.info(\"Total processing time:\" + (System.currentTimeMillis() - start) + \"ms\");\n+\n             // set up value of properties for subnetState\n-            List<RouteWebObject> routes = subnetState.getRoutes();\n+            List<RouteWebObject> routes = inSubnetState.getRoutes();\n             if (routes == null) {\n                 routes = new ArrayList<>();\n             }\n             routes.add(routeResponse.getRoute());\n-            subnetState.setRoutes(routes);\n+            inSubnetState.setRoutes(routes);\n             //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n \n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMTc0Mw=="}, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDYzODA2OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoxODozNFrOGHtFZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoxODozNFrOGHtFZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMTg3OA==", "bodyText": "Like this! That is the right way to do.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410731878", "createdAt": "2020-04-18T18:18:34Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();\n+            routeResponse = routeFuture.join();\n+            logger.info(\"Total processing time:\" + (System.currentTimeMillis() - start) + \"ms\");\n+\n             // set up value of properties for subnetState\n-            List<RouteWebObject> routes = subnetState.getRoutes();\n+            List<RouteWebObject> routes = inSubnetState.getRoutes();\n             if (routes == null) {\n                 routes = new ArrayList<>();\n             }\n             routes.add(routeResponse.getRoute());\n-            subnetState.setRoutes(routes);\n+            inSubnetState.setRoutes(routes);\n             //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n \n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            return new SubnetStateJson(subnetState);\n+\n         } catch (ResourcePersistenceException e) {\n+            logger.error(e.getMessage());\n             throw new Exception(e);\n-        } catch (FallbackException e) {\n-            // Route info of subnet rollback\n-            List<RouteWebObject> routes = resource.getSubnet().getRoutes();\n-            if (routes != null) {\n-                RouteWebObject route = routes.get(routes.size() - 1);\n-                this.subnetService.routeRollback(route.getId(), resource.getSubnet().getVpcId());\n+        } catch (CompletionException e) {\n+            routeResponse = (RouteWebJson) routeResponseAtomic.get();\n+            macResponse = (MacStateJson) macResponseAtomic.get();\n+            logger.error(e.getMessage());\n+\n+            // Subnet fallback\n+            logger.info(\"subnet fallback start\");\n+            this.subnetDatabaseService.deleteSubnet(resource.getSubnet().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDYzOTA5OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoxOToxOFrOGHtF3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOToxNjo1NFrOGH7tgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMTk5Ng==", "bodyText": "So fall back will be an sync call?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410731996", "createdAt": "2020-04-18T18:19:18Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();\n+            routeResponse = routeFuture.join();\n+            logger.info(\"Total processing time:\" + (System.currentTimeMillis() - start) + \"ms\");\n+\n             // set up value of properties for subnetState\n-            List<RouteWebObject> routes = subnetState.getRoutes();\n+            List<RouteWebObject> routes = inSubnetState.getRoutes();\n             if (routes == null) {\n                 routes = new ArrayList<>();\n             }\n             routes.add(routeResponse.getRoute());\n-            subnetState.setRoutes(routes);\n+            inSubnetState.setRoutes(routes);\n             //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n \n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            return new SubnetStateJson(subnetState);\n+\n         } catch (ResourcePersistenceException e) {\n+            logger.error(e.getMessage());\n             throw new Exception(e);\n-        } catch (FallbackException e) {\n-            // Route info of subnet rollback\n-            List<RouteWebObject> routes = resource.getSubnet().getRoutes();\n-            if (routes != null) {\n-                RouteWebObject route = routes.get(routes.size() - 1);\n-                this.subnetService.routeRollback(route.getId(), resource.getSubnet().getVpcId());\n+        } catch (CompletionException e) {\n+            routeResponse = (RouteWebJson) routeResponseAtomic.get();\n+            macResponse = (MacStateJson) macResponseAtomic.get();\n+            logger.error(e.getMessage());\n+\n+            // Subnet fallback\n+            logger.info(\"subnet fallback start\");\n+            this.subnetDatabaseService.deleteSubnet(resource.getSubnet().getId());\n+            logger.info(\"subnet fallback end\");\n+\n+            // Route fallback\n+            logger.info(\"Route fallback start\");\n+            if (routeResponse != null) {\n+                RouteWebObject route = routeResponse.getRoute();\n+                this.subnetService.routeFallback(route.getId(), resource.getSubnet().getVpcId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MTUyMg==", "bodyText": "I can set up fall back as async call ~", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410971522", "createdAt": "2020-04-19T19:16:54Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();\n+            routeResponse = routeFuture.join();\n+            logger.info(\"Total processing time:\" + (System.currentTimeMillis() - start) + \"ms\");\n+\n             // set up value of properties for subnetState\n-            List<RouteWebObject> routes = subnetState.getRoutes();\n+            List<RouteWebObject> routes = inSubnetState.getRoutes();\n             if (routes == null) {\n                 routes = new ArrayList<>();\n             }\n             routes.add(routeResponse.getRoute());\n-            subnetState.setRoutes(routes);\n+            inSubnetState.setRoutes(routes);\n             //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n \n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            return new SubnetStateJson(subnetState);\n+\n         } catch (ResourcePersistenceException e) {\n+            logger.error(e.getMessage());\n             throw new Exception(e);\n-        } catch (FallbackException e) {\n-            // Route info of subnet rollback\n-            List<RouteWebObject> routes = resource.getSubnet().getRoutes();\n-            if (routes != null) {\n-                RouteWebObject route = routes.get(routes.size() - 1);\n-                this.subnetService.routeRollback(route.getId(), resource.getSubnet().getVpcId());\n+        } catch (CompletionException e) {\n+            routeResponse = (RouteWebJson) routeResponseAtomic.get();\n+            macResponse = (MacStateJson) macResponseAtomic.get();\n+            logger.error(e.getMessage());\n+\n+            // Subnet fallback\n+            logger.info(\"subnet fallback start\");\n+            this.subnetDatabaseService.deleteSubnet(resource.getSubnet().getId());\n+            logger.info(\"subnet fallback end\");\n+\n+            // Route fallback\n+            logger.info(\"Route fallback start\");\n+            if (routeResponse != null) {\n+                RouteWebObject route = routeResponse.getRoute();\n+                this.subnetService.routeFallback(route.getId(), resource.getSubnet().getVpcId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMTk5Ng=="}, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDYzOTY2OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoxOTo1N1rOGHtGJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzo1MDozOFrOGH-r1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjA3MA==", "bodyText": "What could cause NullPointerException?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410732070", "createdAt": "2020-04-18T18:19:57Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();\n+            routeResponse = routeFuture.join();\n+            logger.info(\"Total processing time:\" + (System.currentTimeMillis() - start) + \"ms\");\n+\n             // set up value of properties for subnetState\n-            List<RouteWebObject> routes = subnetState.getRoutes();\n+            List<RouteWebObject> routes = inSubnetState.getRoutes();\n             if (routes == null) {\n                 routes = new ArrayList<>();\n             }\n             routes.add(routeResponse.getRoute());\n-            subnetState.setRoutes(routes);\n+            inSubnetState.setRoutes(routes);\n             //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n \n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            return new SubnetStateJson(subnetState);\n+\n         } catch (ResourcePersistenceException e) {\n+            logger.error(e.getMessage());\n             throw new Exception(e);\n-        } catch (FallbackException e) {\n-            // Route info of subnet rollback\n-            List<RouteWebObject> routes = resource.getSubnet().getRoutes();\n-            if (routes != null) {\n-                RouteWebObject route = routes.get(routes.size() - 1);\n-                this.subnetService.routeRollback(route.getId(), resource.getSubnet().getVpcId());\n+        } catch (CompletionException e) {\n+            routeResponse = (RouteWebJson) routeResponseAtomic.get();\n+            macResponse = (MacStateJson) macResponseAtomic.get();\n+            logger.error(e.getMessage());\n+\n+            // Subnet fallback\n+            logger.info(\"subnet fallback start\");\n+            this.subnetDatabaseService.deleteSubnet(resource.getSubnet().getId());\n+            logger.info(\"subnet fallback end\");\n+\n+            // Route fallback\n+            logger.info(\"Route fallback start\");\n+            if (routeResponse != null) {\n+                RouteWebObject route = routeResponse.getRoute();\n+                this.subnetService.routeFallback(route.getId(), resource.getSubnet().getVpcId());\n+            }\n+            logger.info(\"Route fallback end\");\n+\n+            // Mac fallback\n+            logger.info(\"Mac fallback start\");\n+            if (macResponse != null) {\n+                this.subnetService.macFallback(macResponse.getMacState().getMacAddress());\n+                //this.subnetService.macFallback(UnitTestConfig.macAddress);\n             }\n+            logger.info(\"Mac fallback end\");\n+            throw new Exception(e);\n+        } catch (NullPointerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAyMDI0NA==", "bodyText": "This is to prevent that when the call step is executed asynchronously, some responses return null, but this repsonse is used later", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411020244", "createdAt": "2020-04-19T23:50:38Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();\n+            routeResponse = routeFuture.join();\n+            logger.info(\"Total processing time:\" + (System.currentTimeMillis() - start) + \"ms\");\n+\n             // set up value of properties for subnetState\n-            List<RouteWebObject> routes = subnetState.getRoutes();\n+            List<RouteWebObject> routes = inSubnetState.getRoutes();\n             if (routes == null) {\n                 routes = new ArrayList<>();\n             }\n             routes.add(routeResponse.getRoute());\n-            subnetState.setRoutes(routes);\n+            inSubnetState.setRoutes(routes);\n             //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n \n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            return new SubnetStateJson(subnetState);\n+\n         } catch (ResourcePersistenceException e) {\n+            logger.error(e.getMessage());\n             throw new Exception(e);\n-        } catch (FallbackException e) {\n-            // Route info of subnet rollback\n-            List<RouteWebObject> routes = resource.getSubnet().getRoutes();\n-            if (routes != null) {\n-                RouteWebObject route = routes.get(routes.size() - 1);\n-                this.subnetService.routeRollback(route.getId(), resource.getSubnet().getVpcId());\n+        } catch (CompletionException e) {\n+            routeResponse = (RouteWebJson) routeResponseAtomic.get();\n+            macResponse = (MacStateJson) macResponseAtomic.get();\n+            logger.error(e.getMessage());\n+\n+            // Subnet fallback\n+            logger.info(\"subnet fallback start\");\n+            this.subnetDatabaseService.deleteSubnet(resource.getSubnet().getId());\n+            logger.info(\"subnet fallback end\");\n+\n+            // Route fallback\n+            logger.info(\"Route fallback start\");\n+            if (routeResponse != null) {\n+                RouteWebObject route = routeResponse.getRoute();\n+                this.subnetService.routeFallback(route.getId(), resource.getSubnet().getVpcId());\n+            }\n+            logger.info(\"Route fallback end\");\n+\n+            // Mac fallback\n+            logger.info(\"Mac fallback start\");\n+            if (macResponse != null) {\n+                this.subnetService.macFallback(macResponse.getMacState().getMacAddress());\n+                //this.subnetService.macFallback(UnitTestConfig.macAddress);\n             }\n+            logger.info(\"Mac fallback end\");\n+            throw new Exception(e);\n+        } catch (NullPointerException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjA3MA=="}, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY0MTY5OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyMjozM1rOGHtHJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzozNzoxNVrOGH-h0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjMyNA==", "bodyText": "Remove the comment if not applicable here.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410732324", "createdAt": "2020-04-18T18:22:33Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -29,49 +30,86 @@\n     private RestTemplate restTemplate = new RestTemplate();\n \n     @Override\n-    public void routeRollback(String routeId, String vpcId) {\n-        String routeManagerServiceUrl = routeUrl + vpcId + \"/routes/\" + routeId; // for kubernetes test\n+    public void routeFallback(String routeId, String vpcId) {\n+        String routeManagerServiceUrl = routeUrl + \"vpcs/\" + vpcId + \"/routes/\" + routeId; // for kubernetes test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxNzY4MQ==", "bodyText": "NP", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411017681", "createdAt": "2020-04-19T23:37:15Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -29,49 +30,86 @@\n     private RestTemplate restTemplate = new RestTemplate();\n \n     @Override\n-    public void routeRollback(String routeId, String vpcId) {\n-        String routeManagerServiceUrl = routeUrl + vpcId + \"/routes/\" + routeId; // for kubernetes test\n+    public void routeFallback(String routeId, String vpcId) {\n+        String routeManagerServiceUrl = routeUrl + \"vpcs/\" + vpcId + \"/routes/\" + routeId; // for kubernetes test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjMyNA=="}, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY1MTcxOnYy", "diffSide": "LEFT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODozMjowOFrOGHtLvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODozMjowOFrOGHtLvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMzUwMQ==", "bodyText": "We also need to handle FallbackException when the downstream services or db fall back fail.\nIn that case, we need to log error or critical as well.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410733501", "createdAt": "2020-04-18T18:32:08Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -86,59 +101,106 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             RestPreconditionsUtil.verifyResourceFound(inSubnetState.getVpcId());\n             RestPreconditionsUtil.populateResourceProjectId(inSubnetState, projectid);\n \n-            this.subnetDatabaseService.addSubnet(inSubnetState);\n-\n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+            //Allocate Gateway Mac\n+            CompletableFuture<MacStateJson> macFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                macResponseAtomic.set(s);\n+                return s;\n+            });\n \n             // Verify VPC ID\n-            VpcStateJson vpcResponse = this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n-            if (vpcResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<VpcStateJson> vpcFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.verifyVpcId(projectid, inSubnetState.getVpcId());\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR);\n \n             //Prepare Route Rule(IPv4/6) for Subnet\n-            RouteWebJson routeResponse = this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n-            if (routeResponse == null) {\n-                throw new FallbackException(\"fallback request\");\n-            }\n+            CompletableFuture<RouteWebJson> routeFuture = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    return this.subnetService.createRouteRules(inSubnetState.getId(), inSubnetState);\n+                } catch (Exception e) {\n+                    throw new CompletionException(e);\n+                }\n+            }, ThreadPoolExecutorUtils.SELECT_POOL_EXECUTOR).handle((s, e) -> {\n+                routeResponseAtomic.set(s);\n+                return s;\n+            });;\n+\n \n-            //Allocate Gateway Mac\n-//            MacStateJson macResponse = this.subnetService.allocateMacGateway(projectid, inSubnetState.getVpcId(), portId);\n-//            if (macResponse == null) {\n-//                throw new ResourcePersistenceException();\n-//            }\n \n             // Verify/Allocate Gateway IP, subnet id, port id, subnet cidr, response:IP - unique\n //            IPStateJson ipResponse = this.subnetService.allocateIPGateway(inSubnetState.getId(), inSubnetState.getCidr(), portId);\n //            if (ipResponse == null) {\n //                throw new ResourcePersistenceException();\n //            }\n \n+            // Synchronous blocking\n+            CompletableFuture<Void> allFuture = CompletableFuture.allOf(vpcFuture, macFuture, routeFuture);\n+            allFuture.join();\n+\n+            macResponse = macFuture.join();\n+            routeResponse = routeFuture.join();\n+            logger.info(\"Total processing time:\" + (System.currentTimeMillis() - start) + \"ms\");\n+\n             // set up value of properties for subnetState\n-            List<RouteWebObject> routes = subnetState.getRoutes();\n+            List<RouteWebObject> routes = inSubnetState.getRoutes();\n             if (routes == null) {\n                 routes = new ArrayList<>();\n             }\n             routes.add(routeResponse.getRoute());\n-            subnetState.setRoutes(routes);\n+            inSubnetState.setRoutes(routes);\n             //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n \n+            this.subnetDatabaseService.addSubnet(inSubnetState);\n+\n+            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n+            if (subnetState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+\n+            return new SubnetStateJson(subnetState);\n+\n         } catch (ResourcePersistenceException e) {\n+            logger.error(e.getMessage());\n             throw new Exception(e);\n-        } catch (FallbackException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY1NTk3OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/ThreadPoolExecutorUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODozNjoxNFrOGHtNyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzo0NDo1NlrOGH-npA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNDAyNQ==", "bodyText": "what do those value (10,20,5000) stand for?\nA recommended way is to use \"field name: field value\".\nAlso, if possibly, make those value configurable in our application.json file; if not possible, we should make those field as constants and maintain the constants in a separate file.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410734025", "createdAt": "2020-04-18T18:36:14Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/ThreadPoolExecutorUtils.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.futurewei.alcor.subnet.utils;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class ThreadPoolExecutorUtils {\n+    public static final ThreadPoolExecutor SELECT_POOL_EXECUTOR = new ThreadPoolExecutor(10, 20, 5000,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxOTE3Mg==", "bodyText": "corePoolSize:10. maximumPoolSize:20, KeepAliveTime:5000.\nI agree with you, I will make those field as constants.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411019172", "createdAt": "2020-04-19T23:44:56Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/ThreadPoolExecutorUtils.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.futurewei.alcor.subnet.utils;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class ThreadPoolExecutorUtils {\n+    public static final ThreadPoolExecutor SELECT_POOL_EXECUTOR = new ThreadPoolExecutor(10, 20, 5000,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNDAyNQ=="}, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY1Njk4OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODozNzo0M1rOGHtOUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQyMzozOToxOVrOGH-jfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNDE2MA==", "bodyText": "Looks like we have some fall back UTs. Good job!\nRecommend to cover all possible fall back failures.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r410734160", "createdAt": "2020-04-18T18:37:43Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTests.java", "diffHunk": "@@ -138,13 +148,50 @@ public void createSubnetState_canNotFindRoute_notPass () throws Exception {\n                 UnitTestConfig.vpcId, UnitTestConfig.name, UnitTestConfig.cidr, new ArrayList<RouteWebObject>(){{add(new RouteWebObject());}});\n \n         VpcStateJson vpcStateJson = new VpcStateJson(vpcState);\n+        MacStateJson macResponse = new MacStateJson();\n \n         Mockito.when(subnetDatabaseService.getBySubnetId(UnitTestConfig.subnetId))\n                 .thenReturn(subnetState);\n         Mockito.when(subnetService.verifyVpcId(UnitTestConfig.projectId, UnitTestConfig.vpcId))\n                 .thenReturn(vpcStateJson);\n-        Mockito.when(subnetService.createRouteRules(UnitTestConfig.subnetId, subnetState))\n-                .thenReturn(null);\n+        Mockito.when(subnetService.createRouteRules(eq(UnitTestConfig.subnetId), any(SubnetState.class)))\n+                .thenThrow(new FallbackException(\"fallback request\"));\n+        Mockito.when(subnetService.allocateMacGateway(anyString(), anyString(), anyString()))\n+                .thenReturn(macResponse);\n+        try {\n+            this.mockMvc.perform(post(creatwUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.resource))\n+                    .andDo(print())\n+                    .andExpect(status().is(201))\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.subnet.id\").value(UnitTestConfig.subnetId));\n+        }catch (Exception ex) {\n+            //System.out.println(ex.getMessage());\n+            assertEquals(UnitTestConfig.createException, ex.getMessage());\n+        }\n+\n+    }\n+\n+    @Test\n+    public void createSubnetState_canNotFindMac_notPass () throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxODExMQ==", "bodyText": "NP", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411018111", "createdAt": "2020-04-19T23:39:19Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTests.java", "diffHunk": "@@ -138,13 +148,50 @@ public void createSubnetState_canNotFindRoute_notPass () throws Exception {\n                 UnitTestConfig.vpcId, UnitTestConfig.name, UnitTestConfig.cidr, new ArrayList<RouteWebObject>(){{add(new RouteWebObject());}});\n \n         VpcStateJson vpcStateJson = new VpcStateJson(vpcState);\n+        MacStateJson macResponse = new MacStateJson();\n \n         Mockito.when(subnetDatabaseService.getBySubnetId(UnitTestConfig.subnetId))\n                 .thenReturn(subnetState);\n         Mockito.when(subnetService.verifyVpcId(UnitTestConfig.projectId, UnitTestConfig.vpcId))\n                 .thenReturn(vpcStateJson);\n-        Mockito.when(subnetService.createRouteRules(UnitTestConfig.subnetId, subnetState))\n-                .thenReturn(null);\n+        Mockito.when(subnetService.createRouteRules(eq(UnitTestConfig.subnetId), any(SubnetState.class)))\n+                .thenThrow(new FallbackException(\"fallback request\"));\n+        Mockito.when(subnetService.allocateMacGateway(anyString(), anyString(), anyString()))\n+                .thenReturn(macResponse);\n+        try {\n+            this.mockMvc.perform(post(creatwUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.resource))\n+                    .andDo(print())\n+                    .andExpect(status().is(201))\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.subnet.id\").value(UnitTestConfig.subnetId));\n+        }catch (Exception ex) {\n+            //System.out.println(ex.getMessage());\n+            assertEquals(UnitTestConfig.createException, ex.getMessage());\n+        }\n+\n+    }\n+\n+    @Test\n+    public void createSubnetState_canNotFindMac_notPass () throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNDE2MA=="}, "originalCommit": {"oid": "39f7d50d6771e89c8c99603a3f2a89f7d80ca146"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mzk2MDE1OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/exception/DatabaseAddException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyNDo1NlrOGIE89w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjowMDoxM1rOGIbzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyMjkzNQ==", "bodyText": "DatabasePersistenceException?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411122935", "createdAt": "2020-04-20T06:24:56Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/exception/DatabaseAddException.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package com.futurewei.alcor.common.exception;\n+\n+public class DatabaseAddException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090aa3a1cb28cf03532ab63e41a68aee8eb7012e"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5NzI2OA==", "bodyText": "Your name is better ~", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411497268", "createdAt": "2020-04-20T16:00:13Z", "author": {"login": "kevin-zhonghao"}, "path": "lib/src/main/java/com/futurewei/alcor/common/exception/DatabaseAddException.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package com.futurewei.alcor.common.exception;\n+\n+public class DatabaseAddException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyMjkzNQ=="}, "originalCommit": {"oid": "090aa3a1cb28cf03532ab63e41a68aee8eb7012e"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mzk2MTAwOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/config/ThreadPoolExecutorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyNToxM1rOGIE9dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyNToxM1rOGIE9dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyMzA2MQ==", "bodyText": "Like it!", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411123061", "createdAt": "2020-04-20T06:25:13Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/config/ThreadPoolExecutorConfig.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.futurewei.alcor.subnet.config;\n+\n+public class ThreadPoolExecutorConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090aa3a1cb28cf03532ab63e41a68aee8eb7012e"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mzk2NTg0OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyNjo0NlrOGIFAIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyNjo0NlrOGIFAIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyMzc0NQ==", "bodyText": "Very nice.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411123745", "createdAt": "2020-04-20T06:26:46Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -151,51 +159,25 @@ public SubnetStateJson createSubnetState(@PathVariable String projectid, @Reques\n             logger.info(\"Total processing time:\" + (System.currentTimeMillis() - start) + \"ms\");\n \n             // set up value of properties for subnetState\n-            List<RouteWebObject> routes = inSubnetState.getRoutes();\n-            if (routes == null) {\n-                routes = new ArrayList<>();\n-            }\n+            List<RouteWebObject> routes = new ArrayList<>();\n             routes.add(routeResponse.getRoute());\n             inSubnetState.setRoutes(routes);\n             //subnetState.setGatewayIp(ipResponse.getIpState().getIp());\n \n             this.subnetDatabaseService.addSubnet(inSubnetState);\n \n-            subnetState = this.subnetDatabaseService.getBySubnetId(inSubnetState.getId());\n-            if (subnetState == null) {\n-                throw new ResourcePersistenceException();\n-            }\n+//            subnetState = this.subnetDatabaseService.getBySubnetId(subnetId);\n+//            if (SubnetState == null) {\n+//                throw new ResourcePersistenceException();\n+//            }\n \n-            return new SubnetStateJson(subnetState);\n+            return new SubnetStateJson(inSubnetState);\n \n-        } catch (ResourcePersistenceException e) {\n-            logger.error(e.getMessage());\n-            throw new Exception(e);\n         } catch (CompletionException e) {\n-            routeResponse = (RouteWebJson) routeResponseAtomic.get();\n-            macResponse = (MacStateJson) macResponseAtomic.get();\n-            logger.error(e.getMessage());\n-\n-            // Subnet fallback\n-            logger.info(\"subnet fallback start\");\n-            this.subnetDatabaseService.deleteSubnet(resource.getSubnet().getId());\n-            logger.info(\"subnet fallback end\");\n-\n-            // Route fallback\n-            logger.info(\"Route fallback start\");\n-            if (routeResponse != null) {\n-                RouteWebObject route = routeResponse.getRoute();\n-                this.subnetService.routeFallback(route.getId(), resource.getSubnet().getVpcId());\n-            }\n-            logger.info(\"Route fallback end\");\n-\n-            // Mac fallback\n-            logger.info(\"Mac fallback start\");\n-            if (macResponse != null) {\n-                this.subnetService.macFallback(macResponse.getMacState().getMacAddress());\n-                //this.subnetService.macFallback(UnitTestConfig.macAddress);\n-            }\n-            logger.info(\"Mac fallback end\");\n+            this.subnetService.fallbackOperation(routeResponseAtomic, macResponseAtomic, resource, e.getMessage());\n+            throw new Exception(e);\n+        } catch (DatabaseAddException e) {\n+            this.subnetService.fallbackOperation(routeResponseAtomic, macResponseAtomic, resource, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090aa3a1cb28cf03532ab63e41a68aee8eb7012e"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mzk2Njk2OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyNzoxM1rOGIFAxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjowNzowNVrOGIcJTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyMzkxMA==", "bodyText": "oh we can wire two service together?", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411123910", "createdAt": "2020-04-20T06:27:13Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -5,16 +5,27 @@\n import com.futurewei.alcor.common.exception.FallbackException;\n import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n import com.futurewei.alcor.subnet.service.SubnetService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.http.HttpEntity;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Service;\n import org.springframework.web.client.RestTemplate;\n \n+import java.util.concurrent.atomic.AtomicReference;\n+\n @Service\n public class SubnetServiceImp implements SubnetService {\n \n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090aa3a1cb28cf03532ab63e41a68aee8eb7012e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwMjkyNw==", "bodyText": "Yes", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411502927", "createdAt": "2020-04-20T16:07:05Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -5,16 +5,27 @@\n import com.futurewei.alcor.common.exception.FallbackException;\n import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n import com.futurewei.alcor.subnet.entity.*;\n+import com.futurewei.alcor.subnet.service.SubnetDatabaseService;\n import com.futurewei.alcor.subnet.service.SubnetService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.http.HttpEntity;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Service;\n import org.springframework.web.client.RestTemplate;\n \n+import java.util.concurrent.atomic.AtomicReference;\n+\n @Service\n public class SubnetServiceImp implements SubnetService {\n \n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private SubnetDatabaseService subnetDatabaseService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyMzkxMA=="}, "originalCommit": {"oid": "090aa3a1cb28cf03532ab63e41a68aee8eb7012e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mzk3MDY1OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyODoxOFrOGIFCzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjowMzo0N1rOGIb_IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNDQzMQ==", "bodyText": "Let us be a little creative in term of naming :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411124431", "createdAt": "2020-04-20T06:28:18Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTests.java", "diffHunk": "@@ -166,7 +168,7 @@ public void createSubnetState_canNotFindRoute_notPass () throws Exception {\n                     .andExpect(MockMvcResultMatchers.jsonPath(\"$.subnet.id\").value(UnitTestConfig.subnetId));\n         }catch (Exception ex) {\n             //System.out.println(ex.getMessage());\n-            assertEquals(UnitTestConfig.createException, ex.getMessage());\n+            assertEquals(UnitTestConfig.createException2, ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090aa3a1cb28cf03532ab63e41a68aee8eb7012e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwMDMyMQ==", "bodyText": "Okay ~ Naming is one of my weaknesses ~", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411500321", "createdAt": "2020-04-20T16:03:47Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTests.java", "diffHunk": "@@ -166,7 +168,7 @@ public void createSubnetState_canNotFindRoute_notPass () throws Exception {\n                     .andExpect(MockMvcResultMatchers.jsonPath(\"$.subnet.id\").value(UnitTestConfig.subnetId));\n         }catch (Exception ex) {\n             //System.out.println(ex.getMessage());\n-            assertEquals(UnitTestConfig.createException, ex.getMessage());\n+            assertEquals(UnitTestConfig.createException2, ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNDQzMQ=="}, "originalCommit": {"oid": "090aa3a1cb28cf03532ab63e41a68aee8eb7012e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Njc4NDg1OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzoxMzo0NlrOGIe_lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxNzo0NlrOGK1xCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU0OTU5MQ==", "bodyText": "Let us remove all unnecessary dependencies from Subnet Manager. A good example is https://github.com/chenpiaoping/alcor/blob/ip_manager/services/private_ip_manager/pom.xml.\nIt has very limited dependencies which is more expected.", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r411549591", "createdAt": "2020-04-20T17:13:46Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/pom.xml", "diffHunk": "@@ -0,0 +1,212 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>SubnetManager</artifactId>\n+    <version>0.1.0-SNAPSHOT</version>\n+    <name>AlcorSubnetManager</name>\n+    <description>AlcorSubnet</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+        <maven.compiler.source>1.7</maven.compiler.source>\n+        <maven.compiler.target>1.7</maven.compiler.target>\n+        <asciidoctor-plugin.version>1.5.6</asciidoctor-plugin.version>\n+        <snippets>${project.basedir}/target/generated-snippets/</snippets>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090aa3a1cb28cf03532ab63e41a68aee8eb7012e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxOTg1MA==", "bodyText": "Okay ~ this is a good suggestion", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r414019850", "createdAt": "2020-04-23T18:17:46Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/pom.xml", "diffHunk": "@@ -0,0 +1,212 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>SubnetManager</artifactId>\n+    <version>0.1.0-SNAPSHOT</version>\n+    <name>AlcorSubnetManager</name>\n+    <description>AlcorSubnet</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+        <maven.compiler.source>1.7</maven.compiler.source>\n+        <maven.compiler.target>1.7</maven.compiler.target>\n+        <asciidoctor-plugin.version>1.5.6</asciidoctor-plugin.version>\n+        <snippets>${project.basedir}/target/generated-snippets/</snippets>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU0OTU5MQ=="}, "originalCommit": {"oid": "090aa3a1cb28cf03532ab63e41a68aee8eb7012e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzI5NTUzOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/entity/SubnetState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxMTo0OVrOGK1iOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxOTozNVrOGK11mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNjA1OQ==", "bodyText": "gateway mac address", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r414016059", "createdAt": "2020-04-23T18:11:49Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/entity/SubnetState.java", "diffHunk": "@@ -50,31 +50,44 @@\n     @JsonProperty(\"routes\")\n     private List<RouteWebObject> routes;\n \n+    @JsonProperty(\"mac_address\")\n+    private String macAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f52b25dce6f357f66931c12fe75381eac92c8930"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMTAxOA==", "bodyText": "okay ~", "url": "https://github.com/futurewei-cloud/alcor/pull/154#discussion_r414021018", "createdAt": "2020-04-23T18:19:35Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/entity/SubnetState.java", "diffHunk": "@@ -50,31 +50,44 @@\n     @JsonProperty(\"routes\")\n     private List<RouteWebObject> routes;\n \n+    @JsonProperty(\"mac_address\")\n+    private String macAddress;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNjA1OQ=="}, "originalCommit": {"oid": "f52b25dce6f357f66931c12fe75381eac92c8930"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4713, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}