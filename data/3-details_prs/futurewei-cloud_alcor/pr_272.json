{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxOTA3Njgx", "number": 272, "title": "[Private IP Manager] Add UTs to Cover IpAddrRangeRepo interfaces", "bodyText": "", "createdAt": "2020-06-30T09:39:33Z", "url": "https://github.com/futurewei-cloud/alcor/pull/272", "merged": true, "mergeCommit": {"oid": "0b5c23de435d8815d88c0bf41d5399f892ce70a4"}, "closed": true, "closedAt": "2020-07-01T07:00:11Z", "author": {"login": "chenpiaoping"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwSXgmgH2gAyNDQxOTA3NjgxOjVhYjY0MTU2MjQ0OWYxZDVlYWNhOWI0YTg3YzJkMTY4ZDdiNzI4Yzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwiqmagFqTQ0MDUzOTU5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5ab641562449f1d5eaca9b4a87c2d168d7b728c7", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5ab641562449f1d5eaca9b4a87c2d168d7b728c7", "committedDate": "2020-06-30T09:38:25Z", "message": "add some UTs to cover all interfaces of IpAddrRangeRepo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTM5NTk2", "url": "https://github.com/futurewei-cloud/alcor/pull/272#pullrequestreview-440539596", "createdAt": "2020-07-01T04:35:40Z", "commit": {"oid": "5ab641562449f1d5eaca9b4a87c2d168d7b728c7"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNDozNTo0MFrOGrWdfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNDozNjo1MlrOGrWemw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEwOTk0OQ==", "bodyText": "This assertion shows that our algorithm is predictable :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/272#discussion_r448109949", "createdAt": "2020-07-01T04:35:40Z", "author": {"login": "xieus"}, "path": "services/private_ip_manager/src/test/java/com/futurewei/alcor/privateipmanager/repo/IpAddrTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.privateipmanager.repo;\n+\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.MockCache;\n+import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.privateipmanager.config.UnitTestConfig;\n+import com.futurewei.alcor.privateipmanager.entity.IpAddrAlloc;\n+import com.futurewei.alcor.privateipmanager.entity.IpAddrRange;\n+import com.futurewei.alcor.privateipmanager.entity.VpcIpRange;\n+import com.futurewei.alcor.privateipmanager.exception.IpAddrAllocNotFoundException;\n+import com.futurewei.alcor.privateipmanager.exception.IpAddrNotEnoughException;\n+import com.futurewei.alcor.privateipmanager.exception.IpRangeNotFoundException;\n+import com.futurewei.alcor.privateipmanager.exception.NotFoundIpRangeFromVpc;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRangeRequest;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static com.futurewei.alcor.privateipmanager.util.IpAddressBuilder.buildIpAddrRangeRequest;\n+import static com.futurewei.alcor.privateipmanager.util.IpAddressBuilder.buildIpAddrRequest;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+public class IpAddrTest {\n+    private IpAddrRangeRepo ipAddrRangeRepo;\n+    private ICache<String, IpAddrRange> ipAddrRangeCache;\n+    private ICache<String, VpcIpRange> vpcIpRangeCache;\n+    private Transaction transaction;\n+\n+    @BeforeEach\n+    public void beforeEachTest() throws Exception {\n+        transaction = mock(Transaction.class);\n+        ipAddrRangeCache = spy(new MockCache<>(transaction));\n+        vpcIpRangeCache = spy(new MockCache<>(transaction));\n+\n+        ipAddrRangeRepo = new IpAddrRangeRepo(ipAddrRangeCache, vpcIpRangeCache);\n+\n+        when(transaction.start()).thenReturn(transaction);\n+\n+        IpAddrRangeRequest ipAddrRangeRequest = buildIpAddrRangeRequest();\n+        ipAddrRangeRepo.createIpAddrRange(ipAddrRangeRequest);\n+    }\n+\n+    @Test\n+    public void allocateIpAddrWithIpAddrTest() throws Exception {\n+        IpAddrRequest ipAddrRequest = buildIpAddrRequest();\n+        IpAddrAlloc ipAddrAlloc = ipAddrRangeRepo.allocateIpAddr(ipAddrRequest);\n+        assertNotNull(ipAddrAlloc);\n+        assertEquals(ipAddrAlloc.getIpAddr(), UnitTestConfig.ip1);\n+        assertEquals(ipAddrAlloc.getState(), UnitTestConfig.activated);\n+    }\n+\n+    @Test\n+    public void allocateIpAddrWithoutIpAddrTest() throws Exception {\n+        IpAddrRequest ipAddrRequest = buildIpAddrRequest();\n+        ipAddrRequest.setIp(null);\n+        IpAddrAlloc ipAddrAlloc = ipAddrRangeRepo.allocateIpAddr(ipAddrRequest);\n+        assertNotNull(ipAddrAlloc);\n+        assertEquals(ipAddrAlloc.getIpAddr(), UnitTestConfig.ip1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab641562449f1d5eaca9b4a87c2d168d7b728c7"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExMDIzNQ==", "bodyText": "Is the ip range selected deterministically or randomly, if more than more?", "url": "https://github.com/futurewei-cloud/alcor/pull/272#discussion_r448110235", "createdAt": "2020-07-01T04:36:52Z", "author": {"login": "xieus"}, "path": "services/private_ip_manager/src/test/java/com/futurewei/alcor/privateipmanager/repo/IpAddrTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.privateipmanager.repo;\n+\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.MockCache;\n+import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.privateipmanager.config.UnitTestConfig;\n+import com.futurewei.alcor.privateipmanager.entity.IpAddrAlloc;\n+import com.futurewei.alcor.privateipmanager.entity.IpAddrRange;\n+import com.futurewei.alcor.privateipmanager.entity.VpcIpRange;\n+import com.futurewei.alcor.privateipmanager.exception.IpAddrAllocNotFoundException;\n+import com.futurewei.alcor.privateipmanager.exception.IpAddrNotEnoughException;\n+import com.futurewei.alcor.privateipmanager.exception.IpRangeNotFoundException;\n+import com.futurewei.alcor.privateipmanager.exception.NotFoundIpRangeFromVpc;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRangeRequest;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static com.futurewei.alcor.privateipmanager.util.IpAddressBuilder.buildIpAddrRangeRequest;\n+import static com.futurewei.alcor.privateipmanager.util.IpAddressBuilder.buildIpAddrRequest;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.*;\n+\n+public class IpAddrTest {\n+    private IpAddrRangeRepo ipAddrRangeRepo;\n+    private ICache<String, IpAddrRange> ipAddrRangeCache;\n+    private ICache<String, VpcIpRange> vpcIpRangeCache;\n+    private Transaction transaction;\n+\n+    @BeforeEach\n+    public void beforeEachTest() throws Exception {\n+        transaction = mock(Transaction.class);\n+        ipAddrRangeCache = spy(new MockCache<>(transaction));\n+        vpcIpRangeCache = spy(new MockCache<>(transaction));\n+\n+        ipAddrRangeRepo = new IpAddrRangeRepo(ipAddrRangeCache, vpcIpRangeCache);\n+\n+        when(transaction.start()).thenReturn(transaction);\n+\n+        IpAddrRangeRequest ipAddrRangeRequest = buildIpAddrRangeRequest();\n+        ipAddrRangeRepo.createIpAddrRange(ipAddrRangeRequest);\n+    }\n+\n+    @Test\n+    public void allocateIpAddrWithIpAddrTest() throws Exception {\n+        IpAddrRequest ipAddrRequest = buildIpAddrRequest();\n+        IpAddrAlloc ipAddrAlloc = ipAddrRangeRepo.allocateIpAddr(ipAddrRequest);\n+        assertNotNull(ipAddrAlloc);\n+        assertEquals(ipAddrAlloc.getIpAddr(), UnitTestConfig.ip1);\n+        assertEquals(ipAddrAlloc.getState(), UnitTestConfig.activated);\n+    }\n+\n+    @Test\n+    public void allocateIpAddrWithoutIpAddrTest() throws Exception {\n+        IpAddrRequest ipAddrRequest = buildIpAddrRequest();\n+        ipAddrRequest.setIp(null);\n+        IpAddrAlloc ipAddrAlloc = ipAddrRangeRepo.allocateIpAddr(ipAddrRequest);\n+        assertNotNull(ipAddrAlloc);\n+        assertEquals(ipAddrAlloc.getIpAddr(), UnitTestConfig.ip1);\n+        assertEquals(ipAddrAlloc.getState(), UnitTestConfig.activated);\n+    }\n+\n+    @Test\n+    public void allocateIpAddrWithoutRangeIdTest() throws Exception {\n+        IpAddrRequest ipAddrRequest = buildIpAddrRequest();\n+        ipAddrRequest.setRangeId(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab641562449f1d5eaca9b4a87c2d168d7b728c7"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2181, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}