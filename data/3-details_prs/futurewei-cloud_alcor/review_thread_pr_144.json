{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MTE3ODUy", "number": 144, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozNjowN1rODttw_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDo0NjowOVrODt_NHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjYyMzMzOnYy", "diffSide": "RIGHT", "path": "kubernetes/services/api-gateway.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozNjowN1rOF_ThXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMjoyNDo1OVrOF_-qRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNDQ0NQ==", "bodyText": "As discussed in teams, we want to use the docker image tag to track the image version, maybe that would come later?", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r401924445", "createdAt": "2020-04-01T21:36:07Z", "author": {"login": "er1cthe0ne"}, "path": "kubernetes/services/api-gateway.yaml", "diffHunk": "@@ -15,7 +15,8 @@ spec:\n         app: apimanager\n     spec:\n       containers:\n-        - image: zhonghaolyu/repo:apiKube4\n+        #- image: zhonghaolyu/repo:apiKube4\n+        - image: fwnetworking/controller:apiKube1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0MTQ3Mg==", "bodyText": "@kevin-zhonghao I believe you made the change. Could you push your change please?", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r401941472", "createdAt": "2020-04-01T22:14:35Z", "author": {"login": "xieus"}, "path": "kubernetes/services/api-gateway.yaml", "diffHunk": "@@ -15,7 +15,8 @@ spec:\n         app: apimanager\n     spec:\n       containers:\n-        - image: zhonghaolyu/repo:apiKube4\n+        #- image: zhonghaolyu/repo:apiKube4\n+        - image: fwnetworking/controller:apiKube1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNDQ0NQ=="}, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYzMTIzOA==", "bodyText": "NP, I will do it right now ~", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r402631238", "createdAt": "2020-04-02T22:24:59Z", "author": {"login": "kevin-zhonghao"}, "path": "kubernetes/services/api-gateway.yaml", "diffHunk": "@@ -15,7 +15,8 @@ spec:\n         app: apimanager\n     spec:\n       containers:\n-        - image: zhonghaolyu/repo:apiKube4\n+        #- image: zhonghaolyu/repo:apiKube4\n+        - image: fwnetworking/controller:apiKube1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNDQ0NQ=="}, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjYyNTc1OnYy", "diffSide": "RIGHT", "path": "kubernetes/services/route_manager.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozNjo1NlrOF_Ti1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozNjo1NlrOF_Ti1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNDgyMQ==", "bodyText": "remove the comment?", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r401924821", "createdAt": "2020-04-01T21:36:56Z", "author": {"login": "er1cthe0ne"}, "path": "kubernetes/services/route_manager.yaml", "diffHunk": "@@ -0,0 +1,37 @@\n+apiVersion: apps/v1\n+kind: Deployment\n+metadata:\n+  labels:\n+    app: routemanager\n+  name: routemanager\n+spec:\n+  selector:\n+    matchLabels:\n+      app: routemanager\n+  replicas: 1\n+  template:\n+    metadata:\n+      labels:\n+        app: routemanager\n+    spec:\n+      containers:\n+        #- image: zhonghaolyu/repo:routeKube", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjYzMjEyOnYy", "diffSide": "RIGHT", "path": "kubernetes/services/vpc_manager.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozOTowOFrOF_TmzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozOTowOFrOF_TmzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNTgzNg==", "bodyText": "ditto", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r401925836", "createdAt": "2020-04-01T21:39:08Z", "author": {"login": "er1cthe0ne"}, "path": "kubernetes/services/vpc_manager.yaml", "diffHunk": "@@ -15,7 +15,8 @@ spec:\n         app: vpcmanager\n     spec:\n       containers:\n-        - image: zhonghaolyu/repo:test1\n+        #- image: zhonghaolyu/repo:vpcKube2\n+        - image: fwnetworking/controller:vpcKube1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjY0MTQ5OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/config/RedisConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo0MjoyNlrOF_TspQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo0MjoyNlrOF_TspQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNzMzMw==", "bodyText": "Looks like there is an extra empty line :)?", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r401927333", "createdAt": "2020-04-01T21:42:26Z", "author": {"login": "er1cthe0ne"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/config/RedisConfiguration.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.route.config;\n+\n+import com.futurewei.alcor.common.repo.ICachePublisher;\n+import com.futurewei.alcor.common.service.RedisListener;\n+import com.futurewei.alcor.route.entity.RouteState;\n+import com.futurewei.alcor.route.service.RedisPublisher;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.redis.connection.RedisStandaloneConfiguration;\n+import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.listener.ChannelTopic;\n+import org.springframework.data.redis.listener.RedisMessageListenerContainer;\n+import org.springframework.data.redis.listener.adapter.MessageListenerAdapter;\n+import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n+import org.springframework.data.redis.serializer.StringRedisSerializer;\n+\n+@Configuration\n+@ComponentScan({\"com.futurewei.alcor.route.service\", \"com.futurewei.alcor.common.service\"})\n+@EntityScan({\"com.futurewei.alcor.route.entity}\", \"com.futurewei.alcor.common.entity\"})\n+public class RedisConfiguration {\n+\n+    @Value(\"${spring.redis.host}\")\n+    private String redisHostName;\n+\n+    @Value(\"${spring.redis.port}\")\n+    private int redisHostPort;\n+\n+    @Bean\n+    LettuceConnectionFactory lettuceConnectionFactory() {\n+        RedisStandaloneConfiguration configuration = new RedisStandaloneConfiguration();\n+        configuration.setHostName(redisHostName);\n+        configuration.setPort(redisHostPort);\n+        return new LettuceConnectionFactory(configuration);\n+    }\n+\n+    @Bean\n+    public RedisTemplate<String, RouteState> redisRouteTemplate() {\n+        final RedisTemplate<String, RouteState> template = new RedisTemplate<String, RouteState>();\n+        template.setConnectionFactory(lettuceConnectionFactory());\n+        template.setKeySerializer(new StringRedisSerializer());\n+        template.setHashValueSerializer(new Jackson2JsonRedisSerializer<RouteState>(RouteState.class));\n+        template.setValueSerializer(new Jackson2JsonRedisSerializer<RouteState>(RouteState.class));\n+        return template;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjY0NDMwOnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo0MzoyOVrOF_TucQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNToyMzoyM1rOF_wkwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNzc5Mw==", "bodyText": "we will need the copy right header for each source file.", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r401927793", "createdAt": "2020-04-01T21:43:29Z", "author": {"login": "er1cthe0ne"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteController.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.futurewei.alcor.route.controller;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwMDQ0OQ==", "bodyText": "Updated.", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r402400449", "createdAt": "2020-04-02T15:23:23Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteController.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.futurewei.alcor.route.controller;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNzc5Mw=="}, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjY1MzY0OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo0NjoxNlrOF_Tzug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNToyNzoxOFrOF_ww2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyOTE0Ng==", "bodyText": "I am curious, what is the benefit of catching the ParameterNullOrEmptyException and just rethrow it after?", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r401929146", "createdAt": "2020-04-01T21:46:16Z", "author": {"login": "er1cthe0ne"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteController.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.route.dao.RouteRedisRepository;\n+import com.futurewei.alcor.route.entity.RouteState;\n+import com.futurewei.alcor.route.entity.RouteStateJson;\n+import com.futurewei.alcor.route.entity.*;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+@RestController\n+public class RouteController {\n+\n+    @Autowired\n+    private RouteRedisRepository routeRedisRepository;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/vpcs/{vpcId}/routes/{routeId}\"})\n+    public RouteStateJson getRule (@PathVariable String vpcId, @PathVariable String routeId) throws Exception {\n+\n+        RouteState routeState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcId);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routeId);\n+\n+            routeState = this.routeRedisRepository.findItem(routeId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (routeState == null) {\n+            //TODO: REST error code\n+            return new RouteStateJson();\n+        }\n+\n+        return new RouteStateJson(routeState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/vpcs/{vpcId}/routes\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public RouteStateJson createVpcDefaultRoute(@PathVariable String vpcId, @RequestBody VpcStateJson resource) throws Exception {\n+        RouteState routeState= null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcId);\n+\n+            VpcState inVpcState = resource.getVpc();\n+            RestPreconditionsUtil.verifyResourceNotNull(inVpcState);\n+\n+            String id = UUID.randomUUID().toString();\n+            String projectId = inVpcState.getProjectId();\n+            String destination = inVpcState.getCidr();\n+            String routeTableId = UUID.randomUUID().toString();\n+\n+            routeState = new RouteState(projectId, id, \"default_route_rule\", \"\",\n+                    destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, RouteConstant.DEFAULT_ROUTE_TABLE_TYPE, routeTableId);\n+\n+            this.routeRedisRepository.addItem(routeState);\n+        } catch (ParameterNullOrEmptyException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwMzU0NQ==", "bodyText": "See the comments there. We would need to catch that and throw different Neutron-compatible error codes for clients. See #130", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r402403545", "createdAt": "2020-04-02T15:27:18Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteController.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.route.dao.RouteRedisRepository;\n+import com.futurewei.alcor.route.entity.RouteState;\n+import com.futurewei.alcor.route.entity.RouteStateJson;\n+import com.futurewei.alcor.route.entity.*;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+@RestController\n+public class RouteController {\n+\n+    @Autowired\n+    private RouteRedisRepository routeRedisRepository;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/vpcs/{vpcId}/routes/{routeId}\"})\n+    public RouteStateJson getRule (@PathVariable String vpcId, @PathVariable String routeId) throws Exception {\n+\n+        RouteState routeState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcId);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routeId);\n+\n+            routeState = this.routeRedisRepository.findItem(routeId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (routeState == null) {\n+            //TODO: REST error code\n+            return new RouteStateJson();\n+        }\n+\n+        return new RouteStateJson(routeState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/vpcs/{vpcId}/routes\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public RouteStateJson createVpcDefaultRoute(@PathVariable String vpcId, @RequestBody VpcStateJson resource) throws Exception {\n+        RouteState routeState= null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcId);\n+\n+            VpcState inVpcState = resource.getVpc();\n+            RestPreconditionsUtil.verifyResourceNotNull(inVpcState);\n+\n+            String id = UUID.randomUUID().toString();\n+            String projectId = inVpcState.getProjectId();\n+            String destination = inVpcState.getCidr();\n+            String routeTableId = UUID.randomUUID().toString();\n+\n+            routeState = new RouteState(projectId, id, \"default_route_rule\", \"\",\n+                    destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, RouteConstant.DEFAULT_ROUTE_TABLE_TYPE, routeTableId);\n+\n+            this.routeRedisRepository.addItem(routeState);\n+        } catch (ParameterNullOrEmptyException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyOTE0Ng=="}, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjkyNzM2OnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/.mvn/wrapper/MavenWrapperDownloader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzozOTo0N1rOF_WaeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzozOTo0N1rOF_WaeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MTgzMw==", "bodyText": "this /* ... */ comment style is different from other places. Maybe we want to keep it consistent by using '//' only?", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r401971833", "createdAt": "2020-04-01T23:39:47Z", "author": {"login": "er1cthe0ne"}, "path": "services/vpc_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjkyODQzOnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/.mvn/wrapper/MavenWrapperDownloader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzo0MDoyMlrOF_WbFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzo0MDoyMlrOF_WbFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MTk5MQ==", "bodyText": "maybe at least log an error here?", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r401971991", "createdAt": "2020-04-01T23:40:22Z", "author": {"login": "er1cthe0ne"}, "path": "services/vpc_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if (mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if (mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjkzMjE3OnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzo0MjoyN1rOF_Wdig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo0Nzo1MFrOF_sDeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MjYxOA==", "bodyText": "would the code look better if we just do:\nimport com.futurewei.alcor.vpcmanager.entity.*;", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r401972618", "createdAt": "2020-04-01T23:42:27Z", "author": {"login": "er1cthe0ne"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java", "diffHunk": "@@ -25,10 +25,16 @@\n import com.futurewei.alcor.vpcmanager.entity.VpcState;\n import com.futurewei.alcor.vpcmanager.entity.VpcStateJson;\n import com.futurewei.alcor.vpcmanager.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.vpcmanager.entity.RouteWebJson;\n+import com.futurewei.alcor.vpcmanager.entity.RouteWebObject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMyNjM5Mw==", "bodyText": "See more than 2 references in the package, it will be switched to * as the current code optimization pattern is.", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r402326393", "createdAt": "2020-04-02T13:47:50Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java", "diffHunk": "@@ -25,10 +25,16 @@\n import com.futurewei.alcor.vpcmanager.entity.VpcState;\n import com.futurewei.alcor.vpcmanager.entity.VpcStateJson;\n import com.futurewei.alcor.vpcmanager.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.vpcmanager.entity.RouteWebJson;\n+import com.futurewei.alcor.vpcmanager.entity.RouteWebObject;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MjYxOA=="}, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjkzNDUwOnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzo0MzozMlrOF_We3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzo0MzozMlrOF_We3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3Mjk1OQ==", "bodyText": "need to remove the commented out code or explain why we want to leave it here.", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r401972959", "createdAt": "2020-04-01T23:43:32Z", "author": {"login": "er1cthe0ne"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java", "diffHunk": "@@ -40,6 +46,37 @@\n     @Autowired\n     private VpcRedisRepository vpcRedisRepository;\n \n+    private RestTemplate restTemplate = new RestTemplate();\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/rule/{projectid}/vpcs/{vpcid}\"})\n+    public String getRuleByVpcId(@PathVariable String projectid, @PathVariable String vpcid) throws Exception {\n+\n+//        VpcState vpcState = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTQ4MDYyOnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/.mvn/wrapper/MavenWrapperDownloader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDo0NjowOVrOF_uyVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMjozNjo1N1rOF_-8AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3MTE1OQ==", "bodyText": "@kevin-zhonghao Do we definitely need this one or it is okay to remove it?", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r402371159", "createdAt": "2020-04-02T14:46:09Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYzNTc3Nw==", "bodyText": "Actually we don't have to keep it, but I think we can have it ~ what's your suggestion?", "url": "https://github.com/futurewei-cloud/alcor/pull/144#discussion_r402635777", "createdAt": "2020-04-02T22:36:57Z", "author": {"login": "kevin-zhonghao"}, "path": "services/vpc_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3MTE1OQ=="}, "originalCommit": {"oid": "3bc699be2963ea2a70ef531742e3dcd6020c9e3c"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4694, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}