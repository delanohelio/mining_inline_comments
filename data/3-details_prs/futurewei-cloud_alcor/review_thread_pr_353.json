{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTY4MTIz", "number": 353, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzozMToyN1rOEYjc0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODo1MzozMVrOEZnG0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTgyMDk3OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzozMToyN1rOHA86pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzoyODo1N1rOHB-KLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MDEwMw==", "bodyText": "Can we use our own Alcor logger?", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470760103", "createdAt": "2020-08-14T17:31:27Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -72,12 +72,58 @@\n     @Autowired\n     private SubnetService subnetService;\n \n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/subnets/{rangeId}\"})\n+    @DurationStatistics\n+    public Integer getUsedIPByRangeId(@PathVariable String rangeId) throws Exception {\n+\n+        Integer usedIps = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(rangeId);\n+\n+            usedIps = this.subnetService.getUsedIpByRangeId(rangeId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            logger.error(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgyOTAzNg==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r471829036", "createdAt": "2020-08-17T23:28:57Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -72,12 +72,58 @@\n     @Autowired\n     private SubnetService subnetService;\n \n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/subnets/{rangeId}\"})\n+    @DurationStatistics\n+    public Integer getUsedIPByRangeId(@PathVariable String rangeId) throws Exception {\n+\n+        Integer usedIps = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(rangeId);\n+\n+            usedIps = this.subnetService.getUsedIpByRangeId(rangeId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            logger.error(e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MDEwMw=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTgyNjA1OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzozMzoxN1rOHA896w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo0NjowMVrOHBzpfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MDkzOQ==", "bodyText": "Is ParameterNullOrEmptyException our own exception with a specific error code? If that is the case, it would be a good idea to throw ParameterNullOrEmptyException directly.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470760939", "createdAt": "2020-08-14T17:33:17Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -72,12 +72,58 @@\n     @Autowired\n     private SubnetService subnetService;\n \n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/subnets/{rangeId}\"})\n+    @DurationStatistics\n+    public Integer getUsedIPByRangeId(@PathVariable String rangeId) throws Exception {\n+\n+        Integer usedIps = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(rangeId);\n+\n+            usedIps = this.subnetService.getUsedIpByRangeId(rangeId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            logger.error(e.getMessage());\n+            throw new Exception(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NjgyOA==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r471656828", "createdAt": "2020-08-17T17:46:01Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -72,12 +72,58 @@\n     @Autowired\n     private SubnetService subnetService;\n \n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/subnets/{rangeId}\"})\n+    @DurationStatistics\n+    public Integer getUsedIPByRangeId(@PathVariable String rangeId) throws Exception {\n+\n+        Integer usedIps = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(rangeId);\n+\n+            usedIps = this.subnetService.getUsedIpByRangeId(rangeId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            logger.error(e.getMessage());\n+            throw new Exception(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MDkzOQ=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTgyOTIwOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzozNDoyMFrOHA8_2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODo0MjoxMFrOHChUCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MTQzMg==", "bodyText": "Can we add handling of exceptions other than ParameterNullOrEmptyException?", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470761432", "createdAt": "2020-08-14T17:34:20Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -72,12 +72,58 @@\n     @Autowired\n     private SubnetService subnetService;\n \n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/subnets/{rangeId}\"})\n+    @DurationStatistics\n+    public Integer getUsedIPByRangeId(@PathVariable String rangeId) throws Exception {\n+\n+        Integer usedIps = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(rangeId);\n+\n+            usedIps = this.subnetService.getUsedIpByRangeId(rangeId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            logger.error(e.getMessage());\n+            throw new Exception(e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2MjQzOQ==", "bodyText": "NP", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r471662439", "createdAt": "2020-08-17T17:55:43Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -72,12 +72,58 @@\n     @Autowired\n     private SubnetService subnetService;\n \n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/subnets/{rangeId}\"})\n+    @DurationStatistics\n+    public Integer getUsedIPByRangeId(@PathVariable String rangeId) throws Exception {\n+\n+        Integer usedIps = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(rangeId);\n+\n+            usedIps = this.subnetService.getUsedIpByRangeId(rangeId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            logger.error(e.getMessage());\n+            throw new Exception(e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MTQzMg=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNDMwNQ==", "bodyText": "For the case of UsedIpsIsNotCorrect, we can directly \"throw e\" instead of creating a new \"empty\" exception with the same type.\nFor the case of ParameterNullOrEmptyException, the new RangeIdIsNullOrEmpty exception doesn't have the actual rangeId. Please include it.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r472404305", "createdAt": "2020-08-18T18:40:49Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -72,12 +72,58 @@\n     @Autowired\n     private SubnetService subnetService;\n \n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/subnets/{rangeId}\"})\n+    @DurationStatistics\n+    public Integer getUsedIPByRangeId(@PathVariable String rangeId) throws Exception {\n+\n+        Integer usedIps = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(rangeId);\n+\n+            usedIps = this.subnetService.getUsedIpByRangeId(rangeId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            logger.error(e.getMessage());\n+            throw new Exception(e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MTQzMg=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNTAwMA==", "bodyText": "Also please remove the TODO comment line as it is actually done.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r472405000", "createdAt": "2020-08-18T18:42:10Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -72,12 +72,58 @@\n     @Autowired\n     private SubnetService subnetService;\n \n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/subnets/{rangeId}\"})\n+    @DurationStatistics\n+    public Integer getUsedIPByRangeId(@PathVariable String rangeId) throws Exception {\n+\n+        Integer usedIps = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(rangeId);\n+\n+            usedIps = this.subnetService.getUsedIpByRangeId(rangeId);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            logger.error(e.getMessage());\n+            throw new Exception(e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MTQzMg=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTgzMTg3OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/SubnetService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzozNTowOFrOHA9BZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzozNTowOFrOHA9BZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MTgyOA==", "bodyText": "Minor: There is an extra space.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470761828", "createdAt": "2020-08-14T17:35:08Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/SubnetService.java", "diffHunk": "@@ -53,6 +53,9 @@ public void fallbackOperation (AtomicReference<RouteWebJson> routeResponseAtomic\n     // Verify cidr block\n     public boolean verifyCidrBlock (String cidr) throws ParameterUnexpectedValueException, FallbackException;\n \n+    // Get used_ips for ip range\n+    public  Integer getUsedIpByRangeId (String rangeId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTg0NDE1OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzozOToyMlrOHA9I7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0MToyOVrOHB2Z8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2Mzc1Nw==", "bodyText": "I think the variable shouldn't be called \"request\" as it is actual a result (I know the class name is confusing).\nRecommend to rename the variable to \"ipAddrRange\".", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470763757", "createdAt": "2020-08-14T17:39:22Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -319,6 +318,21 @@ public boolean verifyCidrBlock(String cidr) throws FallbackException {\n \n     }\n \n+    @Override\n+    @DurationStatistics\n+    public Integer getUsedIpByRangeId(String rangeId) {\n+        String ipManagerServiceUrl = ipUrl + \"range\" + \"/\" + rangeId;\n+        IpAddrRangeRequest ipAddrRangeRequest = restTemplate.getForObject(ipManagerServiceUrl, IpAddrRangeRequest.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwMjAwMQ==", "bodyText": "got it", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r471702001", "createdAt": "2020-08-17T18:41:29Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -319,6 +318,21 @@ public boolean verifyCidrBlock(String cidr) throws FallbackException {\n \n     }\n \n+    @Override\n+    @DurationStatistics\n+    public Integer getUsedIpByRangeId(String rangeId) {\n+        String ipManagerServiceUrl = ipUrl + \"range\" + \"/\" + rangeId;\n+        IpAddrRangeRequest ipAddrRangeRequest = restTemplate.getForObject(ipManagerServiceUrl, IpAddrRangeRequest.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2Mzc1Nw=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTg0NzkwOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MDozMFrOHA9LHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzowOToxMVrOHB9x0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2NDMxOQ==", "bodyText": "I think we need to either add validation before the conversion or add exception handling.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470764319", "createdAt": "2020-08-14T17:40:30Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -319,6 +318,21 @@ public boolean verifyCidrBlock(String cidr) throws FallbackException {\n \n     }\n \n+    @Override\n+    @DurationStatistics\n+    public Integer getUsedIpByRangeId(String rangeId) {\n+        String ipManagerServiceUrl = ipUrl + \"range\" + \"/\" + rangeId;\n+        IpAddrRangeRequest ipAddrRangeRequest = restTemplate.getForObject(ipManagerServiceUrl, IpAddrRangeRequest.class);\n+        if (ipAddrRangeRequest == null) {\n+            logger.info(\"can not find ipAddrRangeRequest by range id\");\n+            return null;\n+        }\n+\n+        Integer usedIps = Integer.parseInt(String.valueOf(ipAddrRangeRequest.getUsedIps()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgyMjgwMg==", "bodyText": "okay", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r471822802", "createdAt": "2020-08-17T23:09:11Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -319,6 +318,21 @@ public boolean verifyCidrBlock(String cidr) throws FallbackException {\n \n     }\n \n+    @Override\n+    @DurationStatistics\n+    public Integer getUsedIpByRangeId(String rangeId) {\n+        String ipManagerServiceUrl = ipUrl + \"range\" + \"/\" + rangeId;\n+        IpAddrRangeRequest ipAddrRangeRequest = restTemplate.getForObject(ipManagerServiceUrl, IpAddrRangeRequest.class);\n+        if (ipAddrRangeRequest == null) {\n+            logger.info(\"can not find ipAddrRangeRequest by range id\");\n+            return null;\n+        }\n+\n+        Integer usedIps = Integer.parseInt(String.valueOf(ipAddrRangeRequest.getUsedIps()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2NDMxOQ=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTg1MDgwOnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/NetworkIPAvailabilityController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MToyN1rOHA9M5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MToyN1rOHA9M5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2NDc3Mw==", "bodyText": "Good to see those query param have been added \ud83d\udc4d", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470764773", "createdAt": "2020-08-14T17:41:27Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/NetworkIPAvailabilityController.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.vpcmanager.controller;\n+\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.vpcmanager.service.NetworkIPAvailabilityService;\n+import com.futurewei.alcor.vpcmanager.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.vpc.NetworkIPAvailabilitiesWebJson;\n+import com.futurewei.alcor.web.entity.vpc.NetworkIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.NetworkIPAvailabilityWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+\n+@RestController\n+public class NetworkIPAvailabilityController {\n+\n+    @Autowired\n+    NetworkIPAvailabilityService networkIPAvailabilityService;\n+\n+    /**\n+     * Shows network IP availability details for a network.\n+     * @param vpcid\n+     * @return Network IP Availability Entity Json\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/network-ip-availabilities/{vpcid}\"})\n+    public NetworkIPAvailabilityWebJson getNetworkIPAvailabilityByVpcId(@PathVariable String vpcid) throws Exception {\n+\n+        NetworkIPAvailabilityEntity networkIPAvailabilityEntity = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+\n+            networkIPAvailabilityEntity = this.networkIPAvailabilityService.getNetworkIPAvailability(vpcid);\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        }\n+\n+        if (networkIPAvailabilityEntity == null) {\n+            return new NetworkIPAvailabilityWebJson();\n+        }\n+\n+        return new NetworkIPAvailabilityWebJson(networkIPAvailabilityEntity);\n+    }\n+\n+    /**\n+     * Lists network IP availability of all networks.\n+     * @return Network IP Availabilities Json\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/network-ip-availabilities\"})\n+    public NetworkIPAvailabilitiesWebJson getNetworkIPAvailabilities(@RequestParam(value = \"network_id\", required = false) String vpcId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjAwODk0OnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/NetworkIPAvailabilityServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODoyNjowMVrOHA-xGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzoxMDo0NlrOHB9z8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5MDQyNw==", "bodyText": "It would be a good idea to add vpc id to the message.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470790427", "createdAt": "2020-08-14T18:26:01Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/NetworkIPAvailabilityServiceImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.vpcmanager.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.vpcmanager.service.NetworkIPAvailabilityService;\n+import com.futurewei.alcor.vpcmanager.service.VpcDatabaseService;\n+import com.futurewei.alcor.vpcmanager.utils.IPUtil;\n+import com.futurewei.alcor.web.entity.subnet.AllocationPool;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.vpc.NetworkIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.SubnetIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class NetworkIPAvailabilityServiceImpl implements NetworkIPAvailabilityService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    VpcDatabaseService vpcDatabaseService;\n+\n+    @Value(\"${microservices.subnet.service.url}\")\n+    private String subnetUrl;\n+\n+    private RestTemplate restTemplate = new RestTemplate();\n+\n+    @Override\n+    public NetworkIPAvailabilityEntity getNetworkIPAvailability(String vpcid) throws ResourceNotFoundException, ResourcePersistenceException {\n+\n+        NetworkIPAvailabilityEntity networkIPAvailabilityEntity = new NetworkIPAvailabilityEntity();\n+\n+        VpcEntity vpcEntity = this.vpcDatabaseService.getByVpcId(vpcid);\n+        if (vpcEntity == null) {\n+            throw new ResourceNotFoundException(\"vpc can not be found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgyMzM0NQ==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r471823345", "createdAt": "2020-08-17T23:10:46Z", "author": {"login": "kevin-zhonghao"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/NetworkIPAvailabilityServiceImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.vpcmanager.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.vpcmanager.service.NetworkIPAvailabilityService;\n+import com.futurewei.alcor.vpcmanager.service.VpcDatabaseService;\n+import com.futurewei.alcor.vpcmanager.utils.IPUtil;\n+import com.futurewei.alcor.web.entity.subnet.AllocationPool;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.vpc.NetworkIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.SubnetIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class NetworkIPAvailabilityServiceImpl implements NetworkIPAvailabilityService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    VpcDatabaseService vpcDatabaseService;\n+\n+    @Value(\"${microservices.subnet.service.url}\")\n+    private String subnetUrl;\n+\n+    private RestTemplate restTemplate = new RestTemplate();\n+\n+    @Override\n+    public NetworkIPAvailabilityEntity getNetworkIPAvailability(String vpcid) throws ResourceNotFoundException, ResourcePersistenceException {\n+\n+        NetworkIPAvailabilityEntity networkIPAvailabilityEntity = new NetworkIPAvailabilityEntity();\n+\n+        VpcEntity vpcEntity = this.vpcDatabaseService.getByVpcId(vpcid);\n+        if (vpcEntity == null) {\n+            throw new ResourceNotFoundException(\"vpc can not be found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5MDQyNw=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjA0MDY5OnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/NetworkIPAvailabilityServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODozMjowN1rOHA_FYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzo1ODo0MFrOHB-rqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5NTYxNg==", "bodyText": "This part could become slow when the number of VPC exceed certain threshold. It loads all the vpc states to the memory from DB cache/storage, and filter them on app level, not the most efficient way.\nPls check the LIST method (like LIST vpc, subnet, port etc.) and use database query. @kevin-zhonghao", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470795616", "createdAt": "2020-08-14T18:32:07Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/NetworkIPAvailabilityServiceImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.vpcmanager.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.vpcmanager.service.NetworkIPAvailabilityService;\n+import com.futurewei.alcor.vpcmanager.service.VpcDatabaseService;\n+import com.futurewei.alcor.vpcmanager.utils.IPUtil;\n+import com.futurewei.alcor.web.entity.subnet.AllocationPool;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.vpc.NetworkIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.SubnetIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class NetworkIPAvailabilityServiceImpl implements NetworkIPAvailabilityService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    VpcDatabaseService vpcDatabaseService;\n+\n+    @Value(\"${microservices.subnet.service.url}\")\n+    private String subnetUrl;\n+\n+    private RestTemplate restTemplate = new RestTemplate();\n+\n+    @Override\n+    public NetworkIPAvailabilityEntity getNetworkIPAvailability(String vpcid) throws ResourceNotFoundException, ResourcePersistenceException {\n+\n+        NetworkIPAvailabilityEntity networkIPAvailabilityEntity = new NetworkIPAvailabilityEntity();\n+\n+        VpcEntity vpcEntity = this.vpcDatabaseService.getByVpcId(vpcid);\n+        if (vpcEntity == null) {\n+            throw new ResourceNotFoundException(\"vpc can not be found\");\n+        }\n+\n+        networkIPAvailabilityEntity = setNetworkIPAvailability(vpcEntity);\n+\n+        return networkIPAvailabilityEntity;\n+    }\n+\n+    @Override\n+    public List<NetworkIPAvailabilityEntity> getNetworkIPAvailabilities(String vpcId, String vpcName, String tenantId, String projectId) throws CacheException, ResourceNotFoundException {\n+\n+        List<NetworkIPAvailabilityEntity> networkIPAvailabilityEntities = new ArrayList<NetworkIPAvailabilityEntity>();\n+\n+        Map<String, VpcEntity> vpcStates = this.vpcDatabaseService.getAllVpcs();\n+\n+        // Filter vpcStates by request parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzNzYxMA==", "bodyText": "Got it", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r471837610", "createdAt": "2020-08-17T23:58:40Z", "author": {"login": "kevin-zhonghao"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/NetworkIPAvailabilityServiceImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.vpcmanager.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.vpcmanager.service.NetworkIPAvailabilityService;\n+import com.futurewei.alcor.vpcmanager.service.VpcDatabaseService;\n+import com.futurewei.alcor.vpcmanager.utils.IPUtil;\n+import com.futurewei.alcor.web.entity.subnet.AllocationPool;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.vpc.NetworkIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.SubnetIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class NetworkIPAvailabilityServiceImpl implements NetworkIPAvailabilityService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    VpcDatabaseService vpcDatabaseService;\n+\n+    @Value(\"${microservices.subnet.service.url}\")\n+    private String subnetUrl;\n+\n+    private RestTemplate restTemplate = new RestTemplate();\n+\n+    @Override\n+    public NetworkIPAvailabilityEntity getNetworkIPAvailability(String vpcid) throws ResourceNotFoundException, ResourcePersistenceException {\n+\n+        NetworkIPAvailabilityEntity networkIPAvailabilityEntity = new NetworkIPAvailabilityEntity();\n+\n+        VpcEntity vpcEntity = this.vpcDatabaseService.getByVpcId(vpcid);\n+        if (vpcEntity == null) {\n+            throw new ResourceNotFoundException(\"vpc can not be found\");\n+        }\n+\n+        networkIPAvailabilityEntity = setNetworkIPAvailability(vpcEntity);\n+\n+        return networkIPAvailabilityEntity;\n+    }\n+\n+    @Override\n+    public List<NetworkIPAvailabilityEntity> getNetworkIPAvailabilities(String vpcId, String vpcName, String tenantId, String projectId) throws CacheException, ResourceNotFoundException {\n+\n+        List<NetworkIPAvailabilityEntity> networkIPAvailabilityEntities = new ArrayList<NetworkIPAvailabilityEntity>();\n+\n+        Map<String, VpcEntity> vpcStates = this.vpcDatabaseService.getAllVpcs();\n+\n+        // Filter vpcStates by request parameters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5NTYxNg=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjA0NDQ0OnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/NetworkIPAvailabilityService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODozMjo1NFrOHA_Htw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODo1NDozNVrOHChuXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5NjIxNQ==", "bodyText": "This is an important interface. Please add comments to each method.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470796215", "createdAt": "2020-08-14T18:32:54Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/NetworkIPAvailabilityService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.vpcmanager.service;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.NetworkIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.List;\n+\n+public interface NetworkIPAvailabilityService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgyODgxNw==", "bodyText": "np", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r471828817", "createdAt": "2020-08-17T23:28:10Z", "author": {"login": "kevin-zhonghao"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/NetworkIPAvailabilityService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.vpcmanager.service;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.NetworkIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.List;\n+\n+public interface NetworkIPAvailabilityService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5NjIxNQ=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxMTc0Mg==", "bodyText": "Ping here.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r472411742", "createdAt": "2020-08-18T18:54:35Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/NetworkIPAvailabilityService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.vpcmanager.service;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.NetworkIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.List;\n+\n+public interface NetworkIPAvailabilityService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5NjIxNQ=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjA0OTQwOnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODozMzo1M1rOHA_LBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzoxNjo0M1rOHB97ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5NzA2MA==", "bodyText": "Pls move it before route manager url.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470797060", "createdAt": "2020-08-14T18:33:53Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/resources/application.properties", "diffHunk": "@@ -1,6 +1,7 @@\n server.port=9001\n #####Microservice url configuration######\n microservices.route.service.url=http://localhost:9003/vpcs/\n+microservices.subnet.service.url=http://localhost:9002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgyNTI3NQ==", "bodyText": "NP", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r471825275", "createdAt": "2020-08-17T23:16:43Z", "author": {"login": "kevin-zhonghao"}, "path": "services/vpc_manager/src/main/resources/application.properties", "diffHunk": "@@ -1,6 +1,7 @@\n server.port=9001\n #####Microservice url configuration######\n microservices.route.service.url=http://localhost:9003/vpcs/\n+microservices.subnet.service.url=http://localhost:9002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5NzA2MA=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjA1NTA0OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/subnet/AllocationPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODozNDo1MlrOHA_Olw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzoxNTo0OFrOHB96ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5Nzk3NQ==", "bodyText": "This is a fix to a web class. We should list the fix in the description as well.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470797975", "createdAt": "2020-08-14T18:34:52Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/subnet/AllocationPool.java", "diffHunk": "@@ -6,10 +6,10 @@\n @Data\n public class AllocationPool {\n \n-    @JsonProperty(\"start\")\n+    @JsonProperty(\"start_ip\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgyNDk5Ng==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r471824996", "createdAt": "2020-08-17T23:15:48Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/subnet/AllocationPool.java", "diffHunk": "@@ -6,10 +6,10 @@\n @Data\n public class AllocationPool {\n \n-    @JsonProperty(\"start\")\n+    @JsonProperty(\"start_ip\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5Nzk3NQ=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjA2NzI3OnYy", "diffSide": "LEFT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/vpc/VpcWebRequestObject.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODozNzoxMVrOHA_WgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODo1NjozMFrOHChycQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwMDAwMA==", "bodyText": "Is portSecurityEnabled true by default in Neutron?", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r470800000", "createdAt": "2020-08-14T18:37:11Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/vpc/VpcWebRequestObject.java", "diffHunk": "@@ -43,7 +43,7 @@\n     private Integer mtu;\n \n     @JsonProperty(\"port_security_enabled\")\n-    private boolean portSecurityEnabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgyNDg5OQ==", "bodyText": "I checked openstack, it shows that its valid values are enabled (true) and disabled (false). This value is used as the default value of port_security_enabled field of a newly created port. I think the default value is decided by ourself", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r471824899", "createdAt": "2020-08-17T23:15:36Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/vpc/VpcWebRequestObject.java", "diffHunk": "@@ -43,7 +43,7 @@\n     private Integer mtu;\n \n     @JsonProperty(\"port_security_enabled\")\n-    private boolean portSecurityEnabled = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwMDAwMA=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxMjc4NQ==", "bodyText": "We should decide the value but also need to know the Neutron behavior. Please check with @cj-chung to see if he could help here.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r472412785", "createdAt": "2020-08-18T18:56:30Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/vpc/VpcWebRequestObject.java", "diffHunk": "@@ -43,7 +43,7 @@\n     private Integer mtu;\n \n     @JsonProperty(\"port_security_enabled\")\n-    private boolean portSecurityEnabled = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwMDAwMA=="}, "originalCommit": {"oid": "736131e12fd145d221082c973add01fb4f945faa"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjg0NDY1OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODozNTowOFrOHChGAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODo1ODozMlrOHCh2wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwMTQxMA==", "bodyText": "It would be a good practice to always include actual id instead of a static error message.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r472401410", "createdAt": "2020-08-18T18:35:08Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -319,6 +319,26 @@ public boolean verifyCidrBlock(String cidr) throws FallbackException {\n \n     }\n \n+    @Override\n+    @DurationStatistics\n+    public Integer getUsedIpByRangeId(String rangeId) throws UsedIpsIsNotCorrect {\n+        String ipManagerServiceUrl = ipUrl + \"range\" + \"/\" + rangeId;\n+        IpAddrRangeRequest ipAddrRange = restTemplate.getForObject(ipManagerServiceUrl, IpAddrRangeRequest.class);\n+        if (ipAddrRange == null) {\n+            logger.info(\"can not find ipAddrRange by range id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ff0fa63cb8ab1939383e0c1c90439fa2f18ae"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxMzg4OQ==", "bodyText": "got it", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r472413889", "createdAt": "2020-08-18T18:58:32Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -319,6 +319,26 @@ public boolean verifyCidrBlock(String cidr) throws FallbackException {\n \n     }\n \n+    @Override\n+    @DurationStatistics\n+    public Integer getUsedIpByRangeId(String rangeId) throws UsedIpsIsNotCorrect {\n+        String ipManagerServiceUrl = ipUrl + \"range\" + \"/\" + rangeId;\n+        IpAddrRangeRequest ipAddrRange = restTemplate.getForObject(ipManagerServiceUrl, IpAddrRangeRequest.class);\n+        if (ipAddrRange == null) {\n+            logger.info(\"can not find ipAddrRange by range id\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwMTQxMA=="}, "originalCommit": {"oid": "6a8ff0fa63cb8ab1939383e0c1c90439fa2f18ae"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjg0OTcyOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODozNjo0NFrOHChJKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo1MTozNFrOHCjjQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwMjIxOA==", "bodyText": "if userdIPs is Long, why do we want to convert it to String, then to Integer?", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r472402218", "createdAt": "2020-08-18T18:36:44Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -319,6 +319,26 @@ public boolean verifyCidrBlock(String cidr) throws FallbackException {\n \n     }\n \n+    @Override\n+    @DurationStatistics\n+    public Integer getUsedIpByRangeId(String rangeId) throws UsedIpsIsNotCorrect {\n+        String ipManagerServiceUrl = ipUrl + \"range\" + \"/\" + rangeId;\n+        IpAddrRangeRequest ipAddrRange = restTemplate.getForObject(ipManagerServiceUrl, IpAddrRangeRequest.class);\n+        if (ipAddrRange == null) {\n+            logger.info(\"can not find ipAddrRange by range id\");\n+            return null;\n+        }\n+\n+        Long usedIPs = ipAddrRange.getUsedIps();\n+        if (usedIPs == null || usedIPs > Integer.MAX_VALUE || usedIPs < 0) {\n+            throw new UsedIpsIsNotCorrect();\n+        }\n+\n+        Integer usedIps = Integer.parseInt(String.valueOf(usedIPs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ff0fa63cb8ab1939383e0c1c90439fa2f18ae"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNTI4NA==", "bodyText": "In openstack, usedIps is integer, but in private ip manager, usedIps is Long", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r472415284", "createdAt": "2020-08-18T19:01:08Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -319,6 +319,26 @@ public boolean verifyCidrBlock(String cidr) throws FallbackException {\n \n     }\n \n+    @Override\n+    @DurationStatistics\n+    public Integer getUsedIpByRangeId(String rangeId) throws UsedIpsIsNotCorrect {\n+        String ipManagerServiceUrl = ipUrl + \"range\" + \"/\" + rangeId;\n+        IpAddrRangeRequest ipAddrRange = restTemplate.getForObject(ipManagerServiceUrl, IpAddrRangeRequest.class);\n+        if (ipAddrRange == null) {\n+            logger.info(\"can not find ipAddrRange by range id\");\n+            return null;\n+        }\n+\n+        Long usedIPs = ipAddrRange.getUsedIps();\n+        if (usedIPs == null || usedIPs > Integer.MAX_VALUE || usedIPs < 0) {\n+            throw new UsedIpsIsNotCorrect();\n+        }\n+\n+        Integer usedIps = Integer.parseInt(String.valueOf(usedIPs));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwMjIxOA=="}, "originalCommit": {"oid": "6a8ff0fa63cb8ab1939383e0c1c90439fa2f18ae"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0MTY2NA==", "bodyText": "Okay, we can directly convert Long to Integer without an intermediate step of converting it to String, right? Also, we will need to handle overflow situation.", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r472441664", "createdAt": "2020-08-18T19:51:34Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -319,6 +319,26 @@ public boolean verifyCidrBlock(String cidr) throws FallbackException {\n \n     }\n \n+    @Override\n+    @DurationStatistics\n+    public Integer getUsedIpByRangeId(String rangeId) throws UsedIpsIsNotCorrect {\n+        String ipManagerServiceUrl = ipUrl + \"range\" + \"/\" + rangeId;\n+        IpAddrRangeRequest ipAddrRange = restTemplate.getForObject(ipManagerServiceUrl, IpAddrRangeRequest.class);\n+        if (ipAddrRange == null) {\n+            logger.info(\"can not find ipAddrRange by range id\");\n+            return null;\n+        }\n+\n+        Long usedIPs = ipAddrRange.getUsedIps();\n+        if (usedIPs == null || usedIPs > Integer.MAX_VALUE || usedIPs < 0) {\n+            throw new UsedIpsIsNotCorrect();\n+        }\n+\n+        Integer usedIps = Integer.parseInt(String.valueOf(usedIPs));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwMjIxOA=="}, "originalCommit": {"oid": "6a8ff0fa63cb8ab1939383e0c1c90439fa2f18ae"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjkwNTc3OnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/NetworkIPAvailabilityServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODo1MzozMVrOHChsRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTowMTo1OVrOHCh94A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxMTIwNQ==", "bodyText": "Time to remove the commented block if we are ready :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r472411205", "createdAt": "2020-08-18T18:53:31Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/NetworkIPAvailabilityServiceImpl.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.vpcmanager.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.vpcmanager.service.NetworkIPAvailabilityService;\n+import com.futurewei.alcor.vpcmanager.service.VpcDatabaseService;\n+import com.futurewei.alcor.vpcmanager.utils.IPUtil;\n+import com.futurewei.alcor.web.entity.subnet.AllocationPool;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.vpc.NetworkIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.SubnetIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class NetworkIPAvailabilityServiceImpl implements NetworkIPAvailabilityService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    VpcDatabaseService vpcDatabaseService;\n+\n+    @Value(\"${microservices.subnet.service.url}\")\n+    private String subnetUrl;\n+\n+    private RestTemplate restTemplate = new RestTemplate();\n+\n+    /**\n+     * get network ip availability by vpc id\n+     * @param vpcid\n+     * @return\n+     * @throws ResourceNotFoundException\n+     * @throws ResourcePersistenceException\n+     */\n+    @Override\n+    public NetworkIPAvailabilityEntity getNetworkIPAvailability(String vpcid) throws ResourceNotFoundException, ResourcePersistenceException {\n+\n+        NetworkIPAvailabilityEntity networkIPAvailabilityEntity = new NetworkIPAvailabilityEntity();\n+\n+        VpcEntity vpcEntity = this.vpcDatabaseService.getByVpcId(vpcid);\n+        if (vpcEntity == null) {\n+            throw new ResourceNotFoundException(\"vpc can not be found\" + vpcid);\n+        }\n+\n+        networkIPAvailabilityEntity = setNetworkIPAvailability(vpcEntity);\n+\n+        return networkIPAvailabilityEntity;\n+    }\n+\n+    /**\n+     * list all network ip availabilities\n+     * @param queryParams\n+     * @return\n+     * @throws CacheException\n+     * @throws ResourceNotFoundException\n+     */\n+    @Override\n+    public List<NetworkIPAvailabilityEntity> getNetworkIPAvailabilities(Map<String, Object[]> queryParams) throws CacheException, ResourceNotFoundException {\n+\n+        List<NetworkIPAvailabilityEntity> networkIPAvailabilityEntities = new ArrayList<NetworkIPAvailabilityEntity>();\n+\n+        Map<String, VpcEntity> vpcStates = this.vpcDatabaseService.getAllVpcs(queryParams);\n+\n+        // Filter vpcStates by request parameters\n+//        if (vpcId != null) {\n+//            vpcStates = vpcStates.entrySet().stream()\n+//                    .filter(state -> vpcId.equalsIgnoreCase(state.getValue().getId()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a8ff0fa63cb8ab1939383e0c1c90439fa2f18ae"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNTcxMg==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/353#discussion_r472415712", "createdAt": "2020-08-18T19:01:59Z", "author": {"login": "kevin-zhonghao"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/NetworkIPAvailabilityServiceImpl.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.vpcmanager.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.vpcmanager.service.NetworkIPAvailabilityService;\n+import com.futurewei.alcor.vpcmanager.service.VpcDatabaseService;\n+import com.futurewei.alcor.vpcmanager.utils.IPUtil;\n+import com.futurewei.alcor.web.entity.subnet.AllocationPool;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.vpc.NetworkIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.SubnetIPAvailabilityEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class NetworkIPAvailabilityServiceImpl implements NetworkIPAvailabilityService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    VpcDatabaseService vpcDatabaseService;\n+\n+    @Value(\"${microservices.subnet.service.url}\")\n+    private String subnetUrl;\n+\n+    private RestTemplate restTemplate = new RestTemplate();\n+\n+    /**\n+     * get network ip availability by vpc id\n+     * @param vpcid\n+     * @return\n+     * @throws ResourceNotFoundException\n+     * @throws ResourcePersistenceException\n+     */\n+    @Override\n+    public NetworkIPAvailabilityEntity getNetworkIPAvailability(String vpcid) throws ResourceNotFoundException, ResourcePersistenceException {\n+\n+        NetworkIPAvailabilityEntity networkIPAvailabilityEntity = new NetworkIPAvailabilityEntity();\n+\n+        VpcEntity vpcEntity = this.vpcDatabaseService.getByVpcId(vpcid);\n+        if (vpcEntity == null) {\n+            throw new ResourceNotFoundException(\"vpc can not be found\" + vpcid);\n+        }\n+\n+        networkIPAvailabilityEntity = setNetworkIPAvailability(vpcEntity);\n+\n+        return networkIPAvailabilityEntity;\n+    }\n+\n+    /**\n+     * list all network ip availabilities\n+     * @param queryParams\n+     * @return\n+     * @throws CacheException\n+     * @throws ResourceNotFoundException\n+     */\n+    @Override\n+    public List<NetworkIPAvailabilityEntity> getNetworkIPAvailabilities(Map<String, Object[]> queryParams) throws CacheException, ResourceNotFoundException {\n+\n+        List<NetworkIPAvailabilityEntity> networkIPAvailabilityEntities = new ArrayList<NetworkIPAvailabilityEntity>();\n+\n+        Map<String, VpcEntity> vpcStates = this.vpcDatabaseService.getAllVpcs(queryParams);\n+\n+        // Filter vpcStates by request parameters\n+//        if (vpcId != null) {\n+//            vpcStates = vpcStates.entrySet().stream()\n+//                    .filter(state -> vpcId.equalsIgnoreCase(state.getValue().getId()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxMTIwNQ=="}, "originalCommit": {"oid": "6a8ff0fa63cb8ab1939383e0c1c90439fa2f18ae"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4642, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}