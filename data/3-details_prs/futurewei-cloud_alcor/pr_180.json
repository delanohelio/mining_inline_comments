{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNTgxMjQw", "number": 180, "title": "[Microservice] Port Manager", "bodyText": "This PR contains the following features:\n\nBasic operations such as get, create, update and delete of port.\nRollback is supported when the operation of port failed.\nAdd async executor to the lib/executor directory.\nAdd microservice rest clients to the web/restclient directory.\nMove the entities of each microservice to the web/entity directory so that it can be used when communicating between microservices.", "createdAt": "2020-04-29T09:00:39Z", "url": "https://github.com/futurewei-cloud/alcor/pull/180", "merged": true, "mergeCommit": {"oid": "bfc9d9d0ab3ff7bb75f095ef6aa17592f50a9c13"}, "closed": true, "closedAt": "2020-05-14T15:44:11Z", "author": {"login": "chenpiaoping"}, "timelineItems": {"totalCount": 65, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccbpZggFqTQwMjg1NjcxMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchPLX_gH2gAyNDEwNTgxMjQwOjdhNjE4NjAwZDA5MmRkNzYyYzkyYzEzMzg4YmFlNWQ0ZjA0NDJiYzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyODU2NzEw", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-402856710", "createdAt": "2020-04-29T16:53:05Z", "commit": {"oid": "e3499a55996576c7acb48f49b724e5c3df2c8667"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1MzowNVrOGOICLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjo0OFrOGOIbTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDg3OA==", "bodyText": "Remove lines.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r417464878", "createdAt": "2020-04-29T16:53:05Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/entity/HostState.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.common.entity;\n+\n+public class HostState {\n+    private String hostIp;\n+    private String dpType;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3499a55996576c7acb48f49b724e5c3df2c8667"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTMwOA==", "bodyText": "Need an indent", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r417471308", "createdAt": "2020-04-29T17:02:48Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/exception/AllocateIpAddrException.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.exception;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(code= HttpStatus.INTERNAL_SERVER_ERROR, reason=\"Allocate ip address error\")\n+public class AllocateIpAddrException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3499a55996576c7acb48f49b724e5c3df2c8667"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTQzOTE3", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-403943917", "createdAt": "2020-04-30T23:27:49Z", "commit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoyNzo0OVrOGO9vMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoyNzo0OVrOGO9vMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NDc1Mw==", "bodyText": "The idea of using a rollback stack to keep track of potential rollback call is good.\nThe issue, however, is that it might not work in current implementation. If an exception is thrown before rollbacks.push(ipAddressRollback), then the stack doesn't have ipAddressRollback therefore won't be able to trigger rollback during exception handling.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r418344753", "createdAt": "2020-04-30T23:27:49Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTQ2MzE1", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-403946315", "createdAt": "2020-04-30T23:34:41Z", "commit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzozNDo0MVrOGO93eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzozNDo0MVrOGO93eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0Njg3NA==", "bodyText": "The calls into various downstream microservices remain serial and sync.\nOne recommended way is to async call into multiple microservices in parallel. See the implementation of Subnet Manager for an example.\nhttps://github.com/futurewei-cloud/alcor/blob/a4db5c2b368e1a500f4defd62de174d375419392/services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r418346874", "createdAt": "2020-04-30T23:34:41Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        String rangeId = getRangeIdForPort(portState.getVpcId());\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, null);\n+\n+        List<PortState.FixedIp> fixedIps = new ArrayList<>();\n+        PortState.FixedIp fixedIp = new PortState.FixedIp();\n+\n+        fixedIp.setSubnetId(result.getSubnetId());\n+        fixedIp.setIpAddress(result.getIp());\n+        fixedIps.add(fixedIp);\n+\n+        portState.setFixedIps(fixedIps);\n+\n+        AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+        ipAddressRollback.putAllocatedIpAddress(result);\n+        rollbacks.push(ipAddressRollback);\n+    }\n+\n+    private void allocateMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        MacStateJson result = macAddressRest.allocateMacAddress(projectId, portState.getVpcId(), portState.getId());\n+        portState.setMacAddress(result.getMacState().getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        AllocateMacAddrRollback rollback = new AllocateMacAddrRollback(macAddressRest);\n+        rollback.putAllocatedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void verifyMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) {\n+        //FIXME: Not support yet\n+    }\n+\n+    private void releaseMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        macAddressRest.releaseMacAddress(portState.getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        ReleaseMacAddrRollback rollback = new ReleaseMacAddrRollback(macAddressRest);\n+        rollback.putReleasedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void setDefaultValue(PortState portState) {\n+        if (portState.getId() == null) {\n+            portState.setId(\"\");\n+        }\n+\n+        if (portState.getProjectId() == null) {\n+            portState.setProjectId(\"\");\n+        }\n+\n+        if (portState.getName() == null) {\n+            portState.setName(\"\");\n+        }\n+        if (portState.getDescription() == null) {\n+            portState.setDescription(\"\");\n+        }\n+        if (portState.getVpcId() == null) {\n+            portState.setVpcId(\"\");\n+        }\n+\n+        if (portState.getTenantId() == null) {\n+            portState.setTenantId(\"\");\n+        }\n+\n+        if (portState.getMacAddress() == null) {\n+            portState.setMacAddress(\"\");\n+        }\n+\n+        if (portState.getVethName() == null) {\n+            portState.setVethName(\"\");\n+        }\n+\n+        if (portState.getDeviceId() == null) {\n+            portState.setDeviceId(\"\");\n+        }\n+\n+        if (portState.getDeviceOwner() == null) {\n+            portState.setDeviceOwner(\"\");\n+        }\n+\n+        if (portState.getStatus() == null) {\n+            portState.setStatus(\"\");\n+        }\n+\n+        if (portState.getFixedIps() == null) {\n+            portState.setFixedIps(new ArrayList<>());\n+        }\n+\n+        if (portState.getAllowedAddressPairs() == null) {\n+            portState.setAllowedAddressPairs(new ArrayList<>());\n+        }\n+\n+        if (portState.getExtraDhcpOpts() == null) {\n+            portState.setExtraDhcpOpts(new ArrayList<>());\n+        }\n+\n+        if (portState.getSecurityGroups() == null) {\n+            portState.setSecurityGroups(new ArrayList<>());\n+        }\n+\n+        if (portState.getBindingHostId() == null) {\n+            portState.setBindingHostId(\"\");\n+        }\n+\n+        if (portState.getBindingProfile() == null) {\n+            portState.setBindingProfile(\"\");\n+        }\n+\n+        if (portState.getBindingVnicType() == null) {\n+            portState.setBindingVnicType(\"\");\n+        }\n+\n+        if (portState.getNetworkNamespace() == null) {\n+            portState.setNetworkNamespace(\"\");\n+        }\n+\n+        if (portState.getDnsName() == null) {\n+            portState.setDnsName(\"\");\n+        }\n+\n+        if (portState.getDnsAssignment() == null) {\n+            portState.setDnsAssignment(new ArrayList<>());\n+        }\n+    }\n+\n+    private PortStateJson tryCreatePortState(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 273}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTUwNjQy", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-403950642", "createdAt": "2020-04-30T23:47:36Z", "commit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0NzozNlrOGO-GBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0NzozNlrOGO-GBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MDU5Ng==", "bodyText": "It is a good idea to put all common entity classes out of an invidiual microservice.\nInstead of storing them in AlcorCommonLib, we recommend to store the entity classes in AlcorWeb which is under /web directory.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r418350596", "createdAt": "2020-04-30T23:47:36Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/entity/DeviceOwner.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.futurewei.alcor.common.entity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTYxNDgx", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-403961481", "createdAt": "2020-05-01T00:22:16Z", "commit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyMjoxNlrOGO-rOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyMjoxNlrOGO-rOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MDEyMg==", "bodyText": "This is a good util class. Move to common lib so that IP manager could use it as well?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r418360122", "createdAt": "2020-05-01T00:22:16Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/utils/Ipv4AddrUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.portmanager.utils;\n+\n+public class Ipv4AddrUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5df17053c8b70c90f14fbb5ad4673f1d96582b23", "committedDate": "2020-04-30T22:45:49Z", "message": "Add Port Manager module in main pom file"}, "afterCommit": {"oid": "81f0cda3fe739a072adc184ad8af4cc2e9b5aec4", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/81f0cda3fe739a072adc184ad8af4cc2e9b5aec4", "committedDate": "2020-05-07T07:26:53Z", "message": "call multiple microservices in parallel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "550316e62fbe636a5dd0452b65fff8fbb116d37d", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/550316e62fbe636a5dd0452b65fff8fbb116d37d", "committedDate": "2020-05-07T07:29:14Z", "message": "Merge branch 'master' into port-manager"}, "afterCommit": {"oid": "6fefe4690cfe4c56b5165b807e818a900dd2bbb5", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/6fefe4690cfe4c56b5165b807e818a900dd2bbb5", "committedDate": "2020-05-07T08:40:45Z", "message": "add some UTs for port-manager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MDAxMDA2", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-408001006", "createdAt": "2020-05-08T05:17:13Z", "commit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNToxNzoxM1rOGSZXQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNToyNjoyM1rOGSZg6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw==", "bodyText": "We should verify Subnet ID, instead of Vpc Id here.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421943107", "createdAt": "2020-05-08T05:17:13Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0NTU3Nw==", "bodyText": "Need two more calls:\n(1) One into RouteManager to get the routing rules of the subnet that this port belong to. The list of routing rules is the superset of Neutron router and could include SNAT/DNAT rules.\nFor now, I would recommend you to look into Subnet implementation regarding how to call RouteManager.\n\n  \n    \n      alcor/services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java\n    \n    \n         Line 120\n      in\n      2ae412f\n    \n    \n    \n    \n\n        \n          \n           @Override \n        \n    \n  \n\n\n(2) The other into NodeManager which is under development.\nPR: https://github.com/futurewei-cloud/alcor/pull/185/files\nThe API you could be interested in is GET /nodes/{nodeid}.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421945577", "createdAt": "2020-05-08T05:26:23Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID\n+        VpcRestWrap vpcRestWrap = new VpcRestWrap(vpcRest, rollbacks);\n+        CompletableFuture vpcFuture = AsyncExecutor.execute(vpcRestWrap::verifyVpc, portState);\n+\n+        CompletableFuture ipFuture;\n+        IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(ipAddressRest, rollbacks);\n+\n+        if (portState.getFixedIps() == null) {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::allocateIpAddress, portState);\n+        } else {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+        }\n+\n+        //Generate uuid for port\n+        if (portState.getId() == null) {\n+            portState.setId(UUID.randomUUID().toString());\n+        }\n+\n+        CompletableFuture macFuture;\n+        MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(macAddressRest, rollbacks);\n+\n+        if (portState.getMacAddress() == null) {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::allocateMacAddress, portState);\n+        } else {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::verifyMacAddress, portState);\n+        }\n+\n+        //Verify security group\n+\n+        //If port binds host, to send it's information to host\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 135}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/3f9347ed0faa742999aa8f14c53002f017baece6", "committedDate": "2020-05-07T08:42:23Z", "message": "Merge branch 'master' into port-manager"}, "afterCommit": {"oid": "f67e948570f7683e08f14ad8c5dac384fb18e1c5", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/f67e948570f7683e08f14ad8c5dac384fb18e1c5", "committedDate": "2020-05-08T09:51:57Z", "message": "verify subnet id and get range id by subnet id"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdf305c51bd573359a943ac43308bce82e13b23d", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/fdf305c51bd573359a943ac43308bce82e13b23d", "committedDate": "2020-05-09T01:14:01Z", "message": "Merge branch 'master' into port-manager"}, "afterCommit": {"oid": "c4923b2d500e8dc46d35d6cc565cf8ce33e9a34a", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c4923b2d500e8dc46d35d6cc565cf8ce33e9a34a", "committedDate": "2020-05-09T04:10:37Z", "message": "move rest bean to restwrap dir"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69fdb86908a2bd9ad73556f2f1929f96c16a29f0", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/69fdb86908a2bd9ad73556f2f1929f96c16a29f0", "committedDate": "2020-05-09T04:06:33Z", "message": "Merge branch 'master' into port-manager"}, "afterCommit": {"oid": "dd0e760565a7a8a64d7f3f342f6e448a56afcb96", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/dd0e760565a7a8a64d7f3f342f6e448a56afcb96", "committedDate": "2020-05-09T07:58:33Z", "message": "verify binding host id"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7edcb4ee10b1cf554c6cc5f9cef95ee311abe9d6", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/7edcb4ee10b1cf554c6cc5f9cef95ee311abe9d6", "committedDate": "2020-05-09T07:55:31Z", "message": "Merge branch 'master' into port-manager"}, "afterCommit": {"oid": "8c4831b4993c07e4c391fadf8579aaba6a2043ac", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/8c4831b4993c07e4c391fadf8579aaba6a2043ac", "committedDate": "2020-05-09T09:40:47Z", "message": "add mock ignite server & fix and enable ip manager UTs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd5d2ead32562754a138cbe7039e08232635de30", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/dd5d2ead32562754a138cbe7039e08232635de30", "committedDate": "2020-05-11T02:32:48Z", "message": "Try to undo changes to pom.xml"}, "afterCommit": {"oid": "b3f39f0e0390c43ae44e5341c260ce5f0f2762fd", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b3f39f0e0390c43ae44e5341c260ce5f0f2762fd", "committedDate": "2020-05-11T02:46:01Z", "message": "add maven-surefire-plugin back to ip manager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b528cc3d889d41524cab8fac71a2356a4d05db3b", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b528cc3d889d41524cab8fac71a2356a4d05db3b", "committedDate": "2020-05-11T03:01:25Z", "message": "Update pom.xml"}, "afterCommit": {"oid": "b3f39f0e0390c43ae44e5341c260ce5f0f2762fd", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b3f39f0e0390c43ae44e5341c260ce5f0f2762fd", "committedDate": "2020-05-11T02:46:01Z", "message": "add maven-surefire-plugin back to ip manager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2121f415417332e86e5698650a8fa88dc27dcabd", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/2121f415417332e86e5698650a8fa88dc27dcabd", "committedDate": "2020-05-11T03:12:44Z", "message": "Merge branch 'master' into port-manager"}, "afterCommit": {"oid": "b3f39f0e0390c43ae44e5341c260ce5f0f2762fd", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b3f39f0e0390c43ae44e5341c260ce5f0f2762fd", "committedDate": "2020-05-11T02:46:01Z", "message": "add maven-surefire-plugin back to ip manager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32698972bbeff421ee52f9e63adbae3ed7cc6b7b", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/32698972bbeff421ee52f9e63adbae3ed7cc6b7b", "committedDate": "2020-05-11T03:26:47Z", "message": "Merge branch 'master' into port-manager"}, "afterCommit": {"oid": "583b28c432a97d9cf89271792b23eb79543df739", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/583b28c432a97d9cf89271792b23eb79543df739", "committedDate": "2020-05-11T03:57:47Z", "message": "add maven-surefire-plugin back to ip manager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODc4NzA2", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-408878706", "createdAt": "2020-05-11T05:59:26Z", "commit": {"oid": "583b28c432a97d9cf89271792b23eb79543df739"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNTo1OToyNlrOGTNk8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNTo1OToyNlrOGTNk8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5ODU3OQ==", "bodyText": "Could we change the default Ignite port to some numbers other than 10800 and use that new default number in the application.properties? This could prevent conflicting with a running Ignite container on the 10800 port.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422798579", "createdAt": "2020-05-11T05:59:26Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.common.db.ignite;\n+\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.Ignition;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+\n+public class MockIgniteServer {\n+    private static Ignite igniteServer;\n+\n+    @BeforeClass\n+    public static void init() {\n+        try {\n+            igniteServer = Ignition.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "583b28c432a97d9cf89271792b23eb79543df739"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzA1NjE0", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-409705614", "createdAt": "2020-05-12T05:21:03Z", "commit": {"oid": "26ab3f418fe721e2ea7f79a597cef0e38626f8ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToyMTowM1rOGT2c3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToyMTowM1rOGT2c3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2ODI1Mw==", "bodyText": "@chenpiaoping I think the MockIgniteServer and MockRedisServer are very good change which we want to merge to Master quick as other services could start using that.\nIs it possible that we split this PR into two by creating a new PR solely on the Mock change, which is supposed to consist of just a few files? Let me know.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423468253", "createdAt": "2020-05-12T05:21:03Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -18,25 +18,35 @@\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.Ignition;\n+import org.apache.ignite.configuration.ClientConnectorConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26ab3f418fe721e2ea7f79a597cef0e38626f8ca"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzM0MTAw", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-409734100", "createdAt": "2020-05-12T06:31:18Z", "commit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozMToxOFrOGT33gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozOTozMFrOGT4FUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MTQ1Ng==", "bodyText": "Does lib needs spring boot?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423491456", "createdAt": "2020-05-12T06:31:18Z", "author": {"login": "xieus"}, "path": "lib/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-thymeleaf</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MjUwMA==", "bodyText": "Let us turn on port manger UTs.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423492500", "createdAt": "2020-05-12T06:33:41Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>AlcorPortManager</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>AlcorPortManager</name>\n+    <description>Alcor Port Manager Module</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.futurewei.alcor.common</groupId>\n+            <artifactId>AlcorCommonLib</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.futurewei.alcor.web</groupId>\n+            <artifactId>AlcorWeb</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.4</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <skip>true</skip>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5Mjk3OA==", "bodyText": "These are critical parameters. Need comments.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423492978", "createdAt": "2020-05-12T06:34:50Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/config/ThreadPoolExecutorConfig.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.futurewei.alcor.portmanager.config;\n+\n+public class ThreadPoolExecutorConfig {\n+\n+    public static int corePoolSize = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MzMwNA==", "bodyText": "Like it!", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423493304", "createdAt": "2020-05-12T06:35:37Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/exception/AllocateIpAddrException.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.exception;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(code= HttpStatus.INTERNAL_SERVER_ERROR, reason=\"Allocate ip address error\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NDk5NA==", "bodyText": "@chenpiaoping This PR is kind of huge with over 100 files change.  Some files are still under review.\nLet us check in small change first.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423494994", "createdAt": "2020-05-12T06:39:30Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -18,25 +18,35 @@\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.Ignition;\n+import org.apache.ignite.configuration.ClientConnectorConfiguration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2ODI1Mw=="}, "originalCommit": {"oid": "26ab3f418fe721e2ea7f79a597cef0e38626f8ca"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzUxODQ5", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-409751849", "createdAt": "2020-05-12T07:02:28Z", "commit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowMjoyOFrOGT4uyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowMjoyOFrOGT4uyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNTYwOQ==", "bodyText": "This could move to /lib once proven to be reliable in IP manager.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423505609", "createdAt": "2020-05-12T07:02:28Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/executor/AsyncExecutor.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.executor;\n+\n+import com.futurewei.alcor.portmanager.config.ThreadPoolExecutorConfig;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.*;\n+import java.util.function.Supplier;\n+\n+public class AsyncExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NzU1MTU1", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-409755155", "createdAt": "2020-05-12T07:07:49Z", "commit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowNzo0OVrOGT44_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowNzo0OVrOGT44_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwODIyMQ==", "bodyText": "We could verify the input parameters in the controller level.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423508221", "createdAt": "2020-05-12T07:07:49Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/controller/PortController.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.controller;\n+\n+\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.PortStateJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.List;\n+\n+\n+@RestController\n+public class PortController {\n+    @Autowired\n+    PortService portService;\n+\n+    @PostMapping({\"/project/{project_id}/ports\", \"v4/{project_id}/ports\"})\n+    @ResponseBody\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public PortStateJson createPortState(@PathVariable(\"project_id\") String projectId,\n+                                         @RequestBody PortStateJson portStateJson) throws Exception {\n+        return portService.createPortState(projectId, portStateJson);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23f8deca42505b95c0bd885c81eeb41bb151ba0f", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/23f8deca42505b95c0bd885c81eeb41bb151ba0f", "committedDate": "2020-05-12T12:40:09Z", "message": "enable UTs"}, "afterCommit": {"oid": "0ac75b6171e17614a20c8f296f76d4642b042073", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/0ac75b6171e17614a20c8f296f76d4642b042073", "committedDate": "2020-05-12T12:50:29Z", "message": "enable UTs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "020203ebd781da4e24ce65256d3cb8fd443f70fe", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/020203ebd781da4e24ce65256d3cb8fd443f70fe", "committedDate": "2020-05-13T06:29:24Z", "message": "Merge branch 'port-manager' of https://github.com/chenpiaoping/alcor into port-manager"}, "afterCommit": {"oid": "2070f1f335f496b739541fb6fd7ba6e33ac8c8a5", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/2070f1f335f496b739541fb6fd7ba6e33ac8c8a5", "committedDate": "2020-05-13T07:48:15Z", "message": "update doc for ip manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8d9989b395de8bc4fdba44e530188c01846b435", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b8d9989b395de8bc4fdba44e530188c01846b435", "committedDate": "2020-05-13T08:19:03Z", "message": "skips UTs when packaging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a05874e118a248435c3251c58ecd6a6f237cd31", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/6a05874e118a248435c3251c58ecd6a6f237cd31", "committedDate": "2020-05-13T08:19:11Z", "message": "port manager architecture"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ce731685c0474e73988d0d5c0dc8854d60211d", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c3ce731685c0474e73988d0d5c0dc8854d60211d", "committedDate": "2020-05-13T08:19:22Z", "message": "call multiple microservices in parallel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1bc6ff0bb5fb74cdaa533f518e583321013e793", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/e1bc6ff0bb5fb74cdaa533f518e583321013e793", "committedDate": "2020-05-13T08:19:25Z", "message": "add some UTs for port-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe0e3fb067eb206900d45560d5096ee0c853c0e6", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/fe0e3fb067eb206900d45560d5096ee0c853c0e6", "committedDate": "2020-05-13T08:19:27Z", "message": "verify subnet id and get range id by subnet id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "836ac39bc526d1148db8e69801258ef4fc01137a", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/836ac39bc526d1148db8e69801258ef4fc01137a", "committedDate": "2020-05-13T08:19:30Z", "message": "move rest bean to restwrap dir"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "228001558f2005dfcbf9de7712bba725362df3d4", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/228001558f2005dfcbf9de7712bba725362df3d4", "committedDate": "2020-05-13T08:19:32Z", "message": "verify binding host id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a173eb4b8c39b0eaa6b17f97f703b6e4f59f07a", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/4a173eb4b8c39b0eaa6b17f97f703b6e4f59f07a", "committedDate": "2020-05-13T08:19:34Z", "message": "add mock ignite server & fix and enable ip manager UTs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17520158cb77fcdc488698be23b648521c16437f", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/17520158cb77fcdc488698be23b648521c16437f", "committedDate": "2020-05-13T08:19:35Z", "message": "add maven-surefire-plugin back to ip manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b0af3b0410ff78bd8e9dbc293b4bee89a48db1d", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/4b0af3b0410ff78bd8e9dbc293b4bee89a48db1d", "committedDate": "2020-05-13T08:19:37Z", "message": "rebase from master and fix UTs failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "717fcaa025665d5a089c7c3b6dd22d10e2a02e6f", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/717fcaa025665d5a089c7c3b6dd22d10e2a02e6f", "committedDate": "2020-05-13T08:19:39Z", "message": "fix the problem of rollback failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00ffaa636f8a11d4233a3dddc2c4badba7373c90", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/00ffaa636f8a11d4233a3dddc2c4badba7373c90", "committedDate": "2020-05-13T08:20:49Z", "message": "allocate ip address from ip manager by vpc id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c5f611d8e98c22df6ae421794e672a0317ec7f9", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/4c5f611d8e98c22df6ae421794e672a0317ec7f9", "committedDate": "2020-05-13T08:20:54Z", "message": "enable UTs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a10d9063ab54ed71f9849d8b89a0b3b3c2b21bd", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/7a10d9063ab54ed71f9849d8b89a0b3b3c2b21bd", "committedDate": "2020-05-13T08:20:55Z", "message": "add some UTs for port manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b014ec928f933f8e8427dce09da60cb0e032f96d", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b014ec928f933f8e8427dce09da60cb0e032f96d", "committedDate": "2020-05-13T08:20:57Z", "message": "update doc for ip manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba946ebd2798b3326a6307fb17ef50fb6197bfad", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ba946ebd2798b3326a6307fb17ef50fb6197bfad", "committedDate": "2020-05-13T08:20:57Z", "message": "add port_manager service to pom.xml"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e3ca46b60a65954d8cbf8f870e9df7908ce8335", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5e3ca46b60a65954d8cbf8f870e9df7908ce8335", "committedDate": "2020-05-13T07:53:53Z", "message": "add port_manager service to pom.xml"}, "afterCommit": {"oid": "edcb48d722b2beec8e959615f65376d65346f52c", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/edcb48d722b2beec8e959615f65376d65346f52c", "committedDate": "2020-05-13T08:40:59Z", "message": "add Dockerfile for port manager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edcb48d722b2beec8e959615f65376d65346f52c", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/edcb48d722b2beec8e959615f65376d65346f52c", "committedDate": "2020-05-13T08:40:59Z", "message": "add Dockerfile for port manager"}, "afterCommit": {"oid": "dbb419c5b3c6087f8975f271c322b48ae92d0fa5", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/dbb419c5b3c6087f8975f271c322b48ae92d0fa5", "committedDate": "2020-05-13T08:55:01Z", "message": "rebase from master and add Dockerfile for port manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbb419c5b3c6087f8975f271c322b48ae92d0fa5", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/dbb419c5b3c6087f8975f271c322b48ae92d0fa5", "committedDate": "2020-05-13T08:55:01Z", "message": "rebase from master and add Dockerfile for port manager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca93992862ad815a1c79d4c497ebaac0fbc6c15e", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ca93992862ad815a1c79d4c497ebaac0fbc6c15e", "committedDate": "2020-05-13T10:31:15Z", "message": "move ip entities to entity/ip dir(conflict with entities of subnet manager)"}, "afterCommit": {"oid": "e77f3fd5635cc8b7687ab49ed987498ab399bf7c", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/e77f3fd5635cc8b7687ab49ed987498ab399bf7c", "committedDate": "2020-05-13T10:39:41Z", "message": "move ip entities to entity/ip dir(conflict with entities of subnet manager)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e77f3fd5635cc8b7687ab49ed987498ab399bf7c", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/e77f3fd5635cc8b7687ab49ed987498ab399bf7c", "committedDate": "2020-05-13T10:39:41Z", "message": "move ip entities to entity/ip dir(conflict with entities of subnet manager)"}, "afterCommit": {"oid": "9a550424019175616ecb83c2c653f5f0af385bc5", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/9a550424019175616ecb83c2c653f5f0af385bc5", "committedDate": "2020-05-13T12:39:22Z", "message": "move entities to web service(conflict with entities of subnet manager)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a550424019175616ecb83c2c653f5f0af385bc5", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/9a550424019175616ecb83c2c653f5f0af385bc5", "committedDate": "2020-05-13T12:39:22Z", "message": "move entities to web service(conflict with entities of subnet manager)"}, "afterCommit": {"oid": "6221dee4850cc67fadc56d5203a39ae51bd42865", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/6221dee4850cc67fadc56d5203a39ae51bd42865", "committedDate": "2020-05-13T12:43:35Z", "message": "move entities to web service(conflict with entities of subnet manager)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6221dee4850cc67fadc56d5203a39ae51bd42865", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/6221dee4850cc67fadc56d5203a39ae51bd42865", "committedDate": "2020-05-13T12:43:35Z", "message": "move entities to web service(conflict with entities of subnet manager)"}, "afterCommit": {"oid": "885c7ec257a5041782f9da096a096bbe57bc34cb", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/885c7ec257a5041782f9da096a096bbe57bc34cb", "committedDate": "2020-05-13T12:52:34Z", "message": "move entities to web service(conflict with entities of subnet manager)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "885c7ec257a5041782f9da096a096bbe57bc34cb", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/885c7ec257a5041782f9da096a096bbe57bc34cb", "committedDate": "2020-05-13T12:52:34Z", "message": "move entities to web service(conflict with entities of subnet manager)"}, "afterCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/0a23e9a6c01b9e9739544cc9dbda1e4f23816cde", "committedDate": "2020-05-13T13:01:24Z", "message": "move entities to web service(conflict with entities of subnet manager)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/0a23e9a6c01b9e9739544cc9dbda1e4f23816cde", "committedDate": "2020-05-13T13:01:24Z", "message": "move entities to web service(conflict with entities of subnet manager)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDYxODQ0", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-411061844", "createdAt": "2020-05-13T15:47:54Z", "commit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo0Nzo1NFrOGU4F-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoyNzoyN1rOGVFskQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0MzczNw==", "bodyText": "It would fit into the scope of AlcorLib. Let us move it there.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424543737", "createdAt": "2020-05-13T15:47:54Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/utils/BeanUtil.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.utils;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class BeanUtil implements ApplicationContextAware {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0ODA0NA==", "bodyText": "I would suggest to rename it to AbstractRestClient.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424548044", "createdAt": "2020-05-13T15:53:47Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/rest/AbstractRest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.rest;\n+\n+import org.springframework.web.client.RestTemplate;\n+\n+abstract class AbstractRest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0ODU3MA==", "bodyText": "I would suggest to rename it to VpcRestClient. Similar suggestion applies to classes in the same directory.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424548570", "createdAt": "2020-05-13T15:54:32Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/rest/VpcRest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.rest;\n+\n+import com.futurewei.alcor.web.entity.vpc.VpcStateJson;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class VpcRest extends AbstractRest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2NjYwOQ==", "bodyText": "Recommend to use\n\nIpManagerRestClient\nSubnetManagerRestClient", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424766609", "createdAt": "2020-05-13T22:27:27Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {\n+    private IpAddressRest ipAddressRest;\n+    private SubnetRest subnetRest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDc2MjYw", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-411476260", "createdAt": "2020-05-14T05:34:02Z", "commit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTozNDowM1rOGVMpDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0Mjo1MlrOGVMy7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MDM5OA==", "bodyText": "In general, direct type casting is not recommended for downcasting.\nCould you try cast() and isInstance() methods for safer downcasting?\nA reference: https://www.baeldung.com/java-type-casting", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424880398", "createdAt": "2020-05-14T05:34:03Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {\n+    private IpAddressRest ipAddressRest;\n+    private SubnetRest subnetRest;\n+    private Stack<PortStateRollback> rollbacks;\n+    private String projectId;\n+\n+    public IpAddressRestWrap(Stack<PortStateRollback> rollbacks, String projectId) {\n+        ipAddressRest = BeanUtil.getBean(IpAddressRest.class);\n+        subnetRest = BeanUtil.getBean(SubnetRest.class);\n+        this.rollbacks = rollbacks;\n+        this.projectId = projectId;\n+    }\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        SubnetStateJson subnetStateJson = subnetRest.getSubnetState(projectId, subnetId);\n+        if (subnetStateJson == null || subnetStateJson.getSubnet() == null) {\n+            throw new VerifySubnetException();\n+        }\n+\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ipAddr) {\n+        if (rollback instanceof AllocateIpAddrRollback) {\n+            rollback.putAllocatedIpAddress(ipAddr);\n+        } else {\n+            rollback.putReleasedIpAddress(ipAddr);\n+        }\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+        List<IpAddrRequest> ipAddrRequests = new ArrayList<>();\n+        PortState portState = (PortState)args;\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(IpVersion.IPV4,\n+                portState.getVpcId(), null, null);\n+\n+        List<PortState.FixedIp> fixedIps = new ArrayList<>();\n+        PortState.FixedIp fixedIp = new PortState.FixedIp(result.getSubnetId(), result.getIp());\n+\n+        fixedIps.add(fixedIp);\n+        portState.setFixedIps(fixedIps);\n+\n+        addIpAddrRollback(new AllocateIpAddrRollback(ipAddressRest), result);\n+\n+        ipAddrRequests.add(result);\n+\n+        return ipAddrRequests;\n+    }\n+\n+    public List<IpAddrRequest> verifyIpAddresses(Object args) throws Exception {\n+        List<IpAddrRequest> ipAddrRequests = new ArrayList<>();\n+        List<PortState.FixedIp> fixedIps = (List<PortState.FixedIp>)args;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjQyMw==", "bodyText": "How about Ipv6? Could we use sth like \"portState.IpVersion\" instead of fixing with IPv4?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424882423", "createdAt": "2020-05-14T05:41:10Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {\n+    private IpAddressRest ipAddressRest;\n+    private SubnetRest subnetRest;\n+    private Stack<PortStateRollback> rollbacks;\n+    private String projectId;\n+\n+    public IpAddressRestWrap(Stack<PortStateRollback> rollbacks, String projectId) {\n+        ipAddressRest = BeanUtil.getBean(IpAddressRest.class);\n+        subnetRest = BeanUtil.getBean(SubnetRest.class);\n+        this.rollbacks = rollbacks;\n+        this.projectId = projectId;\n+    }\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        SubnetStateJson subnetStateJson = subnetRest.getSubnetState(projectId, subnetId);\n+        if (subnetStateJson == null || subnetStateJson.getSubnet() == null) {\n+            throw new VerifySubnetException();\n+        }\n+\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ipAddr) {\n+        if (rollback instanceof AllocateIpAddrRollback) {\n+            rollback.putAllocatedIpAddress(ipAddr);\n+        } else {\n+            rollback.putReleasedIpAddress(ipAddr);\n+        }\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+        List<IpAddrRequest> ipAddrRequests = new ArrayList<>();\n+        PortState portState = (PortState)args;\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(IpVersion.IPV4,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjkyNA==", "bodyText": "allocateIpAddress => allocateRandomIpAddress\nverifyIpAddresses=> allocateFixedIpAddress", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424882924", "createdAt": "2020-05-14T05:42:52Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.NodeRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.host.*;\n+import com.futurewei.alcor.web.entity.RouterState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks) {\n+        while (!rollbacks.isEmpty()) {\n+            PortStateRollback rollback = rollbacks.pop();\n+\n+            try {\n+                rollback.doRollback();\n+            } catch (Exception e) {\n+                LOG.error(\"{} roll back failed: {}\", rollback, e);\n+            }\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    public PortStateJson createPortState(String projectId, PortStateJson portStateJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n+\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n+\n+        PortState portState = portStateJson.getPortState();\n+        portState.setProjectId(projectId);\n+\n+        try {\n+            //Verify VPC ID\n+            VpcRestWrap vpcRestWrap = new VpcRestWrap(rollbacks);\n+            executor.runAsync(vpcRestWrap::verifyVpc, portState);\n+\n+            IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(rollbacks, portState.getProjectId());\n+            if (portState.getFixedIps() == null) {\n+                executor.runAsync(ipAddressRestWrap::allocateIpAddress, portState);\n+            } else {\n+                executor.runAsync(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDgwMjky", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-411480292", "createdAt": "2020-05-14T05:45:55Z", "commit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0NTo1NVrOGVM2RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjowMzozMVrOGVNLZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4Mzc4MQ==", "bodyText": "allocateMacAddress => allocateRandomMacAddress\nverifyMacAddress => allocateFixedMacAddress", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424883781", "createdAt": "2020-05-14T05:45:55Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.NodeRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.host.*;\n+import com.futurewei.alcor.web.entity.RouterState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks) {\n+        while (!rollbacks.isEmpty()) {\n+            PortStateRollback rollback = rollbacks.pop();\n+\n+            try {\n+                rollback.doRollback();\n+            } catch (Exception e) {\n+                LOG.error(\"{} roll back failed: {}\", rollback, e);\n+            }\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    public PortStateJson createPortState(String projectId, PortStateJson portStateJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n+\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n+\n+        PortState portState = portStateJson.getPortState();\n+        portState.setProjectId(projectId);\n+\n+        try {\n+            //Verify VPC ID\n+            VpcRestWrap vpcRestWrap = new VpcRestWrap(rollbacks);\n+            executor.runAsync(vpcRestWrap::verifyVpc, portState);\n+\n+            IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(rollbacks, portState.getProjectId());\n+            if (portState.getFixedIps() == null) {\n+                executor.runAsync(ipAddressRestWrap::allocateIpAddress, portState);\n+            } else {\n+                executor.runAsync(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+            }\n+\n+            //Generate uuid for port\n+            if (portState.getId() == null) {\n+                portState.setId(UUID.randomUUID().toString());\n+            }\n+\n+            MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(rollbacks);\n+            if (portState.getMacAddress() == null) {\n+                executor.runAsync(macAddressRestWrap::allocateMacAddress, portState);\n+            } else {\n+                executor.runAsync(macAddressRestWrap::verifyMacAddress, portState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4NjIwMw==", "bodyText": "API (2) in Mac manager actually could set a fixed mac address in the rest body (the impl might not be there but at least the interface has that).\nRef: https://github.com/futurewei-cloud/alcor/blob/master/docs/design/mac_manager.adoc", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424886203", "createdAt": "2020-05-14T05:54:12Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/MacAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.mac.MacState;\n+import com.futurewei.alcor.web.entity.mac.MacStateJson;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import java.util.Stack;\n+\n+public class MacAddressRestWrap {\n+    private MacAddressRest macAddressRest;\n+    private Stack<PortStateRollback> rollbacks;\n+\n+    public MacAddressRestWrap(Stack<PortStateRollback> rollbacks) {\n+        macAddressRest = BeanUtil.getBean(MacAddressRest.class);\n+        this.rollbacks = rollbacks;\n+    }\n+\n+    private void addMacAddrRollback(AbstractMacAddrRollback rollback, MacState macState) {\n+        if (rollback instanceof AllocateMacAddrRollback) {\n+            rollback.putAllocatedMacAddress(macState);\n+        } else {\n+            rollback.putReleasedMacAddress(macState);\n+        }\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    public MacStateJson allocateMacAddress(Object args) throws Exception {\n+        PortState portState = (PortState)args;\n+\n+        MacStateJson result = macAddressRest.allocateMacAddress(portState.getProjectId(), portState.getVpcId(), portState.getId());\n+        portState.setMacAddress(result.getMacState().getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(portState.getProjectId());\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        addMacAddrRollback(new AllocateMacAddrRollback(macAddressRest), macState);\n+\n+        return result;\n+    }\n+\n+    public MacStateJson verifyMacAddress(Object args) {\n+        //FIXME: Not support yet\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4OTE4OQ==", "bodyText": "Hmm, this is really tricky. We will need a good Timeout story to upper bound the rollback.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424889189", "createdAt": "2020-05-14T06:03:31Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.NodeRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.host.*;\n+import com.futurewei.alcor.web.entity.RouterState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks) {\n+        while (!rollbacks.isEmpty()) {\n+            PortStateRollback rollback = rollbacks.pop();\n+\n+            try {\n+                rollback.doRollback();\n+            } catch (Exception e) {\n+                LOG.error(\"{} roll back failed: {}\", rollback, e);\n+            }\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    public PortStateJson createPortState(String projectId, PortStateJson portStateJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n+\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n+\n+        PortState portState = portStateJson.getPortState();\n+        portState.setProjectId(projectId);\n+\n+        try {\n+            //Verify VPC ID\n+            VpcRestWrap vpcRestWrap = new VpcRestWrap(rollbacks);\n+            executor.runAsync(vpcRestWrap::verifyVpc, portState);\n+\n+            IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(rollbacks, portState.getProjectId());\n+            if (portState.getFixedIps() == null) {\n+                executor.runAsync(ipAddressRestWrap::allocateIpAddress, portState);\n+            } else {\n+                executor.runAsync(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+            }\n+\n+            //Generate uuid for port\n+            if (portState.getId() == null) {\n+                portState.setId(UUID.randomUUID().toString());\n+            }\n+\n+            MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(rollbacks);\n+            if (portState.getMacAddress() == null) {\n+                executor.runAsync(macAddressRestWrap::allocateMacAddress, portState);\n+            } else {\n+                executor.runAsync(macAddressRestWrap::verifyMacAddress, portState);\n+            }\n+\n+            //Verify security group\n+\n+            //Verify Binding Host ID\n+            if (portState.getBindingHostId() != null) {\n+                NodeRestWrap nodeRestWrap = new NodeRestWrap(rollbacks);\n+                nodeRestWrap.verifyHost(portState.getBindingHostId());\n+            }\n+\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n+\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            /**\n+            When an exception occurs, we need to roll back all asynchronous operations,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDkxNTQ0", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-411491544", "createdAt": "2020-05-14T06:14:42Z", "commit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoxNDo0MlrOGVNaAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoyNzoxMlrOGVNr7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MjkyOQ==", "bodyText": "Looks like we'll need a bit more time for updatePortState. It is fine and let us do it in next PR.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424892929", "createdAt": "2020-05-14T06:14:42Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.NodeRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.host.*;\n+import com.futurewei.alcor.web.entity.RouterState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks) {\n+        while (!rollbacks.isEmpty()) {\n+            PortStateRollback rollback = rollbacks.pop();\n+\n+            try {\n+                rollback.doRollback();\n+            } catch (Exception e) {\n+                LOG.error(\"{} roll back failed: {}\", rollback, e);\n+            }\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    public PortStateJson createPortState(String projectId, PortStateJson portStateJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n+\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n+\n+        PortState portState = portStateJson.getPortState();\n+        portState.setProjectId(projectId);\n+\n+        try {\n+            //Verify VPC ID\n+            VpcRestWrap vpcRestWrap = new VpcRestWrap(rollbacks);\n+            executor.runAsync(vpcRestWrap::verifyVpc, portState);\n+\n+            IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(rollbacks, portState.getProjectId());\n+            if (portState.getFixedIps() == null) {\n+                executor.runAsync(ipAddressRestWrap::allocateIpAddress, portState);\n+            } else {\n+                executor.runAsync(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+            }\n+\n+            //Generate uuid for port\n+            if (portState.getId() == null) {\n+                portState.setId(UUID.randomUUID().toString());\n+            }\n+\n+            MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(rollbacks);\n+            if (portState.getMacAddress() == null) {\n+                executor.runAsync(macAddressRestWrap::allocateMacAddress, portState);\n+            } else {\n+                executor.runAsync(macAddressRestWrap::verifyMacAddress, portState);\n+            }\n+\n+            //Verify security group\n+\n+            //Verify Binding Host ID\n+            if (portState.getBindingHostId() != null) {\n+                NodeRestWrap nodeRestWrap = new NodeRestWrap(rollbacks);\n+                nodeRestWrap.verifyHost(portState.getBindingHostId());\n+            }\n+\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n+\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            /**\n+            When an exception occurs, we need to roll back all asynchronous operations,\n+            and some asynchronous may not be finished yet.if we roll back at this time,\n+             they may not be completed until the rollback operation is completed.\n+             as a result, they cannot be rolled back.\n+             */\n+            executor.waitAll();\n+            rollBackAllOperations(rollbacks);\n+            throw e;\n+        }\n+\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n+\n+        return portStateJson;\n+    }\n+\n+    private RouterState getRouterState(String routerId) {\n+        return null;\n+    }\n+\n+    private void verifyRouter(String deviceId, String tenantId) throws Exception {\n+        RouterState routerState = getRouterState(deviceId);\n+\n+        if (routerState == null) {\n+            throw new RouterNotFoundException();\n+        }\n+\n+        if (!tenantId.equals(routerState.getTenantId())) {\n+            throw new RouterNotOwnedByTenant();\n+        }\n+    }\n+\n+    private Map<String, Set<String>> fixedIpsToMap(List<PortState.FixedIp> fixedIps) {\n+        Map<String, Set<String>> subnetIpsMap = new HashMap<>();\n+\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            if (subnetIpsMap.containsKey(fixedIp.getSubnetId())) {\n+                subnetIpsMap.get(fixedIp.getSubnetId()).add(fixedIp.getIpAddress());\n+            } else {\n+                Set<String> ips = new HashSet<>();\n+                ips.add(fixedIp.getIpAddress());\n+                subnetIpsMap.put(fixedIp.getSubnetId(), ips);\n+            }\n+        }\n+\n+        return subnetIpsMap;\n+    }\n+\n+    private List<PortState.FixedIp> fixedIpsCompare(List<PortState.FixedIp> fixedIps1, List<PortState.FixedIp> fixedIps2) {\n+        List<PortState.FixedIp> addFixedIps = new ArrayList<>();\n+        Map<String, Set<String>> subnetIpsMap = fixedIpsToMap(fixedIps2);\n+\n+        for (PortState.FixedIp fixedIp: fixedIps1) {\n+            String subnetId = fixedIp.getSubnetId();\n+            String ipAddress = fixedIp.getIpAddress();\n+            if (subnetIpsMap.containsKey(subnetId)) {\n+                if (!subnetIpsMap.get(subnetId).contains(ipAddress)) {\n+                    addFixedIps.add(fixedIp);\n+                }\n+            } else {\n+                addFixedIps.add(fixedIp);\n+            }\n+        }\n+\n+        return addFixedIps;\n+    }\n+\n+    private void updateSecurityGroup(PortState portState, PortState oldPortState) throws Exception {\n+        String deviceOwner = portState.getDeviceOwner();\n+\n+        //Network device interface does not need security groups\n+        if (deviceOwner != null && deviceOwner.indexOf(\"network\") > 0) {\n+            throw new UpdateSecurityGroupException();\n+        }\n+\n+        //Verify request security groups valid\n+        verifySecurityGroup(portState);\n+\n+        //Delete old security groups binding\n+        unbindSecurityGroups(oldPortState);\n+\n+        //Create security groups binding for port\n+        bindSecurityGroups(portState);\n+\n+        oldPortState.setSecurityGroups(portState.getSecurityGroups());\n+    }\n+\n+    private void UpdateExtraDhcpOpts(PortState portState, PortState portStateOld) {\n+\n+    }\n+\n+    private void updatePortToHost(PortState portState) {\n+\n+    }\n+\n+    public PortStateJson updatePortState(String projectId, String portId, PortStateJson portStateJson) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MzI3Mg==", "bodyText": "We will need the bulk create API.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424893272", "createdAt": "2020-05-14T06:15:35Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/PortService.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service;\n+\n+\n+import com.futurewei.alcor.web.entity.port.PortStateJson;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.List;\n+\n+@Service\n+public interface PortService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NzUxNg==", "bodyText": "vpc/port/mac/ip/mac are in their own sub-dictionary in com.futurewei.alcor.web.entity.\nsubnet and route are still one level up.\n\nLet us create the same sub-dictionary for subnet and route. Later we could ask other microservices to use the new web classes path and retire the existing ones.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424897516", "createdAt": "2020-05-14T06:27:12Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/controller/PortControllerTest.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.controller;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.futurewei.alcor.portmanager.config.UnitTestConfig;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.mac.*;\n+import com.futurewei.alcor.web.entity.vpc.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNTAwNzIz", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-411500723", "createdAt": "2020-05-14T06:34:16Z", "commit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjozNDoxNlrOGVN2wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjozNDoxNlrOGVN2wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMDI5MA==", "bodyText": "Maybe rename it to \"IpAddressRestWrapper\". It applies to other classes in the same directory and the directory itself.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424900290", "createdAt": "2020-05-14T06:34:16Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a01e8ffd5b378eb653d1e381dc6092eee4063db1", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a01e8ffd5b378eb653d1e381dc6092eee4063db1", "committedDate": "2020-05-14T11:05:44Z", "message": "made some optimizations according to the review suggestions"}, "afterCommit": {"oid": "5843fe701503ff2f9edef48d83723d3d26266945", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5843fe701503ff2f9edef48d83723d3d26266945", "committedDate": "2020-05-14T11:34:17Z", "message": "made some optimizations according to the review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5843fe701503ff2f9edef48d83723d3d26266945", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5843fe701503ff2f9edef48d83723d3d26266945", "committedDate": "2020-05-14T11:34:17Z", "message": "made some optimizations according to the review suggestions"}, "afterCommit": {"oid": "5b84398db6881e2b59f4578ee858b81dec38879e", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5b84398db6881e2b59f4578ee858b81dec38879e", "committedDate": "2020-05-14T11:36:13Z", "message": "made some optimizations according to the review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b84398db6881e2b59f4578ee858b81dec38879e", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5b84398db6881e2b59f4578ee858b81dec38879e", "committedDate": "2020-05-14T11:36:13Z", "message": "made some optimizations according to the review suggestions"}, "afterCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/aa8c0f97a1364612491af1d5515bd90884372a80", "committedDate": "2020-05-14T11:41:43Z", "message": "made some optimizations according to the review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/aa8c0f97a1364612491af1d5515bd90884372a80", "committedDate": "2020-05-14T11:41:43Z", "message": "made some optimizations according to the review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzI2OTc0", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-411726974", "createdAt": "2020-05-14T11:52:27Z", "commit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo1MjoyN1rOGVYsUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo1MjoyN1rOGVYsUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3Nzg0MQ==", "bodyText": "Very nice comments! Thank you.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425077841", "createdAt": "2020-05-14T11:52:27Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/controller/PortController.java", "diffHunk": "@@ -30,6 +30,16 @@\n     @Autowired\n     PortService portService;\n \n+    /**\n+     * Create a port, and call the interfaces of each micro-service according to the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3394dd38f58f096974315ff0a9a06ee779d97b1e", "author": {"user": {"login": "chenpiaoping", "name": null}}, "url": "https://github.com/futurewei-cloud/alcor/commit/3394dd38f58f096974315ff0a9a06ee779d97b1e", "committedDate": "2020-05-14T11:58:07Z", "message": "Merge branch 'master' into port-manager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzMxMTIy", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-411731122", "createdAt": "2020-05-14T11:58:53Z", "commit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo1ODo1M1rOGVY47g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo1ODo1M1rOGVY47g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MTA3MA==", "bodyText": "@chenpiaoping, my previous comment may not be 100% clear. I meant that IPv4 only and Ipv4v6 should both be supported, with IPv4 only the default option.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425081070", "createdAt": "2020-05-14T11:58:53Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "diffHunk": "@@ -84,27 +84,47 @@ private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ip\n         rollbacks.push(rollback);\n     }\n \n-    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+    /**\n+     * Allocate a random ipv4 and ipv6 address from ip manager service\n+     * @param args PortState\n+     * @return A list of IpAddrRequest\n+     * @throws Exception Rest request exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzM2MzE4", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-411736318", "createdAt": "2020-05-14T12:06:34Z", "commit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjowNjozNVrOGVZIRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjowNjozNVrOGVZIRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NDk5OA==", "bodyText": "is this a macAddress or macId?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425084998", "createdAt": "2020-05-14T12:06:35Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/restclient/MacManagerRestClient.java", "diffHunk": "@@ -40,11 +40,12 @@ public void releaseMacAddress(String macAddress) throws Exception {\n         restTemplate.delete(url);\n     }\n \n-    public MacStateJson allocateMacAddress(String projectId, String vpcId, String portId) throws Exception {\n+    public MacStateJson allocateMacAddress(String projectId, String vpcId, String portId, String mac) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzY4OTEx", "url": "https://github.com/futurewei-cloud/alcor/pull/180#pullrequestreview-411768911", "createdAt": "2020-05-14T12:50:23Z", "commit": {"oid": "3394dd38f58f096974315ff0a9a06ee779d97b1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5060b0df148762d920344a35e2880f22ecc4f77", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c5060b0df148762d920344a35e2880f22ecc4f77", "committedDate": "2020-05-14T14:25:26Z", "message": "Add Swagger doc/ui support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b08ac39a8a5ac38db55fde37265657d84eb7a8ae", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b08ac39a8a5ac38db55fde37265657d84eb7a8ae", "committedDate": "2020-05-14T15:15:45Z", "message": "Turn on partial UTs and change rest field from port_state to port"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a618600d092dd762c92c13388bae5d4f0442bc5", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/7a618600d092dd762c92c13388bae5d4f0442bc5", "committedDate": "2020-05-14T15:26:35Z", "message": "Rename mac to macAddress in MacManagerRestClient and MacManagerProxy"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2429, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}