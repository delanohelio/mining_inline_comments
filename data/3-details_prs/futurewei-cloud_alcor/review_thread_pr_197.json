{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MzYyMzcx", "number": 197, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMDozMDowM1rOD9C_7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1NToxNFrOECPdFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzM4ODYxOnYy", "diffSide": "RIGHT", "path": "services/port_manager/pom.xml", "isResolved": false, "comments": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMDozMDowM1rOGWW69g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoxNDoxN1rOGaP6mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA==", "bodyText": "@chenpiaoping What does this exclusions block do? It could skip the portion of UTs which potentially fails if enabled, right? Let us fix the actual problem directly.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r426097398", "createdAt": "2020-05-16T00:30:03Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzMzA4OA==", "bodyText": "Yes, If we delete it, Mockito won't work, but the reason is unknown. I suspect it conflicts with Mockito.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r426333088", "createdAt": "2020-05-18T01:39:02Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2MTY3NA==", "bodyText": "Not sure about this. Other services also use Mockito without this exclusion block, and those UTs work okay, for example, vpc/subnet managers.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r426361674", "createdAt": "2020-05-18T04:18:00Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2NTY0Ng==", "bodyText": "Well, I'll try to find the real reason.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r426365646", "createdAt": "2020-05-18T04:38:13Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxMTAzMA==", "bodyText": "4.29.6. Testing\nWhile it is possible to use JUnit 4 to test Kotlin code, JUnit 5 is provided by default and is recommended. JUnit 5 enables a test class to be instantiated once and reused for all of the class\u2019s tests. This makes it possible to use @BeforeClass and @afterclass annotations on non-static methods, which is a good fit for Kotlin.\nJUnit 5 is the default and the vintage engine is provided for backward compatibility with JUnit 4. If you don\u2019t use it, exclude org.junit.vintange:junit-vintage-engine. You also need to switch test instance lifecycle to \"per-class\".\nTo mock Kotlin classes, MockK is recommended. If you need the Mockk equivalent of the Mockito specific @MockBean and @SpyBean annotations, you can use SpringMockK which provides similar @MockkBean and @SpykBean annotations.\nseens", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427011030", "createdAt": "2020-05-19T03:36:23Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxMTI0Nw==", "bodyText": "It seems that the combination of Junit5 and Mockito is not very friendly, so if we need to use Mockito, we'd better use Junit4, so we need junit-vintage-engine to support Junit4? Do I understand correctly?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427011247", "createdAt": "2020-05-19T03:37:08Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxMjM3OQ==", "bodyText": "@xieus @kimeunju108", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427012379", "createdAt": "2020-05-19T03:41:10Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxOTE3Ng==", "bodyText": "Junit 5 requires Java 8 or later, but I found vpc/subnet manager use  java1.7 in pom.xml:\n<maven.compiler.source>1.7</maven.compiler.source>\n<maven.compiler.target>1.7</maven.compiler.target>\nand use Junit4 in UTs:\nimport org.junit.Test;\nbut port manager requires Java 8 or later(to support lambda)", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427019176", "createdAt": "2020-05-19T04:10:42Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMjg1Mg==", "bodyText": "@chenpiaoping By \"MockK\", do you mean \"Mockito\"?  Mixing multiple JUnit may not be a good idea as it could cause a bit of headache for compatibility.\nJUnit5 + Mockito2 is possible as suggested here: https://dzone.com/articles/spring-boot-2-with-junit-5-and-mockito-2-for-unit\nMaybe worth trying?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427022852", "createdAt": "2020-05-19T04:27:30Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1NTYwMQ==", "bodyText": "Regarding java version, this is a good catch. We should at least use java 8 in vpc/subnet manager at the first place. @kevin-zhonghao", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427055601", "createdAt": "2020-05-19T06:21:26Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1ODA5OQ==", "bodyText": "@chenpiaoping By \"MockK\", do you mean \"Mockito\"? Mixing multiple JUnit may not be a good idea as it could cause a bit of headache for compatibility.\nJUnit5 + Mockito2 is possible as suggested here: https://dzone.com/articles/spring-boot-2-with-junit-5-and-mockito-2-for-unit\nMaybe worth trying?\n\nyes, I tried that, but it didn't work.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427058099", "createdAt": "2020-05-19T06:27:54Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5MzIwOQ==", "bodyText": "https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/html/spring-boot-features.html#boot-features-testing\nThe starter also brings the vintage engine so that you can run both JUnit 4 and JUnit 5 tests. If you have migrated your tests to JUnit 5, you should exclude JUnit 4 support, as shown in the following example:", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427193209", "createdAt": "2020-05-19T10:21:45Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1MzM0MA==", "bodyText": "mock service can work, that is the reason why vpc/subnet manager is ok.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427253340", "createdAt": "2020-05-19T12:13:17Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4MDE1OA==", "bodyText": "@chenpiaoping If you click https://github.com/futurewei-cloud/alcor/pull/197/checks?check_run_id=684996404, you could find the current merge results shows as follows:\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.15 s - in com.futurewei.alcor.portmanager.PortManagerApplicationTests\n2020-05-18 11:04:16.840  INFO 3974 --- [extShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\nThe goal for us is to enable on UTs for every microservice. Port Manager is so important that we definitely need UTs on.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427780158", "createdAt": "2020-05-20T06:54:40Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4NDUwNA==", "bodyText": "Oh, let me check, is there a problem with these outputs?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427784504", "createdAt": "2020-05-20T07:03:48Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4NzcyNA==", "bodyText": "Only one test case is on, which is PortManagerApplicationTests. All the good test cases in PortControllerTest.java are not actually running. That is why I am trying to turn them all on.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427787724", "createdAt": "2020-05-20T07:10:48Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5MDMxOA==", "bodyText": "I can see outputs of all UTs from section Build with Maven.\nThe snippet:\nHTTP Method = POST\nRequest URI = /project/3dda2801-d675-4688-a63f-dcda8d327f50/network_segment_ranges\nParameters = {}\nHeaders = [Content-Type:\"application/json;charset=UTF-8\"]\nBody = {\"network_segment_range\":{\"project_id\":\"3dda2801-d675-4688-a63f-dcda8d327f50\",\"id\":\"9192a4d4-ffff-4ece-b3f0-8d36e3d86000\",\"name\":\"test_segment\",\"description\":\"\",\"network_type\":\"vlan\"}}\nSession Attrs = {}\nHandler:\nType = com.futurewei.alcor.vpcmanager.controller.SegmentRangeController", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427790318", "createdAt": "2020-05-20T07:16:14Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwNDgyMQ==", "bodyText": "That is VPC manager UT. I meant only one port manager UT is on.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427804821", "createdAt": "2020-05-20T07:43:42Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxMDU5MA==", "bodyText": "sorry, I read it wrong.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427810590", "createdAt": "2020-05-20T07:54:03Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1OTg4OA==", "bodyText": "Just checking in to see if you are still blocked on this.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r428459888", "createdAt": "2020-05-21T05:56:53Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4NTI4MQ==", "bodyText": "I'm already on security group. back soon.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r428585281", "createdAt": "2020-05-21T11:01:39Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5MzI5OA==", "bodyText": "It is okay. Let us know once it is ready to review then @chenpiaoping", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r428793298", "createdAt": "2020-05-21T17:13:14Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTIyNA==", "bodyText": "ok", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r429009224", "createdAt": "2020-05-22T02:20:15Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1MTU3NQ==", "bodyText": "The problem has been solved.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430151575", "createdAt": "2020-05-26T04:38:32Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1NDU5NA==", "bodyText": "Cool thanks! What was the catch?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430154594", "createdAt": "2020-05-26T04:52:42Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3NjkyMw==", "bodyText": "org.junit.Test belongs to junit4, after excluding junit4, we should not use it any more, or the UTs would not be executed at compile time.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430176923", "createdAt": "2020-05-26T06:14:17Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -41,6 +41,12 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NzM5OA=="}, "originalCommit": {"oid": "d4cd8321e75a1e55b464c7fb7b63b734f545dd01"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDIxNjA3OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjo0NjozNFrOGX9akg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo0Nzo0NlrOGesxYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NjY1OA==", "bodyText": "By sharing the same rollbacks stack, will one port creation failure cause rollback of other ports in the same request?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427776658", "createdAt": "2020-05-20T06:46:34Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -115,57 +162,53 @@ public PortStateJson createPortState(String projectId, PortStateJson portStateJs\n         portState.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portState);\n+            createPortStateAsync(portState, executor, rollbacks);\n \n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n-            if (portState.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portState);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portState.getFixedIps());\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Generate uuid for port\n-            if (portState.getId() == null) {\n-                portState.setId(UUID.randomUUID().toString());\n-            }\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            exceptionHandle(executor, rollbacks, e);\n+        }\n \n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portState.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portState);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n-            }\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n \n-            //Verify security group\n+        return portStateJson;\n+    }\n+\n+    /**\n+     * Create multiple ports, and call the interfaces of each micro-service according to the\n+     * configuration of the port to create various required resources for all ports.\n+     * If an exception occurs during the creation of multiple ports, we need to roll back\n+     * the resource allocated from each micro-service.\n+     * @param projectId Project the port belongs to\n+     * @param portStateBulkJson Multiple ports configuration\n+     * @return PortStateBulkJson\n+     * @throws Exception Various exceptions that may occur during the create process\n+     */\n+    @Override\n+    public PortStateBulkJson createPortStateBulk(String projectId, PortStateBulkJson portStateBulkJson) throws Exception {\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n \n-            //Verify Binding Host ID\n-            if (portState.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portState.getBindingHostId());\n+        try {\n+            for (PortState portState: portStateBulkJson.getPortStates()) {\n+                portState.setProjectId(projectId);\n+                createPortStateAsync(portState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3ODU2Ng==", "bodyText": "Yes, I think for batch creation, if a port creation fails, all operations should be rolled back.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427778566", "createdAt": "2020-05-20T06:51:00Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -115,57 +162,53 @@ public PortStateJson createPortState(String projectId, PortStateJson portStateJs\n         portState.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portState);\n+            createPortStateAsync(portState, executor, rollbacks);\n \n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n-            if (portState.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portState);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portState.getFixedIps());\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Generate uuid for port\n-            if (portState.getId() == null) {\n-                portState.setId(UUID.randomUUID().toString());\n-            }\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            exceptionHandle(executor, rollbacks, e);\n+        }\n \n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portState.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portState);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n-            }\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n \n-            //Verify security group\n+        return portStateJson;\n+    }\n+\n+    /**\n+     * Create multiple ports, and call the interfaces of each micro-service according to the\n+     * configuration of the port to create various required resources for all ports.\n+     * If an exception occurs during the creation of multiple ports, we need to roll back\n+     * the resource allocated from each micro-service.\n+     * @param projectId Project the port belongs to\n+     * @param portStateBulkJson Multiple ports configuration\n+     * @return PortStateBulkJson\n+     * @throws Exception Various exceptions that may occur during the create process\n+     */\n+    @Override\n+    public PortStateBulkJson createPortStateBulk(String projectId, PortStateBulkJson portStateBulkJson) throws Exception {\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n \n-            //Verify Binding Host ID\n-            if (portState.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portState.getBindingHostId());\n+        try {\n+            for (PortState portState: portStateBulkJson.getPortStates()) {\n+                portState.setProjectId(projectId);\n+                createPortStateAsync(portState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NjY1OA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4NDM3Mw==", "bodyText": "This is right from customer behavior perspective. On the API reliability side, it may be fragile.\nCan we add one optional parameter for the API, e.g. allow_partial with default value false. Then the default value is what we are right now. When it is set to true, we will return something all port states, including created/updated port states and failed port with exception.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427784373", "createdAt": "2020-05-20T07:03:32Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -115,57 +162,53 @@ public PortStateJson createPortState(String projectId, PortStateJson portStateJs\n         portState.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portState);\n+            createPortStateAsync(portState, executor, rollbacks);\n \n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n-            if (portState.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portState);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portState.getFixedIps());\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Generate uuid for port\n-            if (portState.getId() == null) {\n-                portState.setId(UUID.randomUUID().toString());\n-            }\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            exceptionHandle(executor, rollbacks, e);\n+        }\n \n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portState.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portState);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n-            }\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n \n-            //Verify security group\n+        return portStateJson;\n+    }\n+\n+    /**\n+     * Create multiple ports, and call the interfaces of each micro-service according to the\n+     * configuration of the port to create various required resources for all ports.\n+     * If an exception occurs during the creation of multiple ports, we need to roll back\n+     * the resource allocated from each micro-service.\n+     * @param projectId Project the port belongs to\n+     * @param portStateBulkJson Multiple ports configuration\n+     * @return PortStateBulkJson\n+     * @throws Exception Various exceptions that may occur during the create process\n+     */\n+    @Override\n+    public PortStateBulkJson createPortStateBulk(String projectId, PortStateBulkJson portStateBulkJson) throws Exception {\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n \n-            //Verify Binding Host ID\n-            if (portState.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portState.getBindingHostId());\n+        try {\n+            for (PortState portState: portStateBulkJson.getPortStates()) {\n+                portState.setProjectId(projectId);\n+                createPortStateAsync(portState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NjY1OA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4NzM4NQ==", "bodyText": "okay, I know what you mean.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427787385", "createdAt": "2020-05-20T07:10:04Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -115,57 +162,53 @@ public PortStateJson createPortState(String projectId, PortStateJson portStateJs\n         portState.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portState);\n+            createPortStateAsync(portState, executor, rollbacks);\n \n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n-            if (portState.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portState);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portState.getFixedIps());\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Generate uuid for port\n-            if (portState.getId() == null) {\n-                portState.setId(UUID.randomUUID().toString());\n-            }\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            exceptionHandle(executor, rollbacks, e);\n+        }\n \n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portState.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portState);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n-            }\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n \n-            //Verify security group\n+        return portStateJson;\n+    }\n+\n+    /**\n+     * Create multiple ports, and call the interfaces of each micro-service according to the\n+     * configuration of the port to create various required resources for all ports.\n+     * If an exception occurs during the creation of multiple ports, we need to roll back\n+     * the resource allocated from each micro-service.\n+     * @param projectId Project the port belongs to\n+     * @param portStateBulkJson Multiple ports configuration\n+     * @return PortStateBulkJson\n+     * @throws Exception Various exceptions that may occur during the create process\n+     */\n+    @Override\n+    public PortStateBulkJson createPortStateBulk(String projectId, PortStateBulkJson portStateBulkJson) throws Exception {\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n \n-            //Verify Binding Host ID\n-            if (portState.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portState.getBindingHostId());\n+        try {\n+            for (PortState portState: portStateBulkJson.getPortStates()) {\n+                portState.setProjectId(projectId);\n+                createPortStateAsync(portState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NjY1OA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODA0Nw==", "bodyText": "What does the responsed data look like when we support allow_partial?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430178047", "createdAt": "2020-05-26T06:17:31Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -115,57 +162,53 @@ public PortStateJson createPortState(String projectId, PortStateJson portStateJs\n         portState.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portState);\n+            createPortStateAsync(portState, executor, rollbacks);\n \n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n-            if (portState.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portState);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portState.getFixedIps());\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Generate uuid for port\n-            if (portState.getId() == null) {\n-                portState.setId(UUID.randomUUID().toString());\n-            }\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            exceptionHandle(executor, rollbacks, e);\n+        }\n \n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portState.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portState);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n-            }\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n \n-            //Verify security group\n+        return portStateJson;\n+    }\n+\n+    /**\n+     * Create multiple ports, and call the interfaces of each micro-service according to the\n+     * configuration of the port to create various required resources for all ports.\n+     * If an exception occurs during the creation of multiple ports, we need to roll back\n+     * the resource allocated from each micro-service.\n+     * @param projectId Project the port belongs to\n+     * @param portStateBulkJson Multiple ports configuration\n+     * @return PortStateBulkJson\n+     * @throws Exception Various exceptions that may occur during the create process\n+     */\n+    @Override\n+    public PortStateBulkJson createPortStateBulk(String projectId, PortStateBulkJson portStateBulkJson) throws Exception {\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n \n-            //Verify Binding Host ID\n-            if (portState.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portState.getBindingHostId());\n+        try {\n+            for (PortState portState: portStateBulkJson.getPortStates()) {\n+                portState.setProjectId(projectId);\n+                createPortStateAsync(portState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NjY1OA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3OTUwMg==", "bodyText": "Supporting allow_partial under the current rollback framework may be a bit troublesome, because we don't know which operations need to be rolled back when an exception occurs.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430179502", "createdAt": "2020-05-26T06:21:36Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -115,57 +162,53 @@ public PortStateJson createPortState(String projectId, PortStateJson portStateJs\n         portState.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portState);\n+            createPortStateAsync(portState, executor, rollbacks);\n \n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n-            if (portState.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portState);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portState.getFixedIps());\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Generate uuid for port\n-            if (portState.getId() == null) {\n-                portState.setId(UUID.randomUUID().toString());\n-            }\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            exceptionHandle(executor, rollbacks, e);\n+        }\n \n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portState.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portState);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n-            }\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n \n-            //Verify security group\n+        return portStateJson;\n+    }\n+\n+    /**\n+     * Create multiple ports, and call the interfaces of each micro-service according to the\n+     * configuration of the port to create various required resources for all ports.\n+     * If an exception occurs during the creation of multiple ports, we need to roll back\n+     * the resource allocated from each micro-service.\n+     * @param projectId Project the port belongs to\n+     * @param portStateBulkJson Multiple ports configuration\n+     * @return PortStateBulkJson\n+     * @throws Exception Various exceptions that may occur during the create process\n+     */\n+    @Override\n+    public PortStateBulkJson createPortStateBulk(String projectId, PortStateBulkJson portStateBulkJson) throws Exception {\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n \n-            //Verify Binding Host ID\n-            if (portState.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portState.getBindingHostId());\n+        try {\n+            for (PortState portState: portStateBulkJson.getPortStates()) {\n+                portState.setProjectId(projectId);\n+                createPortStateAsync(portState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NjY1OA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwNTI5OA==", "bodyText": "@xieus Regardless of this question, I think this PR is ready to be reviewed.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430205298", "createdAt": "2020-05-26T07:21:47Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -115,57 +162,53 @@ public PortStateJson createPortState(String projectId, PortStateJson portStateJs\n         portState.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portState);\n+            createPortStateAsync(portState, executor, rollbacks);\n \n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n-            if (portState.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portState);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portState.getFixedIps());\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Generate uuid for port\n-            if (portState.getId() == null) {\n-                portState.setId(UUID.randomUUID().toString());\n-            }\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            exceptionHandle(executor, rollbacks, e);\n+        }\n \n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portState.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portState);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n-            }\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n \n-            //Verify security group\n+        return portStateJson;\n+    }\n+\n+    /**\n+     * Create multiple ports, and call the interfaces of each micro-service according to the\n+     * configuration of the port to create various required resources for all ports.\n+     * If an exception occurs during the creation of multiple ports, we need to roll back\n+     * the resource allocated from each micro-service.\n+     * @param projectId Project the port belongs to\n+     * @param portStateBulkJson Multiple ports configuration\n+     * @return PortStateBulkJson\n+     * @throws Exception Various exceptions that may occur during the create process\n+     */\n+    @Override\n+    public PortStateBulkJson createPortStateBulk(String projectId, PortStateBulkJson portStateBulkJson) throws Exception {\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n \n-            //Verify Binding Host ID\n-            if (portState.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portState.getBindingHostId());\n+        try {\n+            for (PortState portState: portStateBulkJson.getPortStates()) {\n+                portState.setProjectId(projectId);\n+                createPortStateAsync(portState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NjY1OA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgxMzc2OA==", "bodyText": "okay then. I will resume the review.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430813768", "createdAt": "2020-05-27T01:50:57Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -115,57 +162,53 @@ public PortStateJson createPortState(String projectId, PortStateJson portStateJs\n         portState.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portState);\n+            createPortStateAsync(portState, executor, rollbacks);\n \n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n-            if (portState.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portState);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portState.getFixedIps());\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Generate uuid for port\n-            if (portState.getId() == null) {\n-                portState.setId(UUID.randomUUID().toString());\n-            }\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            exceptionHandle(executor, rollbacks, e);\n+        }\n \n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portState.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portState);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n-            }\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n \n-            //Verify security group\n+        return portStateJson;\n+    }\n+\n+    /**\n+     * Create multiple ports, and call the interfaces of each micro-service according to the\n+     * configuration of the port to create various required resources for all ports.\n+     * If an exception occurs during the creation of multiple ports, we need to roll back\n+     * the resource allocated from each micro-service.\n+     * @param projectId Project the port belongs to\n+     * @param portStateBulkJson Multiple ports configuration\n+     * @return PortStateBulkJson\n+     * @throws Exception Various exceptions that may occur during the create process\n+     */\n+    @Override\n+    public PortStateBulkJson createPortStateBulk(String projectId, PortStateBulkJson portStateBulkJson) throws Exception {\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n \n-            //Verify Binding Host ID\n-            if (portState.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portState.getBindingHostId());\n+        try {\n+            for (PortState portState: portStateBulkJson.getPortStates()) {\n+                portState.setProjectId(projectId);\n+                createPortStateAsync(portState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NjY1OA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgxNTk5Ng==", "bodyText": "What does the responsed data look like when we support allow_partial?\n\nFor the successful ports, we could return its detailed port info.\nFor unsuccessful ones, we could return port_id: error code + detailed exception, something like that.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430815996", "createdAt": "2020-05-27T01:59:54Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -115,57 +162,53 @@ public PortStateJson createPortState(String projectId, PortStateJson portStateJs\n         portState.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portState);\n+            createPortStateAsync(portState, executor, rollbacks);\n \n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n-            if (portState.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portState);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portState.getFixedIps());\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Generate uuid for port\n-            if (portState.getId() == null) {\n-                portState.setId(UUID.randomUUID().toString());\n-            }\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            exceptionHandle(executor, rollbacks, e);\n+        }\n \n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portState.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portState);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n-            }\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n \n-            //Verify security group\n+        return portStateJson;\n+    }\n+\n+    /**\n+     * Create multiple ports, and call the interfaces of each micro-service according to the\n+     * configuration of the port to create various required resources for all ports.\n+     * If an exception occurs during the creation of multiple ports, we need to roll back\n+     * the resource allocated from each micro-service.\n+     * @param projectId Project the port belongs to\n+     * @param portStateBulkJson Multiple ports configuration\n+     * @return PortStateBulkJson\n+     * @throws Exception Various exceptions that may occur during the create process\n+     */\n+    @Override\n+    public PortStateBulkJson createPortStateBulk(String projectId, PortStateBulkJson portStateBulkJson) throws Exception {\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n \n-            //Verify Binding Host ID\n-            if (portState.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portState.getBindingHostId());\n+        try {\n+            for (PortState portState: portStateBulkJson.getPortStates()) {\n+                portState.setProjectId(projectId);\n+                createPortStateAsync(portState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NjY1OA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg1NzY3Ng==", "bodyText": "Piaoping ~ Have you completed the implementation of port update? When I tested it before, it seemed that the port update API function was not fully completed.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430857676", "createdAt": "2020-05-27T05:00:22Z", "author": {"login": "kevin-zhonghao"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -115,57 +162,53 @@ public PortStateJson createPortState(String projectId, PortStateJson portStateJs\n         portState.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portState);\n+            createPortStateAsync(portState, executor, rollbacks);\n \n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n-            if (portState.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portState);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portState.getFixedIps());\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Generate uuid for port\n-            if (portState.getId() == null) {\n-                portState.setId(UUID.randomUUID().toString());\n-            }\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            exceptionHandle(executor, rollbacks, e);\n+        }\n \n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portState.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portState);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n-            }\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n \n-            //Verify security group\n+        return portStateJson;\n+    }\n+\n+    /**\n+     * Create multiple ports, and call the interfaces of each micro-service according to the\n+     * configuration of the port to create various required resources for all ports.\n+     * If an exception occurs during the creation of multiple ports, we need to roll back\n+     * the resource allocated from each micro-service.\n+     * @param projectId Project the port belongs to\n+     * @param portStateBulkJson Multiple ports configuration\n+     * @return PortStateBulkJson\n+     * @throws Exception Various exceptions that may occur during the create process\n+     */\n+    @Override\n+    public PortStateBulkJson createPortStateBulk(String projectId, PortStateBulkJson portStateBulkJson) throws Exception {\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n \n-            //Verify Binding Host ID\n-            if (portState.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portState.getBindingHostId());\n+        try {\n+            for (PortState portState: portStateBulkJson.getPortStates()) {\n+                portState.setProjectId(projectId);\n+                createPortStateAsync(portState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NjY1OA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMDIzNA==", "bodyText": "@kevin-zhonghao only ip addresses can be updated currently.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430910234", "createdAt": "2020-05-27T07:26:44Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -115,57 +162,53 @@ public PortStateJson createPortState(String projectId, PortStateJson portStateJs\n         portState.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portState);\n+            createPortStateAsync(portState, executor, rollbacks);\n \n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n-            if (portState.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portState);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portState.getFixedIps());\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Generate uuid for port\n-            if (portState.getId() == null) {\n-                portState.setId(UUID.randomUUID().toString());\n-            }\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            exceptionHandle(executor, rollbacks, e);\n+        }\n \n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portState.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portState);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n-            }\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n \n-            //Verify security group\n+        return portStateJson;\n+    }\n+\n+    /**\n+     * Create multiple ports, and call the interfaces of each micro-service according to the\n+     * configuration of the port to create various required resources for all ports.\n+     * If an exception occurs during the creation of multiple ports, we need to roll back\n+     * the resource allocated from each micro-service.\n+     * @param projectId Project the port belongs to\n+     * @param portStateBulkJson Multiple ports configuration\n+     * @return PortStateBulkJson\n+     * @throws Exception Various exceptions that may occur during the create process\n+     */\n+    @Override\n+    public PortStateBulkJson createPortStateBulk(String projectId, PortStateBulkJson portStateBulkJson) throws Exception {\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n \n-            //Verify Binding Host ID\n-            if (portState.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portState.getBindingHostId());\n+        try {\n+            for (PortState portState: portStateBulkJson.getPortStates()) {\n+                portState.setProjectId(projectId);\n+                createPortStateAsync(portState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NjY1OA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NDAwMA==", "bodyText": "Use Issue #228 for tracking purpose.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434844000", "createdAt": "2020-06-03T20:47:46Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -115,57 +162,53 @@ public PortStateJson createPortState(String projectId, PortStateJson portStateJs\n         portState.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portState);\n+            createPortStateAsync(portState, executor, rollbacks);\n \n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n-            if (portState.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portState);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portState.getFixedIps());\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Generate uuid for port\n-            if (portState.getId() == null) {\n-                portState.setId(UUID.randomUUID().toString());\n-            }\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            exceptionHandle(executor, rollbacks, e);\n+        }\n \n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portState.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portState);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n-            }\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n \n-            //Verify security group\n+        return portStateJson;\n+    }\n+\n+    /**\n+     * Create multiple ports, and call the interfaces of each micro-service according to the\n+     * configuration of the port to create various required resources for all ports.\n+     * If an exception occurs during the creation of multiple ports, we need to roll back\n+     * the resource allocated from each micro-service.\n+     * @param projectId Project the port belongs to\n+     * @param portStateBulkJson Multiple ports configuration\n+     * @return PortStateBulkJson\n+     * @throws Exception Various exceptions that may occur during the create process\n+     */\n+    @Override\n+    public PortStateBulkJson createPortStateBulk(String projectId, PortStateBulkJson portStateBulkJson) throws Exception {\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n \n-            //Verify Binding Host ID\n-            if (portState.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portState.getBindingHostId());\n+        try {\n+            for (PortState portState: portStateBulkJson.getPortStates()) {\n+                portState.setProjectId(projectId);\n+                createPortStateAsync(portState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NjY1OA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDIxOTMyOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/config/UnitTestConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjo0Nzo0OFrOGX9cqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzowNzowMVrOGX9_Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NzE5NQ==", "bodyText": "Bulk APIs are very fancy. Let us add some UTs to cover them :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427777195", "createdAt": "2020-05-20T06:47:48Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/config/UnitTestConfig.java", "diffHunk": "@@ -82,4 +85,42 @@\n             \"        \\\"allowed_address_pairs\\\":[{\\\"ip_address\\\":\\\"\" + ip2 + \"\\\", \\\"mac_address\\\":\\\"\" + mac1 + \"\\\"}]\\n\" +\n             \"    }\\n\" +\n             \"}\";\n+    public static String createPortBulk = \"{\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4MzMyNw==", "bodyText": "There are two: createPortBulkTest and updateMacAddressAndFixedIpsBulkTest", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427783327", "createdAt": "2020-05-20T07:01:19Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/config/UnitTestConfig.java", "diffHunk": "@@ -82,4 +85,42 @@\n             \"        \\\"allowed_address_pairs\\\":[{\\\"ip_address\\\":\\\"\" + ip2 + \"\\\", \\\"mac_address\\\":\\\"\" + mac1 + \"\\\"}]\\n\" +\n             \"    }\\n\" +\n             \"}\";\n+    public static String createPortBulk = \"{\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NzE5NQ=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4NTc3Mg==", "bodyText": "Oh I see. I didn't find it in this PR. Are they checked in previously?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427785772", "createdAt": "2020-05-20T07:06:30Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/config/UnitTestConfig.java", "diffHunk": "@@ -82,4 +85,42 @@\n             \"        \\\"allowed_address_pairs\\\":[{\\\"ip_address\\\":\\\"\" + ip2 + \"\\\", \\\"mac_address\\\":\\\"\" + mac1 + \"\\\"}]\\n\" +\n             \"    }\\n\" +\n             \"}\";\n+    public static String createPortBulk = \"{\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NzE5NQ=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc4NjAxMA==", "bodyText": "Never mind. Find it now.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r427786010", "createdAt": "2020-05-20T07:07:01Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/config/UnitTestConfig.java", "diffHunk": "@@ -82,4 +85,42 @@\n             \"        \\\"allowed_address_pairs\\\":[{\\\"ip_address\\\":\\\"\" + ip2 + \"\\\", \\\"mac_address\\\":\\\"\" + mac1 + \"\\\"}]\\n\" +\n             \"    }\\n\" +\n             \"}\";\n+    public static String createPortBulk = \"{\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3NzE5NQ=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODQ0NzAwOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/repo/ICacheRepository.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNTo1NjoxNVrOGYnGyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToyNDowNVrOGehDmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1OTcyMA==", "bodyText": "Btw, so Ignite doesn't support a bulk insertion?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r428459720", "createdAt": "2020-05-21T05:56:15Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/repo/ICacheRepository.java", "diffHunk": "@@ -28,5 +29,7 @@\n \n     void addItem(T newItem) throws CacheException;\n \n+    //void addItems(List<T> items) throws CacheException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNTkzMQ==", "bodyText": "Ignite support a bulk insertion,  but if I add this line, all the classes that implement ICacheRepository fail to compile.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430125931", "createdAt": "2020-05-26T02:26:49Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/repo/ICacheRepository.java", "diffHunk": "@@ -28,5 +29,7 @@\n \n     void addItem(T newItem) throws CacheException;\n \n+    //void addItems(List<T> items) throws CacheException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1OTcyMA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgxNDYyMg==", "bodyText": "In that case, we could in a project-wide search for ICacheRepository. Once we turn on the line, we add one missing method for each occurrence and mark them \"Not Implemented\".\nThis is not a urgent matter, but we will need bulk insertion eventually.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430814622", "createdAt": "2020-05-27T01:54:33Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/repo/ICacheRepository.java", "diffHunk": "@@ -28,5 +29,7 @@\n \n     void addItem(T newItem) throws CacheException;\n \n+    //void addItems(List<T> items) throws CacheException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1OTcyMA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MjA1OA==", "bodyText": "@chenpiaoping This will be tracked by Issue #226.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434652058", "createdAt": "2020-06-03T15:24:05Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/repo/ICacheRepository.java", "diffHunk": "@@ -28,5 +29,7 @@\n \n     void addItem(T newItem) throws CacheException;\n \n+    //void addItems(List<T> items) throws CacheException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1OTcyMA=="}, "originalCommit": {"oid": "7def1d013cefd389ba278747eaf6b1e7e9ddc748"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzU3NDE3OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzo0Nzo0MlrOGa4ecw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTozODowMFrOGc8z8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MTQ1OQ==", "bodyText": "As the requested RouteManager API is ready (ref:#203), we should be able to add integration with Route Manager now.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430841459", "createdAt": "2020-05-27T03:47:42Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -94,6 +96,51 @@ private void addPortToHost(String hostId) {\n         //FIXME: Add port to Host\n     }\n \n+    private void createPortStateAsync(PortState portState, AsyncExecutor executor, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwNzQ3NQ==", "bodyText": "@RequestMapping(\n        method = GET,\n        value = {\"/subnets/{subnetId}/routes/{routeId}\"})\npublic RouteWebJson getRuleBySubnetId(@PathVariable String subnetId, @PathVariable String routeId) throws Exception {\n\n    RouteEntity routeEntity = null;\n\n    try {\n        RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetId);\n        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routeId);\n\n        routeEntity = this.routeDatabaseService.getByRouteId(routeId);\n    } catch (ParameterNullOrEmptyException e) {\n        //TODO: REST error code\n        throw new Exception(e);\n    }\n\n    if (routeEntity == null) {\n        //TODO: REST error code\n        return new RouteWebJson();\n    }\n\n    return new RouteWebJson(routeEntity);\n\n}\n\nDoes port manager get the route through this interface? But it requires subnetId and routeId. I thought it just subnetId. Is that right?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r432807475", "createdAt": "2020-05-30T03:58:49Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -94,6 +96,51 @@ private void addPortToHost(String hostId) {\n         //FIXME: Add port to Host\n     }\n \n+    private void createPortStateAsync(PortState portState, AsyncExecutor executor, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MTQ1OQ=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwOTM2OQ==", "bodyText": "@chenpiaoping\nHere is the link to API: \n  \n    \n      alcor/services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteController.java\n    \n    \n         Line 127\n      in\n      26033d0\n    \n    \n    \n    \n\n        \n          \n           @RequestMapping(", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r432809369", "createdAt": "2020-05-30T04:30:24Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -94,6 +96,51 @@ private void addPortToHost(String hostId) {\n         //FIXME: Add port to Host\n     }\n \n+    private void createPortStateAsync(PortState portState, AsyncExecutor executor, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MTQ1OQ=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNTI0NA==", "bodyText": "@chenpiaoping\nHere is the link to API:\n\n  \n    \n      alcor/services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteController.java\n    \n    \n         Line 127\n      in\n      26033d0\n    \n    \n    \n    \n\n        \n          \n           @RequestMapping( \n        \n    \n  \n\n\n\nYes, this is the same API as the one I posted above. I mean, this API needs to provide two parameters, subnetId and routeId, but port manager can't get the routeId, dose port manager need to provide routeId?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r432815244", "createdAt": "2020-05-30T06:17:49Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -94,6 +96,51 @@ private void addPortToHost(String hostId) {\n         //FIXME: Add port to Host\n     }\n \n+    private void createPortStateAsync(PortState portState, AsyncExecutor executor, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MTQ1OQ=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxOTY3NA==", "bodyText": "You are right, Piaoping. Reopen issue #203 as unresolved, and add @kevin-zhonghao to take a further look.\nLet us do this quickly. @chenpiaoping, can you add the API in RouteController.java without the implementation, just to unblock yourself to write necessary codes in Port Manager. @kevin-zhonghao or I will implement the API early next week.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r432819674", "createdAt": "2020-05-30T07:37:34Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -94,6 +96,51 @@ private void addPortToHost(String hostId) {\n         //FIXME: Add port to Host\n     }\n \n+    private void createPortStateAsync(PortState portState, AsyncExecutor executor, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MTQ1OQ=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwOTY1MA==", "bodyText": "Don't worry, this won't block me. Just raised it up here.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r433009650", "createdAt": "2020-06-01T01:38:00Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -94,6 +96,51 @@ private void addPortToHost(String hostId) {\n         //FIXME: Add port to Host\n     }\n \n+    private void createPortStateAsync(PortState portState, AsyncExecutor executor, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MTQ1OQ=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzU3NzQ3OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzo0OTo1OVrOGa4gbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzo0OTo1OVrOGa4gbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MTk2Nw==", "bodyText": "Is update port implementation completed?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430841967", "createdAt": "2020-05-27T03:49:59Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -247,6 +290,68 @@ private void updatePortToHost(PortState portState) {\n \n     }\n \n+    private void updatePortStateAsync(PortState portState, PortState oldPortState, AsyncExecutor executor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzU4MTYxOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzo1Mjo0N1rOGa4iyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo1MzoxMFrOGes8tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MjU2OA==", "bodyText": "We should allocate mac address before releasing the old one. Otherwise, it is possible that after releasing the old mac, Port Manager instance crashes which causes loss of old mac but no new mac is allocated. In the worse case, the old mac address is allocated by some other tenant.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430842568", "createdAt": "2020-05-27T03:52:47Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -247,6 +290,68 @@ private void updatePortToHost(PortState portState) {\n \n     }\n \n+    private void updatePortStateAsync(PortState portState, PortState oldPortState, AsyncExecutor executor,\n+                                      Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Update mac_address\n+        String macAddress = portState.getMacAddress();\n+        String oldMacAddress = oldPortState.getMacAddress();\n+        if (macAddress != null && !oldMacAddress.equals(macAddress)) {\n+            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+            executor.runAsync(macManagerProxy::releaseMacAddress, oldPortState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4NTQ5Mg==", "bodyText": "Since both allocate and release are asynchronous, the order of allocate and release cannot be guaranteed.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430885492", "createdAt": "2020-05-27T06:30:55Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -247,6 +290,68 @@ private void updatePortToHost(PortState portState) {\n \n     }\n \n+    private void updatePortStateAsync(PortState portState, PortState oldPortState, AsyncExecutor executor,\n+                                      Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Update mac_address\n+        String macAddress = portState.getMacAddress();\n+        String oldMacAddress = oldPortState.getMacAddress();\n+        if (macAddress != null && !oldMacAddress.equals(macAddress)) {\n+            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+            executor.runAsync(macManagerProxy::releaseMacAddress, oldPortState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MjU2OA=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5Mjk0NA==", "bodyText": "Good point. But we still needs to address this issue. Two options:\n\nBased on the different exceptions, Port Manager handles it differently. For example, if allocate fails and release succeeds, we need to retry allocation heavily; if allocate succeeds and release fails, we need to verify that the mac is still own by existing port then return new mac.\nMacManager provides one API to \"replace\" mac for a port in one \"transaction\". This appears to be cleaner and easier for clients such as PortManager.\n\nWhat do you think of?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430892944", "createdAt": "2020-05-27T06:50:11Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -247,6 +290,68 @@ private void updatePortToHost(PortState portState) {\n \n     }\n \n+    private void updatePortStateAsync(PortState portState, PortState oldPortState, AsyncExecutor executor,\n+                                      Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Update mac_address\n+        String macAddress = portState.getMacAddress();\n+        String oldMacAddress = oldPortState.getMacAddress();\n+        if (macAddress != null && !oldMacAddress.equals(macAddress)) {\n+            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+            executor.runAsync(macManagerProxy::releaseMacAddress, oldPortState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MjU2OA=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNzQ2OA==", "bodyText": "Mac Manager to provide an update interface would be nice, at least reducing the number of interactions with it. But this exceptions will still exist(for example, allocate  mac address succeeded, but allocate ip address failed), if we handle this exception in the main flow of CRUD processing, it may be a bit complicated, and there is no 100% guarantee that the exception will be handled correctly (for example, what should we do if we try again but fails?). The simple handling is that once an exception occurs, the whole operation is considered to have failed, and the rollback mechanism is used to undo all operations before the failure.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430907468", "createdAt": "2020-05-27T07:21:45Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -247,6 +290,68 @@ private void updatePortToHost(PortState portState) {\n \n     }\n \n+    private void updatePortStateAsync(PortState portState, PortState oldPortState, AsyncExecutor executor,\n+                                      Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Update mac_address\n+        String macAddress = portState.getMacAddress();\n+        String oldMacAddress = oldPortState.getMacAddress();\n+        if (macAddress != null && !oldMacAddress.equals(macAddress)) {\n+            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+            executor.runAsync(macManagerProxy::releaseMacAddress, oldPortState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MjU2OA=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxOTM5NQ==", "bodyText": "Mac Manager to provide an update interface would be nice, at least reducing the number of interactions with it. But this exceptions will still exist(for example, allocate mac address succeeded, but allocate ip address failed),\n\nDoes this comment apply to the replacement API? The replacement API offers atomic operation, either success together or failure together, no mix of the two.\n\nif we handle this exception in the main flow of CRUD processing, it may be a bit complicated, and there is no 100% guarantee that the exception will be handled correctly (for example, what should we do if we try again but fails?). The simple handling is that once an exception occurs, the whole operation is considered to have failed, and the rollback mechanism is used to undo all operations before the failure.\n\nCorrect. The rollback mechanism is intact to protect resources across microservices as described, but not within the same microservices therefore we need the upstream service to provide \"replacement\" API so that client don't need to worry about those complicated rollback mechanism.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430919395", "createdAt": "2020-05-27T07:44:17Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -247,6 +290,68 @@ private void updatePortToHost(PortState portState) {\n \n     }\n \n+    private void updatePortStateAsync(PortState portState, PortState oldPortState, AsyncExecutor executor,\n+                                      Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Update mac_address\n+        String macAddress = portState.getMacAddress();\n+        String oldMacAddress = oldPortState.getMacAddress();\n+        if (macAddress != null && !oldMacAddress.equals(macAddress)) {\n+            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+            executor.runAsync(macManagerProxy::releaseMacAddress, oldPortState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MjU2OA=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDU0Ng==", "bodyText": "If no objection, let us proceed to provide two \"replacement\" APIs, one in Mac Manager, and one in IP Manager then. Thoughts?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430920546", "createdAt": "2020-05-27T07:46:18Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -247,6 +290,68 @@ private void updatePortToHost(PortState portState) {\n \n     }\n \n+    private void updatePortStateAsync(PortState portState, PortState oldPortState, AsyncExecutor executor,\n+                                      Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Update mac_address\n+        String macAddress = portState.getMacAddress();\n+        String oldMacAddress = oldPortState.getMacAddress();\n+        if (macAddress != null && !oldMacAddress.equals(macAddress)) {\n+            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+            executor.runAsync(macManagerProxy::releaseMacAddress, oldPortState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MjU2OA=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MTQyMw==", "bodyText": "Agreed. No problem.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430981423", "createdAt": "2020-05-27T09:26:36Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -247,6 +290,68 @@ private void updatePortToHost(PortState portState) {\n \n     }\n \n+    private void updatePortStateAsync(PortState portState, PortState oldPortState, AsyncExecutor executor,\n+                                      Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Update mac_address\n+        String macAddress = portState.getMacAddress();\n+        String oldMacAddress = oldPortState.getMacAddress();\n+        if (macAddress != null && !oldMacAddress.equals(macAddress)) {\n+            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+            executor.runAsync(macManagerProxy::releaseMacAddress, oldPortState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MjU2OA=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NjkwMw==", "bodyText": "Tracked by Issue #229.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434846903", "createdAt": "2020-06-03T20:53:10Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -247,6 +290,68 @@ private void updatePortToHost(PortState portState) {\n \n     }\n \n+    private void updatePortStateAsync(PortState portState, PortState oldPortState, AsyncExecutor executor,\n+                                      Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Update mac_address\n+        String macAddress = portState.getMacAddress();\n+        String oldMacAddress = oldPortState.getMacAddress();\n+        if (macAddress != null && !oldMacAddress.equals(macAddress)) {\n+            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+            executor.runAsync(macManagerProxy::releaseMacAddress, oldPortState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MjU2OA=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzU4NTUyOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzo1NToyOFrOGa4lCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo1MzozMlrOGes9aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzE0NQ==", "bodyText": "Same there. Allocate before release.\nAlso, could you give a simple comment or example to explain addFixedIps and delFixedIps to increase code readability?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430843145", "createdAt": "2020-05-27T03:55:28Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -247,6 +290,68 @@ private void updatePortToHost(PortState portState) {\n \n     }\n \n+    private void updatePortStateAsync(PortState portState, PortState oldPortState, AsyncExecutor executor,\n+                                      Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Update mac_address\n+        String macAddress = portState.getMacAddress();\n+        String oldMacAddress = oldPortState.getMacAddress();\n+        if (macAddress != null && !oldMacAddress.equals(macAddress)) {\n+            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+            executor.runAsync(macManagerProxy::releaseMacAddress, oldPortState);\n+            executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n+            oldPortState.setMacAddress(macAddress);\n+        }\n+\n+        //Update device_owner and device_id\n+        String deviceOwnerNew = portState.getDeviceOwner();\n+        String deviceIdNew = portState.getDeviceId();\n+        String deviceIdOld = oldPortState.getDeviceId();\n+        String tenantId = oldPortState.getTenantId();\n+\n+        if (deviceOwnerNew != null && deviceIdNew != null && !deviceIdNew.equals(deviceIdOld)) {\n+            if (DeviceOwner.ROUTER.getOwner().equals(deviceOwnerNew)) {\n+                verifyRouter(deviceIdNew, tenantId);\n+            }\n+        }\n+\n+        //Update fixed_ips\n+        List<PortState.FixedIp> fixedIps = portState.getFixedIps();\n+        IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n+\n+        if (fixedIps != null) {\n+            List<PortState.FixedIp> oldFixedIps = oldPortState.getFixedIps();\n+\n+            List<PortState.FixedIp> addFixedIps = fixedIpsCompare(fixedIps, oldFixedIps);\n+            List<PortState.FixedIp> delFixedIps = fixedIpsCompare(oldFixedIps, fixedIps);\n+\n+            if (delFixedIps.size() > 0) {\n+                executor.runAsync(ipManagerProxy::releaseIpAddressBulk, delFixedIps);\n+            }\n+\n+            if (addFixedIps.size() > 0) {\n+                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, addFixedIps);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5MzM0Nw==", "bodyText": "Same replacement API might be needed for PIP manager as well.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430893347", "createdAt": "2020-05-27T06:51:07Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -247,6 +290,68 @@ private void updatePortToHost(PortState portState) {\n \n     }\n \n+    private void updatePortStateAsync(PortState portState, PortState oldPortState, AsyncExecutor executor,\n+                                      Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Update mac_address\n+        String macAddress = portState.getMacAddress();\n+        String oldMacAddress = oldPortState.getMacAddress();\n+        if (macAddress != null && !oldMacAddress.equals(macAddress)) {\n+            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+            executor.runAsync(macManagerProxy::releaseMacAddress, oldPortState);\n+            executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n+            oldPortState.setMacAddress(macAddress);\n+        }\n+\n+        //Update device_owner and device_id\n+        String deviceOwnerNew = portState.getDeviceOwner();\n+        String deviceIdNew = portState.getDeviceId();\n+        String deviceIdOld = oldPortState.getDeviceId();\n+        String tenantId = oldPortState.getTenantId();\n+\n+        if (deviceOwnerNew != null && deviceIdNew != null && !deviceIdNew.equals(deviceIdOld)) {\n+            if (DeviceOwner.ROUTER.getOwner().equals(deviceOwnerNew)) {\n+                verifyRouter(deviceIdNew, tenantId);\n+            }\n+        }\n+\n+        //Update fixed_ips\n+        List<PortState.FixedIp> fixedIps = portState.getFixedIps();\n+        IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n+\n+        if (fixedIps != null) {\n+            List<PortState.FixedIp> oldFixedIps = oldPortState.getFixedIps();\n+\n+            List<PortState.FixedIp> addFixedIps = fixedIpsCompare(fixedIps, oldFixedIps);\n+            List<PortState.FixedIp> delFixedIps = fixedIpsCompare(oldFixedIps, fixedIps);\n+\n+            if (delFixedIps.size() > 0) {\n+                executor.runAsync(ipManagerProxy::releaseIpAddressBulk, delFixedIps);\n+            }\n+\n+            if (addFixedIps.size() > 0) {\n+                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, addFixedIps);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzE0NQ=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NzA4MA==", "bodyText": "Tracked by Issue #229.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434847080", "createdAt": "2020-06-03T20:53:32Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -247,6 +290,68 @@ private void updatePortToHost(PortState portState) {\n \n     }\n \n+    private void updatePortStateAsync(PortState portState, PortState oldPortState, AsyncExecutor executor,\n+                                      Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Update mac_address\n+        String macAddress = portState.getMacAddress();\n+        String oldMacAddress = oldPortState.getMacAddress();\n+        if (macAddress != null && !oldMacAddress.equals(macAddress)) {\n+            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+            executor.runAsync(macManagerProxy::releaseMacAddress, oldPortState);\n+            executor.runAsync(macManagerProxy::allocateFixedMacAddress, portState);\n+            oldPortState.setMacAddress(macAddress);\n+        }\n+\n+        //Update device_owner and device_id\n+        String deviceOwnerNew = portState.getDeviceOwner();\n+        String deviceIdNew = portState.getDeviceId();\n+        String deviceIdOld = oldPortState.getDeviceId();\n+        String tenantId = oldPortState.getTenantId();\n+\n+        if (deviceOwnerNew != null && deviceIdNew != null && !deviceIdNew.equals(deviceIdOld)) {\n+            if (DeviceOwner.ROUTER.getOwner().equals(deviceOwnerNew)) {\n+                verifyRouter(deviceIdNew, tenantId);\n+            }\n+        }\n+\n+        //Update fixed_ips\n+        List<PortState.FixedIp> fixedIps = portState.getFixedIps();\n+        IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portState.getProjectId());\n+\n+        if (fixedIps != null) {\n+            List<PortState.FixedIp> oldFixedIps = oldPortState.getFixedIps();\n+\n+            List<PortState.FixedIp> addFixedIps = fixedIpsCompare(fixedIps, oldFixedIps);\n+            List<PortState.FixedIp> delFixedIps = fixedIpsCompare(oldFixedIps, fixedIps);\n+\n+            if (delFixedIps.size() > 0) {\n+                executor.runAsync(ipManagerProxy::releaseIpAddressBulk, delFixedIps);\n+            }\n+\n+            if (addFixedIps.size() > 0) {\n+                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, addFixedIps);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzE0NQ=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzU4NzIyOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzo1Njo0MVrOGa4mEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowNjozNFrOGa8DQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzQxMA==", "bodyText": "newPortState?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430843410", "createdAt": "2020-05-27T03:56:41Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -267,84 +372,70 @@ public PortStateJson updatePortState(String projectId, String portId, PortStateJ\n         AsyncExecutor executor = new AsyncExecutor();\n \n         PortState portState = portStateJson.getPortState();\n-        PortState oldPortState = portRepository.findItem(portId);\n+        portState.setProjectId(projectId);\n \n         try {\n-            if (portRepository.findItem(portId) == null) {\n+            PortState oldPortState = portRepository.findItem(portId);\n+            if (oldPortState == null) {\n                 throw new PortStateNotFoundException();\n             }\n \n-            portState.setProjectId(projectId);\n-\n-            //Update mac_address\n+            updatePortStateAsync(portState, oldPortState, executor, rollbacks);\n \n-            //Update device_owner and device_id\n-            String deviceOwnerNew = portState.getDeviceOwner();\n-            String deviceIdNew = portState.getDeviceId();\n-            String deviceIdOld = oldPortState.getDeviceId();\n-            String tenantId = oldPortState.getTenantId();\n-\n-            if (deviceOwnerNew != null && deviceIdNew != null && !deviceIdNew.equals(deviceIdOld)) {\n-                if (DeviceOwner.ROUTER.getOwner().equals(deviceOwnerNew)) {\n-                    verifyRouter(deviceIdNew, tenantId);\n-                }\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Update fixed_ips\n-            List<PortState.FixedIp> fixedIps = portState.getFixedIps();\n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, projectId);\n+            //Persist the new configuration of port to the db\n+            portRepository.addItem(oldPortState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4NzExMQ==", "bodyText": "no, newPortState not have complete fields.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430887111", "createdAt": "2020-05-27T06:35:12Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -267,84 +372,70 @@ public PortStateJson updatePortState(String projectId, String portId, PortStateJ\n         AsyncExecutor executor = new AsyncExecutor();\n \n         PortState portState = portStateJson.getPortState();\n-        PortState oldPortState = portRepository.findItem(portId);\n+        portState.setProjectId(projectId);\n \n         try {\n-            if (portRepository.findItem(portId) == null) {\n+            PortState oldPortState = portRepository.findItem(portId);\n+            if (oldPortState == null) {\n                 throw new PortStateNotFoundException();\n             }\n \n-            portState.setProjectId(projectId);\n-\n-            //Update mac_address\n+            updatePortStateAsync(portState, oldPortState, executor, rollbacks);\n \n-            //Update device_owner and device_id\n-            String deviceOwnerNew = portState.getDeviceOwner();\n-            String deviceIdNew = portState.getDeviceId();\n-            String deviceIdOld = oldPortState.getDeviceId();\n-            String tenantId = oldPortState.getTenantId();\n-\n-            if (deviceOwnerNew != null && deviceIdNew != null && !deviceIdNew.equals(deviceIdOld)) {\n-                if (DeviceOwner.ROUTER.getOwner().equals(deviceOwnerNew)) {\n-                    verifyRouter(deviceIdNew, tenantId);\n-                }\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Update fixed_ips\n-            List<PortState.FixedIp> fixedIps = portState.getFixedIps();\n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, projectId);\n+            //Persist the new configuration of port to the db\n+            portRepository.addItem(oldPortState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzQxMA=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5NDU3Mw==", "bodyText": "Sorry I don't quite follow this. Why do we want to persist the \"oldPortState\" in an update call? Can you please elaborate?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430894573", "createdAt": "2020-05-27T06:53:55Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -267,84 +372,70 @@ public PortStateJson updatePortState(String projectId, String portId, PortStateJ\n         AsyncExecutor executor = new AsyncExecutor();\n \n         PortState portState = portStateJson.getPortState();\n-        PortState oldPortState = portRepository.findItem(portId);\n+        portState.setProjectId(projectId);\n \n         try {\n-            if (portRepository.findItem(portId) == null) {\n+            PortState oldPortState = portRepository.findItem(portId);\n+            if (oldPortState == null) {\n                 throw new PortStateNotFoundException();\n             }\n \n-            portState.setProjectId(projectId);\n-\n-            //Update mac_address\n+            updatePortStateAsync(portState, oldPortState, executor, rollbacks);\n \n-            //Update device_owner and device_id\n-            String deviceOwnerNew = portState.getDeviceOwner();\n-            String deviceIdNew = portState.getDeviceId();\n-            String deviceIdOld = oldPortState.getDeviceId();\n-            String tenantId = oldPortState.getTenantId();\n-\n-            if (deviceOwnerNew != null && deviceIdNew != null && !deviceIdNew.equals(deviceIdOld)) {\n-                if (DeviceOwner.ROUTER.getOwner().equals(deviceOwnerNew)) {\n-                    verifyRouter(deviceIdNew, tenantId);\n-                }\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Update fixed_ips\n-            List<PortState.FixedIp> fixedIps = portState.getFixedIps();\n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, projectId);\n+            //Persist the new configuration of port to the db\n+            portRepository.addItem(oldPortState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzQxMA=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMDAzNA==", "bodyText": "Because some fields in PortState are generated dynamically during create, in addition, only part of the fields are allowed to be updated during update, so the fields in portState may be incomplete.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430900034", "createdAt": "2020-05-27T07:06:34Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -267,84 +372,70 @@ public PortStateJson updatePortState(String projectId, String portId, PortStateJ\n         AsyncExecutor executor = new AsyncExecutor();\n \n         PortState portState = portStateJson.getPortState();\n-        PortState oldPortState = portRepository.findItem(portId);\n+        portState.setProjectId(projectId);\n \n         try {\n-            if (portRepository.findItem(portId) == null) {\n+            PortState oldPortState = portRepository.findItem(portId);\n+            if (oldPortState == null) {\n                 throw new PortStateNotFoundException();\n             }\n \n-            portState.setProjectId(projectId);\n-\n-            //Update mac_address\n+            updatePortStateAsync(portState, oldPortState, executor, rollbacks);\n \n-            //Update device_owner and device_id\n-            String deviceOwnerNew = portState.getDeviceOwner();\n-            String deviceIdNew = portState.getDeviceId();\n-            String deviceIdOld = oldPortState.getDeviceId();\n-            String tenantId = oldPortState.getTenantId();\n-\n-            if (deviceOwnerNew != null && deviceIdNew != null && !deviceIdNew.equals(deviceIdOld)) {\n-                if (DeviceOwner.ROUTER.getOwner().equals(deviceOwnerNew)) {\n-                    verifyRouter(deviceIdNew, tenantId);\n-                }\n-            }\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n \n-            //Update fixed_ips\n-            List<PortState.FixedIp> fixedIps = portState.getFixedIps();\n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, projectId);\n+            //Persist the new configuration of port to the db\n+            portRepository.addItem(oldPortState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzQxMA=="}, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzU4ODg0OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzo1Nzo0NlrOGa4nBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzo1Nzo0NlrOGa4nBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0MzY1NA==", "bodyText": "The update logic is quite tricky. Do we have sufficient UTs to cover those corner cases?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430843654", "createdAt": "2020-05-27T03:57:46Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -267,84 +372,70 @@ public PortStateJson updatePortState(String projectId, String portId, PortStateJ\n         AsyncExecutor executor = new AsyncExecutor();\n \n         PortState portState = portStateJson.getPortState();\n-        PortState oldPortState = portRepository.findItem(portId);\n+        portState.setProjectId(projectId);\n \n         try {\n-            if (portRepository.findItem(portId) == null) {\n+            PortState oldPortState = portRepository.findItem(portId);\n+            if (oldPortState == null) {\n                 throw new PortStateNotFoundException();\n             }\n \n-            portState.setProjectId(projectId);\n-\n-            //Update mac_address\n+            updatePortStateAsync(portState, oldPortState, executor, rollbacks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e219dbe3c5fee2b93f928a7320bb2d2885da9"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzY0NzAwOnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDozOTozOFrOGa5Kxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyOTozN1rOGa8xJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg1MjgwNg==", "bodyText": "Can we use fast_path instead of fastPath?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430852806", "createdAt": "2020-05-27T04:39:38Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "diffHunk": "@@ -0,0 +1,600 @@\n+= Port Manager Design Specification\n+Piaoping Chen <chenpiaoping@yeah.net>, Liguang Xie <lxie@futurewei.com>\n+v0.1, 2020-04-08\n+:toc: right\n+:imagesdir: ../../images\n+\n+== Overview\n+\n+Port manager is an Alcor microservice which manages all ports of vms, It provides tenant with the CRUD interface of port.\n+When creating a virtual machine, the Rest interface of Port Manager is called to create a port,\n+Port Manager allocate the corresponding resources (such as mac address, ip address) according to the requested configuration, and create a port in the database.\n+If the port binding host,Port Manager will send it to dataplane manager,the configuration of port will eventually be sent to the bound host.\n+Port can be used as a network card for a virtual machine or as an interface for a router.\n+\n+== Service Requirements\n+\n+[arabic]\n+. Support CRUD operations of port.\n+. Support create and update of a list of ports.\n+. Working together with other services including vpc manager, subnet manager, mac manager, security group manager and dataplane manager.\n+. Support asynchronous interaction with other services\n+. Rollback is supported when CRUD operation occurs exception.\n+. Support query operation with any field of port as parameters.\n+\n+\n+== REST APIs\n+\n+=== API Snapshot\n+\n+[width=\"100%\",cols=\"22%,12%,50%,17%\"]\n+|===\n+|*API Name* |*Method* |*Request*|*Response*\n+\n+|Create port\n+|POST\n+|/project/{project_id}/ports\n+|port state\n+<<Create_Port,[sample]>>\n+\n+|Create port bulk\n+|POST\n+|/project/{project_id}/ports/bulk\n+|port state list\n+<<Create_Port_Bulk,[sample]>>\n+\n+|Update port\n+|PUT\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Update_Port,[sample]>>\n+\n+|Delete port\n+|POST\n+|/project/{project_id}/ports/{port_id}\n+|None\n+<<Delete_Port,[sample]>>\n+\n+|Get port\n+|GET\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Get_Port,[sample]>>\n+\n+|List port\n+|GET\n+|/project/{project_id}/ports\n+|port state list\n+<<List_Port,[sample]>>\n+|===\n+\n+=== API Specification\n+\n+anchor:Create_Port[]\n+**(1) Create port**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/ports`\n+\n+* Request Parameter: `@PathVariable String projectId`\n+\n+* Response: port state\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/project/3d53801c-32ce-4e97-9572-bb966f4de79c/ports\n+\n+Body:\n+{\n+\t\"port\": {\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}]\n+\t}\n+}\n+\n+Response:\n+{\n+\t\"port\": {\n+\t\t\"fastPath\": false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2d5f1e2703237730bea53e9e2ff429b1d5ddad"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMTc4Mg==", "bodyText": "Oh, let me check why it became fastPath.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430911782", "createdAt": "2020-05-27T07:29:37Z", "author": {"login": "chenpiaoping"}, "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "diffHunk": "@@ -0,0 +1,600 @@\n+= Port Manager Design Specification\n+Piaoping Chen <chenpiaoping@yeah.net>, Liguang Xie <lxie@futurewei.com>\n+v0.1, 2020-04-08\n+:toc: right\n+:imagesdir: ../../images\n+\n+== Overview\n+\n+Port manager is an Alcor microservice which manages all ports of vms, It provides tenant with the CRUD interface of port.\n+When creating a virtual machine, the Rest interface of Port Manager is called to create a port,\n+Port Manager allocate the corresponding resources (such as mac address, ip address) according to the requested configuration, and create a port in the database.\n+If the port binding host,Port Manager will send it to dataplane manager,the configuration of port will eventually be sent to the bound host.\n+Port can be used as a network card for a virtual machine or as an interface for a router.\n+\n+== Service Requirements\n+\n+[arabic]\n+. Support CRUD operations of port.\n+. Support create and update of a list of ports.\n+. Working together with other services including vpc manager, subnet manager, mac manager, security group manager and dataplane manager.\n+. Support asynchronous interaction with other services\n+. Rollback is supported when CRUD operation occurs exception.\n+. Support query operation with any field of port as parameters.\n+\n+\n+== REST APIs\n+\n+=== API Snapshot\n+\n+[width=\"100%\",cols=\"22%,12%,50%,17%\"]\n+|===\n+|*API Name* |*Method* |*Request*|*Response*\n+\n+|Create port\n+|POST\n+|/project/{project_id}/ports\n+|port state\n+<<Create_Port,[sample]>>\n+\n+|Create port bulk\n+|POST\n+|/project/{project_id}/ports/bulk\n+|port state list\n+<<Create_Port_Bulk,[sample]>>\n+\n+|Update port\n+|PUT\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Update_Port,[sample]>>\n+\n+|Delete port\n+|POST\n+|/project/{project_id}/ports/{port_id}\n+|None\n+<<Delete_Port,[sample]>>\n+\n+|Get port\n+|GET\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Get_Port,[sample]>>\n+\n+|List port\n+|GET\n+|/project/{project_id}/ports\n+|port state list\n+<<List_Port,[sample]>>\n+|===\n+\n+=== API Specification\n+\n+anchor:Create_Port[]\n+**(1) Create port**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/ports`\n+\n+* Request Parameter: `@PathVariable String projectId`\n+\n+* Response: port state\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/project/3d53801c-32ce-4e97-9572-bb966f4de79c/ports\n+\n+Body:\n+{\n+\t\"port\": {\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}]\n+\t}\n+}\n+\n+Response:\n+{\n+\t\"port\": {\n+\t\t\"fastPath\": false,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg1MjgwNg=="}, "originalCommit": {"oid": "af2d5f1e2703237730bea53e9e2ff429b1d5ddad"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzY0OTc5OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDo0MTowNVrOGa5MVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDo0MTowNVrOGa5MVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg1MzIwNA==", "bodyText": "Somehow we have duplicated field.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430853204", "createdAt": "2020-05-27T04:41:05Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "diffHunk": "@@ -0,0 +1,600 @@\n+= Port Manager Design Specification\n+Piaoping Chen <chenpiaoping@yeah.net>, Liguang Xie <lxie@futurewei.com>\n+v0.1, 2020-04-08\n+:toc: right\n+:imagesdir: ../../images\n+\n+== Overview\n+\n+Port manager is an Alcor microservice which manages all ports of vms, It provides tenant with the CRUD interface of port.\n+When creating a virtual machine, the Rest interface of Port Manager is called to create a port,\n+Port Manager allocate the corresponding resources (such as mac address, ip address) according to the requested configuration, and create a port in the database.\n+If the port binding host,Port Manager will send it to dataplane manager,the configuration of port will eventually be sent to the bound host.\n+Port can be used as a network card for a virtual machine or as an interface for a router.\n+\n+== Service Requirements\n+\n+[arabic]\n+. Support CRUD operations of port.\n+. Support create and update of a list of ports.\n+. Working together with other services including vpc manager, subnet manager, mac manager, security group manager and dataplane manager.\n+. Support asynchronous interaction with other services\n+. Rollback is supported when CRUD operation occurs exception.\n+. Support query operation with any field of port as parameters.\n+\n+\n+== REST APIs\n+\n+=== API Snapshot\n+\n+[width=\"100%\",cols=\"22%,12%,50%,17%\"]\n+|===\n+|*API Name* |*Method* |*Request*|*Response*\n+\n+|Create port\n+|POST\n+|/project/{project_id}/ports\n+|port state\n+<<Create_Port,[sample]>>\n+\n+|Create port bulk\n+|POST\n+|/project/{project_id}/ports/bulk\n+|port state list\n+<<Create_Port_Bulk,[sample]>>\n+\n+|Update port\n+|PUT\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Update_Port,[sample]>>\n+\n+|Delete port\n+|POST\n+|/project/{project_id}/ports/{port_id}\n+|None\n+<<Delete_Port,[sample]>>\n+\n+|Get port\n+|GET\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Get_Port,[sample]>>\n+\n+|List port\n+|GET\n+|/project/{project_id}/ports\n+|port state list\n+<<List_Port,[sample]>>\n+|===\n+\n+=== API Specification\n+\n+anchor:Create_Port[]\n+**(1) Create port**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/ports`\n+\n+* Request Parameter: `@PathVariable String projectId`\n+\n+* Response: port state\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/project/3d53801c-32ce-4e97-9572-bb966f4de79c/ports\n+\n+Body:\n+{\n+\t\"port\": {\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}]\n+\t}\n+}\n+\n+Response:\n+{\n+\t\"port\": {\n+\t\t\"fastPath\": false,\n+\t\t\"project_id\": \"3d53801c-32ce-4e97-9572-bb966f4de79c\",\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"name\": null,\n+\t\t\"description\": null,\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"admin_state_up\": false,\n+\t\t\"mac_address\": \"00:01:6C:06:A6:29\",\n+\t\t\"veth_name\": null,\n+\t\t\"fast_path\": false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2d5f1e2703237730bea53e9e2ff429b1d5ddad"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzY1MDYyOnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDo0MTo0OFrOGa5M3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDo0MTo0OFrOGa5M3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg1MzM0Mg==", "bodyText": "let us use \"network_id\", instead of vpc_id, to be OpenStack compatible :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430853342", "createdAt": "2020-05-27T04:41:48Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "diffHunk": "@@ -0,0 +1,600 @@\n+= Port Manager Design Specification\n+Piaoping Chen <chenpiaoping@yeah.net>, Liguang Xie <lxie@futurewei.com>\n+v0.1, 2020-04-08\n+:toc: right\n+:imagesdir: ../../images\n+\n+== Overview\n+\n+Port manager is an Alcor microservice which manages all ports of vms, It provides tenant with the CRUD interface of port.\n+When creating a virtual machine, the Rest interface of Port Manager is called to create a port,\n+Port Manager allocate the corresponding resources (such as mac address, ip address) according to the requested configuration, and create a port in the database.\n+If the port binding host,Port Manager will send it to dataplane manager,the configuration of port will eventually be sent to the bound host.\n+Port can be used as a network card for a virtual machine or as an interface for a router.\n+\n+== Service Requirements\n+\n+[arabic]\n+. Support CRUD operations of port.\n+. Support create and update of a list of ports.\n+. Working together with other services including vpc manager, subnet manager, mac manager, security group manager and dataplane manager.\n+. Support asynchronous interaction with other services\n+. Rollback is supported when CRUD operation occurs exception.\n+. Support query operation with any field of port as parameters.\n+\n+\n+== REST APIs\n+\n+=== API Snapshot\n+\n+[width=\"100%\",cols=\"22%,12%,50%,17%\"]\n+|===\n+|*API Name* |*Method* |*Request*|*Response*\n+\n+|Create port\n+|POST\n+|/project/{project_id}/ports\n+|port state\n+<<Create_Port,[sample]>>\n+\n+|Create port bulk\n+|POST\n+|/project/{project_id}/ports/bulk\n+|port state list\n+<<Create_Port_Bulk,[sample]>>\n+\n+|Update port\n+|PUT\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Update_Port,[sample]>>\n+\n+|Delete port\n+|POST\n+|/project/{project_id}/ports/{port_id}\n+|None\n+<<Delete_Port,[sample]>>\n+\n+|Get port\n+|GET\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Get_Port,[sample]>>\n+\n+|List port\n+|GET\n+|/project/{project_id}/ports\n+|port state list\n+<<List_Port,[sample]>>\n+|===\n+\n+=== API Specification\n+\n+anchor:Create_Port[]\n+**(1) Create port**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/ports`\n+\n+* Request Parameter: `@PathVariable String projectId`\n+\n+* Response: port state\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/project/3d53801c-32ce-4e97-9572-bb966f4de79c/ports\n+\n+Body:\n+{\n+\t\"port\": {\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}]\n+\t}\n+}\n+\n+Response:\n+{\n+\t\"port\": {\n+\t\t\"fastPath\": false,\n+\t\t\"project_id\": \"3d53801c-32ce-4e97-9572-bb966f4de79c\",\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"name\": null,\n+\t\t\"description\": null,\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2d5f1e2703237730bea53e9e2ff429b1d5ddad"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzcxNDAwOnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNToyMjoxM1rOGa5y6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozMzo1MVrOGa85dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MzA4MA==", "bodyText": "For port binding properties, could we add minimum set of validation, for example, only allow specific given value to pass?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430863080", "createdAt": "2020-05-27T05:22:13Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "diffHunk": "@@ -0,0 +1,600 @@\n+= Port Manager Design Specification\n+Piaoping Chen <chenpiaoping@yeah.net>, Liguang Xie <lxie@futurewei.com>\n+v0.1, 2020-04-08\n+:toc: right\n+:imagesdir: ../../images\n+\n+== Overview\n+\n+Port manager is an Alcor microservice which manages all ports of vms, It provides tenant with the CRUD interface of port.\n+When creating a virtual machine, the Rest interface of Port Manager is called to create a port,\n+Port Manager allocate the corresponding resources (such as mac address, ip address) according to the requested configuration, and create a port in the database.\n+If the port binding host,Port Manager will send it to dataplane manager,the configuration of port will eventually be sent to the bound host.\n+Port can be used as a network card for a virtual machine or as an interface for a router.\n+\n+== Service Requirements\n+\n+[arabic]\n+. Support CRUD operations of port.\n+. Support create and update of a list of ports.\n+. Working together with other services including vpc manager, subnet manager, mac manager, security group manager and dataplane manager.\n+. Support asynchronous interaction with other services\n+. Rollback is supported when CRUD operation occurs exception.\n+. Support query operation with any field of port as parameters.\n+\n+\n+== REST APIs\n+\n+=== API Snapshot\n+\n+[width=\"100%\",cols=\"22%,12%,50%,17%\"]\n+|===\n+|*API Name* |*Method* |*Request*|*Response*\n+\n+|Create port\n+|POST\n+|/project/{project_id}/ports\n+|port state\n+<<Create_Port,[sample]>>\n+\n+|Create port bulk\n+|POST\n+|/project/{project_id}/ports/bulk\n+|port state list\n+<<Create_Port_Bulk,[sample]>>\n+\n+|Update port\n+|PUT\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Update_Port,[sample]>>\n+\n+|Delete port\n+|POST\n+|/project/{project_id}/ports/{port_id}\n+|None\n+<<Delete_Port,[sample]>>\n+\n+|Get port\n+|GET\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Get_Port,[sample]>>\n+\n+|List port\n+|GET\n+|/project/{project_id}/ports\n+|port state list\n+<<List_Port,[sample]>>\n+|===\n+\n+=== API Specification\n+\n+anchor:Create_Port[]\n+**(1) Create port**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/ports`\n+\n+* Request Parameter: `@PathVariable String projectId`\n+\n+* Response: port state\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/project/3d53801c-32ce-4e97-9572-bb966f4de79c/ports\n+\n+Body:\n+{\n+\t\"port\": {\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}]\n+\t}\n+}\n+\n+Response:\n+{\n+\t\"port\": {\n+\t\t\"fastPath\": false,\n+\t\t\"project_id\": \"3d53801c-32ce-4e97-9572-bb966f4de79c\",\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"name\": null,\n+\t\t\"description\": null,\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"admin_state_up\": false,\n+\t\t\"mac_address\": \"00:01:6C:06:A6:29\",\n+\t\t\"veth_name\": null,\n+\t\t\"fast_path\": false,\n+\t\t\"device_id\": null,\n+\t\t\"device_owner\": null,\n+\t\t\"status\": null,\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}],\n+\t\t\"extra_dhcp_opts\": null,\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"binding:host_id\": null,\n+\t\t\"binding:profile\": null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2d5f1e2703237730bea53e9e2ff429b1d5ddad"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMzkxMA==", "bodyText": "Yes, let me add some logic of validation checking in the PortController.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430913910", "createdAt": "2020-05-27T07:33:51Z", "author": {"login": "chenpiaoping"}, "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "diffHunk": "@@ -0,0 +1,600 @@\n+= Port Manager Design Specification\n+Piaoping Chen <chenpiaoping@yeah.net>, Liguang Xie <lxie@futurewei.com>\n+v0.1, 2020-04-08\n+:toc: right\n+:imagesdir: ../../images\n+\n+== Overview\n+\n+Port manager is an Alcor microservice which manages all ports of vms, It provides tenant with the CRUD interface of port.\n+When creating a virtual machine, the Rest interface of Port Manager is called to create a port,\n+Port Manager allocate the corresponding resources (such as mac address, ip address) according to the requested configuration, and create a port in the database.\n+If the port binding host,Port Manager will send it to dataplane manager,the configuration of port will eventually be sent to the bound host.\n+Port can be used as a network card for a virtual machine or as an interface for a router.\n+\n+== Service Requirements\n+\n+[arabic]\n+. Support CRUD operations of port.\n+. Support create and update of a list of ports.\n+. Working together with other services including vpc manager, subnet manager, mac manager, security group manager and dataplane manager.\n+. Support asynchronous interaction with other services\n+. Rollback is supported when CRUD operation occurs exception.\n+. Support query operation with any field of port as parameters.\n+\n+\n+== REST APIs\n+\n+=== API Snapshot\n+\n+[width=\"100%\",cols=\"22%,12%,50%,17%\"]\n+|===\n+|*API Name* |*Method* |*Request*|*Response*\n+\n+|Create port\n+|POST\n+|/project/{project_id}/ports\n+|port state\n+<<Create_Port,[sample]>>\n+\n+|Create port bulk\n+|POST\n+|/project/{project_id}/ports/bulk\n+|port state list\n+<<Create_Port_Bulk,[sample]>>\n+\n+|Update port\n+|PUT\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Update_Port,[sample]>>\n+\n+|Delete port\n+|POST\n+|/project/{project_id}/ports/{port_id}\n+|None\n+<<Delete_Port,[sample]>>\n+\n+|Get port\n+|GET\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Get_Port,[sample]>>\n+\n+|List port\n+|GET\n+|/project/{project_id}/ports\n+|port state list\n+<<List_Port,[sample]>>\n+|===\n+\n+=== API Specification\n+\n+anchor:Create_Port[]\n+**(1) Create port**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/ports`\n+\n+* Request Parameter: `@PathVariable String projectId`\n+\n+* Response: port state\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/project/3d53801c-32ce-4e97-9572-bb966f4de79c/ports\n+\n+Body:\n+{\n+\t\"port\": {\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}]\n+\t}\n+}\n+\n+Response:\n+{\n+\t\"port\": {\n+\t\t\"fastPath\": false,\n+\t\t\"project_id\": \"3d53801c-32ce-4e97-9572-bb966f4de79c\",\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"name\": null,\n+\t\t\"description\": null,\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"admin_state_up\": false,\n+\t\t\"mac_address\": \"00:01:6C:06:A6:29\",\n+\t\t\"veth_name\": null,\n+\t\t\"fast_path\": false,\n+\t\t\"device_id\": null,\n+\t\t\"device_owner\": null,\n+\t\t\"status\": null,\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}],\n+\t\t\"extra_dhcp_opts\": null,\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"binding:host_id\": null,\n+\t\t\"binding:profile\": null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MzA4MA=="}, "originalCommit": {"oid": "af2d5f1e2703237730bea53e9e2ff429b1d5ddad"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzcxNjc1OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNToyMzo0N1rOGa50iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNToyMzo0N1rOGa50iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MzQ5OQ==", "bodyText": "We don't have created_at and updated_at value. Refer to latest VPC/Subnet manager implementation, which just added those fields.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430863499", "createdAt": "2020-05-27T05:23:47Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "diffHunk": "@@ -0,0 +1,600 @@\n+= Port Manager Design Specification\n+Piaoping Chen <chenpiaoping@yeah.net>, Liguang Xie <lxie@futurewei.com>\n+v0.1, 2020-04-08\n+:toc: right\n+:imagesdir: ../../images\n+\n+== Overview\n+\n+Port manager is an Alcor microservice which manages all ports of vms, It provides tenant with the CRUD interface of port.\n+When creating a virtual machine, the Rest interface of Port Manager is called to create a port,\n+Port Manager allocate the corresponding resources (such as mac address, ip address) according to the requested configuration, and create a port in the database.\n+If the port binding host,Port Manager will send it to dataplane manager,the configuration of port will eventually be sent to the bound host.\n+Port can be used as a network card for a virtual machine or as an interface for a router.\n+\n+== Service Requirements\n+\n+[arabic]\n+. Support CRUD operations of port.\n+. Support create and update of a list of ports.\n+. Working together with other services including vpc manager, subnet manager, mac manager, security group manager and dataplane manager.\n+. Support asynchronous interaction with other services\n+. Rollback is supported when CRUD operation occurs exception.\n+. Support query operation with any field of port as parameters.\n+\n+\n+== REST APIs\n+\n+=== API Snapshot\n+\n+[width=\"100%\",cols=\"22%,12%,50%,17%\"]\n+|===\n+|*API Name* |*Method* |*Request*|*Response*\n+\n+|Create port\n+|POST\n+|/project/{project_id}/ports\n+|port state\n+<<Create_Port,[sample]>>\n+\n+|Create port bulk\n+|POST\n+|/project/{project_id}/ports/bulk\n+|port state list\n+<<Create_Port_Bulk,[sample]>>\n+\n+|Update port\n+|PUT\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Update_Port,[sample]>>\n+\n+|Delete port\n+|POST\n+|/project/{project_id}/ports/{port_id}\n+|None\n+<<Delete_Port,[sample]>>\n+\n+|Get port\n+|GET\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Get_Port,[sample]>>\n+\n+|List port\n+|GET\n+|/project/{project_id}/ports\n+|port state list\n+<<List_Port,[sample]>>\n+|===\n+\n+=== API Specification\n+\n+anchor:Create_Port[]\n+**(1) Create port**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/ports`\n+\n+* Request Parameter: `@PathVariable String projectId`\n+\n+* Response: port state\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/project/3d53801c-32ce-4e97-9572-bb966f4de79c/ports\n+\n+Body:\n+{\n+\t\"port\": {\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}]\n+\t}\n+}\n+\n+Response:\n+{\n+\t\"port\": {\n+\t\t\"fastPath\": false,\n+\t\t\"project_id\": \"3d53801c-32ce-4e97-9572-bb966f4de79c\",\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"name\": null,\n+\t\t\"description\": null,\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"admin_state_up\": false,\n+\t\t\"mac_address\": \"00:01:6C:06:A6:29\",\n+\t\t\"veth_name\": null,\n+\t\t\"fast_path\": false,\n+\t\t\"device_id\": null,\n+\t\t\"device_owner\": null,\n+\t\t\"status\": null,\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}],\n+\t\t\"extra_dhcp_opts\": null,\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"binding:host_id\": null,\n+\t\t\"binding:profile\": null,\n+\t\t\"binding:vif_details\": null,\n+\t\t\"binding:vif_type\": null,\n+\t\t\"binding:vnic_type\": null,\n+\t\t\"network_ns\": null,\n+\t\t\"dns_name\": null,\n+\t\t\"dns_assignment\": null\n+\t}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2d5f1e2703237730bea53e9e2ff429b1d5ddad"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzcyNTg5OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNToyOToyM1rOGa56KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo1NToxNlrOGetA4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDkzNg==", "bodyText": "Some missing fields to be added:\n\ndns_domain\nip_allocation\nport_security_enabled\nqos_network_policy_id\nqos_policy_id\nrevision_number\nresource_request\ntags\nuplink_status_propagation\nmac_leaning_enabled\n\nReferences: https://docs.openstack.org/api-ref/network/v2/?expanded=show-port-details-detail#show-port-details", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430864936", "createdAt": "2020-05-27T05:29:23Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "diffHunk": "@@ -0,0 +1,600 @@\n+= Port Manager Design Specification\n+Piaoping Chen <chenpiaoping@yeah.net>, Liguang Xie <lxie@futurewei.com>\n+v0.1, 2020-04-08\n+:toc: right\n+:imagesdir: ../../images\n+\n+== Overview\n+\n+Port manager is an Alcor microservice which manages all ports of vms, It provides tenant with the CRUD interface of port.\n+When creating a virtual machine, the Rest interface of Port Manager is called to create a port,\n+Port Manager allocate the corresponding resources (such as mac address, ip address) according to the requested configuration, and create a port in the database.\n+If the port binding host,Port Manager will send it to dataplane manager,the configuration of port will eventually be sent to the bound host.\n+Port can be used as a network card for a virtual machine or as an interface for a router.\n+\n+== Service Requirements\n+\n+[arabic]\n+. Support CRUD operations of port.\n+. Support create and update of a list of ports.\n+. Working together with other services including vpc manager, subnet manager, mac manager, security group manager and dataplane manager.\n+. Support asynchronous interaction with other services\n+. Rollback is supported when CRUD operation occurs exception.\n+. Support query operation with any field of port as parameters.\n+\n+\n+== REST APIs\n+\n+=== API Snapshot\n+\n+[width=\"100%\",cols=\"22%,12%,50%,17%\"]\n+|===\n+|*API Name* |*Method* |*Request*|*Response*\n+\n+|Create port\n+|POST\n+|/project/{project_id}/ports\n+|port state\n+<<Create_Port,[sample]>>\n+\n+|Create port bulk\n+|POST\n+|/project/{project_id}/ports/bulk\n+|port state list\n+<<Create_Port_Bulk,[sample]>>\n+\n+|Update port\n+|PUT\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Update_Port,[sample]>>\n+\n+|Delete port\n+|POST\n+|/project/{project_id}/ports/{port_id}\n+|None\n+<<Delete_Port,[sample]>>\n+\n+|Get port\n+|GET\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Get_Port,[sample]>>\n+\n+|List port\n+|GET\n+|/project/{project_id}/ports\n+|port state list\n+<<List_Port,[sample]>>\n+|===\n+\n+=== API Specification\n+\n+anchor:Create_Port[]\n+**(1) Create port**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/ports`\n+\n+* Request Parameter: `@PathVariable String projectId`\n+\n+* Response: port state\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/project/3d53801c-32ce-4e97-9572-bb966f4de79c/ports\n+\n+Body:\n+{\n+\t\"port\": {\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}]\n+\t}\n+}\n+\n+Response:\n+{\n+\t\"port\": {\n+\t\t\"fastPath\": false,\n+\t\t\"project_id\": \"3d53801c-32ce-4e97-9572-bb966f4de79c\",\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"name\": null,\n+\t\t\"description\": null,\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"admin_state_up\": false,\n+\t\t\"mac_address\": \"00:01:6C:06:A6:29\",\n+\t\t\"veth_name\": null,\n+\t\t\"fast_path\": false,\n+\t\t\"device_id\": null,\n+\t\t\"device_owner\": null,\n+\t\t\"status\": null,\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}],\n+\t\t\"extra_dhcp_opts\": null,\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"binding:host_id\": null,\n+\t\t\"binding:profile\": null,\n+\t\t\"binding:vif_details\": null,\n+\t\t\"binding:vif_type\": null,\n+\t\t\"binding:vnic_type\": null,\n+\t\t\"network_ns\": null,\n+\t\t\"dns_name\": null,\n+\t\t\"dns_assignment\": null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2d5f1e2703237730bea53e9e2ff429b1d5ddad"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNDA1Nw==", "bodyText": "ok", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r430914057", "createdAt": "2020-05-27T07:34:10Z", "author": {"login": "chenpiaoping"}, "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "diffHunk": "@@ -0,0 +1,600 @@\n+= Port Manager Design Specification\n+Piaoping Chen <chenpiaoping@yeah.net>, Liguang Xie <lxie@futurewei.com>\n+v0.1, 2020-04-08\n+:toc: right\n+:imagesdir: ../../images\n+\n+== Overview\n+\n+Port manager is an Alcor microservice which manages all ports of vms, It provides tenant with the CRUD interface of port.\n+When creating a virtual machine, the Rest interface of Port Manager is called to create a port,\n+Port Manager allocate the corresponding resources (such as mac address, ip address) according to the requested configuration, and create a port in the database.\n+If the port binding host,Port Manager will send it to dataplane manager,the configuration of port will eventually be sent to the bound host.\n+Port can be used as a network card for a virtual machine or as an interface for a router.\n+\n+== Service Requirements\n+\n+[arabic]\n+. Support CRUD operations of port.\n+. Support create and update of a list of ports.\n+. Working together with other services including vpc manager, subnet manager, mac manager, security group manager and dataplane manager.\n+. Support asynchronous interaction with other services\n+. Rollback is supported when CRUD operation occurs exception.\n+. Support query operation with any field of port as parameters.\n+\n+\n+== REST APIs\n+\n+=== API Snapshot\n+\n+[width=\"100%\",cols=\"22%,12%,50%,17%\"]\n+|===\n+|*API Name* |*Method* |*Request*|*Response*\n+\n+|Create port\n+|POST\n+|/project/{project_id}/ports\n+|port state\n+<<Create_Port,[sample]>>\n+\n+|Create port bulk\n+|POST\n+|/project/{project_id}/ports/bulk\n+|port state list\n+<<Create_Port_Bulk,[sample]>>\n+\n+|Update port\n+|PUT\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Update_Port,[sample]>>\n+\n+|Delete port\n+|POST\n+|/project/{project_id}/ports/{port_id}\n+|None\n+<<Delete_Port,[sample]>>\n+\n+|Get port\n+|GET\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Get_Port,[sample]>>\n+\n+|List port\n+|GET\n+|/project/{project_id}/ports\n+|port state list\n+<<List_Port,[sample]>>\n+|===\n+\n+=== API Specification\n+\n+anchor:Create_Port[]\n+**(1) Create port**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/ports`\n+\n+* Request Parameter: `@PathVariable String projectId`\n+\n+* Response: port state\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/project/3d53801c-32ce-4e97-9572-bb966f4de79c/ports\n+\n+Body:\n+{\n+\t\"port\": {\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}]\n+\t}\n+}\n+\n+Response:\n+{\n+\t\"port\": {\n+\t\t\"fastPath\": false,\n+\t\t\"project_id\": \"3d53801c-32ce-4e97-9572-bb966f4de79c\",\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"name\": null,\n+\t\t\"description\": null,\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"admin_state_up\": false,\n+\t\t\"mac_address\": \"00:01:6C:06:A6:29\",\n+\t\t\"veth_name\": null,\n+\t\t\"fast_path\": false,\n+\t\t\"device_id\": null,\n+\t\t\"device_owner\": null,\n+\t\t\"status\": null,\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}],\n+\t\t\"extra_dhcp_opts\": null,\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"binding:host_id\": null,\n+\t\t\"binding:profile\": null,\n+\t\t\"binding:vif_details\": null,\n+\t\t\"binding:vif_type\": null,\n+\t\t\"binding:vnic_type\": null,\n+\t\t\"network_ns\": null,\n+\t\t\"dns_name\": null,\n+\t\t\"dns_assignment\": null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDkzNg=="}, "originalCommit": {"oid": "af2d5f1e2703237730bea53e9e2ff429b1d5ddad"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzMzk4Mw==", "bodyText": "@chenpiaoping Heads-up: there is another PR #220 to be merged pretty soon which could cause merge conflict with this one. Let us plan to address the remaining issues and merge this one shortly, or more merge conflicts could be introduced by other PRs.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r432233983", "createdAt": "2020-05-29T03:17:16Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "diffHunk": "@@ -0,0 +1,600 @@\n+= Port Manager Design Specification\n+Piaoping Chen <chenpiaoping@yeah.net>, Liguang Xie <lxie@futurewei.com>\n+v0.1, 2020-04-08\n+:toc: right\n+:imagesdir: ../../images\n+\n+== Overview\n+\n+Port manager is an Alcor microservice which manages all ports of vms, It provides tenant with the CRUD interface of port.\n+When creating a virtual machine, the Rest interface of Port Manager is called to create a port,\n+Port Manager allocate the corresponding resources (such as mac address, ip address) according to the requested configuration, and create a port in the database.\n+If the port binding host,Port Manager will send it to dataplane manager,the configuration of port will eventually be sent to the bound host.\n+Port can be used as a network card for a virtual machine or as an interface for a router.\n+\n+== Service Requirements\n+\n+[arabic]\n+. Support CRUD operations of port.\n+. Support create and update of a list of ports.\n+. Working together with other services including vpc manager, subnet manager, mac manager, security group manager and dataplane manager.\n+. Support asynchronous interaction with other services\n+. Rollback is supported when CRUD operation occurs exception.\n+. Support query operation with any field of port as parameters.\n+\n+\n+== REST APIs\n+\n+=== API Snapshot\n+\n+[width=\"100%\",cols=\"22%,12%,50%,17%\"]\n+|===\n+|*API Name* |*Method* |*Request*|*Response*\n+\n+|Create port\n+|POST\n+|/project/{project_id}/ports\n+|port state\n+<<Create_Port,[sample]>>\n+\n+|Create port bulk\n+|POST\n+|/project/{project_id}/ports/bulk\n+|port state list\n+<<Create_Port_Bulk,[sample]>>\n+\n+|Update port\n+|PUT\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Update_Port,[sample]>>\n+\n+|Delete port\n+|POST\n+|/project/{project_id}/ports/{port_id}\n+|None\n+<<Delete_Port,[sample]>>\n+\n+|Get port\n+|GET\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Get_Port,[sample]>>\n+\n+|List port\n+|GET\n+|/project/{project_id}/ports\n+|port state list\n+<<List_Port,[sample]>>\n+|===\n+\n+=== API Specification\n+\n+anchor:Create_Port[]\n+**(1) Create port**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/ports`\n+\n+* Request Parameter: `@PathVariable String projectId`\n+\n+* Response: port state\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/project/3d53801c-32ce-4e97-9572-bb966f4de79c/ports\n+\n+Body:\n+{\n+\t\"port\": {\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}]\n+\t}\n+}\n+\n+Response:\n+{\n+\t\"port\": {\n+\t\t\"fastPath\": false,\n+\t\t\"project_id\": \"3d53801c-32ce-4e97-9572-bb966f4de79c\",\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"name\": null,\n+\t\t\"description\": null,\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"admin_state_up\": false,\n+\t\t\"mac_address\": \"00:01:6C:06:A6:29\",\n+\t\t\"veth_name\": null,\n+\t\t\"fast_path\": false,\n+\t\t\"device_id\": null,\n+\t\t\"device_owner\": null,\n+\t\t\"status\": null,\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}],\n+\t\t\"extra_dhcp_opts\": null,\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"binding:host_id\": null,\n+\t\t\"binding:profile\": null,\n+\t\t\"binding:vif_details\": null,\n+\t\t\"binding:vif_type\": null,\n+\t\t\"binding:vnic_type\": null,\n+\t\t\"network_ns\": null,\n+\t\t\"dns_name\": null,\n+\t\t\"dns_assignment\": null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDkzNg=="}, "originalCommit": {"oid": "af2d5f1e2703237730bea53e9e2ff429b1d5ddad"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3NDk5MA==", "bodyText": "ok", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r432274990", "createdAt": "2020-05-29T06:12:19Z", "author": {"login": "chenpiaoping"}, "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "diffHunk": "@@ -0,0 +1,600 @@\n+= Port Manager Design Specification\n+Piaoping Chen <chenpiaoping@yeah.net>, Liguang Xie <lxie@futurewei.com>\n+v0.1, 2020-04-08\n+:toc: right\n+:imagesdir: ../../images\n+\n+== Overview\n+\n+Port manager is an Alcor microservice which manages all ports of vms, It provides tenant with the CRUD interface of port.\n+When creating a virtual machine, the Rest interface of Port Manager is called to create a port,\n+Port Manager allocate the corresponding resources (such as mac address, ip address) according to the requested configuration, and create a port in the database.\n+If the port binding host,Port Manager will send it to dataplane manager,the configuration of port will eventually be sent to the bound host.\n+Port can be used as a network card for a virtual machine or as an interface for a router.\n+\n+== Service Requirements\n+\n+[arabic]\n+. Support CRUD operations of port.\n+. Support create and update of a list of ports.\n+. Working together with other services including vpc manager, subnet manager, mac manager, security group manager and dataplane manager.\n+. Support asynchronous interaction with other services\n+. Rollback is supported when CRUD operation occurs exception.\n+. Support query operation with any field of port as parameters.\n+\n+\n+== REST APIs\n+\n+=== API Snapshot\n+\n+[width=\"100%\",cols=\"22%,12%,50%,17%\"]\n+|===\n+|*API Name* |*Method* |*Request*|*Response*\n+\n+|Create port\n+|POST\n+|/project/{project_id}/ports\n+|port state\n+<<Create_Port,[sample]>>\n+\n+|Create port bulk\n+|POST\n+|/project/{project_id}/ports/bulk\n+|port state list\n+<<Create_Port_Bulk,[sample]>>\n+\n+|Update port\n+|PUT\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Update_Port,[sample]>>\n+\n+|Delete port\n+|POST\n+|/project/{project_id}/ports/{port_id}\n+|None\n+<<Delete_Port,[sample]>>\n+\n+|Get port\n+|GET\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Get_Port,[sample]>>\n+\n+|List port\n+|GET\n+|/project/{project_id}/ports\n+|port state list\n+<<List_Port,[sample]>>\n+|===\n+\n+=== API Specification\n+\n+anchor:Create_Port[]\n+**(1) Create port**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/ports`\n+\n+* Request Parameter: `@PathVariable String projectId`\n+\n+* Response: port state\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/project/3d53801c-32ce-4e97-9572-bb966f4de79c/ports\n+\n+Body:\n+{\n+\t\"port\": {\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}]\n+\t}\n+}\n+\n+Response:\n+{\n+\t\"port\": {\n+\t\t\"fastPath\": false,\n+\t\t\"project_id\": \"3d53801c-32ce-4e97-9572-bb966f4de79c\",\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"name\": null,\n+\t\t\"description\": null,\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"admin_state_up\": false,\n+\t\t\"mac_address\": \"00:01:6C:06:A6:29\",\n+\t\t\"veth_name\": null,\n+\t\t\"fast_path\": false,\n+\t\t\"device_id\": null,\n+\t\t\"device_owner\": null,\n+\t\t\"status\": null,\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}],\n+\t\t\"extra_dhcp_opts\": null,\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"binding:host_id\": null,\n+\t\t\"binding:profile\": null,\n+\t\t\"binding:vif_details\": null,\n+\t\t\"binding:vif_type\": null,\n+\t\t\"binding:vnic_type\": null,\n+\t\t\"network_ns\": null,\n+\t\t\"dns_name\": null,\n+\t\t\"dns_assignment\": null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDkzNg=="}, "originalCommit": {"oid": "af2d5f1e2703237730bea53e9e2ff429b1d5ddad"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0Nzk3MQ==", "bodyText": "Saw all those new fields have been added. Good job!", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434847971", "createdAt": "2020-06-03T20:55:16Z", "author": {"login": "xieus"}, "path": "docs/modules/ROOT/pages/mgmt_services/port_manager.adoc", "diffHunk": "@@ -0,0 +1,600 @@\n+= Port Manager Design Specification\n+Piaoping Chen <chenpiaoping@yeah.net>, Liguang Xie <lxie@futurewei.com>\n+v0.1, 2020-04-08\n+:toc: right\n+:imagesdir: ../../images\n+\n+== Overview\n+\n+Port manager is an Alcor microservice which manages all ports of vms, It provides tenant with the CRUD interface of port.\n+When creating a virtual machine, the Rest interface of Port Manager is called to create a port,\n+Port Manager allocate the corresponding resources (such as mac address, ip address) according to the requested configuration, and create a port in the database.\n+If the port binding host,Port Manager will send it to dataplane manager,the configuration of port will eventually be sent to the bound host.\n+Port can be used as a network card for a virtual machine or as an interface for a router.\n+\n+== Service Requirements\n+\n+[arabic]\n+. Support CRUD operations of port.\n+. Support create and update of a list of ports.\n+. Working together with other services including vpc manager, subnet manager, mac manager, security group manager and dataplane manager.\n+. Support asynchronous interaction with other services\n+. Rollback is supported when CRUD operation occurs exception.\n+. Support query operation with any field of port as parameters.\n+\n+\n+== REST APIs\n+\n+=== API Snapshot\n+\n+[width=\"100%\",cols=\"22%,12%,50%,17%\"]\n+|===\n+|*API Name* |*Method* |*Request*|*Response*\n+\n+|Create port\n+|POST\n+|/project/{project_id}/ports\n+|port state\n+<<Create_Port,[sample]>>\n+\n+|Create port bulk\n+|POST\n+|/project/{project_id}/ports/bulk\n+|port state list\n+<<Create_Port_Bulk,[sample]>>\n+\n+|Update port\n+|PUT\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Update_Port,[sample]>>\n+\n+|Delete port\n+|POST\n+|/project/{project_id}/ports/{port_id}\n+|None\n+<<Delete_Port,[sample]>>\n+\n+|Get port\n+|GET\n+|/project/{project_id}/ports/{port_id}\n+|port state\n+<<Get_Port,[sample]>>\n+\n+|List port\n+|GET\n+|/project/{project_id}/ports\n+|port state list\n+<<List_Port,[sample]>>\n+|===\n+\n+=== API Specification\n+\n+anchor:Create_Port[]\n+**(1) Create port**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/ports`\n+\n+* Request Parameter: `@PathVariable String projectId`\n+\n+* Response: port state\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/project/3d53801c-32ce-4e97-9572-bb966f4de79c/ports\n+\n+Body:\n+{\n+\t\"port\": {\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}]\n+\t}\n+}\n+\n+Response:\n+{\n+\t\"port\": {\n+\t\t\"fastPath\": false,\n+\t\t\"project_id\": \"3d53801c-32ce-4e97-9572-bb966f4de79c\",\n+\t\t\"id\": \"3d53801c-32ce-4e97-9572-bb966f4aa53e\",\n+\t\t\"name\": null,\n+\t\t\"description\": null,\n+\t\t\"vpc_id\": \"3d53801c-32ce-4e97-9572-bb966f4d175e\",\n+\t\t\"tenant_id\": \"3d53801c-32ce-4e97-9572-bb966f476ec\",\n+\t\t\"admin_state_up\": false,\n+\t\t\"mac_address\": \"00:01:6C:06:A6:29\",\n+\t\t\"veth_name\": null,\n+\t\t\"fast_path\": false,\n+\t\t\"device_id\": null,\n+\t\t\"device_owner\": null,\n+\t\t\"status\": null,\n+\t\t\"fixed_ips\": [{\n+\t\t\t\"subnet_id\": \"3d53801c-32ce-4e97-9572-bb966f4056b\",\n+\t\t\t\"ip_address\": \"11.11.11.100\"\n+\t\t}],\n+\t\t\"allowed_address_pairs\": [{\n+\t\t\t\"ip_address\": \"11.11.11.101\",\n+\t\t\t\"mac_address\": \"00:01:6C:06:A6:29\"\n+\t\t}],\n+\t\t\"extra_dhcp_opts\": null,\n+\t\t\"security_groups\": [\"3d53801c-32ce-4e97-9572-bb966f4d45ca\"],\n+\t\t\"binding:host_id\": null,\n+\t\t\"binding:profile\": null,\n+\t\t\"binding:vif_details\": null,\n+\t\t\"binding:vif_type\": null,\n+\t\t\"binding:vnic_type\": null,\n+\t\t\"network_ns\": null,\n+\t\t\"dns_name\": null,\n+\t\t\"dns_assignment\": null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDkzNg=="}, "originalCommit": {"oid": "af2d5f1e2703237730bea53e9e2ff429b1d5ddad"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQyMzY0OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/executor/AsyncExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo1MTozNFrOGeM84g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo1MTozNFrOGeM84g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMjY1OA==", "bodyText": "\".which\" => \", which\"", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434322658", "createdAt": "2020-06-03T05:51:34Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/executor/AsyncExecutor.java", "diffHunk": "@@ -44,6 +44,15 @@ public AsyncExecutor() {\n         return CompletableFuture.supplyAsync(supplier);\n     }\n \n+    /**\n+     * Execute the function(first parameter) asynchronously.which has one input parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQzNzc1OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/executor/AsyncExecutor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo1ODoyNFrOGeNFbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo1NTo0MlrOGetBqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyNDg0NA==", "bodyText": "\".which\" => \", which\"", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434324844", "createdAt": "2020-06-03T05:58:24Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/executor/AsyncExecutor.java", "diffHunk": "@@ -58,13 +67,146 @@ public AsyncExecutor() {\n         return future;\n     }\n \n-    public void joinAll() throws CompletionException {\n+    /**\n+     * Execute the function(first parameter) asynchronously.which has one input parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyNTA0NQ==", "bodyText": "Is this comment supposed to be the same as \"runAsync\"?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434325045", "createdAt": "2020-06-03T05:59:00Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/executor/AsyncExecutor.java", "diffHunk": "@@ -58,13 +67,146 @@ public AsyncExecutor() {\n         return future;\n     }\n \n-    public void joinAll() throws CompletionException {\n+    /**\n+     * Execute the function(first parameter) asynchronously.which has one input parameter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyNDg0NA=="}, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzMzc5MA==", "bodyText": "Oh, Let me add some comments for these methods.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434333790", "createdAt": "2020-06-03T06:24:43Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/executor/AsyncExecutor.java", "diffHunk": "@@ -58,13 +67,146 @@ public AsyncExecutor() {\n         return future;\n     }\n \n-    public void joinAll() throws CompletionException {\n+    /**\n+     * Execute the function(first parameter) asynchronously.which has one input parameter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyNDg0NA=="}, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0ODE2OQ==", "bodyText": "Like those new comments \ud83d\udc4d", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434848169", "createdAt": "2020-06-03T20:55:42Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/executor/AsyncExecutor.java", "diffHunk": "@@ -58,13 +67,146 @@ public AsyncExecutor() {\n         return future;\n     }\n \n-    public void joinAll() throws CompletionException {\n+    /**\n+     * Execute the function(first parameter) asynchronously.which has one input parameter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyNDg0NA=="}, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQ1Mjk0OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/executor/AsyncExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjowNTo1NFrOGeNOtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjowNTo1NFrOGeNOtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyNzIyMQ==", "bodyText": "Okay. We definitely need comments on each of these methods.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434327221", "createdAt": "2020-06-03T06:05:54Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/executor/AsyncExecutor.java", "diffHunk": "@@ -58,13 +67,146 @@ public AsyncExecutor() {\n         return future;\n     }\n \n-    public void joinAll() throws CompletionException {\n+    /**\n+     * Execute the function(first parameter) asynchronously.which has one input parameter\n+     * and one return value. The type of input parameter is Object, and the return value is R.\n+     * @param fun1 The function to be executed\n+     * @param fun2 The function to be executed\n+     * @param arg1 The parameter of the function being executed\n+     * @param <R> The parameter of the function being executed\n+     * @param <U> The type of return value of the function being executed\n+     * @return CompletableFuture\n+     * @throws CompletionException\n+     */\n+    public <R, U>CompletableFuture runAsyncThenApply(AsyncFunction<Object, R> fun1, AsyncFunction<Object, U> fun2, Object arg1) throws CompletionException {\n+        CompletableFuture<U> future = CompletableFuture.supplyAsync(() -> {\n+            try {\n+                return fun1.apply(arg1);\n+            } catch (Exception e) {\n+                throw new CompletionException(e);\n+            }\n+        }, executor).thenApply((ret) -> {\n+            try {\n+                return fun2.apply(ret);\n+            } catch (Exception e) {\n+                throw new CompletionException(e);\n+            }\n+        });\n+\n+        futures.add(future);\n+\n+        return future;\n+    }\n+\n+    public <R, U>CompletableFuture runAsyncThenApply(AsyncFunction<Object, R> fun1, AsyncFunction<Object, U> fun2, Object arg1, Object arg2) throws CompletionException {\n+        CompletableFuture<U> future = CompletableFuture.supplyAsync(() -> {\n+            try {\n+                return fun1.apply(arg1);\n+            } catch (Exception e) {\n+                throw new CompletionException(e);\n+            }\n+        }, executor).thenApply((ret) -> {\n+            try {\n+                return fun2.apply(arg2);\n+            } catch (Exception e) {\n+                throw new CompletionException(e);\n+            }\n+        });\n+\n+        futures.add(future);\n+\n+        return future;\n+    }\n+\n+    public <R, U>CompletableFuture runAsyncThenAccept(AsyncFunction<Object, R> fun1, AsyncFunction<Object, U> fun2, Object arg1) throws CompletionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQ1NzA0OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/utils/SpringContextUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjowODowMlrOGeNRUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjowODowMlrOGeNRUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyNzg5MQ==", "bodyText": "Move util class from port manager to common is great. I remember previous attempt of moving this caused some UT failure or so.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434327891", "createdAt": "2020-06-03T06:08:02Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/utils/SpringContextUtil.java", "diffHunk": "@@ -13,7 +13,7 @@\n         See the License for the specific language governing permissions and\n         limitations under the License.\n */\n-package com.futurewei.alcor.portmanager.util;\n+package com.futurewei.alcor.common.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTUyOTk0OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/securitygroup/SecurityGroupEntity.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjozODo1MFrOGeN-EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzozOToyN1rOGePxkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzOTM0NQ==", "bodyText": "Just checked SGM PR #208. Didn't find these entity classes there.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434339345", "createdAt": "2020-06-03T06:38:50Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/securitygroup/SecurityGroupEntity.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+        http://www.apache.org/licenses/LICENSE-2.0\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.securitygroup;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+\n+import java.util.List;\n+\n+public class SecurityGroupEntity extends CustomerResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0NzAyOQ==", "bodyText": "If this PR checked in first, I will assume that SGM will use the same set of entity classes from alcor/web/securitygroup/", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434347029", "createdAt": "2020-06-03T06:56:43Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/securitygroup/SecurityGroupEntity.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+        http://www.apache.org/licenses/LICENSE-2.0\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.securitygroup;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+\n+import java.util.List;\n+\n+public class SecurityGroupEntity extends CustomerResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzOTM0NQ=="}, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2ODkxNA==", "bodyText": "yes, I use the new name SecurityGroupEntity instead of SecurityGroup like PortEntity. I will rename it in the SGM PR.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434368914", "createdAt": "2020-06-03T07:39:27Z", "author": {"login": "chenpiaoping"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/securitygroup/SecurityGroupEntity.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+        http://www.apache.org/licenses/LICENSE-2.0\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.securitygroup;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+\n+import java.util.List;\n+\n+public class SecurityGroupEntity extends CustomerResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzOTM0NQ=="}, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTUzNzU3OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/repo/PortRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo0MTozOFrOGeOCow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo0MTozOFrOGeOCow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MDUxNQ==", "bodyText": "Like it!", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434340515", "createdAt": "2020-06-03T06:41:38Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/repo/PortRepository.java", "diffHunk": "@@ -61,6 +63,15 @@ public void addItem(PortEntity portEntity) throws CacheException {\n         cache.put(portEntity.getId(), portEntity);\n     }\n \n+    //@Override\n+    public void addItems(List<PortEntity> portEntities) throws CacheException {\n+        Map<String, PortEntity> portEntityMap = portEntities\n+                .stream()\n+                .collect(Collectors.toMap(PortEntity::getId, Function.identity()));\n+\n+        cache.putAll(portEntityMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTU1NTM4OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo0ODoxM1rOGeONeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo1OTo1OVrOGetLNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MzI4OA==", "bodyText": "Issue\nThe buildGoalState method will be used for constructing the message sent from DPM to ACA. I think port manager needs to call REST API of DPM.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434343288", "createdAt": "2020-06-03T06:48:13Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -94,94 +95,167 @@ private void addPortToHost(String hostId) {\n         //FIXME: Add port to Host\n     }\n \n+    private void createPortAsync(PortEntity portEntity, AsyncExecutor executor, Stack<Rollback> rollbacks) throws Exception {\n+        //Verify VPC ID\n+        VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n+        executor.runAsync(vpcManagerProxy::getVpcEntity, portEntity);\n+\n+        //Allocate IP address\n+        IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portEntity.getProjectId());\n+        SubnetManagerProxy subnetManagerProxy = new SubnetManagerProxy(portEntity.getProjectId());\n+        if (portEntity.getFixedIps() != null) {\n+            for (PortEntity.FixedIp fixedIp: portEntity.getFixedIps()) {\n+                executor.runAsyncThenAccept(subnetManagerProxy::getSubnetEntity,\n+                        ipManagerProxy::allocateFixedIpAddress,\n+                        fixedIp, fixedIp);\n+            }\n+        } else {\n+            executor.runAsyncThenApply(ipManagerProxy::allocateRandomIpAddress,\n+                    subnetManagerProxy::getSubnetEntity,\n+                    portEntity);\n+        }\n+\n+        //Generate uuid for port\n+        if (portEntity.getId() == null) {\n+            portEntity.setId(UUID.randomUUID().toString());\n+        }\n+\n+        //Allocate MAC address\n+        MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+        if (portEntity.getMacAddress() == null) {\n+            executor.runAsync(macManagerProxy::allocateRandomMacAddress, portEntity);\n+        } else {\n+            executor.runAsync(macManagerProxy::allocateFixedMacAddress, portEntity);\n+        }\n+\n+        //Verify and bind security group\n+        SecurityGroupManagerProxy securityGroupManagerProxy = new SecurityGroupManagerProxy(portEntity.getProjectId());\n+        if (portEntity.getSecurityGroups() != null) {\n+            for (String securityGroupId: portEntity.getSecurityGroups()) {\n+                executor.runAsync(securityGroupManagerProxy::getSecurityGroupEntity, securityGroupId);\n+                executor.runAsync(securityGroupManagerProxy::bindSecurityGroup, portEntity);\n+            }\n+        } else {\n+            //Do we need to bind default security group? No, we don't\n+            executor.runAsync(securityGroupManagerProxy::getDefaultSecurityGroupEntity, null);\n+        }\n+\n+        //Get subnet route\n+        if (portEntity.getFixedIps() != null) {\n+            RouteManagerProxy routeManagerProxy = new RouteManagerProxy(rollbacks);\n+\n+            for (PortEntity.FixedIp fixedIp: portEntity.getFixedIps()) {\n+                executor.runAsync(routeManagerProxy::getRouteBySubnetId, fixedIp.getSubnetId());\n+            }\n+        }\n+\n+        //Verify Binding Host ID\n+        if (portEntity.getBindingHostId() != null) {\n+            NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n+            executor.runAsync(nodeManagerProxy::getNodeInfo, portEntity.getBindingHostId());\n+        }\n+    }\n+\n+    private void exceptionHandle(AsyncExecutor executor, Stack<Rollback> rollbacks, Exception e) throws Exception {\n+        /**\n+         When an exception occurs, we need to roll back all asynchronous operations,\n+         and some asynchronous may not be finished yet.if we roll back at this time,\n+         they may not be completed until the rollback operation is completed.\n+         as a result, they cannot be rolled back.\n+         */\n+        executor.waitAll();\n+        rollBackAllOperations(rollbacks);\n+        throw e;\n+    }\n+\n     /**\n      * Create a port, and call the interfaces of each micro-service according to the\n      * configuration of the port to create various required resources for the port.\n      * If any exception occurs in the added process, we need to roll back\n      * the resource allocated from each micro-service.\n      * @param projectId Project the port belongs to\n      * @param portWebJson Port configuration\n-     * @return PortStateJson\n+     * @return PortWebJson\n      * @throws Exception Various exceptions that may occur during the create process\n      */\n     @Override\n-    public PortWebJson createPortState(String projectId, PortWebJson portWebJson) throws Exception {\n-        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portWebJson);\n+    public PortWebJson createPort(String projectId, PortWebJson portWebJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortWebJson: {}\", projectId, portWebJson);\n \n-        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        Stack<Rollback> rollbacks = new Stack<>();\n         AsyncExecutor executor = new AsyncExecutor();\n \n         PortEntity portEntity = portWebJson.getPortEntity();\n         portEntity.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portEntity);\n-\n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portEntity.getProjectId());\n-            if (portEntity.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portEntity);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portEntity.getFixedIps());\n-            }\n+            createPortAsync(portEntity, executor, rollbacks);\n \n-            //Generate uuid for port\n-            if (portEntity.getId() == null) {\n-                portEntity.setId(UUID.randomUUID().toString());\n-            }\n-\n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portEntity.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portEntity);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portEntity);\n-            }\n-\n-            //Verify security group\n+            //Wait for all async functions to finish\n+            List<Object> entities = executor.joinAll();\n+            entities.add(portEntity);\n \n-            //Verify Binding Host ID\n+            //Build GoalState and Send it to DPM\n             if (portEntity.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portEntity.getBindingHostId());\n+                Goalstate.GoalState goalState = GoalStateUtil.buildGoalState(entities, Common.OperationType.CREATE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2OTc2NA==", "bodyText": "Oh, I see. Can I fix it after DPM is merged?", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434369764", "createdAt": "2020-06-03T07:41:03Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -94,94 +95,167 @@ private void addPortToHost(String hostId) {\n         //FIXME: Add port to Host\n     }\n \n+    private void createPortAsync(PortEntity portEntity, AsyncExecutor executor, Stack<Rollback> rollbacks) throws Exception {\n+        //Verify VPC ID\n+        VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n+        executor.runAsync(vpcManagerProxy::getVpcEntity, portEntity);\n+\n+        //Allocate IP address\n+        IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portEntity.getProjectId());\n+        SubnetManagerProxy subnetManagerProxy = new SubnetManagerProxy(portEntity.getProjectId());\n+        if (portEntity.getFixedIps() != null) {\n+            for (PortEntity.FixedIp fixedIp: portEntity.getFixedIps()) {\n+                executor.runAsyncThenAccept(subnetManagerProxy::getSubnetEntity,\n+                        ipManagerProxy::allocateFixedIpAddress,\n+                        fixedIp, fixedIp);\n+            }\n+        } else {\n+            executor.runAsyncThenApply(ipManagerProxy::allocateRandomIpAddress,\n+                    subnetManagerProxy::getSubnetEntity,\n+                    portEntity);\n+        }\n+\n+        //Generate uuid for port\n+        if (portEntity.getId() == null) {\n+            portEntity.setId(UUID.randomUUID().toString());\n+        }\n+\n+        //Allocate MAC address\n+        MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+        if (portEntity.getMacAddress() == null) {\n+            executor.runAsync(macManagerProxy::allocateRandomMacAddress, portEntity);\n+        } else {\n+            executor.runAsync(macManagerProxy::allocateFixedMacAddress, portEntity);\n+        }\n+\n+        //Verify and bind security group\n+        SecurityGroupManagerProxy securityGroupManagerProxy = new SecurityGroupManagerProxy(portEntity.getProjectId());\n+        if (portEntity.getSecurityGroups() != null) {\n+            for (String securityGroupId: portEntity.getSecurityGroups()) {\n+                executor.runAsync(securityGroupManagerProxy::getSecurityGroupEntity, securityGroupId);\n+                executor.runAsync(securityGroupManagerProxy::bindSecurityGroup, portEntity);\n+            }\n+        } else {\n+            //Do we need to bind default security group? No, we don't\n+            executor.runAsync(securityGroupManagerProxy::getDefaultSecurityGroupEntity, null);\n+        }\n+\n+        //Get subnet route\n+        if (portEntity.getFixedIps() != null) {\n+            RouteManagerProxy routeManagerProxy = new RouteManagerProxy(rollbacks);\n+\n+            for (PortEntity.FixedIp fixedIp: portEntity.getFixedIps()) {\n+                executor.runAsync(routeManagerProxy::getRouteBySubnetId, fixedIp.getSubnetId());\n+            }\n+        }\n+\n+        //Verify Binding Host ID\n+        if (portEntity.getBindingHostId() != null) {\n+            NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n+            executor.runAsync(nodeManagerProxy::getNodeInfo, portEntity.getBindingHostId());\n+        }\n+    }\n+\n+    private void exceptionHandle(AsyncExecutor executor, Stack<Rollback> rollbacks, Exception e) throws Exception {\n+        /**\n+         When an exception occurs, we need to roll back all asynchronous operations,\n+         and some asynchronous may not be finished yet.if we roll back at this time,\n+         they may not be completed until the rollback operation is completed.\n+         as a result, they cannot be rolled back.\n+         */\n+        executor.waitAll();\n+        rollBackAllOperations(rollbacks);\n+        throw e;\n+    }\n+\n     /**\n      * Create a port, and call the interfaces of each micro-service according to the\n      * configuration of the port to create various required resources for the port.\n      * If any exception occurs in the added process, we need to roll back\n      * the resource allocated from each micro-service.\n      * @param projectId Project the port belongs to\n      * @param portWebJson Port configuration\n-     * @return PortStateJson\n+     * @return PortWebJson\n      * @throws Exception Various exceptions that may occur during the create process\n      */\n     @Override\n-    public PortWebJson createPortState(String projectId, PortWebJson portWebJson) throws Exception {\n-        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portWebJson);\n+    public PortWebJson createPort(String projectId, PortWebJson portWebJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortWebJson: {}\", projectId, portWebJson);\n \n-        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        Stack<Rollback> rollbacks = new Stack<>();\n         AsyncExecutor executor = new AsyncExecutor();\n \n         PortEntity portEntity = portWebJson.getPortEntity();\n         portEntity.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portEntity);\n-\n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portEntity.getProjectId());\n-            if (portEntity.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portEntity);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portEntity.getFixedIps());\n-            }\n+            createPortAsync(portEntity, executor, rollbacks);\n \n-            //Generate uuid for port\n-            if (portEntity.getId() == null) {\n-                portEntity.setId(UUID.randomUUID().toString());\n-            }\n-\n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portEntity.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portEntity);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portEntity);\n-            }\n-\n-            //Verify security group\n+            //Wait for all async functions to finish\n+            List<Object> entities = executor.joinAll();\n+            entities.add(portEntity);\n \n-            //Verify Binding Host ID\n+            //Build GoalState and Send it to DPM\n             if (portEntity.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portEntity.getBindingHostId());\n+                Goalstate.GoalState goalState = GoalStateUtil.buildGoalState(entities, Common.OperationType.CREATE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MzI4OA=="}, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0MjI1Nw==", "bodyText": "Definitely.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434642257", "createdAt": "2020-06-03T15:10:49Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -94,94 +95,167 @@ private void addPortToHost(String hostId) {\n         //FIXME: Add port to Host\n     }\n \n+    private void createPortAsync(PortEntity portEntity, AsyncExecutor executor, Stack<Rollback> rollbacks) throws Exception {\n+        //Verify VPC ID\n+        VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n+        executor.runAsync(vpcManagerProxy::getVpcEntity, portEntity);\n+\n+        //Allocate IP address\n+        IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portEntity.getProjectId());\n+        SubnetManagerProxy subnetManagerProxy = new SubnetManagerProxy(portEntity.getProjectId());\n+        if (portEntity.getFixedIps() != null) {\n+            for (PortEntity.FixedIp fixedIp: portEntity.getFixedIps()) {\n+                executor.runAsyncThenAccept(subnetManagerProxy::getSubnetEntity,\n+                        ipManagerProxy::allocateFixedIpAddress,\n+                        fixedIp, fixedIp);\n+            }\n+        } else {\n+            executor.runAsyncThenApply(ipManagerProxy::allocateRandomIpAddress,\n+                    subnetManagerProxy::getSubnetEntity,\n+                    portEntity);\n+        }\n+\n+        //Generate uuid for port\n+        if (portEntity.getId() == null) {\n+            portEntity.setId(UUID.randomUUID().toString());\n+        }\n+\n+        //Allocate MAC address\n+        MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+        if (portEntity.getMacAddress() == null) {\n+            executor.runAsync(macManagerProxy::allocateRandomMacAddress, portEntity);\n+        } else {\n+            executor.runAsync(macManagerProxy::allocateFixedMacAddress, portEntity);\n+        }\n+\n+        //Verify and bind security group\n+        SecurityGroupManagerProxy securityGroupManagerProxy = new SecurityGroupManagerProxy(portEntity.getProjectId());\n+        if (portEntity.getSecurityGroups() != null) {\n+            for (String securityGroupId: portEntity.getSecurityGroups()) {\n+                executor.runAsync(securityGroupManagerProxy::getSecurityGroupEntity, securityGroupId);\n+                executor.runAsync(securityGroupManagerProxy::bindSecurityGroup, portEntity);\n+            }\n+        } else {\n+            //Do we need to bind default security group? No, we don't\n+            executor.runAsync(securityGroupManagerProxy::getDefaultSecurityGroupEntity, null);\n+        }\n+\n+        //Get subnet route\n+        if (portEntity.getFixedIps() != null) {\n+            RouteManagerProxy routeManagerProxy = new RouteManagerProxy(rollbacks);\n+\n+            for (PortEntity.FixedIp fixedIp: portEntity.getFixedIps()) {\n+                executor.runAsync(routeManagerProxy::getRouteBySubnetId, fixedIp.getSubnetId());\n+            }\n+        }\n+\n+        //Verify Binding Host ID\n+        if (portEntity.getBindingHostId() != null) {\n+            NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n+            executor.runAsync(nodeManagerProxy::getNodeInfo, portEntity.getBindingHostId());\n+        }\n+    }\n+\n+    private void exceptionHandle(AsyncExecutor executor, Stack<Rollback> rollbacks, Exception e) throws Exception {\n+        /**\n+         When an exception occurs, we need to roll back all asynchronous operations,\n+         and some asynchronous may not be finished yet.if we roll back at this time,\n+         they may not be completed until the rollback operation is completed.\n+         as a result, they cannot be rolled back.\n+         */\n+        executor.waitAll();\n+        rollBackAllOperations(rollbacks);\n+        throw e;\n+    }\n+\n     /**\n      * Create a port, and call the interfaces of each micro-service according to the\n      * configuration of the port to create various required resources for the port.\n      * If any exception occurs in the added process, we need to roll back\n      * the resource allocated from each micro-service.\n      * @param projectId Project the port belongs to\n      * @param portWebJson Port configuration\n-     * @return PortStateJson\n+     * @return PortWebJson\n      * @throws Exception Various exceptions that may occur during the create process\n      */\n     @Override\n-    public PortWebJson createPortState(String projectId, PortWebJson portWebJson) throws Exception {\n-        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portWebJson);\n+    public PortWebJson createPort(String projectId, PortWebJson portWebJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortWebJson: {}\", projectId, portWebJson);\n \n-        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        Stack<Rollback> rollbacks = new Stack<>();\n         AsyncExecutor executor = new AsyncExecutor();\n \n         PortEntity portEntity = portWebJson.getPortEntity();\n         portEntity.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portEntity);\n-\n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portEntity.getProjectId());\n-            if (portEntity.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portEntity);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portEntity.getFixedIps());\n-            }\n+            createPortAsync(portEntity, executor, rollbacks);\n \n-            //Generate uuid for port\n-            if (portEntity.getId() == null) {\n-                portEntity.setId(UUID.randomUUID().toString());\n-            }\n-\n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portEntity.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portEntity);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portEntity);\n-            }\n-\n-            //Verify security group\n+            //Wait for all async functions to finish\n+            List<Object> entities = executor.joinAll();\n+            entities.add(portEntity);\n \n-            //Verify Binding Host ID\n+            //Build GoalState and Send it to DPM\n             if (portEntity.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portEntity.getBindingHostId());\n+                Goalstate.GoalState goalState = GoalStateUtil.buildGoalState(entities, Common.OperationType.CREATE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MzI4OA=="}, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MDYxNA==", "bodyText": "Use Issue #230 for tracking purpose.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434850614", "createdAt": "2020-06-03T20:59:59Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -94,94 +95,167 @@ private void addPortToHost(String hostId) {\n         //FIXME: Add port to Host\n     }\n \n+    private void createPortAsync(PortEntity portEntity, AsyncExecutor executor, Stack<Rollback> rollbacks) throws Exception {\n+        //Verify VPC ID\n+        VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n+        executor.runAsync(vpcManagerProxy::getVpcEntity, portEntity);\n+\n+        //Allocate IP address\n+        IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portEntity.getProjectId());\n+        SubnetManagerProxy subnetManagerProxy = new SubnetManagerProxy(portEntity.getProjectId());\n+        if (portEntity.getFixedIps() != null) {\n+            for (PortEntity.FixedIp fixedIp: portEntity.getFixedIps()) {\n+                executor.runAsyncThenAccept(subnetManagerProxy::getSubnetEntity,\n+                        ipManagerProxy::allocateFixedIpAddress,\n+                        fixedIp, fixedIp);\n+            }\n+        } else {\n+            executor.runAsyncThenApply(ipManagerProxy::allocateRandomIpAddress,\n+                    subnetManagerProxy::getSubnetEntity,\n+                    portEntity);\n+        }\n+\n+        //Generate uuid for port\n+        if (portEntity.getId() == null) {\n+            portEntity.setId(UUID.randomUUID().toString());\n+        }\n+\n+        //Allocate MAC address\n+        MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n+        if (portEntity.getMacAddress() == null) {\n+            executor.runAsync(macManagerProxy::allocateRandomMacAddress, portEntity);\n+        } else {\n+            executor.runAsync(macManagerProxy::allocateFixedMacAddress, portEntity);\n+        }\n+\n+        //Verify and bind security group\n+        SecurityGroupManagerProxy securityGroupManagerProxy = new SecurityGroupManagerProxy(portEntity.getProjectId());\n+        if (portEntity.getSecurityGroups() != null) {\n+            for (String securityGroupId: portEntity.getSecurityGroups()) {\n+                executor.runAsync(securityGroupManagerProxy::getSecurityGroupEntity, securityGroupId);\n+                executor.runAsync(securityGroupManagerProxy::bindSecurityGroup, portEntity);\n+            }\n+        } else {\n+            //Do we need to bind default security group? No, we don't\n+            executor.runAsync(securityGroupManagerProxy::getDefaultSecurityGroupEntity, null);\n+        }\n+\n+        //Get subnet route\n+        if (portEntity.getFixedIps() != null) {\n+            RouteManagerProxy routeManagerProxy = new RouteManagerProxy(rollbacks);\n+\n+            for (PortEntity.FixedIp fixedIp: portEntity.getFixedIps()) {\n+                executor.runAsync(routeManagerProxy::getRouteBySubnetId, fixedIp.getSubnetId());\n+            }\n+        }\n+\n+        //Verify Binding Host ID\n+        if (portEntity.getBindingHostId() != null) {\n+            NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n+            executor.runAsync(nodeManagerProxy::getNodeInfo, portEntity.getBindingHostId());\n+        }\n+    }\n+\n+    private void exceptionHandle(AsyncExecutor executor, Stack<Rollback> rollbacks, Exception e) throws Exception {\n+        /**\n+         When an exception occurs, we need to roll back all asynchronous operations,\n+         and some asynchronous may not be finished yet.if we roll back at this time,\n+         they may not be completed until the rollback operation is completed.\n+         as a result, they cannot be rolled back.\n+         */\n+        executor.waitAll();\n+        rollBackAllOperations(rollbacks);\n+        throw e;\n+    }\n+\n     /**\n      * Create a port, and call the interfaces of each micro-service according to the\n      * configuration of the port to create various required resources for the port.\n      * If any exception occurs in the added process, we need to roll back\n      * the resource allocated from each micro-service.\n      * @param projectId Project the port belongs to\n      * @param portWebJson Port configuration\n-     * @return PortStateJson\n+     * @return PortWebJson\n      * @throws Exception Various exceptions that may occur during the create process\n      */\n     @Override\n-    public PortWebJson createPortState(String projectId, PortWebJson portWebJson) throws Exception {\n-        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portWebJson);\n+    public PortWebJson createPort(String projectId, PortWebJson portWebJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortWebJson: {}\", projectId, portWebJson);\n \n-        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        Stack<Rollback> rollbacks = new Stack<>();\n         AsyncExecutor executor = new AsyncExecutor();\n \n         PortEntity portEntity = portWebJson.getPortEntity();\n         portEntity.setProjectId(projectId);\n \n         try {\n-            //Verify VPC ID\n-            VpcManagerProxy vpcManagerProxy = new VpcManagerProxy(rollbacks);\n-            executor.runAsync(vpcManagerProxy::verifyVpc, portEntity);\n-\n-            IpManagerProxy ipManagerProxy = new IpManagerProxy(rollbacks, portEntity.getProjectId());\n-            if (portEntity.getFixedIps() == null) {\n-                executor.runAsync(ipManagerProxy::allocateRandomIpAddress, portEntity);\n-            } else {\n-                executor.runAsync(ipManagerProxy::allocateFixedIpAddress, portEntity.getFixedIps());\n-            }\n+            createPortAsync(portEntity, executor, rollbacks);\n \n-            //Generate uuid for port\n-            if (portEntity.getId() == null) {\n-                portEntity.setId(UUID.randomUUID().toString());\n-            }\n-\n-            MacManagerProxy macManagerProxy = new MacManagerProxy(rollbacks);\n-            if (portEntity.getMacAddress() == null) {\n-                executor.runAsync(macManagerProxy::allocateRandomMacAddress, portEntity);\n-            } else {\n-                executor.runAsync(macManagerProxy::allocateFixedMacAddress, portEntity);\n-            }\n-\n-            //Verify security group\n+            //Wait for all async functions to finish\n+            List<Object> entities = executor.joinAll();\n+            entities.add(portEntity);\n \n-            //Verify Binding Host ID\n+            //Build GoalState and Send it to DPM\n             if (portEntity.getBindingHostId() != null) {\n-                NodeManagerProxy nodeManagerProxy = new NodeManagerProxy(rollbacks);\n-                nodeManagerProxy.verifyHost(portEntity.getBindingHostId());\n+                Goalstate.GoalState goalState = GoalStateUtil.buildGoalState(entities, Common.OperationType.CREATE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MzI4OA=="}, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTU2MjE5OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/util/GoalStateUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo1MDo0NVrOGeORqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMTowMDozN1rOGetNcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0NDM2MA==", "bodyText": "As mentioned previously, Port Manager shouldn't use any class under alcor.schema.*", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434344360", "createdAt": "2020-06-03T06:50:45Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/util/GoalStateUtil.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.util;\n+\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.schema.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2OTkxNQ==", "bodyText": "Got it.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434369915", "createdAt": "2020-06-03T07:41:21Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/util/GoalStateUtil.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.util;\n+\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.schema.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0NDM2MA=="}, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MTE4Nw==", "bodyText": "Use Issue #230 for tracking purpose.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434851187", "createdAt": "2020-06-03T21:00:37Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/util/GoalStateUtil.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.util;\n+\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.schema.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0NDM2MA=="}, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTU3MDg0OnYy", "diffSide": "RIGHT", "path": "web/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo1Mzo1NFrOGeOXGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo1Mzo1NFrOGeOXGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0NTc1NQ==", "bodyText": "Remove this dependency.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434345755", "createdAt": "2020-06-03T06:53:54Z", "author": {"login": "xieus"}, "path": "web/pom.xml", "diffHunk": "@@ -47,6 +47,13 @@\n             <scope>compile</scope>\n         </dependency>\n \n+        <dependency>\n+            <groupId>com.futurewei.alcor</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTU3NTg1OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/port/PortEntity.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo1NTo0MFrOGeOaJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo0Mzo1OFrOGeki2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0NjUzNA==", "bodyText": "I would recommend to use the following way: Externally we call it network_id, but internally we call it vpcId. This is the way how VPC/Subnet Manager handles the inconsistency.\n@JsonProperty(\"network_id\")\nprivate String vpcId;", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434346534", "createdAt": "2020-06-03T06:55:40Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/port/PortEntity.java", "diffHunk": "@@ -24,8 +24,8 @@\n \n @Data\n public class PortEntity extends CustomerResource {\n-    @JsonProperty(\"vpc_id\")\n-    private String vpcId;\n+    @JsonProperty(\"network_id\")\n+    private String networkId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MTQ3NA==", "bodyText": "ok", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434371474", "createdAt": "2020-06-03T07:44:14Z", "author": {"login": "chenpiaoping"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/port/PortEntity.java", "diffHunk": "@@ -24,8 +24,8 @@\n \n @Data\n public class PortEntity extends CustomerResource {\n-    @JsonProperty(\"vpc_id\")\n-    private String vpcId;\n+    @JsonProperty(\"network_id\")\n+    private String networkId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0NjUzNA=="}, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwOTIxMA==", "bodyText": "The change looks good!", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434709210", "createdAt": "2020-06-03T16:43:58Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/port/PortEntity.java", "diffHunk": "@@ -24,8 +24,8 @@\n \n @Data\n public class PortEntity extends CustomerResource {\n-    @JsonProperty(\"vpc_id\")\n-    private String vpcId;\n+    @JsonProperty(\"network_id\")\n+    private String networkId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0NjUzNA=="}, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTU4NTk1OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/restclient/IpManagerRestClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo1OTowNlrOGeOgfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo1OTowNlrOGeOgfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0ODE1Nw==", "bodyText": "Like you moved restclient to the AlcorCommon. This is awesome!", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434348157", "createdAt": "2020-06-03T06:59:06Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/restclient/IpManagerRestClient.java", "diffHunk": "@@ -13,7 +13,7 @@\n         See the License for the specific language governing permissions and\n         limitations under the License.\n */\n-package com.futurewei.alcor.portmanager.restclient;\n+package com.futurewei.alcor.web.restclient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80608d29d4f49608b260f636f74f05074cb717c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTYwMDExOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/executor/AsyncExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzowNDowMlrOGeOpTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzowNDowMlrOGeOpTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1MDQxMg==", "bodyText": "Nice comments!", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434350412", "createdAt": "2020-06-03T07:04:02Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/executor/AsyncExecutor.java", "diffHunk": "@@ -45,7 +45,7 @@ public AsyncExecutor() {\n     }\n \n     /**\n-     * Execute the function(first parameter) asynchronously.which has one input parameter\n+     * Execute the function(first parameter) asynchronously which has one input parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1857c1695fd45fb12f0f3ea2ee6a846e10d777e2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzg1MzI5OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1Mzo1NVrOGek7kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1Mzo1NVrOGek7kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxNTUzNw==", "bodyText": "Good call to comment out IPv6 allocation for now. Let us revisit IPv6 allocation when other components are more ready. Created a tracking issue in case we forget.\nIssue #227", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434715537", "createdAt": "2020-06-03T16:53:55Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "diffHunk": "@@ -104,19 +118,37 @@ private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ip\n         addIpAddrRollback(new AllocateIpAddrRollback(ipManagerRestClient), ipv4Addr);\n \n         //Allocate a random ipv6 address", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da743c06ee0ae6dd23cbcb5faa197c6fb5cdc806"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzg1ODEyOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/MacManagerProxy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1NToxNFrOGek-rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1NToxNFrOGek-rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxNjMzMw==", "bodyText": "Minor comment: rename it to genereateMacState.", "url": "https://github.com/futurewei-cloud/alcor/pull/197#discussion_r434716333", "createdAt": "2020-06-03T16:55:14Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/MacManagerProxy.java", "diffHunk": "@@ -42,6 +43,16 @@ private void addMacAddrRollback(AbstractMacAddrRollback rollback, MacState macSt\n         rollbacks.push(rollback);\n     }\n \n+    private MacState newMacState(String projectId, String vpcId, String portId, String macAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da743c06ee0ae6dd23cbcb5faa197c6fb5cdc806"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4755, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}