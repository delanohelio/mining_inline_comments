{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODIwNzQ2", "number": 394, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0NDowNVrOEpOtyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzozMzoxOVrOErSRGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY4MTY5OnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0NDowNVrOHax2Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMToyOTo1MlrOHb8IAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MTY5MQ==", "bodyText": "Consider to keep these test parameters in a file.", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r497841691", "createdAt": "2020-09-30T22:44:05Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.dataplane.service.ovs.DataPlaneServiceImpl;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType, int resourceType, int portNum, int hostNum, int subnetNum, int L2IPNumInNeighborTable, int L3IPNumInNeighborTable, boolean hasRouteEntities, boolean hasNeighbor, int neighborNum, boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(\"10.213.43.18\" + i, \"ephost_0\", \"f37810eb-7f83-45fa-a4d4-1b31e75399d\" + i, \"86:ea:77:ad:52:55\", \"192.168.2.2\", \"9192a4d4-ffff-4ece-b3f0-8d36e3d88038\", \"a87e0f87-a2d9-44ef-9194-9a62f1785940\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d16ce652ce9f8c858dd37e91ca017d3c7451f6ad"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1ODY4OQ==", "bodyText": "NP", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499058689", "createdAt": "2020-10-02T21:29:52Z", "author": {"login": "kevin-zhonghao"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.dataplane.service.ovs.DataPlaneServiceImpl;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType, int resourceType, int portNum, int hostNum, int subnetNum, int L2IPNumInNeighborTable, int L3IPNumInNeighborTable, boolean hasRouteEntities, boolean hasNeighbor, int neighborNum, boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(\"10.213.43.18\" + i, \"ephost_0\", \"f37810eb-7f83-45fa-a4d4-1b31e75399d\" + i, \"86:ea:77:ad:52:55\", \"192.168.2.2\", \"9192a4d4-ffff-4ece-b3f0-8d36e3d88038\", \"a87e0f87-a2d9-44ef-9194-9a62f1785940\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MTY5MQ=="}, "originalCommit": {"oid": "d16ce652ce9f8c858dd37e91ca017d3c7451f6ad"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDg3NTM0OnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/ovs/DataPlaneServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMTozODoxOFrOHcBIFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMTozODoxOFrOHcBIFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0MDYzMQ==", "bodyText": "@chenpiaoping, please help review this file change. Let me know if there is any concern.", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499140631", "createdAt": "2020-10-03T11:38:18Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/ovs/DataPlaneServiceImpl.java", "diffHunk": "@@ -84,13 +84,13 @@ private void buildVpcState(NetworkConfiguration networkConfig, GoalState.Builder\n         }\n \n         for (PortState portState: portStates) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb895b4e6a007784acdfd190c0aea5634b8170e"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDg3NzYxOnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMTo0MzoyOVrOHcBJSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyODo0MVrOHckycg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0MDkzNw==", "bodyText": "As two auto generation methods have quite a few parameters, could we make one parameter one line, or any other format in your preference but with clearer separation?", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499140937", "createdAt": "2020-10-03T11:43:29Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType, int resourceType, int portNum, int hostNum, int subnetNum, int L2IPNumInNeighborTable, int L3IPNumInNeighborTable, boolean hasRouteEntities, boolean hasNeighbor, int neighborNum, boolean fastPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb895b4e6a007784acdfd190c0aea5634b8170e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNDkxNA==", "bodyText": "One parameter one line is a good idea", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499724914", "createdAt": "2020-10-05T16:28:41Z", "author": {"login": "kevin-zhonghao"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType, int resourceType, int portNum, int hostNum, int subnetNum, int L2IPNumInNeighborTable, int L3IPNumInNeighborTable, boolean hasRouteEntities, boolean hasNeighbor, int neighborNum, boolean fastPath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0MDkzNw=="}, "originalCommit": {"oid": "dfb895b4e6a007784acdfd190c0aea5634b8170e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDg3ODY1OnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMTo0NToxN1rOHcBJ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozMDoxOVrOHck2YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0MTA3OQ==", "bodyText": "Very important methods in this Util class :-) Let us give them some high-level comments.", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499141079", "createdAt": "2020-10-03T11:45:17Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb895b4e6a007784acdfd190c0aea5634b8170e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNTkyMA==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499725920", "createdAt": "2020-10-05T16:30:19Z", "author": {"login": "kevin-zhonghao"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0MTA3OQ=="}, "originalCommit": {"oid": "dfb895b4e6a007784acdfd190c0aea5634b8170e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDkxOTA3OnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMzowMTo1NVrOHcBdhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMzowMTo1NVrOHcBdhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0NjExOQ==", "bodyText": "This will make each port fall into a different subnet. Don't think it is needed. Let us have a quick sync up. @kevin-zhonghao", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499146119", "createdAt": "2020-10-03T13:01:55Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType, int resourceType, int portNum, int hostNum, int subnetNum, int L2IPNumInNeighborTable, int L3IPNumInNeighborTable, boolean hasRouteEntities, boolean hasNeighbor, int neighborNum, boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(DPMAutoUnitTestConstant.hostIp + i, DPMAutoUnitTestConstant.hostId, DPMAutoUnitTestConstant.portId + i, DPMAutoUnitTestConstant.portMac, DPMAutoUnitTestConstant.portIp, DPMAutoUnitTestConstant.vpcId, DPMAutoUnitTestConstant.subnetId + i);\n+                neighborINFO.add(neighborInfo);\n+            }\n+        }\n+        networkConfiguration.setNeighborInfos(neighborINFO);\n+\n+        // set neighborTable\n+        List<NeighborEntry> neighborTable = new ArrayList<>();\n+        for (int i = 0; i < L2IPNumInNeighborTable; i ++) {\n+            int num1 = i + 2;\n+            for (int j = i + 1; j < L2IPNumInNeighborTable; j ++) {\n+                int num2 = j + 2;\n+                NeighborEntry neighborEntry = new NeighborEntry();\n+                neighborEntry.setLocalIp(DPMAutoUnitTestConstant.L2localIp + num1);\n+                neighborEntry.setNeighborIp(DPMAutoUnitTestConstant.L2neighborIp + num2);\n+                neighborEntry.setNeighborType(NeighborEntry.NeighborType.L2);\n+                neighborTable.add(neighborEntry);\n+            }\n+        }\n+\n+        for (int i = 0; i < L3IPNumInNeighborTable; i ++) {\n+            int num1 = i + 2;\n+            for (int j = i + 1; j < L3IPNumInNeighborTable; j ++) {\n+                int num2 = j + 2;\n+                NeighborEntry neighborEntry = new NeighborEntry();\n+                neighborEntry.setLocalIp(DPMAutoUnitTestConstant.L3localIp + num1);\n+                neighborEntry.setNeighborIp(DPMAutoUnitTestConstant.L3neighborIp + num2);\n+                neighborEntry.setNeighborType(NeighborEntry.NeighborType.L2);\n+                neighborTable.add(neighborEntry);\n+            }\n+        }\n+\n+        for (int i = 0; i < L2IPNumInNeighborTable; i ++) {\n+            int num1 = i + 2;\n+            for (int j = 0; j < L3IPNumInNeighborTable; j ++) {\n+                int num2 = j + 2;\n+                NeighborEntry neighborEntry = new NeighborEntry();\n+                neighborEntry.setLocalIp(DPMAutoUnitTestConstant.L2localIp + num1);\n+                neighborEntry.setNeighborIp(DPMAutoUnitTestConstant.L3neighborIp + num2);\n+                neighborEntry.setNeighborType(NeighborEntry.NeighborType.L3);\n+                neighborTable.add(neighborEntry);\n+            }\n+        }\n+        networkConfiguration.setNeighborTable(neighborTable);\n+\n+        // set portEntities\n+        List<InternalPortEntity> portEntities = new ArrayList<>();\n+        for (int j = 0; j < hostNum; j ++) {\n+            for (int i = 0; i < portNum; i ++) {\n+                List<PortEntity.FixedIp> fixedIps = new ArrayList<>();\n+                PortEntity.FixedIp fixedIp = new PortEntity.FixedIp(DPMAutoUnitTestConstant.subnetId + i, DPMAutoUnitTestConstant.IpAddress + i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb895b4e6a007784acdfd190c0aea5634b8170e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDkxOTcxOnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMzowMjozN1rOHcBdzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMzowMjozN1rOHcBdzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0NjE5MA==", "bodyText": "Trying to understand what would happen if portNum is larger than hostNum.", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499146190", "createdAt": "2020-10-03T13:02:37Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType, int resourceType, int portNum, int hostNum, int subnetNum, int L2IPNumInNeighborTable, int L3IPNumInNeighborTable, boolean hasRouteEntities, boolean hasNeighbor, int neighborNum, boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(DPMAutoUnitTestConstant.hostIp + i, DPMAutoUnitTestConstant.hostId, DPMAutoUnitTestConstant.portId + i, DPMAutoUnitTestConstant.portMac, DPMAutoUnitTestConstant.portIp, DPMAutoUnitTestConstant.vpcId, DPMAutoUnitTestConstant.subnetId + i);\n+                neighborINFO.add(neighborInfo);\n+            }\n+        }\n+        networkConfiguration.setNeighborInfos(neighborINFO);\n+\n+        // set neighborTable\n+        List<NeighborEntry> neighborTable = new ArrayList<>();\n+        for (int i = 0; i < L2IPNumInNeighborTable; i ++) {\n+            int num1 = i + 2;\n+            for (int j = i + 1; j < L2IPNumInNeighborTable; j ++) {\n+                int num2 = j + 2;\n+                NeighborEntry neighborEntry = new NeighborEntry();\n+                neighborEntry.setLocalIp(DPMAutoUnitTestConstant.L2localIp + num1);\n+                neighborEntry.setNeighborIp(DPMAutoUnitTestConstant.L2neighborIp + num2);\n+                neighborEntry.setNeighborType(NeighborEntry.NeighborType.L2);\n+                neighborTable.add(neighborEntry);\n+            }\n+        }\n+\n+        for (int i = 0; i < L3IPNumInNeighborTable; i ++) {\n+            int num1 = i + 2;\n+            for (int j = i + 1; j < L3IPNumInNeighborTable; j ++) {\n+                int num2 = j + 2;\n+                NeighborEntry neighborEntry = new NeighborEntry();\n+                neighborEntry.setLocalIp(DPMAutoUnitTestConstant.L3localIp + num1);\n+                neighborEntry.setNeighborIp(DPMAutoUnitTestConstant.L3neighborIp + num2);\n+                neighborEntry.setNeighborType(NeighborEntry.NeighborType.L2);\n+                neighborTable.add(neighborEntry);\n+            }\n+        }\n+\n+        for (int i = 0; i < L2IPNumInNeighborTable; i ++) {\n+            int num1 = i + 2;\n+            for (int j = 0; j < L3IPNumInNeighborTable; j ++) {\n+                int num2 = j + 2;\n+                NeighborEntry neighborEntry = new NeighborEntry();\n+                neighborEntry.setLocalIp(DPMAutoUnitTestConstant.L2localIp + num1);\n+                neighborEntry.setNeighborIp(DPMAutoUnitTestConstant.L3neighborIp + num2);\n+                neighborEntry.setNeighborType(NeighborEntry.NeighborType.L3);\n+                neighborTable.add(neighborEntry);\n+            }\n+        }\n+        networkConfiguration.setNeighborTable(neighborTable);\n+\n+        // set portEntities\n+        List<InternalPortEntity> portEntities = new ArrayList<>();\n+        for (int j = 0; j < hostNum; j ++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb895b4e6a007784acdfd190c0aea5634b8170e"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTI1Mjc4OnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODoxNDoxMlrOHcoWBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTozMjoxOVrOHcuhIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4MzE3NA==", "bodyText": "NumOfIPsInSubnet1", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499783174", "createdAt": "2020-10-05T18:14:12Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType, int resourceType, int portNum, int hostNum, int subnetNum, int L2IPNumInNeighborTable, int L3IPNumInNeighborTable, boolean hasRouteEntities, boolean hasNeighbor, int neighborNum, boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(DPMAutoUnitTestConstant.hostIp + i, DPMAutoUnitTestConstant.hostId, DPMAutoUnitTestConstant.portId + i, DPMAutoUnitTestConstant.portMac, DPMAutoUnitTestConstant.portIp, DPMAutoUnitTestConstant.vpcId, DPMAutoUnitTestConstant.subnetId + i);\n+                neighborINFO.add(neighborInfo);\n+            }\n+        }\n+        networkConfiguration.setNeighborInfos(neighborINFO);\n+\n+        // set neighborTable\n+        List<NeighborEntry> neighborTable = new ArrayList<>();\n+        for (int i = 0; i < L2IPNumInNeighborTable; i ++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb895b4e6a007784acdfd190c0aea5634b8170e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4NDMyMQ==", "bodyText": "okay", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499884321", "createdAt": "2020-10-05T21:32:19Z", "author": {"login": "kevin-zhonghao"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType, int resourceType, int portNum, int hostNum, int subnetNum, int L2IPNumInNeighborTable, int L3IPNumInNeighborTable, boolean hasRouteEntities, boolean hasNeighbor, int neighborNum, boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(DPMAutoUnitTestConstant.hostIp + i, DPMAutoUnitTestConstant.hostId, DPMAutoUnitTestConstant.portId + i, DPMAutoUnitTestConstant.portMac, DPMAutoUnitTestConstant.portIp, DPMAutoUnitTestConstant.vpcId, DPMAutoUnitTestConstant.subnetId + i);\n+                neighborINFO.add(neighborInfo);\n+            }\n+        }\n+        networkConfiguration.setNeighborInfos(neighborINFO);\n+\n+        // set neighborTable\n+        List<NeighborEntry> neighborTable = new ArrayList<>();\n+        for (int i = 0; i < L2IPNumInNeighborTable; i ++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4MzE3NA=="}, "originalCommit": {"oid": "dfb895b4e6a007784acdfd190c0aea5634b8170e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTI1Njk3OnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODoxNTozMFrOHcoYsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTozMzozM1rOHcujKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4Mzg1OQ==", "bodyText": "IpAddressOffset", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499783859", "createdAt": "2020-10-05T18:15:30Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType, int resourceType, int portNum, int hostNum, int subnetNum, int L2IPNumInNeighborTable, int L3IPNumInNeighborTable, boolean hasRouteEntities, boolean hasNeighbor, int neighborNum, boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(DPMAutoUnitTestConstant.hostIp + i, DPMAutoUnitTestConstant.hostId, DPMAutoUnitTestConstant.portId + i, DPMAutoUnitTestConstant.portMac, DPMAutoUnitTestConstant.portIp, DPMAutoUnitTestConstant.vpcId, DPMAutoUnitTestConstant.subnetId + i);\n+                neighborINFO.add(neighborInfo);\n+            }\n+        }\n+        networkConfiguration.setNeighborInfos(neighborINFO);\n+\n+        // set neighborTable\n+        List<NeighborEntry> neighborTable = new ArrayList<>();\n+        for (int i = 0; i < L2IPNumInNeighborTable; i ++) {\n+            int num1 = i + 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb895b4e6a007784acdfd190c0aea5634b8170e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4NDg0MA==", "bodyText": "np", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499884840", "createdAt": "2020-10-05T21:33:33Z", "author": {"login": "kevin-zhonghao"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType, int resourceType, int portNum, int hostNum, int subnetNum, int L2IPNumInNeighborTable, int L3IPNumInNeighborTable, boolean hasRouteEntities, boolean hasNeighbor, int neighborNum, boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(DPMAutoUnitTestConstant.hostIp + i, DPMAutoUnitTestConstant.hostId, DPMAutoUnitTestConstant.portId + i, DPMAutoUnitTestConstant.portMac, DPMAutoUnitTestConstant.portIp, DPMAutoUnitTestConstant.vpcId, DPMAutoUnitTestConstant.subnetId + i);\n+                neighborINFO.add(neighborInfo);\n+            }\n+        }\n+        networkConfiguration.setNeighborInfos(neighborINFO);\n+\n+        // set neighborTable\n+        List<NeighborEntry> neighborTable = new ArrayList<>();\n+        for (int i = 0; i < L2IPNumInNeighborTable; i ++) {\n+            int num1 = i + 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4Mzg1OQ=="}, "originalCommit": {"oid": "dfb895b4e6a007784acdfd190c0aea5634b8170e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTI2NDUxOnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODoxNzo1MlrOHcodjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODoxNzo1MlrOHcodjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4NTEwMA==", "bodyText": "Need to use latest contract in PR #396", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r499785100", "createdAt": "2020-10-05T18:17:52Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,535 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.RouteEntity;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType, int resourceType, int portNum, int hostNum, int subnetNum, int L2IPNumInNeighborTable, int L3IPNumInNeighborTable, boolean hasRouteEntities, boolean hasNeighbor, int neighborNum, boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(DPMAutoUnitTestConstant.hostIp + i, DPMAutoUnitTestConstant.hostId, DPMAutoUnitTestConstant.portId + i, DPMAutoUnitTestConstant.portMac, DPMAutoUnitTestConstant.portIp, DPMAutoUnitTestConstant.vpcId, DPMAutoUnitTestConstant.subnetId + i);\n+                neighborINFO.add(neighborInfo);\n+            }\n+        }\n+        networkConfiguration.setNeighborInfos(neighborINFO);\n+\n+        // set neighborTable\n+        List<NeighborEntry> neighborTable = new ArrayList<>();\n+        for (int i = 0; i < L2IPNumInNeighborTable; i ++) {\n+            int num1 = i + 2;\n+            for (int j = i + 1; j < L2IPNumInNeighborTable; j ++) {\n+                int num2 = j + 2;\n+                NeighborEntry neighborEntry = new NeighborEntry();\n+                neighborEntry.setLocalIp(DPMAutoUnitTestConstant.L2localIp + num1);\n+                neighborEntry.setNeighborIp(DPMAutoUnitTestConstant.L2neighborIp + num2);\n+                neighborEntry.setNeighborType(NeighborEntry.NeighborType.L2);\n+                neighborTable.add(neighborEntry);\n+            }\n+        }\n+\n+        for (int i = 0; i < L3IPNumInNeighborTable; i ++) {\n+            int num1 = i + 2;\n+            for (int j = i + 1; j < L3IPNumInNeighborTable; j ++) {\n+                int num2 = j + 2;\n+                NeighborEntry neighborEntry = new NeighborEntry();\n+                neighborEntry.setLocalIp(DPMAutoUnitTestConstant.L3localIp + num1);\n+                neighborEntry.setNeighborIp(DPMAutoUnitTestConstant.L3neighborIp + num2);\n+                neighborEntry.setNeighborType(NeighborEntry.NeighborType.L2);\n+                neighborTable.add(neighborEntry);\n+            }\n+        }\n+\n+        for (int i = 0; i < L2IPNumInNeighborTable; i ++) {\n+            int num1 = i + 2;\n+            for (int j = 0; j < L3IPNumInNeighborTable; j ++) {\n+                int num2 = j + 2;\n+                NeighborEntry neighborEntry = new NeighborEntry();\n+                neighborEntry.setLocalIp(DPMAutoUnitTestConstant.L2localIp + num1);\n+                neighborEntry.setNeighborIp(DPMAutoUnitTestConstant.L3neighborIp + num2);\n+                neighborEntry.setNeighborType(NeighborEntry.NeighborType.L3);\n+                neighborTable.add(neighborEntry);\n+            }\n+        }\n+        networkConfiguration.setNeighborTable(neighborTable);\n+\n+        // set portEntities\n+        List<InternalPortEntity> portEntities = new ArrayList<>();\n+        for (int j = 0; j < hostNum; j ++) {\n+            for (int i = 0; i < portNum; i ++) {\n+                List<PortEntity.FixedIp> fixedIps = new ArrayList<>();\n+                PortEntity.FixedIp fixedIp = new PortEntity.FixedIp(DPMAutoUnitTestConstant.subnetId + i, DPMAutoUnitTestConstant.IpAddress + i);\n+                fixedIps.add(fixedIp);\n+\n+                PortEntity portEntity = new PortEntity(DPMAutoUnitTestConstant.projectId, DPMAutoUnitTestConstant.portId + i,\n+                        DPMAutoUnitTestConstant.portName + i, \"\", DPMAutoUnitTestConstant.vpcId, true, DPMAutoUnitTestConstant.portMacAddress + i, DPMAutoUnitTestConstant.vethName + i, fastPath,\n+                        null, null, null, fixedIps, null, null, null,\n+                        DPMAutoUnitTestConstant.bindingHostId, null, null, null, null,\n+                        DPMAutoUnitTestConstant.networkNamespace, null, null, null, null, null,\n+                        null, false, null, null, 0, null, null,\n+                        false, false);\n+\n+                List<RouteEntity> routeEntities = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb895b4e6a007784acdfd190c0aea5634b8170e"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODIyODkzOnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzozMTo0OVrOHd-JlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo1MToxOFrOHeBHsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4OTAxMg==", "bodyText": "If we use DPMAutoUnitTestConstant.portMac and DPMAutoUnitTestConstant.portIp, do that mean that we are generating multiple neighbor ports with same IP and MAC?", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r501189012", "createdAt": "2020-10-07T17:31:49Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,704 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.common.enumClass.OperationType;\n+import com.futurewei.alcor.schema.Router;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    /**\n+     * Automatically generate the input of UTs, that is, the contractor of Port Manager to DPM\n+     * @param operationType\n+     * @param resourceType\n+     * @param portNumPerHost\n+     * @param hostNum\n+     * @param subnetNum\n+     * @param NumOfIPsInSubnet1\n+     * @param NumOfIPsInSubnet2\n+     * @param hasInternalRouterInfo\n+     * @param hasInternalSubnetRoutingTable\n+     * @param hasInternalRoutingRule\n+     * @param hasNeighbor\n+     * @param neighborNum\n+     * @param fastPath\n+     * @return\n+     */\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType,\n+                                                     int resourceType,\n+                                                     int portNumPerHost,\n+                                                     int hostNum,\n+                                                     int subnetNum,\n+                                                     int NumOfIPsInSubnet1,\n+                                                     int NumOfIPsInSubnet2,\n+                                                     boolean hasInternalRouterInfo,\n+                                                     boolean hasInternalSubnetRoutingTable,\n+                                                     boolean hasInternalRoutingRule,\n+                                                     boolean hasNeighbor,\n+                                                     int neighborNum,\n+                                                     boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set routers_internal\n+        List<InternalRouterInfo> internalRouterInfos = new ArrayList<>();\n+        if (hasInternalRouterInfo) {\n+            InternalRouterInfo routerInfo = new InternalRouterInfo();\n+            InternalRouterConfiguration internalRouterConfiguration = new InternalRouterConfiguration();\n+            List<InternalSubnetRoutingTable> subnet_routing_tables = new ArrayList<>();\n+\n+            if (hasInternalSubnetRoutingTable) {\n+                InternalSubnetRoutingTable internalSubnetRoutingTable = new InternalSubnetRoutingTable();\n+                List<InternalRoutingRule> routing_rules = new ArrayList<>();\n+\n+                if (hasInternalRoutingRule){\n+                    InternalRoutingRule internalRoutingRule = new InternalRoutingRule();\n+                    routing_rules.add(internalRoutingRule);\n+                }\n+\n+                internalSubnetRoutingTable.setRoutingRules(routing_rules);\n+                subnet_routing_tables.add(internalSubnetRoutingTable);\n+            }\n+\n+            internalRouterConfiguration.setSubnetRoutingTables(subnet_routing_tables);\n+\n+\n+            //routerInfo.setOperationType(OperationType.valueOf(\"create\"));\n+            routerInfo.setRouterConfiguration(internalRouterConfiguration);\n+            internalRouterInfos.add(routerInfo);\n+        }\n+\n+        networkConfiguration.setInternalRouterInfos(internalRouterInfos);\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(DPMAutoUnitTestConstant.hostIp + i, DPMAutoUnitTestConstant.hostId, DPMAutoUnitTestConstant.portId + i, DPMAutoUnitTestConstant.portMac, DPMAutoUnitTestConstant.portIp, DPMAutoUnitTestConstant.vpcId, DPMAutoUnitTestConstant.subnetId + i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fca8df6f4169ea6a5a83776e9d00f87bc156190"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzNzY4Mg==", "bodyText": "Yes, because we assume there is one neighbor if it has neighbor in most of cases. Do we have the case to test multiple neighbor with different IP and MAC?", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r501237682", "createdAt": "2020-10-07T18:51:18Z", "author": {"login": "kevin-zhonghao"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,704 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.common.enumClass.OperationType;\n+import com.futurewei.alcor.schema.Router;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    /**\n+     * Automatically generate the input of UTs, that is, the contractor of Port Manager to DPM\n+     * @param operationType\n+     * @param resourceType\n+     * @param portNumPerHost\n+     * @param hostNum\n+     * @param subnetNum\n+     * @param NumOfIPsInSubnet1\n+     * @param NumOfIPsInSubnet2\n+     * @param hasInternalRouterInfo\n+     * @param hasInternalSubnetRoutingTable\n+     * @param hasInternalRoutingRule\n+     * @param hasNeighbor\n+     * @param neighborNum\n+     * @param fastPath\n+     * @return\n+     */\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType,\n+                                                     int resourceType,\n+                                                     int portNumPerHost,\n+                                                     int hostNum,\n+                                                     int subnetNum,\n+                                                     int NumOfIPsInSubnet1,\n+                                                     int NumOfIPsInSubnet2,\n+                                                     boolean hasInternalRouterInfo,\n+                                                     boolean hasInternalSubnetRoutingTable,\n+                                                     boolean hasInternalRoutingRule,\n+                                                     boolean hasNeighbor,\n+                                                     int neighborNum,\n+                                                     boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set routers_internal\n+        List<InternalRouterInfo> internalRouterInfos = new ArrayList<>();\n+        if (hasInternalRouterInfo) {\n+            InternalRouterInfo routerInfo = new InternalRouterInfo();\n+            InternalRouterConfiguration internalRouterConfiguration = new InternalRouterConfiguration();\n+            List<InternalSubnetRoutingTable> subnet_routing_tables = new ArrayList<>();\n+\n+            if (hasInternalSubnetRoutingTable) {\n+                InternalSubnetRoutingTable internalSubnetRoutingTable = new InternalSubnetRoutingTable();\n+                List<InternalRoutingRule> routing_rules = new ArrayList<>();\n+\n+                if (hasInternalRoutingRule){\n+                    InternalRoutingRule internalRoutingRule = new InternalRoutingRule();\n+                    routing_rules.add(internalRoutingRule);\n+                }\n+\n+                internalSubnetRoutingTable.setRoutingRules(routing_rules);\n+                subnet_routing_tables.add(internalSubnetRoutingTable);\n+            }\n+\n+            internalRouterConfiguration.setSubnetRoutingTables(subnet_routing_tables);\n+\n+\n+            //routerInfo.setOperationType(OperationType.valueOf(\"create\"));\n+            routerInfo.setRouterConfiguration(internalRouterConfiguration);\n+            internalRouterInfos.add(routerInfo);\n+        }\n+\n+        networkConfiguration.setInternalRouterInfos(internalRouterInfos);\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(DPMAutoUnitTestConstant.hostIp + i, DPMAutoUnitTestConstant.hostId, DPMAutoUnitTestConstant.portId + i, DPMAutoUnitTestConstant.portMac, DPMAutoUnitTestConstant.portIp, DPMAutoUnitTestConstant.vpcId, DPMAutoUnitTestConstant.subnetId + i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4OTAxMg=="}, "originalCommit": {"oid": "9fca8df6f4169ea6a5a83776e9d00f87bc156190"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODIzNTEzOnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzozMzoxOVrOHd-NXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo1NDowM1rOHeBNrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4OTk4Mw==", "bodyText": "Subnet generation shouldn't reply on DPMAutoUnitTestConstant.subnetId + i.\nThis means that if neighborNum=N, we will have N neighbor port, each will be in a different subnet. Subnet size is always one, and basically against the following code to generate neighborTable (using NumOfIPsInSubnet1 and NumOfIPsInSubnet2).", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r501189983", "createdAt": "2020-10-07T17:33:19Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,704 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.common.enumClass.OperationType;\n+import com.futurewei.alcor.schema.Router;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    /**\n+     * Automatically generate the input of UTs, that is, the contractor of Port Manager to DPM\n+     * @param operationType\n+     * @param resourceType\n+     * @param portNumPerHost\n+     * @param hostNum\n+     * @param subnetNum\n+     * @param NumOfIPsInSubnet1\n+     * @param NumOfIPsInSubnet2\n+     * @param hasInternalRouterInfo\n+     * @param hasInternalSubnetRoutingTable\n+     * @param hasInternalRoutingRule\n+     * @param hasNeighbor\n+     * @param neighborNum\n+     * @param fastPath\n+     * @return\n+     */\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType,\n+                                                     int resourceType,\n+                                                     int portNumPerHost,\n+                                                     int hostNum,\n+                                                     int subnetNum,\n+                                                     int NumOfIPsInSubnet1,\n+                                                     int NumOfIPsInSubnet2,\n+                                                     boolean hasInternalRouterInfo,\n+                                                     boolean hasInternalSubnetRoutingTable,\n+                                                     boolean hasInternalRoutingRule,\n+                                                     boolean hasNeighbor,\n+                                                     int neighborNum,\n+                                                     boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set routers_internal\n+        List<InternalRouterInfo> internalRouterInfos = new ArrayList<>();\n+        if (hasInternalRouterInfo) {\n+            InternalRouterInfo routerInfo = new InternalRouterInfo();\n+            InternalRouterConfiguration internalRouterConfiguration = new InternalRouterConfiguration();\n+            List<InternalSubnetRoutingTable> subnet_routing_tables = new ArrayList<>();\n+\n+            if (hasInternalSubnetRoutingTable) {\n+                InternalSubnetRoutingTable internalSubnetRoutingTable = new InternalSubnetRoutingTable();\n+                List<InternalRoutingRule> routing_rules = new ArrayList<>();\n+\n+                if (hasInternalRoutingRule){\n+                    InternalRoutingRule internalRoutingRule = new InternalRoutingRule();\n+                    routing_rules.add(internalRoutingRule);\n+                }\n+\n+                internalSubnetRoutingTable.setRoutingRules(routing_rules);\n+                subnet_routing_tables.add(internalSubnetRoutingTable);\n+            }\n+\n+            internalRouterConfiguration.setSubnetRoutingTables(subnet_routing_tables);\n+\n+\n+            //routerInfo.setOperationType(OperationType.valueOf(\"create\"));\n+            routerInfo.setRouterConfiguration(internalRouterConfiguration);\n+            internalRouterInfos.add(routerInfo);\n+        }\n+\n+        networkConfiguration.setInternalRouterInfos(internalRouterInfos);\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(DPMAutoUnitTestConstant.hostIp + i, DPMAutoUnitTestConstant.hostId, DPMAutoUnitTestConstant.portId + i, DPMAutoUnitTestConstant.portMac, DPMAutoUnitTestConstant.portIp, DPMAutoUnitTestConstant.vpcId, DPMAutoUnitTestConstant.subnetId + i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fca8df6f4169ea6a5a83776e9d00f87bc156190"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzOTIxMg==", "bodyText": "That's right, I will fix value of the subnet id", "url": "https://github.com/futurewei-cloud/alcor/pull/394#discussion_r501239212", "createdAt": "2020-10-07T18:54:03Z", "author": {"login": "kevin-zhonghao"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -0,0 +1,704 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.utils;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.dataplane.constants.DPMAutoUnitTestConstant;\n+import com.futurewei.alcor.dataplane.entity.HostGoalState;\n+import com.futurewei.alcor.dataplane.exception.NeighborInfoNotFound;\n+import com.futurewei.alcor.dataplane.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.dataplane.exception.VpcEntityNotFound;\n+import com.futurewei.alcor.schema.*;\n+import com.futurewei.alcor.common.enumClass.OperationType;\n+import com.futurewei.alcor.schema.Router;\n+import com.futurewei.alcor.web.entity.dataplane.*;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+public class DataPlaneManagerUtil {\n+\n+    /**\n+     * Automatically generate the input of UTs, that is, the contractor of Port Manager to DPM\n+     * @param operationType\n+     * @param resourceType\n+     * @param portNumPerHost\n+     * @param hostNum\n+     * @param subnetNum\n+     * @param NumOfIPsInSubnet1\n+     * @param NumOfIPsInSubnet2\n+     * @param hasInternalRouterInfo\n+     * @param hasInternalSubnetRoutingTable\n+     * @param hasInternalRoutingRule\n+     * @param hasNeighbor\n+     * @param neighborNum\n+     * @param fastPath\n+     * @return\n+     */\n+    public NetworkConfiguration autoGenerateUTsInput(int operationType,\n+                                                     int resourceType,\n+                                                     int portNumPerHost,\n+                                                     int hostNum,\n+                                                     int subnetNum,\n+                                                     int NumOfIPsInSubnet1,\n+                                                     int NumOfIPsInSubnet2,\n+                                                     boolean hasInternalRouterInfo,\n+                                                     boolean hasInternalSubnetRoutingTable,\n+                                                     boolean hasInternalRoutingRule,\n+                                                     boolean hasNeighbor,\n+                                                     int neighborNum,\n+                                                     boolean fastPath) {\n+        NetworkConfiguration networkConfiguration = new NetworkConfiguration();\n+\n+        // set operationType and resourceType\n+        networkConfiguration.setOpType(Common.OperationType.forNumber(operationType));\n+        networkConfiguration.setRsType(Common.ResourceType.forNumber(resourceType));\n+\n+        // set routers_internal\n+        List<InternalRouterInfo> internalRouterInfos = new ArrayList<>();\n+        if (hasInternalRouterInfo) {\n+            InternalRouterInfo routerInfo = new InternalRouterInfo();\n+            InternalRouterConfiguration internalRouterConfiguration = new InternalRouterConfiguration();\n+            List<InternalSubnetRoutingTable> subnet_routing_tables = new ArrayList<>();\n+\n+            if (hasInternalSubnetRoutingTable) {\n+                InternalSubnetRoutingTable internalSubnetRoutingTable = new InternalSubnetRoutingTable();\n+                List<InternalRoutingRule> routing_rules = new ArrayList<>();\n+\n+                if (hasInternalRoutingRule){\n+                    InternalRoutingRule internalRoutingRule = new InternalRoutingRule();\n+                    routing_rules.add(internalRoutingRule);\n+                }\n+\n+                internalSubnetRoutingTable.setRoutingRules(routing_rules);\n+                subnet_routing_tables.add(internalSubnetRoutingTable);\n+            }\n+\n+            internalRouterConfiguration.setSubnetRoutingTables(subnet_routing_tables);\n+\n+\n+            //routerInfo.setOperationType(OperationType.valueOf(\"create\"));\n+            routerInfo.setRouterConfiguration(internalRouterConfiguration);\n+            internalRouterInfos.add(routerInfo);\n+        }\n+\n+        networkConfiguration.setInternalRouterInfos(internalRouterInfos);\n+\n+        // set neighborInfos\n+        List<NeighborInfo> neighborINFO = new ArrayList<>();\n+        if (hasNeighbor) {\n+            for (int i = 0; i < neighborNum; i ++) {\n+                NeighborInfo neighborInfo = new NeighborInfo(DPMAutoUnitTestConstant.hostIp + i, DPMAutoUnitTestConstant.hostId, DPMAutoUnitTestConstant.portId + i, DPMAutoUnitTestConstant.portMac, DPMAutoUnitTestConstant.portIp, DPMAutoUnitTestConstant.vpcId, DPMAutoUnitTestConstant.subnetId + i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4OTk4Mw=="}, "originalCommit": {"oid": "9fca8df6f4169ea6a5a83776e9d00f87bc156190"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4414, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}