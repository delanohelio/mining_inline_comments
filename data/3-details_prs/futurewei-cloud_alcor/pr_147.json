{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NTM3MjIx", "number": 147, "title": "[Microservices] MAC address manager", "bodyText": "The MAC address Manager creates and allocate MAC address for each port. Also, it manages MAC address pool and MAC address ranges, which are used when it creates MAC addresses.\nHere is the brief description of MAC manager:\n\n\nMAC address APIs: create, get, allocate, update, release\n\n\nMAC range APIs: create, get, allocate, update, release\n\n\nSchema update: mac_state, mac_range, mac_pool\n\n\nService codes: inteface MacService and its implementation MacRedisServiceImpl\n\n\nCode structure: update the package path for common lib and macmanager\n\n\nDeployment: update Application.properties and pom file for configuration", "createdAt": "2020-04-06T10:18:56Z", "url": "https://github.com/futurewei-cloud/alcor/pull/147", "merged": true, "mergeCommit": {"oid": "0817ce8198b91bfaca7c43abedc8995c5a3746a6"}, "closed": true, "closedAt": "2020-04-15T21:33:06Z", "author": {"login": "kimeunju108"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU78bNAH2gAyMzk5NTM3MjIxOmQ5MzNiMGQ1MTliOWVjNmI4NzUzYTkzZDI2ZjE5YWI2NmNiNzIwYWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX-6ppgH2gAyMzk5NTM3MjIxOjIxMzdkNGM4OGJhODViZDcxN2UwNmYyZjRlYjA0MjIwNTA1NDBjNjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "committedDate": "2020-04-06T10:14:58Z", "message": "[Microservices] Mac address manager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjI3MjI5", "url": "https://github.com/futurewei-cloud/alcor/pull/147#pullrequestreview-388627229", "createdAt": "2020-04-06T21:22:33Z", "commit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToyMjozM1rOGBqZwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTo0MzowOVrOGBrBmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NjQ4Mg==", "bodyText": "Can you check the latest vpc_manager codes? We have updated its pom.file to exclude a generated jar file in the dependencies list?", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404396482", "createdAt": "2020-04-06T21:22:33Z", "author": {"login": "xieus"}, "path": "services/mac_manager/pom.xml", "diffHunk": "@@ -0,0 +1,128 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.2.6.RELEASE</version>\n+\t\t<relativePath/> <!-- lookup parent from repository -->\n+\t</parent>\n+\t<groupId>com.futurewei.alcor.macmanager</groupId>\n+\t<artifactId>AlcorMacManager</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<name>AlcorMacManager</name>\n+\t<description>Virtual Mac Address Manager Module</description>\n+\n+\t<properties>\n+\t\t<java.version>1.8</java.version>\n+\t</properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.kafka</groupId>\n+\t\t\t<artifactId>kafka-clients</artifactId>\n+\t\t\t<version>2.3.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.google.protobuf</groupId>\n+\t\t\t<artifactId>protobuf-java</artifactId>\n+\t\t\t<version>3.8.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<version>1.18.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.futurewei.alcor.common</groupId>\n+\t\t\t<artifactId>alcor_common_lib</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5Njc1Mw==", "bodyText": "All grpc dependencies are not needed at this time.", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404396753", "createdAt": "2020-04-06T21:23:03Z", "author": {"login": "xieus"}, "path": "services/mac_manager/pom.xml", "diffHunk": "@@ -0,0 +1,128 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.2.6.RELEASE</version>\n+\t\t<relativePath/> <!-- lookup parent from repository -->\n+\t</parent>\n+\t<groupId>com.futurewei.alcor.macmanager</groupId>\n+\t<artifactId>AlcorMacManager</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<name>AlcorMacManager</name>\n+\t<description>Virtual Mac Address Manager Module</description>\n+\n+\t<properties>\n+\t\t<java.version>1.8</java.version>\n+\t</properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.kafka</groupId>\n+\t\t\t<artifactId>kafka-clients</artifactId>\n+\t\t\t<version>2.3.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.google.protobuf</groupId>\n+\t\t\t<artifactId>protobuf-java</artifactId>\n+\t\t\t<version>3.8.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<version>1.18.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.futurewei.alcor.common</groupId>\n+\t\t\t<artifactId>alcor_common_lib</artifactId>\n+\t\t\t<version>0.1.0</version>\n+\t\t\t<scope>system</scope>\n+\t\t\t<systemPath>${pom.basedir}/lib/alcor_common_lib-0.1.0-SNAPSHOT.jar</systemPath>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>mysql</groupId>\n+\t\t\t<artifactId>mysql-connector-java</artifactId>\n+\t\t\t<scope>runtime</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.commons</groupId>\n+\t\t\t<artifactId>commons-pool2</artifactId>\n+\t\t\t<version>2.4.2</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.grpc</groupId>\n+\t\t\t<artifactId>grpc-netty-shaded</artifactId>\n+\t\t\t<version>1.23.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.grpc</groupId>\n+\t\t\t<artifactId>grpc-protobuf</artifactId>\n+\t\t\t<version>1.23.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.grpc</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NzY3Nw==", "bodyText": "\"macs\" or \"mac addresses\"", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404397677", "createdAt": "2020-04-06T21:24:42Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/controller/MacController.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.controller;\n+\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.MacStateJson;\n+import com.futurewei.alcor.macmanager.service.MacAddressService;\n+import com.futurewei.alcor.macmanager.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.Map;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+@RestController\n+public class MacController {\n+\n+    final String DELIMITER = \"/\";\n+\n+    @Autowired\n+    private MacAddressService service;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/macaddress/{macaddress}\", \"/v4/macaddress/{macaddress}\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMjU1OQ==", "bodyText": "What is OuiState used for?", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404402559", "createdAt": "2020-04-06T21:34:22Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/entity/OuiState.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.entity;\n+\n+import lombok.Data;\n+\n+import java.io.Serializable;\n+\n+@Data\n+public class OuiState implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMjc4MQ==", "bodyText": "Remove line 36.", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404402781", "createdAt": "2020-04-06T21:34:51Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/entity/MacState.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.entity;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+import java.io.Serializable;\n+\n+@Data\n+public class MacState implements Serializable {\n+\n+    @JsonProperty(\"mac_address\")\n+    private String macAddress;\n+\n+    @JsonProperty(\"project_id\")\n+    private String projectId;\n+\n+    @JsonProperty(\"vpc_id\")\n+    private String vpcId;\n+\n+    @JsonProperty(\"port_id\")\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNTM3Nw==", "bodyText": "We have RestPreconditionsUtil in the alcor/lib folder, which already contains the commonly shared funcs. Could you remove those common functions and only leave the mac-specific ones here?", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404405377", "createdAt": "2020-04-06T21:40:17Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/utils/RestPreconditionsUtil.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.utils;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import org.thymeleaf.util.StringUtils;\n+\n+public class RestPreconditionsUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNTg0NQ==", "bodyText": "As a next step, we should start adding more UTs in the MacManager module.", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404405845", "createdAt": "2020-04-06T21:41:13Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/test/java/com/futurewei/alcor/macmanager/AlcorMacManager/MacManagerApplicationTests.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.futurewei.alcor.macmanager.AlcorMacManager;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+class MacManagerApplicationTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNjEzNg==", "bodyText": "We will need extensive UTs to make sure our mac generation codes cover many corner cases.", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404406136", "createdAt": "2020-04-06T21:41:54Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/MacAddressService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.service;\n+\n+import com.futurewei.alcor.macmanager.dao.MacRedisRepository;\n+import com.futurewei.alcor.macmanager.dao.OuiRedisRepository;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.OuiState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Map;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+@Service\n+public class MacAddressService {\n+\n+    final String DELIMITER1 = \"/\";\n+    final String DELIMITER2 = \":\";\n+    final int KEY_LENGTH = 8;\n+\n+    @Autowired\n+    private OuiRedisRepository ouiRedisRepository;\n+\n+    @Autowired\n+    private MacRedisRepository macRedisRepository;\n+\n+    public MacState getMacStateByMacAddress(String macAddress) {\n+        String key = getKey(macAddress);\n+        macRedisRepository.setKey(key);\n+        MacState macState = macRedisRepository.findItem(macAddress);\n+        return macState;\n+    }\n+\n+    public Map getMacStateByVpcIdPort(String projectId, String vpcId, String portId) {\n+        String hk = makeKey(projectId, vpcId, portId);\n+        String oui = ouiRedisRepository.findOui(hk);\n+        macRedisRepository.setKey(oui);\n+        return macRedisRepository.findMacAddressesbyVpcPort(portId);\n+    }\n+\n+    public MacState createMacState(MacState macState) throws Exception {\n+        String macAddress;\n+        String projectId = macState.getProjectId();\n+        String vpcId = macState.getVpcId();\n+        String portId = macState.getPortId();\n+        String oui = generateOui(projectId, vpcId);\n+        String nic = generateNic(oui, projectId, vpcId, portId);\n+        macAddress = oui + DELIMITER2 + nic;\n+        macState.setMacAddress(macAddress);\n+        return macState;\n+    }\n+\n+    private String generateOui(String projectId, String vpcId) {\n+        long randomOui;\n+        String hk = projectId + DELIMITER1 + vpcId;\n+        String oui = ouiRedisRepository.findOui(hk);\n+        if (oui == null) {\n+            while (oui == null) {\n+                randomOui = ThreadLocalRandom.current().nextLong(0, 2 ^ 24);\n+                String ouiTemp = hexToMac(Long.toHexString(randomOui));\n+                if (macRedisRepository.exisingOui(ouiTemp) == false)\n+                    oui = ouiTemp;\n+            }\n+            ouiRedisRepository.addItem(new OuiState(projectId + DELIMITER1 + vpcId, oui));\n+        }\n+        return oui;\n+    }\n+\n+    private String generateNic(String oui, String projectId, String vpcId, String portId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNjY4MQ==", "bodyText": "If multiple clients try to allocate mac addresses, what is the current concurrency handling at mac manager?", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404406681", "createdAt": "2020-04-06T21:43:09Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/exception/UniquenessViolationException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.exception;\n+\n+public class UniquenessViolationException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6316b456a7398ce2a74e0eb9a8992c4cd436bb9", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/f6316b456a7398ce2a74e0eb9a8992c4cd436bb9", "committedDate": "2020-04-06T22:10:44Z", "message": "[Microservices] Mac address manager - APIs create, get, delete"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjQ5Nzkz", "url": "https://github.com/futurewei-cloud/alcor/pull/147#pullrequestreview-388649793", "createdAt": "2020-04-06T22:02:07Z", "commit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjowMjowN1rOGBrjiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjozNTo1NVrOGBsavg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTM3MQ==", "bodyText": "do we really need this 2 lines since we do not exclude the src previously", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404415371", "createdAt": "2020-04-06T22:02:07Z", "author": {"login": "haboy52581"}, "path": "services/mac_manager/.gitignore", "diffHunk": "@@ -0,0 +1,31 @@\n+HELP.md\n+target/\n+!.mvn/wrapper/maven-wrapper.jar\n+!**/src/main/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTc5Mg==", "bodyText": "should we extract the common part to constant since the next static final are mostly the same", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404415792", "createdAt": "2020-04-06T22:03:11Z", "author": {"login": "haboy52581"}, "path": "services/mac_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNjQ0NA==", "bodyText": "please avoid using System.out , maybe we could try using spring boot logging Logger logger = LoggerFactory.getLogger(MavenWrapperDownloader .class); so that it would has more options to do different level print", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404416444", "createdAt": "2020-04-06T22:04:30Z", "author": {"login": "haboy52581"}, "path": "services/mac_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNjkzNg==", "bodyText": "please using log error", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404416936", "createdAt": "2020-04-06T22:05:35Z", "author": {"login": "haboy52581"}, "path": "services/mac_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...\n+                }\n+            }\n+        }\n+        System.out.println(\"- Downloading from: \" + url);\n+\n+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n+        if(!outputFile.getParentFile().exists()) {\n+            if(!outputFile.getParentFile().mkdirs()) {\n+                System.out.println(\n+                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n+            }\n+        }\n+        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n+        try {\n+            downloadFileFromURL(url, outputFile);\n+            System.out.println(\"Done\");\n+            System.exit(0);\n+        } catch (Throwable e) {\n+            System.out.println(\"- Error downloading\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMDI1Nw==", "bodyText": "should we use Optional in jdk8 to avoid the null pointer check?", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404420257", "createdAt": "2020-04-06T22:13:19Z", "author": {"login": "haboy52581"}, "path": "services/mac_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...\n+                }\n+            }\n+        }\n+        System.out.println(\"- Downloading from: \" + url);\n+\n+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n+        if(!outputFile.getParentFile().exists()) {\n+            if(!outputFile.getParentFile().mkdirs()) {\n+                System.out.println(\n+                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n+            }\n+        }\n+        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n+        try {\n+            downloadFileFromURL(url, outputFile);\n+            System.out.println(\"Done\");\n+            System.exit(0);\n+        } catch (Throwable e) {\n+            System.out.println(\"- Error downloading\");\n+            e.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n+        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMDgxNA==", "bodyText": "we should add try catch instead of throwing one exception to get more detail control during exception", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404420814", "createdAt": "2020-04-06T22:14:32Z", "author": {"login": "haboy52581"}, "path": "services/mac_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...\n+                }\n+            }\n+        }\n+        System.out.println(\"- Downloading from: \" + url);\n+\n+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n+        if(!outputFile.getParentFile().exists()) {\n+            if(!outputFile.getParentFile().mkdirs()) {\n+                System.out.println(\n+                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n+            }\n+        }\n+        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n+        try {\n+            downloadFileFromURL(url, outputFile);\n+            System.out.println(\"Done\");\n+            System.exit(0);\n+        } catch (Throwable e) {\n+            System.out.println(\"- Error downloading\");\n+            e.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n+        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\n+            String username = System.getenv(\"MVNW_USERNAME\");\n+            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\n+            Authenticator.setDefault(new Authenticator() {\n+                @Override\n+                protected PasswordAuthentication getPasswordAuthentication() {\n+                    return new PasswordAuthentication(username, password);\n+                }\n+            });\n+        }\n+        URL website = new URL(urlString);\n+        ReadableByteChannel rbc;\n+        rbc = Channels.newChannel(website.openStream());\n+        FileOutputStream fos = new FileOutputStream(destination);\n+        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMTg1MQ==", "bodyText": "please only import the needed one", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404421851", "createdAt": "2020-04-06T22:17:08Z", "author": {"login": "haboy52581"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/controller/MacController.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.controller;\n+\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.MacStateJson;\n+import com.futurewei.alcor.macmanager.service.MacAddressService;\n+import com.futurewei.alcor.macmanager.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMjc4Ng==", "bodyText": "I think we should detail which kind of exception in the list and add error log during exception happening, also why we catch then throw the same one without any operation?", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404422786", "createdAt": "2020-04-06T22:19:20Z", "author": {"login": "haboy52581"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/controller/MacController.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.controller;\n+\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.MacStateJson;\n+import com.futurewei.alcor.macmanager.service.MacAddressService;\n+import com.futurewei.alcor.macmanager.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.Map;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+@RestController\n+public class MacController {\n+\n+    final String DELIMITER = \"/\";\n+\n+    @Autowired\n+    private MacAddressService service;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/macaddress/{macaddress}\", \"/v4/macaddress/{macaddress}\"})\n+    public MacStateJson getMacStateByMacAddress(@PathVariable String macaddress) throws Exception {\n+\n+        MacState macState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(macaddress);\n+            RestPreconditionsUtil.verifyResourceFound(macaddress);\n+            macState = this.service.getMacStateByMacAddress(macaddress);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (macState == null) {\n+            //TODO: REST error code\n+            return new MacStateJson();\n+        }\n+        return new MacStateJson(macState);\n+    }\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/port/{portid}\", \"/v4/{projectid}/vpcs/{vpcid}/port/{portid}\"})\n+    public MacStateJson getMacStateByVpcIdPort(@PathVariable String projectid, @PathVariable String vpcid, @PathVariable String portid) throws Exception {\n+\n+        MacState macState = null;\n+        Map map = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+            RestPreconditionsUtil.verifyResourceFound(portid);\n+            map = service.getMacStateByVpcIdPort(projectid, vpcid, portid);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (macState == null) {\n+            //TODO: REST error code\n+            return new MacStateJson();\n+        }\n+        return new MacStateJson(macState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/mac\", \"/v4/mac\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public MacStateJson createMacState(@RequestBody MacStateJson resource) throws Exception {\n+        MacState macState = null;\n+\n+        try {\n+            MacState inMacState = resource.getMacState();\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(inMacState);\n+            macState = service.createMacState(inMacState);\n+            if (macState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+        } catch (ParameterNullOrEmptyException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMzA3Mw==", "bodyText": "I think we should apply on the same code format to all ines, e.g line 75 and here why has different space line", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404423073", "createdAt": "2020-04-06T22:20:02Z", "author": {"login": "haboy52581"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/dao/MacRedisRepository.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.dao;\n+\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.common.repo.ICacheRepository;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.redis.core.HashOperations;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+@Repository\n+public class MacRedisRepository implements ICacheRepository<MacState> {\n+\n+    private String KEY;\n+\n+    private RedisTemplate<String, MacState> redisTemplate;\n+\n+    private HashOperations hashOperations;\n+\n+    @Autowired\n+    public MacRedisRepository(RedisTemplate<String, MacState> redisTemplate) {\n+\n+        this.redisTemplate = redisTemplate;\n+    }\n+\n+    @PostConstruct\n+    private void init() {\n+        hashOperations = redisTemplate.opsForHash();\n+    }\n+\n+    @Override\n+    public MacState findItem(String id) {\n+\n+        return (MacState) hashOperations.get(KEY, id);\n+    }\n+\n+    @Override\n+    public Map findAllItems() {\n+        return hashOperations.entries(KEY);\n+    }\n+\n+    @Override\n+    public void addItem(MacState newItem) {\n+        Logger logger = LoggerFactory.getLogger();\n+        logger.log(Level.INFO, \"mac address:\" + newItem.getMacAddress());\n+        hashOperations.put(KEY, newItem.getMacAddress(), newItem);\n+    }\n+\n+    @Override\n+    public void deleteItem(String id) {\n+        hashOperations.delete(KEY, id);\n+    }\n+\n+    public Map findMacAddressesbyVpcPort(String portId) {\n+        return null;\n+    }\n+\n+    public MacState findMac(String id) {\n+        return (MacState) hashOperations.get(KEY, id);\n+    }\n+\n+    public void setKey(String key) {\n+        KEY = key;\n+    }\n+\n+    public boolean exisingOui(String oui) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMzQ4Mw==", "bodyText": "why we need space line sometime?", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404423483", "createdAt": "2020-04-06T22:21:03Z", "author": {"login": "haboy52581"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/dao/OuiRedisRepository.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.dao;\n+\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.common.repo.ICacheRepository;\n+import com.futurewei.alcor.macmanager.entity.OuiState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.redis.core.HashOperations;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+@Repository\n+public class OuiRedisRepository implements ICacheRepository<OuiState> {\n+\n+    private static final String KEY = \"OuiState\";\n+\n+    private RedisTemplate<String, String> redisTemplate;\n+\n+    private HashOperations hashOperations;\n+\n+    @Autowired\n+    public OuiRedisRepository(RedisTemplate<String, String> redisTemplate) {\n+        this.redisTemplate = redisTemplate;\n+    }\n+\n+    @PostConstruct\n+    private void init() {\n+        hashOperations = redisTemplate.opsForHash();\n+    }\n+\n+    @Override\n+    public OuiState findItem(String id) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyNDU0MA==", "bodyText": "is there any sample input/output here to make people easy to understand the data format?", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404424540", "createdAt": "2020-04-06T22:23:18Z", "author": {"login": "haboy52581"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/MacAddressService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.service;\n+\n+import com.futurewei.alcor.macmanager.dao.MacRedisRepository;\n+import com.futurewei.alcor.macmanager.dao.OuiRedisRepository;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.OuiState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Map;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+@Service\n+public class MacAddressService {\n+\n+    final String DELIMITER1 = \"/\";\n+    final String DELIMITER2 = \":\";\n+    final int KEY_LENGTH = 8;\n+\n+    @Autowired\n+    private OuiRedisRepository ouiRedisRepository;\n+\n+    @Autowired\n+    private MacRedisRepository macRedisRepository;\n+\n+    public MacState getMacStateByMacAddress(String macAddress) {\n+        String key = getKey(macAddress);\n+        macRedisRepository.setKey(key);\n+        MacState macState = macRedisRepository.findItem(macAddress);\n+        return macState;\n+    }\n+\n+    public Map getMacStateByVpcIdPort(String projectId, String vpcId, String portId) {\n+        String hk = makeKey(projectId, vpcId, portId);\n+        String oui = ouiRedisRepository.findOui(hk);\n+        macRedisRepository.setKey(oui);\n+        return macRedisRepository.findMacAddressesbyVpcPort(portId);\n+    }\n+\n+    public MacState createMacState(MacState macState) throws Exception {\n+        String macAddress;\n+        String projectId = macState.getProjectId();\n+        String vpcId = macState.getVpcId();\n+        String portId = macState.getPortId();\n+        String oui = generateOui(projectId, vpcId);\n+        String nic = generateNic(oui, projectId, vpcId, portId);\n+        macAddress = oui + DELIMITER2 + nic;\n+        macState.setMacAddress(macAddress);\n+        return macState;\n+    }\n+\n+    private String generateOui(String projectId, String vpcId) {\n+        long randomOui;\n+        String hk = projectId + DELIMITER1 + vpcId;\n+        String oui = ouiRedisRepository.findOui(hk);\n+        if (oui == null) {\n+            while (oui == null) {\n+                randomOui = ThreadLocalRandom.current().nextLong(0, 2 ^ 24);\n+                String ouiTemp = hexToMac(Long.toHexString(randomOui));\n+                if (macRedisRepository.exisingOui(ouiTemp) == false)\n+                    oui = ouiTemp;\n+            }\n+            ouiRedisRepository.addItem(new OuiState(projectId + DELIMITER1 + vpcId, oui));\n+        }\n+        return oui;\n+    }\n+\n+    private String generateNic(String oui, String projectId, String vpcId, String portId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyOTUwMg==", "bodyText": "I know this is commented out but do we really want to show our password to the public", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404429502", "createdAt": "2020-04-06T22:35:55Z", "author": {"login": "haboy52581"}, "path": "services/mac_manager/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,20 @@\n+#Machine configuration\n+#VPCManager.machine.config=classpath:.\\\\config\\\\machine.json\n+#Connecton configuration\n+spring.redis.host=127.0.0.1\n+# Please check redis pod service cluster IP\n+#spring.redis.host=10.99.0.27\n+spring.redis.port=6379\n+apache.kafka.address=172.17.0.1:9092\n+#Logging configuration\n+logging.level.root=info\n+logging.level.org.springframework.web=info\n+logging.file.path=.\n+logging.type=file\n+#Ignite configuration\n+#ignite.host=localhost\n+#ignite.port=10800\n+#ignite.key-store-path=F:\\\\work\\\\alcor\\\\git\\\\chenpp\\\\alcor\\\\src\\\\resources\\\\keystore.jks\n+#ignite.key-store-password=123456\n+#ignite.trust-store-path=F:\\\\work\\\\alcor\\\\git\\\\chenpp\\\\alcor\\\\src\\\\resources\\\\truststore.jks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4b56046bc4480a83cfc4c90f4ab28fbf8a6009a", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/e4b56046bc4480a83cfc4c90f4ab28fbf8a6009a", "committedDate": "2020-04-07T16:15:26Z", "message": "[Microservices] Mac manager - update pom file and lib files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "336e49951d5c8139cf18d02832a79c5348760e37", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/336e49951d5c8139cf18d02832a79c5348760e37", "committedDate": "2020-04-08T09:12:46Z", "message": "[Microservies] Macmanager document update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "969841bd85896316dc6ecaebeaa043d49cd68179", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/969841bd85896316dc6ecaebeaa043d49cd68179", "committedDate": "2020-04-08T19:49:58Z", "message": "Revert \"[Microservies] Macmanager document update\"\n\nThis reverts commit 336e49951d5c8139cf18d02832a79c5348760e37."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55d9c5905edc138cdb9b0220754c8115536922ef", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/55d9c5905edc138cdb9b0220754c8115536922ef", "committedDate": "2020-04-09T00:30:55Z", "message": "update macmanager design such as api and data structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "677cf6e23b6ac72ed53c5fb320400a5ab41aa511", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/677cf6e23b6ac72ed53c5fb320400a5ab41aa511", "committedDate": "2020-04-09T05:20:02Z", "message": "Add design sketch for new requirements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "449d6e691ab8671cf472d5416d37f557889b99fb", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/449d6e691ab8671cf472d5416d37f557889b99fb", "committedDate": "2020-04-09T05:57:43Z", "message": "Update mac manager design doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5886a7797013af2b20a41104926ab5946a98e8ac", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5886a7797013af2b20a41104926ab5946a98e8ac", "committedDate": "2020-04-10T02:21:27Z", "message": "[Microservices] Mac manager - updated unit test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feb5a2058bff82254436c14d98bacc8446c84891", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/feb5a2058bff82254436c14d98bacc8446c84891", "committedDate": "2020-04-10T02:27:09Z", "message": "[Microservices] Mac manager - updated unit test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5dd02172a3f19199546623325a088abce14442f", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c5dd02172a3f19199546623325a088abce14442f", "committedDate": "2020-04-10T02:28:52Z", "message": "Merge branch 'eunju/macmanager' of https://github.com/kimeunju108/alcor into eunju/macmanager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "391ba8314e4af6f21f8342c704a40c7fe779e501", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/391ba8314e4af6f21f8342c704a40c7fe779e501", "committedDate": "2020-04-10T15:28:08Z", "message": "Merge from featurewei/alcor master and resolve conflicts on macmanager doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjEzNzk4", "url": "https://github.com/futurewei-cloud/alcor/pull/147#pullrequestreview-391613798", "createdAt": "2020-04-10T19:14:27Z", "commit": {"oid": "391ba8314e4af6f21f8342c704a40c7fe779e501"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToxNDoyN1rOGEDXFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToxNDoyN1rOGEDXFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMjU1MA==", "bodyText": "I think we could remove some of the dependencies here, for example apache.kafka, gRPC etc.", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r406902550", "createdAt": "2020-04-10T19:14:27Z", "author": {"login": "xieus"}, "path": "services/mac_manager/pom.xml", "diffHunk": "@@ -0,0 +1,100 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.2.6.RELEASE</version>\n+\t\t<relativePath/> <!-- lookup parent from repository -->\n+\t</parent>\n+\t<groupId>com.futurewei.alcor.macmanager</groupId>\n+\t<artifactId>AlcorMacManager</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<name>AlcorMacManager</name>\n+\t<description>Virtual Mac Address Manager Module</description>\n+\n+\t<properties>\n+\t\t<java.version>1.8</java.version>\n+\t</properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.kafka</groupId>\n+\t\t\t<artifactId>kafka-clients</artifactId>\n+\t\t\t<version>2.3.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.google.protobuf</groupId>\n+\t\t\t<artifactId>protobuf-java</artifactId>\n+\t\t\t<version>3.8.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<version>1.18.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.commons</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "391ba8314e4af6f21f8342c704a40c7fe779e501"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62957d39e628a69f365dcd6c0fe2fd752985ff22", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/62957d39e628a69f365dcd6c0fe2fd752985ff22", "committedDate": "2020-04-11T01:41:14Z", "message": "[Microservices] Mac manager - updated pictures and unit test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "935e57f666a0222d90b34cb4e8096f516ed08a13", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/935e57f666a0222d90b34cb4e8096f516ed08a13", "committedDate": "2020-04-13T18:04:14Z", "message": "[Microservices] Mac manager - added mac range and mac address pool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d1f37abb6ffa6ab0aa1f44c1a7a4b3b3f850585", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/4d1f37abb6ffa6ab0aa1f44c1a7a4b3b3f850585", "committedDate": "2020-04-13T18:06:27Z", "message": "Merge branch 'eunju/macmanager' of https://github.com/kimeunju108/alcor into eunju/macmanager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca953aec5d0bb6f7736e90a20a2d699ed0df85b3", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ca953aec5d0bb6f7736e90a20a2d699ed0df85b3", "committedDate": "2020-04-14T00:10:06Z", "message": "Merge branch 'master' into eunju/macmanager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTEyODcz", "url": "https://github.com/futurewei-cloud/alcor/pull/147#pullrequestreview-392512873", "createdAt": "2020-04-13T23:49:15Z", "commit": {"oid": "4d1f37abb6ffa6ab0aa1f44c1a7a4b3b3f850585"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzo0OToxNVrOGE5JpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo0Njo1N1rOGE6MGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4Mzg0NQ==", "bodyText": "apache.kafka should be deleted as discussed previously.", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407783845", "createdAt": "2020-04-13T23:49:15Z", "author": {"login": "xieus"}, "path": "services/mac_manager/pom.xml", "diffHunk": "@@ -0,0 +1,100 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.2.6.RELEASE</version>\n+\t\t<relativePath/> <!-- lookup parent from repository -->\n+\t</parent>\n+\t<groupId>com.futurewei.alcor.macmanager</groupId>\n+\t<artifactId>AlcorMacManager</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<name>AlcorMacManager</name>\n+\t<description>Virtual Mac Address Manager Module</description>\n+\n+\t<properties>\n+\t\t<java.version>1.8</java.version>\n+\t</properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.kafka</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f37abb6ffa6ab0aa1f44c1a7a4b3b3f850585"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4NDk1NA==", "bodyText": "This deserves a API, instead of \"debug2\" :-)\nHow about /macs/activeranges or similar?", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407784954", "createdAt": "2020-04-13T23:53:19Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/controller/MacController.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.macmanager.entity.MacRange;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.MacStateJson;\n+import com.futurewei.alcor.macmanager.service.MacAddressService;\n+import com.futurewei.alcor.macmanager.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.Vector;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class MacController {\n+\n+    @Autowired\n+    private MacAddressService service;\n+\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/macs/debug\", \"/v4/macs/debug\"})\n+    public MacStateJson getDebug1() throws Exception {\n+        MacState macState = null;\n+\n+        if (macState == null) {\n+            //TODO: REST error code\n+            return new MacStateJson();\n+        }\n+        return new MacStateJson(macState);\n+    }\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/macs/debug2\", \"/v4/macs/debug2\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1f37abb6ffa6ab0aa1f44c1a7a4b3b3f850585"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMDcwOA==", "bodyText": "For MacAddressService, I would suggest to split into two layers, service layer and service impl layer.\nService Layer: Show the interface\nService Impl Layer: Show the implementation of the interface. This design allows different implementations later on.\nOne example of the above design is SubnetManager:\nhttps://github.com/kevin-zhonghao/alcor/tree/feature/route_manager/services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407800708", "createdAt": "2020-04-14T00:46:31Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/MacAddressService.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.service;\n+\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.macmanager.dao.MacPoolRedisRepository;\n+import com.futurewei.alcor.macmanager.dao.MacRangeRedisRepository;\n+import com.futurewei.alcor.macmanager.dao.MacRedisRepository;\n+import com.futurewei.alcor.macmanager.entity.MacAddress;\n+import com.futurewei.alcor.macmanager.entity.MacRange;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Vector;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+@Service\n+public class MacAddressService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca953aec5d0bb6f7736e90a20a2d699ed0df85b3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMDg1Ng==", "bodyText": "Do you mean \"MAC_ADDRESS_LENGTH\u201c?", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407800856", "createdAt": "2020-04-14T00:46:57Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/entity/MacAddress.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+\n+package com.futurewei.alcor.macmanager.entity;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.Data;\n+\n+\n+@Data\n+public class MacAddress {\n+\n+    public static final String MAC_DELIMITER = \"-\";\n+    public static final int NIC_LENGTH = 24;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca953aec5d0bb6f7736e90a20a2d699ed0df85b3"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTMyNjc3", "url": "https://github.com/futurewei-cloud/alcor/pull/147#pullrequestreview-392532677", "createdAt": "2020-04-14T00:51:40Z", "commit": {"oid": "ca953aec5d0bb6f7736e90a20a2d699ed0df85b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo1MTo0MFrOGE6Q2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo1MTo0MFrOGE6Q2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMjA3NA==", "bodyText": "Do we need to verify the post return?", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407802074", "createdAt": "2020-04-14T00:51:40Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/test/java/com/futurewei/alcor/macmanager/controller/MacControllerTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.controller;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.MacStateJson;\n+import com.futurewei.alcor.macmanager.service.MacAddressService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class MacControllerTest {\n+\n+    private static final ObjectMapper om = new ObjectMapper();\n+\n+    public MacState testMacState;\n+    @Autowired\n+    MacAddressService service;\n+    String strTestMac = \"\";\n+    @Autowired\n+    private MockMvc mockMvc;\n+    @MockBean\n+    private MacController mockController;\n+\n+    @Before\n+    public void init() {\n+        MacState macState = new MacState(\"\", \"project1\", \"vpc1\", \"port1\", \"active\");\n+        MacStateJson macStateJson = new MacStateJson(macState);\n+        ObjectMapper objectMapper = new ObjectMapper();\n+\n+        try {\n+            String json = objectMapper.writeValueAsString(macStateJson);\n+            MacState macState2 = service.createMacState(macState);\n+            strTestMac = macState2.getMacAddress();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Test\n+    public void test_index() throws Exception {\n+        this.mockMvc.perform(get(\"/start.html\"))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+    }\n+\n+    @Test\n+    public void test_createMacState() throws Exception {\n+        MacState macState = new MacState(\"\", \"project1\", \"vpc1\", \"port2\", \"active\");\n+        MacStateJson macStateJson = new MacStateJson(macState);\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        String json = objectMapper.writeValueAsString(macStateJson);\n+\n+        System.out.println(json);\n+        MvcResult mvcResult = this.mockMvc.perform(post(\"/macs\")\n+                .content(json)\n+                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n+                .andExpect(status().isCreated())\n+                .andDo(print())\n+                .andReturn();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca953aec5d0bb6f7736e90a20a2d699ed0df85b3"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00e766c97e7fd81ccc018ac94790375165ab462e", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/00e766c97e7fd81ccc018ac94790375165ab462e", "committedDate": "2020-04-14T02:51:06Z", "message": "[Microservices] Mac manager - added macmanager service interface and implemention layer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f44896506e154777b1d2315a89ab050e97bb8a2", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/3f44896506e154777b1d2315a89ab050e97bb8a2", "committedDate": "2020-04-14T02:51:40Z", "message": "Merge branch 'eunju/macmanager' of https://github.com/kimeunju108/alcor into eunju/macmanager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33466fbbf6320d1edf7bfea551d189982f5c5856", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/33466fbbf6320d1edf7bfea551d189982f5c5856", "committedDate": "2020-04-14T11:59:02Z", "message": "[Microservices] Mac manager - add MAC range APIs and MAC allocation activate/deactivate APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f05522a1ca0f1a77e51b25861b90aba70f82f2c", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/6f05522a1ca0f1a77e51b25861b90aba70f82f2c", "committedDate": "2020-04-15T17:36:38Z", "message": "[Microservices] Macmanager - combined activate/deactivate APIs to update API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDc4MTI4", "url": "https://github.com/futurewei-cloud/alcor/pull/147#pullrequestreview-394078128", "createdAt": "2020-04-15T19:38:51Z", "commit": {"oid": "6f05522a1ca0f1a77e51b25861b90aba70f82f2c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d23506232d1f52c4faf9f5f6cf7b6354433405b", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/0d23506232d1f52c4faf9f5f6cf7b6354433405b", "committedDate": "2020-04-15T20:47:13Z", "message": "Fix broken maven CI workflow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTM2ODE4", "url": "https://github.com/futurewei-cloud/alcor/pull/147#pullrequestreview-394136818", "createdAt": "2020-04-15T21:09:10Z", "commit": {"oid": "0d23506232d1f52c4faf9f5f6cf7b6354433405b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ca5df635fa137889458ecd0c37ce15149cbf69d", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/7ca5df635fa137889458ecd0c37ce15149cbf69d", "committedDate": "2020-04-15T21:23:51Z", "message": "[Microservices] MAC manager - update a pom file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2137d4c88ba85bd717e06f2f4eb0422050540c65", "author": {"user": {"login": "kimeunju108", "name": "kimeunju108"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/2137d4c88ba85bd717e06f2f4eb0422050540c65", "committedDate": "2020-04-15T21:24:31Z", "message": "Merge branch 'eunju/macmanager' of https://github.com/kimeunju108/alcor into eunju/macmanager"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2389, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}