{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzOTk4MTg0", "number": 307, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoxMjo1NVrOEQdLyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzozMjozM1rOEQ4COA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkwODI1OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoxMjo1NVrOG0nbkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzowNzo1MlrOG0q6lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTE2OQ==", "bodyText": "Should we add the logic here?\ncidrToFirstIpAndLastIp is used somewhere else that actually asks the first and last Ip, right? If so, then this new logic is going to break codes in those places.\nI think we should have a new method that handles the cut explicitly.", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457825169", "createdAt": "2020-07-21T04:12:55Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -238,6 +239,16 @@ public IpAddrRequest allocateIpAddressForGatewayPort(String subnetId, String cid\n         if (highIp == null || lowIp == null) {\n             return null;\n         }\n+\n+        String[] highIps = highIp.split(\"\\\\.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4MjI2Mw==", "bodyText": "This method is used for creating Ip Address Range, and Ip Address Range may also need this fix, right? let us talk about this.", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457882263", "createdAt": "2020-07-21T07:07:52Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -238,6 +239,16 @@ public IpAddrRequest allocateIpAddressForGatewayPort(String subnetId, String cid\n         if (highIp == null || lowIp == null) {\n             return null;\n         }\n+\n+        String[] highIps = highIp.split(\"\\\\.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTE2OQ=="}, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkwOTEzOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoxMzozMFrOG0ncGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoxMzo0OFrOG0pjPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTMwNw==", "bodyText": "Make it a Constant, as always :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457825307", "createdAt": "2020-07-21T04:13:30Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -238,6 +239,16 @@ public IpAddrRequest allocateIpAddressForGatewayPort(String subnetId, String cid\n         if (highIp == null || lowIp == null) {\n             return null;\n         }\n+\n+        String[] highIps = highIp.split(\"\\\\.\");\n+        String[] lowIps = lowIp.split(\"\\\\.\");\n+        Integer high = Integer.parseInt(highIps[highIps.length - 1]) - 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1OTkwMg==", "bodyText": "sure", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457859902", "createdAt": "2020-07-21T06:13:48Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -238,6 +239,16 @@ public IpAddrRequest allocateIpAddressForGatewayPort(String subnetId, String cid\n         if (highIp == null || lowIp == null) {\n             return null;\n         }\n+\n+        String[] highIps = highIp.split(\"\\\\.\");\n+        String[] lowIps = lowIp.split(\"\\\\.\");\n+        Integer high = Integer.parseInt(highIps[highIps.length - 1]) - 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTMwNw=="}, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkxNDA0OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoxNjoyN1rOG0ne2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxMDo0M1rOG1NABA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNjAxMQ==", "bodyText": "does this actually test the first desired ip and the last desired ip?", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457826011", "createdAt": "2020-07-21T04:16:27Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTests.java", "diffHunk": "@@ -106,6 +106,8 @@ public void createSubnetState_create_pass () throws Exception {\n                 .thenReturn(macResponse);\n         Mockito.when(subnetService.allocateIpAddressForGatewayPort(anyString(), anyString(), anyString()))\n                 .thenReturn(ipAddrRequest);\n+        Mockito.when(subnetService.cidrToFirstIpAndLastIp(UnitTestConfig.cidr))\n+                .thenReturn(new String[2]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4MjgxMQ==", "bodyText": "Nope, this is for the create pass test, we could add a new UT to test the first desired ip and the last desired ip", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457882811", "createdAt": "2020-07-21T07:08:59Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTests.java", "diffHunk": "@@ -106,6 +106,8 @@ public void createSubnetState_create_pass () throws Exception {\n                 .thenReturn(macResponse);\n         Mockito.when(subnetService.allocateIpAddressForGatewayPort(anyString(), anyString(), anyString()))\n                 .thenReturn(ipAddrRequest);\n+        Mockito.when(subnetService.cidrToFirstIpAndLastIp(UnitTestConfig.cidr))\n+                .thenReturn(new String[2]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNjAxMQ=="}, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MDcwOA==", "bodyText": "Cool thanks for the confirmation.", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r458440708", "createdAt": "2020-07-21T23:10:43Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTests.java", "diffHunk": "@@ -106,6 +106,8 @@ public void createSubnetState_create_pass () throws Exception {\n                 .thenReturn(macResponse);\n         Mockito.when(subnetService.allocateIpAddressForGatewayPort(anyString(), anyString(), anyString()))\n                 .thenReturn(ipAddrRequest);\n+        Mockito.when(subnetService.cidrToFirstIpAndLastIp(UnitTestConfig.cidr))\n+                .thenReturn(new String[2]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNjAxMQ=="}, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkxNDgzOnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/config/DefaultValueConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoxNzowMFrOG0nfVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzowOTo0NFrOG0q-Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNjEzMg==", "bodyText": "Let us make it upper case for constant, like MTU.", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457826132", "createdAt": "2020-07-21T04:17:00Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/config/DefaultValueConfig.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.vpcmanager.config;\n+\n+public class DefaultValueConfig {\n+\n+    public static Integer mtu = 1450;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4MzE4Nw==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457883187", "createdAt": "2020-07-21T07:09:44Z", "author": {"login": "kevin-zhonghao"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/config/DefaultValueConfig.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.vpcmanager.config;\n+\n+public class DefaultValueConfig {\n+\n+    public static Integer mtu = 1450;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNjEzMg=="}, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyMzE4OnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMTo1M1rOG0nkFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMTo1M1rOG0nkFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzM1MA==", "bodyText": "Recommend to rename it to addSubnetIdToVpcState", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457827350", "createdAt": "2020-07-21T04:21:53Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java", "diffHunk": "@@ -307,4 +317,50 @@ public Map getVpcCountAndAllVpcStates() throws CacheException {\n \n         return result;\n     }\n+\n+    /**\n+     * Updates a network with subnet id\n+     * @param projectid\n+     * @param vpcid\n+     * @param subnetid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/subnets/{subnetid}\"})\n+    public VpcWebJson updateVpcStateWithSubnetId(@PathVariable String projectid, @PathVariable String vpcid, @PathVariable String subnetid) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyNTczOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMzoyMlrOG0nlkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoxMDozOFrOG0q_0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzcyOA==", "bodyText": "Recommend rename it to addSubnetIdToVpc", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457827728", "createdAt": "2020-07-21T04:23:22Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -282,4 +293,15 @@ public boolean verifyCidrBlock(String cidr) throws FallbackException {\n \n     }\n \n+    @Override\n+    public void updateToVpcWithSubnetId(String subnetId, String projectId, String vpcId) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4MzYwMg==", "bodyText": "NP", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457883602", "createdAt": "2020-07-21T07:10:38Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java", "diffHunk": "@@ -282,4 +293,15 @@ public boolean verifyCidrBlock(String cidr) throws FallbackException {\n \n     }\n \n+    @Override\n+    public void updateToVpcWithSubnetId(String subnetId, String projectId, String vpcId) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzcyOA=="}, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyNjkyOnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/VpcServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyNDowNVrOG0nmSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoxMToyNVrOG0rBLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzkxNQ==", "bodyText": "Rename it to allocateSegmentForNetwork", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457827915", "createdAt": "2020-07-21T04:24:05Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/VpcServiceImpl.java", "diffHunk": "@@ -34,4 +42,47 @@ public RouteWebJson getRoute(String vpcId, VpcEntity vpcState) {\n         RouteWebJson response = restTemplate.postForObject(routeManagerServiceUrl, request, RouteWebJson.class);\n         return response;\n     }\n+\n+    /**\n+     * Allocate a segment for the network\n+     * @param vpcEntity\n+     * @return\n+     * @throws Exception\n+     */\n+    @Override\n+    public VpcEntity allocateASegmentForNetwork(VpcEntity vpcEntity) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4Mzk1MA==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457883950", "createdAt": "2020-07-21T07:11:25Z", "author": {"login": "kevin-zhonghao"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/VpcServiceImpl.java", "diffHunk": "@@ -34,4 +42,47 @@ public RouteWebJson getRoute(String vpcId, VpcEntity vpcState) {\n         RouteWebJson response = restTemplate.postForObject(routeManagerServiceUrl, request, RouteWebJson.class);\n         return response;\n     }\n+\n+    /**\n+     * Allocate a segment for the network\n+     * @param vpcEntity\n+     * @return\n+     * @throws Exception\n+     */\n+    @Override\n+    public VpcEntity allocateASegmentForNetwork(VpcEntity vpcEntity) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzkxNQ=="}, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyOTI0OnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/VpcServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyNTozMVrOG0nnpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyNTozMVrOG0nnpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyODI2MQ==", "bodyText": "Consider to merge if(networkType=null) and else if(networkType==VxLan)", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457828261", "createdAt": "2020-07-21T04:25:31Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/Impl/VpcServiceImpl.java", "diffHunk": "@@ -34,4 +42,47 @@ public RouteWebJson getRoute(String vpcId, VpcEntity vpcState) {\n         RouteWebJson response = restTemplate.postForObject(routeManagerServiceUrl, request, RouteWebJson.class);\n         return response;\n     }\n+\n+    /**\n+     * Allocate a segment for the network\n+     * @param vpcEntity\n+     * @return\n+     * @throws Exception\n+     */\n+    @Override\n+    public VpcEntity allocateASegmentForNetwork(VpcEntity vpcEntity) throws Exception {\n+        String networkTypeId = UUID.randomUUID().toString();\n+        if (vpcEntity == null) {\n+            return vpcEntity;\n+        }\n+\n+        String networkType = vpcEntity.getNetworkType();\n+        if (networkType == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkzMzM0OnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/utils/VpcManagementUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyODoxNlrOG0nqMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyODoxNlrOG0nqMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyODkxNA==", "bodyText": "Add //TDDO in the code to remind ourselves and community that the current logic will be updated and the plan", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r457828914", "createdAt": "2020-07-21T04:28:16Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/utils/VpcManagementUtil.java", "diffHunk": "@@ -113,6 +116,12 @@ public static VpcEntity configureNetworkDefaultParameters (VpcEntity response) {\n             response.setStatus(NetworkStatusEnum.ACTIVE.getNetworkStatus());\n         }\n \n+        // mtu", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96fa229d4faa15dd90857b7cdc99f771c9369412"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDY0NzE2OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/config/ConstantsConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowMjoxNVrOG1LaOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowMjoxNVrOG1LaOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNDY1MQ==", "bodyText": "Thank you for putting those variables into a configuration file.", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r458414651", "createdAt": "2020-07-21T22:02:15Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/config/ConstantsConfig.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.subnet.config;\n+\n+public class ConstantsConfig {\n+\n+    public static int HighIpInterval = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "612b6e90d2d785c033d471921a9eea568ad29d7e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTI1NjgxOnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/SubnetManagementUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzowMjoyMFrOG1Q99Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDozMzo1M1rOG1SWfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwNTcxNw==", "bodyText": "I would recommend to rename it to \"checkGatewayIpInputSupported\". This is because if an input is NULL or empty, although they are not \"valid\" IPs, but they are valid input value for the GW IP parameter.", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r458505717", "createdAt": "2020-07-22T03:02:20Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/SubnetManagementUtil.java", "diffHunk": "@@ -66,4 +76,134 @@ public static boolean checkSubnetRequestResourceIsValid(SubnetRequestWebJson res\n         return true;\n     }\n \n+    public static String setGatewayIpValue(String gatewayIp, String cidr) {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return null;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            SubnetUtils utils = new SubnetUtils(cidr);\n+            String lowIp = utils.getInfo().getLowAddress();\n+            if (lowIp == null) {\n+                return null;\n+            }\n+\n+            String[] lowIps = lowIp.split(\"\\\\.\");\n+            Integer low = Integer.parseInt(lowIps[lowIps.length - 1]) + ConstantsConfig.BaseInterval;\n+            lowIps[lowIps.length - 1] = String.valueOf(low);\n+            lowIp = String.join(\".\", lowIps);\n+            return lowIp;\n+        }\n+\n+        return gatewayIp;\n+\n+    }\n+\n+    public static boolean checkGatewayIpIsValid(String gatewayIp, String cidr) throws ParameterUnexpectedValueException, FallbackException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50e8dab4a01ff5c1c307a60eba8e179d16dd8032"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyODM4MQ==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r458528381", "createdAt": "2020-07-22T04:33:53Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/SubnetManagementUtil.java", "diffHunk": "@@ -66,4 +76,134 @@ public static boolean checkSubnetRequestResourceIsValid(SubnetRequestWebJson res\n         return true;\n     }\n \n+    public static String setGatewayIpValue(String gatewayIp, String cidr) {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return null;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            SubnetUtils utils = new SubnetUtils(cidr);\n+            String lowIp = utils.getInfo().getLowAddress();\n+            if (lowIp == null) {\n+                return null;\n+            }\n+\n+            String[] lowIps = lowIp.split(\"\\\\.\");\n+            Integer low = Integer.parseInt(lowIps[lowIps.length - 1]) + ConstantsConfig.BaseInterval;\n+            lowIps[lowIps.length - 1] = String.valueOf(low);\n+            lowIp = String.join(\".\", lowIps);\n+            return lowIp;\n+        }\n+\n+        return gatewayIp;\n+\n+    }\n+\n+    public static boolean checkGatewayIpIsValid(String gatewayIp, String cidr) throws ParameterUnexpectedValueException, FallbackException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwNTcxNw=="}, "originalCommit": {"oid": "50e8dab4a01ff5c1c307a60eba8e179d16dd8032"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTI4MDc2OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/SubnetManagementUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzoxNzowNVrOG1RL_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzoxNzowNVrOG1RL_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUwOTMwOA==", "bodyText": "Very decent comment!", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r458509308", "createdAt": "2020-07-22T03:17:05Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/SubnetManagementUtil.java", "diffHunk": "@@ -66,4 +76,134 @@ public static boolean checkSubnetRequestResourceIsValid(SubnetRequestWebJson res\n         return true;\n     }\n \n+    public static String setGatewayIpValue(String gatewayIp, String cidr) {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return null;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            SubnetUtils utils = new SubnetUtils(cidr);\n+            String lowIp = utils.getInfo().getLowAddress();\n+            if (lowIp == null) {\n+                return null;\n+            }\n+\n+            String[] lowIps = lowIp.split(\"\\\\.\");\n+            Integer low = Integer.parseInt(lowIps[lowIps.length - 1]) + ConstantsConfig.BaseInterval;\n+            lowIps[lowIps.length - 1] = String.valueOf(low);\n+            lowIp = String.join(\".\", lowIps);\n+            return lowIp;\n+        }\n+\n+        return gatewayIp;\n+\n+    }\n+\n+    public static boolean checkGatewayIpIsValid(String gatewayIp, String cidr) throws ParameterUnexpectedValueException, FallbackException {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return true;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            return true;\n+        }\n+\n+        // gatewayIP is invalid\n+        if (!checkIpIsValid(gatewayIp)) {\n+            return false;\n+        }\n+\n+        // gatewayIP format is valid but it used the lowest base ip (xx.xx.xx.0) case and use the highest base ip (xx.xx.xx.255))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50e8dab4a01ff5c1c307a60eba8e179d16dd8032"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTI5MDg0OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/SubnetManagementUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzoyMzowOFrOG1RR1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDozNDo1NlrOG1SXqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxMDgwNQ==", "bodyText": "Just make sure long is sufficient here.", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r458510805", "createdAt": "2020-07-22T03:23:08Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/SubnetManagementUtil.java", "diffHunk": "@@ -66,4 +76,134 @@ public static boolean checkSubnetRequestResourceIsValid(SubnetRequestWebJson res\n         return true;\n     }\n \n+    public static String setGatewayIpValue(String gatewayIp, String cidr) {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return null;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            SubnetUtils utils = new SubnetUtils(cidr);\n+            String lowIp = utils.getInfo().getLowAddress();\n+            if (lowIp == null) {\n+                return null;\n+            }\n+\n+            String[] lowIps = lowIp.split(\"\\\\.\");\n+            Integer low = Integer.parseInt(lowIps[lowIps.length - 1]) + ConstantsConfig.BaseInterval;\n+            lowIps[lowIps.length - 1] = String.valueOf(low);\n+            lowIp = String.join(\".\", lowIps);\n+            return lowIp;\n+        }\n+\n+        return gatewayIp;\n+\n+    }\n+\n+    public static boolean checkGatewayIpIsValid(String gatewayIp, String cidr) throws ParameterUnexpectedValueException, FallbackException {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return true;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            return true;\n+        }\n+\n+        // gatewayIP is invalid\n+        if (!checkIpIsValid(gatewayIp)) {\n+            return false;\n+        }\n+\n+        // gatewayIP format is valid but it used the lowest base ip (xx.xx.xx.0) case and use the highest base ip (xx.xx.xx.255))\n+        boolean isCidrValid = subnetService.verifyCidrBlock(cidr);\n+        if (!isCidrValid) {\n+            throw new FallbackException(\"cidr is invalid : \" + cidr);\n+        }\n+\n+        String[] ips = subnetService.cidrToFirstIpAndLastIp(cidr);\n+        if (ips == null || ips.length != 2) {\n+            throw new FallbackException(\"cidr transfer to first/last ip failed\");\n+        }\n+\n+        if (!checkIpIsInRange(gatewayIp, ips[0], ips[1])) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean checkGatewayIpIsInAllocatedRange(String gatewayIp, String cidr) {\n+        if (gatewayIp == null) {\n+            return false;\n+        }\n+        if (gatewayIp.length() == 0) {\n+            return false;\n+        }\n+        String[] ips = subnetService.cidrToFirstIpAndLastIp(cidr);\n+\n+        long gatewayIpNum = getIpNum(gatewayIp);\n+        long firstIpNum = getIpNum(ips[0]);\n+        long lastIpNum = getIpNum(ips[1]);\n+\n+        if (gatewayIpNum < firstIpNum || gatewayIpNum > lastIpNum) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean checkIpIsValid(String gatewayIp) {\n+        if (gatewayIp == null) {\n+            return false;\n+        }\n+        String[] ips = gatewayIp.split(\"\\\\.\");\n+\n+        if (ips == null || ips.length != 4) {\n+            return false;\n+        }\n+\n+        for (String segment : ips) {\n+            char[] chars = segment.toCharArray();\n+            for (int i = 0; i < chars.length; i ++) {\n+                char c = chars[i];\n+                if (c < '0' || c > '9') {\n+                    return false;\n+                }\n+            }\n+            Integer num = Integer.parseInt(segment);\n+            if (num < 0 || num > 255) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static boolean checkIpIsInRange(String gatewayIp, String firstIp, String lastIp) {\n+        boolean isInnerIp = false;\n+\n+        long gatewayIpNum = getIpNum(gatewayIp);\n+        long firstIpNum = getIpNum(firstIp);\n+        long lastIpNum = getIpNum(lastIp);\n+\n+        isInnerIp = isInner(gatewayIpNum, firstIpNum - ConstantsConfig.LowIpInterval, lastIpNum + ConstantsConfig.HighIpInterval);\n+\n+        return isInnerIp;\n+    }\n+\n+    private static long getIpNum(String ipAddress) {\n+        String[] ip = ipAddress.split(\"\\\\.\");\n+        long a = Integer.parseInt(ip[0]);\n+        long b = Integer.parseInt(ip[1]);\n+        long c = Integer.parseInt(ip[2]);\n+        long d = Integer.parseInt(ip[3]);\n+        long ipNum = a * 256 * 256 * 256 + b * 256 * 256 + c * 256 + d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50e8dab4a01ff5c1c307a60eba8e179d16dd8032"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyODY4MQ==", "bodyText": "yes", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r458528681", "createdAt": "2020-07-22T04:34:56Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/SubnetManagementUtil.java", "diffHunk": "@@ -66,4 +76,134 @@ public static boolean checkSubnetRequestResourceIsValid(SubnetRequestWebJson res\n         return true;\n     }\n \n+    public static String setGatewayIpValue(String gatewayIp, String cidr) {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return null;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            SubnetUtils utils = new SubnetUtils(cidr);\n+            String lowIp = utils.getInfo().getLowAddress();\n+            if (lowIp == null) {\n+                return null;\n+            }\n+\n+            String[] lowIps = lowIp.split(\"\\\\.\");\n+            Integer low = Integer.parseInt(lowIps[lowIps.length - 1]) + ConstantsConfig.BaseInterval;\n+            lowIps[lowIps.length - 1] = String.valueOf(low);\n+            lowIp = String.join(\".\", lowIps);\n+            return lowIp;\n+        }\n+\n+        return gatewayIp;\n+\n+    }\n+\n+    public static boolean checkGatewayIpIsValid(String gatewayIp, String cidr) throws ParameterUnexpectedValueException, FallbackException {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return true;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            return true;\n+        }\n+\n+        // gatewayIP is invalid\n+        if (!checkIpIsValid(gatewayIp)) {\n+            return false;\n+        }\n+\n+        // gatewayIP format is valid but it used the lowest base ip (xx.xx.xx.0) case and use the highest base ip (xx.xx.xx.255))\n+        boolean isCidrValid = subnetService.verifyCidrBlock(cidr);\n+        if (!isCidrValid) {\n+            throw new FallbackException(\"cidr is invalid : \" + cidr);\n+        }\n+\n+        String[] ips = subnetService.cidrToFirstIpAndLastIp(cidr);\n+        if (ips == null || ips.length != 2) {\n+            throw new FallbackException(\"cidr transfer to first/last ip failed\");\n+        }\n+\n+        if (!checkIpIsInRange(gatewayIp, ips[0], ips[1])) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean checkGatewayIpIsInAllocatedRange(String gatewayIp, String cidr) {\n+        if (gatewayIp == null) {\n+            return false;\n+        }\n+        if (gatewayIp.length() == 0) {\n+            return false;\n+        }\n+        String[] ips = subnetService.cidrToFirstIpAndLastIp(cidr);\n+\n+        long gatewayIpNum = getIpNum(gatewayIp);\n+        long firstIpNum = getIpNum(ips[0]);\n+        long lastIpNum = getIpNum(ips[1]);\n+\n+        if (gatewayIpNum < firstIpNum || gatewayIpNum > lastIpNum) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean checkIpIsValid(String gatewayIp) {\n+        if (gatewayIp == null) {\n+            return false;\n+        }\n+        String[] ips = gatewayIp.split(\"\\\\.\");\n+\n+        if (ips == null || ips.length != 4) {\n+            return false;\n+        }\n+\n+        for (String segment : ips) {\n+            char[] chars = segment.toCharArray();\n+            for (int i = 0; i < chars.length; i ++) {\n+                char c = chars[i];\n+                if (c < '0' || c > '9') {\n+                    return false;\n+                }\n+            }\n+            Integer num = Integer.parseInt(segment);\n+            if (num < 0 || num > 255) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static boolean checkIpIsInRange(String gatewayIp, String firstIp, String lastIp) {\n+        boolean isInnerIp = false;\n+\n+        long gatewayIpNum = getIpNum(gatewayIp);\n+        long firstIpNum = getIpNum(firstIp);\n+        long lastIpNum = getIpNum(lastIp);\n+\n+        isInnerIp = isInner(gatewayIpNum, firstIpNum - ConstantsConfig.LowIpInterval, lastIpNum + ConstantsConfig.HighIpInterval);\n+\n+        return isInnerIp;\n+    }\n+\n+    private static long getIpNum(String ipAddress) {\n+        String[] ip = ipAddress.split(\"\\\\.\");\n+        long a = Integer.parseInt(ip[0]);\n+        long b = Integer.parseInt(ip[1]);\n+        long c = Integer.parseInt(ip[2]);\n+        long d = Integer.parseInt(ip[3]);\n+        long ipNum = a * 256 * 256 * 256 + b * 256 * 256 + c * 256 + d;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxMDgwNQ=="}, "originalCommit": {"oid": "50e8dab4a01ff5c1c307a60eba8e179d16dd8032"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTI5OTQ0OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/SubnetManagementUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzoyNzo0NFrOG1RWnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDozNjowMFrOG1SYzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxMjAyOQ==", "bodyText": "I think \"userIp > begin\" or the client of this method needs to pass a larger begin.", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r458512029", "createdAt": "2020-07-22T03:27:44Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/SubnetManagementUtil.java", "diffHunk": "@@ -66,4 +76,134 @@ public static boolean checkSubnetRequestResourceIsValid(SubnetRequestWebJson res\n         return true;\n     }\n \n+    public static String setGatewayIpValue(String gatewayIp, String cidr) {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return null;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            SubnetUtils utils = new SubnetUtils(cidr);\n+            String lowIp = utils.getInfo().getLowAddress();\n+            if (lowIp == null) {\n+                return null;\n+            }\n+\n+            String[] lowIps = lowIp.split(\"\\\\.\");\n+            Integer low = Integer.parseInt(lowIps[lowIps.length - 1]) + ConstantsConfig.BaseInterval;\n+            lowIps[lowIps.length - 1] = String.valueOf(low);\n+            lowIp = String.join(\".\", lowIps);\n+            return lowIp;\n+        }\n+\n+        return gatewayIp;\n+\n+    }\n+\n+    public static boolean checkGatewayIpIsValid(String gatewayIp, String cidr) throws ParameterUnexpectedValueException, FallbackException {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return true;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            return true;\n+        }\n+\n+        // gatewayIP is invalid\n+        if (!checkIpIsValid(gatewayIp)) {\n+            return false;\n+        }\n+\n+        // gatewayIP format is valid but it used the lowest base ip (xx.xx.xx.0) case and use the highest base ip (xx.xx.xx.255))\n+        boolean isCidrValid = subnetService.verifyCidrBlock(cidr);\n+        if (!isCidrValid) {\n+            throw new FallbackException(\"cidr is invalid : \" + cidr);\n+        }\n+\n+        String[] ips = subnetService.cidrToFirstIpAndLastIp(cidr);\n+        if (ips == null || ips.length != 2) {\n+            throw new FallbackException(\"cidr transfer to first/last ip failed\");\n+        }\n+\n+        if (!checkIpIsInRange(gatewayIp, ips[0], ips[1])) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean checkGatewayIpIsInAllocatedRange(String gatewayIp, String cidr) {\n+        if (gatewayIp == null) {\n+            return false;\n+        }\n+        if (gatewayIp.length() == 0) {\n+            return false;\n+        }\n+        String[] ips = subnetService.cidrToFirstIpAndLastIp(cidr);\n+\n+        long gatewayIpNum = getIpNum(gatewayIp);\n+        long firstIpNum = getIpNum(ips[0]);\n+        long lastIpNum = getIpNum(ips[1]);\n+\n+        if (gatewayIpNum < firstIpNum || gatewayIpNum > lastIpNum) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean checkIpIsValid(String gatewayIp) {\n+        if (gatewayIp == null) {\n+            return false;\n+        }\n+        String[] ips = gatewayIp.split(\"\\\\.\");\n+\n+        if (ips == null || ips.length != 4) {\n+            return false;\n+        }\n+\n+        for (String segment : ips) {\n+            char[] chars = segment.toCharArray();\n+            for (int i = 0; i < chars.length; i ++) {\n+                char c = chars[i];\n+                if (c < '0' || c > '9') {\n+                    return false;\n+                }\n+            }\n+            Integer num = Integer.parseInt(segment);\n+            if (num < 0 || num > 255) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static boolean checkIpIsInRange(String gatewayIp, String firstIp, String lastIp) {\n+        boolean isInnerIp = false;\n+\n+        long gatewayIpNum = getIpNum(gatewayIp);\n+        long firstIpNum = getIpNum(firstIp);\n+        long lastIpNum = getIpNum(lastIp);\n+\n+        isInnerIp = isInner(gatewayIpNum, firstIpNum - ConstantsConfig.LowIpInterval, lastIpNum + ConstantsConfig.HighIpInterval);\n+\n+        return isInnerIp;\n+    }\n+\n+    private static long getIpNum(String ipAddress) {\n+        String[] ip = ipAddress.split(\"\\\\.\");\n+        long a = Integer.parseInt(ip[0]);\n+        long b = Integer.parseInt(ip[1]);\n+        long c = Integer.parseInt(ip[2]);\n+        long d = Integer.parseInt(ip[3]);\n+        long ipNum = a * 256 * 256 * 256 + b * 256 * 256 + c * 256 + d;\n+        return ipNum;\n+    }\n+\n+    private static boolean isInner(long userIp, long begin, long end) {\n+        return (userIp >= begin) && (userIp <= end);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50e8dab4a01ff5c1c307a60eba8e179d16dd8032"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxMjIxMw==", "bodyText": "If you've UT covered this, then ignore the above comments :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r458512213", "createdAt": "2020-07-22T03:28:25Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/SubnetManagementUtil.java", "diffHunk": "@@ -66,4 +76,134 @@ public static boolean checkSubnetRequestResourceIsValid(SubnetRequestWebJson res\n         return true;\n     }\n \n+    public static String setGatewayIpValue(String gatewayIp, String cidr) {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return null;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            SubnetUtils utils = new SubnetUtils(cidr);\n+            String lowIp = utils.getInfo().getLowAddress();\n+            if (lowIp == null) {\n+                return null;\n+            }\n+\n+            String[] lowIps = lowIp.split(\"\\\\.\");\n+            Integer low = Integer.parseInt(lowIps[lowIps.length - 1]) + ConstantsConfig.BaseInterval;\n+            lowIps[lowIps.length - 1] = String.valueOf(low);\n+            lowIp = String.join(\".\", lowIps);\n+            return lowIp;\n+        }\n+\n+        return gatewayIp;\n+\n+    }\n+\n+    public static boolean checkGatewayIpIsValid(String gatewayIp, String cidr) throws ParameterUnexpectedValueException, FallbackException {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return true;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            return true;\n+        }\n+\n+        // gatewayIP is invalid\n+        if (!checkIpIsValid(gatewayIp)) {\n+            return false;\n+        }\n+\n+        // gatewayIP format is valid but it used the lowest base ip (xx.xx.xx.0) case and use the highest base ip (xx.xx.xx.255))\n+        boolean isCidrValid = subnetService.verifyCidrBlock(cidr);\n+        if (!isCidrValid) {\n+            throw new FallbackException(\"cidr is invalid : \" + cidr);\n+        }\n+\n+        String[] ips = subnetService.cidrToFirstIpAndLastIp(cidr);\n+        if (ips == null || ips.length != 2) {\n+            throw new FallbackException(\"cidr transfer to first/last ip failed\");\n+        }\n+\n+        if (!checkIpIsInRange(gatewayIp, ips[0], ips[1])) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean checkGatewayIpIsInAllocatedRange(String gatewayIp, String cidr) {\n+        if (gatewayIp == null) {\n+            return false;\n+        }\n+        if (gatewayIp.length() == 0) {\n+            return false;\n+        }\n+        String[] ips = subnetService.cidrToFirstIpAndLastIp(cidr);\n+\n+        long gatewayIpNum = getIpNum(gatewayIp);\n+        long firstIpNum = getIpNum(ips[0]);\n+        long lastIpNum = getIpNum(ips[1]);\n+\n+        if (gatewayIpNum < firstIpNum || gatewayIpNum > lastIpNum) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean checkIpIsValid(String gatewayIp) {\n+        if (gatewayIp == null) {\n+            return false;\n+        }\n+        String[] ips = gatewayIp.split(\"\\\\.\");\n+\n+        if (ips == null || ips.length != 4) {\n+            return false;\n+        }\n+\n+        for (String segment : ips) {\n+            char[] chars = segment.toCharArray();\n+            for (int i = 0; i < chars.length; i ++) {\n+                char c = chars[i];\n+                if (c < '0' || c > '9') {\n+                    return false;\n+                }\n+            }\n+            Integer num = Integer.parseInt(segment);\n+            if (num < 0 || num > 255) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static boolean checkIpIsInRange(String gatewayIp, String firstIp, String lastIp) {\n+        boolean isInnerIp = false;\n+\n+        long gatewayIpNum = getIpNum(gatewayIp);\n+        long firstIpNum = getIpNum(firstIp);\n+        long lastIpNum = getIpNum(lastIp);\n+\n+        isInnerIp = isInner(gatewayIpNum, firstIpNum - ConstantsConfig.LowIpInterval, lastIpNum + ConstantsConfig.HighIpInterval);\n+\n+        return isInnerIp;\n+    }\n+\n+    private static long getIpNum(String ipAddress) {\n+        String[] ip = ipAddress.split(\"\\\\.\");\n+        long a = Integer.parseInt(ip[0]);\n+        long b = Integer.parseInt(ip[1]);\n+        long c = Integer.parseInt(ip[2]);\n+        long d = Integer.parseInt(ip[3]);\n+        long ipNum = a * 256 * 256 * 256 + b * 256 * 256 + c * 256 + d;\n+        return ipNum;\n+    }\n+\n+    private static boolean isInner(long userIp, long begin, long end) {\n+        return (userIp >= begin) && (userIp <= end);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxMjAyOQ=="}, "originalCommit": {"oid": "50e8dab4a01ff5c1c307a60eba8e179d16dd8032"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyODk3Mw==", "bodyText": "okay ~", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r458528973", "createdAt": "2020-07-22T04:36:00Z", "author": {"login": "kevin-zhonghao"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/utils/SubnetManagementUtil.java", "diffHunk": "@@ -66,4 +76,134 @@ public static boolean checkSubnetRequestResourceIsValid(SubnetRequestWebJson res\n         return true;\n     }\n \n+    public static String setGatewayIpValue(String gatewayIp, String cidr) {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return null;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            SubnetUtils utils = new SubnetUtils(cidr);\n+            String lowIp = utils.getInfo().getLowAddress();\n+            if (lowIp == null) {\n+                return null;\n+            }\n+\n+            String[] lowIps = lowIp.split(\"\\\\.\");\n+            Integer low = Integer.parseInt(lowIps[lowIps.length - 1]) + ConstantsConfig.BaseInterval;\n+            lowIps[lowIps.length - 1] = String.valueOf(low);\n+            lowIp = String.join(\".\", lowIps);\n+            return lowIp;\n+        }\n+\n+        return gatewayIp;\n+\n+    }\n+\n+    public static boolean checkGatewayIpIsValid(String gatewayIp, String cidr) throws ParameterUnexpectedValueException, FallbackException {\n+        // gatewayIP is null\n+        if (gatewayIp == null) {\n+            return true;\n+        }\n+\n+        // gatewayIP is empty\n+        if (gatewayIp.length() == 0) {\n+            return true;\n+        }\n+\n+        // gatewayIP is invalid\n+        if (!checkIpIsValid(gatewayIp)) {\n+            return false;\n+        }\n+\n+        // gatewayIP format is valid but it used the lowest base ip (xx.xx.xx.0) case and use the highest base ip (xx.xx.xx.255))\n+        boolean isCidrValid = subnetService.verifyCidrBlock(cidr);\n+        if (!isCidrValid) {\n+            throw new FallbackException(\"cidr is invalid : \" + cidr);\n+        }\n+\n+        String[] ips = subnetService.cidrToFirstIpAndLastIp(cidr);\n+        if (ips == null || ips.length != 2) {\n+            throw new FallbackException(\"cidr transfer to first/last ip failed\");\n+        }\n+\n+        if (!checkIpIsInRange(gatewayIp, ips[0], ips[1])) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean checkGatewayIpIsInAllocatedRange(String gatewayIp, String cidr) {\n+        if (gatewayIp == null) {\n+            return false;\n+        }\n+        if (gatewayIp.length() == 0) {\n+            return false;\n+        }\n+        String[] ips = subnetService.cidrToFirstIpAndLastIp(cidr);\n+\n+        long gatewayIpNum = getIpNum(gatewayIp);\n+        long firstIpNum = getIpNum(ips[0]);\n+        long lastIpNum = getIpNum(ips[1]);\n+\n+        if (gatewayIpNum < firstIpNum || gatewayIpNum > lastIpNum) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean checkIpIsValid(String gatewayIp) {\n+        if (gatewayIp == null) {\n+            return false;\n+        }\n+        String[] ips = gatewayIp.split(\"\\\\.\");\n+\n+        if (ips == null || ips.length != 4) {\n+            return false;\n+        }\n+\n+        for (String segment : ips) {\n+            char[] chars = segment.toCharArray();\n+            for (int i = 0; i < chars.length; i ++) {\n+                char c = chars[i];\n+                if (c < '0' || c > '9') {\n+                    return false;\n+                }\n+            }\n+            Integer num = Integer.parseInt(segment);\n+            if (num < 0 || num > 255) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static boolean checkIpIsInRange(String gatewayIp, String firstIp, String lastIp) {\n+        boolean isInnerIp = false;\n+\n+        long gatewayIpNum = getIpNum(gatewayIp);\n+        long firstIpNum = getIpNum(firstIp);\n+        long lastIpNum = getIpNum(lastIp);\n+\n+        isInnerIp = isInner(gatewayIpNum, firstIpNum - ConstantsConfig.LowIpInterval, lastIpNum + ConstantsConfig.HighIpInterval);\n+\n+        return isInnerIp;\n+    }\n+\n+    private static long getIpNum(String ipAddress) {\n+        String[] ip = ipAddress.split(\"\\\\.\");\n+        long a = Integer.parseInt(ip[0]);\n+        long b = Integer.parseInt(ip[1]);\n+        long c = Integer.parseInt(ip[2]);\n+        long d = Integer.parseInt(ip[3]);\n+        long ipNum = a * 256 * 256 * 256 + b * 256 * 256 + c * 256 + d;\n+        return ipNum;\n+    }\n+\n+    private static boolean isInner(long userIp, long begin, long end) {\n+        return (userIp >= begin) && (userIp <= end);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxMjAyOQ=="}, "originalCommit": {"oid": "50e8dab4a01ff5c1c307a60eba8e179d16dd8032"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTMwNzQ0OnYy", "diffSide": "RIGHT", "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzozMjozM1rOG1Rbhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzozMjozM1rOG1Rbhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxMzI4Nw==", "bodyText": "Maybe we could call it GatewayIpUnsupported due to the same reasoning of renaming SubnetManagementUtil.checkGatewayIpIsValid?", "url": "https://github.com/futurewei-cloud/alcor/pull/307#discussion_r458513287", "createdAt": "2020-07-22T03:32:33Z", "author": {"login": "xieus"}, "path": "services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "diffHunk": "@@ -139,6 +140,13 @@ public SubnetWebJson createSubnetState(@PathVariable String projectId, @RequestB\n             String subnetId = inSubnetEntity.getId();\n             String vpcId = inSubnetEntity.getVpcId();\n             String cidr = inSubnetEntity.getCidr();\n+            String gatewayIp = inSubnetEntity.getGatewayIp();\n+            boolean gatewayIpIsValid = SubnetManagementUtil.checkGatewayIpIsValid(gatewayIp, cidr);\n+            if (!gatewayIpIsValid) {\n+                throw new GatewayIpIsInvalid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50e8dab4a01ff5c1c307a60eba8e179d16dd8032"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4607, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}