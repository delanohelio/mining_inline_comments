{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNTgxMjQw", "number": 180, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1MzowNVrOD3txQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjowNjozNVrOD8csfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQ4MTYyOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/entity/HostState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1MzowNVrOGOICLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1MzowNVrOGOICLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDg3OA==", "bodyText": "Remove lines.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r417464878", "createdAt": "2020-04-29T16:53:05Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/entity/HostState.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.common.entity;\n+\n+public class HostState {\n+    private String hostIp;\n+    private String dpType;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3499a55996576c7acb48f49b724e5c3df2c8667"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzUyMTMyOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/exception/AllocateIpAddrException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjo0OFrOGOIbTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjo0OFrOGOIbTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTMwOA==", "bodyText": "Need an indent", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r417471308", "createdAt": "2020-04-29T17:02:48Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/exception/AllocateIpAddrException.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.exception;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(code= HttpStatus.INTERNAL_SERVER_ERROR, reason=\"Allocate ip address error\")\n+public class AllocateIpAddrException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3499a55996576c7acb48f49b724e5c3df2c8667"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjk5ODg1OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzoyNzo0OVrOGO9vMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTowMTozOVrOGT2IzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NDc1Mw==", "bodyText": "The idea of using a rollback stack to keep track of potential rollback call is good.\nThe issue, however, is that it might not work in current implementation. If an exception is thrown before rollbacks.push(ipAddressRollback), then the stack doesn't have ipAddressRollback therefore won't be able to trigger rollback during exception handling.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r418344753", "createdAt": "2020-04-30T23:27:49Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNjQ5Mw==", "bodyText": "Yes, we can consider it in two cases. First, if an exception occurs before receiving the rest response, there is no need to roll back. Second, if an exception occurs after receiving the rest response, it needs to be rolled back, so we need to ensure that there is no exception between the rest response and rollbacks.push (). In fact, rollbacks.push () is executed after receiving the rest response, so we can assume that there will be no exception between them.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421206493", "createdAt": "2020-05-07T02:45:01Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NDc1Mw=="}, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2MTA2NA==", "bodyText": "I want to deal with the rollbacks of various operations in a unified way by a common method. This method does not need to judge whether the operation needs to be rolled back, and does not need to care about what to be rolled back, this should be concerned by the operation itself. There may be a better way, do you have any good suggestions?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422061064", "createdAt": "2020-05-08T10:09:46Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NDc1Mw=="}, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5NTI2Mg==", "bodyText": "@chenpiaoping I miss your previous comment in this thread. Unifying the rollback is a good idea but depending on how we are going to do it.\nRegarding the first case, let us say Service A => Service B, and the modify (POST or PUT or DELETE) request has been sent but no yet received a response, an exception is received at this time. It is still necessary that Service A send roolback to Service B.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422795262", "createdAt": "2020-05-11T05:49:43Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NDc1Mw=="}, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5NjQyNw==", "bodyText": "Oh, this is indeed a big problem. Does subnet manager have the same problem?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422896427", "createdAt": "2020-05-11T09:10:17Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NDc1Mw=="}, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2ODM2MQ==", "bodyText": "https://github.com/futurewei-cloud/alcor/pull/180/commits/0a4c96a05592534af52680abe72f9d5d6f364d28\uff0cThis commit is going to solve this problem.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422968361", "createdAt": "2020-05-11T11:18:53Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NDc1Mw=="}, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2MzExNg==", "bodyText": "Thanks let me check it.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423463116", "createdAt": "2020-05-12T05:01:39Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NDc1Mw=="}, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzAxMjgwOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzozNDo0MVrOGO93eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowNToxOFrOGVOsnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0Njg3NA==", "bodyText": "The calls into various downstream microservices remain serial and sync.\nOne recommended way is to async call into multiple microservices in parallel. See the implementation of Subnet Manager for an example.\nhttps://github.com/futurewei-cloud/alcor/blob/a4db5c2b368e1a500f4defd62de174d375419392/services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/controller/SubnetController.java", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r418346874", "createdAt": "2020-04-30T23:34:41Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        String rangeId = getRangeIdForPort(portState.getVpcId());\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, null);\n+\n+        List<PortState.FixedIp> fixedIps = new ArrayList<>();\n+        PortState.FixedIp fixedIp = new PortState.FixedIp();\n+\n+        fixedIp.setSubnetId(result.getSubnetId());\n+        fixedIp.setIpAddress(result.getIp());\n+        fixedIps.add(fixedIp);\n+\n+        portState.setFixedIps(fixedIps);\n+\n+        AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+        ipAddressRollback.putAllocatedIpAddress(result);\n+        rollbacks.push(ipAddressRollback);\n+    }\n+\n+    private void allocateMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        MacStateJson result = macAddressRest.allocateMacAddress(projectId, portState.getVpcId(), portState.getId());\n+        portState.setMacAddress(result.getMacState().getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        AllocateMacAddrRollback rollback = new AllocateMacAddrRollback(macAddressRest);\n+        rollback.putAllocatedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void verifyMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) {\n+        //FIXME: Not support yet\n+    }\n+\n+    private void releaseMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        macAddressRest.releaseMacAddress(portState.getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        ReleaseMacAddrRollback rollback = new ReleaseMacAddrRollback(macAddressRest);\n+        rollback.putReleasedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void setDefaultValue(PortState portState) {\n+        if (portState.getId() == null) {\n+            portState.setId(\"\");\n+        }\n+\n+        if (portState.getProjectId() == null) {\n+            portState.setProjectId(\"\");\n+        }\n+\n+        if (portState.getName() == null) {\n+            portState.setName(\"\");\n+        }\n+        if (portState.getDescription() == null) {\n+            portState.setDescription(\"\");\n+        }\n+        if (portState.getVpcId() == null) {\n+            portState.setVpcId(\"\");\n+        }\n+\n+        if (portState.getTenantId() == null) {\n+            portState.setTenantId(\"\");\n+        }\n+\n+        if (portState.getMacAddress() == null) {\n+            portState.setMacAddress(\"\");\n+        }\n+\n+        if (portState.getVethName() == null) {\n+            portState.setVethName(\"\");\n+        }\n+\n+        if (portState.getDeviceId() == null) {\n+            portState.setDeviceId(\"\");\n+        }\n+\n+        if (portState.getDeviceOwner() == null) {\n+            portState.setDeviceOwner(\"\");\n+        }\n+\n+        if (portState.getStatus() == null) {\n+            portState.setStatus(\"\");\n+        }\n+\n+        if (portState.getFixedIps() == null) {\n+            portState.setFixedIps(new ArrayList<>());\n+        }\n+\n+        if (portState.getAllowedAddressPairs() == null) {\n+            portState.setAllowedAddressPairs(new ArrayList<>());\n+        }\n+\n+        if (portState.getExtraDhcpOpts() == null) {\n+            portState.setExtraDhcpOpts(new ArrayList<>());\n+        }\n+\n+        if (portState.getSecurityGroups() == null) {\n+            portState.setSecurityGroups(new ArrayList<>());\n+        }\n+\n+        if (portState.getBindingHostId() == null) {\n+            portState.setBindingHostId(\"\");\n+        }\n+\n+        if (portState.getBindingProfile() == null) {\n+            portState.setBindingProfile(\"\");\n+        }\n+\n+        if (portState.getBindingVnicType() == null) {\n+            portState.setBindingVnicType(\"\");\n+        }\n+\n+        if (portState.getNetworkNamespace() == null) {\n+            portState.setNetworkNamespace(\"\");\n+        }\n+\n+        if (portState.getDnsName() == null) {\n+            portState.setDnsName(\"\");\n+        }\n+\n+        if (portState.getDnsAssignment() == null) {\n+            portState.setDnsAssignment(new ArrayList<>());\n+        }\n+    }\n+\n+    private PortStateJson tryCreatePortState(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNzIzMg==", "bodyText": "Okay, I will do that.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421207232", "createdAt": "2020-05-07T02:47:45Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        String rangeId = getRangeIdForPort(portState.getVpcId());\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, null);\n+\n+        List<PortState.FixedIp> fixedIps = new ArrayList<>();\n+        PortState.FixedIp fixedIp = new PortState.FixedIp();\n+\n+        fixedIp.setSubnetId(result.getSubnetId());\n+        fixedIp.setIpAddress(result.getIp());\n+        fixedIps.add(fixedIp);\n+\n+        portState.setFixedIps(fixedIps);\n+\n+        AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+        ipAddressRollback.putAllocatedIpAddress(result);\n+        rollbacks.push(ipAddressRollback);\n+    }\n+\n+    private void allocateMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        MacStateJson result = macAddressRest.allocateMacAddress(projectId, portState.getVpcId(), portState.getId());\n+        portState.setMacAddress(result.getMacState().getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        AllocateMacAddrRollback rollback = new AllocateMacAddrRollback(macAddressRest);\n+        rollback.putAllocatedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void verifyMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) {\n+        //FIXME: Not support yet\n+    }\n+\n+    private void releaseMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        macAddressRest.releaseMacAddress(portState.getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        ReleaseMacAddrRollback rollback = new ReleaseMacAddrRollback(macAddressRest);\n+        rollback.putReleasedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void setDefaultValue(PortState portState) {\n+        if (portState.getId() == null) {\n+            portState.setId(\"\");\n+        }\n+\n+        if (portState.getProjectId() == null) {\n+            portState.setProjectId(\"\");\n+        }\n+\n+        if (portState.getName() == null) {\n+            portState.setName(\"\");\n+        }\n+        if (portState.getDescription() == null) {\n+            portState.setDescription(\"\");\n+        }\n+        if (portState.getVpcId() == null) {\n+            portState.setVpcId(\"\");\n+        }\n+\n+        if (portState.getTenantId() == null) {\n+            portState.setTenantId(\"\");\n+        }\n+\n+        if (portState.getMacAddress() == null) {\n+            portState.setMacAddress(\"\");\n+        }\n+\n+        if (portState.getVethName() == null) {\n+            portState.setVethName(\"\");\n+        }\n+\n+        if (portState.getDeviceId() == null) {\n+            portState.setDeviceId(\"\");\n+        }\n+\n+        if (portState.getDeviceOwner() == null) {\n+            portState.setDeviceOwner(\"\");\n+        }\n+\n+        if (portState.getStatus() == null) {\n+            portState.setStatus(\"\");\n+        }\n+\n+        if (portState.getFixedIps() == null) {\n+            portState.setFixedIps(new ArrayList<>());\n+        }\n+\n+        if (portState.getAllowedAddressPairs() == null) {\n+            portState.setAllowedAddressPairs(new ArrayList<>());\n+        }\n+\n+        if (portState.getExtraDhcpOpts() == null) {\n+            portState.setExtraDhcpOpts(new ArrayList<>());\n+        }\n+\n+        if (portState.getSecurityGroups() == null) {\n+            portState.setSecurityGroups(new ArrayList<>());\n+        }\n+\n+        if (portState.getBindingHostId() == null) {\n+            portState.setBindingHostId(\"\");\n+        }\n+\n+        if (portState.getBindingProfile() == null) {\n+            portState.setBindingProfile(\"\");\n+        }\n+\n+        if (portState.getBindingVnicType() == null) {\n+            portState.setBindingVnicType(\"\");\n+        }\n+\n+        if (portState.getNetworkNamespace() == null) {\n+            portState.setNetworkNamespace(\"\");\n+        }\n+\n+        if (portState.getDnsName() == null) {\n+            portState.setDnsName(\"\");\n+        }\n+\n+        if (portState.getDnsAssignment() == null) {\n+            portState.setDnsAssignment(new ArrayList<>());\n+        }\n+    }\n+\n+    private PortStateJson tryCreatePortState(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0Njg3NA=="}, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5NTM2Nw==", "bodyText": "Thanks.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422795367", "createdAt": "2020-05-11T05:50:02Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        String rangeId = getRangeIdForPort(portState.getVpcId());\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, null);\n+\n+        List<PortState.FixedIp> fixedIps = new ArrayList<>();\n+        PortState.FixedIp fixedIp = new PortState.FixedIp();\n+\n+        fixedIp.setSubnetId(result.getSubnetId());\n+        fixedIp.setIpAddress(result.getIp());\n+        fixedIps.add(fixedIp);\n+\n+        portState.setFixedIps(fixedIps);\n+\n+        AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+        ipAddressRollback.putAllocatedIpAddress(result);\n+        rollbacks.push(ipAddressRollback);\n+    }\n+\n+    private void allocateMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        MacStateJson result = macAddressRest.allocateMacAddress(projectId, portState.getVpcId(), portState.getId());\n+        portState.setMacAddress(result.getMacState().getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        AllocateMacAddrRollback rollback = new AllocateMacAddrRollback(macAddressRest);\n+        rollback.putAllocatedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void verifyMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) {\n+        //FIXME: Not support yet\n+    }\n+\n+    private void releaseMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        macAddressRest.releaseMacAddress(portState.getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        ReleaseMacAddrRollback rollback = new ReleaseMacAddrRollback(macAddressRest);\n+        rollback.putReleasedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void setDefaultValue(PortState portState) {\n+        if (portState.getId() == null) {\n+            portState.setId(\"\");\n+        }\n+\n+        if (portState.getProjectId() == null) {\n+            portState.setProjectId(\"\");\n+        }\n+\n+        if (portState.getName() == null) {\n+            portState.setName(\"\");\n+        }\n+        if (portState.getDescription() == null) {\n+            portState.setDescription(\"\");\n+        }\n+        if (portState.getVpcId() == null) {\n+            portState.setVpcId(\"\");\n+        }\n+\n+        if (portState.getTenantId() == null) {\n+            portState.setTenantId(\"\");\n+        }\n+\n+        if (portState.getMacAddress() == null) {\n+            portState.setMacAddress(\"\");\n+        }\n+\n+        if (portState.getVethName() == null) {\n+            portState.setVethName(\"\");\n+        }\n+\n+        if (portState.getDeviceId() == null) {\n+            portState.setDeviceId(\"\");\n+        }\n+\n+        if (portState.getDeviceOwner() == null) {\n+            portState.setDeviceOwner(\"\");\n+        }\n+\n+        if (portState.getStatus() == null) {\n+            portState.setStatus(\"\");\n+        }\n+\n+        if (portState.getFixedIps() == null) {\n+            portState.setFixedIps(new ArrayList<>());\n+        }\n+\n+        if (portState.getAllowedAddressPairs() == null) {\n+            portState.setAllowedAddressPairs(new ArrayList<>());\n+        }\n+\n+        if (portState.getExtraDhcpOpts() == null) {\n+            portState.setExtraDhcpOpts(new ArrayList<>());\n+        }\n+\n+        if (portState.getSecurityGroups() == null) {\n+            portState.setSecurityGroups(new ArrayList<>());\n+        }\n+\n+        if (portState.getBindingHostId() == null) {\n+            portState.setBindingHostId(\"\");\n+        }\n+\n+        if (portState.getBindingProfile() == null) {\n+            portState.setBindingProfile(\"\");\n+        }\n+\n+        if (portState.getBindingVnicType() == null) {\n+            portState.setBindingVnicType(\"\");\n+        }\n+\n+        if (portState.getNetworkNamespace() == null) {\n+            portState.setNetworkNamespace(\"\");\n+        }\n+\n+        if (portState.getDnsName() == null) {\n+            portState.setDnsName(\"\");\n+        }\n+\n+        if (portState.getDnsAssignment() == null) {\n+            portState.setDnsAssignment(new ArrayList<>());\n+        }\n+    }\n+\n+    private PortStateJson tryCreatePortState(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0Njg3NA=="}, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMjU4OQ==", "bodyText": "Nice work on support Async with a generic AsyncExecutor class. Like it!", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424902589", "createdAt": "2020-05-14T06:39:54Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        String rangeId = getRangeIdForPort(portState.getVpcId());\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, null);\n+\n+        List<PortState.FixedIp> fixedIps = new ArrayList<>();\n+        PortState.FixedIp fixedIp = new PortState.FixedIp();\n+\n+        fixedIp.setSubnetId(result.getSubnetId());\n+        fixedIp.setIpAddress(result.getIp());\n+        fixedIps.add(fixedIp);\n+\n+        portState.setFixedIps(fixedIps);\n+\n+        AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+        ipAddressRollback.putAllocatedIpAddress(result);\n+        rollbacks.push(ipAddressRollback);\n+    }\n+\n+    private void allocateMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        MacStateJson result = macAddressRest.allocateMacAddress(projectId, portState.getVpcId(), portState.getId());\n+        portState.setMacAddress(result.getMacState().getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        AllocateMacAddrRollback rollback = new AllocateMacAddrRollback(macAddressRest);\n+        rollback.putAllocatedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void verifyMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) {\n+        //FIXME: Not support yet\n+    }\n+\n+    private void releaseMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        macAddressRest.releaseMacAddress(portState.getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        ReleaseMacAddrRollback rollback = new ReleaseMacAddrRollback(macAddressRest);\n+        rollback.putReleasedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void setDefaultValue(PortState portState) {\n+        if (portState.getId() == null) {\n+            portState.setId(\"\");\n+        }\n+\n+        if (portState.getProjectId() == null) {\n+            portState.setProjectId(\"\");\n+        }\n+\n+        if (portState.getName() == null) {\n+            portState.setName(\"\");\n+        }\n+        if (portState.getDescription() == null) {\n+            portState.setDescription(\"\");\n+        }\n+        if (portState.getVpcId() == null) {\n+            portState.setVpcId(\"\");\n+        }\n+\n+        if (portState.getTenantId() == null) {\n+            portState.setTenantId(\"\");\n+        }\n+\n+        if (portState.getMacAddress() == null) {\n+            portState.setMacAddress(\"\");\n+        }\n+\n+        if (portState.getVethName() == null) {\n+            portState.setVethName(\"\");\n+        }\n+\n+        if (portState.getDeviceId() == null) {\n+            portState.setDeviceId(\"\");\n+        }\n+\n+        if (portState.getDeviceOwner() == null) {\n+            portState.setDeviceOwner(\"\");\n+        }\n+\n+        if (portState.getStatus() == null) {\n+            portState.setStatus(\"\");\n+        }\n+\n+        if (portState.getFixedIps() == null) {\n+            portState.setFixedIps(new ArrayList<>());\n+        }\n+\n+        if (portState.getAllowedAddressPairs() == null) {\n+            portState.setAllowedAddressPairs(new ArrayList<>());\n+        }\n+\n+        if (portState.getExtraDhcpOpts() == null) {\n+            portState.setExtraDhcpOpts(new ArrayList<>());\n+        }\n+\n+        if (portState.getSecurityGroups() == null) {\n+            portState.setSecurityGroups(new ArrayList<>());\n+        }\n+\n+        if (portState.getBindingHostId() == null) {\n+            portState.setBindingHostId(\"\");\n+        }\n+\n+        if (portState.getBindingProfile() == null) {\n+            portState.setBindingProfile(\"\");\n+        }\n+\n+        if (portState.getBindingVnicType() == null) {\n+            portState.setBindingVnicType(\"\");\n+        }\n+\n+        if (portState.getNetworkNamespace() == null) {\n+            portState.setNetworkNamespace(\"\");\n+        }\n+\n+        if (portState.getDnsName() == null) {\n+            portState.setDnsName(\"\");\n+        }\n+\n+        if (portState.getDnsAssignment() == null) {\n+            portState.setDnsAssignment(new ArrayList<>());\n+        }\n+    }\n+\n+    private PortStateJson tryCreatePortState(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0Njg3NA=="}, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNTQ0MQ==", "bodyText": "If this mechanism is approved by you, I will move it to the lib directory", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424905441", "createdAt": "2020-05-14T06:45:58Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        String rangeId = getRangeIdForPort(portState.getVpcId());\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, null);\n+\n+        List<PortState.FixedIp> fixedIps = new ArrayList<>();\n+        PortState.FixedIp fixedIp = new PortState.FixedIp();\n+\n+        fixedIp.setSubnetId(result.getSubnetId());\n+        fixedIp.setIpAddress(result.getIp());\n+        fixedIps.add(fixedIp);\n+\n+        portState.setFixedIps(fixedIps);\n+\n+        AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+        ipAddressRollback.putAllocatedIpAddress(result);\n+        rollbacks.push(ipAddressRollback);\n+    }\n+\n+    private void allocateMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        MacStateJson result = macAddressRest.allocateMacAddress(projectId, portState.getVpcId(), portState.getId());\n+        portState.setMacAddress(result.getMacState().getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        AllocateMacAddrRollback rollback = new AllocateMacAddrRollback(macAddressRest);\n+        rollback.putAllocatedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void verifyMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) {\n+        //FIXME: Not support yet\n+    }\n+\n+    private void releaseMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        macAddressRest.releaseMacAddress(portState.getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        ReleaseMacAddrRollback rollback = new ReleaseMacAddrRollback(macAddressRest);\n+        rollback.putReleasedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void setDefaultValue(PortState portState) {\n+        if (portState.getId() == null) {\n+            portState.setId(\"\");\n+        }\n+\n+        if (portState.getProjectId() == null) {\n+            portState.setProjectId(\"\");\n+        }\n+\n+        if (portState.getName() == null) {\n+            portState.setName(\"\");\n+        }\n+        if (portState.getDescription() == null) {\n+            portState.setDescription(\"\");\n+        }\n+        if (portState.getVpcId() == null) {\n+            portState.setVpcId(\"\");\n+        }\n+\n+        if (portState.getTenantId() == null) {\n+            portState.setTenantId(\"\");\n+        }\n+\n+        if (portState.getMacAddress() == null) {\n+            portState.setMacAddress(\"\");\n+        }\n+\n+        if (portState.getVethName() == null) {\n+            portState.setVethName(\"\");\n+        }\n+\n+        if (portState.getDeviceId() == null) {\n+            portState.setDeviceId(\"\");\n+        }\n+\n+        if (portState.getDeviceOwner() == null) {\n+            portState.setDeviceOwner(\"\");\n+        }\n+\n+        if (portState.getStatus() == null) {\n+            portState.setStatus(\"\");\n+        }\n+\n+        if (portState.getFixedIps() == null) {\n+            portState.setFixedIps(new ArrayList<>());\n+        }\n+\n+        if (portState.getAllowedAddressPairs() == null) {\n+            portState.setAllowedAddressPairs(new ArrayList<>());\n+        }\n+\n+        if (portState.getExtraDhcpOpts() == null) {\n+            portState.setExtraDhcpOpts(new ArrayList<>());\n+        }\n+\n+        if (portState.getSecurityGroups() == null) {\n+            portState.setSecurityGroups(new ArrayList<>());\n+        }\n+\n+        if (portState.getBindingHostId() == null) {\n+            portState.setBindingHostId(\"\");\n+        }\n+\n+        if (portState.getBindingProfile() == null) {\n+            portState.setBindingProfile(\"\");\n+        }\n+\n+        if (portState.getBindingVnicType() == null) {\n+            portState.setBindingVnicType(\"\");\n+        }\n+\n+        if (portState.getNetworkNamespace() == null) {\n+            portState.setNetworkNamespace(\"\");\n+        }\n+\n+        if (portState.getDnsName() == null) {\n+            portState.setDnsName(\"\");\n+        }\n+\n+        if (portState.getDnsAssignment() == null) {\n+            portState.setDnsAssignment(new ArrayList<>());\n+        }\n+    }\n+\n+    private PortStateJson tryCreatePortState(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0Njg3NA=="}, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNDA3Nw==", "bodyText": "Sure. Go for it :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424914077", "createdAt": "2020-05-14T07:05:18Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,572 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.common.entity.*;\n+import com.futurewei.alcor.common.rest.IpAddressRest;\n+import com.futurewei.alcor.common.rest.MacAddressRest;\n+import com.futurewei.alcor.common.rest.VpcRest;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.portmanager.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.portmanager.utils.Ipv6AddrUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.common.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetId; //FIXME:return the right rangeId get from subnet manager\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void verifyIpAddresses(List<PortState.FixedIp> fixedIps, Stack<PortStateRollback> rollbacks) throws Exception {\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            int ipVersion = getIpVersion(fixedIp.getIpAddress());\n+            String rangeId = getRangeIdBySubnetId(fixedIp.getSubnetId(), ipVersion);\n+\n+            IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, fixedIp.getIpAddress());\n+\n+            AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+            ipAddressRollback.putAllocatedIpAddress(result);\n+            rollbacks.push(ipAddressRollback);\n+        }\n+    }\n+\n+    private String getRangeIdForPort(String vpcId) {\n+        return \"range1\";\n+    }\n+\n+    private void allocateIpAddress(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        String rangeId = getRangeIdForPort(portState.getVpcId());\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(rangeId, null);\n+\n+        List<PortState.FixedIp> fixedIps = new ArrayList<>();\n+        PortState.FixedIp fixedIp = new PortState.FixedIp();\n+\n+        fixedIp.setSubnetId(result.getSubnetId());\n+        fixedIp.setIpAddress(result.getIp());\n+        fixedIps.add(fixedIp);\n+\n+        portState.setFixedIps(fixedIps);\n+\n+        AllocateIpAddrRollback ipAddressRollback = new AllocateIpAddrRollback(ipAddressRest);\n+        ipAddressRollback.putAllocatedIpAddress(result);\n+        rollbacks.push(ipAddressRollback);\n+    }\n+\n+    private void allocateMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        MacStateJson result = macAddressRest.allocateMacAddress(projectId, portState.getVpcId(), portState.getId());\n+        portState.setMacAddress(result.getMacState().getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        AllocateMacAddrRollback rollback = new AllocateMacAddrRollback(macAddressRest);\n+        rollback.putAllocatedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void verifyMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) {\n+        //FIXME: Not support yet\n+    }\n+\n+    private void releaseMacAddress(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        macAddressRest.releaseMacAddress(portState.getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(projectId);\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        ReleaseMacAddrRollback rollback = new ReleaseMacAddrRollback(macAddressRest);\n+        rollback.putReleasedMacAddress(macState);\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void setDefaultValue(PortState portState) {\n+        if (portState.getId() == null) {\n+            portState.setId(\"\");\n+        }\n+\n+        if (portState.getProjectId() == null) {\n+            portState.setProjectId(\"\");\n+        }\n+\n+        if (portState.getName() == null) {\n+            portState.setName(\"\");\n+        }\n+        if (portState.getDescription() == null) {\n+            portState.setDescription(\"\");\n+        }\n+        if (portState.getVpcId() == null) {\n+            portState.setVpcId(\"\");\n+        }\n+\n+        if (portState.getTenantId() == null) {\n+            portState.setTenantId(\"\");\n+        }\n+\n+        if (portState.getMacAddress() == null) {\n+            portState.setMacAddress(\"\");\n+        }\n+\n+        if (portState.getVethName() == null) {\n+            portState.setVethName(\"\");\n+        }\n+\n+        if (portState.getDeviceId() == null) {\n+            portState.setDeviceId(\"\");\n+        }\n+\n+        if (portState.getDeviceOwner() == null) {\n+            portState.setDeviceOwner(\"\");\n+        }\n+\n+        if (portState.getStatus() == null) {\n+            portState.setStatus(\"\");\n+        }\n+\n+        if (portState.getFixedIps() == null) {\n+            portState.setFixedIps(new ArrayList<>());\n+        }\n+\n+        if (portState.getAllowedAddressPairs() == null) {\n+            portState.setAllowedAddressPairs(new ArrayList<>());\n+        }\n+\n+        if (portState.getExtraDhcpOpts() == null) {\n+            portState.setExtraDhcpOpts(new ArrayList<>());\n+        }\n+\n+        if (portState.getSecurityGroups() == null) {\n+            portState.setSecurityGroups(new ArrayList<>());\n+        }\n+\n+        if (portState.getBindingHostId() == null) {\n+            portState.setBindingHostId(\"\");\n+        }\n+\n+        if (portState.getBindingProfile() == null) {\n+            portState.setBindingProfile(\"\");\n+        }\n+\n+        if (portState.getBindingVnicType() == null) {\n+            portState.setBindingVnicType(\"\");\n+        }\n+\n+        if (portState.getNetworkNamespace() == null) {\n+            portState.setNetworkNamespace(\"\");\n+        }\n+\n+        if (portState.getDnsName() == null) {\n+            portState.setDnsName(\"\");\n+        }\n+\n+        if (portState.getDnsAssignment() == null) {\n+            portState.setDnsAssignment(new ArrayList<>());\n+        }\n+    }\n+\n+    private PortStateJson tryCreatePortState(String projectId, PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0Njg3NA=="}, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzAzNjMyOnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/entity/DeviceOwner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0NzozNlrOGO-GBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMzo0NzozNlrOGO-GBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MDU5Ng==", "bodyText": "It is a good idea to put all common entity classes out of an invidiual microservice.\nInstead of storing them in AlcorCommonLib, we recommend to store the entity classes in AlcorWeb which is under /web directory.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r418350596", "createdAt": "2020-04-30T23:47:36Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/entity/DeviceOwner.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.futurewei.alcor.common.entity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzA5ODU5OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/utils/Ipv4AddrUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyMjoxNlrOGO-rOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMjo0NTo1OFrOGRsa2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MDEyMg==", "bodyText": "This is a good util class. Move to common lib so that IP manager could use it as well?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r418360122", "createdAt": "2020-05-01T00:22:16Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/utils/Ipv4AddrUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.portmanager.utils;\n+\n+public class Ipv4AddrUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNjc0NQ==", "bodyText": "Good idea.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421206745", "createdAt": "2020-05-07T02:45:58Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/utils/Ipv4AddrUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.portmanager.utils;\n+\n+public class Ipv4AddrUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MDEyMg=="}, "originalCommit": {"oid": "5df17053c8b70c90f14fbb5ad4673f1d96582b23"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjg0NTE5OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNToxNzoxM1rOGSZXQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoxNToxOVrOGT3egA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw==", "bodyText": "We should verify Subnet ID, instead of Vpc Id here.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421943107", "createdAt": "2020-05-08T05:17:13Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2MDQ5Ng==", "bodyText": "@xieus  But port may not have a Subnet ID. In this case, we need to find a suitable subnet for port, and assign an ip address to port from that subnet.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421960496", "createdAt": "2020-05-08T06:16:56Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4MTAwMA==", "bodyText": "Correct. We have multiple cases to cover, most of the cases would require to verify subnet ID.\nhttps://docs.openstack.org/api-ref/network/v2/?expanded=create-port-detail#ports\n(1) If a user specifies a subnet ID in the optional fixed_ips field, then we have to verify that subnet Id\n(2) If the user doesn't give any fixed_ips, we handle it as you suggested.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421981000", "createdAt": "2020-05-08T07:08:32Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4Njg2NQ==", "bodyText": "@xieus  For the first case, I think we need to get the range ID by  Subnet ID (At this point, the Subnet ID will be verified), and then assign an ip address from the ip range. At present, Subnet manager have not provided an interface to obtain the Range ID by the Subnet ID. I discussed this with kevin, and he said he would think about it.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421986865", "createdAt": "2020-05-08T07:22:11Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5MDI5Mg==", "bodyText": "I think we could make this verification simple by calling the regular Get /subnets/{subnet_id} and the response includes the range ids. @kevin-zhonghao", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421990292", "createdAt": "2020-05-08T07:29:59Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5NTA4OA==", "bodyText": "That would be nice\uff0cBut for the second case, how do i get a suitable Range ID?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421995088", "createdAt": "2020-05-08T07:40:43Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5ODM2OQ==", "bodyText": "Simple solution: random pick one subnet\n(subnet may run out of ips so need retry a few times if such a case is hit)\nComprehensive solution: Pick subnet based on ip utilization.\nWe have the ip utilization data for ip range, we could possibly populate that info to VPC manager and pick a subnet with more available ips.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421998369", "createdAt": "2020-05-08T07:47:57Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzOTMzMw==", "bodyText": "@xieus To reduce interaction with other microservices, we can add an interface to ip manager. The parameter of this interface is that Vpc ID. This interface will selects an ip range based on Vpc ID and assigns an ip address from that ip range. Is that okay?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422439333", "createdAt": "2020-05-09T01:47:29Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODA1NQ==", "bodyText": "@chenpiaoping Does IP manager has the VPC id?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422458055", "createdAt": "2020-05-09T06:13:51Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTI2Mw==", "bodyText": "No, not yet.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422459263", "createdAt": "2020-05-09T06:30:07Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTc1OQ==", "bodyText": "Okay the db key is range id in IP Manager, and subnet ID is part of the value. If we need to VPC Id there, we expect to see inefficient query if we try to get range by vpc id. Any other thoughts?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422459759", "createdAt": "2020-05-09T06:36:56Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDI1MQ==", "bodyText": "@chenpiaoping Regarding the API to query RangeId by SubnetId, the current Subnet Manager supports that.\nYou could use the API\nGET /project/{projectId}/subnets/{subnetId}\nSample Response:\n{\n\"subnet\": {\n\"availability_zone\": \"string\",\n\"cidr\": \"string\",\n\"description\": \"string\",\n\"dhcp_enable\": true,\n\"dns_list\": [\n\"string\"\n],\n\"gateway_ip\": \"string\",\n\"id\": \"string\",\n\"ipv4_range_id\": \"string\",\n\"ipv6_range_id\": \"string\",\n\"mac_address\": \"string\",\n\"name\": \"string\",\n\"primary_dns\": \"string\",\n\"project_id\": \"string\",\n\"routes\": [\n{\n\"associatedTableId\": \"string\",\n\"associatedType\": \"MAIN\",\n\"description\": \"string\",\n\"destination\": \"string\",\n\"id\": \"string\",\n\"name\": \"string\",\n\"priority\": 0,\n\"project_id\": \"string\",\n\"target\": \"string\"\n}\n],\n\"secondary_dns\": \"string\",\n\"vpc_id\": \"string\"\n}\n}\nwhere ipv4_range_id and ipv6_range_id are what you are looking for :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422460251", "createdAt": "2020-05-09T06:44:06Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDU4MA==", "bodyText": "Thanks, I found this API. I've submitted a new commit for this.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422460580", "createdAt": "2020-05-09T06:48:31Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MTY1Mw==", "bodyText": "In order to avoid the problem of inefficient query, another idea is that we can create a table to store the mapping between vpc id and rang id, but we need to write this table at the same time when we create or delete an ip range.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422461653", "createdAt": "2020-05-09T07:03:00Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc3NjIwMw==", "bodyText": "One discipline is that we follow the same workflows for both case (1) and case (2).\nYou could either go to SubnetManager to verify subnetId or vpcId, retrieve the range id, and then go to IP manager,\nOR, build a mapping in IP manager from VpcId to rangeID as well as SubnetId to RangeId, and only need go to IP manager.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422776203", "createdAt": "2020-05-11T04:38:46Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MzQzNw==", "bodyText": "Yes, for the case of going to SubnetManager to retrieve a range id,  Since SubnetManager do not know whether there is an available ip address in the range, we may need to go to SubnetManager many times to obtain a available range.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422973437", "createdAt": "2020-05-11T11:28:52Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMzczMA==", "bodyText": "@xieus Ip manager provides an interface that randomly assigns ip addresses according to vpcId. Is this solution okay? I'm ready to develop.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423433730", "createdAt": "2020-05-12T03:00:42Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NzA0OA==", "bodyText": "@chenpiaoping Rethinking the issue, we might have to pick the option of \" go to SubnetManager to verify subnetId or vpcId, retrieve the range id, and then go to IP manager\".\nThe reason is that PortManager needs to visit both RouteManager and IPManager to retrieve routes and to allocate ip, respectively. SubnetManger is the source of truth to retrieve the routes under the subnet and to get the ip range id under the same subnet.\nTherefore, the workflow is like this:\n\n\nPort Manager => SubnetManager\n1.1 If Subnet Id is known, send and verify subnet Id, retrieve routes under the subnet (as SubnetManager has the latest routes) and to get range Id\n1.2 Otherwise, send vpc id to SubnetManager, SubnetManager picks one subnet, and the rest is the same as Step 1.1\n\n\nPort Manager => Ip Manager, send the range id from Step 1, and allocate ip from the given range.\n\n\nCurrently, Step 1.1 needs a new API from SubnetManager. @kevin-zhonghao and I will work to create one in a parallel PR (#181).", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423467048", "createdAt": "2020-05-12T05:16:37Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4NTA1Ng==", "bodyText": "@xieus  I have submitted the code, but it is a little different from what you described. Can you review it?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423485056", "createdAt": "2020-05-12T06:15:19Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0MzEwNw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjg2MTYzOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNToyNjoyM1rOGSZg6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozMzozN1rOGS44bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0NTU3Nw==", "bodyText": "Need two more calls:\n(1) One into RouteManager to get the routing rules of the subnet that this port belong to. The list of routing rules is the superset of Neutron router and could include SNAT/DNAT rules.\nFor now, I would recommend you to look into Subnet implementation regarding how to call RouteManager.\n\n  \n    \n      alcor/services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service/implement/SubnetServiceImp.java\n    \n    \n         Line 120\n      in\n      2ae412f\n    \n    \n    \n    \n\n        \n          \n           @Override \n        \n    \n  \n\n\n(2) The other into NodeManager which is under development.\nPR: https://github.com/futurewei-cloud/alcor/pull/185/files\nThe API you could be interested in is GET /nodes/{nodeid}.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r421945577", "createdAt": "2020-05-08T05:26:23Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID\n+        VpcRestWrap vpcRestWrap = new VpcRestWrap(vpcRest, rollbacks);\n+        CompletableFuture vpcFuture = AsyncExecutor.execute(vpcRestWrap::verifyVpc, portState);\n+\n+        CompletableFuture ipFuture;\n+        IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(ipAddressRest, rollbacks);\n+\n+        if (portState.getFixedIps() == null) {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::allocateIpAddress, portState);\n+        } else {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+        }\n+\n+        //Generate uuid for port\n+        if (portState.getId() == null) {\n+            portState.setId(UUID.randomUUID().toString());\n+        }\n+\n+        CompletableFuture macFuture;\n+        MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(macAddressRest, rollbacks);\n+\n+        if (portState.getMacAddress() == null) {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::allocateMacAddress, portState);\n+        } else {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::verifyMacAddress, portState);\n+        }\n+\n+        //Verify security group\n+\n+        //If port binds host, to send it's information to host\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0MDIyMw==", "bodyText": "Should I get route info from RouteManager or from SubnetManager? I found that RouteManager only has the interface to get route info by Vpc ID(/ vpcs/ {vpcId} / routes/ {routeId}), and there is no interface to get route info by Subnet ID. However, SubnetManager will store route info, which will be stored in RouteManager,  VpcManager. Will it take up too much memory?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422040223", "createdAt": "2020-05-08T09:21:16Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID\n+        VpcRestWrap vpcRestWrap = new VpcRestWrap(vpcRest, rollbacks);\n+        CompletableFuture vpcFuture = AsyncExecutor.execute(vpcRestWrap::verifyVpc, portState);\n+\n+        CompletableFuture ipFuture;\n+        IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(ipAddressRest, rollbacks);\n+\n+        if (portState.getFixedIps() == null) {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::allocateIpAddress, portState);\n+        } else {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+        }\n+\n+        //Generate uuid for port\n+        if (portState.getId() == null) {\n+            portState.setId(UUID.randomUUID().toString());\n+        }\n+\n+        CompletableFuture macFuture;\n+        MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(macAddressRest, rollbacks);\n+\n+        if (portState.getMacAddress() == null) {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::allocateMacAddress, portState);\n+        } else {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::verifyMacAddress, portState);\n+        }\n+\n+        //Verify security group\n+\n+        //If port binds host, to send it's information to host\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0NTU3Nw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1NDQ3Mw==", "bodyText": "For the interaction with node manager, Can i come back to do it after the development of node manager finish?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422054473", "createdAt": "2020-05-08T09:54:04Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID\n+        VpcRestWrap vpcRestWrap = new VpcRestWrap(vpcRest, rollbacks);\n+        CompletableFuture vpcFuture = AsyncExecutor.execute(vpcRestWrap::verifyVpc, portState);\n+\n+        CompletableFuture ipFuture;\n+        IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(ipAddressRest, rollbacks);\n+\n+        if (portState.getFixedIps() == null) {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::allocateIpAddress, portState);\n+        } else {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+        }\n+\n+        //Generate uuid for port\n+        if (portState.getId() == null) {\n+            portState.setId(UUID.randomUUID().toString());\n+        }\n+\n+        CompletableFuture macFuture;\n+        MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(macAddressRest, rollbacks);\n+\n+        if (portState.getMacAddress() == null) {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::allocateMacAddress, portState);\n+        } else {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::verifyMacAddress, portState);\n+        }\n+\n+        //Verify security group\n+\n+        //If port binds host, to send it's information to host\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0NTU3Nw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODUwNA==", "bodyText": "@chenpiaoping Regarding NodeManager, PR #185 is under review and should be merged pretty soon so I would recommend to write the codes based on the current APIs. You could comment out for now and test only when NodeManager is merged. Should be soon.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422458504", "createdAt": "2020-05-09T06:20:33Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID\n+        VpcRestWrap vpcRestWrap = new VpcRestWrap(vpcRest, rollbacks);\n+        CompletableFuture vpcFuture = AsyncExecutor.execute(vpcRestWrap::verifyVpc, portState);\n+\n+        CompletableFuture ipFuture;\n+        IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(ipAddressRest, rollbacks);\n+\n+        if (portState.getFixedIps() == null) {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::allocateIpAddress, portState);\n+        } else {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+        }\n+\n+        //Generate uuid for port\n+        if (portState.getId() == null) {\n+            portState.setId(UUID.randomUUID().toString());\n+        }\n+\n+        CompletableFuture macFuture;\n+        MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(macAddressRest, rollbacks);\n+\n+        if (portState.getMacAddress() == null) {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::allocateMacAddress, portState);\n+        } else {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::verifyMacAddress, portState);\n+        }\n+\n+        //Verify security group\n+\n+        //If port binds host, to send it's information to host\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0NTU3Nw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODY1MA==", "bodyText": "Regarding routing rules, I suggest to still go to RouteManager as that is the ultimate source of truth for routing information.\nI think your point is very good. We possibly need to add a new API in RouteManager to allow query by SubnetId.  Add @kevin-zhonghao for awareness.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422458650", "createdAt": "2020-05-09T06:22:55Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID\n+        VpcRestWrap vpcRestWrap = new VpcRestWrap(vpcRest, rollbacks);\n+        CompletableFuture vpcFuture = AsyncExecutor.execute(vpcRestWrap::verifyVpc, portState);\n+\n+        CompletableFuture ipFuture;\n+        IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(ipAddressRest, rollbacks);\n+\n+        if (portState.getFixedIps() == null) {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::allocateIpAddress, portState);\n+        } else {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+        }\n+\n+        //Generate uuid for port\n+        if (portState.getId() == null) {\n+            portState.setId(UUID.randomUUID().toString());\n+        }\n+\n+        CompletableFuture macFuture;\n+        MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(macAddressRest, rollbacks);\n+\n+        if (portState.getMacAddress() == null) {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::allocateMacAddress, portState);\n+        } else {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::verifyMacAddress, portState);\n+        }\n+\n+        //Verify security group\n+\n+        //If port binds host, to send it's information to host\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0NTU3Nw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODk0MA==", "bodyText": "Regarding memory usage of storing routes in SubnetManager and VpcManager that might occupy too much memory,  we haven't seen that case yet so storing routes in the upstream microservices could cut the latency for GET.\nIf you find such a case, let me know and we could quickly revisit this design.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422458940", "createdAt": "2020-05-09T06:25:59Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID\n+        VpcRestWrap vpcRestWrap = new VpcRestWrap(vpcRest, rollbacks);\n+        CompletableFuture vpcFuture = AsyncExecutor.execute(vpcRestWrap::verifyVpc, portState);\n+\n+        CompletableFuture ipFuture;\n+        IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(ipAddressRest, rollbacks);\n+\n+        if (portState.getFixedIps() == null) {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::allocateIpAddress, portState);\n+        } else {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+        }\n+\n+        //Generate uuid for port\n+        if (portState.getId() == null) {\n+            portState.setId(UUID.randomUUID().toString());\n+        }\n+\n+        CompletableFuture macFuture;\n+        MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(macAddressRest, rollbacks);\n+\n+        if (portState.getMacAddress() == null) {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::allocateMacAddress, portState);\n+        } else {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::verifyMacAddress, portState);\n+        }\n+\n+        //Verify security group\n+\n+        //If port binds host, to send it's information to host\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0NTU3Nw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTUwMQ==", "bodyText": "okay, xieus.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422459501", "createdAt": "2020-05-09T06:33:37Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,421 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.*;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import com.futurewei.alcor.web.rest.VpcRest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.concurrent.CompletableFuture;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    @Autowired\n+    private IpAddressRest ipAddressRest;\n+\n+    @Autowired\n+    private MacAddressRest macAddressRest;\n+\n+    @Autowired\n+    private VpcRest vpcRest;\n+\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks)\n+            throws Exception {\n+        while (!rollbacks.isEmpty()) {\n+            rollbacks.pop().doRollback();\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    private void tryCreatePortState(PortState portState, Stack<PortStateRollback> rollbacks) throws Exception {\n+        //Verify VPC ID\n+        VpcRestWrap vpcRestWrap = new VpcRestWrap(vpcRest, rollbacks);\n+        CompletableFuture vpcFuture = AsyncExecutor.execute(vpcRestWrap::verifyVpc, portState);\n+\n+        CompletableFuture ipFuture;\n+        IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(ipAddressRest, rollbacks);\n+\n+        if (portState.getFixedIps() == null) {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::allocateIpAddress, portState);\n+        } else {\n+            ipFuture = AsyncExecutor.execute(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+        }\n+\n+        //Generate uuid for port\n+        if (portState.getId() == null) {\n+            portState.setId(UUID.randomUUID().toString());\n+        }\n+\n+        CompletableFuture macFuture;\n+        MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(macAddressRest, rollbacks);\n+\n+        if (portState.getMacAddress() == null) {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::allocateMacAddress, portState);\n+        } else {\n+            macFuture = AsyncExecutor.execute(macAddressRestWrap::verifyMacAddress, portState);\n+        }\n+\n+        //Verify security group\n+\n+        //If port binds host, to send it's information to host\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0NTU3Nw=="}, "originalCommit": {"oid": "3f9347ed0faa742999aa8f14c53002f017baece6"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjg4NTE3OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNTo1OToyNlrOGTNk8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1NTo1MlrOGT4iEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5ODU3OQ==", "bodyText": "Could we change the default Ignite port to some numbers other than 10800 and use that new default number in the application.properties? This could prevent conflicting with a running Ignite container on the 10800 port.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422798579", "createdAt": "2020-05-11T05:59:26Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.common.db.ignite;\n+\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.Ignition;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+\n+public class MockIgniteServer {\n+    private static Ignite igniteServer;\n+\n+    @BeforeClass\n+    public static void init() {\n+        try {\n+            igniteServer = Ignition.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "583b28c432a97d9cf89271792b23eb79543df739"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgyODI1MA==", "bodyText": "That's a good idea. Let me check the ignite doc.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r422828250", "createdAt": "2020-05-11T07:11:56Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.common.db.ignite;\n+\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.Ignition;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+\n+public class MockIgniteServer {\n+    private static Ignite igniteServer;\n+\n+    @BeforeClass\n+    public static void init() {\n+        try {\n+            igniteServer = Ignition.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5ODU3OQ=="}, "originalCommit": {"oid": "583b28c432a97d9cf89271792b23eb79543df739"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMjM1NA==", "bodyText": "Thanks for making the change.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423502354", "createdAt": "2020-05-12T06:55:52Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.common.db.ignite;\n+\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.Ignition;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+\n+public class MockIgniteServer {\n+    private static Ignite igniteServer;\n+\n+    @BeforeClass\n+    public static void init() {\n+        try {\n+            igniteServer = Ignition.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5ODU3OQ=="}, "originalCommit": {"oid": "583b28c432a97d9cf89271792b23eb79543df739"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzEwNTU0OnYy", "diffSide": "RIGHT", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToyMTowM1rOGT2c3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowMzowMFrOGT4v3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2ODI1Mw==", "bodyText": "@chenpiaoping I think the MockIgniteServer and MockRedisServer are very good change which we want to merge to Master quick as other services could start using that.\nIs it possible that we split this PR into two by creating a new PR solely on the Mock change, which is supposed to consist of just a few files? Let me know.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423468253", "createdAt": "2020-05-12T05:21:03Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -18,25 +18,35 @@\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.Ignition;\n+import org.apache.ignite.configuration.ClientConnectorConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26ab3f418fe721e2ea7f79a597cef0e38626f8ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4ODUzMQ==", "bodyText": "If there is no problem with this PR so far, I think we can merge it into the master,  I'll come back and add the part of interaction with route manager and dataplane later.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423488531", "createdAt": "2020-05-12T06:24:11Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -18,25 +18,35 @@\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.Ignition;\n+import org.apache.ignite.configuration.ClientConnectorConfiguration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2ODI1Mw=="}, "originalCommit": {"oid": "26ab3f418fe721e2ea7f79a597cef0e38626f8ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MjMzMA==", "bodyText": "It's a bit troublesome to split MockIgniteServer from this PR, because many of the UTs of ip manager are based on MockIgniteServer.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423492330", "createdAt": "2020-05-12T06:33:15Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -18,25 +18,35 @@\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.Ignition;\n+import org.apache.ignite.configuration.ClientConnectorConfiguration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2ODI1Mw=="}, "originalCommit": {"oid": "26ab3f418fe721e2ea7f79a597cef0e38626f8ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NDk5NA==", "bodyText": "@chenpiaoping This PR is kind of huge with over 100 files change.  Some files are still under review.\nLet us check in small change first.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423494994", "createdAt": "2020-05-12T06:39:30Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -18,25 +18,35 @@\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.Ignition;\n+import org.apache.ignite.configuration.ClientConnectorConfiguration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2ODI1Mw=="}, "originalCommit": {"oid": "26ab3f418fe721e2ea7f79a597cef0e38626f8ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzc4Mg==", "bodyText": "@chenpiaoping I miss your last comment about this PR has dependency on the MockService. In this case, it is okay to keep MockService here. Let me try to review the rest and merge soon then.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423503782", "createdAt": "2020-05-12T06:58:46Z", "author": {"login": "xieus"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -18,25 +18,35 @@\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.Ignition;\n+import org.apache.ignite.configuration.ClientConnectorConfiguration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2ODI1Mw=="}, "originalCommit": {"oid": "26ab3f418fe721e2ea7f79a597cef0e38626f8ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNTg4NA==", "bodyText": "Thanks, xieus.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423505884", "createdAt": "2020-05-12T07:03:00Z", "author": {"login": "chenpiaoping"}, "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/MockIgniteServer.java", "diffHunk": "@@ -18,25 +18,35 @@\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.Ignition;\n+import org.apache.ignite.configuration.ClientConnectorConfiguration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2ODI1Mw=="}, "originalCommit": {"oid": "26ab3f418fe721e2ea7f79a597cef0e38626f8ca"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI1MjUzOnYy", "diffSide": "RIGHT", "path": "lib/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozMToxOFrOGT33gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowMDowMVrOGT4qIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MTQ1Ng==", "bodyText": "Does lib needs spring boot?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423491456", "createdAt": "2020-05-12T06:31:18Z", "author": {"login": "xieus"}, "path": "lib/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-thymeleaf</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNDQxNw==", "bodyText": "Oh, it doesn't need it.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423504417", "createdAt": "2020-05-12T07:00:01Z", "author": {"login": "chenpiaoping"}, "path": "lib/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-thymeleaf</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MTQ1Ng=="}, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI1OTI2OnYy", "diffSide": "RIGHT", "path": "services/port_manager/pom.xml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozMzo0MVrOGT37lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzoyNTo1N1rOGT5eQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MjUwMA==", "bodyText": "Let us turn on port manger UTs.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423492500", "createdAt": "2020-05-12T06:33:41Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>AlcorPortManager</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>AlcorPortManager</name>\n+    <description>Alcor Port Manager Module</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.futurewei.alcor.common</groupId>\n+            <artifactId>AlcorCommonLib</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.futurewei.alcor.web</groupId>\n+            <artifactId>AlcorWeb</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.4</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <skip>true</skip>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMjU5MQ==", "bodyText": "The UT of port manager need to interact with many microservices. If it is opened, the test will fail. Do you have any suggestions?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423502591", "createdAt": "2020-05-12T06:56:20Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>AlcorPortManager</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>AlcorPortManager</name>\n+    <description>Alcor Port Manager Module</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.futurewei.alcor.common</groupId>\n+            <artifactId>AlcorCommonLib</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.futurewei.alcor.web</groupId>\n+            <artifactId>AlcorWeb</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.4</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <skip>true</skip>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MjUwMA=="}, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxMTQ4NQ==", "bodyText": "@chenpiaoping SubnetManager UTs has similar issues previously and used Mockito to solve this problem. Check this out:\nhttps://github.com/futurewei-cloud/alcor/blob/master/services/subnet_manager/src/test/java/com/futurewei/alcor/subnet/SubnetControllerTests.java", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423511485", "createdAt": "2020-05-12T07:14:09Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>AlcorPortManager</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>AlcorPortManager</name>\n+    <description>Alcor Port Manager Module</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.futurewei.alcor.common</groupId>\n+            <artifactId>AlcorCommonLib</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.futurewei.alcor.web</groupId>\n+            <artifactId>AlcorWeb</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.4</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <skip>true</skip>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MjUwMA=="}, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxMzI2MA==", "bodyText": "@chenpiaoping I will complete reviewing the rest of PR by tomorrow. Meanwhile please use the time to turn on UTs and address existing comments.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423513260", "createdAt": "2020-05-12T07:17:32Z", "author": {"login": "xieus"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>AlcorPortManager</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>AlcorPortManager</name>\n+    <description>Alcor Port Manager Module</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.futurewei.alcor.common</groupId>\n+            <artifactId>AlcorCommonLib</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.futurewei.alcor.web</groupId>\n+            <artifactId>AlcorWeb</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.4</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <skip>true</skip>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MjUwMA=="}, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxNzc2MA==", "bodyText": "Okay, thanks xieus.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423517760", "createdAt": "2020-05-12T07:25:57Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/pom.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>AlcorPortManager</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>AlcorPortManager</name>\n+    <description>Alcor Port Manager Module</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.futurewei.alcor.common</groupId>\n+            <artifactId>AlcorCommonLib</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.futurewei.alcor.web</groupId>\n+            <artifactId>AlcorWeb</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.4</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <skip>true</skip>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MjUwMA=="}, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI2MjMwOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/config/ThreadPoolExecutorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNDo1MFrOGT39cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNDo1MFrOGT39cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5Mjk3OA==", "bodyText": "These are critical parameters. Need comments.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423492978", "createdAt": "2020-05-12T06:34:50Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/config/ThreadPoolExecutorConfig.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.futurewei.alcor.portmanager.config;\n+\n+public class ThreadPoolExecutorConfig {\n+\n+    public static int corePoolSize = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzI2NDQ5OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/exception/AllocateIpAddrException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNTozN1rOGT3-uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjozNTozN1rOGT3-uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MzMwNA==", "bodyText": "Like it!", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423493304", "createdAt": "2020-05-12T06:35:37Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/exception/AllocateIpAddrException.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.exception;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(code= HttpStatus.INTERNAL_SERVER_ERROR, reason=\"Allocate ip address error\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzM0MTEzOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/executor/AsyncExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowMjoyOFrOGT4uyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNToyMjoxOFrOGVMb8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNTYwOQ==", "bodyText": "This could move to /lib once proven to be reliable in IP manager.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423505609", "createdAt": "2020-05-12T07:02:28Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/executor/AsyncExecutor.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.executor;\n+\n+import com.futurewei.alcor.portmanager.config.ThreadPoolExecutorConfig;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.*;\n+import java.util.function.Supplier;\n+\n+public class AsyncExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg3NzA0Mw==", "bodyText": "@chenpiaoping Could we move the AsycExecutor at this time?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424877043", "createdAt": "2020-05-14T05:22:18Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/executor/AsyncExecutor.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.executor;\n+\n+import com.futurewei.alcor.portmanager.config.ThreadPoolExecutorConfig;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.*;\n+import java.util.function.Supplier;\n+\n+public class AsyncExecutor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwNTYwOQ=="}, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzM1NzQ1OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/controller/PortController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowNzo0OVrOGT44_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzowNzo0OVrOGT44_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwODIyMQ==", "bodyText": "We could verify the input parameters in the controller level.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r423508221", "createdAt": "2020-05-12T07:07:49Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/controller/PortController.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.controller;\n+\n+\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.PortStateJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.List;\n+\n+\n+@RestController\n+public class PortController {\n+    @Autowired\n+    PortService portService;\n+\n+    @PostMapping({\"/project/{project_id}/ports\", \"v4/{project_id}/ports\"})\n+    @ResponseBody\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public PortStateJson createPortState(@PathVariable(\"project_id\") String projectId,\n+                                         @RequestBody PortStateJson portStateJson) throws Exception {\n+        return portService.createPortState(projectId, portStateJson);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d778d48bd1830a5f8c3aaf2d67c71477019051a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzc0OTI0OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/utils/BeanUtil.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo0Nzo1NFrOGU4F-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoxNDo1M1rOGVNaVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0MzczNw==", "bodyText": "It would fit into the scope of AlcorLib. Let us move it there.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424543737", "createdAt": "2020-05-13T15:47:54Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/utils/BeanUtil.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.utils;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class BeanUtil implements ApplicationContextAware {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxNTk5Ng==", "bodyText": "yes, I thought too, but it didn't work.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424815996", "createdAt": "2020-05-14T01:10:41Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/utils/BeanUtil.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.utils;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class BeanUtil implements ApplicationContextAware {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0MzczNw=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg3NTg1MQ==", "bodyText": "Is this because of \"@component\" that you will need to launch this bean within the scope of AlcorPortManager?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424875851", "createdAt": "2020-05-14T05:18:01Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/utils/BeanUtil.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.utils;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class BeanUtil implements ApplicationContextAware {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0MzczNw=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MzAxMg==", "bodyText": "Oh, maybe, Let me have a try.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424893012", "createdAt": "2020-05-14T06:14:53Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/utils/BeanUtil.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.utils;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class BeanUtil implements ApplicationContextAware {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0MzczNw=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzc3NTg1OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/rest/AbstractRest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo1Mzo0N1rOGU4WzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjozNjowN1rOGVN5zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0ODA0NA==", "bodyText": "I would suggest to rename it to AbstractRestClient.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424548044", "createdAt": "2020-05-13T15:53:47Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/rest/AbstractRest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.rest;\n+\n+import org.springframework.web.client.RestTemplate;\n+\n+abstract class AbstractRest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NDE0NA==", "bodyText": "The name your suggest sounds more reasonable, should we also rename all the XXXRest to XXXRestClient?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424894144", "createdAt": "2020-05-14T06:18:04Z", "author": {"login": "chenpiaoping"}, "path": "web/src/main/java/com/futurewei/alcor/web/rest/AbstractRest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.rest;\n+\n+import org.springframework.web.client.RestTemplate;\n+\n+abstract class AbstractRest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0ODA0NA=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMTA2OA==", "bodyText": "@chenpiaoping Sure. The comment applies to other classes in the same directory and the directory itself (rest=>restClient).", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424901068", "createdAt": "2020-05-14T06:36:07Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/rest/AbstractRest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.rest;\n+\n+import org.springframework.web.client.RestTemplate;\n+\n+abstract class AbstractRest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0ODA0NA=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzc3OTEwOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/rest/VpcRest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo1NDozMlrOGU4Y2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoyMDoxNVrOGVNhyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0ODU3MA==", "bodyText": "I would suggest to rename it to VpcRestClient. Similar suggestion applies to classes in the same directory.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424548570", "createdAt": "2020-05-13T15:54:32Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/rest/VpcRest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.rest;\n+\n+import com.futurewei.alcor.web.entity.vpc.VpcStateJson;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class VpcRest extends AbstractRest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NDkyMw==", "bodyText": "ok", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424894923", "createdAt": "2020-05-14T06:20:15Z", "author": {"login": "chenpiaoping"}, "path": "web/src/main/java/com/futurewei/alcor/web/rest/VpcRest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.rest;\n+\n+import com.futurewei.alcor.web.entity.vpc.VpcStateJson;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class VpcRest extends AbstractRest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0ODU3MA=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTExODUxOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoyNzoyN1rOGVFskQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoyNzoyN1rOGVFskQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2NjYwOQ==", "bodyText": "Recommend to use\n\nIpManagerRestClient\nSubnetManagerRestClient", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424766609", "createdAt": "2020-05-13T22:27:27Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {\n+    private IpAddressRest ipAddressRest;\n+    private SubnetRest subnetRest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTg0OTgyOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTozNDowM1rOGVMpDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzozNDowMVrOGVPj2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MDM5OA==", "bodyText": "In general, direct type casting is not recommended for downcasting.\nCould you try cast() and isInstance() methods for safer downcasting?\nA reference: https://www.baeldung.com/java-type-casting", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424880398", "createdAt": "2020-05-14T05:34:03Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {\n+    private IpAddressRest ipAddressRest;\n+    private SubnetRest subnetRest;\n+    private Stack<PortStateRollback> rollbacks;\n+    private String projectId;\n+\n+    public IpAddressRestWrap(Stack<PortStateRollback> rollbacks, String projectId) {\n+        ipAddressRest = BeanUtil.getBean(IpAddressRest.class);\n+        subnetRest = BeanUtil.getBean(SubnetRest.class);\n+        this.rollbacks = rollbacks;\n+        this.projectId = projectId;\n+    }\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        SubnetStateJson subnetStateJson = subnetRest.getSubnetState(projectId, subnetId);\n+        if (subnetStateJson == null || subnetStateJson.getSubnet() == null) {\n+            throw new VerifySubnetException();\n+        }\n+\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ipAddr) {\n+        if (rollback instanceof AllocateIpAddrRollback) {\n+            rollback.putAllocatedIpAddress(ipAddr);\n+        } else {\n+            rollback.putReleasedIpAddress(ipAddr);\n+        }\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+        List<IpAddrRequest> ipAddrRequests = new ArrayList<>();\n+        PortState portState = (PortState)args;\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(IpVersion.IPV4,\n+                portState.getVpcId(), null, null);\n+\n+        List<PortState.FixedIp> fixedIps = new ArrayList<>();\n+        PortState.FixedIp fixedIp = new PortState.FixedIp(result.getSubnetId(), result.getIp());\n+\n+        fixedIps.add(fixedIp);\n+        portState.setFixedIps(fixedIps);\n+\n+        addIpAddrRollback(new AllocateIpAddrRollback(ipAddressRest), result);\n+\n+        ipAddrRequests.add(result);\n+\n+        return ipAddrRequests;\n+    }\n+\n+    public List<IpAddrRequest> verifyIpAddresses(Object args) throws Exception {\n+        List<IpAddrRequest> ipAddrRequests = new ArrayList<>();\n+        List<PortState.FixedIp> fixedIps = (List<PortState.FixedIp>)args;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyODIxNg==", "bodyText": "Don't worry, an exception will be thrown if there is a type conversion error, which is exactly what I expected when the type conversion failed.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424928216", "createdAt": "2020-05-14T07:34:01Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {\n+    private IpAddressRest ipAddressRest;\n+    private SubnetRest subnetRest;\n+    private Stack<PortStateRollback> rollbacks;\n+    private String projectId;\n+\n+    public IpAddressRestWrap(Stack<PortStateRollback> rollbacks, String projectId) {\n+        ipAddressRest = BeanUtil.getBean(IpAddressRest.class);\n+        subnetRest = BeanUtil.getBean(SubnetRest.class);\n+        this.rollbacks = rollbacks;\n+        this.projectId = projectId;\n+    }\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        SubnetStateJson subnetStateJson = subnetRest.getSubnetState(projectId, subnetId);\n+        if (subnetStateJson == null || subnetStateJson.getSubnet() == null) {\n+            throw new VerifySubnetException();\n+        }\n+\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ipAddr) {\n+        if (rollback instanceof AllocateIpAddrRollback) {\n+            rollback.putAllocatedIpAddress(ipAddr);\n+        } else {\n+            rollback.putReleasedIpAddress(ipAddr);\n+        }\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+        List<IpAddrRequest> ipAddrRequests = new ArrayList<>();\n+        PortState portState = (PortState)args;\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(IpVersion.IPV4,\n+                portState.getVpcId(), null, null);\n+\n+        List<PortState.FixedIp> fixedIps = new ArrayList<>();\n+        PortState.FixedIp fixedIp = new PortState.FixedIp(result.getSubnetId(), result.getIp());\n+\n+        fixedIps.add(fixedIp);\n+        portState.setFixedIps(fixedIps);\n+\n+        addIpAddrRollback(new AllocateIpAddrRollback(ipAddressRest), result);\n+\n+        ipAddrRequests.add(result);\n+\n+        return ipAddrRequests;\n+    }\n+\n+    public List<IpAddrRequest> verifyIpAddresses(Object args) throws Exception {\n+        List<IpAddrRequest> ipAddrRequests = new ArrayList<>();\n+        List<PortState.FixedIp> fixedIps = (List<PortState.FixedIp>)args;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MDM5OA=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTg2MjQzOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0MToxMFrOGVMw9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjozODoyMVrOGVN9cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjQyMw==", "bodyText": "How about Ipv6? Could we use sth like \"portState.IpVersion\" instead of fixing with IPv4?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424882423", "createdAt": "2020-05-14T05:41:10Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {\n+    private IpAddressRest ipAddressRest;\n+    private SubnetRest subnetRest;\n+    private Stack<PortStateRollback> rollbacks;\n+    private String projectId;\n+\n+    public IpAddressRestWrap(Stack<PortStateRollback> rollbacks, String projectId) {\n+        ipAddressRest = BeanUtil.getBean(IpAddressRest.class);\n+        subnetRest = BeanUtil.getBean(SubnetRest.class);\n+        this.rollbacks = rollbacks;\n+        this.projectId = projectId;\n+    }\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        SubnetStateJson subnetStateJson = subnetRest.getSubnetState(projectId, subnetId);\n+        if (subnetStateJson == null || subnetStateJson.getSubnet() == null) {\n+            throw new VerifySubnetException();\n+        }\n+\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ipAddr) {\n+        if (rollback instanceof AllocateIpAddrRollback) {\n+            rollback.putAllocatedIpAddress(ipAddr);\n+        } else {\n+            rollback.putReleasedIpAddress(ipAddr);\n+        }\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+        List<IpAddrRequest> ipAddrRequests = new ArrayList<>();\n+        PortState portState = (PortState)args;\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(IpVersion.IPV4,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5ODkxNQ==", "bodyText": "There is no ipVersion field in portState, do you think only ipv4 address is assigned to port by default, or both ipv4 and ipv6 addresses are assigned?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424898915", "createdAt": "2020-05-14T06:30:44Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {\n+    private IpAddressRest ipAddressRest;\n+    private SubnetRest subnetRest;\n+    private Stack<PortStateRollback> rollbacks;\n+    private String projectId;\n+\n+    public IpAddressRestWrap(Stack<PortStateRollback> rollbacks, String projectId) {\n+        ipAddressRest = BeanUtil.getBean(IpAddressRest.class);\n+        subnetRest = BeanUtil.getBean(SubnetRest.class);\n+        this.rollbacks = rollbacks;\n+        this.projectId = projectId;\n+    }\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        SubnetStateJson subnetStateJson = subnetRest.getSubnetState(projectId, subnetId);\n+        if (subnetStateJson == null || subnetStateJson.getSubnet() == null) {\n+            throw new VerifySubnetException();\n+        }\n+\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ipAddr) {\n+        if (rollback instanceof AllocateIpAddrRollback) {\n+            rollback.putAllocatedIpAddress(ipAddr);\n+        } else {\n+            rollback.putReleasedIpAddress(ipAddr);\n+        }\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+        List<IpAddrRequest> ipAddrRequests = new ArrayList<>();\n+        PortState portState = (PortState)args;\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(IpVersion.IPV4,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjQyMw=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMjAwMA==", "bodyText": "I see. Ipv4v6 is something we need to support as well. Maybe put it in your backlog and do it when you get a chance.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424902000", "createdAt": "2020-05-14T06:38:21Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {\n+    private IpAddressRest ipAddressRest;\n+    private SubnetRest subnetRest;\n+    private Stack<PortStateRollback> rollbacks;\n+    private String projectId;\n+\n+    public IpAddressRestWrap(Stack<PortStateRollback> rollbacks, String projectId) {\n+        ipAddressRest = BeanUtil.getBean(IpAddressRest.class);\n+        subnetRest = BeanUtil.getBean(SubnetRest.class);\n+        this.rollbacks = rollbacks;\n+        this.projectId = projectId;\n+    }\n+\n+    private int getIpVersion(String ipAddress) throws Exception {\n+        if (Ipv4AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV4.getVersion();\n+        } else if (Ipv6AddrUtil.formatCheck(ipAddress)) {\n+            return IpVersion.IPV6.getVersion();\n+        } else {\n+            throw new IpAddrInvalidException();\n+        }\n+    }\n+\n+    private String getRangeIdBySubnetId(String subnetId, int ipVersion) throws Exception {\n+        SubnetStateJson subnetStateJson = subnetRest.getSubnetState(projectId, subnetId);\n+        if (subnetStateJson == null || subnetStateJson.getSubnet() == null) {\n+            throw new VerifySubnetException();\n+        }\n+\n+        if (IpVersion.IPV4.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        } else if (IpVersion.IPV6.getVersion() == ipVersion) {\n+            return subnetStateJson.getSubnet().getIpV4RangeId();\n+        }\n+\n+        throw new IpVersionInvalidException();\n+    }\n+\n+    private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ipAddr) {\n+        if (rollback instanceof AllocateIpAddrRollback) {\n+            rollback.putAllocatedIpAddress(ipAddr);\n+        } else {\n+            rollback.putReleasedIpAddress(ipAddr);\n+        }\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+        List<IpAddrRequest> ipAddrRequests = new ArrayList<>();\n+        PortState portState = (PortState)args;\n+\n+        IpAddrRequest result = ipAddressRest.allocateIpAddress(IpVersion.IPV4,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjQyMw=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTg2NTU0OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0Mjo1MlrOGVMy7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjozMzoyOFrOGVN1nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjkyNA==", "bodyText": "allocateIpAddress => allocateRandomIpAddress\nverifyIpAddresses=> allocateFixedIpAddress", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424882924", "createdAt": "2020-05-14T05:42:52Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.NodeRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.host.*;\n+import com.futurewei.alcor.web.entity.RouterState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks) {\n+        while (!rollbacks.isEmpty()) {\n+            PortStateRollback rollback = rollbacks.pop();\n+\n+            try {\n+                rollback.doRollback();\n+            } catch (Exception e) {\n+                LOG.error(\"{} roll back failed: {}\", rollback, e);\n+            }\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    public PortStateJson createPortState(String projectId, PortStateJson portStateJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n+\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n+\n+        PortState portState = portStateJson.getPortState();\n+        portState.setProjectId(projectId);\n+\n+        try {\n+            //Verify VPC ID\n+            VpcRestWrap vpcRestWrap = new VpcRestWrap(rollbacks);\n+            executor.runAsync(vpcRestWrap::verifyVpc, portState);\n+\n+            IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(rollbacks, portState.getProjectId());\n+            if (portState.getFixedIps() == null) {\n+                executor.runAsync(ipAddressRestWrap::allocateIpAddress, portState);\n+            } else {\n+                executor.runAsync(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5OTk5OQ==", "bodyText": "sounds reasonable.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424899999", "createdAt": "2020-05-14T06:33:28Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.NodeRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.host.*;\n+import com.futurewei.alcor.web.entity.RouterState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks) {\n+        while (!rollbacks.isEmpty()) {\n+            PortStateRollback rollback = rollbacks.pop();\n+\n+            try {\n+                rollback.doRollback();\n+            } catch (Exception e) {\n+                LOG.error(\"{} roll back failed: {}\", rollback, e);\n+            }\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    public PortStateJson createPortState(String projectId, PortStateJson portStateJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n+\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n+\n+        PortState portState = portStateJson.getPortState();\n+        portState.setProjectId(projectId);\n+\n+        try {\n+            //Verify VPC ID\n+            VpcRestWrap vpcRestWrap = new VpcRestWrap(rollbacks);\n+            executor.runAsync(vpcRestWrap::verifyVpc, portState);\n+\n+            IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(rollbacks, portState.getProjectId());\n+            if (portState.getFixedIps() == null) {\n+                executor.runAsync(ipAddressRestWrap::allocateIpAddress, portState);\n+            } else {\n+                executor.runAsync(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjkyNA=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTg3MTAwOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0NTo1NVrOGVM2RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0NTo1NVrOGVM2RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4Mzc4MQ==", "bodyText": "allocateMacAddress => allocateRandomMacAddress\nverifyMacAddress => allocateFixedMacAddress", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424883781", "createdAt": "2020-05-14T05:45:55Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.NodeRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.host.*;\n+import com.futurewei.alcor.web.entity.RouterState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks) {\n+        while (!rollbacks.isEmpty()) {\n+            PortStateRollback rollback = rollbacks.pop();\n+\n+            try {\n+                rollback.doRollback();\n+            } catch (Exception e) {\n+                LOG.error(\"{} roll back failed: {}\", rollback, e);\n+            }\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    public PortStateJson createPortState(String projectId, PortStateJson portStateJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n+\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n+\n+        PortState portState = portStateJson.getPortState();\n+        portState.setProjectId(projectId);\n+\n+        try {\n+            //Verify VPC ID\n+            VpcRestWrap vpcRestWrap = new VpcRestWrap(rollbacks);\n+            executor.runAsync(vpcRestWrap::verifyVpc, portState);\n+\n+            IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(rollbacks, portState.getProjectId());\n+            if (portState.getFixedIps() == null) {\n+                executor.runAsync(ipAddressRestWrap::allocateIpAddress, portState);\n+            } else {\n+                executor.runAsync(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+            }\n+\n+            //Generate uuid for port\n+            if (portState.getId() == null) {\n+                portState.setId(UUID.randomUUID().toString());\n+            }\n+\n+            MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(rollbacks);\n+            if (portState.getMacAddress() == null) {\n+                executor.runAsync(macAddressRestWrap::allocateMacAddress, portState);\n+            } else {\n+                executor.runAsync(macAddressRestWrap::verifyMacAddress, portState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTg4NjQxOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/MacAddressRestWrap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo1NDoxMlrOGVM_uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjozNToxM1rOGVN4Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4NjIwMw==", "bodyText": "API (2) in Mac manager actually could set a fixed mac address in the rest body (the impl might not be there but at least the interface has that).\nRef: https://github.com/futurewei-cloud/alcor/blob/master/docs/design/mac_manager.adoc", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424886203", "createdAt": "2020-05-14T05:54:12Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/MacAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.mac.MacState;\n+import com.futurewei.alcor.web.entity.mac.MacStateJson;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import java.util.Stack;\n+\n+public class MacAddressRestWrap {\n+    private MacAddressRest macAddressRest;\n+    private Stack<PortStateRollback> rollbacks;\n+\n+    public MacAddressRestWrap(Stack<PortStateRollback> rollbacks) {\n+        macAddressRest = BeanUtil.getBean(MacAddressRest.class);\n+        this.rollbacks = rollbacks;\n+    }\n+\n+    private void addMacAddrRollback(AbstractMacAddrRollback rollback, MacState macState) {\n+        if (rollback instanceof AllocateMacAddrRollback) {\n+            rollback.putAllocatedMacAddress(macState);\n+        } else {\n+            rollback.putReleasedMacAddress(macState);\n+        }\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    public MacStateJson allocateMacAddress(Object args) throws Exception {\n+        PortState portState = (PortState)args;\n+\n+        MacStateJson result = macAddressRest.allocateMacAddress(portState.getProjectId(), portState.getVpcId(), portState.getId());\n+        portState.setMacAddress(result.getMacState().getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(portState.getProjectId());\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        addMacAddrRollback(new AllocateMacAddrRollback(macAddressRest), macState);\n+\n+        return result;\n+    }\n+\n+    public MacStateJson verifyMacAddress(Object args) {\n+        //FIXME: Not support yet\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMDY5MQ==", "bodyText": "that would be nice.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424900691", "createdAt": "2020-05-14T06:35:13Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/MacAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.mac.MacState;\n+import com.futurewei.alcor.web.entity.mac.MacStateJson;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.rest.MacAddressRest;\n+import java.util.Stack;\n+\n+public class MacAddressRestWrap {\n+    private MacAddressRest macAddressRest;\n+    private Stack<PortStateRollback> rollbacks;\n+\n+    public MacAddressRestWrap(Stack<PortStateRollback> rollbacks) {\n+        macAddressRest = BeanUtil.getBean(MacAddressRest.class);\n+        this.rollbacks = rollbacks;\n+    }\n+\n+    private void addMacAddrRollback(AbstractMacAddrRollback rollback, MacState macState) {\n+        if (rollback instanceof AllocateMacAddrRollback) {\n+            rollback.putAllocatedMacAddress(macState);\n+        } else {\n+            rollback.putReleasedMacAddress(macState);\n+        }\n+\n+        rollbacks.push(rollback);\n+    }\n+\n+    public MacStateJson allocateMacAddress(Object args) throws Exception {\n+        PortState portState = (PortState)args;\n+\n+        MacStateJson result = macAddressRest.allocateMacAddress(portState.getProjectId(), portState.getVpcId(), portState.getId());\n+        portState.setMacAddress(result.getMacState().getMacAddress());\n+\n+        MacState macState = new MacState();\n+        macState.setProjectId(portState.getProjectId());\n+        macState.setVpcId(portState.getVpcId());\n+        macState.setMacAddress(portState.getMacAddress());\n+\n+        addMacAddrRollback(new AllocateMacAddrRollback(macAddressRest), macState);\n+\n+        return result;\n+    }\n+\n+    public MacStateJson verifyMacAddress(Object args) {\n+        //FIXME: Not support yet\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4NjIwMw=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTkwNTY2OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjowMzozMVrOGVNLZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjowMzozMVrOGVNLZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4OTE4OQ==", "bodyText": "Hmm, this is really tricky. We will need a good Timeout story to upper bound the rollback.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424889189", "createdAt": "2020-05-14T06:03:31Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.NodeRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.host.*;\n+import com.futurewei.alcor.web.entity.RouterState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks) {\n+        while (!rollbacks.isEmpty()) {\n+            PortStateRollback rollback = rollbacks.pop();\n+\n+            try {\n+                rollback.doRollback();\n+            } catch (Exception e) {\n+                LOG.error(\"{} roll back failed: {}\", rollback, e);\n+            }\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    public PortStateJson createPortState(String projectId, PortStateJson portStateJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n+\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n+\n+        PortState portState = portStateJson.getPortState();\n+        portState.setProjectId(projectId);\n+\n+        try {\n+            //Verify VPC ID\n+            VpcRestWrap vpcRestWrap = new VpcRestWrap(rollbacks);\n+            executor.runAsync(vpcRestWrap::verifyVpc, portState);\n+\n+            IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(rollbacks, portState.getProjectId());\n+            if (portState.getFixedIps() == null) {\n+                executor.runAsync(ipAddressRestWrap::allocateIpAddress, portState);\n+            } else {\n+                executor.runAsync(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+            }\n+\n+            //Generate uuid for port\n+            if (portState.getId() == null) {\n+                portState.setId(UUID.randomUUID().toString());\n+            }\n+\n+            MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(rollbacks);\n+            if (portState.getMacAddress() == null) {\n+                executor.runAsync(macAddressRestWrap::allocateMacAddress, portState);\n+            } else {\n+                executor.runAsync(macAddressRestWrap::verifyMacAddress, portState);\n+            }\n+\n+            //Verify security group\n+\n+            //Verify Binding Host ID\n+            if (portState.getBindingHostId() != null) {\n+                NodeRestWrap nodeRestWrap = new NodeRestWrap(rollbacks);\n+                nodeRestWrap.verifyHost(portState.getBindingHostId());\n+            }\n+\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n+\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            /**\n+            When an exception occurs, we need to roll back all asynchronous operations,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTkyODczOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoxNDo0MlrOGVNaAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoxNDo0MlrOGVNaAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MjkyOQ==", "bodyText": "Looks like we'll need a bit more time for updatePortState. It is fine and let us do it in next PR.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424892929", "createdAt": "2020-05-14T06:14:42Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/implement/PortServiceImpl.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service.implement;\n+\n+import com.futurewei.alcor.portmanager.executor.AsyncExecutor;\n+import com.futurewei.alcor.portmanager.exception.*;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.portmanager.restwrap.IpAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.MacAddressRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.NodeRestWrap;\n+import com.futurewei.alcor.portmanager.restwrap.VpcRestWrap;\n+import com.futurewei.alcor.portmanager.rollback.*;\n+import com.futurewei.alcor.portmanager.service.PortService;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.host.*;\n+import com.futurewei.alcor.web.entity.RouterState;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Service;\n+import java.util.*;\n+\n+@Service\n+@ComponentScan(value=\"com.futurewei.alcor.web.rest\")\n+public class PortServiceImpl implements PortService {\n+    private static final Logger LOG = LoggerFactory.getLogger(PortServiceImpl.class);\n+\n+    @Autowired\n+    private PortRepository portRepository;\n+\n+    private void getDefaultSecurityGroup(PortState portState) {\n+        //FIXME: send get tenant default security group\n+        String defaultSgId =  \"tenant-default-security-group-id\";\n+\n+        List<String> securityGroups = new ArrayList<>();\n+        securityGroups.add(defaultSgId);\n+\n+        portState.setSecurityGroups(securityGroups);\n+    }\n+\n+    private void verifySecurityGroup(PortState portState) {\n+        List<String> securityGroups = portState.getSecurityGroups();\n+        String tenantId = portState.getTenantId();\n+\n+        for (String securityGroup: securityGroups) {\n+            //FIXME: send verify tenant security group\n+        }\n+    }\n+\n+    private void unbindSecurityGroups(PortState portState) {\n+\n+    }\n+\n+    private void bindSecurityGroups(PortState portState) {\n+        verifySecurityGroup(portState);\n+\n+        //FIXME: Not support yet\n+    }\n+\n+    private void rollBackAllOperations(Stack<PortStateRollback> rollbacks) {\n+        while (!rollbacks.isEmpty()) {\n+            PortStateRollback rollback = rollbacks.pop();\n+\n+            try {\n+                rollback.doRollback();\n+            } catch (Exception e) {\n+                LOG.error(\"{} roll back failed: {}\", rollback, e);\n+            }\n+        }\n+    }\n+\n+    private HostState getHostState(String hostId) {\n+        return null;\n+    }\n+\n+    private void addPortToHost(String hostId) {\n+        HostState hostState = getHostState(hostId);\n+\n+        //FIXME: Add port to Host\n+    }\n+\n+    public PortStateJson createPortState(String projectId, PortStateJson portStateJson) throws Exception {\n+        LOG.debug(\"Create port state, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n+\n+        Stack<PortStateRollback> rollbacks = new Stack<>();\n+        AsyncExecutor executor = new AsyncExecutor();\n+\n+        PortState portState = portStateJson.getPortState();\n+        portState.setProjectId(projectId);\n+\n+        try {\n+            //Verify VPC ID\n+            VpcRestWrap vpcRestWrap = new VpcRestWrap(rollbacks);\n+            executor.runAsync(vpcRestWrap::verifyVpc, portState);\n+\n+            IpAddressRestWrap ipAddressRestWrap = new IpAddressRestWrap(rollbacks, portState.getProjectId());\n+            if (portState.getFixedIps() == null) {\n+                executor.runAsync(ipAddressRestWrap::allocateIpAddress, portState);\n+            } else {\n+                executor.runAsync(ipAddressRestWrap::verifyIpAddresses, portState.getFixedIps());\n+            }\n+\n+            //Generate uuid for port\n+            if (portState.getId() == null) {\n+                portState.setId(UUID.randomUUID().toString());\n+            }\n+\n+            MacAddressRestWrap macAddressRestWrap = new MacAddressRestWrap(rollbacks);\n+            if (portState.getMacAddress() == null) {\n+                executor.runAsync(macAddressRestWrap::allocateMacAddress, portState);\n+            } else {\n+                executor.runAsync(macAddressRestWrap::verifyMacAddress, portState);\n+            }\n+\n+            //Verify security group\n+\n+            //Verify Binding Host ID\n+            if (portState.getBindingHostId() != null) {\n+                NodeRestWrap nodeRestWrap = new NodeRestWrap(rollbacks);\n+                nodeRestWrap.verifyHost(portState.getBindingHostId());\n+            }\n+\n+            //Wait for all async functions to finish\n+            executor.joinAll();\n+\n+            //Persist portState\n+            portRepository.addItem(portState);\n+        } catch (Exception e) {\n+            /**\n+            When an exception occurs, we need to roll back all asynchronous operations,\n+            and some asynchronous may not be finished yet.if we roll back at this time,\n+             they may not be completed until the rollback operation is completed.\n+             as a result, they cannot be rolled back.\n+             */\n+            executor.waitAll();\n+            rollBackAllOperations(rollbacks);\n+            throw e;\n+        }\n+\n+        LOG.info(\"Create port state success, projectId: {}, PortStateJson: {}\", projectId, portStateJson);\n+\n+        return portStateJson;\n+    }\n+\n+    private RouterState getRouterState(String routerId) {\n+        return null;\n+    }\n+\n+    private void verifyRouter(String deviceId, String tenantId) throws Exception {\n+        RouterState routerState = getRouterState(deviceId);\n+\n+        if (routerState == null) {\n+            throw new RouterNotFoundException();\n+        }\n+\n+        if (!tenantId.equals(routerState.getTenantId())) {\n+            throw new RouterNotOwnedByTenant();\n+        }\n+    }\n+\n+    private Map<String, Set<String>> fixedIpsToMap(List<PortState.FixedIp> fixedIps) {\n+        Map<String, Set<String>> subnetIpsMap = new HashMap<>();\n+\n+        for (PortState.FixedIp fixedIp: fixedIps) {\n+            if (subnetIpsMap.containsKey(fixedIp.getSubnetId())) {\n+                subnetIpsMap.get(fixedIp.getSubnetId()).add(fixedIp.getIpAddress());\n+            } else {\n+                Set<String> ips = new HashSet<>();\n+                ips.add(fixedIp.getIpAddress());\n+                subnetIpsMap.put(fixedIp.getSubnetId(), ips);\n+            }\n+        }\n+\n+        return subnetIpsMap;\n+    }\n+\n+    private List<PortState.FixedIp> fixedIpsCompare(List<PortState.FixedIp> fixedIps1, List<PortState.FixedIp> fixedIps2) {\n+        List<PortState.FixedIp> addFixedIps = new ArrayList<>();\n+        Map<String, Set<String>> subnetIpsMap = fixedIpsToMap(fixedIps2);\n+\n+        for (PortState.FixedIp fixedIp: fixedIps1) {\n+            String subnetId = fixedIp.getSubnetId();\n+            String ipAddress = fixedIp.getIpAddress();\n+            if (subnetIpsMap.containsKey(subnetId)) {\n+                if (!subnetIpsMap.get(subnetId).contains(ipAddress)) {\n+                    addFixedIps.add(fixedIp);\n+                }\n+            } else {\n+                addFixedIps.add(fixedIp);\n+            }\n+        }\n+\n+        return addFixedIps;\n+    }\n+\n+    private void updateSecurityGroup(PortState portState, PortState oldPortState) throws Exception {\n+        String deviceOwner = portState.getDeviceOwner();\n+\n+        //Network device interface does not need security groups\n+        if (deviceOwner != null && deviceOwner.indexOf(\"network\") > 0) {\n+            throw new UpdateSecurityGroupException();\n+        }\n+\n+        //Verify request security groups valid\n+        verifySecurityGroup(portState);\n+\n+        //Delete old security groups binding\n+        unbindSecurityGroups(oldPortState);\n+\n+        //Create security groups binding for port\n+        bindSecurityGroups(portState);\n+\n+        oldPortState.setSecurityGroups(portState.getSecurityGroups());\n+    }\n+\n+    private void UpdateExtraDhcpOpts(PortState portState, PortState portStateOld) {\n+\n+    }\n+\n+    private void updatePortToHost(PortState portState) {\n+\n+    }\n+\n+    public PortStateJson updatePortState(String projectId, String portId, PortStateJson portStateJson) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTkzMDk4OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/PortService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoxNTozNVrOGVNbWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoxNTozNVrOGVNbWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MzI3Mg==", "bodyText": "We will need the bulk create API.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424893272", "createdAt": "2020-05-14T06:15:35Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/service/PortService.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.service;\n+\n+\n+import com.futurewei.alcor.web.entity.port.PortStateJson;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.List;\n+\n+@Service\n+public interface PortService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTk1ODAyOnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/controller/PortControllerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjoyNzoxMlrOGVNr7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjo0OTo1MFrOGVORUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NzUxNg==", "bodyText": "vpc/port/mac/ip/mac are in their own sub-dictionary in com.futurewei.alcor.web.entity.\nsubnet and route are still one level up.\n\nLet us create the same sub-dictionary for subnet and route. Later we could ask other microservices to use the new web classes path and retire the existing ones.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424897516", "createdAt": "2020-05-14T06:27:12Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/controller/PortControllerTest.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.controller;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.futurewei.alcor.portmanager.config.UnitTestConfig;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.mac.*;\n+import com.futurewei.alcor.web.entity.vpc.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMzk0OQ==", "bodyText": "subnet and route are still one level up.--->This will cause other microservices to fail to compile. or I need to modify the code of other microservices. Can I do this in the next PR?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424903949", "createdAt": "2020-05-14T06:42:47Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/controller/PortControllerTest.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.controller;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.futurewei.alcor.portmanager.config.UnitTestConfig;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.mac.*;\n+import com.futurewei.alcor.web.entity.vpc.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NzUxNg=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNjIzNw==", "bodyText": "I would suggest you to add two new sub-dictionaries, one for subnet and the other for route, copy those web classes to the new dictionaries, and reference only in PortManager.\nWe would ask other microservice owners to make the change pointing to the new classes and then remove old/existing ones.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424906237", "createdAt": "2020-05-14T06:47:50Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/controller/PortControllerTest.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.controller;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.futurewei.alcor.portmanager.config.UnitTestConfig;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.mac.*;\n+import com.futurewei.alcor.web.entity.vpc.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NzUxNg=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNzA5MA==", "bodyText": "Got it.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424907090", "createdAt": "2020-05-14T06:49:50Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/controller/PortControllerTest.java", "diffHunk": "@@ -0,0 +1,335 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.controller;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.futurewei.alcor.portmanager.config.UnitTestConfig;\n+import com.futurewei.alcor.portmanager.repo.PortRepository;\n+import com.futurewei.alcor.web.entity.port.*;\n+import com.futurewei.alcor.web.entity.mac.*;\n+import com.futurewei.alcor.web.entity.vpc.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NzUxNg=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTk3NjA2OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjozNDoxNlrOGVN2wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzoyMzozNFrOGVPO6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMDI5MA==", "bodyText": "Maybe rename it to \"IpAddressRestWrapper\". It applies to other classes in the same directory and the directory itself.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424900290", "createdAt": "2020-05-14T06:34:16Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNzU3NA==", "bodyText": "I always think wrap or wrapper is not a good name. Do you have any good suggestions?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424917574", "createdAt": "2020-05-14T07:12:46Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMDI5MA=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkyMjg1Nw==", "bodyText": "A few options:\n\nIpAddressRestCoordinator\nIpAddressRestWorker\nIpAddressRestTask\n\n@chenpiaoping It is up to you :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r424922857", "createdAt": "2020-05-14T07:23:34Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/restwrap/IpAddressRestWrap.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.portmanager.restwrap;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.portmanager.exception.RangeIdNotFoundException;\n+import com.futurewei.alcor.portmanager.exception.VerifySubnetException;\n+import com.futurewei.alcor.portmanager.rollback.AbstractIpAddrRollback;\n+import com.futurewei.alcor.portmanager.utils.BeanUtil;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import com.futurewei.alcor.web.entity.port.PortState;\n+import com.futurewei.alcor.web.entity.SubnetStateJson;\n+import com.futurewei.alcor.web.rest.IpAddressRest;\n+import com.futurewei.alcor.portmanager.exception.IpAddrInvalidException;\n+import com.futurewei.alcor.portmanager.exception.IpVersionInvalidException;\n+import com.futurewei.alcor.portmanager.rollback.AllocateIpAddrRollback;\n+import com.futurewei.alcor.portmanager.rollback.PortStateRollback;\n+import com.futurewei.alcor.portmanager.rollback.ReleaseIpAddrRollback;\n+import com.futurewei.alcor.web.rest.SubnetRest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class IpAddressRestWrap {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMDI5MA=="}, "originalCommit": {"oid": "0a23e9a6c01b9e9739544cc9dbda1e4f23816cde"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzA2ODc4OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/controller/PortController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo1MjoyN1rOGVYsUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo1MjoyN1rOGVYsUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3Nzg0MQ==", "bodyText": "Very nice comments! Thank you.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425077841", "createdAt": "2020-05-14T11:52:27Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/controller/PortController.java", "diffHunk": "@@ -30,6 +30,16 @@\n     @Autowired\n     PortService portService;\n \n+    /**\n+     * Create a port, and call the interfaces of each micro-service according to the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzA4ODc0OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo1ODo1M1rOGVY47g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjozNzowMVrOGVaLDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MTA3MA==", "bodyText": "@chenpiaoping, my previous comment may not be 100% clear. I meant that IPv4 only and Ipv4v6 should both be supported, with IPv4 only the default option.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425081070", "createdAt": "2020-05-14T11:58:53Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "diffHunk": "@@ -84,27 +84,47 @@ private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ip\n         rollbacks.push(rollback);\n     }\n \n-    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+    /**\n+     * Allocate a random ipv4 and ipv6 address from ip manager service\n+     * @param args PortState\n+     * @return A list of IpAddrRequest\n+     * @throws Exception Rest request exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NDc2Mg==", "bodyText": "I see, should i revert it?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425084762", "createdAt": "2020-05-14T12:06:05Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "diffHunk": "@@ -84,27 +84,47 @@ private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ip\n         rollbacks.push(rollback);\n     }\n \n-    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+    /**\n+     * Allocate a random ipv4 and ipv6 address from ip manager service\n+     * @param args PortState\n+     * @return A list of IpAddrRequest\n+     * @throws Exception Rest request exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MTA3MA=="}, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NzA0Nw==", "bodyText": "Those are good change. Maybe by default we only trigger Ipv4 allocation, but add one more flag to trigger additional Ipv6 allocation.\nNeutron may or may not have this field. Let me quickly check.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425087047", "createdAt": "2020-05-14T12:10:19Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "diffHunk": "@@ -84,27 +84,47 @@ private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ip\n         rollbacks.push(rollback);\n     }\n \n-    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+    /**\n+     * Allocate a random ipv4 and ipv6 address from ip manager service\n+     * @param args PortState\n+     * @return A list of IpAddrRequest\n+     * @throws Exception Rest request exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MTA3MA=="}, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5MDY3Ng==", "bodyText": "I think if there is ipv6 subnet in the vpc, the ipv6 address will be assigned.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425090676", "createdAt": "2020-05-14T12:16:51Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "diffHunk": "@@ -84,27 +84,47 @@ private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ip\n         rollbacks.push(rollback);\n     }\n \n-    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+    /**\n+     * Allocate a random ipv4 and ipv6 address from ip manager service\n+     * @param args PortState\n+     * @return A list of IpAddrRequest\n+     * @throws Exception Rest request exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MTA3MA=="}, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5MTgxMg==", "bodyText": "My current implementation may not be very reasonable.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425091812", "createdAt": "2020-05-14T12:18:51Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "diffHunk": "@@ -84,27 +84,47 @@ private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ip\n         rollbacks.push(rollback);\n     }\n \n-    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+    /**\n+     * Allocate a random ipv4 and ipv6 address from ip manager service\n+     * @param args PortState\n+     * @return A list of IpAddrRequest\n+     * @throws Exception Rest request exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MTA3MA=="}, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5Nzc5NQ==", "bodyText": "It is totally fine, we do the development and design in an iterative/agile way: When we find it something not right, we change it quickly.\nMy current thinking is: This should be a consistent behavior on VPC level. If a VPC allows Ipv6, every of its Subnets will have Ipv6 ranges therefore trigger Ipv4v6 allocation here.\nIn our Subnet Object, there is a Ipv4RangeId and a Ipv6RangeId. Therefore our logic could be that if the Ipv6RangeId is not null, we allocate Ipv6 here. Does this make sense?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425097795", "createdAt": "2020-05-14T12:29:28Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "diffHunk": "@@ -84,27 +84,47 @@ private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ip\n         rollbacks.push(rollback);\n     }\n \n-    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+    /**\n+     * Allocate a random ipv4 and ipv6 address from ip manager service\n+     * @param args PortState\n+     * @return A list of IpAddrRequest\n+     * @throws Exception Rest request exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MTA3MA=="}, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5OTg3MA==", "bodyText": "Agree with you, but i think i need to make some changes in ip manager.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425099870", "createdAt": "2020-05-14T12:33:01Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "diffHunk": "@@ -84,27 +84,47 @@ private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ip\n         rollbacks.push(rollback);\n     }\n \n-    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+    /**\n+     * Allocate a random ipv4 and ipv6 address from ip manager service\n+     * @param args PortState\n+     * @return A list of IpAddrRequest\n+     * @throws Exception Rest request exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MTA3MA=="}, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwMTE1NQ==", "bodyText": "It's time for me to get off work, will do it tomorrow.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425101155", "createdAt": "2020-05-14T12:35:15Z", "author": {"login": "chenpiaoping"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "diffHunk": "@@ -84,27 +84,47 @@ private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ip\n         rollbacks.push(rollback);\n     }\n \n-    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+    /**\n+     * Allocate a random ipv4 and ipv6 address from ip manager service\n+     * @param args PortState\n+     * @return A list of IpAddrRequest\n+     * @throws Exception Rest request exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MTA3MA=="}, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwMjA5NA==", "bodyText": "I see. Might not be a small change considering here requires a full set of UTs.\nLet us comment out Ipv6 allocation part in this PR, and continue to improve it in next PR.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425102094", "createdAt": "2020-05-14T12:37:01Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/IpManagerProxy.java", "diffHunk": "@@ -84,27 +84,47 @@ private void addIpAddrRollback(AbstractIpAddrRollback rollback, IpAddrRequest ip\n         rollbacks.push(rollback);\n     }\n \n-    public List<IpAddrRequest> allocateIpAddress(Object args) throws Exception {\n+    /**\n+     * Allocate a random ipv4 and ipv6 address from ip manager service\n+     * @param args PortState\n+     * @return A list of IpAddrRequest\n+     * @throws Exception Rest request exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MTA3MA=="}, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzExMjk0OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/restclient/MacManagerRestClient.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjowNjozNVrOGVZIRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNToyNzo1NFrOGVhv9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NDk5OA==", "bodyText": "is this a macAddress or macId?", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425084998", "createdAt": "2020-05-14T12:06:35Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/restclient/MacManagerRestClient.java", "diffHunk": "@@ -40,11 +40,12 @@ public void releaseMacAddress(String macAddress) throws Exception {\n         restTemplate.delete(url);\n     }\n \n-    public MacStateJson allocateMacAddress(String projectId, String vpcId, String portId) throws Exception {\n+    public MacStateJson allocateMacAddress(String projectId, String vpcId, String portId, String mac) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NTgyMg==", "bodyText": "macAddress", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425085822", "createdAt": "2020-05-14T12:08:11Z", "author": {"login": "chenpiaoping"}, "path": "web/src/main/java/com/futurewei/alcor/web/restclient/MacManagerRestClient.java", "diffHunk": "@@ -40,11 +40,12 @@ public void releaseMacAddress(String macAddress) throws Exception {\n         restTemplate.delete(url);\n     }\n \n-    public MacStateJson allocateMacAddress(String projectId, String vpcId, String portId) throws Exception {\n+    public MacStateJson allocateMacAddress(String projectId, String vpcId, String portId, String mac) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NDk5OA=="}, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NjI3Mw==", "bodyText": "Let me rename it.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425086273", "createdAt": "2020-05-14T12:09:00Z", "author": {"login": "chenpiaoping"}, "path": "web/src/main/java/com/futurewei/alcor/web/restclient/MacManagerRestClient.java", "diffHunk": "@@ -40,11 +40,12 @@ public void releaseMacAddress(String macAddress) throws Exception {\n         restTemplate.delete(url);\n     }\n \n-    public MacStateJson allocateMacAddress(String projectId, String vpcId, String portId) throws Exception {\n+    public MacStateJson allocateMacAddress(String projectId, String vpcId, String portId, String mac) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NDk5OA=="}, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIyNjIzMQ==", "bodyText": "No worries. I made changes to expedite the merge.", "url": "https://github.com/futurewei-cloud/alcor/pull/180#discussion_r425226231", "createdAt": "2020-05-14T15:27:54Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/restclient/MacManagerRestClient.java", "diffHunk": "@@ -40,11 +40,12 @@ public void releaseMacAddress(String macAddress) throws Exception {\n         restTemplate.delete(url);\n     }\n \n-    public MacStateJson allocateMacAddress(String projectId, String vpcId, String portId) throws Exception {\n+    public MacStateJson allocateMacAddress(String projectId, String vpcId, String portId, String mac) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NDk5OA=="}, "originalCommit": {"oid": "aa8c0f97a1364612491af1d5515bd90884372a80"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4729, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}