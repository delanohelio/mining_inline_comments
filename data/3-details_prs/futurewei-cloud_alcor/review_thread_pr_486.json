{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MDA1MDQw", "number": 486, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzoyNjo0NFrOE94n-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyOTo0M1rOE_nn8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzI2MzI5OnYy", "diffSide": "LEFT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/DataPlaneClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzoyNjo0NFrOH6zdGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODowODoyNFrOH60cUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMjQ4OQ==", "bodyText": "A quick question: why do we remove these interfaces?", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531422489", "createdAt": "2020-11-27T07:26:44Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/DataPlaneClient.java", "diffHunk": "@@ -26,15 +26,7 @@\n \n @Component\n public interface DataPlaneClient {\n-    Map<String, List<GoalStateOperationStatus>> createGoalStates(GoalState goalState, String hostIp) throws Exception;\n-\n-    List<Map<String, List<GoalStateOperationStatus>>> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;\n-\n-    List<Map<String, List<GoalStateOperationStatus>>> updateGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;\n-\n-    List<Map<String, List<GoalStateOperationStatus>>> deleteGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d36fa8048e495b5a75fd909ec134d68a98841916"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMzEwNQ==", "bodyText": "Actually it is okay to keep the interfaces which reminds us that we need to implement in the future.", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531423105", "createdAt": "2020-11-27T07:28:39Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/DataPlaneClient.java", "diffHunk": "@@ -26,15 +26,7 @@\n \n @Component\n public interface DataPlaneClient {\n-    Map<String, List<GoalStateOperationStatus>> createGoalStates(GoalState goalState, String hostIp) throws Exception;\n-\n-    List<Map<String, List<GoalStateOperationStatus>>> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;\n-\n-    List<Map<String, List<GoalStateOperationStatus>>> updateGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;\n-\n-    List<Map<String, List<GoalStateOperationStatus>>> deleteGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMjQ4OQ=="}, "originalCommit": {"oid": "d36fa8048e495b5a75fd909ec134d68a98841916"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzODY3Mw==", "bodyText": "I was thinking about adding it when I needed it.", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531438673", "createdAt": "2020-11-27T08:08:24Z", "author": {"login": "chenpiaoping"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/DataPlaneClient.java", "diffHunk": "@@ -26,15 +26,7 @@\n \n @Component\n public interface DataPlaneClient {\n-    Map<String, List<GoalStateOperationStatus>> createGoalStates(GoalState goalState, String hostIp) throws Exception;\n-\n-    List<Map<String, List<GoalStateOperationStatus>>> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;\n-\n-    List<Map<String, List<GoalStateOperationStatus>>> updateGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;\n-\n-    List<Map<String, List<GoalStateOperationStatus>>> deleteGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMjQ4OQ=="}, "originalCommit": {"oid": "d36fa8048e495b5a75fd909ec134d68a98841916"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzI3ODg0OnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/ovs/ResourceService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozMzoxN1rOH6zmDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozMzoxN1rOH6zmDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDc4MA==", "bodyText": "ResourceService class could be moved on layer up to com.futurewei.alcor.dataplane.service;", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531424780", "createdAt": "2020-11-27T07:33:17Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/ovs/ResourceService.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.service.ovs;\n+\n+import com.futurewei.alcor.schema.Common.OperationType;\n+\n+public class ResourceService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d36fa8048e495b5a75fd909ec134d68a98841916"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzMwMTA1OnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzo0MjoyMFrOH6zy9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzozNjoxM1rOH9N1lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODA4NA==", "bodyText": "Suggest to log this unusual portEntity (at least on the DEBUG level) as this is an unexpected scenario.", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531428084", "createdAt": "2020-11-27T07:42:20Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.cache;\n+\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.web.entity.dataplane.InternalPortEntity;\n+import com.futurewei.alcor.web.entity.dataplane.InternalSubnetEntity;\n+import com.futurewei.alcor.web.entity.dataplane.v2.NetworkConfiguration;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.port.PortHostInfo;\n+import com.futurewei.alcor.web.entity.subnet.InternalSubnetPorts;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Repository\n+public class LocalCacheImpl implements LocalCache {\n+    @Autowired\n+    private SubnetPortsCache subnetPortsCache;\n+\n+    @Override\n+    public void addSubnetPorts(NetworkConfiguration networkConfig) throws Exception {\n+        List<InternalPortEntity> portEntities = networkConfig.getPortEntities();\n+        if (portEntities == null) {\n+            return;\n+        }\n+\n+        Map<String, InternalSubnetPorts> subnetPortsMap = new HashMap<>();\n+        for (InternalPortEntity portEntity: portEntities) {\n+            List<PortEntity.FixedIp> fixedIps = portEntity.getFixedIps();\n+            if (fixedIps == null) {\n+                continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d36fa8048e495b5a75fd909ec134d68a98841916"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzODg3NA==", "bodyText": "Good idea", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531438874", "createdAt": "2020-11-27T08:08:50Z", "author": {"login": "chenpiaoping"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.cache;\n+\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.web.entity.dataplane.InternalPortEntity;\n+import com.futurewei.alcor.web.entity.dataplane.InternalSubnetEntity;\n+import com.futurewei.alcor.web.entity.dataplane.v2.NetworkConfiguration;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.port.PortHostInfo;\n+import com.futurewei.alcor.web.entity.subnet.InternalSubnetPorts;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Repository\n+public class LocalCacheImpl implements LocalCache {\n+    @Autowired\n+    private SubnetPortsCache subnetPortsCache;\n+\n+    @Override\n+    public void addSubnetPorts(NetworkConfiguration networkConfig) throws Exception {\n+        List<InternalPortEntity> portEntities = networkConfig.getPortEntities();\n+        if (portEntities == null) {\n+            return;\n+        }\n+\n+        Map<String, InternalSubnetPorts> subnetPortsMap = new HashMap<>();\n+        for (InternalPortEntity portEntity: portEntities) {\n+            List<PortEntity.FixedIp> fixedIps = portEntity.getFixedIps();\n+            if (fixedIps == null) {\n+                continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODA4NA=="}, "originalCommit": {"oid": "d36fa8048e495b5a75fd909ec134d68a98841916"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1MTg5Mg==", "bodyText": "fixed", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r533951892", "createdAt": "2020-12-02T07:36:13Z", "author": {"login": "chenpiaoping"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.cache;\n+\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.web.entity.dataplane.InternalPortEntity;\n+import com.futurewei.alcor.web.entity.dataplane.InternalSubnetEntity;\n+import com.futurewei.alcor.web.entity.dataplane.v2.NetworkConfiguration;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.port.PortHostInfo;\n+import com.futurewei.alcor.web.entity.subnet.InternalSubnetPorts;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Repository\n+public class LocalCacheImpl implements LocalCache {\n+    @Autowired\n+    private SubnetPortsCache subnetPortsCache;\n+\n+    @Override\n+    public void addSubnetPorts(NetworkConfiguration networkConfig) throws Exception {\n+        List<InternalPortEntity> portEntities = networkConfig.getPortEntities();\n+        if (portEntities == null) {\n+            return;\n+        }\n+\n+        Map<String, InternalSubnetPorts> subnetPortsMap = new HashMap<>();\n+        for (InternalPortEntity portEntity: portEntities) {\n+            List<PortEntity.FixedIp> fixedIps = portEntity.getFixedIps();\n+            if (fixedIps == null) {\n+                continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODA4NA=="}, "originalCommit": {"oid": "d36fa8048e495b5a75fd909ec134d68a98841916"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzMwNjY1OnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzo0NDo1MlrOH6z2Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzozNTo1NVrOH9N0_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODk1NA==", "bodyText": "GW port could be retrieved from SubnetEntity I believe.", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531428954", "createdAt": "2020-11-27T07:44:52Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.cache;\n+\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.web.entity.dataplane.InternalPortEntity;\n+import com.futurewei.alcor.web.entity.dataplane.InternalSubnetEntity;\n+import com.futurewei.alcor.web.entity.dataplane.v2.NetworkConfiguration;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.port.PortHostInfo;\n+import com.futurewei.alcor.web.entity.subnet.InternalSubnetPorts;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Repository\n+public class LocalCacheImpl implements LocalCache {\n+    @Autowired\n+    private SubnetPortsCache subnetPortsCache;\n+\n+    @Override\n+    public void addSubnetPorts(NetworkConfiguration networkConfig) throws Exception {\n+        List<InternalPortEntity> portEntities = networkConfig.getPortEntities();\n+        if (portEntities == null) {\n+            return;\n+        }\n+\n+        Map<String, InternalSubnetPorts> subnetPortsMap = new HashMap<>();\n+        for (InternalPortEntity portEntity: portEntities) {\n+            List<PortEntity.FixedIp> fixedIps = portEntity.getFixedIps();\n+            if (fixedIps == null) {\n+                continue;\n+            }\n+\n+            for (PortEntity.FixedIp fixedIp: fixedIps) {\n+                String subnetId = fixedIp.getSubnetId();\n+\n+                PortHostInfo portHostInfo = new PortHostInfo();\n+                portHostInfo.setPortMac(portEntity.getMacAddress());\n+                portHostInfo.setPortIp(fixedIp.getIpAddress());\n+                portHostInfo.setPortId(portEntity.getId());\n+                portHostInfo.setHostIp(portEntity.getBindingHostIP());\n+                portHostInfo.setHostId(portEntity.getBindingHostId());\n+\n+                InternalSubnetPorts subnetPorts = subnetPortsMap.get(subnetId);\n+                if (subnetPorts == null) {\n+                    SubnetEntity subnetEntity = getSubnetEntity(networkConfig, fixedIp.getSubnetId());\n+                    subnetPorts = new InternalSubnetPorts();\n+                    subnetPorts.setSubnetId(subnetId);\n+                    subnetPorts.setGatewayPortMac(subnetEntity.getGatewayMacAddress());\n+                    subnetPorts.setGatewayPortIp(subnetEntity.getGatewayIp());\n+\n+                    //FIXME: get the gateway port id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d36fa8048e495b5a75fd909ec134d68a98841916"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MDE0MQ==", "bodyText": "OK, I'll check it out.", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531440141", "createdAt": "2020-11-27T08:11:31Z", "author": {"login": "chenpiaoping"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.cache;\n+\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.web.entity.dataplane.InternalPortEntity;\n+import com.futurewei.alcor.web.entity.dataplane.InternalSubnetEntity;\n+import com.futurewei.alcor.web.entity.dataplane.v2.NetworkConfiguration;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.port.PortHostInfo;\n+import com.futurewei.alcor.web.entity.subnet.InternalSubnetPorts;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Repository\n+public class LocalCacheImpl implements LocalCache {\n+    @Autowired\n+    private SubnetPortsCache subnetPortsCache;\n+\n+    @Override\n+    public void addSubnetPorts(NetworkConfiguration networkConfig) throws Exception {\n+        List<InternalPortEntity> portEntities = networkConfig.getPortEntities();\n+        if (portEntities == null) {\n+            return;\n+        }\n+\n+        Map<String, InternalSubnetPorts> subnetPortsMap = new HashMap<>();\n+        for (InternalPortEntity portEntity: portEntities) {\n+            List<PortEntity.FixedIp> fixedIps = portEntity.getFixedIps();\n+            if (fixedIps == null) {\n+                continue;\n+            }\n+\n+            for (PortEntity.FixedIp fixedIp: fixedIps) {\n+                String subnetId = fixedIp.getSubnetId();\n+\n+                PortHostInfo portHostInfo = new PortHostInfo();\n+                portHostInfo.setPortMac(portEntity.getMacAddress());\n+                portHostInfo.setPortIp(fixedIp.getIpAddress());\n+                portHostInfo.setPortId(portEntity.getId());\n+                portHostInfo.setHostIp(portEntity.getBindingHostIP());\n+                portHostInfo.setHostId(portEntity.getBindingHostId());\n+\n+                InternalSubnetPorts subnetPorts = subnetPortsMap.get(subnetId);\n+                if (subnetPorts == null) {\n+                    SubnetEntity subnetEntity = getSubnetEntity(networkConfig, fixedIp.getSubnetId());\n+                    subnetPorts = new InternalSubnetPorts();\n+                    subnetPorts.setSubnetId(subnetId);\n+                    subnetPorts.setGatewayPortMac(subnetEntity.getGatewayMacAddress());\n+                    subnetPorts.setGatewayPortIp(subnetEntity.getGatewayIp());\n+\n+                    //FIXME: get the gateway port id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODk1NA=="}, "originalCommit": {"oid": "d36fa8048e495b5a75fd909ec134d68a98841916"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1MTc0MA==", "bodyText": "fixed", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r533951740", "createdAt": "2020-12-02T07:35:55Z", "author": {"login": "chenpiaoping"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.cache;\n+\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.web.entity.dataplane.InternalPortEntity;\n+import com.futurewei.alcor.web.entity.dataplane.InternalSubnetEntity;\n+import com.futurewei.alcor.web.entity.dataplane.v2.NetworkConfiguration;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.port.PortHostInfo;\n+import com.futurewei.alcor.web.entity.subnet.InternalSubnetPorts;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Repository\n+public class LocalCacheImpl implements LocalCache {\n+    @Autowired\n+    private SubnetPortsCache subnetPortsCache;\n+\n+    @Override\n+    public void addSubnetPorts(NetworkConfiguration networkConfig) throws Exception {\n+        List<InternalPortEntity> portEntities = networkConfig.getPortEntities();\n+        if (portEntities == null) {\n+            return;\n+        }\n+\n+        Map<String, InternalSubnetPorts> subnetPortsMap = new HashMap<>();\n+        for (InternalPortEntity portEntity: portEntities) {\n+            List<PortEntity.FixedIp> fixedIps = portEntity.getFixedIps();\n+            if (fixedIps == null) {\n+                continue;\n+            }\n+\n+            for (PortEntity.FixedIp fixedIp: fixedIps) {\n+                String subnetId = fixedIp.getSubnetId();\n+\n+                PortHostInfo portHostInfo = new PortHostInfo();\n+                portHostInfo.setPortMac(portEntity.getMacAddress());\n+                portHostInfo.setPortIp(fixedIp.getIpAddress());\n+                portHostInfo.setPortId(portEntity.getId());\n+                portHostInfo.setHostIp(portEntity.getBindingHostIP());\n+                portHostInfo.setHostId(portEntity.getBindingHostId());\n+\n+                InternalSubnetPorts subnetPorts = subnetPortsMap.get(subnetId);\n+                if (subnetPorts == null) {\n+                    SubnetEntity subnetEntity = getSubnetEntity(networkConfig, fixedIp.getSubnetId());\n+                    subnetPorts = new InternalSubnetPorts();\n+                    subnetPorts.setSubnetId(subnetId);\n+                    subnetPorts.setGatewayPortMac(subnetEntity.getGatewayMacAddress());\n+                    subnetPorts.setGatewayPortIp(subnetEntity.getGatewayIp());\n+\n+                    //FIXME: get the gateway port id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODk1NA=="}, "originalCommit": {"oid": "d36fa8048e495b5a75fd909ec134d68a98841916"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQ0OTQ0OnYy", "diffSide": "RIGHT", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/DataPlaneClientImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyOTo0M1rOH9a8mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyOTo0M1rOH9a8mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2NjY4MQ==", "bodyText": "In the case of large number of neighbors, this for-loop could slow down potentially. See if we can optimize this part. @chenpiaoping", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r534166681", "createdAt": "2020-12-02T13:29:43Z", "author": {"login": "xieus"}, "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/DataPlaneClientImpl.java", "diffHunk": "@@ -102,22 +95,32 @@ private void createGoalState(MulticastGoalState multicastGoalState) throws Excep\n \n             multicastGoalState.setNextTopics(groupTopics);\n \n-            Producer<MulticastGoalStateByte> producer = pulsarClient\n-                    .newProducer(JSONSchema.of(MulticastGoalStateByte.class))\n-                    .topic(multicastTopic)\n-                    .enableBatching(false)\n-                    .create();\n-\n-            producer.send(multicastGoalState.getMulticastGoalStateByte());\n+            try {\n+                Producer<MulticastGoalStateByte> producer = pulsarClient\n+                        .newProducer(JSONSchema.of(MulticastGoalStateByte.class))\n+                        .topic(multicastTopic)\n+                        .enableBatching(false)\n+                        .create();\n+\n+                producer.send(multicastGoalState.getMulticastGoalStateByte());\n+            } catch (Exception e) {\n+                LOG.error(\"Send multicastGoalState to topic:{} failed: \", multicastTopic, e);\n+                failedHosts.addAll(multicastGoalState.getHostIps());\n+                continue;\n+            }\n \n             LOG.info(\"Send multicastGoalState to topic:{} success, \" +\n                             \"groupTopics: {}, unicastGoalStates: {}\",\n                     multicastTopic, groupTopics, multicastGoalState);\n         }\n+\n+        return failedHosts;\n     }\n \n     @Override\n-    public List<Map<String, List<Goalstateprovisioner.GoalStateOperationReply.GoalStateOperationStatus>>> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception {\n+    public List<String> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception {\n+        List<String> failedHosts = new ArrayList<>();\n+\n         for (UnicastGoalState unicastGoalState: unicastGoalStates) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6961a9a8d6df07c3cf745d48cded249527a4011e"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4476, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}