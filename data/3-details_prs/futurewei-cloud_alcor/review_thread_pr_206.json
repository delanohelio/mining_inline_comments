{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwOTg3MzY1", "number": 206, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNTozMTo1OVrOD-epyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjowNzowOFrOD-xHqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODQwNTIwOnYy", "diffSide": "LEFT", "path": "services/mac_manager/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNTozMTo1OVrOGYmtDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo0NDo1M1rOGZAZAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1MzEzMg==", "bodyText": "Thanks!", "url": "https://github.com/futurewei-cloud/alcor/pull/206#discussion_r428453132", "createdAt": "2020-05-21T05:31:59Z", "author": {"login": "xieus"}, "path": "services/mac_manager/pom.xml", "diffHunk": "@@ -51,12 +51,6 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n-            <exclusions>\n-                <exclusion>\n-                    <groupId>org.junit.vintage</groupId>\n-                    <artifactId>junit-vintage-engine</artifactId>\n-                </exclusion>\n-            </exclusions>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0ae3f61a17a784d40a5245f120d242d8b821d8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3Mzk4NQ==", "bodyText": "You are most welcome!!", "url": "https://github.com/futurewei-cloud/alcor/pull/206#discussion_r428873985", "createdAt": "2020-05-21T19:44:53Z", "author": {"login": "kimeunju108"}, "path": "services/mac_manager/pom.xml", "diffHunk": "@@ -51,12 +51,6 @@\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-test</artifactId>\n             <scope>test</scope>\n-            <exclusions>\n-                <exclusion>\n-                    <groupId>org.junit.vintage</groupId>\n-                    <artifactId>junit-vintage-engine</artifactId>\n-                </exclusion>\n-            </exclusions>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1MzEzMg=="}, "originalCommit": {"oid": "db0ae3f61a17a784d40a5245f120d242d8b821d8"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODQyOTc4OnYy", "diffSide": "RIGHT", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/implement/MacServiceImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNTo0Njo1M1rOGYm8aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjoxMjowOVrOGZEq7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1NzA2NA==", "bodyText": "Please add brief comments here to describe the algorithm.", "url": "https://github.com/futurewei-cloud/alcor/pull/206#discussion_r428457064", "createdAt": "2020-05-21T05:46:53Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/implement/MacServiceImpl.java", "diffHunk": "@@ -62,236 +65,337 @@\n     @Value(\"${macmanager.retrylimit}\")\n     private long nRetryLimit;\n \n-    public MacState getMacStateByMacAddress(String macAddress) throws Exception {\n+    /**\n+     * get MacState\n+     *\n+     * @param macAddress\n+     * @return MAC address allocation state\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     */\n+    public MacState getMacStateByMacAddress(String macAddress) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacAddressInvalidException {\n         MacState macState = null;\n         if (macAddress == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         try {\n             macState = macStateRepository.findItem(macAddress);\n+        } catch (CacheException e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION, e);\n         } catch (Exception e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+        }\n+        return macState;\n+    }\n+\n+    /**\n+     * create a MacState in default MAC range\n+     *\n+     * @param macState MAC allocation state\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing     *\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    public MacState createMacState(MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressFullException, MacAddressRetryLimitExceedException {\n+        if (macState == null)\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+        String rangeId = MacManagerConstant.DEFAULT_RANGE;\n+        try {\n+            macState = createMacStateInRange(rangeId, macState);\n+        } catch (CacheException e) {\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION);\n+        } catch (MacRangeInvalidException | MacAddressUniquenessViolationException | MacAddressFullException | MacAddressRetryLimitExceedException e) {\n             throw e;\n         }\n         return macState;\n     }\n \n-    public MacState createMacState(MacState macState) throws Exception {\n+    /**\n+     * create a MacState\n+     *\n+     * @param macState MAC allocation state\n+     * @param rangeId  MAC address range to create\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    @Override\n+    public MacState createMacStateInRange(String rangeId, MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressRetryLimitExceedException, MacAddressFullException {\n         if (macState == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         MacAddress macAddress = new MacAddress();\n         if (macState.getState() == null)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n         else if (macState.getState().trim().length() == 0)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n-        if (macPoolRepository.getSize() < (nMacPoolSize - 10)) {\n-            CompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> {\n-                long n = 0;\n-                try {\n-                    n = generateMacInPool(20);\n-                } catch (Exception e) {\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n \n+        try {\n+            MacRange range = macRangeRepository.findItem(rangeId);\n+            if (range == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0ae3f61a17a784d40a5245f120d242d8b821d8"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3Mzk2OA==", "bodyText": "Done\n//MAC address is generated in a MAC range betwen from ~ to, if there is no active user defined MAC range, by default default MAC range is applied.\n//Default MAC range: name is defined MacManagerConstant class, range is entire oui range. e.g.)\n// if oui=AA-BB-CC then default MAC range is AA-BB-CC-00-00-00 ~ AA-BB-CC-FF-FF-FF.", "url": "https://github.com/futurewei-cloud/alcor/pull/206#discussion_r428873968", "createdAt": "2020-05-21T19:44:52Z", "author": {"login": "kimeunju108"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/implement/MacServiceImpl.java", "diffHunk": "@@ -62,236 +65,337 @@\n     @Value(\"${macmanager.retrylimit}\")\n     private long nRetryLimit;\n \n-    public MacState getMacStateByMacAddress(String macAddress) throws Exception {\n+    /**\n+     * get MacState\n+     *\n+     * @param macAddress\n+     * @return MAC address allocation state\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     */\n+    public MacState getMacStateByMacAddress(String macAddress) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacAddressInvalidException {\n         MacState macState = null;\n         if (macAddress == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         try {\n             macState = macStateRepository.findItem(macAddress);\n+        } catch (CacheException e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION, e);\n         } catch (Exception e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+        }\n+        return macState;\n+    }\n+\n+    /**\n+     * create a MacState in default MAC range\n+     *\n+     * @param macState MAC allocation state\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing     *\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    public MacState createMacState(MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressFullException, MacAddressRetryLimitExceedException {\n+        if (macState == null)\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+        String rangeId = MacManagerConstant.DEFAULT_RANGE;\n+        try {\n+            macState = createMacStateInRange(rangeId, macState);\n+        } catch (CacheException e) {\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION);\n+        } catch (MacRangeInvalidException | MacAddressUniquenessViolationException | MacAddressFullException | MacAddressRetryLimitExceedException e) {\n             throw e;\n         }\n         return macState;\n     }\n \n-    public MacState createMacState(MacState macState) throws Exception {\n+    /**\n+     * create a MacState\n+     *\n+     * @param macState MAC allocation state\n+     * @param rangeId  MAC address range to create\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    @Override\n+    public MacState createMacStateInRange(String rangeId, MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressRetryLimitExceedException, MacAddressFullException {\n         if (macState == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         MacAddress macAddress = new MacAddress();\n         if (macState.getState() == null)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n         else if (macState.getState().trim().length() == 0)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n-        if (macPoolRepository.getSize() < (nMacPoolSize - 10)) {\n-            CompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> {\n-                long n = 0;\n-                try {\n-                    n = generateMacInPool(20);\n-                } catch (Exception e) {\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n \n+        try {\n+            MacRange range = macRangeRepository.findItem(rangeId);\n+            if (range == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1NzA2NA=="}, "originalCommit": {"oid": "db0ae3f61a17a784d40a5245f120d242d8b821d8"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0MTkxNQ==", "bodyText": "Thanks. You could add those comments along with the codes, instead of in the PR.", "url": "https://github.com/futurewei-cloud/alcor/pull/206#discussion_r428941915", "createdAt": "2020-05-21T22:06:00Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/implement/MacServiceImpl.java", "diffHunk": "@@ -62,236 +65,337 @@\n     @Value(\"${macmanager.retrylimit}\")\n     private long nRetryLimit;\n \n-    public MacState getMacStateByMacAddress(String macAddress) throws Exception {\n+    /**\n+     * get MacState\n+     *\n+     * @param macAddress\n+     * @return MAC address allocation state\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     */\n+    public MacState getMacStateByMacAddress(String macAddress) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacAddressInvalidException {\n         MacState macState = null;\n         if (macAddress == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         try {\n             macState = macStateRepository.findItem(macAddress);\n+        } catch (CacheException e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION, e);\n         } catch (Exception e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+        }\n+        return macState;\n+    }\n+\n+    /**\n+     * create a MacState in default MAC range\n+     *\n+     * @param macState MAC allocation state\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing     *\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    public MacState createMacState(MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressFullException, MacAddressRetryLimitExceedException {\n+        if (macState == null)\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+        String rangeId = MacManagerConstant.DEFAULT_RANGE;\n+        try {\n+            macState = createMacStateInRange(rangeId, macState);\n+        } catch (CacheException e) {\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION);\n+        } catch (MacRangeInvalidException | MacAddressUniquenessViolationException | MacAddressFullException | MacAddressRetryLimitExceedException e) {\n             throw e;\n         }\n         return macState;\n     }\n \n-    public MacState createMacState(MacState macState) throws Exception {\n+    /**\n+     * create a MacState\n+     *\n+     * @param macState MAC allocation state\n+     * @param rangeId  MAC address range to create\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    @Override\n+    public MacState createMacStateInRange(String rangeId, MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressRetryLimitExceedException, MacAddressFullException {\n         if (macState == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         MacAddress macAddress = new MacAddress();\n         if (macState.getState() == null)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n         else if (macState.getState().trim().length() == 0)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n-        if (macPoolRepository.getSize() < (nMacPoolSize - 10)) {\n-            CompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> {\n-                long n = 0;\n-                try {\n-                    n = generateMacInPool(20);\n-                } catch (Exception e) {\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n \n+        try {\n+            MacRange range = macRangeRepository.findItem(rangeId);\n+            if (range == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1NzA2NA=="}, "originalCommit": {"oid": "db0ae3f61a17a784d40a5245f120d242d8b821d8"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0MzM3MA==", "bodyText": "I added the comment to the code, too. This is just for your comfort.", "url": "https://github.com/futurewei-cloud/alcor/pull/206#discussion_r428943370", "createdAt": "2020-05-21T22:10:03Z", "author": {"login": "kimeunju108"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/implement/MacServiceImpl.java", "diffHunk": "@@ -62,236 +65,337 @@\n     @Value(\"${macmanager.retrylimit}\")\n     private long nRetryLimit;\n \n-    public MacState getMacStateByMacAddress(String macAddress) throws Exception {\n+    /**\n+     * get MacState\n+     *\n+     * @param macAddress\n+     * @return MAC address allocation state\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     */\n+    public MacState getMacStateByMacAddress(String macAddress) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacAddressInvalidException {\n         MacState macState = null;\n         if (macAddress == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         try {\n             macState = macStateRepository.findItem(macAddress);\n+        } catch (CacheException e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION, e);\n         } catch (Exception e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+        }\n+        return macState;\n+    }\n+\n+    /**\n+     * create a MacState in default MAC range\n+     *\n+     * @param macState MAC allocation state\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing     *\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    public MacState createMacState(MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressFullException, MacAddressRetryLimitExceedException {\n+        if (macState == null)\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+        String rangeId = MacManagerConstant.DEFAULT_RANGE;\n+        try {\n+            macState = createMacStateInRange(rangeId, macState);\n+        } catch (CacheException e) {\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION);\n+        } catch (MacRangeInvalidException | MacAddressUniquenessViolationException | MacAddressFullException | MacAddressRetryLimitExceedException e) {\n             throw e;\n         }\n         return macState;\n     }\n \n-    public MacState createMacState(MacState macState) throws Exception {\n+    /**\n+     * create a MacState\n+     *\n+     * @param macState MAC allocation state\n+     * @param rangeId  MAC address range to create\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    @Override\n+    public MacState createMacStateInRange(String rangeId, MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressRetryLimitExceedException, MacAddressFullException {\n         if (macState == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         MacAddress macAddress = new MacAddress();\n         if (macState.getState() == null)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n         else if (macState.getState().trim().length() == 0)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n-        if (macPoolRepository.getSize() < (nMacPoolSize - 10)) {\n-            CompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> {\n-                long n = 0;\n-                try {\n-                    n = generateMacInPool(20);\n-                } catch (Exception e) {\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n \n+        try {\n+            MacRange range = macRangeRepository.findItem(rangeId);\n+            if (range == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1NzA2NA=="}, "originalCommit": {"oid": "db0ae3f61a17a784d40a5245f120d242d8b821d8"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0NDEwOA==", "bodyText": "See it now. Thanks.", "url": "https://github.com/futurewei-cloud/alcor/pull/206#discussion_r428944108", "createdAt": "2020-05-21T22:12:09Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/implement/MacServiceImpl.java", "diffHunk": "@@ -62,236 +65,337 @@\n     @Value(\"${macmanager.retrylimit}\")\n     private long nRetryLimit;\n \n-    public MacState getMacStateByMacAddress(String macAddress) throws Exception {\n+    /**\n+     * get MacState\n+     *\n+     * @param macAddress\n+     * @return MAC address allocation state\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     */\n+    public MacState getMacStateByMacAddress(String macAddress) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacAddressInvalidException {\n         MacState macState = null;\n         if (macAddress == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         try {\n             macState = macStateRepository.findItem(macAddress);\n+        } catch (CacheException e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION, e);\n         } catch (Exception e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+        }\n+        return macState;\n+    }\n+\n+    /**\n+     * create a MacState in default MAC range\n+     *\n+     * @param macState MAC allocation state\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing     *\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    public MacState createMacState(MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressFullException, MacAddressRetryLimitExceedException {\n+        if (macState == null)\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+        String rangeId = MacManagerConstant.DEFAULT_RANGE;\n+        try {\n+            macState = createMacStateInRange(rangeId, macState);\n+        } catch (CacheException e) {\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION);\n+        } catch (MacRangeInvalidException | MacAddressUniquenessViolationException | MacAddressFullException | MacAddressRetryLimitExceedException e) {\n             throw e;\n         }\n         return macState;\n     }\n \n-    public MacState createMacState(MacState macState) throws Exception {\n+    /**\n+     * create a MacState\n+     *\n+     * @param macState MAC allocation state\n+     * @param rangeId  MAC address range to create\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    @Override\n+    public MacState createMacStateInRange(String rangeId, MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressRetryLimitExceedException, MacAddressFullException {\n         if (macState == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         MacAddress macAddress = new MacAddress();\n         if (macState.getState() == null)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n         else if (macState.getState().trim().length() == 0)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n-        if (macPoolRepository.getSize() < (nMacPoolSize - 10)) {\n-            CompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> {\n-                long n = 0;\n-                try {\n-                    n = generateMacInPool(20);\n-                } catch (Exception e) {\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n \n+        try {\n+            MacRange range = macRangeRepository.findItem(rangeId);\n+            if (range == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1NzA2NA=="}, "originalCommit": {"oid": "db0ae3f61a17a784d40a5245f120d242d8b821d8"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODQzNjE1OnYy", "diffSide": "RIGHT", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/implement/MacServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNTo1MDoxNVrOGYnAGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo0NDo1MFrOGZAY6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1ODAwOQ==", "bodyText": "These three lines could be grouped as a method like \"inactivateMacAddressBit\" or so.", "url": "https://github.com/futurewei-cloud/alcor/pull/206#discussion_r428458009", "createdAt": "2020-05-21T05:50:15Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/implement/MacServiceImpl.java", "diffHunk": "@@ -62,236 +65,337 @@\n     @Value(\"${macmanager.retrylimit}\")\n     private long nRetryLimit;\n \n-    public MacState getMacStateByMacAddress(String macAddress) throws Exception {\n+    /**\n+     * get MacState\n+     *\n+     * @param macAddress\n+     * @return MAC address allocation state\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     */\n+    public MacState getMacStateByMacAddress(String macAddress) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacAddressInvalidException {\n         MacState macState = null;\n         if (macAddress == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         try {\n             macState = macStateRepository.findItem(macAddress);\n+        } catch (CacheException e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION, e);\n         } catch (Exception e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+        }\n+        return macState;\n+    }\n+\n+    /**\n+     * create a MacState in default MAC range\n+     *\n+     * @param macState MAC allocation state\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing     *\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    public MacState createMacState(MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressFullException, MacAddressRetryLimitExceedException {\n+        if (macState == null)\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+        String rangeId = MacManagerConstant.DEFAULT_RANGE;\n+        try {\n+            macState = createMacStateInRange(rangeId, macState);\n+        } catch (CacheException e) {\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION);\n+        } catch (MacRangeInvalidException | MacAddressUniquenessViolationException | MacAddressFullException | MacAddressRetryLimitExceedException e) {\n             throw e;\n         }\n         return macState;\n     }\n \n-    public MacState createMacState(MacState macState) throws Exception {\n+    /**\n+     * create a MacState\n+     *\n+     * @param macState MAC allocation state\n+     * @param rangeId  MAC address range to create\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    @Override\n+    public MacState createMacStateInRange(String rangeId, MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressRetryLimitExceedException, MacAddressFullException {\n         if (macState == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         MacAddress macAddress = new MacAddress();\n         if (macState.getState() == null)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n         else if (macState.getState().trim().length() == 0)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n-        if (macPoolRepository.getSize() < (nMacPoolSize - 10)) {\n-            CompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> {\n-                long n = 0;\n-                try {\n-                    n = generateMacInPool(20);\n-                } catch (Exception e) {\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n \n+        try {\n+            MacRange range = macRangeRepository.findItem(rangeId);\n+            if (range == null) {\n+                if (rangeId.equals(MacManagerConstant.DEFAULT_RANGE)) {\n+                    range = createDefaultRange(oui);\n+                    createMacRange(range);\n+                } else {\n+                    throw new MacRangeInvalidException(MacManagerConstant.MAC_EXCEPTION_RANGE_NOT_EXISTING);\n                 }\n-                return n;\n-            });\n-            long l = completableFuture.get();\n-            completableFuture.thenAccept(System.out::println);\n-            completableFuture.join();\n-            logger.info(\"{} New MAC addresses were created.\", l);\n-        }\n-\n-        String strMacAddress = allocateMacState(macState);\n-        if (strMacAddress != null) {\n-            macState.setMacAddress(strMacAddress);\n-            macStateRepository.addItem(macState);\n-        } else {\n-            try {\n-                String nic = generateNic();\n+            } else if (range.getState().equals(MacManagerConstant.MAC_RANGE_STATE_ACTIVE) == false) {\n+                throw new MacRangeInvalidException(MacManagerConstant.MAC_EXCEPTION_RANGE_NOT_ACTIVE);\n+            }\n+            if (macPoolRepository.getSize(rangeId) < (nMacPoolSize - 10)) {\n+                CompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> {\n+                    long n = 0;\n+                    try {\n+                        n = generateMacInPool(rangeId, 20);\n+                    } catch (Exception e) {\n+                        logger.error(\"MacService createMacState() exception:\", e);\n+                    }\n+                    return n;\n+                });\n+                long l = completableFuture.get();\n+                completableFuture.thenAccept(System.out::println);\n+                completableFuture.join();\n+                logger.info(\"{} New MAC addresses were created.\", l);\n+            }\n+            String strMacAddress = allocateMacState(rangeId, macState);\n+            if (strMacAddress != null) {\n+                macState.setMacAddress(strMacAddress);\n+                macStateRepository.addItem(macState);\n+            } else {\n+                String nic = generateNic(rangeId);\n                 macAddress.setOui(oui);\n                 macAddress.setNic(nic);\n                 macState.setMacAddress(macAddress.getMacAddress());\n                 MacState macState2 = macStateRepository.findItem(macAddress.getMacAddress());\n                 if (macStateRepository.findItem(macAddress.getMacAddress()) != null)\n-                    throw (new UniquenessViolationException(MacUtil.MAC_EXCEPTION_UNIQUENESSSS_VILOATION + macAddress.getMacAddress() + macState2.getProjectId()));\n+                    throw (new MacAddressUniquenessViolationException(MacManagerConstant.MAC_EXCEPTION_UNIQUENESSSS_VILOATION + macAddress.getMacAddress() + macState2.getProjectId()));\n                 else\n                     macStateRepository.addItem(macState);\n-            } catch (Exception e) {\n-                throw e;\n             }\n+        } catch (CacheException e) {\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION);\n+        } catch (MacAddressFullException | MacAddressRetryLimitExceedException e) {\n+            throw e;\n+        } catch (InterruptedException | ExecutionException e) {\n+            logger.error(\"MacService generateMacInPool() exception:\", e);\n         }\n         return macState;\n     }\n \n+    /**\n+     * update a MacState\n+     *\n+     * @param macAddress MAC address\n+     * @param macState   MAC allocation state with new data\n+     * @return MAC allocation state\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws ParameterUnexpectedValueException      macAddress is not equal to macState mac address\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws ResourceNotFoundException              there is not mac state with macAddress\n+     */\n     @Override\n-    public MacState updateMacState(String macAddress, MacState macState) throws Exception {\n+    public MacState updateMacState(String macAddress, MacState macState) throws ParameterNullOrEmptyException, ParameterUnexpectedValueException, MacRepositoryTransactionErrorException, ResourceNotFoundException {\n         if (macAddress == null || macState == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         if (macAddress.equals(macState.getMacAddress()) == false)\n-            throw (new ParameterUnexpectedValueException(MacUtil.MAC_EXCEPTION_PARAMETER_INVALID));\n-        if (macStateRepository.findItem(macAddress) != null) {\n-            macStateRepository.addItem(macState);\n-        } else {\n-            throw (new ResourceNotFoundException(MacUtil.MAC_EXCEPTION_MAC_NOT_EXISTING));\n+            throw (new ParameterUnexpectedValueException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_INVALID));\n+        try {\n+            if (macStateRepository.findItem(macAddress) != null) {\n+                macStateRepository.addItem(macState);\n+            } else {\n+                ResourceNotFoundException e = new ResourceNotFoundException(MacManagerConstant.MAC_EXCEPTION_MAC_NOT_EXISTING);\n+                logger.error(\"MacService updateMacState() exception:\", e);\n+                throw (e);\n+            }\n+        } catch (CacheException e) {\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION);\n         }\n         return macState;\n     }\n \n-    public String releaseMacState(String macAddress) throws Exception {\n+    /**\n+     * release MAC address from an allocation and put it back to MAC address pool\n+     *\n+     * @param macAddress MAC address\n+     * @return MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws ResourceNotFoundException              there is not mac state to release macAddress\n+     */\n+    @Override\n+    public String releaseMacState(String macAddress) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, ResourceNotFoundException {\n+        String strMacAddress = null;\n         if (macAddress == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n-        MacState macState = macStateRepository.findItem(macAddress);\n-        if (macState == null) {\n-            throw (new ResourceNotFoundException(MacUtil.MAC_EXCEPTION_MAC_NOT_EXISTING));\n-        } else {\n-            try {\n-                macStateRepository.deleteItem(macAddress);\n-                macPoolRepository.addItem(new MacAddress(macAddress));\n-            } catch (Exception e) {\n-                throw e;\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+        try {\n+            MacState macState = macStateRepository.findItem(macAddress);\n+            if (macState == null) {\n+                throw (new ResourceNotFoundException(MacManagerConstant.MAC_EXCEPTION_MAC_NOT_EXISTING));\n+            } else {\n+                try {\n+                    macStateRepository.deleteItem(macAddress);\n+                    MacAddress mac = new MacAddress(macAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0ae3f61a17a784d40a5245f120d242d8b821d8"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3Mzk2MQ==", "bodyText": "These three lines are grouped in a method :  private void inactivateMacAddressBit(String macAddress) throws MacRepositoryTransactionErrorException", "url": "https://github.com/futurewei-cloud/alcor/pull/206#discussion_r428873961", "createdAt": "2020-05-21T19:44:50Z", "author": {"login": "kimeunju108"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/implement/MacServiceImpl.java", "diffHunk": "@@ -62,236 +65,337 @@\n     @Value(\"${macmanager.retrylimit}\")\n     private long nRetryLimit;\n \n-    public MacState getMacStateByMacAddress(String macAddress) throws Exception {\n+    /**\n+     * get MacState\n+     *\n+     * @param macAddress\n+     * @return MAC address allocation state\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     */\n+    public MacState getMacStateByMacAddress(String macAddress) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacAddressInvalidException {\n         MacState macState = null;\n         if (macAddress == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         try {\n             macState = macStateRepository.findItem(macAddress);\n+        } catch (CacheException e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION, e);\n         } catch (Exception e) {\n+            logger.error(\"MacService getMacStateByMacAddress() exception:\", e);\n+        }\n+        return macState;\n+    }\n+\n+    /**\n+     * create a MacState in default MAC range\n+     *\n+     * @param macState MAC allocation state\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing     *\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    public MacState createMacState(MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressFullException, MacAddressRetryLimitExceedException {\n+        if (macState == null)\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+        String rangeId = MacManagerConstant.DEFAULT_RANGE;\n+        try {\n+            macState = createMacStateInRange(rangeId, macState);\n+        } catch (CacheException e) {\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION);\n+        } catch (MacRangeInvalidException | MacAddressUniquenessViolationException | MacAddressFullException | MacAddressRetryLimitExceedException e) {\n             throw e;\n         }\n         return macState;\n     }\n \n-    public MacState createMacState(MacState macState) throws Exception {\n+    /**\n+     * create a MacState\n+     *\n+     * @param macState MAC allocation state\n+     * @param rangeId  MAC address range to create\n+     * @return MAC allocation state with an allocated MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacRangeInvalidException               mac range to create a new MAC address is null or not existing\n+     * @throws MacAddressUniquenessViolationException MAC address is not unique. MAC address should be allocated to only one port\n+     * @throws MacAddressFullException                All MAC addresses are created.\n+     * @throws MacAddressRetryLimitExceedException    MAC addresss creation is tried more than limit\n+     */\n+    @Override\n+    public MacState createMacStateInRange(String rangeId, MacState macState) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, MacRangeInvalidException, MacAddressUniquenessViolationException, MacAddressRetryLimitExceedException, MacAddressFullException {\n         if (macState == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         MacAddress macAddress = new MacAddress();\n         if (macState.getState() == null)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n         else if (macState.getState().trim().length() == 0)\n-            macState.setState(MacUtil.MAC_STATE_ACTIVE);\n-        if (macPoolRepository.getSize() < (nMacPoolSize - 10)) {\n-            CompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> {\n-                long n = 0;\n-                try {\n-                    n = generateMacInPool(20);\n-                } catch (Exception e) {\n+            macState.setState(MacManagerConstant.MAC_STATE_ACTIVE);\n \n+        try {\n+            MacRange range = macRangeRepository.findItem(rangeId);\n+            if (range == null) {\n+                if (rangeId.equals(MacManagerConstant.DEFAULT_RANGE)) {\n+                    range = createDefaultRange(oui);\n+                    createMacRange(range);\n+                } else {\n+                    throw new MacRangeInvalidException(MacManagerConstant.MAC_EXCEPTION_RANGE_NOT_EXISTING);\n                 }\n-                return n;\n-            });\n-            long l = completableFuture.get();\n-            completableFuture.thenAccept(System.out::println);\n-            completableFuture.join();\n-            logger.info(\"{} New MAC addresses were created.\", l);\n-        }\n-\n-        String strMacAddress = allocateMacState(macState);\n-        if (strMacAddress != null) {\n-            macState.setMacAddress(strMacAddress);\n-            macStateRepository.addItem(macState);\n-        } else {\n-            try {\n-                String nic = generateNic();\n+            } else if (range.getState().equals(MacManagerConstant.MAC_RANGE_STATE_ACTIVE) == false) {\n+                throw new MacRangeInvalidException(MacManagerConstant.MAC_EXCEPTION_RANGE_NOT_ACTIVE);\n+            }\n+            if (macPoolRepository.getSize(rangeId) < (nMacPoolSize - 10)) {\n+                CompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> {\n+                    long n = 0;\n+                    try {\n+                        n = generateMacInPool(rangeId, 20);\n+                    } catch (Exception e) {\n+                        logger.error(\"MacService createMacState() exception:\", e);\n+                    }\n+                    return n;\n+                });\n+                long l = completableFuture.get();\n+                completableFuture.thenAccept(System.out::println);\n+                completableFuture.join();\n+                logger.info(\"{} New MAC addresses were created.\", l);\n+            }\n+            String strMacAddress = allocateMacState(rangeId, macState);\n+            if (strMacAddress != null) {\n+                macState.setMacAddress(strMacAddress);\n+                macStateRepository.addItem(macState);\n+            } else {\n+                String nic = generateNic(rangeId);\n                 macAddress.setOui(oui);\n                 macAddress.setNic(nic);\n                 macState.setMacAddress(macAddress.getMacAddress());\n                 MacState macState2 = macStateRepository.findItem(macAddress.getMacAddress());\n                 if (macStateRepository.findItem(macAddress.getMacAddress()) != null)\n-                    throw (new UniquenessViolationException(MacUtil.MAC_EXCEPTION_UNIQUENESSSS_VILOATION + macAddress.getMacAddress() + macState2.getProjectId()));\n+                    throw (new MacAddressUniquenessViolationException(MacManagerConstant.MAC_EXCEPTION_UNIQUENESSSS_VILOATION + macAddress.getMacAddress() + macState2.getProjectId()));\n                 else\n                     macStateRepository.addItem(macState);\n-            } catch (Exception e) {\n-                throw e;\n             }\n+        } catch (CacheException e) {\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION);\n+        } catch (MacAddressFullException | MacAddressRetryLimitExceedException e) {\n+            throw e;\n+        } catch (InterruptedException | ExecutionException e) {\n+            logger.error(\"MacService generateMacInPool() exception:\", e);\n         }\n         return macState;\n     }\n \n+    /**\n+     * update a MacState\n+     *\n+     * @param macAddress MAC address\n+     * @param macState   MAC allocation state with new data\n+     * @return MAC allocation state\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws ParameterUnexpectedValueException      macAddress is not equal to macState mac address\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws ResourceNotFoundException              there is not mac state with macAddress\n+     */\n     @Override\n-    public MacState updateMacState(String macAddress, MacState macState) throws Exception {\n+    public MacState updateMacState(String macAddress, MacState macState) throws ParameterNullOrEmptyException, ParameterUnexpectedValueException, MacRepositoryTransactionErrorException, ResourceNotFoundException {\n         if (macAddress == null || macState == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n         if (macAddress.equals(macState.getMacAddress()) == false)\n-            throw (new ParameterUnexpectedValueException(MacUtil.MAC_EXCEPTION_PARAMETER_INVALID));\n-        if (macStateRepository.findItem(macAddress) != null) {\n-            macStateRepository.addItem(macState);\n-        } else {\n-            throw (new ResourceNotFoundException(MacUtil.MAC_EXCEPTION_MAC_NOT_EXISTING));\n+            throw (new ParameterUnexpectedValueException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_INVALID));\n+        try {\n+            if (macStateRepository.findItem(macAddress) != null) {\n+                macStateRepository.addItem(macState);\n+            } else {\n+                ResourceNotFoundException e = new ResourceNotFoundException(MacManagerConstant.MAC_EXCEPTION_MAC_NOT_EXISTING);\n+                logger.error(\"MacService updateMacState() exception:\", e);\n+                throw (e);\n+            }\n+        } catch (CacheException e) {\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION);\n         }\n         return macState;\n     }\n \n-    public String releaseMacState(String macAddress) throws Exception {\n+    /**\n+     * release MAC address from an allocation and put it back to MAC address pool\n+     *\n+     * @param macAddress MAC address\n+     * @return MAC address\n+     * @throws ParameterNullOrEmptyException          parameter macAddress is null or empty\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws ResourceNotFoundException              there is not mac state to release macAddress\n+     */\n+    @Override\n+    public String releaseMacState(String macAddress) throws ParameterNullOrEmptyException, MacRepositoryTransactionErrorException, ResourceNotFoundException {\n+        String strMacAddress = null;\n         if (macAddress == null)\n-            throw (new ParameterNullOrEmptyException(MacUtil.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n-        MacState macState = macStateRepository.findItem(macAddress);\n-        if (macState == null) {\n-            throw (new ResourceNotFoundException(MacUtil.MAC_EXCEPTION_MAC_NOT_EXISTING));\n-        } else {\n-            try {\n-                macStateRepository.deleteItem(macAddress);\n-                macPoolRepository.addItem(new MacAddress(macAddress));\n-            } catch (Exception e) {\n-                throw e;\n+            throw (new ParameterNullOrEmptyException(MacManagerConstant.MAC_EXCEPTION_PARAMETER_NULL_EMPTY));\n+        try {\n+            MacState macState = macStateRepository.findItem(macAddress);\n+            if (macState == null) {\n+                throw (new ResourceNotFoundException(MacManagerConstant.MAC_EXCEPTION_MAC_NOT_EXISTING));\n+            } else {\n+                try {\n+                    macStateRepository.deleteItem(macAddress);\n+                    MacAddress mac = new MacAddress(macAddress);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1ODAwOQ=="}, "originalCommit": {"oid": "db0ae3f61a17a784d40a5245f120d242d8b821d8"}, "originalPosition": 263}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTQzMDgwOnYy", "diffSide": "RIGHT", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/implement/MacServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjowNzowOFrOGZEj7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjowNzowOFrOGZEj7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0MjMxNg==", "bodyText": "Let us use something other than \"from\" :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/206#discussion_r428942316", "createdAt": "2020-05-21T22:07:08Z", "author": {"login": "xieus"}, "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/implement/MacServiceImpl.java", "diffHunk": "@@ -300,61 +404,204 @@ private boolean isValidRange(MacRange macRange) {\n         return from < to;\n     }\n \n+    /**\n+     * create a default MAC range\n+     *\n+     * @param oui unique id of an organization\n+     * @return default MAC range\n+     * @throws\n+     */\n     private MacRange createDefaultRange(String oui) {\n-        String rangeId = MacUtil.DEFAULT_RANGE;\n-        long nNicLength = (long)Math.pow(2,MacAddress.NIC_LENGTH);\n-        String strFrom  = MacAddress.longToMac(0);\n-        String strTo = MacAddress.longToMac(nNicLength - 1);\n+        String rangeId = MacManagerConstant.DEFAULT_RANGE;\n+        MacAddress macAddress = new MacAddress(oui, null);\n+        long nNicLength = (long) Math.pow(2, macAddress.getNicLength());\n+        String strFrom = MacAddress.longToNic(0, macAddress.getNicLength());\n+        String strTo = MacAddress.longToNic(nNicLength - 1, macAddress.getNicLength());\n         String from = new MacAddress(oui, strFrom).getMacAddress();\n         String to = new MacAddress(oui, strTo).getMacAddress();\n-        String state = MacUtil.MAC_RANGE_STATE_ACTIVE;\n-        BitSet bitSet = new BitSet((int)nNicLength);\n+        String state = MacManagerConstant.MAC_RANGE_STATE_ACTIVE;\n+        BitSet bitSet = new BitSet((int) nNicLength);\n         MacRange defaultRange = new MacRange(rangeId, from, to, state);\n         defaultRange.setBitSet(bitSet);\n         return defaultRange;\n     }\n \n-    private long generateMacInPool(int n) throws Exception {\n-        Exception exception = null;\n+    /**\n+     * generate MAC addresses in MAC pool in advance\n+     *\n+     * @param rangeId MAC range id\n+     * @param n       the number of MAC addresses to generate\n+     * @return the number of MAC addresses generated\n+     * @throws MacAddressRetryLimitExceedException MAC address generation is tried more than limit\n+     */\n+    private long generateMacInPool(String rangeId, int n) throws MacAddressRetryLimitExceedException {\n+        MacAddressRetryLimitExceedException exception = null;\n         long nReturn = 0;\n         ArrayList<String> list = new ArrayList<String>();\n         if (n < 1) return nReturn;\n         MacAddress macAddress = new MacAddress();\n         for (int i = 0; i < n; i++) {\n             try {\n-                String nic = generateNic();\n+                String nic = generateNic(rangeId);\n                 macAddress.setOui(oui);\n                 macAddress.setNic(nic);\n                 String strMacAddress = macAddress.getMacAddress();\n                 MacState macState = macStateRepository.findItem(strMacAddress);\n                 if (macState == null) {\n-                    updateMacAllocationStatus(strMacAddress);\n-                    macPoolRepository.addItem(new MacAddress(strMacAddress));\n+                    macPoolRepository.addItem(rangeId, strMacAddress);\n                     nReturn++;\n                 }\n-            } catch (RetryLimitExceedException e) {\n+            } catch (MacAddressRetryLimitExceedException e) {\n                 exception = e;\n+            } catch (Exception e) {\n+                logger.error(\"MacService generateMacInPool() exception:\", e);\n             }\n         }\n         if (exception != null)\n             throw exception;\n         return nReturn;\n     }\n \n-    private void updateMacAllocationStatus(String strMacAddress) throws Exception {\n-        MacRange deafultRange = getMacRangeByMacRangeId(MacUtil.DEFAULT_RANGE);\n-        BitSet bitSet = deafultRange.getBitSet();\n-        int ndx = macToIndex(deafultRange, strMacAddress);\n-        bitSet.set(ndx);\n-        macRangeRepository.addItem(deafultRange);\n+    /**\n+     * generate a new NIC(Network Interface Unit) of a MAC address\n+     *\n+     * @param rangeId MAC range id\n+     * @return new NIC string\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     * @throws MacAddressFullException                ALL MAC addresses are used and there is no more avaialble\n+     * @throws MacAddressRetryLimitExceedException    MAC address generation is tried more than limit\n+     */\n+    private String generateNic(String rangeId) throws MacRepositoryTransactionErrorException, MacAddressFullException, MacAddressRetryLimitExceedException {\n+        String nic = null;\n+        MacAddress macAddress = new MacAddress(oui, null);\n+        Long from = (long) 0;\n+        Long to = (long) 0;\n+        int nNicLength = macAddress.getNicLength();\n+        long randomNic = -1;\n+        MacRange macRange = null;\n+        try {\n+            macRange = macRangeRepository.findItem(rangeId);\n+        } catch (CacheException e) {\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION, e);\n+        }\n+        if (macRange != null) {\n+            from = MacAddress.macToLong(new MacAddress(macRange.getFrom()).getNic());\n+            to = MacAddress.macToLong(new MacAddress(macRange.getTo()).getNic());\n+        }\n+        long nAavailableMac = availableMac(from, to);\n+        if (nAavailableMac == 0) {\n+            throw new MacAddressFullException(MacManagerConstant.MAC_EXCEPTION_FULL_EXCEPTION);\n+        } else {\n+            int i = 0;\n+            while (nic == null && i < nRetryLimit) {\n+                long randomNum = ThreadLocalRandom.current().nextLong(0, nAavailableMac);\n+                randomNic = getRandomNicFromBitSet(from, randomNum);\n+                String nicTemp = MacAddress.hexToNic(Long.toHexString(randomNic), nNicLength);\n+                macAddress.setNic(nicTemp);\n+                try {\n+                    if ((macStateRepository.findItem(macAddress.getMacAddress()) == null) && (macPoolRepository.findItem(rangeId, macAddress.getMacAddress()) == null)) {\n+                        nic = nicTemp;\n+                        i++;\n+                    }\n+                } catch (CacheException e) {\n+                    throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION, e);\n+                }\n+            }\n+            if (nic == null)\n+                throw new MacAddressRetryLimitExceedException(MacManagerConstant.MAC_EXCEPTION_RETRY_LIMIT_EXCEED);\n+            if (randomNic >= 0) {\n+                try {\n+                    updateBitSet(randomNic, true);\n+                } catch (CacheException e) {\n+                    throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION, e);\n+                }\n+            }\n+        }\n+        return nic;\n+    }\n+\n+    /**\n+     * update tracking information of avaialble MAC addresses\n+     *\n+     * @param nic    network interface card id of a MAC address\n+     * @param bValue true if used, false otherwise\n+     * @return\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     */\n+    private void updateBitSet(long nic, boolean bValue) throws MacRepositoryTransactionErrorException {\n+        try {\n+            MacRange deafultRange = getMacRangeByMacRangeId(MacManagerConstant.DEFAULT_RANGE);\n+            BitSet bitSet = deafultRange.getBitSet();\n+            if (bValue)\n+                bitSet.set((int) nic);\n+            else\n+                bitSet.clear((int) nic);\n+            deafultRange.setBitSet(bitSet);\n+            macRangeRepository.addItem(deafultRange);\n+        } catch (CacheException e) {\n+            logger.error(\"MacService getRandomNicFromBitSet() exception:\", e);\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION, e);\n+        } catch (Exception e) {\n+            logger.error(\"MacService getRandomNicFromBitSet() exception:\", e);\n+        }\n+    }\n+\n+    /**\n+     * provide how many MAC addresses\n+     *\n+     * @param from start MAC address to compute\n+     * @param to   end MAC address to compute\n+     * @return the number of available MAC addresses between from and to\n+     * @throws MacRepositoryTransactionErrorException error during repository transaction\n+     */\n+    private long availableMac(long from, long to) throws MacRepositoryTransactionErrorException {\n+        long nAvailable = 0;\n+        String rangeId = MacManagerConstant.DEFAULT_RANGE;\n+        try {\n+            MacRange range = getMacRangeByMacRangeId(rangeId);\n+            BitSet bitSet = range.getBitSet();\n+            BitSet bitSet2 = bitSet.get((int) from, (int) to);\n+            long nTotal = to - from;\n+            nAvailable = nTotal - bitSet2.cardinality();\n+        } catch (CacheException e) {\n+            logger.error(\"MacService availableMac() exception:\", e);\n+            throw new MacRepositoryTransactionErrorException(MacManagerConstant.MAC_EXCEPTION_REPOSITORY_EXCEPTION, e);\n+        } catch (Exception e) {\n+            logger.error(\"MacService availableMac() exception:\", e);\n+        }\n+        return nAvailable;\n     }\n \n-    private int macToIndex(MacRange range, String strMac) {\n-        int ndx = 0;\n-        MacAddress mac = new MacAddress(strMac);\n-        long nMac1 = MacAddress.macToLong(strMac);\n-        long nMac2 = MacAddress.macToLong(range.getFrom());\n-        ndx = (int) (nMac1 - nMac2);\n-        return ndx;\n+    /**\n+     * pick a MAC address randomly among available MAC addresses\n+     *\n+     * @param from start MAC address", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0ae3f61a17a784d40a5245f120d242d8b821d8"}, "originalPosition": 710}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4522, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}