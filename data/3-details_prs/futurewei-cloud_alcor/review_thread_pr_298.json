{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NjY0NDA0", "number": 298, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjowMzoyOVrOEPggPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyNjozNFrOEPiL2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Njk2NjM5OnYy", "diffSide": "RIGHT", "path": "kubernetes/services/elasticip_manager.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjowMzoyOVrOGzQYPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjowMzoyOVrOGzQYPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM5ODkwOQ==", "bodyText": "Thank you for updating the yaml file \ud83d\udc4d", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456398909", "createdAt": "2020-07-17T12:03:29Z", "author": {"login": "xieus"}, "path": "kubernetes/services/elasticip_manager.yaml", "diffHunk": "@@ -4,8 +4,9 @@ metadata:\n   name: elasticip-configmap\r\n data:\r\n   application.properties: |\r\n-    ignite.host=10.99.135.32\r\n+    ignite.host=ignite-alcor-service.default.svc.cluster.local\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Njk3NDIwOnYy", "diffSide": "RIGHT", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/exception/elasticip/ElasticIpAssociateConflict.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjowNjozNFrOGzQdJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMzoyMTo0NFrOGz1ygg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwMDE2Nw==", "bodyText": "is it possible to give the conflicted ip address here? If so it would help for debugging in production.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456400167", "createdAt": "2020-07-17T12:06:34Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/exception/elasticip/ElasticIpAssociateConflict.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\r\n+Copyright 2020 The Alcor Authors.\r\n+\r\n+Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+        you may not use this file except in compliance with the License.\r\n+        You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+        Unless required by applicable law or agreed to in writing, software\r\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+        See the License for the specific language governing permissions and\r\n+        limitations under the License.\r\n+*/\r\n+\r\n+package com.futurewei.alcor.elasticipmanager.exception.elasticip;\r\n+\r\n+import org.springframework.http.HttpStatus;\r\n+import org.springframework.web.bind.annotation.ResponseStatus;\r\n+\r\n+@ResponseStatus(code= HttpStatus.BAD_REQUEST, reason=\"The associate port or private ip has already associated with \" +\r\n+        \"another elastic ip\")\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxMTg0Mg==", "bodyText": "OK, the ResponseStatus announce seems not support paramters, I could try another way to throw the exception.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457011842", "createdAt": "2020-07-20T03:21:44Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/exception/elasticip/ElasticIpAssociateConflict.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\r\n+Copyright 2020 The Alcor Authors.\r\n+\r\n+Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+        you may not use this file except in compliance with the License.\r\n+        You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+        Unless required by applicable law or agreed to in writing, software\r\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+        See the License for the specific language governing permissions and\r\n+        limitations under the License.\r\n+*/\r\n+\r\n+package com.futurewei.alcor.elasticipmanager.exception.elasticip;\r\n+\r\n+import org.springframework.http.HttpStatus;\r\n+import org.springframework.web.bind.annotation.ResponseStatus;\r\n+\r\n+@ResponseStatus(code= HttpStatus.BAD_REQUEST, reason=\"The associate port or private ip has already associated with \" +\r\n+        \"another elastic ip\")\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwMDE2Nw=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzAyNjA1OnYy", "diffSide": "RIGHT", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/utils/ElasticIpControllerUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoyNDoxNFrOGzQ71w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoyNDoxNFrOG0tdUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwODAyMw==", "bodyText": "Possibly we would need to document the current supported scenarios.\nLet us investigate further for IPv6 EIP to see if we want to support in the near future.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456408023", "createdAt": "2020-07-17T12:24:14Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/utils/ElasticIpControllerUtils.java", "diffHunk": "@@ -104,9 +103,13 @@ public static void createElasticIpParameterProcess(String projectId, ElasticIpIn\n                 throw new ElasticIpNoPortIdException();\r\n             }\r\n         } else {\r\n-            if (elasticIpInfo.getPrivateIpVersion() != null &&\r\n-                    isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\r\n-                throw new ElasticIpPipVersionException();\r\n+            if (elasticIpInfo.getPrivateIpVersion() != null) {\r\n+                if (elasticIpInfo.getPrivateIpVersion().equals(IpVersion.IPV6.getVersion())) {\r\n+                    throw new ElasticIpIPv6PIPNotSupported();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNDExMA==", "bodyText": "We could support IPv6 EIP, but we might not support a EIP associate with a IPv6 fixed IP. I could take more investigation here.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457014110", "createdAt": "2020-07-20T03:27:54Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/utils/ElasticIpControllerUtils.java", "diffHunk": "@@ -104,9 +103,13 @@ public static void createElasticIpParameterProcess(String projectId, ElasticIpIn\n                 throw new ElasticIpNoPortIdException();\r\n             }\r\n         } else {\r\n-            if (elasticIpInfo.getPrivateIpVersion() != null &&\r\n-                    isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\r\n-                throw new ElasticIpPipVersionException();\r\n+            if (elasticIpInfo.getPrivateIpVersion() != null) {\r\n+                if (elasticIpInfo.getPrivateIpVersion().equals(IpVersion.IPV6.getVersion())) {\r\n+                    throw new ElasticIpIPv6PIPNotSupported();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwODAyMw=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA0NzQ2OQ==", "bodyText": "Cool thank you.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457047469", "createdAt": "2020-07-20T04:50:36Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/utils/ElasticIpControllerUtils.java", "diffHunk": "@@ -104,9 +103,13 @@ public static void createElasticIpParameterProcess(String projectId, ElasticIpIn\n                 throw new ElasticIpNoPortIdException();\r\n             }\r\n         } else {\r\n-            if (elasticIpInfo.getPrivateIpVersion() != null &&\r\n-                    isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\r\n-                throw new ElasticIpPipVersionException();\r\n+            if (elasticIpInfo.getPrivateIpVersion() != null) {\r\n+                if (elasticIpInfo.getPrivateIpVersion().equals(IpVersion.IPV6.getVersion())) {\r\n+                    throw new ElasticIpIPv6PIPNotSupported();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwODAyMw=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyMzkyMg==", "bodyText": "Done", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457923922", "createdAt": "2020-07-21T08:24:14Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/utils/ElasticIpControllerUtils.java", "diffHunk": "@@ -104,9 +103,13 @@ public static void createElasticIpParameterProcess(String projectId, ElasticIpIn\n                 throw new ElasticIpNoPortIdException();\r\n             }\r\n         } else {\r\n-            if (elasticIpInfo.getPrivateIpVersion() != null &&\r\n-                    isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\r\n-                throw new ElasticIpPipVersionException();\r\n+            if (elasticIpInfo.getPrivateIpVersion() != null) {\r\n+                if (elasticIpInfo.getPrivateIpVersion().equals(IpVersion.IPV6.getVersion())) {\r\n+                    throw new ElasticIpIPv6PIPNotSupported();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwODAyMw=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzAzMDEwOnYy", "diffSide": "RIGHT", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/utils/ElasticIpControllerUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoyNToxNlrOGzQ-EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTo1NjoxMVrOG1TxTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwODU5Mg==", "bodyText": "Question: which scenarios is the eip's private ip version invalid?", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456408592", "createdAt": "2020-07-17T12:25:16Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/utils/ElasticIpControllerUtils.java", "diffHunk": "@@ -104,9 +103,13 @@ public static void createElasticIpParameterProcess(String projectId, ElasticIpIn\n                 throw new ElasticIpNoPortIdException();\r\n             }\r\n         } else {\r\n-            if (elasticIpInfo.getPrivateIpVersion() != null &&\r\n-                    isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\r\n-                throw new ElasticIpPipVersionException();\r\n+            if (elasticIpInfo.getPrivateIpVersion() != null) {\r\n+                if (elasticIpInfo.getPrivateIpVersion().equals(IpVersion.IPV6.getVersion())) {\r\n+                    throw new ElasticIpIPv6PIPNotSupported();\r\n+                }\r\n+                if (isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\r\n+                    throw new ElasticIpPipVersionException();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNDcyOQ==", "bodyText": "user specify a value neither 4 nor 6?", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457014729", "createdAt": "2020-07-20T03:29:34Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/utils/ElasticIpControllerUtils.java", "diffHunk": "@@ -104,9 +103,13 @@ public static void createElasticIpParameterProcess(String projectId, ElasticIpIn\n                 throw new ElasticIpNoPortIdException();\r\n             }\r\n         } else {\r\n-            if (elasticIpInfo.getPrivateIpVersion() != null &&\r\n-                    isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\r\n-                throw new ElasticIpPipVersionException();\r\n+            if (elasticIpInfo.getPrivateIpVersion() != null) {\r\n+                if (elasticIpInfo.getPrivateIpVersion().equals(IpVersion.IPV6.getVersion())) {\r\n+                    throw new ElasticIpIPv6PIPNotSupported();\r\n+                }\r\n+                if (isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\r\n+                    throw new ElasticIpPipVersionException();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwODU5Mg=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2MjI2MA==", "bodyText": "In another PR (will upload soon), I will remove the private ip version attribute from EIP. Seems that attribute is not necessary", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r458062260", "createdAt": "2020-07-21T12:37:08Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/utils/ElasticIpControllerUtils.java", "diffHunk": "@@ -104,9 +103,13 @@ public static void createElasticIpParameterProcess(String projectId, ElasticIpIn\n                 throw new ElasticIpNoPortIdException();\r\n             }\r\n         } else {\r\n-            if (elasticIpInfo.getPrivateIpVersion() != null &&\r\n-                    isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\r\n-                throw new ElasticIpPipVersionException();\r\n+            if (elasticIpInfo.getPrivateIpVersion() != null) {\r\n+                if (elasticIpInfo.getPrivateIpVersion().equals(IpVersion.IPV6.getVersion())) {\r\n+                    throw new ElasticIpIPv6PIPNotSupported();\r\n+                }\r\n+                if (isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\r\n+                    throw new ElasticIpPipVersionException();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwODU5Mg=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1MTYzMA==", "bodyText": "Cool.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r458551630", "createdAt": "2020-07-22T05:56:11Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/utils/ElasticIpControllerUtils.java", "diffHunk": "@@ -104,9 +103,13 @@ public static void createElasticIpParameterProcess(String projectId, ElasticIpIn\n                 throw new ElasticIpNoPortIdException();\r\n             }\r\n         } else {\r\n-            if (elasticIpInfo.getPrivateIpVersion() != null &&\r\n-                    isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\r\n-                throw new ElasticIpPipVersionException();\r\n+            if (elasticIpInfo.getPrivateIpVersion() != null) {\r\n+                if (elasticIpInfo.getPrivateIpVersion().equals(IpVersion.IPV6.getVersion())) {\r\n+                    throw new ElasticIpIPv6PIPNotSupported();\r\n+                }\r\n+                if (isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\r\n+                    throw new ElasticIpPipVersionException();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwODU5Mg=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzAzNjEzOnYy", "diffSide": "RIGHT", "path": "services/elastic_ip_manager/src/test/java/com/futurewei/alcor/elasticipmanager/ElasticIpControllerTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjoyNzoxMFrOGzRBeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMzoyOTo0NVrOGz1-Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwOTQ2NA==", "bodyText": "Very comprehensive test case! Like it a lot \ud83d\udc4d", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456409464", "createdAt": "2020-07-17T12:27:10Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/test/java/com/futurewei/alcor/elasticipmanager/ElasticIpControllerTests.java", "diffHunk": "@@ -1017,6 +1030,117 @@ public void elasticIpRange_updateNameAndDescription() throws Exception {\n         this.cleanRange();\n     }\n \n+    @Test\n+    public void elasticIp_associateWithPort() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNDc5MA==", "bodyText": "thanks", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457014790", "createdAt": "2020-07-20T03:29:45Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/test/java/com/futurewei/alcor/elasticipmanager/ElasticIpControllerTests.java", "diffHunk": "@@ -1017,6 +1030,117 @@ public void elasticIpRange_updateNameAndDescription() throws Exception {\n         this.cleanRange();\n     }\n \n+    @Test\n+    public void elasticIp_associateWithPort() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQwOTQ2NA=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzA4NzQ4OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/restclient/ElasticIpManagerRestClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjo0MjoxNVrOGzRfXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMjo0MjoxNVrOGzRfXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQxNzExNg==", "bodyText": "We could try to collect some perf numnber for EIP Mgr. @Eric-Yuan", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456417116", "createdAt": "2020-07-17T12:42:15Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/restclient/ElasticIpManagerRestClient.java", "diffHunk": "@@ -1,11 +1,77 @@\n+/*\r\n+Copyright 2019 The Alcor Authors.\r\n+\r\n+Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+        you may not use this file except in compliance with the License.\r\n+        You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+        Unless required by applicable law or agreed to in writing, software\r\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+        See the License for the specific language governing permissions and\r\n+        limitations under the License.\r\n+*/\r\n+\r\n package com.futurewei.alcor.web.restclient;\r\n \r\n+import com.fasterxml.jackson.databind.ObjectMapper;\r\n+import com.futurewei.alcor.common.stats.DurationStatistics;\r\n+import com.futurewei.alcor.common.utils.ControllerUtil;\r\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpInfo;\r\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpInfoWrapper;\r\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpsInfoWrapper;\r\n import org.springframework.beans.factory.annotation.Value;\r\n+import org.springframework.http.*;\r\n+import org.springframework.util.MimeType;\r\n+import org.springframework.util.MimeTypeUtils;\r\n+import org.springframework.web.client.RestClientException;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+import java.util.Map;\r\n \r\n public class ElasticIpManagerRestClient extends AbstractRestClient {\r\n     @Value(\"${microservices.elasticip.service.url:#{\\\"\\\"}}\")\r\n     private String elasticIpManagerUrl;\r\n \r\n+    @DurationStatistics\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzE1NjkyOnYy", "diffSide": "RIGHT", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzowMzoxMVrOGzSJRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzowMzoxMVrOGzSJRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQyNzg0Ng==", "bodyText": "Line 79-89 in the new file (I am unable to comment there directly):\nIn the current algorithm, we look into all ranges and pick the first one matching the request ip's version. Pulling all ranges from repo is fine when the number of ranges is limited.\nOne concern is that the first few ranges could be drained very quickly, which causes the following requests takes more time to find one available ip as it will need to check more and more ranges. We could think of adding ip availability stats for each range, and pick the one with least utilization.\nNot high priority. I would recommend us to run some perf/scalability test to see. @Eric-Yuan", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456427846", "createdAt": "2020-07-17T13:03:11Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -86,9 +93,11 @@ public ElasticIpInfo createElasticIp(ElasticIpInfo request) throws Exception {\n         eip.setElasticIp(ipAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzE3NTUwOnYy", "diffSide": "RIGHT", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzowODo0NVrOGzSUrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzowODo0NVrOGzSUrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMDc2NA==", "bodyText": "Recommend to rename it to ElasticIpAssociatedIpNotFound()", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456430764", "createdAt": "2020-07-17T13:08:45Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzE4NTA5OnYy", "diffSide": "RIGHT", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxMTozM1rOGzSadg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxMzo1NlrOG1UIfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMjI0Ng==", "bodyText": "I am trying to understand why port with multi-ips are invalid here.\nFor a port with multiple private ips, one could be considered as primary ip and the rest are secondary. The EIP could be associated with the primary pip.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456432246", "createdAt": "2020-07-17T13:11:33Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNzA1OQ==", "bodyText": "That is reference from Neutron. Neutron will throw errors when associate an EIP with a multi addresses port and not specifing which address is actually associated with.  I could investigate further in primary ip in a port.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457017059", "createdAt": "2020-07-20T03:35:52Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMjI0Ng=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA0Njk5OA==", "bodyText": "Some references:\n\n\nAWS allows multiple private IPv4s assigned to a network interface, and each private IPv4 address can be associated with a single Elastic IP address, and vice versa.\nLink: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/MultipleIP.html#StepThreeEIP\n\n\nAzure allows similar configurations. Each VM may have multiple NICs, and every NIC attached to a VM has one or more IP configurations associated to it. Each configuration is assigned one static or dynamic private IP address. Each configuration may also have one public IP address (either dynamic or static) associated to it.\nLink: https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-multiple-ip-addresses-portal", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457046998", "createdAt": "2020-07-20T04:49:29Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMjI0Ng=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NzUzNA==", "bodyText": "Thanks, that detailly references are very helpful. For now we support each fixed ip to be associated with a indepandent EIP, but not recognize the primary ip of the fixed ips and could not automatically choose a fixed ip to be associated. Mightbe we could simply choose the first fixed ip when not specified, or we might think add a optional 'primary' attribute in fixed ip.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457097534", "createdAt": "2020-07-20T06:35:56Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMjI0Ng=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyMzY0NQ==", "bodyText": "Done. I removed the limitation", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457923645", "createdAt": "2020-07-21T08:23:51Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMjI0Ng=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1NzU2Nw==", "bodyText": "The current implementation looks good.\nAdding a new primary attribute to the fixed IP is ideal but requires more thinking as it involves change in multiple services. Let us discuss together with other team members and roll out a mid-term plan.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r458557567", "createdAt": "2020-07-22T06:13:56Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMjI0Ng=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzE5MTkxOnYy", "diffSide": "RIGHT", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxMzoxN1rOGzSeRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoyMjoxMFrOG0tYBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMzIyMA==", "bodyText": "It would be a good idea to include the conflicted ip in the exception message.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456433220", "createdAt": "2020-07-17T13:13:17Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();\n+            }\n+            associatedIp = fixedIpv4List.get(0);\n+        }\n+\n+        Map<String, ElasticIp> associatedEips = this.getElasticIpsByPortId(projectId, projectId);\n+        for (ElasticIp eip: associatedEips.values()) {\n+            if (associatedIp.equals(eip.getPrivateIp())) {\n+                throw new ElasticIpAssociateConflict();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNzExNA==", "bodyText": "OK, I will try", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457017114", "createdAt": "2020-07-20T03:36:03Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();\n+            }\n+            associatedIp = fixedIpv4List.get(0);\n+        }\n+\n+        Map<String, ElasticIp> associatedEips = this.getElasticIpsByPortId(projectId, projectId);\n+        for (ElasticIp eip: associatedEips.values()) {\n+            if (associatedIp.equals(eip.getPrivateIp())) {\n+                throw new ElasticIpAssociateConflict();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMzIyMA=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAzOTM0OQ==", "bodyText": "Thanks.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457039349", "createdAt": "2020-07-20T04:31:37Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();\n+            }\n+            associatedIp = fixedIpv4List.get(0);\n+        }\n+\n+        Map<String, ElasticIp> associatedEips = this.getElasticIpsByPortId(projectId, projectId);\n+        for (ElasticIp eip: associatedEips.values()) {\n+            if (associatedIp.equals(eip.getPrivateIp())) {\n+                throw new ElasticIpAssociateConflict();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMzIyMA=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyMjU2NA==", "bodyText": "Done", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457922564", "createdAt": "2020-07-21T08:22:10Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();\n+            }\n+            associatedIp = fixedIpv4List.get(0);\n+        }\n+\n+        Map<String, ElasticIp> associatedEips = this.getElasticIpsByPortId(projectId, projectId);\n+        for (ElasticIp eip: associatedEips.values()) {\n+            if (associatedIp.equals(eip.getPrivateIp())) {\n+                throw new ElasticIpAssociateConflict();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMzIyMA=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzE5NjU3OnYy", "diffSide": "RIGHT", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoxNDoyOVrOGzSg5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoyMTo1M1rOG0tXVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMzg5Mw==", "bodyText": "getElasticIpsByPortId(projectId, portId)\nI think we need a UT here :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456433893", "createdAt": "2020-07-17T13:14:29Z", "author": {"login": "xieus"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();\n+            }\n+            associatedIp = fixedIpv4List.get(0);\n+        }\n+\n+        Map<String, ElasticIp> associatedEips = this.getElasticIpsByPortId(projectId, projectId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNzE1Mw==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457017153", "createdAt": "2020-07-20T03:36:11Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();\n+            }\n+            associatedIp = fixedIpv4List.get(0);\n+        }\n+\n+        Map<String, ElasticIp> associatedEips = this.getElasticIpsByPortId(projectId, projectId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMzg5Mw=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyMjM4OQ==", "bodyText": "Done", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457922389", "createdAt": "2020-07-21T08:21:53Z", "author": {"login": "Eric-Yuan"}, "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -258,6 +269,56 @@ public ElasticIpInfo updateElasticIp(ElasticIpInfo request) throws Exception {\n         return new ElasticIpInfo(eip);\n     }\n \n+    private Map<String, ElasticIp> getElasticIpsByPortId(String projectId, String portId) {\n+\n+        Map<String, Object[]> filter = new HashMap<>();\n+        filter.put(\"project_id\", new Object[] {projectId});\n+        filter.put(\"port_id\", new Object[] {portId});\n+\n+        return elasticIpRepo.findAllItems(filter);\n+    }\n+\n+    private String getAssociatedPortIp(String projectId, String portId, Integer ipVersion, String ipAddress)\n+            throws Exception {\n+        PortManagerProxy portManagerProxy = new PortManagerProxy(projectId);\n+        PortEntity port = portManagerProxy.getPortById(portId);\n+\n+        List<PortEntity.FixedIp> fixedIps = port.getFixedIps();\n+        List<String> fixedIpv4List = new ArrayList<>();\n+        for (PortEntity.FixedIp fixedIp: fixedIps) {\n+            if (Ipv4AddrUtil.formatCheck(fixedIp.getIpAddress())) {\n+                fixedIpv4List.add(fixedIp.getIpAddress());\n+            }\n+        }\n+\n+        if (fixedIpv4List.isEmpty()) {\n+            throw new ElasticIpPipNotFound();\n+        }\n+\n+        String associatedIp;\n+        if (ipAddress != null) {\n+            if (fixedIpv4List.contains(ipAddress)) {\n+                associatedIp = ipAddress;\n+            } else {\n+                throw new ElasticIpPipNotFound();\n+            }\n+        } else {\n+            if (fixedIpv4List.size() > 1) {\n+                throw new ElasticIpMultipleFixedIpFound();\n+            }\n+            associatedIp = fixedIpv4List.get(0);\n+        }\n+\n+        Map<String, ElasticIp> associatedEips = this.getElasticIpsByPortId(projectId, projectId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMzg5Mw=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzIyMTQ4OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/restclient/ElasticIpManagerRestClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyMTozNFrOGzSv9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNDoyODo0MlrOGz3ZcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNzc0OA==", "bodyText": "Oh EIP calls itself! Could we handle those calls internally or ask other instance to handle is better?", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456437748", "createdAt": "2020-07-17T13:21:34Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/restclient/ElasticIpManagerRestClient.java", "diffHunk": "@@ -1,11 +1,77 @@\n+/*\r\n+Copyright 2019 The Alcor Authors.\r\n+\r\n+Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+        you may not use this file except in compliance with the License.\r\n+        You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+        Unless required by applicable law or agreed to in writing, software\r\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+        See the License for the specific language governing permissions and\r\n+        limitations under the License.\r\n+*/\r\n+\r\n package com.futurewei.alcor.web.restclient;\r\n \r\n+import com.fasterxml.jackson.databind.ObjectMapper;\r\n+import com.futurewei.alcor.common.stats.DurationStatistics;\r\n+import com.futurewei.alcor.common.utils.ControllerUtil;\r\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpInfo;\r\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpInfoWrapper;\r\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpsInfoWrapper;\r\n import org.springframework.beans.factory.annotation.Value;\r\n+import org.springframework.http.*;\r\n+import org.springframework.util.MimeType;\r\n+import org.springframework.util.MimeTypeUtils;\r\n+import org.springframework.web.client.RestClientException;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+import java.util.Map;\r\n \r\n public class ElasticIpManagerRestClient extends AbstractRestClient {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxMTE4OA==", "bodyText": "Seems I don't get the point... This rest client is for port microservice, when delete a port or a fixed ip of it is removed, the port microservice should notify elastic ip manager to remove the related associations.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457011188", "createdAt": "2020-07-20T03:19:51Z", "author": {"login": "Eric-Yuan"}, "path": "web/src/main/java/com/futurewei/alcor/web/restclient/ElasticIpManagerRestClient.java", "diffHunk": "@@ -1,11 +1,77 @@\n+/*\r\n+Copyright 2019 The Alcor Authors.\r\n+\r\n+Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+        you may not use this file except in compliance with the License.\r\n+        You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+        Unless required by applicable law or agreed to in writing, software\r\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+        See the License for the specific language governing permissions and\r\n+        limitations under the License.\r\n+*/\r\n+\r\n package com.futurewei.alcor.web.restclient;\r\n \r\n+import com.fasterxml.jackson.databind.ObjectMapper;\r\n+import com.futurewei.alcor.common.stats.DurationStatistics;\r\n+import com.futurewei.alcor.common.utils.ControllerUtil;\r\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpInfo;\r\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpInfoWrapper;\r\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpsInfoWrapper;\r\n import org.springframework.beans.factory.annotation.Value;\r\n+import org.springframework.http.*;\r\n+import org.springframework.util.MimeType;\r\n+import org.springframework.util.MimeTypeUtils;\r\n+import org.springframework.web.client.RestClientException;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+import java.util.Map;\r\n \r\n public class ElasticIpManagerRestClient extends AbstractRestClient {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNzc0OA=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAzODE5Mw==", "bodyText": "hmm, I thought this client is for EIP mgr to call itself. Never mind then.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457038193", "createdAt": "2020-07-20T04:28:42Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/restclient/ElasticIpManagerRestClient.java", "diffHunk": "@@ -1,11 +1,77 @@\n+/*\r\n+Copyright 2019 The Alcor Authors.\r\n+\r\n+Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+        you may not use this file except in compliance with the License.\r\n+        You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+        Unless required by applicable law or agreed to in writing, software\r\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+        See the License for the specific language governing permissions and\r\n+        limitations under the License.\r\n+*/\r\n+\r\n package com.futurewei.alcor.web.restclient;\r\n \r\n+import com.fasterxml.jackson.databind.ObjectMapper;\r\n+import com.futurewei.alcor.common.stats.DurationStatistics;\r\n+import com.futurewei.alcor.common.utils.ControllerUtil;\r\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpInfo;\r\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpInfoWrapper;\r\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpsInfoWrapper;\r\n import org.springframework.beans.factory.annotation.Value;\r\n+import org.springframework.http.*;\r\n+import org.springframework.util.MimeType;\r\n+import org.springframework.util.MimeTypeUtils;\r\n+import org.springframework.web.client.RestClientException;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+import java.util.Map;\r\n \r\n public class ElasticIpManagerRestClient extends AbstractRestClient {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzNzc0OA=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzI0MTg3OnYy", "diffSide": "RIGHT", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/ElasticIpManagerProxy.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzoyNjozNFrOGzS7xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNDozMTowNlrOGz3dHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MDc3Mw==", "bodyText": "We could perf testing this method especially when elasticIps = elasticIpManagerRestClient.getElasticIps(this.projectId, filters) returns a lot of eips.\nIt involves at least two self-calls which are not parallel at this time.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r456440773", "createdAt": "2020-07-17T13:26:34Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/ElasticIpManagerProxy.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\r\n+Copyright 2019 The Alcor Authors.\r\n+\r\n+Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+        you may not use this file except in compliance with the License.\r\n+        You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+        Unless required by applicable law or agreed to in writing, software\r\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+        See the License for the specific language governing permissions and\r\n+        limitations under the License.\r\n+*/\r\n+\r\n+package com.futurewei.alcor.portmanager.proxy;\r\n+\r\n+import com.futurewei.alcor.common.utils.SpringContextUtil;\r\n+import com.futurewei.alcor.web.entity.elasticip.*;\r\n+import com.futurewei.alcor.web.restclient.ElasticIpManagerRestClient;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+public class ElasticIpManagerProxy {\r\n+\r\n+    private String projectId;\r\n+\r\n+    private ElasticIpManagerRestClient elasticIpManagerRestClient;\r\n+\r\n+    public ElasticIpManagerProxy(String projectId) {\r\n+        this.projectId = projectId;\r\n+        elasticIpManagerRestClient = SpringContextUtil.getBean(ElasticIpManagerRestClient.class);\r\n+    }\r\n+\r\n+    /**\r\n+     * Update the elastic ip association info when port deleted or ip address deleted\r\n+     * @param arg1 Port id\r\n+     * @param arg2 Private ip\r\n+     * @return List<ElasticIpInfoWrapper></>\r\n+     * @throws Exception Rest request exception\r\n+     */\r\n+    public List<ElasticIpInfoWrapper> portIpDeleteEventProcess(Object arg1, Object arg2) throws Exception {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxODQ0NQ==", "bodyText": "self-calls means extra added calls compared with one integrated controller?", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457018445", "createdAt": "2020-07-20T03:39:45Z", "author": {"login": "Eric-Yuan"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/ElasticIpManagerProxy.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\r\n+Copyright 2019 The Alcor Authors.\r\n+\r\n+Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+        you may not use this file except in compliance with the License.\r\n+        You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+        Unless required by applicable law or agreed to in writing, software\r\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+        See the License for the specific language governing permissions and\r\n+        limitations under the License.\r\n+*/\r\n+\r\n+package com.futurewei.alcor.portmanager.proxy;\r\n+\r\n+import com.futurewei.alcor.common.utils.SpringContextUtil;\r\n+import com.futurewei.alcor.web.entity.elasticip.*;\r\n+import com.futurewei.alcor.web.restclient.ElasticIpManagerRestClient;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+public class ElasticIpManagerProxy {\r\n+\r\n+    private String projectId;\r\n+\r\n+    private ElasticIpManagerRestClient elasticIpManagerRestClient;\r\n+\r\n+    public ElasticIpManagerProxy(String projectId) {\r\n+        this.projectId = projectId;\r\n+        elasticIpManagerRestClient = SpringContextUtil.getBean(ElasticIpManagerRestClient.class);\r\n+    }\r\n+\r\n+    /**\r\n+     * Update the elastic ip association info when port deleted or ip address deleted\r\n+     * @param arg1 Port id\r\n+     * @param arg2 Private ip\r\n+     * @return List<ElasticIpInfoWrapper></>\r\n+     * @throws Exception Rest request exception\r\n+     */\r\n+    public List<ElasticIpInfoWrapper> portIpDeleteEventProcess(Object arg1, Object arg2) throws Exception {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MDc3Mw=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAzNzAzOQ==", "bodyText": "Correct. It trigger calls to its own API of EIP mgr, and the call might get load balanced to other instances. This is a well-accepted pattern, just need to pay attention to its performance impact :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457037039", "createdAt": "2020-07-20T04:25:49Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/ElasticIpManagerProxy.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\r\n+Copyright 2019 The Alcor Authors.\r\n+\r\n+Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+        you may not use this file except in compliance with the License.\r\n+        You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+        Unless required by applicable law or agreed to in writing, software\r\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+        See the License for the specific language governing permissions and\r\n+        limitations under the License.\r\n+*/\r\n+\r\n+package com.futurewei.alcor.portmanager.proxy;\r\n+\r\n+import com.futurewei.alcor.common.utils.SpringContextUtil;\r\n+import com.futurewei.alcor.web.entity.elasticip.*;\r\n+import com.futurewei.alcor.web.restclient.ElasticIpManagerRestClient;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+public class ElasticIpManagerProxy {\r\n+\r\n+    private String projectId;\r\n+\r\n+    private ElasticIpManagerRestClient elasticIpManagerRestClient;\r\n+\r\n+    public ElasticIpManagerProxy(String projectId) {\r\n+        this.projectId = projectId;\r\n+        elasticIpManagerRestClient = SpringContextUtil.getBean(ElasticIpManagerRestClient.class);\r\n+    }\r\n+\r\n+    /**\r\n+     * Update the elastic ip association info when port deleted or ip address deleted\r\n+     * @param arg1 Port id\r\n+     * @param arg2 Private ip\r\n+     * @return List<ElasticIpInfoWrapper></>\r\n+     * @throws Exception Rest request exception\r\n+     */\r\n+    public List<ElasticIpInfoWrapper> portIpDeleteEventProcess(Object arg1, Object arg2) throws Exception {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MDc3Mw=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAzOTEzNQ==", "bodyText": "I read your other comments and now I understand your point. This proxy is in Port Mgr so there is no self-call. Never mind.", "url": "https://github.com/futurewei-cloud/alcor/pull/298#discussion_r457039135", "createdAt": "2020-07-20T04:31:06Z", "author": {"login": "xieus"}, "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/proxy/ElasticIpManagerProxy.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\r\n+Copyright 2019 The Alcor Authors.\r\n+\r\n+Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+        you may not use this file except in compliance with the License.\r\n+        You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+        Unless required by applicable law or agreed to in writing, software\r\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+        See the License for the specific language governing permissions and\r\n+        limitations under the License.\r\n+*/\r\n+\r\n+package com.futurewei.alcor.portmanager.proxy;\r\n+\r\n+import com.futurewei.alcor.common.utils.SpringContextUtil;\r\n+import com.futurewei.alcor.web.entity.elasticip.*;\r\n+import com.futurewei.alcor.web.restclient.ElasticIpManagerRestClient;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+public class ElasticIpManagerProxy {\r\n+\r\n+    private String projectId;\r\n+\r\n+    private ElasticIpManagerRestClient elasticIpManagerRestClient;\r\n+\r\n+    public ElasticIpManagerProxy(String projectId) {\r\n+        this.projectId = projectId;\r\n+        elasticIpManagerRestClient = SpringContextUtil.getBean(ElasticIpManagerRestClient.class);\r\n+    }\r\n+\r\n+    /**\r\n+     * Update the elastic ip association info when port deleted or ip address deleted\r\n+     * @param arg1 Port id\r\n+     * @param arg2 Private ip\r\n+     * @return List<ElasticIpInfoWrapper></>\r\n+     * @throws Exception Rest request exception\r\n+     */\r\n+    public List<ElasticIpInfoWrapper> portIpDeleteEventProcess(Object arg1, Object arg2) throws Exception {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MDc3Mw=="}, "originalCommit": {"oid": "b5b65d47ff27373451c8edcde148c355268b4f70"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4592, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}