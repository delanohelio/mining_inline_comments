{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjg1MzM0", "number": 107, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1MTo1N1rODe66qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1MTo1N1rODe66qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzQ5MTYyOnYy", "diffSide": "RIGHT", "path": "src/com/futurewei/alcor/controller/logging/LoggerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1MTo1N1rOFoU6fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1MTo1N1rOFoU6fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMDAxNQ==", "bodyText": "Please confirm this method is thread safe.", "url": "https://github.com/futurewei-cloud/alcor/pull/107#discussion_r377830015", "createdAt": "2020-02-11T18:51:57Z", "author": {"login": "xieus"}, "path": "src/com/futurewei/alcor/controller/logging/LoggerFactory.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+// sudo docker stop $(sudo docker ps -a -q)\n+// sudo docker rm $(sudo docker ps -a -q --filter \"status=exited\")\n+// sudo docker rmi $(sudo docker images -q)\n+// sudo docker exec -it alcor-controller bash\n+\n+package com.futurewei.alcor.controller.logging;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.logging.Level;\n+\n+@Component\n+public class LoggerFactory {\n+    public static Logger logger = new Logger();\n+    public static String loggingLevel;\n+    public static String loggingFilePath;\n+    public static String loggingType;\n+    private static boolean bLogConfig = false;\n+\n+    public LoggerFactory() {\n+    }\n+\n+    public static Logger getLogger() {\n+        try {\n+            if (bLogConfig == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13bb06715b99b59167c3f121d2acfaf24bbd90bb"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4680, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}