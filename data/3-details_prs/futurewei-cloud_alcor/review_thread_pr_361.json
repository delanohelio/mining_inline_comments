{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODkyMDM3", "number": 361, "reviewThreads": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjowNToyNFrOEbwhQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMjo0MlrOEgiYwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQxOTUyOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/FixedIp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjowNToyNFrOHF35og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozMToxNFrOHGqzAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMDgwMg==", "bodyText": "FixedIp is also defined in PortEntity \n  \n    \n      alcor/web/src/main/java/com/futurewei/alcor/web/entity/port/PortEntity.java\n    \n    \n         Line 251\n      in\n      d823316\n    \n    \n    \n    \n\n        \n          \n           public static class FixedIp { \n        \n    \n  \n\n\nCould you check if we could reuse it?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475920802", "createdAt": "2020-08-24T22:05:24Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/FixedIp.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+\n+public class FixedIp {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1NDY4OQ==", "bodyText": "Yes ~ I see the FixedIp is the internal class in PortEntity, could we move the entity to the general directory? Because some other class also need it", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r476754689", "createdAt": "2020-08-25T21:31:14Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/FixedIp.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+\n+public class FixedIp {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMDgwMg=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQyMzkxOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteEntity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjowNzowOFrOHF38Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozMjo1NlrOHGq4fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMTQ1OQ==", "bodyText": "Do we need this import?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475921459", "createdAt": "2020-08-24T22:07:08Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteEntity.java", "diffHunk": "@@ -17,6 +17,7 @@\n package com.futurewei.alcor.web.entity.route;\n \n import com.futurewei.alcor.common.entity.CustomerResource;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1NjA5NQ==", "bodyText": "No I will remove it", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r476756095", "createdAt": "2020-08-25T21:32:56Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteEntity.java", "diffHunk": "@@ -17,6 +17,7 @@\n package com.futurewei.alcor.web.entity.route;\n \n import com.futurewei.alcor.common.entity.CustomerResource;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMTQ1OQ=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQyNzA1OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteEntry.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjowODoyOFrOHF3-Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjoyOTozMFrOHMMDzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMTk1NA==", "bodyText": "I found there are two files, both named RouteEntity in this PR. Very unusual. Could you pls double check?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475921954", "createdAt": "2020-08-24T22:08:28Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteEntry.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.jetbrains.annotations.NotNull;\n+\n+@Data\n+public class RouteEntry extends CustomerResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1NzMyMA==", "bodyText": "One is the RouteEntity, it's used for our previous version of route manager; the other one is RouteEntry, it's used for our new version.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r476757320", "createdAt": "2020-08-25T21:34:26Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteEntry.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.jetbrains.annotations.NotNull;\n+\n+@Data\n+public class RouteEntry extends CustomerResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMTk1NA=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MTY2Mw==", "bodyText": "Got it. Looked so similar, time to upgrade my glass :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477061663", "createdAt": "2020-08-26T06:25:10Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteEntry.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.jetbrains.annotations.NotNull;\n+\n+@Data\n+public class RouteEntry extends CustomerResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMTk1NA=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0MjU0Mg==", "bodyText": "@kevin-zhonghao @xieus Should we remove the previous version of APIs from this PR if we don't need it?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482542542", "createdAt": "2020-09-02T22:29:30Z", "author": {"login": "cj-chung"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteEntry.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.jetbrains.annotations.NotNull;\n+\n+@Data\n+public class RouteEntry extends CustomerResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMTk1NA=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQyOTMzOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjowOToyNlrOHF3_eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozNTowMFrOHGq_fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMjI5Nw==", "bodyText": "[Minor]: subnet_id and vpc_id?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475922297", "createdAt": "2020-08-24T22:09:26Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteTable.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+@Data\n+public class RouteTable extends CustomerResource {\n+\n+    @JsonProperty(\"routes\")\n+    private List<RouteEntry> routeEntities;\n+\n+    @JsonProperty(\"route_table_type\")\n+    private RouteTableType routeTableType;\n+\n+    // store subnet_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1Nzg4Ng==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r476757886", "createdAt": "2020-08-25T21:35:00Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteTable.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+@Data\n+public class RouteTable extends CustomerResource {\n+\n+    @JsonProperty(\"routes\")\n+    private List<RouteEntry> routeEntities;\n+\n+    @JsonProperty(\"route_table_type\")\n+    private RouteTableType routeTableType;\n+\n+    // store subnet_id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMjI5Nw=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQzODk2OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoxMzoxMVrOHF4FKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyMzo1OFrOHG9gJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMzc1Mg==", "bodyText": "created_at and updated_at are included in CustomerResource, right?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475923752", "createdAt": "2020-08-24T22:13:11Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class Router extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private List<RouteTable> routeTables;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store vpc_id\n+    @JsonProperty(\"router_extra_attribute_id\")\n+    private String routerExtraAttributeId;\n+\n+    // store subnet_gateway_port_id\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")\n+    private boolean adminStateUp;\n+\n+    @JsonProperty(\"status\")\n+    private String status;\n+\n+    @CreatedDate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1ODUxNw==", "bodyText": "Not included in CustomerResource, so we have to add them", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r476758517", "createdAt": "2020-08-25T21:35:39Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class Router extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private List<RouteTable> routeTables;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store vpc_id\n+    @JsonProperty(\"router_extra_attribute_id\")\n+    private String routerExtraAttributeId;\n+\n+    // store subnet_gateway_port_id\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")\n+    private boolean adminStateUp;\n+\n+    @JsonProperty(\"status\")\n+    private String status;\n+\n+    @CreatedDate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMzc1Mg=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MTE1Ng==", "bodyText": "Got it.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477061156", "createdAt": "2020-08-26T06:23:58Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class Router extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private List<RouteTable> routeTables;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store vpc_id\n+    @JsonProperty(\"router_extra_attribute_id\")\n+    private String routerExtraAttributeId;\n+\n+    // store subnet_gateway_port_id\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")\n+    private boolean adminStateUp;\n+\n+    @JsonProperty(\"status\")\n+    private String status;\n+\n+    @CreatedDate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMzc1Mg=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQ0MzQ2OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouterWebRequestJson.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoxNDo1OVrOHF4H3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoxMDo1NFrOHNcuNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNDQ0NA==", "bodyText": "@kevin-zhonghao Forgot to mention this to you earlier. Going forward, let us not use lombok.Data, instead, let us write setter and getter explicitly.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475924444", "createdAt": "2020-08-24T22:14:59Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouterWebRequestJson.java", "diffHunk": "@@ -15,18 +15,16 @@\n */\n package com.futurewei.alcor.web.entity.route;\n \n-public class RouterState {\n-    private String tenantId;\n+import lombok.Data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2MDEzOA==", "bodyText": "NP ~ I will remember that and use setter and getter directorly, but in this PR, most of web class used @DaTa. Should I fix them all?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r476760138", "createdAt": "2020-08-25T21:37:33Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouterWebRequestJson.java", "diffHunk": "@@ -15,18 +15,16 @@\n */\n package com.futurewei.alcor.web.entity.route;\n \n-public class RouterState {\n-    private String tenantId;\n+import lombok.Data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNDQ0NA=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NDExOQ==", "bodyText": "@kevin-zhonghao It is okay. Plan to change it when you get bored :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483864119", "createdAt": "2020-09-04T22:10:54Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouterWebRequestJson.java", "diffHunk": "@@ -15,18 +15,16 @@\n */\n package com.futurewei.alcor.web.entity.route;\n \n-public class RouterState {\n-    private String tenantId;\n+import lombok.Data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNDQ0NA=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQ1MzE0OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/vpc/VpcEntity.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoxOTowM1rOHF4NzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo0NToxNFrOHMNN_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNTk2NA==", "bodyText": "@kevin-zhonghao @cj-chung\nFor VPCEntity, could use extract the common fields of VPCEntity and NetworkEntity (not existed yet) to a common class? VPCEntity and NetworkEntity could inherit this common class. This way, we could clearly see the differences in two different scenarios.\nNot high priority for this PR. We could discuss and plan in next PR.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475925964", "createdAt": "2020-08-24T22:19:03Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/vpc/VpcEntity.java", "diffHunk": "@@ -19,6 +20,9 @@\n     @JsonProperty(\"routes\")\n     private List<RouteEntity> routeEntities;\n \n+    @JsonProperty(\"router\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2MDkwMg==", "bodyText": "That's a good idea ~ we could discuss later", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r476760902", "createdAt": "2020-08-25T21:38:27Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/vpc/VpcEntity.java", "diffHunk": "@@ -19,6 +20,9 @@\n     @JsonProperty(\"routes\")\n     private List<RouteEntity> routeEntities;\n \n+    @JsonProperty(\"router\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNTk2NA=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2MTUzMg==", "bodyText": "@kevin-zhonghao @xieus Agree, this is a fundamental change, we should wait until next PR.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482561532", "createdAt": "2020-09-02T22:45:14Z", "author": {"login": "cj-chung"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/vpc/VpcEntity.java", "diffHunk": "@@ -19,6 +20,9 @@\n     @JsonProperty(\"routes\")\n     private List<RouteEntity> routeEntities;\n \n+    @JsonProperty(\"router\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNTk2NA=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQ1NjkxOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/NeutronRouterWebRequestObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoyMDozMFrOHF4QEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozOTozM1rOHGrO5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNjU0NA==", "bodyText": "created_at and updated_at.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475926544", "createdAt": "2020-08-24T22:20:30Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/NeutronRouterWebRequestObject.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class NeutronRouterWebRequestObject extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private List<RouteTable> routeTables;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store subnet_gateway_port_id\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")\n+    private boolean adminStateUp;\n+\n+    @JsonProperty(\"status\")\n+    private String status;\n+\n+    @JsonProperty(\"external_gateway_info\")\n+    private ExternalGateway external_gateway_info;\n+\n+    @JsonProperty(\"revision_number\")\n+    private Integer revisionNumber;\n+\n+    @JsonProperty(\"distributed\")\n+    private boolean distributed;\n+\n+    @JsonProperty(\"ha\")\n+    private boolean ha;\n+\n+    @JsonProperty(\"availability_zone_hints\")\n+    private List<String> availabilityZoneHints;\n+\n+    @JsonProperty(\"availability_zones\")\n+    private List<String> availabilityZones;\n+\n+    @JsonProperty(\"service_type_id\")\n+    private String serviceTypeId;\n+\n+    @JsonProperty(\"flavor_id\")\n+    private String flavorId;\n+\n+    @JsonProperty(\"tags\")\n+    private List<String> tags;\n+\n+    @JsonProperty(\"conntrack_helpers\")\n+    private List<String> conntrackHelpers;\n+\n+    @CreatedDate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2MTgyOQ==", "bodyText": "Tha's right. Removed them", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r476761829", "createdAt": "2020-08-25T21:39:33Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/NeutronRouterWebRequestObject.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class NeutronRouterWebRequestObject extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private List<RouteTable> routeTables;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store subnet_gateway_port_id\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")\n+    private boolean adminStateUp;\n+\n+    @JsonProperty(\"status\")\n+    private String status;\n+\n+    @JsonProperty(\"external_gateway_info\")\n+    private ExternalGateway external_gateway_info;\n+\n+    @JsonProperty(\"revision_number\")\n+    private Integer revisionNumber;\n+\n+    @JsonProperty(\"distributed\")\n+    private boolean distributed;\n+\n+    @JsonProperty(\"ha\")\n+    private boolean ha;\n+\n+    @JsonProperty(\"availability_zone_hints\")\n+    private List<String> availabilityZoneHints;\n+\n+    @JsonProperty(\"availability_zones\")\n+    private List<String> availabilityZones;\n+\n+    @JsonProperty(\"service_type_id\")\n+    private String serviceTypeId;\n+\n+    @JsonProperty(\"flavor_id\")\n+    private String flavorId;\n+\n+    @JsonProperty(\"tags\")\n+    private List<String> tags;\n+\n+    @JsonProperty(\"conntrack_helpers\")\n+    private List<String> conntrackHelpers;\n+\n+    @CreatedDate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNjU0NA=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTUxMzYwOnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/VpcService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjo0NToyMlrOHF4yBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0MTo0MFrOHGrV3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzNTIzNg==", "bodyText": "what is getRoute_test for? Something like \"_test\" is usually not recommended in the interface.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475935236", "createdAt": "2020-08-24T22:45:22Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/VpcService.java", "diffHunk": "@@ -2,12 +2,15 @@\n \n import com.futurewei.alcor.vpcmanager.exception.SubnetsNotEmptyException;\n import com.futurewei.alcor.web.entity.route.RouteWebJson;\n+import com.futurewei.alcor.web.entity.route.RouterWebJson;\n import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n \n public interface VpcService {\n \n     public RouteWebJson getRoute (String vpcId, VpcEntity vpcState);\n \n+    public RouterWebJson getRoute_test (String routerId, String routeTableId, VpcEntity vpcState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2MzYxNA==", "bodyText": "Actually this is for the test of new version of route manager, I will remove it", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r476763614", "createdAt": "2020-08-25T21:41:40Z", "author": {"login": "kevin-zhonghao"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/VpcService.java", "diffHunk": "@@ -2,12 +2,15 @@\n \n import com.futurewei.alcor.vpcmanager.exception.SubnetsNotEmptyException;\n import com.futurewei.alcor.web.entity.route.RouteWebJson;\n+import com.futurewei.alcor.web.entity.route.RouterWebJson;\n import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n \n public interface VpcService {\n \n     public RouteWebJson getRoute (String vpcId, VpcEntity vpcState);\n \n+    public RouterWebJson getRoute_test (String routerId, String routeTableId, VpcEntity vpcState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzNTIzNg=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjM3OTk4OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTo0OTowOFrOHG8wEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0NDo0MlrOHM5zYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0ODg0OQ==", "bodyText": "Could we switch to Alcor logger instead of slf4j logger?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477048849", "createdAt": "2020-08-26T05:49:08Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxNzUxNw==", "bodyText": "@kevin-zhonghao ping on this comment.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482217517", "createdAt": "2020-09-02T16:51:08Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0ODg0OQ=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU3NTM1Mw==", "bodyText": "Done", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482575353", "createdAt": "2020-09-02T22:56:29Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0ODg0OQ=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MjAwMg==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483292002", "createdAt": "2020-09-03T22:44:42Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0ODg0OQ=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjM4MTQzOnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTo0OTo0NVrOHG8w7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxOTo1MTozOFrOHJSrZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTA3MQ==", "bodyText": "Remove commented lines, as always :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477049071", "createdAt": "2020-08-26T05:49:45Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNTI1NQ==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r479505255", "createdAt": "2020-08-28T19:51:38Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTA3MQ=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjM4Mjg3OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTo1MDoyNFrOHG8xxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoxNjozOVrOHNczkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTI4NA==", "bodyText": "@kevin-zhonghao maybe it is time to start thinking about a generic validator for all microservices.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477049284", "createdAt": "2020-08-26T05:50:24Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMDUzMQ==", "bodyText": "Yes I think so", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r479510531", "createdAt": "2020-08-28T20:04:30Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTI4NA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMTEyNg==", "bodyText": "we could put all validator of microservices into one Util class", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r479511126", "createdAt": "2020-08-28T20:05:54Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTI4NA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMDgyNA==", "bodyText": "Correct. @kevin-zhonghao\nThat is one way - putting all the util methods together in a utii class, and those methods are set as static methods.\nAlternative is to use OOD for validator - a base validator class defining the validate() interface, and a few more child classes inheriting from the base and implement the actual validate method.\nEach child class is responsible of one specific class that it wants to validate.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482220824", "createdAt": "2020-09-02T16:56:03Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTI4NA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MTk0Mw==", "bodyText": "Yes ~ could we do this in next PR?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483291943", "createdAt": "2020-09-03T22:44:29Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTI4NA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NTQ5MQ==", "bodyText": "@kevin-zhonghao This is not urgent. Instead, we will need design the validator for the ground up and apply it to the web layers of all microservices (of course, starting with small, e.g., from vpc mgr).\nTracking the item in an issue #374 and assign to you and me :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483865491", "createdAt": "2020-09-04T22:16:39Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTI4NA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjM4NjQyOnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTo1MTo1M1rOHG8ztA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDowNDo1OVrOHJTA0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTc4MA==", "bodyText": "Just would like to make sure this is the Neutron behavior as well - returning an empty json instead of an error code.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477049780", "createdAt": "2020-08-26T05:51:53Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMDczNw==", "bodyText": "Yes", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r479510737", "createdAt": "2020-08-28T20:04:59Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTc4MA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQwMDUzOnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTo1ODoxMVrOHG876A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTowOToyOVrOHJUiSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1MTg4MA==", "bodyText": "router.getRouterExtraAttributeId() could be null or empty if this router is a vpc router. It might be a good idea to add validation before proceeding to query an addition table.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477051880", "createdAt": "2020-08-26T05:58:11Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzNTY4OQ==", "bodyText": "Add it", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r479535689", "createdAt": "2020-08-28T21:09:29Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1MTg4MA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQxNzUzOnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowNTo1MFrOHG9GMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0NDowOFrOHM5yzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NDUxNA==", "bodyText": "Could we consolidate the validation into one?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477054514", "createdAt": "2020-08-26T06:05:50Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MTg1Mw==", "bodyText": "we may do this in next PR", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483291853", "createdAt": "2020-09-03T22:44:08Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NDUxNA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQyMjg5OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowODoxOFrOHG9Jlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjowODoxOFrOHG9Jlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NTM4Mw==", "bodyText": "Like the controller, pretty concise!", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477055383", "createdAt": "2020-08-26T06:08:18Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID vpcId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(vpcId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQyODc1OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxMDo1MlrOHG9NMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToxMjo1N1rOHJUnJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NjMwNQ==", "bodyText": "what if the resource.getid() != routerid?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477056305", "createdAt": "2020-08-26T06:10:52Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID vpcId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(vpcId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzNjkzMg==", "bodyText": "User are not allowed to change the router_id", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r479536932", "createdAt": "2020-08-28T21:12:57Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID vpcId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(vpcId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NjMwNQ=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ0NzA4OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/subnet/SubnetEntity.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxODoyN1rOHG9YFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjo0Mzo0M1rOHM5yTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1OTA5NA==", "bodyText": "Yes, I think you've introduced port_detail in the SubnetEntity.\nHow about removing the old gw_port_ip and gw_port_mac? I would recommend to keep them for now unless PM and other relevant managers switch to the new contract, and then we remove the old fields. Therefore it might be worth putting a @Legacy annotation on those fields.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477059094", "createdAt": "2020-08-26T06:18:27Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/subnet/SubnetEntity.java", "diffHunk": "@@ -36,9 +37,19 @@\n     @JsonProperty(\"availability_zone\")\n     private String availabilityZone;\n \n+    // TODO: considering to put into port", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MDYxMw==", "bodyText": "Yes ~ I think so", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483160613", "createdAt": "2020-09-03T18:02:43Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/subnet/SubnetEntity.java", "diffHunk": "@@ -36,9 +37,19 @@\n     @JsonProperty(\"availability_zone\")\n     private String availabilityZone;\n \n+    // TODO: considering to put into port", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1OTA5NA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5MTcyNA==", "bodyText": "we could do this in future~", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483291724", "createdAt": "2020-09-03T22:43:43Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/subnet/SubnetEntity.java", "diffHunk": "@@ -36,9 +37,19 @@\n     @JsonProperty(\"availability_zone\")\n     private String availabilityZone;\n \n+    // TODO: considering to put into port", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1OTA5NA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ2NTYxOnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/VpcService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyNTo0M1rOHG9i9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToxNDowNVrOHJUoxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MTg3OA==", "bodyText": "Do we need this?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477061878", "createdAt": "2020-08-26T06:25:43Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/VpcService.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n import com.futurewei.alcor.vpcmanager.exception.SubnetsNotEmptyException;\n import com.futurewei.alcor.web.entity.route.RouteWebJson;\n+import com.futurewei.alcor.web.entity.route.RouterWebJson;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzNzM0OA==", "bodyText": "Already remove it", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r479537348", "createdAt": "2020-08-28T21:14:05Z", "author": {"login": "kevin-zhonghao"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/VpcService.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n import com.futurewei.alcor.vpcmanager.exception.SubnetsNotEmptyException;\n import com.futurewei.alcor.web.entity.route.RouteWebJson;\n+import com.futurewei.alcor.web.entity.route.RouterWebJson;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MTg3OA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ2NjQ1OnYy", "diffSide": "RIGHT", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyNjowMFrOHG9jdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMToxMzo1NlrOHJUolQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MjAwNA==", "bodyText": "Do we need them?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477062004", "createdAt": "2020-08-26T06:26:00Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java", "diffHunk": "@@ -29,6 +29,9 @@\n import com.futurewei.alcor.web.entity.route.RouteWebJson;\n import com.futurewei.alcor.web.entity.route.RouteEntity;\n import com.futurewei.alcor.web.entity.vpc.SegmentInfoInVpc;\n+import com.futurewei.alcor.web.entity.route.Router;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUzNzMwMQ==", "bodyText": "Already remove it", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r479537301", "createdAt": "2020-08-28T21:13:56Z", "author": {"login": "kevin-zhonghao"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java", "diffHunk": "@@ -29,6 +29,9 @@\n import com.futurewei.alcor.web.entity.route.RouteWebJson;\n import com.futurewei.alcor.web.entity.route.RouteEntity;\n import com.futurewei.alcor.web.entity.vpc.SegmentInfoInVpc;\n+import com.futurewei.alcor.web.entity.route.Router;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MjAwNA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTEzNjQ5OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjo1Nzo1MlrOHL4fkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoxMDowM1rOHMyBIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMTk2OQ==", "bodyText": "Do we need to persist here?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482221969", "createdAt": "2020-09-02T16:57:52Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteController.java", "diffHunk": "@@ -252,4 +251,43 @@ public ResponseId deleteRuleWithSubnetId(@PathVariable String subnetId, @PathVar\n         return new ResponseId(routeId);\n         \n     }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/routers/{routerId}/routetable/{routeTableId}\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    @DurationStatistics\n+    public RouterWebJson createDefaultRouterForVpc(@PathVariable String routerId, @PathVariable String routeTableId, @RequestBody VpcWebJson resource) throws Exception {\n+        RouteEntry routeEntry = null;\n+        RouteTable routeTable = null;\n+        Router router = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerId);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routeTableId);\n+            VpcEntity vpcEntity = resource.getNetwork();\n+            RestPreconditionsUtil.verifyResourceNotNull(vpcEntity);\n+\n+            String id = UUID.randomUUID().toString();\n+            String projectId = vpcEntity.getProjectId();\n+            String destination = vpcEntity.getCidr();\n+            String vpcId = vpcEntity.getId();\n+\n+            routeEntry = new RouteEntry(projectId, id, \"default_route_rule\", \"\",\n+                    destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+            List<RouteEntry> routeEntries = new ArrayList<>();\n+            routeEntries.add(routeEntry);\n+            routeTable = new RouteTable(projectId, routerId, \"default_route_table\", \"\",routeEntries, RouteConstant.DEFAULT_ROUTE_TABLE_TYPE,vpcId);\n+\n+            router = new Router(projectId, routeTableId, \"default_router\", \"\", routeTable);\n+\n+            //this.routeDatabaseService.addRoute(routeEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2NDQ0OA==", "bodyText": "No ~ this is an API for previous test, which need to be deleted", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483164448", "createdAt": "2020-09-03T18:10:03Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteController.java", "diffHunk": "@@ -252,4 +251,43 @@ public ResponseId deleteRuleWithSubnetId(@PathVariable String subnetId, @PathVar\n         return new ResponseId(routeId);\n         \n     }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/routers/{routerId}/routetable/{routeTableId}\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    @DurationStatistics\n+    public RouterWebJson createDefaultRouterForVpc(@PathVariable String routerId, @PathVariable String routeTableId, @RequestBody VpcWebJson resource) throws Exception {\n+        RouteEntry routeEntry = null;\n+        RouteTable routeTable = null;\n+        Router router = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerId);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routeTableId);\n+            VpcEntity vpcEntity = resource.getNetwork();\n+            RestPreconditionsUtil.verifyResourceNotNull(vpcEntity);\n+\n+            String id = UUID.randomUUID().toString();\n+            String projectId = vpcEntity.getProjectId();\n+            String destination = vpcEntity.getCidr();\n+            String vpcId = vpcEntity.getId();\n+\n+            routeEntry = new RouteEntry(projectId, id, \"default_route_rule\", \"\",\n+                    destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+            List<RouteEntry> routeEntries = new ArrayList<>();\n+            routeEntries.add(routeEntry);\n+            routeTable = new RouteTable(projectId, routerId, \"default_route_table\", \"\",routeEntries, RouteConstant.DEFAULT_ROUTE_TABLE_TYPE,vpcId);\n+\n+            router = new Router(projectId, routeTableId, \"default_router\", \"\", routeTable);\n+\n+            //this.routeDatabaseService.addRoute(routeEntity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMTk2OQ=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTEzODEyOnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteEntryController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjo1ODoxN1rOHL4gtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjo1ODoxN1rOHL4gtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMjI2MA==", "bodyText": "Use alcor logger.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482222260", "createdAt": "2020-09-02T16:58:17Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteEntryController.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import org.slf4j.Logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTE0MjYyOnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteEntryController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjo1OToyNVrOHL4jbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoxMDo0MlrOHMyClw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMjk1OA==", "bodyText": "btw, doesn't find APIs in RouteEntryController and RouteTableController. Do we still need these new controllers?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482222958", "createdAt": "2020-09-02T16:59:25Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteEntryController.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class RouteEntryController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2NDgyMw==", "bodyText": "RouteEntryController is removed and RouteTableController is empty", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483164823", "createdAt": "2020-09-03T18:10:42Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteEntryController.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class RouteEntryController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMjk1OA=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjY2OTE3OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToyMTo1MVrOHMIhsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0MDo1NlrOHMzG3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NDY1Nw==", "bodyText": "Why you need to set routerID when routerExtraAttribute != null?\nThe routerID should be set when the router has or has not extra attribute.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482484657", "createdAt": "2020-09-02T21:21:51Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4MjMwMw==", "bodyText": "The ID of NeutronRouterWebRequestObject should be router_id, but I used the BeanUtils.copyProperties method twice. The first time I used it, NeutronRouterWebRequestObject_id = router_id; But the second time I used it, route_extra_attribute_id would overwrite the previous value, so I had to change it set back", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483182303", "createdAt": "2020-09-03T18:40:56Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NDY1Nw=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjc4NDI1OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/NeutronRouterWebRequestObject.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo0NDozNFrOHMJsaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToyODowNlrOHM0kag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwMzc4Nw==", "bodyText": "@xieus Do we need admin_state_up attribute for VPC router?\n'admin_state_up' is for neutron router actually. If we don't need it in VPC, we can put this attribute in the neutron specific attribute object which is router_extra_attributes object.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482503787", "createdAt": "2020-09-02T21:44:34Z", "author": {"login": "cj-chung"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/NeutronRouterWebRequestObject.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class NeutronRouterWebRequestObject extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private RouteTable routeTable;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store subnet_gateway_port_id / interface\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwODk4Ng==", "bodyText": "This depends on whether users could leverage this field in the VPC scenario, and how we plan to use this field.\nThe answer to the first question could be NO as user may not have visibility to a VPC router.\nFor the second question, can admin use this field to check L3 routing status or something else?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482508986", "createdAt": "2020-09-02T21:50:44Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/NeutronRouterWebRequestObject.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class NeutronRouterWebRequestObject extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private RouteTable routeTable;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store subnet_gateway_port_id / interface\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwMzc4Nw=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNTQzOQ==", "bodyText": "For VPC, I think the router is implicit for user, even for the admin, since one VPC can only has one router. So, admin_state or router_state for VPC is meaningless. In VPC's L3 routing, most of operations are depends on routing tables, but in Neutron's case, they are depends on router.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482515439", "createdAt": "2020-09-02T21:58:53Z", "author": {"login": "cj-chung"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/NeutronRouterWebRequestObject.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class NeutronRouterWebRequestObject extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private RouteTable routeTable;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store subnet_gateway_port_id / interface\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwMzc4Nw=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNjI1MA==", "bodyText": "Combined the fields in one class could make our model cover both vpc and neutron router,  if there is no other effect", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483206250", "createdAt": "2020-09-03T19:28:06Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/NeutronRouterWebRequestObject.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class NeutronRouterWebRequestObject extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private RouteTable routeTable;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store subnet_gateway_port_id / interface\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwMzc4Nw=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzA0MDY3OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjozMjo1OFrOHMMUPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToyMzo1OFrOHM0cmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0Njc0OA==", "bodyText": "@kevin-zhonghao There are multiple routetables for a router. It's better rename 'routetable' to 'routetables'", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482546748", "createdAt": "2020-09-02T22:32:58Z", "author": {"login": "cj-chung"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class Router extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5NjYyOQ==", "bodyText": "Actually our vpc and subnet still use the previous APIs of route manager, is that correct?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483196629", "createdAt": "2020-09-03T19:08:27Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class Router extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0Njc0OA=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNDI0OA==", "bodyText": "'routetable' to 'routetables' issue has been fixed", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483204248", "createdAt": "2020-09-03T19:23:58Z", "author": {"login": "kevin-zhonghao"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class Router extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0Njc0OA=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzA3NzMxOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjozODoxMVrOHMMsXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoxODo0NlrOHMwUYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU1MjkyNw==", "bodyText": "@kevin-zhonghao @xieus Again, we need to think about the usage of this attribute 'admin_state_up'. It's for Neutron router only, not for VPC router. Should we put this attribute in the 'router_extra_attribute'?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482552927", "createdAt": "2020-09-02T22:38:11Z", "author": {"login": "cj-chung"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class Router extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private RouteTable routeTable;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store vpc_id\n+    @JsonProperty(\"router_extra_attribute_id\")\n+    private String routerExtraAttributeId;\n+\n+    // store subnet_gateway_port_id\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzNjYwOA==", "bodyText": "does it hurt anything if we always assume the admin_state_up=true? In ACA, we don't have admin_state_up concept today so it is assume true.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483136608", "createdAt": "2020-09-03T17:18:46Z", "author": {"login": "er1cthe0ne"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class Router extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private RouteTable routeTable;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store vpc_id\n+    @JsonProperty(\"router_extra_attribute_id\")\n+    private String routerExtraAttributeId;\n+\n+    // store subnet_gateway_port_id\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU1MjkyNw=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzE2MjU2OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo1MDoxMVrOHMNlMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMToxNzowNVrOHM3yHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2NzQ3Mw==", "bodyText": "@kevin-zhonghao Please make sure this call will handle atomically routing rule updating.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482567473", "createdAt": "2020-09-02T22:50:11Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI1ODkwOQ==", "bodyText": "Got it", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483258909", "createdAt": "2020-09-03T21:17:05Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2NzQ3Mw=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzE4MTQ4OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo1Mjo1NFrOHMNx_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjowNzowN1rOHM5Cbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU3MDc0OQ==", "bodyText": "@kevin-zhonghao If there are gateway ports for subnets still in this router, the deletion should return error message to user.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482570749", "createdAt": "2020-09-02T22:52:54Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI3OTQ3MA==", "bodyText": "left the comment for future already", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483279470", "createdAt": "2020-09-03T22:07:07Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU3MDc0OQ=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODIzMzg2OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjozMzowNlrOHMXyhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMTo0NToxMVrOHM4g4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczNDcyNw==", "bodyText": "@kevin-zhonghao We need to maintain the mapping for new added port and it's subnet in the Route Manager, did you maintain this mapping in this function?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482734727", "createdAt": "2020-09-03T06:33:06Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI3MDg4MA==", "bodyText": "I could modify this in the next PR as we talked about", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483270880", "createdAt": "2020-09-03T21:45:11Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczNDcyNw=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI1NzU4OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0MDowOFrOHMYAsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjoyOTowNFrOHM5ghg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczODM1NQ==", "bodyText": "@kevin-zhonghao After successfully attached interface to router, we also need to return all connected subnet-ids to Port Manager. The algorithm as follow:\n\nget ports array from the router.\nget subnet-ids from the mapping table of port-subnet for all ports.\ncall Port Manager's /project/{project_id}/update-l3-neighbors/{new_subnet_id} with BODY {operation_type, vpcid, [old_subnet_ids]}.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482738355", "createdAt": "2020-09-03T06:40:08Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+        if (routerExtraAttribute == null) {\n+            return new ResponseId();\n+        }\n+        this.routerExtraAttributeDatabaseService.deleteRouterExtraAttribute(routerExtraAttribute.getId());\n+\n+        return new ResponseId(routerid);\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse addInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.addAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2NTUxMA==", "bodyText": "@kevin-zhonghao BTW, we need to check if there is only one gateway port exists in the current router, we don't need to request PM for update-l3-neighbors. This operation only happen when there are more than 2 ports exist in the router.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482765510", "createdAt": "2020-09-03T07:29:35Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+        if (routerExtraAttribute == null) {\n+            return new ResponseId();\n+        }\n+        this.routerExtraAttributeDatabaseService.deleteRouterExtraAttribute(routerExtraAttribute.getId());\n+\n+        return new ResponseId(routerid);\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse addInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.addAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczODM1NQ=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4NzE3NA==", "bodyText": "Got it ~ have marked already", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483287174", "createdAt": "2020-09-03T22:29:04Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+        if (routerExtraAttribute == null) {\n+            return new ResponseId();\n+        }\n+        this.routerExtraAttributeDatabaseService.deleteRouterExtraAttribute(routerExtraAttribute.getId());\n+\n+        return new ResponseId(routerid);\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse addInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.addAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczODM1NQ=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQ1NDIzOnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzozNTozNlrOHMZ34Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjowODowNFrOHM5Dww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODg2NQ==", "bodyText": "@kevin-zhonghao We also need to update the port-subnet mapping table in the Route Manager.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482768865", "createdAt": "2020-09-03T07:35:36Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI3OTgxMQ==", "bodyText": "leave it for next PR", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483279811", "createdAt": "2020-09-03T22:08:04Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODg2NQ=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 302}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQ3NzM0OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0MToyMVrOHMaFyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMDoyMzo0OVrOHM7hgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MjQyNA==", "bodyText": "@kevin-zhonghao Here has two for-loops for matching rules, it takes O(n^2). Do we have better algorithm reducing it to linear time O(n)? Such as using destination as index or key for RouteEntry.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482772424", "createdAt": "2020-09-03T07:41:21Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, DatabasePersistenceException, DestinationOrNexthopCanNotBeNull {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            boolean isExit = false;\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    isExit = true;\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4NDU5NA==", "bodyText": "If we use destination as index or key for RouteEntry, we may not guarantee the uniqueness of the RouteEntry key. Although here is two for-loops, but one of the n depends on requestbody, so the time complexity should be O(m * n), and m may not be very large, right?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483284594", "createdAt": "2020-09-03T22:21:25Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, DatabasePersistenceException, DestinationOrNexthopCanNotBeNull {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            boolean isExit = false;\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    isExit = true;\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MjQyNA=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMyMDE5NA==", "bodyText": "Agree. we can leave current design and implementation for now. We can wait until it hits performance issue when we doing perf-test.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483320194", "createdAt": "2020-09-04T00:23:49Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, DatabasePersistenceException, DestinationOrNexthopCanNotBeNull {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            boolean isExit = false;\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    isExit = true;\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MjQyNA=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 339}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDc1MTQ2OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowNDo1MFrOHMv2ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjoxNDowNVrOHM5MFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyODkzOA==", "bodyText": "@kevin-zhonghao we need to add a function call here for l3-neighbors-updating. It should be the function call to PM same as the previous one /project/{project_id}/update-l3-neighbors/{new_subnet_id}, but the detail contract is not confirm yet.  We can wait until the contract is confirmed.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483128938", "createdAt": "2020-09-03T17:04:50Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+        if (routerExtraAttribute == null) {\n+            return new ResponseId();\n+        }\n+        this.routerExtraAttributeDatabaseService.deleteRouterExtraAttribute(routerExtraAttribute.getId());\n+\n+        return new ResponseId(routerid);\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse addInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.addAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+\n+        return routerInterfaceResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/remove_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse removeInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.removeAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+\n+        return routerInterfaceResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_extra_routes\"})\n+    @DurationStatistics\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RoutesToNeutronWebRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        RoutesToNeutronRouterRequestObject router = resource.getRouter();\n+        if (router == null) {\n+            return new RoutesToNeutronWebResponse();\n+        }\n+\n+        RoutesToNeutronWebResponse routesToNeutronWebResponse = this.neutronRouterService.addRoutesToNeutronRouter(routerid, router);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4MTk0MQ==", "bodyText": "Sure ~ left the comments already", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483281941", "createdAt": "2020-09-03T22:14:05Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+        if (routerExtraAttribute == null) {\n+            return new ResponseId();\n+        }\n+        this.routerExtraAttributeDatabaseService.deleteRouterExtraAttribute(routerExtraAttribute.getId());\n+\n+        return new ResponseId(routerid);\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse addInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.addAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+\n+        return routerInterfaceResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/remove_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse removeInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.removeAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+\n+        return routerInterfaceResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_extra_routes\"})\n+    @DurationStatistics\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RoutesToNeutronWebRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        RoutesToNeutronRouterRequestObject router = resource.getRouter();\n+        if (router == null) {\n+            return new RoutesToNeutronWebResponse();\n+        }\n+\n+        RoutesToNeutronWebResponse routesToNeutronWebResponse = this.neutronRouterService.addRoutesToNeutronRouter(routerid, router);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyODkzOA=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDc1NDAzOnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowNTozMlrOHMv4Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjoxMTo0OFrOHM5I_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyOTM1OA==", "bodyText": "@kevin-zhonghao Reserve the place to call PM for routing rule updating.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483129358", "createdAt": "2020-09-03T17:05:32Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+        if (routerExtraAttribute == null) {\n+            return new ResponseId();\n+        }\n+        this.routerExtraAttributeDatabaseService.deleteRouterExtraAttribute(routerExtraAttribute.getId());\n+\n+        return new ResponseId(routerid);\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse addInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.addAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+\n+        return routerInterfaceResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/remove_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse removeInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.removeAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+\n+        return routerInterfaceResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_extra_routes\"})\n+    @DurationStatistics\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RoutesToNeutronWebRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        RoutesToNeutronRouterRequestObject router = resource.getRouter();\n+        if (router == null) {\n+            return new RoutesToNeutronWebResponse();\n+        }\n+\n+        RoutesToNeutronWebResponse routesToNeutronWebResponse = this.neutronRouterService.addRoutesToNeutronRouter(routerid, router);\n+\n+        return routesToNeutronWebResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/remove_extra_routes\"})\n+    @DurationStatistics\n+    public RoutesToNeutronWebResponse removeRoutesToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RoutesToNeutronWebRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        RoutesToNeutronRouterRequestObject router = resource.getRouter();\n+        if (router == null) {\n+            return new RoutesToNeutronWebResponse();\n+        }\n+\n+        RoutesToNeutronWebResponse routesToNeutronWebResponse = this.neutronRouterService.removeRoutesToNeutronRouter(routerid, router);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 346}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4MTE1MA==", "bodyText": "Sure", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483281150", "createdAt": "2020-09-03T22:11:48Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+        if (routerExtraAttribute == null) {\n+            return new ResponseId();\n+        }\n+        this.routerExtraAttributeDatabaseService.deleteRouterExtraAttribute(routerExtraAttribute.getId());\n+\n+        return new ResponseId(routerid);\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse addInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.addAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+\n+        return routerInterfaceResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/remove_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse removeInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.removeAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+\n+        return routerInterfaceResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_extra_routes\"})\n+    @DurationStatistics\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RoutesToNeutronWebRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        RoutesToNeutronRouterRequestObject router = resource.getRouter();\n+        if (router == null) {\n+            return new RoutesToNeutronWebResponse();\n+        }\n+\n+        RoutesToNeutronWebResponse routesToNeutronWebResponse = this.neutronRouterService.addRoutesToNeutronRouter(routerid, router);\n+\n+        return routesToNeutronWebResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/remove_extra_routes\"})\n+    @DurationStatistics\n+    public RoutesToNeutronWebResponse removeRoutesToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RoutesToNeutronWebRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        RoutesToNeutronRouterRequestObject router = resource.getRouter();\n+        if (router == null) {\n+            return new RoutesToNeutronWebResponse();\n+        }\n+\n+        RoutesToNeutronWebResponse routesToNeutronWebResponse = this.neutronRouterService.removeRoutesToNeutronRouter(routerid, router);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyOTM1OA=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 346}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDg5NzY0OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo0ODozNlrOHMxT8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjoxMToyOFrOHM5IaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1Mjg4Mw==", "bodyText": "@kevin-zhonghao We need to maintain subnet-port mapping in Route Manager instead of query the mapping from Subnet Manager.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483152883", "createdAt": "2020-09-03T17:48:36Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, DatabasePersistenceException, DestinationOrNexthopCanNotBeNull {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            boolean isExit = false;\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    isExit = true;\n+                    break;\n+                }\n+            }\n+            if (!isExit) {\n+                RouteEntry routeEntry = new RouteEntry();\n+                routeEntry.setDestination(requestDestination);\n+                routeEntry.setNexthop(requestNexthop);\n+                routeEntities.add(routeEntry);\n+\n+                RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(requestDestination, requestNexthop);\n+                responseRoutes.add(routesToNeutronRouteObject);\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse removeRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws RouterOrSubnetAndPortNotExistOrNotVisible, ResourceNotFoundException, ResourcePersistenceException, DestinationOrNexthopCanNotBeNull, DatabasePersistenceException {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (int i = 0; i < routeEntities.size(); i ++) {\n+                RouteEntry routeEntry = routeEntities.get(i);\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    routeEntities.remove(i);\n+                    break;\n+                }\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public ConnectedSubnetsWebResponse getConnectedSubnets(String projectId, String vpcId, String subnetId) throws ResourceNotFoundException, ResourcePersistenceException, SubnetNotBindUniquePortId {\n+        List<String> subnetIds = new ArrayList<>();\n+\n+        // get subnet\n+        SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectId, subnetId);\n+        SubnetEntity subnet = subnetWebJson.getSubnet();\n+        if (subnet == null) {\n+            logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+            return null;\n+        }\n+\n+        // get subnet's route table type\n+        String attachedRouterId = subnet.getAttachedRouterId();\n+        if (attachedRouterId == null) {\n+            return null;\n+        }\n+\n+        Router router = this.routerDatabaseService.getByRouterId(attachedRouterId);\n+        if (router == null) {\n+            return null;\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        if (routeTable == null) {\n+            return null;\n+        }\n+        RouteTableType routeTableType = routeTable.getRouteTableType();\n+\n+        if (routeTableType == null) {\n+            return null;\n+        } else if(routeTableType.getRouteTableType().equals(\"neutron\")){\n+            List<String> ports = router.getPorts();\n+            // check ports\n+            if (ports == null || ports.size() <= 1) {\n+                return null;\n+            }\n+            for (String portId : ports) {\n+                // get subnet by port id\n+                SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectId, portId);\n+                if (subnetsWebJson == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 457}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4MTAwMQ==", "bodyText": "okay ~ left the TODO comments for next PR", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483281001", "createdAt": "2020-09-03T22:11:28Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, DatabasePersistenceException, DestinationOrNexthopCanNotBeNull {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            boolean isExit = false;\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    isExit = true;\n+                    break;\n+                }\n+            }\n+            if (!isExit) {\n+                RouteEntry routeEntry = new RouteEntry();\n+                routeEntry.setDestination(requestDestination);\n+                routeEntry.setNexthop(requestNexthop);\n+                routeEntities.add(routeEntry);\n+\n+                RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(requestDestination, requestNexthop);\n+                responseRoutes.add(routesToNeutronRouteObject);\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse removeRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws RouterOrSubnetAndPortNotExistOrNotVisible, ResourceNotFoundException, ResourcePersistenceException, DestinationOrNexthopCanNotBeNull, DatabasePersistenceException {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (int i = 0; i < routeEntities.size(); i ++) {\n+                RouteEntry routeEntry = routeEntities.get(i);\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    routeEntities.remove(i);\n+                    break;\n+                }\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public ConnectedSubnetsWebResponse getConnectedSubnets(String projectId, String vpcId, String subnetId) throws ResourceNotFoundException, ResourcePersistenceException, SubnetNotBindUniquePortId {\n+        List<String> subnetIds = new ArrayList<>();\n+\n+        // get subnet\n+        SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectId, subnetId);\n+        SubnetEntity subnet = subnetWebJson.getSubnet();\n+        if (subnet == null) {\n+            logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+            return null;\n+        }\n+\n+        // get subnet's route table type\n+        String attachedRouterId = subnet.getAttachedRouterId();\n+        if (attachedRouterId == null) {\n+            return null;\n+        }\n+\n+        Router router = this.routerDatabaseService.getByRouterId(attachedRouterId);\n+        if (router == null) {\n+            return null;\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        if (routeTable == null) {\n+            return null;\n+        }\n+        RouteTableType routeTableType = routeTable.getRouteTableType();\n+\n+        if (routeTableType == null) {\n+            return null;\n+        } else if(routeTableType.getRouteTableType().equals(\"neutron\")){\n+            List<String> ports = router.getPorts();\n+            // check ports\n+            if (ports == null || ports.size() <= 1) {\n+                return null;\n+            }\n+            for (String portId : ports) {\n+                // get subnet by port id\n+                SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectId, portId);\n+                if (subnetsWebJson == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1Mjg4Mw=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 457}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDkwMTQ5OnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo0OTozOFrOHMxWSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjowOTozM1rOHM5FxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MzQ4MQ==", "bodyText": "@kevin-zhonghao Does this router contains routing rules?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483153481", "createdAt": "2020-09-03T17:49:38Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, DatabasePersistenceException, DestinationOrNexthopCanNotBeNull {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            boolean isExit = false;\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    isExit = true;\n+                    break;\n+                }\n+            }\n+            if (!isExit) {\n+                RouteEntry routeEntry = new RouteEntry();\n+                routeEntry.setDestination(requestDestination);\n+                routeEntry.setNexthop(requestNexthop);\n+                routeEntities.add(routeEntry);\n+\n+                RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(requestDestination, requestNexthop);\n+                responseRoutes.add(routesToNeutronRouteObject);\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse removeRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws RouterOrSubnetAndPortNotExistOrNotVisible, ResourceNotFoundException, ResourcePersistenceException, DestinationOrNexthopCanNotBeNull, DatabasePersistenceException {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (int i = 0; i < routeEntities.size(); i ++) {\n+                RouteEntry routeEntry = routeEntities.get(i);\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    routeEntities.remove(i);\n+                    break;\n+                }\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public ConnectedSubnetsWebResponse getConnectedSubnets(String projectId, String vpcId, String subnetId) throws ResourceNotFoundException, ResourcePersistenceException, SubnetNotBindUniquePortId {\n+        List<String> subnetIds = new ArrayList<>();\n+\n+        // get subnet\n+        SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectId, subnetId);\n+        SubnetEntity subnet = subnetWebJson.getSubnet();\n+        if (subnet == null) {\n+            logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+            return null;\n+        }\n+\n+        // get subnet's route table type\n+        String attachedRouterId = subnet.getAttachedRouterId();\n+        if (attachedRouterId == null) {\n+            return null;\n+        }\n+\n+        Router router = this.routerDatabaseService.getByRouterId(attachedRouterId);\n+        if (router == null) {\n+            return null;\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        if (routeTable == null) {\n+            return null;\n+        }\n+        RouteTableType routeTableType = routeTable.getRouteTableType();\n+\n+        if (routeTableType == null) {\n+            return null;\n+        } else if(routeTableType.getRouteTableType().equals(\"neutron\")){\n+            List<String> ports = router.getPorts();\n+            // check ports\n+            if (ports == null || ports.size() <= 1) {\n+                return null;\n+            }\n+            for (String portId : ports) {\n+                // get subnet by port id\n+                SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectId, portId);\n+                if (subnetsWebJson == null) {\n+                    return null;\n+                }\n+                ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+                if (subnets.size() == 0) {\n+                    return null;\n+                }\n+                if (subnets.size() != 1) {\n+                    throw new SubnetNotBindUniquePortId();\n+                }\n+                subnet = subnets.get(0);\n+                subnetIds.add(subnet.getId());\n+            }\n+\n+        } else {\n+            // TODO: vpc route operation\n+            return null;\n+        }\n+\n+        // construct result\n+        ConnectedSubnetsWebResponse connectedSubnetsWebResponse = new ConnectedSubnetsWebResponse();\n+        connectedSubnetsWebResponse.setRouter(router);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 478}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4MDMyNQ==", "bodyText": "Yes", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483280325", "createdAt": "2020-09-03T22:09:33Z", "author": {"login": "kevin-zhonghao"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, DatabasePersistenceException, DestinationOrNexthopCanNotBeNull {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            boolean isExit = false;\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    isExit = true;\n+                    break;\n+                }\n+            }\n+            if (!isExit) {\n+                RouteEntry routeEntry = new RouteEntry();\n+                routeEntry.setDestination(requestDestination);\n+                routeEntry.setNexthop(requestNexthop);\n+                routeEntities.add(routeEntry);\n+\n+                RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(requestDestination, requestNexthop);\n+                responseRoutes.add(routesToNeutronRouteObject);\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse removeRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws RouterOrSubnetAndPortNotExistOrNotVisible, ResourceNotFoundException, ResourcePersistenceException, DestinationOrNexthopCanNotBeNull, DatabasePersistenceException {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (int i = 0; i < routeEntities.size(); i ++) {\n+                RouteEntry routeEntry = routeEntities.get(i);\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    routeEntities.remove(i);\n+                    break;\n+                }\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public ConnectedSubnetsWebResponse getConnectedSubnets(String projectId, String vpcId, String subnetId) throws ResourceNotFoundException, ResourcePersistenceException, SubnetNotBindUniquePortId {\n+        List<String> subnetIds = new ArrayList<>();\n+\n+        // get subnet\n+        SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectId, subnetId);\n+        SubnetEntity subnet = subnetWebJson.getSubnet();\n+        if (subnet == null) {\n+            logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+            return null;\n+        }\n+\n+        // get subnet's route table type\n+        String attachedRouterId = subnet.getAttachedRouterId();\n+        if (attachedRouterId == null) {\n+            return null;\n+        }\n+\n+        Router router = this.routerDatabaseService.getByRouterId(attachedRouterId);\n+        if (router == null) {\n+            return null;\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        if (routeTable == null) {\n+            return null;\n+        }\n+        RouteTableType routeTableType = routeTable.getRouteTableType();\n+\n+        if (routeTableType == null) {\n+            return null;\n+        } else if(routeTableType.getRouteTableType().equals(\"neutron\")){\n+            List<String> ports = router.getPorts();\n+            // check ports\n+            if (ports == null || ports.size() <= 1) {\n+                return null;\n+            }\n+            for (String portId : ports) {\n+                // get subnet by port id\n+                SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectId, portId);\n+                if (subnetsWebJson == null) {\n+                    return null;\n+                }\n+                ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+                if (subnets.size() == 0) {\n+                    return null;\n+                }\n+                if (subnets.size() != 1) {\n+                    throw new SubnetNotBindUniquePortId();\n+                }\n+                subnet = subnets.get(0);\n+                subnetIds.add(subnet.getId());\n+            }\n+\n+        } else {\n+            // TODO: vpc route operation\n+            return null;\n+        }\n+\n+        // construct result\n+        ConnectedSubnetsWebResponse connectedSubnetsWebResponse = new ConnectedSubnetsWebResponse();\n+        connectedSubnetsWebResponse.setRouter(router);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MzQ4MQ=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 478}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDkxMDAyOnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo1MjoxMlrOHMxbzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo1MjoxMlrOHMxbzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1NDg5Mw==", "bodyText": "@kevin-zhonghao For VPC, it's simpler than Neutron. We just need to do the following tasks:\n\nget router by VPC:id\nget routetables from the router\nget subnet-ids from each routetable\nreturn all subnet-ids and router info", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483154893", "createdAt": "2020-09-03T17:52:12Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, DatabasePersistenceException, DestinationOrNexthopCanNotBeNull {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            boolean isExit = false;\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    isExit = true;\n+                    break;\n+                }\n+            }\n+            if (!isExit) {\n+                RouteEntry routeEntry = new RouteEntry();\n+                routeEntry.setDestination(requestDestination);\n+                routeEntry.setNexthop(requestNexthop);\n+                routeEntities.add(routeEntry);\n+\n+                RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(requestDestination, requestNexthop);\n+                responseRoutes.add(routesToNeutronRouteObject);\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse removeRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws RouterOrSubnetAndPortNotExistOrNotVisible, ResourceNotFoundException, ResourcePersistenceException, DestinationOrNexthopCanNotBeNull, DatabasePersistenceException {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (int i = 0; i < routeEntities.size(); i ++) {\n+                RouteEntry routeEntry = routeEntities.get(i);\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    routeEntities.remove(i);\n+                    break;\n+                }\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public ConnectedSubnetsWebResponse getConnectedSubnets(String projectId, String vpcId, String subnetId) throws ResourceNotFoundException, ResourcePersistenceException, SubnetNotBindUniquePortId {\n+        List<String> subnetIds = new ArrayList<>();\n+\n+        // get subnet\n+        SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectId, subnetId);\n+        SubnetEntity subnet = subnetWebJson.getSubnet();\n+        if (subnet == null) {\n+            logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+            return null;\n+        }\n+\n+        // get subnet's route table type\n+        String attachedRouterId = subnet.getAttachedRouterId();\n+        if (attachedRouterId == null) {\n+            return null;\n+        }\n+\n+        Router router = this.routerDatabaseService.getByRouterId(attachedRouterId);\n+        if (router == null) {\n+            return null;\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        if (routeTable == null) {\n+            return null;\n+        }\n+        RouteTableType routeTableType = routeTable.getRouteTableType();\n+\n+        if (routeTableType == null) {\n+            return null;\n+        } else if(routeTableType.getRouteTableType().equals(\"neutron\")){\n+            List<String> ports = router.getPorts();\n+            // check ports\n+            if (ports == null || ports.size() <= 1) {\n+                return null;\n+            }\n+            for (String portId : ports) {\n+                // get subnet by port id\n+                SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectId, portId);\n+                if (subnetsWebJson == null) {\n+                    return null;\n+                }\n+                ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+                if (subnets.size() == 0) {\n+                    return null;\n+                }\n+                if (subnets.size() != 1) {\n+                    throw new SubnetNotBindUniquePortId();\n+                }\n+                subnet = subnets.get(0);\n+                subnetIds.add(subnet.getId());\n+            }\n+\n+        } else {\n+            // TODO: vpc route operation\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 473}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTUzMjgwOnYy", "diffSide": "RIGHT", "path": "services/route_manager/src/test/java/com/futurewei/alcor/route/NeutronRouterTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMjo0MlrOHNc5CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMjo0MlrOHNc5CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2Njg4OA==", "bodyText": "Really like the comprehensive set of tests in this file \ud83d\udcaf", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483866888", "createdAt": "2020-09-04T22:22:42Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/test/java/com/futurewei/alcor/route/NeutronRouterTests.java", "diffHunk": "@@ -0,0 +1,561 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route;\n+\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.junit.Assert.*;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.route.config.UnitTestConfig;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.route.RouteTable;\n+import com.futurewei.alcor.web.entity.route.Router;\n+import com.futurewei.alcor.web.entity.route.RouterExtraAttribute;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import java.util.ArrayList;\n+\n+@ComponentScan(value = \"com.futurewei.alcor.common.test.config\")\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n+        properties = {\"httpbin=http://localhost:${wiremock.server.port}\"})\n+@AutoConfigureMockMvc\n+public class NeutronRouterTests {\n+\n+    @Autowired\n+    private MockMvc mockMvc;\n+\n+    @MockBean\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @MockBean\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @MockBean\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    private String getNeutronRouterByRouterIdUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId;\n+    private String createNeutronRoutersUri = \"/project/\" + UnitTestConfig.projectId + \"/routers\";\n+    private String updateNeutronRouterByRouterIdUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId;\n+    private String deleteNeutronRouterByRouterIdUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId;\n+    private String addInterfaceToNeutronRouterUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId + \"/add_router_interface\";\n+    private String removeInterfaceToNeutronRouterUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId + \"/remove_router_interface\";\n+    private String addRoutesToNeutronRouterUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId + \"/add_extra_routes\";\n+    private String removeRoutesToNeutronRouterUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId + \"/remove_extra_routes\";\n+    private String getConnectedSubnets = \"/project/\" + UnitTestConfig.projectId + \"/vpcs/\" + UnitTestConfig.vpcId + \"/subnets/\" + UnitTestConfig.subnetId + \"/connected-subnets\";\n+\n+    @Test\n+    public void getNeutronRouterById_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(new RouterExtraAttribute(){{setId(UnitTestConfig.routerExtraAttributeId);}});\n+        this.mockMvc.perform(get(getNeutronRouterByRouterIdUri))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.router.id\").value(UnitTestConfig.routerId));\n+    }\n+\n+    @Test\n+    public void getNeutronRouterById_canNotFindRouter_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(new RouterExtraAttribute(){{setId(UnitTestConfig.routerExtraAttributeId);}});\n+        try {\n+            String response = this.mockMvc.perform(get(getNeutronRouterByRouterIdUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andReturn().getResponse().getContentAsString();\n+            assertEquals(\"{\\\"router\\\":null}\", response);\n+        }catch (Exception e) {\n+            System.out.println(\"-----json returned =\" + e.getMessage());\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void createNeutronRouters_pass () throws Exception {\n+        try {\n+            this.mockMvc.perform(post(createNeutronRoutersUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.neutronRouterResource))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.router.id\").value(UnitTestConfig.routerId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void updateNeutronRouter_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(new RouterExtraAttribute(){{setId(UnitTestConfig.routerExtraAttributeId);}});\n+\n+        try {\n+            this.mockMvc.perform(put(updateNeutronRouterByRouterIdUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.neutronRouterUpdateResource))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.router.id\").value(UnitTestConfig.updateRouterId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void updateNeutronRouter_canNotFindRouter_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(new RouterExtraAttribute(){{setId(UnitTestConfig.routerExtraAttributeId);}});\n+        try {\n+            String response = this.mockMvc.perform(get(getNeutronRouterByRouterIdUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andReturn().getResponse().getContentAsString();\n+            assertEquals(\"{\\\"router\\\":null}\", response);\n+        }catch (Exception e) {\n+            System.out.println(\"-----json returned =\" + e.getMessage());\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void deleteNeutronRouter_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setRouterExtraAttributeId(UnitTestConfig.routerExtraAttributeId);}});\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(new RouterExtraAttribute(){{setId(UnitTestConfig.routerExtraAttributeId);}});\n+        try {\n+            this.mockMvc.perform(delete(deleteNeutronRouterByRouterIdUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.id\").value(UnitTestConfig.routerId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void deleteNeutronRouter_canNotFindRouter_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(new RouterExtraAttribute(){{setId(UnitTestConfig.routerExtraAttributeId);}});\n+        try {\n+            String response = this.mockMvc.perform(delete(deleteNeutronRouterByRouterIdUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andReturn().getResponse().getContentAsString();\n+            assertEquals(\"{\\\"id\\\":null}\", response);\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void deleteNeutronRouter_canNotFindRouterExtraAttribute_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setRouterExtraAttributeId(UnitTestConfig.routerExtraAttributeId);}});\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(null);\n+        try {\n+            String response = this.mockMvc.perform(delete(deleteNeutronRouterByRouterIdUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andReturn().getResponse().getContentAsString();\n+            assertEquals(\"{\\\"id\\\":null}\", response);\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void addInterfaceToNeutronRouter_onlyPassInPortId_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity());}});\n+\n+        try {\n+            this.mockMvc.perform(put(addInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_port))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.port_id\").value(UnitTestConfig.portId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addInterfaceToNeutronRouter_onlyPassInSubnetId_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(addInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnet))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.subnet_id\").value(UnitTestConfig.subnetId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addInterfaceToNeutronRouter_passInBothSubnetIdAndPortId_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(addInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnetAndPort))\n+                    .andDo(print())\n+                    .andExpect(status().is(400));\n+        } catch (Exception e) {\n+            System.out.println(\"-----json returned =\" + e.getMessage());\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addInterfaceToNeutronRouter_onlyPassInPortId_SubnetNotBindUniquePortId_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});add(new SubnetEntity());}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity());}});\n+\n+        try {\n+            this.mockMvc.perform(put(addInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_port))\n+                    .andDo(print())\n+                    .andExpect(status().is(409));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addInterfaceToNeutronRouter_onlyPassInPortId_PortIsAlreadyInUse_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);setAttachedRouterId(UnitTestConfig.routerId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity());}});\n+\n+        try {\n+            this.mockMvc.perform(put(addInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_port))\n+                    .andDo(print())\n+                    .andExpect(status().is(409));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addInterfaceToNeutronRouter_onlyPassInPortId_CanNotFindRouter_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity());}});\n+\n+        try {\n+            this.mockMvc.perform(put(addInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_port))\n+                    .andDo(print())\n+                    .andExpect(status().is(500));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeInterfaceToNeutronRouter_onlyPassInPortId_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_port))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.port_id\").value(UnitTestConfig.portId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeInterfaceToNeutronRouter_onlyPassInSubnetId_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnet))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.subnet_id\").value(UnitTestConfig.subnetId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeInterfaceToNeutronRouter_passInBothSubnetIdAndPortId_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnetAndPort))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.subnet_id\").value(UnitTestConfig.subnetId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeInterfaceToNeutronRouter_passInBothSubnetIdAndPortId_SubnetNotBindUniquePortId_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});add(new SubnetEntity());}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.diffPortId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnetAndPort))\n+                    .andDo(print())\n+                    .andExpect(status().is(409));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeInterfaceToNeutronRouter_passInBothSubnetIdAndPortId_AttachedPortsNotMatchPortId_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.diffPortId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnetAndPort))\n+                    .andDo(print())\n+                    .andExpect(status().is(409));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeInterfaceToNeutronRouter_passInBothSubnetIdAndPortId_RouterOrSubnetAndPortNotExistOrNotVisible_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnetAndPort))\n+                    .andDo(print())\n+                    .andExpect(status().is(404));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addRoutesToNeutronRouter_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(addRoutesToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routesToNeutronRouterRequest))\n+                    .andDo(print())\n+                    .andExpect(status().isOk());\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addRoutesToNeutronRouter_RouterOrSubnetAndPortNotExistOrNotVisible_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(addRoutesToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routesToNeutronRouterRequest))\n+                    .andDo(print())\n+                    .andExpect(status().is(404));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeRoutesToNeutronRouter_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeRoutesToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routesToNeutronRouterRequest))\n+                    .andDo(print())\n+                    .andExpect(status().isOk());\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeRoutesToNeutronRouter_RouterOrSubnetAndPortNotExistOrNotVisible_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeRoutesToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routesToNeutronRouterRequest))\n+                    .andDo(print())\n+                    .andExpect(status().is(404));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void getConnectedSubnets_pass () throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c59b868d43b27c09a84b63248e316c38fabca3b"}, "originalPosition": 542}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4659, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}