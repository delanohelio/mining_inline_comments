{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODkyMDM3", "number": 361, "title": "[Microservice] Route Manager Refactor to Support Neutron Routers", "bodyText": "Implement Neutron routers in route manager:\n\nCRUD APIs\nAdd/remove interface to Neutron routers\nAdd/remove routes to Neutron routers\nGet connected subnets", "createdAt": "2020-08-21T23:17:11Z", "url": "https://github.com/futurewei-cloud/alcor/pull/361", "merged": true, "mergeCommit": {"oid": "1a478a515384750cf37f094e604e16ed9320dc70"}, "closed": true, "closedAt": "2020-09-04T22:23:44Z", "author": {"login": "kevin-zhonghao"}, "timelineItems": {"totalCount": 207, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFDHbSgFqTQ4MTMyMjcyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFs3NbgFqTQ4Mjk5MzMxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzIyNzIz", "url": "https://github.com/futurewei-cloud/alcor/pull/361#pullrequestreview-481322723", "createdAt": "2020-09-02T21:44:33Z", "commit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo0NDozNFrOHMJsaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo0NDozNFrOHMJsaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwMzc4Nw==", "bodyText": "@xieus Do we need admin_state_up attribute for VPC router?\n'admin_state_up' is for neutron router actually. If we don't need it in VPC, we can put this attribute in the neutron specific attribute object which is router_extra_attributes object.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482503787", "createdAt": "2020-09-02T21:44:34Z", "author": {"login": "cj-chung"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/NeutronRouterWebRequestObject.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class NeutronRouterWebRequestObject extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private RouteTable routeTable;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store subnet_gateway_port_id / interface\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzU4MTEx", "url": "https://github.com/futurewei-cloud/alcor/pull/361#pullrequestreview-481358111", "createdAt": "2020-09-02T22:29:30Z", "commit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjoyOTozMFrOHMMDzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo0MToyMVrOHMaFyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0MjU0Mg==", "bodyText": "@kevin-zhonghao @xieus Should we remove the previous version of APIs from this PR if we don't need it?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482542542", "createdAt": "2020-09-02T22:29:30Z", "author": {"login": "cj-chung"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteEntry.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.jetbrains.annotations.NotNull;\n+\n+@Data\n+public class RouteEntry extends CustomerResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMTk1NA=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0Njc0OA==", "bodyText": "@kevin-zhonghao There are multiple routetables for a router. It's better rename 'routetable' to 'routetables'", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482546748", "createdAt": "2020-09-02T22:32:58Z", "author": {"login": "cj-chung"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class Router extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU1MjkyNw==", "bodyText": "@kevin-zhonghao @xieus Again, we need to think about the usage of this attribute 'admin_state_up'. It's for Neutron router only, not for VPC router. Should we put this attribute in the 'router_extra_attribute'?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482552927", "createdAt": "2020-09-02T22:38:11Z", "author": {"login": "cj-chung"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class Router extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private RouteTable routeTable;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store vpc_id\n+    @JsonProperty(\"router_extra_attribute_id\")\n+    private String routerExtraAttributeId;\n+\n+    // store subnet_gateway_port_id\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2MTUzMg==", "bodyText": "@kevin-zhonghao @xieus Agree, this is a fundamental change, we should wait until next PR.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482561532", "createdAt": "2020-09-02T22:45:14Z", "author": {"login": "cj-chung"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/vpc/VpcEntity.java", "diffHunk": "@@ -19,6 +20,9 @@\n     @JsonProperty(\"routes\")\n     private List<RouteEntity> routeEntities;\n \n+    @JsonProperty(\"router\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNTk2NA=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2NzQ3Mw==", "bodyText": "@kevin-zhonghao Please make sure this call will handle atomically routing rule updating.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482567473", "createdAt": "2020-09-02T22:50:11Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU3MDc0OQ==", "bodyText": "@kevin-zhonghao If there are gateway ports for subnets still in this router, the deletion should return error message to user.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482570749", "createdAt": "2020-09-02T22:52:54Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczNDcyNw==", "bodyText": "@kevin-zhonghao We need to maintain the mapping for new added port and it's subnet in the Route Manager, did you maintain this mapping in this function?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482734727", "createdAt": "2020-09-03T06:33:06Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczODM1NQ==", "bodyText": "@kevin-zhonghao After successfully attached interface to router, we also need to return all connected subnet-ids to Port Manager. The algorithm as follow:\n\nget ports array from the router.\nget subnet-ids from the mapping table of port-subnet for all ports.\ncall Port Manager's /project/{project_id}/update-l3-neighbors/{new_subnet_id} with BODY {operation_type, vpcid, [old_subnet_ids]}.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482738355", "createdAt": "2020-09-03T06:40:08Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+        if (routerExtraAttribute == null) {\n+            return new ResponseId();\n+        }\n+        this.routerExtraAttributeDatabaseService.deleteRouterExtraAttribute(routerExtraAttribute.getId());\n+\n+        return new ResponseId(routerid);\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse addInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.addAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2NTUxMA==", "bodyText": "@kevin-zhonghao BTW, we need to check if there is only one gateway port exists in the current router, we don't need to request PM for update-l3-neighbors. This operation only happen when there are more than 2 ports exist in the router.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482765510", "createdAt": "2020-09-03T07:29:35Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+        if (routerExtraAttribute == null) {\n+            return new ResponseId();\n+        }\n+        this.routerExtraAttributeDatabaseService.deleteRouterExtraAttribute(routerExtraAttribute.getId());\n+\n+        return new ResponseId(routerid);\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse addInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.addAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczODM1NQ=="}, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODg2NQ==", "bodyText": "@kevin-zhonghao We also need to update the port-subnet mapping table in the Route Manager.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482768865", "createdAt": "2020-09-03T07:35:36Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MjQyNA==", "bodyText": "@kevin-zhonghao Here has two for-loops for matching rules, it takes O(n^2). Do we have better algorithm reducing it to linear time O(n)? Such as using destination as index or key for RouteEntry.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482772424", "createdAt": "2020-09-03T07:41:21Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, DatabasePersistenceException, DestinationOrNexthopCanNotBeNull {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            boolean isExit = false;\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    isExit = true;\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 339}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDM4MjAy", "url": "https://github.com/futurewei-cloud/alcor/pull/361#pullrequestreview-482038202", "createdAt": "2020-09-03T17:04:50Z", "commit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowNDo1MFrOHMv2ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowNTozMlrOHMv4Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyODkzOA==", "bodyText": "@kevin-zhonghao we need to add a function call here for l3-neighbors-updating. It should be the function call to PM same as the previous one /project/{project_id}/update-l3-neighbors/{new_subnet_id}, but the detail contract is not confirm yet.  We can wait until the contract is confirmed.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483128938", "createdAt": "2020-09-03T17:04:50Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+        if (routerExtraAttribute == null) {\n+            return new ResponseId();\n+        }\n+        this.routerExtraAttributeDatabaseService.deleteRouterExtraAttribute(routerExtraAttribute.getId());\n+\n+        return new ResponseId(routerid);\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse addInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.addAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+\n+        return routerInterfaceResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/remove_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse removeInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.removeAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+\n+        return routerInterfaceResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_extra_routes\"})\n+    @DurationStatistics\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RoutesToNeutronWebRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        RoutesToNeutronRouterRequestObject router = resource.getRouter();\n+        if (router == null) {\n+            return new RoutesToNeutronWebResponse();\n+        }\n+\n+        RoutesToNeutronWebResponse routesToNeutronWebResponse = this.neutronRouterService.addRoutesToNeutronRouter(routerid, router);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyOTM1OA==", "bodyText": "@kevin-zhonghao Reserve the place to call PM for routing rule updating.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483129358", "createdAt": "2020-09-03T17:05:32Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,375 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                String routerExtraAttributeId = router.getRouterExtraAttributeId();\n+                if (routerExtraAttributeId != null && !routerExtraAttributeId.equals(\"\")) {\n+                    routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(routerExtraAttributeId);\n+                }\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID routerId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(routerId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            neutronRouterWebRequestObject = this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            NeutronRouterWebRequestObject inNeutronRouter = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+            RouteManagerUtil.copyPropertiesIgnoreNull(neutronRouterWebRequestObject, inNeutronRouter);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public ResponseId deleteNeutronRouterByRouterId(@PathVariable String projectid, @PathVariable String routerid) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            return new ResponseId();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports != null && ports.size() != 0) {\n+            throw new RouterHasAttachedInterfaces();\n+        }\n+        this.routerDatabaseService.deleteRouter(routerid);\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+        if (routerExtraAttribute == null) {\n+            return new ResponseId();\n+        }\n+        this.routerExtraAttributeDatabaseService.deleteRouterExtraAttribute(routerExtraAttribute.getId());\n+\n+        return new ResponseId(routerid);\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse addInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.addAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+\n+        return routerInterfaceResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/remove_router_interface\"})\n+    @DurationStatistics\n+    public RouterInterfaceResponse removeInterfaceToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RouterInterfaceRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        String portId = resource.getPortId();\n+        String subnetId = resource.getSubnetId();\n+\n+        RouterInterfaceResponse routerInterfaceResponse = this.neutronRouterService.removeAnInterfaceToNeutronRouter(projectid, portId, subnetId, routerid);\n+\n+        return routerInterfaceResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/add_extra_routes\"})\n+    @DurationStatistics\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RoutesToNeutronWebRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        RoutesToNeutronRouterRequestObject router = resource.getRouter();\n+        if (router == null) {\n+            return new RoutesToNeutronWebResponse();\n+        }\n+\n+        RoutesToNeutronWebResponse routesToNeutronWebResponse = this.neutronRouterService.addRoutesToNeutronRouter(routerid, router);\n+\n+        return routesToNeutronWebResponse;\n+\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}/remove_extra_routes\"})\n+    @DurationStatistics\n+    public RoutesToNeutronWebResponse removeRoutesToNeutronRouter(@PathVariable String projectid, @PathVariable String routerid, @RequestBody RoutesToNeutronWebRequest resource) throws Exception {\n+\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+        RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+        RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+        RoutesToNeutronRouterRequestObject router = resource.getRouter();\n+        if (router == null) {\n+            return new RoutesToNeutronWebResponse();\n+        }\n+\n+        RoutesToNeutronWebResponse routesToNeutronWebResponse = this.neutronRouterService.removeRoutesToNeutronRouter(routerid, router);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 346}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDY5NTQ1", "url": "https://github.com/futurewei-cloud/alcor/pull/361#pullrequestreview-482069545", "createdAt": "2020-09-03T17:48:36Z", "commit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo0ODozNlrOHMxT8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo1MjoxMlrOHMxbzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1Mjg4Mw==", "bodyText": "@kevin-zhonghao We need to maintain subnet-port mapping in Route Manager instead of query the mapping from Subnet Manager.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483152883", "createdAt": "2020-09-03T17:48:36Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, DatabasePersistenceException, DestinationOrNexthopCanNotBeNull {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            boolean isExit = false;\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    isExit = true;\n+                    break;\n+                }\n+            }\n+            if (!isExit) {\n+                RouteEntry routeEntry = new RouteEntry();\n+                routeEntry.setDestination(requestDestination);\n+                routeEntry.setNexthop(requestNexthop);\n+                routeEntities.add(routeEntry);\n+\n+                RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(requestDestination, requestNexthop);\n+                responseRoutes.add(routesToNeutronRouteObject);\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse removeRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws RouterOrSubnetAndPortNotExistOrNotVisible, ResourceNotFoundException, ResourcePersistenceException, DestinationOrNexthopCanNotBeNull, DatabasePersistenceException {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (int i = 0; i < routeEntities.size(); i ++) {\n+                RouteEntry routeEntry = routeEntities.get(i);\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    routeEntities.remove(i);\n+                    break;\n+                }\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public ConnectedSubnetsWebResponse getConnectedSubnets(String projectId, String vpcId, String subnetId) throws ResourceNotFoundException, ResourcePersistenceException, SubnetNotBindUniquePortId {\n+        List<String> subnetIds = new ArrayList<>();\n+\n+        // get subnet\n+        SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectId, subnetId);\n+        SubnetEntity subnet = subnetWebJson.getSubnet();\n+        if (subnet == null) {\n+            logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+            return null;\n+        }\n+\n+        // get subnet's route table type\n+        String attachedRouterId = subnet.getAttachedRouterId();\n+        if (attachedRouterId == null) {\n+            return null;\n+        }\n+\n+        Router router = this.routerDatabaseService.getByRouterId(attachedRouterId);\n+        if (router == null) {\n+            return null;\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        if (routeTable == null) {\n+            return null;\n+        }\n+        RouteTableType routeTableType = routeTable.getRouteTableType();\n+\n+        if (routeTableType == null) {\n+            return null;\n+        } else if(routeTableType.getRouteTableType().equals(\"neutron\")){\n+            List<String> ports = router.getPorts();\n+            // check ports\n+            if (ports == null || ports.size() <= 1) {\n+                return null;\n+            }\n+            for (String portId : ports) {\n+                // get subnet by port id\n+                SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectId, portId);\n+                if (subnetsWebJson == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 457}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MzQ4MQ==", "bodyText": "@kevin-zhonghao Does this router contains routing rules?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483153481", "createdAt": "2020-09-03T17:49:38Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, DatabasePersistenceException, DestinationOrNexthopCanNotBeNull {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            boolean isExit = false;\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    isExit = true;\n+                    break;\n+                }\n+            }\n+            if (!isExit) {\n+                RouteEntry routeEntry = new RouteEntry();\n+                routeEntry.setDestination(requestDestination);\n+                routeEntry.setNexthop(requestNexthop);\n+                routeEntities.add(routeEntry);\n+\n+                RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(requestDestination, requestNexthop);\n+                responseRoutes.add(routesToNeutronRouteObject);\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse removeRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws RouterOrSubnetAndPortNotExistOrNotVisible, ResourceNotFoundException, ResourcePersistenceException, DestinationOrNexthopCanNotBeNull, DatabasePersistenceException {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (int i = 0; i < routeEntities.size(); i ++) {\n+                RouteEntry routeEntry = routeEntities.get(i);\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    routeEntities.remove(i);\n+                    break;\n+                }\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public ConnectedSubnetsWebResponse getConnectedSubnets(String projectId, String vpcId, String subnetId) throws ResourceNotFoundException, ResourcePersistenceException, SubnetNotBindUniquePortId {\n+        List<String> subnetIds = new ArrayList<>();\n+\n+        // get subnet\n+        SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectId, subnetId);\n+        SubnetEntity subnet = subnetWebJson.getSubnet();\n+        if (subnet == null) {\n+            logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+            return null;\n+        }\n+\n+        // get subnet's route table type\n+        String attachedRouterId = subnet.getAttachedRouterId();\n+        if (attachedRouterId == null) {\n+            return null;\n+        }\n+\n+        Router router = this.routerDatabaseService.getByRouterId(attachedRouterId);\n+        if (router == null) {\n+            return null;\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        if (routeTable == null) {\n+            return null;\n+        }\n+        RouteTableType routeTableType = routeTable.getRouteTableType();\n+\n+        if (routeTableType == null) {\n+            return null;\n+        } else if(routeTableType.getRouteTableType().equals(\"neutron\")){\n+            List<String> ports = router.getPorts();\n+            // check ports\n+            if (ports == null || ports.size() <= 1) {\n+                return null;\n+            }\n+            for (String portId : ports) {\n+                // get subnet by port id\n+                SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectId, portId);\n+                if (subnetsWebJson == null) {\n+                    return null;\n+                }\n+                ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+                if (subnets.size() == 0) {\n+                    return null;\n+                }\n+                if (subnets.size() != 1) {\n+                    throw new SubnetNotBindUniquePortId();\n+                }\n+                subnet = subnets.get(0);\n+                subnetIds.add(subnet.getId());\n+            }\n+\n+        } else {\n+            // TODO: vpc route operation\n+            return null;\n+        }\n+\n+        // construct result\n+        ConnectedSubnetsWebResponse connectedSubnetsWebResponse = new ConnectedSubnetsWebResponse();\n+        connectedSubnetsWebResponse.setRouter(router);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 478}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1NDg5Mw==", "bodyText": "@kevin-zhonghao For VPC, it's simpler than Neutron. We just need to do the following tasks:\n\nget router by VPC:id\nget routetables from the router\nget subnet-ids from each routetable\nreturn all subnet-ids and router info", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483154893", "createdAt": "2020-09-03T17:52:12Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }\n+        return neutronRouterWebRequestObject;\n+    }\n+\n+    @Override\n+    public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRouterWebRequestObject neutronRouter) throws NeutronRouterIsNull, DatabasePersistenceException {\n+        if (neutronRouter == null) {\n+            throw new NeutronRouterIsNull();\n+        }\n+        NeutronRouterWebRequestObject inNeutronRouter = new NeutronRouterWebRequestObject();\n+        BeanUtils.copyProperties(neutronRouter, inNeutronRouter);\n+\n+        String attachedRouterExtraAttributeId = UUID.randomUUID().toString();\n+\n+        Router router = new Router();\n+        RouterExtraAttribute routerExtraAttribute = new RouterExtraAttribute();\n+\n+        BeanUtils.copyProperties(neutronRouter, router);\n+        BeanUtils.copyProperties(neutronRouter, routerExtraAttribute);\n+        routerExtraAttribute.setId(attachedRouterExtraAttributeId);\n+        RouteTable routeTable = neutronRouter.getRouteTable();\n+        if (routeTable == null) {\n+            routeTable = new RouteTable();\n+            List<RouteEntry> routeEntities = new ArrayList<>();\n+            String routeTableId = UUID.randomUUID().toString();\n+            routeTable.setId(routeTableId);\n+            routeTable.setRouteEntities(routeEntities);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+        }\n+        router.setRouteTable(routeTable);\n+        router.setRouterExtraAttributeId(attachedRouterExtraAttributeId);\n+        inNeutronRouter.setRouteTable(routeTable);\n+\n+        this.routerDatabaseService.addRouter(router);\n+        this.routerExtraAttributeDatabaseService.addRouterExtraAttribute(routerExtraAttribute);\n+\n+\n+        return inNeutronRouter;\n+\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse addAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws SpecifyBothSubnetIDAndPortID, ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter, DatabasePersistenceException, PortIDIsAlreadyExist, PortIsAlreadyInUse, SubnetNotBindUniquePortId {\n+        if (portId != null && subnetId != null) {\n+            throw new SpecifyBothSubnetIDAndPortID();\n+        }\n+\n+        SubnetEntity subnet = null;\n+        String subnetid = null;\n+        String projectId = null;\n+        String attachedRouterId = null;\n+\n+        // Only pass in the value of the port\n+        if (portId != null && subnetId == null) {\n+\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }\n+        // Only pass in the value of the subnet\n+        else if (portId == null && subnetId != null) {\n+\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        } else {\n+            return new RouterInterfaceResponse();\n+        }\n+        projectId = subnet.getProjectId();\n+        portId = subnet.getGatewayPortId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+\n+        // check if port_id is used by other router\n+        if (attachedRouterId != null && !attachedRouterId.equals(\"\")) {\n+            throw new PortIsAlreadyInUse();\n+        }\n+        subnet.setAttachedRouterId(routerId);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(routerId);\n+        portEntity.setDeviceOwner(\"network:router_interface\");\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            ports = new ArrayList<>();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            throw new PortIDIsAlreadyExist();\n+        }\n+        ports.add(portId);\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+    }\n+\n+    @Override\n+    public RouterInterfaceResponse removeAnInterfaceToNeutronRouter(String projectid, String portId, String subnetId, String routerId) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, AttachedPortsNotMatchPortId, RouterTableNotExist, RouterInterfaceAreUsedByRoutes, SubnetNotBindUniquePortId, DatabasePersistenceException {\n+        SubnetEntity subnet = null;\n+        String projectId = null;\n+        String subnetid = null;\n+        String attachedPort = null;\n+        String attachedRouterId = null;\n+\n+        // if pass in both port_id and subnet_id, check conflict\n+        if (portId != null && subnetId != null) {\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            attachedPort = subnet.getGatewayPortId();\n+            if (attachedPort != null) {\n+                if (!attachedPort.equals(portId)) {\n+                    throw new AttachedPortsNotMatchPortId();\n+                }\n+            } else {\n+                logger.warn(\"There is no IP address on the port\");\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+\n+        }else if (portId != null && subnetId == null) {\n+            // get subnet by port id\n+            SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectid, portId);\n+            if (subnetsWebJson == null) {\n+                return new RouterInterfaceResponse();\n+            }\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets.size() == 0) {\n+                return new RouterInterfaceResponse();\n+            }\n+            if (subnets.size() != 1) {\n+                throw new SubnetNotBindUniquePortId();\n+            }\n+            subnet = subnets.get(0);\n+            subnetid = subnet.getId();\n+        }else if (portId == null && subnetId != null) {\n+            // get subnet by subnet id\n+            SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectid, subnetId);\n+            subnet = subnetWebJson.getSubnet();\n+            if (subnet == null) {\n+                logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+                return new RouterInterfaceResponse();\n+            }\n+            subnetid = subnetId;\n+        }else {\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        // check if the router or the subnet and port do not exist or are not visible\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+\n+        // check if you try to delete the router interface for subnets that are used by one or more route\n+        projectId = subnet.getProjectId();\n+        attachedRouterId = subnet.getAttachedRouterId();\n+        String gatewayIp = subnet.getGatewayIp();\n+        if (gatewayIp != null) {\n+            RouteTable routeTable = router.getRouteTable();\n+            if (routeTable == null) {\n+                throw new RouterTableNotExist();\n+            }\n+\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String nextHop = routeEntry.getNexthop();\n+                if (gatewayIp.equals(nextHop)) {\n+                    throw new RouterInterfaceAreUsedByRoutes();\n+                }\n+            }\n+\n+        }\n+\n+        // remove interface\n+        subnet.setAttachedRouterId(\"\");\n+\n+        List<String> ports = router.getPorts();\n+        if (ports == null){\n+            return new RouterInterfaceResponse();\n+        }\n+\n+        if (ports.contains(portId)) {\n+            ports.remove(portId);\n+        }\n+        router.setPorts(ports);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // update device_id and device_owner\n+        PortEntity portEntity = new PortEntity();\n+        portEntity.setDeviceId(null);\n+        portEntity.setDeviceOwner(null);\n+        subnet.setPort(portEntity);\n+\n+        // update subnet\n+        this.routerToSubnetService.updateSubnet(projectId, subnetid, subnet);\n+\n+        // Construct response\n+        List<String> subnetIds = new ArrayList<>(){};\n+        subnetIds.add(subnetid);\n+        return new RouterInterfaceResponse(routerId, subnet.getVpcId(), portId, subnetid, subnetIds, projectId, projectId, subnet.getTags());\n+\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse addRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws ResourceNotFoundException, ResourcePersistenceException, RouterOrSubnetAndPortNotExistOrNotVisible, DatabasePersistenceException, DestinationOrNexthopCanNotBeNull {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            boolean isExit = false;\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    isExit = true;\n+                    break;\n+                }\n+            }\n+            if (!isExit) {\n+                RouteEntry routeEntry = new RouteEntry();\n+                routeEntry.setDestination(requestDestination);\n+                routeEntry.setNexthop(requestNexthop);\n+                routeEntities.add(routeEntry);\n+\n+                RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(requestDestination, requestNexthop);\n+                responseRoutes.add(routesToNeutronRouteObject);\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public RoutesToNeutronWebResponse removeRoutesToNeutronRouter(String routerid, RoutesToNeutronRouterRequestObject requestRouter) throws RouterOrSubnetAndPortNotExistOrNotVisible, ResourceNotFoundException, ResourcePersistenceException, DestinationOrNexthopCanNotBeNull, DatabasePersistenceException {\n+        RoutesToNeutronRouterResponseObject responseRouter = new RoutesToNeutronRouterResponseObject();\n+        List<RoutesToNeutronRouteObject> responseRoutes = new ArrayList<>();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerid);\n+        if (router == null) {\n+            throw new RouterOrSubnetAndPortNotExistOrNotVisible();\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+\n+        List<RoutesToNeutronRouteObject> requestRoutes = requestRouter.getRoutes();\n+        for (RoutesToNeutronRouteObject requestRoute : requestRoutes) {\n+            String requestDestination = requestRoute.getDestination();\n+            String requestNexthop = requestRoute.getNexthop();\n+\n+            if (requestDestination == null || requestNexthop == null) {\n+                throw new DestinationOrNexthopCanNotBeNull();\n+            }\n+\n+            for (int i = 0; i < routeEntities.size(); i ++) {\n+                RouteEntry routeEntry = routeEntities.get(i);\n+                String destination = routeEntry.getDestination();\n+                String nexthop = routeEntry.getNexthop();\n+                if (destination.equals(requestDestination) && nexthop.equals(requestNexthop)) {\n+                    routeEntities.remove(i);\n+                    break;\n+                }\n+            }\n+        }\n+        routeTable.setRouteEntities(routeEntities);\n+        router.setRouteTable(routeTable);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        // Construct response\n+        for (RouteEntry routeEntry : routeEntities) {\n+            String destination = routeEntry.getDestination();\n+            String nexthop = routeEntry.getNexthop();\n+            RoutesToNeutronRouteObject routesToNeutronRouteObject = new RoutesToNeutronRouteObject(destination, nexthop);\n+            responseRoutes.add(routesToNeutronRouteObject);\n+        }\n+        responseRouter.setId(routerid);\n+        responseRouter.setName(router.getName());\n+        responseRouter.setRoutes(responseRoutes);\n+\n+        return new RoutesToNeutronWebResponse(responseRouter);\n+    }\n+\n+    @Override\n+    public ConnectedSubnetsWebResponse getConnectedSubnets(String projectId, String vpcId, String subnetId) throws ResourceNotFoundException, ResourcePersistenceException, SubnetNotBindUniquePortId {\n+        List<String> subnetIds = new ArrayList<>();\n+\n+        // get subnet\n+        SubnetWebJson subnetWebJson = this.routerToSubnetService.getSubnet(projectId, subnetId);\n+        SubnetEntity subnet = subnetWebJson.getSubnet();\n+        if (subnet == null) {\n+            logger.warn(\"can not find subnet by subnet id :\" + subnetId);\n+            return null;\n+        }\n+\n+        // get subnet's route table type\n+        String attachedRouterId = subnet.getAttachedRouterId();\n+        if (attachedRouterId == null) {\n+            return null;\n+        }\n+\n+        Router router = this.routerDatabaseService.getByRouterId(attachedRouterId);\n+        if (router == null) {\n+            return null;\n+        }\n+        RouteTable routeTable = router.getRouteTable();\n+        if (routeTable == null) {\n+            return null;\n+        }\n+        RouteTableType routeTableType = routeTable.getRouteTableType();\n+\n+        if (routeTableType == null) {\n+            return null;\n+        } else if(routeTableType.getRouteTableType().equals(\"neutron\")){\n+            List<String> ports = router.getPorts();\n+            // check ports\n+            if (ports == null || ports.size() <= 1) {\n+                return null;\n+            }\n+            for (String portId : ports) {\n+                // get subnet by port id\n+                SubnetsWebJson subnetsWebJson = this.routerToSubnetService.getSubnetsByPortId(projectId, portId);\n+                if (subnetsWebJson == null) {\n+                    return null;\n+                }\n+                ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+                if (subnets.size() == 0) {\n+                    return null;\n+                }\n+                if (subnets.size() != 1) {\n+                    throw new SubnetNotBindUniquePortId();\n+                }\n+                subnet = subnets.get(0);\n+                subnetIds.add(subnet.getId());\n+            }\n+\n+        } else {\n+            // TODO: vpc route operation\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 473}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c59b868d43b27c09a84b63248e316c38fabca3b", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/1c59b868d43b27c09a84b63248e316c38fabca3b", "committedDate": "2020-09-03T22:47:41Z", "message": "fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNzgzNTI5", "url": "https://github.com/futurewei-cloud/alcor/pull/361#pullrequestreview-482783529", "createdAt": "2020-09-04T16:14:24Z", "commit": {"oid": "1c59b868d43b27c09a84b63248e316c38fabca3b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyOTkzMzE2", "url": "https://github.com/futurewei-cloud/alcor/pull/361#pullrequestreview-482993316", "createdAt": "2020-09-04T22:22:42Z", "commit": {"oid": "1c59b868d43b27c09a84b63248e316c38fabca3b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMjo0MlrOHNc5CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoyMjo0MlrOHNc5CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2Njg4OA==", "bodyText": "Really like the comprehensive set of tests in this file \ud83d\udcaf", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r483866888", "createdAt": "2020-09-04T22:22:42Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/test/java/com/futurewei/alcor/route/NeutronRouterTests.java", "diffHunk": "@@ -0,0 +1,561 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route;\n+\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+import static org.junit.Assert.*;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.route.config.UnitTestConfig;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.route.RouteTable;\n+import com.futurewei.alcor.web.entity.route.Router;\n+import com.futurewei.alcor.web.entity.route.RouterExtraAttribute;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import java.util.ArrayList;\n+\n+@ComponentScan(value = \"com.futurewei.alcor.common.test.config\")\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n+        properties = {\"httpbin=http://localhost:${wiremock.server.port}\"})\n+@AutoConfigureMockMvc\n+public class NeutronRouterTests {\n+\n+    @Autowired\n+    private MockMvc mockMvc;\n+\n+    @MockBean\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @MockBean\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @MockBean\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    private String getNeutronRouterByRouterIdUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId;\n+    private String createNeutronRoutersUri = \"/project/\" + UnitTestConfig.projectId + \"/routers\";\n+    private String updateNeutronRouterByRouterIdUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId;\n+    private String deleteNeutronRouterByRouterIdUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId;\n+    private String addInterfaceToNeutronRouterUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId + \"/add_router_interface\";\n+    private String removeInterfaceToNeutronRouterUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId + \"/remove_router_interface\";\n+    private String addRoutesToNeutronRouterUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId + \"/add_extra_routes\";\n+    private String removeRoutesToNeutronRouterUri = \"/project/\" + UnitTestConfig.projectId + \"/routers/\" + UnitTestConfig.routerId + \"/remove_extra_routes\";\n+    private String getConnectedSubnets = \"/project/\" + UnitTestConfig.projectId + \"/vpcs/\" + UnitTestConfig.vpcId + \"/subnets/\" + UnitTestConfig.subnetId + \"/connected-subnets\";\n+\n+    @Test\n+    public void getNeutronRouterById_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(new RouterExtraAttribute(){{setId(UnitTestConfig.routerExtraAttributeId);}});\n+        this.mockMvc.perform(get(getNeutronRouterByRouterIdUri))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.router.id\").value(UnitTestConfig.routerId));\n+    }\n+\n+    @Test\n+    public void getNeutronRouterById_canNotFindRouter_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(new RouterExtraAttribute(){{setId(UnitTestConfig.routerExtraAttributeId);}});\n+        try {\n+            String response = this.mockMvc.perform(get(getNeutronRouterByRouterIdUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andReturn().getResponse().getContentAsString();\n+            assertEquals(\"{\\\"router\\\":null}\", response);\n+        }catch (Exception e) {\n+            System.out.println(\"-----json returned =\" + e.getMessage());\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void createNeutronRouters_pass () throws Exception {\n+        try {\n+            this.mockMvc.perform(post(createNeutronRoutersUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.neutronRouterResource))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.router.id\").value(UnitTestConfig.routerId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void updateNeutronRouter_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(new RouterExtraAttribute(){{setId(UnitTestConfig.routerExtraAttributeId);}});\n+\n+        try {\n+            this.mockMvc.perform(put(updateNeutronRouterByRouterIdUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.neutronRouterUpdateResource))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.router.id\").value(UnitTestConfig.updateRouterId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void updateNeutronRouter_canNotFindRouter_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(new RouterExtraAttribute(){{setId(UnitTestConfig.routerExtraAttributeId);}});\n+        try {\n+            String response = this.mockMvc.perform(get(getNeutronRouterByRouterIdUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andReturn().getResponse().getContentAsString();\n+            assertEquals(\"{\\\"router\\\":null}\", response);\n+        }catch (Exception e) {\n+            System.out.println(\"-----json returned =\" + e.getMessage());\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void deleteNeutronRouter_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setRouterExtraAttributeId(UnitTestConfig.routerExtraAttributeId);}});\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(new RouterExtraAttribute(){{setId(UnitTestConfig.routerExtraAttributeId);}});\n+        try {\n+            this.mockMvc.perform(delete(deleteNeutronRouterByRouterIdUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.id\").value(UnitTestConfig.routerId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void deleteNeutronRouter_canNotFindRouter_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(new RouterExtraAttribute(){{setId(UnitTestConfig.routerExtraAttributeId);}});\n+        try {\n+            String response = this.mockMvc.perform(delete(deleteNeutronRouterByRouterIdUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andReturn().getResponse().getContentAsString();\n+            assertEquals(\"{\\\"id\\\":null}\", response);\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void deleteNeutronRouter_canNotFindRouterExtraAttribute_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setRouterExtraAttributeId(UnitTestConfig.routerExtraAttributeId);}});\n+        Mockito.when(routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(anyString()))\n+                .thenReturn(null);\n+        try {\n+            String response = this.mockMvc.perform(delete(deleteNeutronRouterByRouterIdUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andReturn().getResponse().getContentAsString();\n+            assertEquals(\"{\\\"id\\\":null}\", response);\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void addInterfaceToNeutronRouter_onlyPassInPortId_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity());}});\n+\n+        try {\n+            this.mockMvc.perform(put(addInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_port))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.port_id\").value(UnitTestConfig.portId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addInterfaceToNeutronRouter_onlyPassInSubnetId_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(addInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnet))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.subnet_id\").value(UnitTestConfig.subnetId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addInterfaceToNeutronRouter_passInBothSubnetIdAndPortId_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(addInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnetAndPort))\n+                    .andDo(print())\n+                    .andExpect(status().is(400));\n+        } catch (Exception e) {\n+            System.out.println(\"-----json returned =\" + e.getMessage());\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addInterfaceToNeutronRouter_onlyPassInPortId_SubnetNotBindUniquePortId_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});add(new SubnetEntity());}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity());}});\n+\n+        try {\n+            this.mockMvc.perform(put(addInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_port))\n+                    .andDo(print())\n+                    .andExpect(status().is(409));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addInterfaceToNeutronRouter_onlyPassInPortId_PortIsAlreadyInUse_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);setAttachedRouterId(UnitTestConfig.routerId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity());}});\n+\n+        try {\n+            this.mockMvc.perform(put(addInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_port))\n+                    .andDo(print())\n+                    .andExpect(status().is(409));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addInterfaceToNeutronRouter_onlyPassInPortId_CanNotFindRouter_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity());}});\n+\n+        try {\n+            this.mockMvc.perform(put(addInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_port))\n+                    .andDo(print())\n+                    .andExpect(status().is(500));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeInterfaceToNeutronRouter_onlyPassInPortId_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_port))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.port_id\").value(UnitTestConfig.portId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeInterfaceToNeutronRouter_onlyPassInSubnetId_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnet))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.subnet_id\").value(UnitTestConfig.subnetId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeInterfaceToNeutronRouter_passInBothSubnetIdAndPortId_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnetAndPort))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.subnet_id\").value(UnitTestConfig.subnetId));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeInterfaceToNeutronRouter_passInBothSubnetIdAndPortId_SubnetNotBindUniquePortId_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});add(new SubnetEntity());}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.diffPortId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnetAndPort))\n+                    .andDo(print())\n+                    .andExpect(status().is(409));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeInterfaceToNeutronRouter_passInBothSubnetIdAndPortId_AttachedPortsNotMatchPortId_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.diffPortId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnetAndPort))\n+                    .andDo(print())\n+                    .andExpect(status().is(409));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeInterfaceToNeutronRouter_passInBothSubnetIdAndPortId_RouterOrSubnetAndPortNotExistOrNotVisible_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeInterfaceToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routerInterfaceRequest_subnetAndPort))\n+                    .andDo(print())\n+                    .andExpect(status().is(404));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addRoutesToNeutronRouter_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(addRoutesToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routesToNeutronRouterRequest))\n+                    .andDo(print())\n+                    .andExpect(status().isOk());\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void addRoutesToNeutronRouter_RouterOrSubnetAndPortNotExistOrNotVisible_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(addRoutesToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routesToNeutronRouterRequest))\n+                    .andDo(print())\n+                    .andExpect(status().is(404));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeRoutesToNeutronRouter_pass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());}});}});\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeRoutesToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routesToNeutronRouterRequest))\n+                    .andDo(print())\n+                    .andExpect(status().isOk());\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void removeRoutesToNeutronRouter_RouterOrSubnetAndPortNotExistOrNotVisible_notPass () throws Exception {\n+        Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n+                .thenReturn(null);\n+        Mockito.when(routerToSubnetService.getSubnetsByPortId(anyString(), anyString()))\n+                .thenReturn(new SubnetsWebJson(){{setSubnets(new ArrayList<SubnetEntity>(){{add(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});}});\n+        Mockito.when(routerToSubnetService.getSubnet(anyString(), anyString()))\n+                .thenReturn(new SubnetWebJson(){{setSubnet(new SubnetEntity(){{setId(UnitTestConfig.subnetId);setGatewayPortId(UnitTestConfig.portId);}});}});\n+\n+        try {\n+            this.mockMvc.perform(put(removeRoutesToNeutronRouterUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(UnitTestConfig.routesToNeutronRouterRequest))\n+                    .andDo(print())\n+                    .andExpect(status().is(404));\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+    }\n+\n+    @Test\n+    public void getConnectedSubnets_pass () throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c59b868d43b27c09a84b63248e316c38fabca3b"}, "originalPosition": 542}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdd80c501f24f830b5a2cb5adbca26a427b76621", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/cdd80c501f24f830b5a2cb5adbca26a427b76621", "committedDate": "2020-05-04T00:01:32Z", "message": "Add vpc/subnet pumls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af326f99a5440277b980c53e19823ed6ea0a838f", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/af326f99a5440277b980c53e19823ed6ea0a838f", "committedDate": "2020-05-04T00:26:12Z", "message": "Merge branch 'master' into docs/design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62f6e39f50159b544953c567411ca7977a90eab3", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/62f6e39f50159b544953c567411ca7977a90eab3", "committedDate": "2020-05-04T18:44:36Z", "message": "update vpc puml and system flow adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef2d71766150bf3870ee763d3485fa6e519d09f0", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ef2d71766150bf3870ee763d3485fa6e519d09f0", "committedDate": "2020-05-07T06:18:33Z", "message": "Add vm/vpc workflows and puml template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad7fd056e2afb4ea7527865b97e02188e27cc4a0", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ad7fd056e2afb4ea7527865b97e02188e27cc4a0", "committedDate": "2020-05-08T23:09:55Z", "message": "Merge from xieus/master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f58577c232e8b996d62730971ad05db136017ad4", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/f58577c232e8b996d62730971ad05db136017ad4", "committedDate": "2020-05-09T04:25:47Z", "message": "Squashed commit of the following:\n\ncommit dec9dd9a7a80aabc9cb801b244d20e840b5ed206\nAuthor: kaidong <shikaidong@126.com>\nDate:   Sat May 9 12:06:38 2020 +0800\n\n    [Alcor Tools] Set up a Swagger UI (#187)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "592bdd0d0d0faf7526d97f5fa22a998ccd2bf49e", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/592bdd0d0d0faf7526d97f5fa22a998ccd2bf49e", "committedDate": "2020-05-14T15:49:39Z", "message": "Add a set of new workflows and start services docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1804923b6ea2134d89b13e5267069ab804179c74", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/1804923b6ea2134d89b13e5267069ab804179c74", "committedDate": "2020-05-14T20:46:39Z", "message": "Clean node manager pom.xml and modify docker file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3fd4b583c2f30434e3fedcf05f99eec34c8c3b2", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c3fd4b583c2f30434e3fedcf05f99eec34c8c3b2", "committedDate": "2020-05-14T20:57:50Z", "message": "Clean mac manager pom.xml and modify docker file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "584e38ac59f84b0381519fac4e4b694d4b71e591", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/584e38ac59f84b0381519fac4e4b694d4b71e591", "committedDate": "2020-05-14T21:08:35Z", "message": "Clean port manager pom.xml and modify docker file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c58eaf795036ba2ff35cd4363114f8d6713b3f81", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c58eaf795036ba2ff35cd4363114f8d6713b3f81", "committedDate": "2020-05-14T21:19:10Z", "message": "Clean ip manager pom.xml and modify docker file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1775e024d5837afab979288c41c882692bc1f51", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c1775e024d5837afab979288c41c882692bc1f51", "committedDate": "2020-05-14T21:54:32Z", "message": "Clean route manager pom.xml and modify docker file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad76d8c84f81cd98d32853d60f8c551c7a34bb2a", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ad76d8c84f81cd98d32853d60f8c551c7a34bb2a", "committedDate": "2020-05-15T05:30:15Z", "message": "Add maven compile plugin to route pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc7961b7897d8dd68410a5296746fd78b701aefc", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/fc7961b7897d8dd68410a5296746fd78b701aefc", "committedDate": "2020-05-15T05:43:09Z", "message": "Clean subnet manager pom.xml and modify docker file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a532098b5683f02c5d010092569b2f6411df840a", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a532098b5683f02c5d010092569b2f6411df840a", "committedDate": "2020-05-15T05:52:24Z", "message": "Clean vpc manager pom.xml and modify docker file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7082249e149011e4a66bb61dd63e996074d2d27", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/d7082249e149011e4a66bb61dd63e996074d2d27", "committedDate": "2020-05-15T06:07:19Z", "message": "Clean API gateway pom.xml and modify docker file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1647924aa1ff875b71e905a5547da7e9ace9bd66", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/1647924aa1ff875b71e905a5547da7e9ace9bd66", "committedDate": "2020-05-15T06:27:20Z", "message": "Update pom for lib, web and all other services"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19674f040e1c2961633528bfd6cc35e11aa8412c", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/19674f040e1c2961633528bfd6cc35e11aa8412c", "committedDate": "2020-05-15T06:33:46Z", "message": "Update main pom file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f257f57eb0d3e5261cd63cc037e2654a13fcb196", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/f257f57eb0d3e5261cd63cc037e2654a13fcb196", "committedDate": "2020-05-15T06:44:09Z", "message": "Update schema pom files and add dependencies to all service pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c19ce7d44edec66d973d8a90beebb272e6406c84", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c19ce7d44edec66d973d8a90beebb272e6406c84", "committedDate": "2020-05-15T21:22:42Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb3877f158cfffe66540b4974c06a94134fbac5d", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/eb3877f158cfffe66540b4974c06a94134fbac5d", "committedDate": "2020-05-16T13:04:55Z", "message": "Temp disable mac manager UTs for further investigation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ae43cdf94d8ecfaadf9f075b93f5bf9b106c163", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5ae43cdf94d8ecfaadf9f075b93f5bf9b106c163", "committedDate": "2020-05-16T13:20:39Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7912c8d664226f79ece168959eb51ff98e975f0d", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/7912c8d664226f79ece168959eb51ff98e975f0d", "committedDate": "2020-05-16T13:28:26Z", "message": "Merge from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a566f2fbdaa179dc120e53cbb60ce6d3f61f6f03", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a566f2fbdaa179dc120e53cbb60ce6d3f61f6f03", "committedDate": "2020-05-18T05:28:15Z", "message": "Outline design doc for dpm,mq,nhm,nmm, update controller and toc docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c0052bcd12e90a2aaefe166cd6d8029b1af7481", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/8c0052bcd12e90a2aaefe166cd6d8029b1af7481", "committedDate": "2020-05-18T06:25:01Z", "message": "Add nova integration doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6fdcd1a75f2c184b8299363bfa7c82e20f929d4", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/e6fdcd1a75f2c184b8299363bfa7c82e20f929d4", "committedDate": "2020-05-18T06:29:58Z", "message": "Update openstack workflow link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9158ce312ef1432f339463e5f0860bbe89790c24", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/9158ce312ef1432f339463e5f0860bbe89790c24", "committedDate": "2020-05-18T06:32:04Z", "message": "update link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "105a37dda47a6d9328e2825b256731da5fe5f607", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/105a37dda47a6d9328e2825b256731da5fe5f607", "committedDate": "2020-05-18T06:43:02Z", "message": "update puml file link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3da89dd7b333893240d37e40c421a6fa573d6d1", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/f3da89dd7b333893240d37e40c421a6fa573d6d1", "committedDate": "2020-05-18T06:44:47Z", "message": "add a temp vm_create puml under design and update puml file link in nova doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ea3c7ba629dd1d866bbf2be882c27e76d0b1111", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/7ea3c7ba629dd1d866bbf2be882c27e76d0b1111", "committedDate": "2020-05-18T06:51:42Z", "message": "update puml file link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8afc29cc70d9e88d0e8314e34282fddc2638a23", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b8afc29cc70d9e88d0e8314e34282fddc2638a23", "committedDate": "2020-05-18T07:01:18Z", "message": "update puml file link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16658012d802dc45fca32d1f7d567ace9bbb8f34", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/16658012d802dc45fca32d1f7d567ace9bbb8f34", "committedDate": "2020-05-18T07:08:28Z", "message": "update puml file link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8f1ce36053138154832101c687528f06dab9ad1", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a8f1ce36053138154832101c687528f06dab9ad1", "committedDate": "2020-05-18T07:26:58Z", "message": "Clean mac manager pom.xml and modify docker file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5094345e0d61b676819fba07b949c0957e7ea776", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5094345e0d61b676819fba07b949c0957e7ea776", "committedDate": "2020-05-18T07:31:28Z", "message": "Clean vpc manager pom.xml and modify docker file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67cdfc92d7a5cb370aa5ae7531d4f769ee4b67df", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/67cdfc92d7a5cb370aa5ae7531d4f769ee4b67df", "committedDate": "2020-05-18T07:36:23Z", "message": "Update pom for lib, web and all other services"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b47084799d9f925511761285d9a443f961fdf83", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/8b47084799d9f925511761285d9a443f961fdf83", "committedDate": "2020-05-18T07:37:00Z", "message": "Update schema pom files and add dependencies to all service pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bca77c7269c34316078510ec05c3f5b37d80d17", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/3bca77c7269c34316078510ec05c3f5b37d80d17", "committedDate": "2020-05-18T07:37:00Z", "message": "Temp disable mac manager UTs for further investigation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2709c68cb3c9570309f3cf311ff4455b6b3777a6", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/2709c68cb3c9570309f3cf311ff4455b6b3777a6", "committedDate": "2020-05-18T07:37:22Z", "message": "Merge branch 'master' of https://github.com/xieus/alcor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2446b1298068226cdd40de25f5a19436e1dc1b2", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b2446b1298068226cdd40de25f5a19436e1dc1b2", "committedDate": "2020-05-18T20:41:46Z", "message": "Merge branch 'upstream_master' into docs/design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01530339a016aeb06352f7f2daf00b4713bb01c", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/f01530339a016aeb06352f7f2daf00b4713bb01c", "committedDate": "2020-05-20T03:48:40Z", "message": "Reorg design docs into an Antora-supported structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77ef00fce2aa59c2d258aa73836af3888092b058", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/77ef00fce2aa59c2d258aa73836af3888092b058", "committedDate": "2020-05-20T04:13:30Z", "message": "update antora.yml and rename toc to index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "466a23736d6ed95acf1950a0e70fd9117afe00fa", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/466a23736d6ed95acf1950a0e70fd9117afe00fa", "committedDate": "2020-05-20T05:05:19Z", "message": "Add playbook yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b895a4dbdd5b425f1987ca8d2193263000dcd687", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b895a4dbdd5b425f1987ca8d2193263000dcd687", "committedDate": "2020-05-22T04:25:43Z", "message": "add nav adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67def70c07d33b72ad8704b3493fad20d74a336c", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/67def70c07d33b72ad8704b3493fad20d74a336c", "committedDate": "2020-05-22T04:37:18Z", "message": "update antora.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7dd1799661ebe96b32e8cd5698b41ae9e618db9", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/e7dd1799661ebe96b32e8cd5698b41ae9e618db9", "committedDate": "2020-05-22T04:38:26Z", "message": "update antora.yml format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7794ff04d34c004c639b7589cfc273cf26b16852", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/7794ff04d34c004c639b7589cfc273cf26b16852", "committedDate": "2020-05-22T04:47:49Z", "message": "Merge pull request #2 from xieus/docs/design\n\nDocs/design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44e57fd6d7778dd47bc711df05cce044ee113bc7", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/44e57fd6d7778dd47bc711df05cce044ee113bc7", "committedDate": "2020-05-22T05:41:09Z", "message": "Move adoc files under pages folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "622ad96e2ecfd695cea2d94aaad05392707a1d04", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/622ad96e2ecfd695cea2d94aaad05392707a1d04", "committedDate": "2020-05-22T18:47:06Z", "message": "update antora playbook"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9de51011a6d2ad63ffae4d2e9822f90be1f4e1e", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/e9de51011a6d2ad63ffae4d2e9822f90be1f4e1e", "committedDate": "2020-05-22T19:00:10Z", "message": "update links in README"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17fbbca02794392f339b93684ce8abc315ce084d", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/17fbbca02794392f339b93684ce8abc315ce084d", "committedDate": "2020-05-22T19:19:04Z", "message": "move image and workflow up to ROOT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a55ff88f509492b40e4796d96ae1cbe291ac2924", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a55ff88f509492b40e4796d96ae1cbe291ac2924", "committedDate": "2020-05-22T19:19:47Z", "message": "update links in affected docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c15dc8513262a277de2d066776407449acc1668b", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c15dc8513262a277de2d066776407449acc1668b", "committedDate": "2020-05-22T19:24:51Z", "message": "Merge from alcor/master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5085ddf22df64db3eb7f2b6fbb2b60e37a13abd3", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5085ddf22df64db3eb7f2b6fbb2b60e37a13abd3", "committedDate": "2020-07-02T19:19:09Z", "message": "sync up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98a447c223acc90eb9e22bec60ce85dfb194da34", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/98a447c223acc90eb9e22bec60ce85dfb194da34", "committedDate": "2020-07-02T19:56:24Z", "message": "Merge remote-tracking branch 'remotes/upstream/master' into new_master\n\n# Conflicts:\n#\tREADME.md\n#\tdocs/modules/ROOT/pages/comm_protocol/fast_path.adoc\n#\tdocs/modules/ROOT/pages/comm_protocol/rescue_path.adoc\n#\tdocs/modules/ROOT/pages/controller.adoc\n#\tdocs/modules/ROOT/pages/db_services/data_store.adoc\n#\tdocs/modules/ROOT/pages/deploy_related/deployment.adoc\n#\tdocs/modules/ROOT/pages/deploy_related/integration_nova.adoc\n#\tdocs/modules/ROOT/pages/high_level/system_flow.adoc\n#\tdocs/modules/ROOT/pages/mgmt_services/private_ip_manager.adoc\n#\tdocs/modules/ROOT/pages/mgmt_services/security_group_manager.adoc\n#\tdocs/modules/ROOT/pages/mgmt_services/virtual_mac_manager.adoc\n#\tdocs/modules/ROOT/pages/mgmt_services/vpc_manager.adoc\n#\tdocs/modules/ROOT/pages/sys_monitoring/monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d42f243e6239ec644eccd9d9e3ddc0f0f2c00a", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/f6d42f243e6239ec644eccd9d9e3ddc0f0f2c00a", "committedDate": "2020-07-02T22:08:20Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee965e7414da815da766c51c93d24aebe9c2757a", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ee965e7414da815da766c51c93d24aebe9c2757a", "committedDate": "2020-07-07T18:09:11Z", "message": "sync up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f811965a191ef019d422da05c8f715a439e4fad", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/3f811965a191ef019d422da05c8f715a439e4fad", "committedDate": "2020-07-07T18:09:47Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df99b38bb5153d6c53ab9a5fde2a7fb28fb7f789", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/df99b38bb5153d6c53ab9a5fde2a7fb28fb7f789", "committedDate": "2020-07-08T17:50:29Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8b23d4d602105b10c1360b2ad128e549efc0473", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/d8b23d4d602105b10c1360b2ad128e549efc0473", "committedDate": "2020-07-09T15:51:35Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af3a28c764aed051d184ab56dbe37d035baad59c", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/af3a28c764aed051d184ab56dbe37d035baad59c", "committedDate": "2020-07-16T22:56:12Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d8cf02f301e200cd07ac3e91b9803eddd139906", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/2d8cf02f301e200cd07ac3e91b9803eddd139906", "committedDate": "2020-07-17T18:03:02Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95d4e011f42dfa269b4264ebbb0d0da1ec2ea62a", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/95d4e011f42dfa269b4264ebbb0d0da1ec2ea62a", "committedDate": "2020-07-20T21:43:50Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2c6e9552ff119b5418ee0c8c7db22ab31bc93ff", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a2c6e9552ff119b5418ee0c8c7db22ab31bc93ff", "committedDate": "2020-07-28T01:13:44Z", "message": ":Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8731f2388a6aed46dff689d40c998c8810a7595d", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/8731f2388a6aed46dff689d40c998c8810a7595d", "committedDate": "2020-07-29T18:08:49Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a54029e3a0c7cf2a79771e8133b82aa5984771b2", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a54029e3a0c7cf2a79771e8133b82aa5984771b2", "committedDate": "2020-07-30T05:07:37Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc4af489afb7bab2e571e776f12be1b2d2c7f92b", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/fc4af489afb7bab2e571e776f12be1b2d2c7f92b", "committedDate": "2020-07-31T21:19:16Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56f75e48b3cf79e76e0fe693ed7a3cc3d05b53b0", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/56f75e48b3cf79e76e0fe693ed7a3cc3d05b53b0", "committedDate": "2020-08-04T21:12:35Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b969fa4db254b05f5a1f434684dc8a4d63511e46", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b969fa4db254b05f5a1f434684dc8a4d63511e46", "committedDate": "2020-08-05T17:18:41Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55451d842f65429c1b888a363fccd0f1b5dc6bc6", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/55451d842f65429c1b888a363fccd0f1b5dc6bc6", "committedDate": "2020-08-11T17:44:06Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04b612d24dcfc8afdb80654388203772e59de081", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/04b612d24dcfc8afdb80654388203772e59de081", "committedDate": "2020-08-12T17:44:30Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c46856b56799c1f22cbbba538cd511bc0349094", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/4c46856b56799c1f22cbbba538cd511bc0349094", "committedDate": "2020-08-14T18:11:28Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbe2be74eacabbfddefc02bd000e48f21d9f66b2", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/dbe2be74eacabbfddefc02bd000e48f21d9f66b2", "committedDate": "2020-08-17T23:57:02Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3934053afb2e72a83edeb16c6e7ef1f2563d1b2", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a3934053afb2e72a83edeb16c6e7ef1f2563d1b2", "committedDate": "2020-08-18T17:55:51Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6b43a4c8bec4fd5e7331c4af40a712405dee714", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c6b43a4c8bec4fd5e7331c4af40a712405dee714", "committedDate": "2020-08-19T00:17:45Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eabd2005e4a47445db6c3cc275a2e5db8ac57ea8", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/eabd2005e4a47445db6c3cc275a2e5db8ac57ea8", "committedDate": "2020-08-19T16:40:01Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c022fac24faa3b9d18572796dc51d121b824af17", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c022fac24faa3b9d18572796dc51d121b824af17", "committedDate": "2020-08-19T21:15:05Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae533091c5f21dc11b196e05f1b3b971c547b388", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ae533091c5f21dc11b196e05f1b3b971c547b388", "committedDate": "2020-08-21T17:35:12Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3eec6580983ad9b25623159c8bd488e679c0fe3", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b3eec6580983ad9b25623159c8bd488e679c0fe3", "committedDate": "2020-08-21T17:36:23Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05b03ba017731647f29f5a141512b99de48234dd", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/05b03ba017731647f29f5a141512b99de48234dd", "committedDate": "2020-08-21T19:21:19Z", "message": "Merge branch 'new_master' into feature/refactor_route_manager\n\n# Conflicts:\n#\tservices/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java\n#\tservices/vpc_manager/src/main/resources/application.properties\n#\tweb/src/main/java/com/futurewei/alcor/web/entity/vpc/VpcEntity.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a237ddcb08ef70df25397efb0541ecab2b040628", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a237ddcb08ef70df25397efb0541ecab2b040628", "committedDate": "2020-08-21T19:22:06Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27a4c657f12902fed4a34f701002c277345f858b", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/27a4c657f12902fed4a34f701002c277345f858b", "committedDate": "2020-08-21T23:07:49Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6950e7a80d08a6942805decbbfa1114643e04a0a", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/6950e7a80d08a6942805decbbfa1114643e04a0a", "committedDate": "2020-08-21T23:15:54Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25524101ebdcf3bb0907fdf8df2442f8f9a69b3f", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/25524101ebdcf3bb0907fdf8df2442f8f9a69b3f", "committedDate": "2020-08-21T23:30:32Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86c213f8c0e988798027f837c920fa5260f831c0", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/86c213f8c0e988798027f837c920fa5260f831c0", "committedDate": "2020-08-22T00:26:47Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0", "committedDate": "2020-08-24T17:45:47Z", "message": "update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczODg5MzEz", "url": "https://github.com/futurewei-cloud/alcor/pull/361#pullrequestreview-473889313", "createdAt": "2020-08-24T22:05:24Z", "commit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjowNToyNFrOHF35og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoyMDozMFrOHF4QEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMDgwMg==", "bodyText": "FixedIp is also defined in PortEntity \n  \n    \n      alcor/web/src/main/java/com/futurewei/alcor/web/entity/port/PortEntity.java\n    \n    \n         Line 251\n      in\n      d823316\n    \n    \n    \n    \n\n        \n          \n           public static class FixedIp { \n        \n    \n  \n\n\nCould you check if we could reuse it?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475920802", "createdAt": "2020-08-24T22:05:24Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/FixedIp.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+\n+public class FixedIp {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMTQ1OQ==", "bodyText": "Do we need this import?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475921459", "createdAt": "2020-08-24T22:07:08Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteEntity.java", "diffHunk": "@@ -17,6 +17,7 @@\n package com.futurewei.alcor.web.entity.route;\n \n import com.futurewei.alcor.common.entity.CustomerResource;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMTk1NA==", "bodyText": "I found there are two files, both named RouteEntity in this PR. Very unusual. Could you pls double check?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475921954", "createdAt": "2020-08-24T22:08:28Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteEntry.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.jetbrains.annotations.NotNull;\n+\n+@Data\n+public class RouteEntry extends CustomerResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMjI5Nw==", "bodyText": "[Minor]: subnet_id and vpc_id?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475922297", "createdAt": "2020-08-24T22:09:26Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteTable.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+@Data\n+public class RouteTable extends CustomerResource {\n+\n+    @JsonProperty(\"routes\")\n+    private List<RouteEntry> routeEntities;\n+\n+    @JsonProperty(\"route_table_type\")\n+    private RouteTableType routeTableType;\n+\n+    // store subnet_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMzc1Mg==", "bodyText": "created_at and updated_at are included in CustomerResource, right?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475923752", "createdAt": "2020-08-24T22:13:11Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class Router extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private List<RouteTable> routeTables;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store vpc_id\n+    @JsonProperty(\"router_extra_attribute_id\")\n+    private String routerExtraAttributeId;\n+\n+    // store subnet_gateway_port_id\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")\n+    private boolean adminStateUp;\n+\n+    @JsonProperty(\"status\")\n+    private String status;\n+\n+    @CreatedDate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNDQ0NA==", "bodyText": "@kevin-zhonghao Forgot to mention this to you earlier. Going forward, let us not use lombok.Data, instead, let us write setter and getter explicitly.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475924444", "createdAt": "2020-08-24T22:14:59Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouterWebRequestJson.java", "diffHunk": "@@ -15,18 +15,16 @@\n */\n package com.futurewei.alcor.web.entity.route;\n \n-public class RouterState {\n-    private String tenantId;\n+import lombok.Data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNTk2NA==", "bodyText": "@kevin-zhonghao @cj-chung\nFor VPCEntity, could use extract the common fields of VPCEntity and NetworkEntity (not existed yet) to a common class? VPCEntity and NetworkEntity could inherit this common class. This way, we could clearly see the differences in two different scenarios.\nNot high priority for this PR. We could discuss and plan in next PR.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475925964", "createdAt": "2020-08-24T22:19:03Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/vpc/VpcEntity.java", "diffHunk": "@@ -19,6 +20,9 @@\n     @JsonProperty(\"routes\")\n     private List<RouteEntity> routeEntities;\n \n+    @JsonProperty(\"router\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNjU0NA==", "bodyText": "created_at and updated_at.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475926544", "createdAt": "2020-08-24T22:20:30Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/NeutronRouterWebRequestObject.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class NeutronRouterWebRequestObject extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private List<RouteTable> routeTables;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store subnet_gateway_port_id\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")\n+    private boolean adminStateUp;\n+\n+    @JsonProperty(\"status\")\n+    private String status;\n+\n+    @JsonProperty(\"external_gateway_info\")\n+    private ExternalGateway external_gateway_info;\n+\n+    @JsonProperty(\"revision_number\")\n+    private Integer revisionNumber;\n+\n+    @JsonProperty(\"distributed\")\n+    private boolean distributed;\n+\n+    @JsonProperty(\"ha\")\n+    private boolean ha;\n+\n+    @JsonProperty(\"availability_zone_hints\")\n+    private List<String> availabilityZoneHints;\n+\n+    @JsonProperty(\"availability_zones\")\n+    private List<String> availabilityZones;\n+\n+    @JsonProperty(\"service_type_id\")\n+    private String serviceTypeId;\n+\n+    @JsonProperty(\"flavor_id\")\n+    private String flavorId;\n+\n+    @JsonProperty(\"tags\")\n+    private List<String> tags;\n+\n+    @JsonProperty(\"conntrack_helpers\")\n+    private List<String> conntrackHelpers;\n+\n+    @CreatedDate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczOTQ5ODY5", "url": "https://github.com/futurewei-cloud/alcor/pull/361#pullrequestreview-473949869", "createdAt": "2020-08-24T22:45:21Z", "commit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjo0NToyMlrOHF4yBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjo0NToyMlrOHF4yBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzNTIzNg==", "bodyText": "what is getRoute_test for? Something like \"_test\" is usually not recommended in the interface.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r475935236", "createdAt": "2020-08-24T22:45:22Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/VpcService.java", "diffHunk": "@@ -2,12 +2,15 @@\n \n import com.futurewei.alcor.vpcmanager.exception.SubnetsNotEmptyException;\n import com.futurewei.alcor.web.entity.route.RouteWebJson;\n+import com.futurewei.alcor.web.entity.route.RouterWebJson;\n import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n \n public interface VpcService {\n \n     public RouteWebJson getRoute (String vpcId, VpcEntity vpcState);\n \n+    public RouterWebJson getRoute_test (String routerId, String routeTableId, VpcEntity vpcState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22c32ce25cf2218ec570c29a2640cbcbd14811db", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/22c32ce25cf2218ec570c29a2640cbcbd14811db", "committedDate": "2020-08-25T21:41:04Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3159e8e66a96392eee0679fede1402d1ea84abdc", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/3159e8e66a96392eee0679fede1402d1ea84abdc", "committedDate": "2020-08-25T22:15:12Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b38726012f58999cd97179b84c933525a69e94f3", "committedDate": "2020-08-25T23:18:14Z", "message": "update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTY3ODQx", "url": "https://github.com/futurewei-cloud/alcor/pull/361#pullrequestreview-475167841", "createdAt": "2020-08-26T05:49:08Z", "commit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNTo0OTowOFrOHG8wEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxMDo1MlrOHG9NMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0ODg0OQ==", "bodyText": "Could we switch to Alcor logger instead of slf4j logger?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477048849", "createdAt": "2020-08-26T05:49:08Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTA3MQ==", "bodyText": "Remove commented lines, as always :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477049071", "createdAt": "2020-08-26T05:49:45Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTI4NA==", "bodyText": "@kevin-zhonghao maybe it is time to start thinking about a generic validator for all microservices.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477049284", "createdAt": "2020-08-26T05:50:24Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTc4MA==", "bodyText": "Just would like to make sure this is the Neutron behavior as well - returning an empty json instead of an error code.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477049780", "createdAt": "2020-08-26T05:51:53Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1MTg4MA==", "bodyText": "router.getRouterExtraAttributeId() could be null or empty if this router is a vpc router. It might be a good idea to add validation before proceeding to query an addition table.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477051880", "createdAt": "2020-08-26T05:58:11Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NDUxNA==", "bodyText": "Could we consolidate the validation into one?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477054514", "createdAt": "2020-08-26T06:05:50Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NTM4Mw==", "bodyText": "Like the controller, pretty concise!", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477055383", "createdAt": "2020-08-26T06:08:18Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID vpcId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(vpcId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1NjMwNQ==", "bodyText": "what if the resource.getid() != routerid?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477056305", "createdAt": "2020-08-26T06:10:52Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            neutronRouterWebRequestObject = this.neutronRouterService.getNeutronRouter(routerid);\n+\n+//            router = this.routerDatabaseService.getByRouterId(routerId);\n+//            if (router == null) {\n+//                return new NeutronRouterWebJson();\n+//            }\n+//\n+//            routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+//\n+//            BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+//            if (routerExtraAttribute != null) {\n+//                BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+//            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindRouter e) {\n+            logger.error(e.getMessage() + \" : \" + routerid);\n+            return new NeutronRouterWebJson();\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * List Neutron routers\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRoutersWebJson getNeutronRouters(@PathVariable String projectid) throws Exception {\n+\n+        List<NeutronRouterWebRequestObject> neutronRouters = new ArrayList<>();\n+\n+        Map<String, Router> routers = null;\n+        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        Map<String, Object[]> queryParams =\n+                ControllerUtil.transformUrlPathParams(request.getParameterMap(), Router.class);\n+\n+        ControllerUtil.handleUserRoles(request.getHeader(ControllerUtil.TOKEN_INFO_HEADER), queryParams);\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routers = this.routerDatabaseService.getAllRouters(queryParams);\n+            if (routers == null) {\n+                return new NeutronRoutersWebJson();\n+            }\n+\n+            for (Map.Entry<String, Router> entry : routers.entrySet()) {\n+                NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+                Router router = (Router) entry.getValue();\n+                routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+                BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+                if (routerExtraAttribute != null) {\n+                    BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+                }\n+\n+                neutronRouters.add(neutronRouterWebRequestObject);\n+            }\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw new Exception(e);\n+        } catch (ResourceNotFoundException e) {\n+            throw new Exception(e);\n+        }\n+\n+        return new NeutronRoutersWebJson(neutronRouters);\n+    }\n+\n+    /**\n+     * Create a Neutron router\n+     * @param projectid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/project/{projectid}/routers\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson createNeutronRouters(@PathVariable String projectid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            neutronRouterWebRequestObject = resource.getRouter();\n+            String id = neutronRouterWebRequestObject.getId();\n+\n+            if (id == null || StringUtils.isEmpty(id)) {\n+                UUID vpcId = UUID.randomUUID();\n+                neutronRouterWebRequestObject.setId(vpcId.toString());\n+            }\n+            RestPreconditionsUtil.verifyResourceNotNull(neutronRouterWebRequestObject);\n+\n+            // configure default value\n+            neutronRouterWebRequestObject = RouteManagerUtil.configureNeutronRouterParameters(neutronRouterWebRequestObject);\n+\n+            // save router and router_extra_attribute\n+            this.neutronRouterService.saveRouterAndRouterExtraAttribute(neutronRouterWebRequestObject);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new NeutronRouterWebJson(neutronRouterWebRequestObject);\n+    }\n+\n+    /**\n+     * Update a Neutron router\n+     * @param projectid\n+     * @param routerid\n+     * @param resource\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson updateNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid, @RequestBody NeutronRouterWebJson resource) throws Exception {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkNeutronRouterWebResourceIsValid(resource)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 232}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTgwODA1", "url": "https://github.com/futurewei-cloud/alcor/pull/361#pullrequestreview-475180805", "createdAt": "2020-08-26T06:18:27Z", "commit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoxODoyN1rOHG9YFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyNjowMFrOHG9jdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1OTA5NA==", "bodyText": "Yes, I think you've introduced port_detail in the SubnetEntity.\nHow about removing the old gw_port_ip and gw_port_mac? I would recommend to keep them for now unless PM and other relevant managers switch to the new contract, and then we remove the old fields. Therefore it might be worth putting a @Legacy annotation on those fields.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477059094", "createdAt": "2020-08-26T06:18:27Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/subnet/SubnetEntity.java", "diffHunk": "@@ -36,9 +37,19 @@\n     @JsonProperty(\"availability_zone\")\n     private String availabilityZone;\n \n+    // TODO: considering to put into port", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MTE1Ng==", "bodyText": "Got it.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477061156", "createdAt": "2020-08-26T06:23:58Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/Router.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.springframework.data.annotation.CreatedDate;\n+import org.springframework.data.annotation.LastModifiedDate;\n+\n+import java.util.List;\n+\n+@Data\n+public class Router extends CustomerResource {\n+\n+    @JsonProperty(\"routetable\")\n+    private List<RouteTable> routeTables;\n+\n+    // store vpc_id\n+    @JsonProperty(\"owner\")\n+    private String owner;\n+\n+    // store vpc_id\n+    @JsonProperty(\"router_extra_attribute_id\")\n+    private String routerExtraAttributeId;\n+\n+    // store subnet_gateway_port_id\n+    @JsonProperty(\"ports\")\n+    private List<String> ports;\n+\n+    @JsonProperty(\"tenant_id\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"admin_state_up\")\n+    private boolean adminStateUp;\n+\n+    @JsonProperty(\"status\")\n+    private String status;\n+\n+    @CreatedDate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMzc1Mg=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MTY2Mw==", "bodyText": "Got it. Looked so similar, time to upgrade my glass :-)", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477061663", "createdAt": "2020-08-26T06:25:10Z", "author": {"login": "xieus"}, "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteEntry.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.web.entity.route;\n+\n+import com.futurewei.alcor.common.entity.CustomerResource;\n+import lombok.Data;\n+import org.jetbrains.annotations.NotNull;\n+\n+@Data\n+public class RouteEntry extends CustomerResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMTk1NA=="}, "originalCommit": {"oid": "3695cd10c2a61b52d19ba2e5c62cac1bd9d957a0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MTg3OA==", "bodyText": "Do we need this?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477061878", "createdAt": "2020-08-26T06:25:43Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/service/VpcService.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n import com.futurewei.alcor.vpcmanager.exception.SubnetsNotEmptyException;\n import com.futurewei.alcor.web.entity.route.RouteWebJson;\n+import com.futurewei.alcor.web.entity.route.RouterWebJson;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MjAwNA==", "bodyText": "Do we need them?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r477062004", "createdAt": "2020-08-26T06:26:00Z", "author": {"login": "xieus"}, "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java", "diffHunk": "@@ -29,6 +29,9 @@\n import com.futurewei.alcor.web.entity.route.RouteWebJson;\n import com.futurewei.alcor.web.entity.route.RouteEntity;\n import com.futurewei.alcor.web.entity.vpc.SegmentInfoInVpc;\n+import com.futurewei.alcor.web.entity.route.Router;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3783756ba7517f80b3ed11501351b7e02c840976", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/3783756ba7517f80b3ed11501351b7e02c840976", "committedDate": "2020-08-28T00:16:47Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88b02b7823fac516ff5a2ef18dcef9c154397267", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/88b02b7823fac516ff5a2ef18dcef9c154397267", "committedDate": "2020-08-28T02:46:04Z", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4c259f56d20e9e1fb55026d0b79daf0431936ae", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b4c259f56d20e9e1fb55026d0b79daf0431936ae", "committedDate": "2020-08-28T17:44:44Z", "message": "Merge branch 'new_master' into feature/refactor_route_manager\n\n# Conflicts:\n#\tservices/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/controller/VpcController.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cedccb3022628b1545e35a90a7f369c0b249dbd", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/0cedccb3022628b1545e35a90a7f369c0b249dbd", "committedDate": "2020-08-28T21:11:12Z", "message": "update UTs and fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a909f88b75de093f6fe54287ea00b7a8c4677b56", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a909f88b75de093f6fe54287ea00b7a8c4677b56", "committedDate": "2020-08-31T23:51:21Z", "message": "new API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6", "author": {"user": {"login": "kevin-zhonghao", "name": "Zhonghao(Kevin) Lyu"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6", "committedDate": "2020-09-01T21:16:23Z", "message": "update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMDEzNDQ1", "url": "https://github.com/futurewei-cloud/alcor/pull/361#pullrequestreview-481013445", "createdAt": "2020-09-02T16:51:08Z", "commit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjo1MTowOFrOHL4OLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjo1OToyNVrOHL4jbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxNzUxNw==", "bodyText": "@kevin-zhonghao ping on this comment.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482217517", "createdAt": "2020-09-02T16:51:08Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0ODg0OQ=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMDgyNA==", "bodyText": "Correct. @kevin-zhonghao\nThat is one way - putting all the util methods together in a utii class, and those methods are set as static methods.\nAlternative is to use OOD for validator - a base validator class defining the validate() interface, and a few more child classes inheriting from the base and implement the actual validate method.\nEach child class is responsible of one specific class that it wants to validate.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482220824", "createdAt": "2020-09-02T16:56:03Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/NeutronRouterController.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.common.utils.ControllerUtil;\n+import com.futurewei.alcor.route.exception.CanNotFindRouter;\n+import com.futurewei.alcor.route.exception.RouterHasAttachedInterfaces;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.thymeleaf.util.StringUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class NeutronRouterController {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Autowired\n+    private NeutronRouterService neutronRouterService;\n+\n+    @Autowired\n+    private HttpServletRequest request;\n+\n+    /**\n+     * Show a Neutron router\n+     * @param routerid\n+     * @param projectid\n+     * @return\n+     * @throws Exception\n+     */\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routers/{routerid}\"})\n+    @DurationStatistics\n+    public NeutronRouterWebJson getNeutronRouterByRouterId(@PathVariable String projectid,@PathVariable String routerid) throws Exception {\n+\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = null;\n+\n+//        Router router = null;\n+//        RouterExtraAttribute routerExtraAttribute = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0OTI4NA=="}, "originalCommit": {"oid": "b38726012f58999cd97179b84c933525a69e94f3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMTk2OQ==", "bodyText": "Do we need to persist here?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482221969", "createdAt": "2020-09-02T16:57:52Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteController.java", "diffHunk": "@@ -252,4 +251,43 @@ public ResponseId deleteRuleWithSubnetId(@PathVariable String subnetId, @PathVar\n         return new ResponseId(routeId);\n         \n     }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/routers/{routerId}/routetable/{routeTableId}\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    @DurationStatistics\n+    public RouterWebJson createDefaultRouterForVpc(@PathVariable String routerId, @PathVariable String routeTableId, @RequestBody VpcWebJson resource) throws Exception {\n+        RouteEntry routeEntry = null;\n+        RouteTable routeTable = null;\n+        Router router = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routerId);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routeTableId);\n+            VpcEntity vpcEntity = resource.getNetwork();\n+            RestPreconditionsUtil.verifyResourceNotNull(vpcEntity);\n+\n+            String id = UUID.randomUUID().toString();\n+            String projectId = vpcEntity.getProjectId();\n+            String destination = vpcEntity.getCidr();\n+            String vpcId = vpcEntity.getId();\n+\n+            routeEntry = new RouteEntry(projectId, id, \"default_route_rule\", \"\",\n+                    destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+            List<RouteEntry> routeEntries = new ArrayList<>();\n+            routeEntries.add(routeEntry);\n+            routeTable = new RouteTable(projectId, routerId, \"default_route_table\", \"\",routeEntries, RouteConstant.DEFAULT_ROUTE_TABLE_TYPE,vpcId);\n+\n+            router = new Router(projectId, routeTableId, \"default_router\", \"\", routeTable);\n+\n+            //this.routeDatabaseService.addRoute(routeEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMjI2MA==", "bodyText": "Use alcor logger.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482222260", "createdAt": "2020-09-02T16:58:17Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteEntryController.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import org.slf4j.Logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMjk1OA==", "bodyText": "btw, doesn't find APIs in RouteEntryController and RouteTableController. Do we still need these new controllers?", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482222958", "createdAt": "2020-09-02T16:59:25Z", "author": {"login": "xieus"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouteEntryController.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.controller;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n+public class RouteEntryController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzA5ODYx", "url": "https://github.com/futurewei-cloud/alcor/pull/361#pullrequestreview-481309861", "createdAt": "2020-09-02T21:21:51Z", "commit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToyMTo1MVrOHMIhsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToyMTo1MVrOHMIhsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NDY1Nw==", "bodyText": "Why you need to set routerID when routerExtraAttribute != null?\nThe routerID should be set when the router has or has not extra attribute.", "url": "https://github.com/futurewei-cloud/alcor/pull/361#discussion_r482484657", "createdAt": "2020-09-02T21:21:51Z", "author": {"login": "cj-chung"}, "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.NeutronRouterService;\n+import com.futurewei.alcor.route.service.NeutronRouterToSubnetService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterExtraAttributeDatabaseService;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Service\n+public class NeutronRouterServiceImpl implements NeutronRouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Autowired\n+    private NeutronRouterToSubnetService routerToSubnetService;\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterExtraAttributeDatabaseService routerExtraAttributeDatabaseService;\n+\n+    @Override\n+    public NeutronRouterWebRequestObject getNeutronRouter(String routerId) throws ResourceNotFoundException, ResourcePersistenceException, CanNotFindRouter {\n+        NeutronRouterWebRequestObject neutronRouterWebRequestObject = new NeutronRouterWebRequestObject();\n+\n+        Router router = this.routerDatabaseService.getByRouterId(routerId);\n+        if (router == null) {\n+            throw new CanNotFindRouter();\n+        }\n+\n+        RouterExtraAttribute routerExtraAttribute = this.routerExtraAttributeDatabaseService.getByRouterExtraAttributeId(router.getRouterExtraAttributeId());\n+\n+        BeanUtils.copyProperties(router, neutronRouterWebRequestObject);\n+        RouteTable routeTable = router.getRouteTable();\n+        neutronRouterWebRequestObject.setRouteTable(routeTable);\n+        if (routerExtraAttribute != null) {\n+            BeanUtils.copyProperties(routerExtraAttribute, neutronRouterWebRequestObject);\n+            neutronRouterWebRequestObject.setId(routerId);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c30f4298a8ef7b8a8a7567ae5ae352173e7aa6"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d745b478545745a95b502158cf07d0037b3cf241", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/d745b478545745a95b502158cf07d0037b3cf241", "committedDate": "2019-10-01T01:24:32Z", "message": "Update design documents and table of content"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fc253ec962a7f0b4e60d095009ceecadf7dab77", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/1fc253ec962a7f0b4e60d095009ceecadf7dab77", "committedDate": "2019-10-02T08:28:06Z", "message": "Update README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b0efb64a961e93b07ce9413ea7ddecc360703d6", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/9b0efb64a961e93b07ce9413ea7ddecc360703d6", "committedDate": "2019-10-02T09:03:47Z", "message": "Add cloud-native key word"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db0a6990b01f2715002377cf551095253f16ca50", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/db0a6990b01f2715002377cf551095253f16ca50", "committedDate": "2019-10-02T17:09:04Z", "message": "Merge branch 'docs/design' of https://github.com/futurewei-cloud/AliothController into docs/design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "424dd5b140784fa974e7cc61766a005ffa720a9a", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/424dd5b140784fa974e7cc61766a005ffa720a9a", "committedDate": "2019-10-02T17:12:00Z", "message": "Start docs for comm and controller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b41edb9be73f2ab9f6a19ce4ca10e85b07281aee", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b41edb9be73f2ab9f6a19ce4ca10e85b07281aee", "committedDate": "2019-10-08T18:54:10Z", "message": "Add design sketch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e54c578a01355d6286175bb87a7612df1f37b93", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/3e54c578a01355d6286175bb87a7612df1f37b93", "committedDate": "2019-10-19T18:09:59Z", "message": "Design spec round 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7d8ad9a143d2622e54d45d3523ea18b9496f6fe", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/d7d8ad9a143d2622e54d45d3523ea18b9496f6fe", "committedDate": "2019-10-20T18:52:59Z", "message": "Rename fast path file and start feature comparison"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c6588e9cddbc1340254665fff874e495159c58d", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/4c6588e9cddbc1340254665fff874e495159c58d", "committedDate": "2019-10-24T01:08:42Z", "message": "Update rescue path doc [DRAFT]"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cceaa68d2838fcbac5b2bd2d0737fd01e432d3fa", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/cceaa68d2838fcbac5b2bd2d0737fd01e432d3fa", "committedDate": "2019-10-24T01:12:52Z", "message": "upload rescue_path.GIF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "978565619e33c5cc44a406fdc7d361f67eb46c7c", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/978565619e33c5cc44a406fdc7d361f67eb46c7c", "committedDate": "2019-10-24T01:18:15Z", "message": "update rescue path needed change table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e2b63ef9dbdab9de7b3879732430d7400ea1325", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/3e2b63ef9dbdab9de7b3879732430d7400ea1325", "committedDate": "2019-10-25T16:51:22Z", "message": "rescue_path.GIF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8fc472b93a1c5211f1d821fb6c4518d2a93e226", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/f8fc472b93a1c5211f1d821fb6c4518d2a93e226", "committedDate": "2019-10-25T21:48:30Z", "message": "rescue_path.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2480dd186fdac3ea59d1663439bc126aec67758e", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/2480dd186fdac3ea59d1663439bc126aec67758e", "committedDate": "2019-10-25T22:14:01Z", "message": "Design spec round 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68eda0bf67ff271cb833fc12b19655abed2739e8", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/68eda0bf67ff271cb833fc12b19655abed2739e8", "committedDate": "2019-10-26T06:08:35Z", "message": "Monitoring design outline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1c9cc7bccfaf86cb118c291ad375dfe5afe7d2f", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c1c9cc7bccfaf86cb118c291ad375dfe5afe7d2f", "committedDate": "2019-10-26T06:29:57Z", "message": "Update comm docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79e91fef8cd18e945ff737d61c661fe0870b3387", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/79e91fef8cd18e945ff737d61c661fe0870b3387", "committedDate": "2019-10-26T19:12:06Z", "message": "Update data storage design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca69892a7e60866df3f8b21ef783681ebcc8b0d5", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ca69892a7e60866df3f8b21ef783681ebcc8b0d5", "committedDate": "2019-10-26T19:12:18Z", "message": "Merge branch 'docs/design' of https://github.com/futurewei-cloud/AliothController into docs/design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b154ab0b4f4ba863aa65c0718b0fe2c345d7c2d", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/8b154ab0b4f4ba863aa65c0718b0fe2c345d7c2d", "committedDate": "2019-10-28T15:55:14Z", "message": "Update data store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4561d1eb71805b1db4d0240f7c2a2b9dfd48181b", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/4561d1eb71805b1db4d0240f7c2a2b9dfd48181b", "committedDate": "2019-10-29T00:10:31Z", "message": "Complete review of existing dbs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca4610e5a5431d989e0f76d57fbe77c4d9427c60", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ca4610e5a5431d989e0f76d57fbe77c4d9427c60", "committedDate": "2019-10-29T00:12:52Z", "message": "Update review table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b4a365811ffd398134f09a4f4320f242c4c09e", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/24b4a365811ffd398134f09a4f4320f242c4c09e", "committedDate": "2019-10-29T00:19:56Z", "message": "Adjust table column width"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45774dafcd131273a3ba9cfac8e8e9bb911252b4", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/45774dafcd131273a3ba9cfac8e8e9bb911252b4", "committedDate": "2019-10-29T15:09:20Z", "message": "Update feature comparsion table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18e500c5f9e3d6702299f534ac9e609eb59c033d", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/18e500c5f9e3d6702299f534ac9e609eb59c033d", "committedDate": "2019-10-29T23:04:43Z", "message": "Finalize review section in data store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc99d1454b188d516a309fa19783d20285f0f8d5", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/cc99d1454b188d516a309fa19783d20285f0f8d5", "committedDate": "2019-10-30T18:42:14Z", "message": "Add design diagram"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9c82327fa2cc2a20e8a9595e9ed0535de7eb8ec", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a9c82327fa2cc2a20e8a9595e9ed0535de7eb8ec", "committedDate": "2019-10-30T19:49:41Z", "message": "Add a design diagram"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2823921cbf3c75cb048163beec45672807e55ee4", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/2823921cbf3c75cb048163beec45672807e55ee4", "committedDate": "2019-10-30T21:29:45Z", "message": "Add files via upload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47b7e452f0f946671211a775713d97717f99e848", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/47b7e452f0f946671211a775713d97717f99e848", "committedDate": "2019-10-30T21:43:08Z", "message": "fix \"design\" session level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c9c004d8af7eff0aba83732bd57617faa1f8321", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/8c9c004d8af7eff0aba83732bd57617faa1f8321", "committedDate": "2019-10-30T21:45:22Z", "message": "Update monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41804505b2625ccdb789e0e4f2251beca0506327", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/41804505b2625ccdb789e0e4f2251beca0506327", "committedDate": "2019-10-30T22:51:18Z", "message": "Update monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc3958943753c8e6e86f31268f1c45534077e5b8", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/dc3958943753c8e6e86f31268f1c45534077e5b8", "committedDate": "2019-10-30T23:51:12Z", "message": "Add architectural design discussion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "847900e5b28fc711f2317fc48da2bcbbb5d4cd00", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/847900e5b28fc711f2317fc48da2bcbbb5d4cd00", "committedDate": "2019-10-30T23:51:43Z", "message": "Merge branch 'docs/design' of https://github.com/futurewei-cloud/AliothController into docs/design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "088feffee3e81b3c21122b3c8893d047517424b7", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/088feffee3e81b3c21122b3c8893d047517424b7", "committedDate": "2019-10-31T00:57:48Z", "message": "Update architecture image link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a16e184d3e255452012a3519fd08b33489b3778b", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a16e184d3e255452012a3519fd08b33489b3778b", "committedDate": "2019-10-31T07:43:22Z", "message": "Finalize storage design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "041b203e62657ec985bbeabff6f2f5657adc8be0", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/041b203e62657ec985bbeabff6f2f5657adc8be0", "committedDate": "2019-10-31T07:52:06Z", "message": "Update a few subtitles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "359463e72ac61fbafd75bfd46d07c45adce1a8d0", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/359463e72ac61fbafd75bfd46d07c45adce1a8d0", "committedDate": "2019-10-31T08:42:54Z", "message": "Minor grammar fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d178e49281143f6c1c7f5cfafb260e304457582", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5d178e49281143f6c1c7f5cfafb260e304457582", "committedDate": "2019-11-02T07:56:02Z", "message": "Add controller architecture diagram"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca474b040686d3a4acf5cad99f400a801c10b656", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ca474b040686d3a4acf5cad99f400a801c10b656", "committedDate": "2019-11-04T18:04:46Z", "message": "Update node_monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a4ce354775cc1807ab93b3f1124c6fb72ed046", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/35a4ce354775cc1807ab93b3f1124c6fb72ed046", "committedDate": "2019-11-04T18:07:22Z", "message": "Update monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b97cfe3d18e9fcf8b92155d570f1e93f0ede3ff", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/4b97cfe3d18e9fcf8b92155d570f1e93f0ede3ff", "committedDate": "2019-11-04T19:44:47Z", "message": "Update monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0df003abc20ac49c23db3acc4bcf7f3a973aaecd", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/0df003abc20ac49c23db3acc4bcf7f3a973aaecd", "committedDate": "2019-11-04T19:49:40Z", "message": "Update node_monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72916af2b9100eddce5fcca3b16b28a13b8d7349", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/72916af2b9100eddce5fcca3b16b28a13b8d7349", "committedDate": "2019-11-04T22:59:12Z", "message": "Update monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db7c3ee998a6afad91c270345c1985e114155174", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/db7c3ee998a6afad91c270345c1985e114155174", "committedDate": "2019-11-05T00:08:12Z", "message": "Minor fixes for adoc file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed033951d5ec12a24ab39e525f7a9d691677d245", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ed033951d5ec12a24ab39e525f7a9d691677d245", "committedDate": "2019-11-05T00:15:22Z", "message": "Update monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e9944d6ee27dc6697ce20136ba38aeb5b60e906", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/6e9944d6ee27dc6697ce20136ba38aeb5b60e906", "committedDate": "2019-11-05T00:15:46Z", "message": "Fix references in monitoring doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0723c03ce042bb0f57ba6d6be8010b1af598c65", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c0723c03ce042bb0f57ba6d6be8010b1af598c65", "committedDate": "2019-11-05T00:18:42Z", "message": "Merge branch 'docs/design' of https://github.com/futurewei-cloud/AliothController into docs/design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a41b55283e85b9d465da904b9be0bf7f7510a76", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/9a41b55283e85b9d465da904b9be0bf7f7510a76", "committedDate": "2019-11-05T00:29:25Z", "message": "Update monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24dddf8e4ee519195b9613641ffdfd48e2e8907a", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/24dddf8e4ee519195b9613641ffdfd48e2e8907a", "committedDate": "2019-11-05T00:31:24Z", "message": "Update monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daf7f5560fa0706e89988f74cd8226f2e51c22a5", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/daf7f5560fa0706e89988f74cd8226f2e51c22a5", "committedDate": "2019-11-05T01:23:53Z", "message": "Add details based on disucssion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4bae19a9c4806d1e72f769ff401b33012c4aa34", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/f4bae19a9c4806d1e72f769ff401b33012c4aa34", "committedDate": "2019-11-05T01:25:55Z", "message": "Add a table of content"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f20d71f62700f3929a890487c7c084518406afa0", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/f20d71f62700f3929a890487c7c084518406afa0", "committedDate": "2019-11-05T06:50:08Z", "message": "Update monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7530359c97a15750cb4fa1e7858947fc9a195b2", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a7530359c97a15750cb4fa1e7858947fc9a195b2", "committedDate": "2019-11-05T07:04:49Z", "message": "Update node_monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "691d65869fd7e84c1528b998752f530c4ce2bbec", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/691d65869fd7e84c1528b998752f530c4ce2bbec", "committedDate": "2019-11-05T07:05:16Z", "message": "Update monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "310b51d6b4320737319b30cd7e96d1e281751773", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/310b51d6b4320737319b30cd7e96d1e281751773", "committedDate": "2019-11-05T18:26:50Z", "message": "Add one item for node monitoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b414287a5ffe83ac0f6cf9ee1bf9bc9bd2afc12b", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b414287a5ffe83ac0f6cf9ee1bf9bc9bd2afc12b", "committedDate": "2019-11-05T23:57:28Z", "message": "Update node_monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c8c86e628111807ff930b6c37f1e559edebfe0f", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/5c8c86e628111807ff930b6c37f1e559edebfe0f", "committedDate": "2019-11-06T18:28:45Z", "message": "Reorganize monitoring doc and update design doc metadata format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d0606e9cbae9151dfb7469822dd5c6ec79b583d", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/1d0606e9cbae9151dfb7469822dd5c6ec79b583d", "committedDate": "2019-11-08T21:39:14Z", "message": "Update rescue_path.adoc\n\nfix typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a632e484bf6456678dfcc3b6c748418e8dfaad1b", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a632e484bf6456678dfcc3b6c748418e8dfaad1b", "committedDate": "2019-11-12T20:14:15Z", "message": "Add benchmark results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd3762db077af5568e8617f59ef2a3dd1037ea97", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/fd3762db077af5568e8617f59ef2a3dd1037ea97", "committedDate": "2019-11-20T23:54:43Z", "message": "Update rescue_path.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "769f5455c972becaa2e30a64fc963ba8ff1546a0", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/769f5455c972becaa2e30a64fc963ba8ff1546a0", "committedDate": "2019-11-21T00:12:54Z", "message": "Update monitoring.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de441c39e008cea205bf1a1a2cb7953d37adc199", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/de441c39e008cea205bf1a1a2cb7953d37adc199", "committedDate": "2020-02-05T16:16:14Z", "message": "Update data model doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eebe7005176ddd004434e6aa6ea06d2a8e905de8", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/eebe7005176ddd004434e6aa6ea06d2a8e905de8", "committedDate": "2020-02-24T02:10:42Z", "message": "Merge from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cbd99aebede3473651a64ee84853ce7ba335ca3", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/4cbd99aebede3473651a64ee84853ce7ba335ca3", "committedDate": "2020-02-27T01:27:40Z", "message": "Add API workflow chart for creation of vpc, subnet and port"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46215bfe3d2d6cd78a74c906a030d32d80872c59", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/46215bfe3d2d6cd78a74c906a030d32d80872c59", "committedDate": "2020-02-27T17:04:37Z", "message": "Update Create workflow chart"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b1fbecd2ce9a70db1dc26a52a19e368047bb7c4", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/9b1fbecd2ce9a70db1dc26a52a19e368047bb7c4", "committedDate": "2020-03-02T06:26:41Z", "message": "Create dataplane_abstraction.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62ad9f4c76d8b28d8cb1863b8c48e165c7de8717", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/62ad9f4c76d8b28d8cb1863b8c48e165c7de8717", "committedDate": "2020-03-02T07:19:43Z", "message": "Update dataplane_abstraction.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e52e6c93e3c51da6ea1d37d7ae1804939009612", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/9e52e6c93e3c51da6ea1d37d7ae1804939009612", "committedDate": "2020-03-02T17:26:39Z", "message": "Update dataplane_abstraction.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b7975e7dde2edd461a6563f3bd60458b38ea5f8", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/6b7975e7dde2edd461a6563f3bd60458b38ea5f8", "committedDate": "2020-03-02T17:46:46Z", "message": "Update dataplane_abstraction.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea356aeeafdd9576716558be137dac5f3df786b9", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ea356aeeafdd9576716558be137dac5f3df786b9", "committedDate": "2020-03-02T20:18:03Z", "message": "Update dataplane_abstraction.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9c563aedaa600f04d21c3dbce0b3a7c4814cba3", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/b9c563aedaa600f04d21c3dbce0b3a7c4814cba3", "committedDate": "2020-03-02T23:16:05Z", "message": "Update dataplane_abstraction.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c071a0569c8ac30813e224a8ae5521f0b98e206", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/6c071a0569c8ac30813e224a8ae5521f0b98e206", "committedDate": "2020-03-10T00:00:32Z", "message": "Update dataplane_abstraction.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "972869504ed928c8eda1d139f7e1d680dde454fb", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/972869504ed928c8eda1d139f7e1d680dde454fb", "committedDate": "2020-03-10T00:04:48Z", "message": "Update dataplane_abstraction.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a915d5b743e134e4b17f168f5cdcf19fd509e2c3", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a915d5b743e134e4b17f168f5cdcf19fd509e2c3", "committedDate": "2020-03-12T16:54:46Z", "message": "Add workflow option 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad49c7cda0dcbb01fda95cd5123068801582814d", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ad49c7cda0dcbb01fda95cd5123068801582814d", "committedDate": "2020-03-18T22:32:04Z", "message": "Update system_flow.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c93da513f629a51a66fbe89298eba6e94d063901", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/c93da513f629a51a66fbe89298eba6e94d063901", "committedDate": "2020-03-19T01:07:34Z", "message": "added - Reference: Neutron High Level Flow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7feebf8b1c2d4ef619cd911b212df2a54fd6d9e4", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/7feebf8b1c2d4ef619cd911b212df2a54fd6d9e4", "committedDate": "2020-03-19T05:28:15Z", "message": "Update system_flow.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dc4d4b9f099ea84a4a36d162cdb28ae954cb926", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/7dc4d4b9f099ea84a4a36d162cdb28ae954cb926", "committedDate": "2020-03-19T16:57:27Z", "message": "Update creation workflow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ba64e9a77acf44cca397c9aa228e79fa5bc95b", "author": {"user": {"login": "er1cthe0ne", "name": "Eric Li"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/45ba64e9a77acf44cca397c9aa228e79fa5bc95b", "committedDate": "2020-03-19T21:28:52Z", "message": "Update system_flow.adoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68b05532a943451f2bba05a01d0d6779efce59a4", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/68b05532a943451f2bba05a01d0d6779efce59a4", "committedDate": "2020-03-24T06:53:01Z", "message": "check permission"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c0faa6270f07bfe3ef78862c74855ebe2cf7478", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/0c0faa6270f07bfe3ef78862c74855ebe2cf7478", "committedDate": "2020-03-27T04:41:03Z", "message": "api gateway draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dcd9f510511d7d73085722e295617aaa3d589fc", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/4dcd9f510511d7d73085722e295617aaa3d589fc", "committedDate": "2020-04-02T15:33:02Z", "message": "Merge branch 'master' into docs/design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec05e706e79744bbb566b05bafcc9347401e83bd", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ec05e706e79744bbb566b05bafcc9347401e83bd", "committedDate": "2020-04-03T04:52:10Z", "message": "update controller doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b53131f46cdc4a97bd433fa546fc645ac2b3784", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/7b53131f46cdc4a97bd433fa546fc645ac2b3784", "committedDate": "2020-04-04T01:24:13Z", "message": "Merge branch 'master' into docs/design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0622e24c9a2cbece6cf009cf40ff65ff3a6282a", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/f0622e24c9a2cbece6cf009cf40ff65ff3a6282a", "committedDate": "2020-04-07T17:57:56Z", "message": "Update ToC with microservice doc link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab9736e04e8169db16a0e86f356eace84c6b0ff4", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ab9736e04e8169db16a0e86f356eace84c6b0ff4", "committedDate": "2020-04-07T19:07:51Z", "message": "Update ToC and add vpc/mac manager design files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5a515446d1395cbc12d29528b686aa9274c1e83", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/f5a515446d1395cbc12d29528b686aa9274c1e83", "committedDate": "2020-04-07T20:09:48Z", "message": "Add key difference file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a102fb184aabea76c8e655ba7e55c05a09889506", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/a102fb184aabea76c8e655ba7e55c05a09889506", "committedDate": "2020-04-09T05:03:11Z", "message": "Merge branch 'master' into docs/design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac115c62d164618771668134a50988a6a6652d3a", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ac115c62d164618771668134a50988a6a6652d3a", "committedDate": "2020-04-09T21:45:31Z", "message": "Minor updates in system flow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b4a4d6005db7bd89fa86ef6a62d77ac5f713a5", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/80b4a4d6005db7bd89fa86ef6a62d77ac5f713a5", "committedDate": "2020-04-09T23:35:04Z", "message": "Add microservice snapshot table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "669c1e4e2e00c0bef3d2726775a63c3ea767e9d5", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/669c1e4e2e00c0bef3d2726775a63c3ea767e9d5", "committedDate": "2020-04-10T00:43:25Z", "message": "Add concurrency handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb72f12952643062aef40aff34ef3d52dfbf2c84", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/cb72f12952643062aef40aff34ef3d52dfbf2c84", "committedDate": "2020-04-10T04:44:32Z", "message": "Update controller design doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "516a4f2622e654de7bf1982bf73ff9023f64acce", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/516a4f2622e654de7bf1982bf73ff9023f64acce", "committedDate": "2020-04-10T04:47:07Z", "message": "update api_gateway file name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a63380c2aa198d5f265598b17605e402933c58e", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/8a63380c2aa198d5f265598b17605e402933c58e", "committedDate": "2020-04-10T04:49:38Z", "message": "update file names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b1e640c5901c3b381e020b39f6b1469fb392a1", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/22b1e640c5901c3b381e020b39f6b1469fb392a1", "committedDate": "2020-04-10T05:23:09Z", "message": "Merge mac manager design spec from eunju:feature/macmanager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdcb7c3bb580b7cb773b865b7db4ed4e38f63164", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/bdcb7c3bb580b7cb773b865b7db4ed4e38f63164", "committedDate": "2020-04-19T22:19:56Z", "message": "Merge from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83e691b73b5e2bb151aef85f4949fac5d9d31630", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/83e691b73b5e2bb151aef85f4949fac5d9d31630", "committedDate": "2020-04-20T06:36:48Z", "message": "Add API completeness doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef6a1a8445bbc7e774bd6e540cca9f80621c0063", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/ef6a1a8445bbc7e774bd6e540cca9f80621c0063", "committedDate": "2020-04-21T17:00:03Z", "message": "Updtate api_completeness table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "057c314450e772422dba875b1d0a08d4dc544d5e", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/057c314450e772422dba875b1d0a08d4dc544d5e", "committedDate": "2020-04-21T18:16:19Z", "message": "Add API count"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66743d2c7c953a21fc725a081f018c4a1053c4d3", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/66743d2c7c953a21fc725a081f018c4a1053c4d3", "committedDate": "2020-04-21T20:06:14Z", "message": "Add references for OpenStack and Alcor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb74537fa01bb6509ab1e3bb0d2c4777808175d1", "author": {"user": {"login": "xieus", "name": "Liguang Xie"}}, "url": "https://github.com/futurewei-cloud/alcor/commit/fb74537fa01bb6509ab1e3bb0d2c4777808175d1", "committedDate": "2020-04-26T00:24:26Z", "message": "Merge branch 'master' into docs/design"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2309, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}