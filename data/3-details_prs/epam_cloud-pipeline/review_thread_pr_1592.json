{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NzEyMTE2", "number": 1592, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNjo0M1rOE8xnSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOToyMzo0OVrOE-j-_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTYyODkxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/test/creator/issue/IssueCreatorUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNjo0M1rOH5GO2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNjo0M1rOH5GO2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzMjk4Ng==", "bodyText": "Let's put it somewhere else. Probably SecurityCreatorUtils is nice place to move it.", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r529632986", "createdAt": "2020-11-24T15:26:43Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/test/creator/issue/IssueCreatorUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.test.creator.issue;\n+\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.IssueCommentVO;\n+import com.epam.pipeline.controller.vo.IssueVO;\n+import com.epam.pipeline.entity.issue.Issue;\n+import com.epam.pipeline.entity.issue.IssueComment;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+\n+public final class IssueCreatorUtils {\n+\n+    private IssueCreatorUtils() {\n+\n+    }\n+\n+    public static EntityVO getEntityVO(final Long id, final AclClass aclClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc04a5a4c9a3dcda90a71cf71ec2bdcca0b89bcd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTA5MDg3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/manager/issue/IssueApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODowNDoyMFrOH5nNPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODowNDoyMFrOH5nNPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3MzI0NA==", "bodyText": "Could you please delete all the test cases in the class that is covered by the new test class?\nAdditionally check if the remaining test cases (probably only testIssueOwnerCRUD) are covered by IssueManagerTest. If not please try to migrate the remaining methods to IssueManagerTest.", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r530173244", "createdAt": "2020-11-25T08:04:20Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/manager/issue/IssueApiServiceTest.java", "diffHunk": "@@ -16,6 +16,7 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc04a5a4c9a3dcda90a71cf71ec2bdcca0b89bcd"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTEwODY5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODowOToyNlrOH5nXrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODowOToyNlrOH5nXrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NTkxOA==", "bodyText": "Let's change the filed's type and name to something more common like AbstractSecuredEntity entity. This way we declare that any entity can be used not only s3 storages.", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r530175918", "createdAt": "2020-11-25T08:09:26Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.issue;\n+\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.IssueCommentVO;\n+import com.epam.pipeline.controller.vo.IssueVO;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.issue.Issue;\n+import com.epam.pipeline.entity.issue.IssueComment;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.issue.IssueManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.issue.IssueCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class IssueApiServiceTest extends AbstractAclTest {\n+\n+    private final EntityVO entityVO = IssueCreatorUtils.getEntityVO(ID, AclClass.DATA_STORAGE);\n+    private final Issue issue = IssueCreatorUtils.getIssue(entityVO, SIMPLE_USER);\n+    private final IssueVO issueVO = IssueCreatorUtils.getIssueVO(entityVO);\n+    private final S3bucketDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc04a5a4c9a3dcda90a71cf71ec2bdcca0b89bcd"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTExMzQzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoxMDozOFrOH5naXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoxMDozOFrOH5naXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NjYwNg==", "bodyText": "Similarly let's extract the acl class to a field and refer to it as just ACL_CLASS or ENTITY_ACL_CLASS.", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r530176606", "createdAt": "2020-11-25T08:10:38Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.issue;\n+\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.IssueCommentVO;\n+import com.epam.pipeline.controller.vo.IssueVO;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.issue.Issue;\n+import com.epam.pipeline.entity.issue.IssueComment;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.issue.IssueManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.issue.IssueCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class IssueApiServiceTest extends AbstractAclTest {\n+\n+    private final EntityVO entityVO = IssueCreatorUtils.getEntityVO(ID, AclClass.DATA_STORAGE);\n+    private final Issue issue = IssueCreatorUtils.getIssue(entityVO, SIMPLE_USER);\n+    private final IssueVO issueVO = IssueCreatorUtils.getIssueVO(entityVO);\n+    private final S3bucketDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);\n+    private final List<Issue> issueList = Collections.singletonList(issue);\n+    private final IssueComment issueComment = IssueCreatorUtils.getIssueComment(SIMPLE_USER);\n+    private final IssueCommentVO issueCommentVO = IssueCreatorUtils.getIssueCommentVO();\n+\n+    @Autowired\n+    private IssueApiService issueApiService;\n+\n+    @Autowired\n+    private IssueManager mockIssueManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateIssueForAdmin() {\n+        doReturn(issue).when(mockIssueManager).createIssue(issueVO);\n+\n+        assertThat(issueApiService.createIssue(issueVO)).isEqualTo(issue);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldCreateIssueWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(issue).when(mockIssueManager).createIssue(issueVO);\n+        doReturn(s3bucket).when(mockEntityManager).load(AclClass.DATA_STORAGE, ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc04a5a4c9a3dcda90a71cf71ec2bdcca0b89bcd"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTgxMDI4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0NDo0NFrOH6TdBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0NDo0NFrOH6TdBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5ODE4MA==", "bodyText": "Please rename the field to entity as well.", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r530898180", "createdAt": "2020-11-26T09:44:44Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java", "diffHunk": "@@ -39,16 +41,19 @@\n import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.doReturn;\n \n public class IssueApiServiceTest extends AbstractAclTest {\n \n-    private final EntityVO entityVO = IssueCreatorUtils.getEntityVO(ID, AclClass.DATA_STORAGE);\n+    private static final AclClass ENTITY_ACL_CLASS = AclClass.DATA_STORAGE;\n+\n+    private final EntityVO entityVO = SecurityCreatorUtils.getEntityVO(ID, ENTITY_ACL_CLASS);\n     private final Issue issue = IssueCreatorUtils.getIssue(entityVO, SIMPLE_USER);\n     private final IssueVO issueVO = IssueCreatorUtils.getIssueVO(entityVO);\n-    private final S3bucketDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);\n+    private final AbstractSecuredEntity s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e9181efa24d5cf47bcdf5ab66982c4fc71ffd6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTgyNzYwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0OTowMlrOH6Tn8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0OTowMlrOH6Tn8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDk3Nw==", "bodyText": "Please extract the pagedResult field and add line break between mocking and asserting.", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r530900977", "createdAt": "2020-11-26T09:49:02Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java", "diffHunk": "@@ -326,4 +331,12 @@ public void shouldDenyDeleteCommentWhenPermissionIsNotGranted() {\n \n         assertThrows(AccessDeniedException.class, () -> issueApiService.deleteComment(ID, ID));\n     }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadMyPagedResultListIssue() {\n+        final PagedResult<List<Issue>> pagedResult = IssueCreatorUtils.getPagedListIssue();\n+        doReturn(pagedResult).when(mockIssueManager).loadMy(ID, TEST_INT);\n+        assertThat(issueApiService.loadMy(ID, TEST_INT)).isEqualTo(pagedResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e9181efa24d5cf47bcdf5ab66982c4fc71ffd6"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTg2MzgzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/manager/issue/IssueManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo1NzoxMlrOH6T9_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo1NzoxMlrOH6T9_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwNjYyMw==", "bodyText": "These tests basically don't check anything. It looks like the proper place for them is AttachmentFileManagerTest. But the tests should be rewritten without Spring being used. See other tests in AttachmentFileManagerTest.", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r530906623", "createdAt": "2020-11-26T09:57:12Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/manager/issue/IssueManagerTest.java", "diffHunk": "@@ -410,6 +417,22 @@ public void updateCommentWithAttachments() throws InterruptedException {\n                                                                             Mockito.anyList(), Mockito.anyBoolean());\n     }\n \n+    @Test(expected = AccessDeniedException.class)\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Throwable.class)\n+    @WithMockUser(username = TEST_USER)\n+    public void testDeleteAttachmentFail() {\n+        attachmentFileManager.deleteAttachment(testAttachment.getId());\n+    }\n+\n+    @Test\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Throwable.class)\n+    @WithMockUser(username = AUTHOR)\n+    public void testDeleteAttachment() {\n+        final AttachmentFileManager mockAttachmentFileManager = mock(AttachmentFileManager.class);\n+        mockAttachmentFileManager.deleteAttachment(testAttachment.getId());\n+        verify(mockAttachmentFileManager).deleteAttachment(testAttachment.getId());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e9181efa24d5cf47bcdf5ab66982c4fc71ffd6"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDM2NzMyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/manager/issue/AttachmentFileManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOToyMzo0OVrOH7yMzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOToyMzo0OVrOH7yMzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ1MDUwOQ==", "bodyText": "It looks like the test only checks if admin is able to delete the attachment. At the same time if we look at the original test it tests the behavior for an attachment owner. In order to be sure that we test the same functionality and even more we should cover the lost test scenario.\nLet's keep the test but add another one with attachment deletion for attachment owner.", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r532450509", "createdAt": "2020-11-30T09:23:49Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/manager/issue/AttachmentFileManagerTest.java", "diffHunk": "@@ -130,4 +134,18 @@ public void testDownloadAttachment() {\n         verify(attachmentManager).load(1L);\n         verify(dataStorageManager).getStreamingContent(testSystemDataStorage.getId(), TEST_ATTACHMENT_PATH, null);\n     }\n+\n+    @Test\n+    public void testDeleteAttachment() {\n+        doReturn(true).when(authManager).isAdmin();\n+\n+        attachmentFileManager.deleteAttachment(anyLong());\n+\n+        verify(attachmentManager).load(anyLong());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8389a01ac303e8bf31983b442afe17df42c91ed"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 352, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}