{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMjY3NjQ4", "number": 1495, "title": "Issue #1404: Implemented tests for ContextualPreferenceApiService", "bodyText": "Implemented tests for ContextualPreferenceApiService\nIssue - #1404\nSigned-off-by: Iurii_Kofanov youkofan@gmail.com", "createdAt": "2020-10-14T10:20:35Z", "url": "https://github.com/epam/cloud-pipeline/pull/1495", "merged": true, "mergeCommit": {"oid": "e617840252b54ce07f9bf2ba66b423a8ee6ef406"}, "closed": true, "closedAt": "2020-10-27T13:11:25Z", "author": {"login": "YouKofan"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdStQR_gFqTUwOTEwNjUyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWP4JEAH2gAyNTAzMjY3NjQ4OjkyMTk2YWQxYmM4N2QyOTZmYzhkOGVmMmI0MDFhZDZiMzBjNzhhOGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MTA2NTI0", "url": "https://github.com/epam/cloud-pipeline/pull/1495#pullrequestreview-509106524", "createdAt": "2020-10-15T07:49:38Z", "commit": {"oid": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo0OTozOVrOHh4X9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowODowNFrOHh5x_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI4ODY5NA==", "bodyText": "There is a helpful method in CustomAssertions utility class. Probably it is better to use such method to assert exceptions rather than using @Test(expected = AccessDeniedException.class) cause it allows us to specify only a single line that should fail.\nassertThrows(AccessDeniedException.class, () -> preferenceApiService.loadAll())", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505288694", "createdAt": "2020-10-15T07:49:39Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();\n+\n+        assertThat(resultPreferenceList.size()).isEqualTo(1);\n+        assertThat(resultPreferenceList.get(0)).isEqualTo(contextualPreference);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadingAllContextualPreferencesForNotAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        preferenceApiService.loadAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwNDM4OQ==", "bodyText": "It seems fine to just call it externalResource or even resource because we are already in the context of the contextual preference test class.", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505304389", "createdAt": "2020-10-15T08:01:51Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwODE2Ng==", "bodyText": "What about calling this loaded preferences list just loadedPreferences. Such result prefix is just a boilerplate giving no additional meaning to the reader :)", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505308166", "createdAt": "2020-10-15T08:04:39Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwOTgxMA==", "bodyText": "We expect here to be at least a simple user role here so let's add corresponding @WithMockUser annotation.", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505309810", "createdAt": "2020-10-15T08:06:05Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();\n+\n+        assertThat(resultPreferenceList.size()).isEqualTo(1);\n+        assertThat(resultPreferenceList.get(0)).isEqualTo(contextualPreference);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadingAllContextualPreferencesForNotAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        preferenceApiService.loadAll();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadContextualPreferenceForAdmin() {\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n+\n+        ContextualPreference resultPreference = preferenceApiService.load(TEST_STRING, cpeResource);\n+\n+        assertThat(resultPreference).isEqualTo(contextualPreference);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadingContextualPreferenceForNotAdmin() {\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n+\n+        preferenceApiService.load(TEST_STRING, cpeResource);\n+    }\n+\n+    @Test\n+    public void shouldSearchContextualPreference() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxMTc0Mg==", "bodyText": "In case where there is only one assert in the test method we can even inline the variable and don't think about naming it at all.", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505311742", "createdAt": "2020-10-15T08:08:04Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwODE2Ng=="}, "originalCommit": {"oid": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNjMyNDgz", "url": "https://github.com/epam/cloud-pipeline/pull/1495#pullrequestreview-511632483", "createdAt": "2020-10-19T10:43:32Z", "commit": {"oid": "0a448e04b0987a02c1eee08ea7dd8e267c3c7310"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDo0MzozMlrOHkIYBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDo0MzozMlrOHkIYBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY0ODAwNQ==", "bodyText": "As discussed with the team let's use @WithMockUser wherever possible. Even while testing methods without acl annotations at all. Specified without arguments it mocks the test with user name and role_user authority.", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r507648005", "createdAt": "2020-10-19T10:43:32Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final ContextualPreferenceExternalResource externalResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        assertThat(preferenceApiService.loadAll()).hasSize(1).contains(contextualPreference);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a448e04b0987a02c1eee08ea7dd8e267c3c7310"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNzI3NTAy", "url": "https://github.com/epam/cloud-pipeline/pull/1495#pullrequestreview-511727502", "createdAt": "2020-10-19T12:54:17Z", "commit": {"oid": "71c5ec317ffcd60fc06d813f7e89050275032cfc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NTcyMzUy", "url": "https://github.com/epam/cloud-pipeline/pull/1495#pullrequestreview-514572352", "createdAt": "2020-10-22T10:16:55Z", "commit": {"oid": "71c5ec317ffcd60fc06d813f7e89050275032cfc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "294a3c1662148ec582ab6a88284ed1703244718a", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/294a3c1662148ec582ab6a88284ed1703244718a", "committedDate": "2020-10-22T12:10:24Z", "message": "Issue #1404: Implemented tests for ContextualPreferenceApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90813079e8775671a64c552fa621b16ff8603b60", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/90813079e8775671a64c552fa621b16ff8603b60", "committedDate": "2020-10-22T12:10:40Z", "message": "Issue #1404: Tests improvements\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdd1e867ac6a15674f48a7b1d7cabd75b4ba0dba", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/fdd1e867ac6a15674f48a7b1d7cabd75b4ba0dba", "committedDate": "2020-10-22T12:10:40Z", "message": "Issue #1404: Improvement tests for ContextualApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d6bf8360916e8480ffaf5a5ce4cbd8c81282d29", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0d6bf8360916e8480ffaf5a5ce4cbd8c81282d29", "committedDate": "2020-10-22T12:10:40Z", "message": "Issue #1404: Fixes @WithMockUser arguments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33e8f3725e373f6f613a99b3ed7af414ae4ab064", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/33e8f3725e373f6f613a99b3ed7af414ae4ab064", "committedDate": "2020-10-22T12:18:16Z", "message": "Issue #1404: Minor style fixes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71c5ec317ffcd60fc06d813f7e89050275032cfc", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/71c5ec317ffcd60fc06d813f7e89050275032cfc", "committedDate": "2020-10-19T11:32:06Z", "message": "Issue #1404: Fixes @WithMockUser arguments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}, "afterCommit": {"oid": "33e8f3725e373f6f613a99b3ed7af414ae4ab064", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/33e8f3725e373f6f613a99b3ed7af414ae4ab064", "committedDate": "2020-10-22T12:18:16Z", "message": "Issue #1404: Minor style fixes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f223553fe1d9a00086ecff86299ece589948be6", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0f223553fe1d9a00086ecff86299ece589948be6", "committedDate": "2020-10-23T11:33:54Z", "message": "Issue #1404: Changes in the PMD rules\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92196ad1bc87d296fc8d8ef2b401ad6b30c78a8b", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/92196ad1bc87d296fc8d8ef2b401ad6b30c78a8b", "committedDate": "2020-10-26T08:13:28Z", "message": "Issue #1404: Fix PMD config\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3675, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}