{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNDI1NTM1", "number": 1487, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowNDozNlrOEvsunA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzozOTozOVrOExFtgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDUxMzU2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/configuration/ServerlessConfigurationControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowNDozNlrOHk0pbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowNDozNlrOHk0pbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MzM1Ng==", "bodyText": "Could you please check that POST, GET, PUT and DELETE requests can be made. For example parameterized test can be of help here.", "url": "https://github.com/epam/cloud-pipeline/pull/1487#discussion_r508373356", "createdAt": "2020-10-20T10:04:36Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/configuration/ServerlessConfigurationControllerTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.configuration;\n+\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.configuration.ServerlessConfigurationApiService;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import static org.mockito.Matchers.eq;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+\n+@WebMvcTest(controllers = ServerlessConfigurationController.class)\n+public class ServerlessConfigurationControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final String TEST_CONFIG = \"testConfig\";\n+    private static final String RESULT = \"RESULT\";\n+    private static final String SERVERLESS_URL = SERVLET_PATH + \"/serverless\";\n+    private static final String GENERATE_URL = SERVERLESS_URL + \"/url/%d\";\n+    private static final String RUN_URL = SERVERLESS_URL + \"/%d/%s\";\n+    private static final TypeReference<Result<String>> STRING_TYPE = new TypeReference<Result<String>>() { };\n+\n+    @Autowired\n+    private ServerlessConfigurationApiService mockServerlessConfigurationApiService;\n+\n+    @Test\n+    public void shouldFailGenerateUrlForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(String.format(GENERATE_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGenerateUrl() throws Exception {\n+        Mockito.doReturn(RESULT).when(mockServerlessConfigurationApiService).generateUrl(ID, TEST_CONFIG);\n+\n+        final MvcResult mvcResult = performRequest(\n+                get(String.format(GENERATE_URL, ID)).param(\"config\", TEST_CONFIG)\n+        );\n+\n+        Mockito.verify(mockServerlessConfigurationApiService).generateUrl(ID, TEST_CONFIG);\n+        assertResponse(mvcResult, RESULT, STRING_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailRunForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(String.format(RUN_URL, ID, TEST_CONFIG)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRun() throws Exception {\n+        Mockito.doReturn(RESULT).when(mockServerlessConfigurationApiService)\n+                .run(eq(ID), eq(TEST_CONFIG), Mockito.any());\n+\n+        performRequest(get(String.format(RUN_URL, ID, TEST_CONFIG)));\n+\n+        Mockito.verify(mockServerlessConfigurationApiService).run(eq(ID), eq(TEST_CONFIG), Mockito.any());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f383ab199d4f2c72eed074c8098fd503b94503"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDUzNzg5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/configuration/ConfigurationControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDoxMDo0NlrOHk047Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDoxMDo0NlrOHk047Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NzMyNQ==", "bodyText": "You have to create an additional instance of run configuration. Otherwise the test class will fail once tests execution order is different which is possible since junit 4 doesn't have any guarantees on tests execution order.", "url": "https://github.com/epam/cloud-pipeline/pull/1487#discussion_r508377325", "createdAt": "2020-10-20T10:10:46Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/configuration/ConfigurationControllerTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.configuration;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.manager.configuration.RunConfigurationApiService;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+@WebMvcTest(controllers = ConfigurationController.class)\n+public class ConfigurationControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final String CONFIGURATION_URL = SERVLET_PATH + \"/configuration\";\n+    private static final String CONFIGURATION_BY_ID_URL = CONFIGURATION_URL + \"/%d\";\n+    private static final String ALL_CONFIGURATIONS_URL = CONFIGURATION_URL + \"/loadAll\";\n+    private JsonMapper mapper;\n+    private final RunConfiguration runConfiguration = ConfigurationCreatorUtils.getRunConfiguration();\n+    private final RunConfigurationVO runConfigurationVO = ConfigurationCreatorUtils.getRunConfigurationVO();\n+\n+    @Autowired\n+    private RunConfigurationApiService mockRunConfigurationApiService;\n+\n+    @Before\n+    public void setUp() {\n+        mapper = getObjectMapper();\n+        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n+    }\n+\n+    @Test\n+    public void shouldFailSaveConfigurationForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(post(CONFIGURATION_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldSaveConfiguration() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(runConfigurationVO);\n+        Mockito.doReturn(runConfiguration).when(mockRunConfigurationApiService).save(Mockito.refEq(runConfigurationVO));\n+\n+        final MvcResult mvcResult = performRequest(post(CONFIGURATION_URL).content(content));\n+\n+        Mockito.verify(mockRunConfigurationApiService).save(Mockito.refEq(runConfigurationVO));\n+        assertResponse(mvcResult, mapper, runConfiguration, ConfigurationCreatorUtils.RUN_CONFIGURATION_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateConfiguration() throws Exception {\n+        runConfigurationVO.setId(ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f383ab199d4f2c72eed074c8098fd503b94503"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDY5ODM4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/configuration/ConfigurationControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo1MjoxNFrOHk2bQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo1MjoxNFrOHk2bQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwMjQ5OA==", "bodyText": "Unfortunately this doesn't work as you would expect. Basically getObjectMapper() doesn't return a new instance on each call.\nTo do this properly we have to use two instances of object mappers. Default one which is used for serialization / deserialization in spring cannot be used as is in tests. It can be used for serialization but not for deserealization. Therefore let's use two object mappers in the abstract class. Something like the following can be of help.\nfinal ObjectMapper serializationObjectMapper = currentObjectMapper;\nfinal ObjectMapper deserializationObjectMapper = JsonMapper.newInstance();\ndeserializationObjectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n...\nfinal Result<T> actualResult = JsonMapper.parseData(actual, typeReference, deserializationObjectMapper);", "url": "https://github.com/epam/cloud-pipeline/pull/1487#discussion_r508402498", "createdAt": "2020-10-20T10:52:14Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/configuration/ConfigurationControllerTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.configuration;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.manager.configuration.RunConfigurationApiService;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+@WebMvcTest(controllers = ConfigurationController.class)\n+public class ConfigurationControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final String CONFIGURATION_URL = SERVLET_PATH + \"/configuration\";\n+    private static final String CONFIGURATION_BY_ID_URL = CONFIGURATION_URL + \"/%d\";\n+    private static final String ALL_CONFIGURATIONS_URL = CONFIGURATION_URL + \"/loadAll\";\n+    private JsonMapper mapper;\n+    private final RunConfiguration runConfiguration = ConfigurationCreatorUtils.getRunConfiguration();\n+    private final RunConfigurationVO runConfigurationVO = ConfigurationCreatorUtils.getRunConfigurationVO();\n+\n+    @Autowired\n+    private RunConfigurationApiService mockRunConfigurationApiService;\n+\n+    @Before\n+    public void setUp() {\n+        mapper = getObjectMapper();\n+        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f383ab199d4f2c72eed074c8098fd503b94503"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTA4Njg3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzozNzo1N1rOHnCNHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzozNzo1N1rOHnCNHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5MjYzNg==", "bodyText": "Let's move it to a class field.", "url": "https://github.com/epam/cloud-pipeline/pull/1487#discussion_r510692636", "createdAt": "2020-10-23T07:37:57Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java", "diffHunk": "@@ -81,13 +83,16 @@ protected final JsonMapper getObjectMapper() {\n                                    final JsonMapper objectMapper,\n                                    final T payload,\n                                    final TypeReference<Result<T>> typeReference) throws Exception {\n+        final ObjectMapper deserializationMapper = JsonMapper.newInstance();\n+        deserializationMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de73fd1887b676c66491a37840169fa7d6351de8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTA5MjUxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzozOTozOVrOHnCQag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzozOTozOVrOHnCQag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5MzQ4Mg==", "bodyText": "Please use either Assert.assertSomething or just assertSomething syntax, not both. It is pretty hard to read if the code is not consistent.", "url": "https://github.com/epam/cloud-pipeline/pull/1487#discussion_r510693482", "createdAt": "2020-10-23T07:39:39Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java", "diffHunk": "@@ -81,13 +83,16 @@ protected final JsonMapper getObjectMapper() {\n                                    final JsonMapper objectMapper,\n                                    final T payload,\n                                    final TypeReference<Result<T>> typeReference) throws Exception {\n+        final ObjectMapper deserializationMapper = JsonMapper.newInstance();\n+        deserializationMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n         final ResponseResult<T> expectedResult = buildExpectedResult(payload);\n \n         final String actual = mvcResult.getResponse().getContentAsString();\n         Assert.assertTrue(StringUtils.isNotBlank(actual));\n         assertThat(actual).isEqualToIgnoringWhitespace(objectMapper.writeValueAsString(expectedResult));\n \n-        final Result<T> actualResult = JsonMapper.parseData(actual, typeReference);\n+        final Result<T> actualResult = JsonMapper.parseData(actual, typeReference, deserializationMapper);\n+        assertNotNull(actualResult);\n         Assert.assertEquals(expectedResult.getPayload(), actualResult.getPayload());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de73fd1887b676c66491a37840169fa7d6351de8"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 279, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}