{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNzY4MDEw", "number": 1629, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo0MzoyMVrOFAsF-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo0MzoyMVrOFAsF-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjY2NzQ0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/user/RoleApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo0MzoyMVrOH_GewA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo0MzoyMVrOH_GewA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyODUxMg==", "bodyText": "Please use Role rather than Roles in the test name since the test checks the method returning only a single queue.", "url": "https://github.com/epam/cloud-pipeline/pull/1629#discussion_r535928512", "createdAt": "2020-12-04T08:43:21Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/user/RoleApiServiceTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.user;\n+\n+import com.epam.pipeline.controller.vo.user.RoleVO;\n+import com.epam.pipeline.entity.user.ExtendedRole;\n+import com.epam.pipeline.entity.user.Role;\n+import com.epam.pipeline.manager.user.RoleManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.user.UserCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class RoleApiServiceTest extends AbstractAclTest {\n+\n+    private final Role role = UserCreatorUtils.getRole();\n+    private final RoleVO roleVO = UserCreatorUtils.getRoleVO();\n+    private final ExtendedRole extendedRole = UserCreatorUtils.getExtendedRole();\n+    private final List<Role> roleList = Collections.singletonList(role);\n+\n+    @Autowired\n+    private RoleApiService roleApiService;\n+\n+    @Autowired\n+    private RoleManager mockRoleManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadRolesWithUsersForAdmin() {\n+        doReturn(roleList).when(mockRoleManager).loadAllRoles(true);\n+\n+        assertThat(roleApiService.loadRolesWithUsers()).isEqualTo(roleList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = USER_READER_ROLE)\n+    public void shouldLoadRolesWithUsersForUserReader() {\n+        doReturn(roleList).when(mockRoleManager).loadAllRoles(true);\n+\n+        assertThat(roleApiService.loadRolesWithUsers()).isEqualTo(roleList);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadRolesWithUsersForNotUserReader() {\n+        doReturn(roleList).when(mockRoleManager).loadAllRoles(true);\n+\n+        assertThrows(AccessDeniedException.class, () -> roleApiService.loadRolesWithUsers());\n+    }\n+\n+    @Test\n+    public void shouldLoadRoles() {\n+        doReturn(roleList).when(mockRoleManager).loadAllRoles(false);\n+\n+        assertThat(roleApiService.loadRoles()).isEqualTo(roleList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadRolesForAdmin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "432398eb457ef51091e2d05838d4a58cb7e56d87"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 200, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}