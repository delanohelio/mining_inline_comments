{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NDgzMTk3", "number": 1025, "title": "Issue 1013 allow to restrict non supported docker images", "bodyText": "This PR related to #1013\nIt brings new setting security.tools.os to be able to configure which OS could be run.\nValid examples of this setting is:\n\"\" - empty, all OS are accepted\n\"centos\" - name of distro -> all distros of centos are accepted\n\"centos:6\" - name of distro + version prefix -> all centos with version 6.x are accepted\n\"centos:6,ubuntu:14,ubuntu:18.04\" - comma separated list of distros\nThe main idea of PR:\nNew OSVersionAnalyzer implemented - it searches for files like os-release system-release redhat-release centos-release and parses this files. It creates new dependency with ecosystem OS  and information about image OS.\nAPI-server stores this information as ToolOSVersion object as part of ToolVersionScanResult\nNow API method GET /tool/scan returns new information for each ToolVersionScanResult object:\n\"toolOSVersion\" : {\n \"distribution\" : \"<Name of OS distro, e.g. centos>\",\n \"version\" : \"<Version of OS distro, e.g. 6.10>\",\n \"isAllowed\": <boolean, can tool be run accordingly current state of  security.tools.os >\n}", "createdAt": "2020-03-31T17:29:19Z", "url": "https://github.com/epam/cloud-pipeline/pull/1025", "merged": true, "mergeCommit": {"oid": "bd3d9dcd57650117c261db53d02628ef32ac2feb"}, "closed": true, "closedAt": "2020-04-02T13:57:23Z", "author": {"login": "SilinPavel"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSvCnjgH2gAyMzk2NDgzMTk3OjkzNmVjMDYwZmQ3Y2I1NjE1NDRiYTE5NjY3NTRhMTU0ODlhNGI1Mjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTsuU4AFqTM4NjQ1MTYzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "936ec060fd7cb561544ba1966754a15489a4b527", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/936ec060fd7cb561544ba1966754a15489a4b527", "committedDate": "2020-03-30T14:05:07Z", "message": "(issue #1013) docker comp scan add analizer to be able to get OS version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2f999e0a063110fda3b1263d2a34135b6a4c2bc", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/a2f999e0a063110fda3b1263d2a34135b6a4c2bc", "committedDate": "2020-03-30T14:24:51Z", "message": "(issue #1013) tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0da70706f0d57befd178b5d84e6b9951fc7ebe63", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0da70706f0d57befd178b5d84e6b9951fc7ebe63", "committedDate": "2020-03-31T13:39:00Z", "message": "(issue #1013) introduce ToolOSVersion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b17ba6d5a4084ab1f51af95bb74579fc43d79e", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/d7b17ba6d5a4084ab1f51af95bb74579fc43d79e", "committedDate": "2020-03-31T14:16:05Z", "message": "(issue #1013) tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "275059754b1269b5b4e10a6c4409d6abeffd47f9", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/275059754b1269b5b4e10a6c4409d6abeffd47f9", "committedDate": "2020-03-31T15:21:10Z", "message": "(issue #1013) change regexp for system-release file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55a08c9ba7e7cf2ecad429c1a51edfd45592a724", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/55a08c9ba7e7cf2ecad429c1a51edfd45592a724", "committedDate": "2020-03-31T17:00:45Z", "message": "(issue #1013) logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b417382f7ec16f6a121cef20dc2e6c1e77f54ec4", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/b417382f7ec16f6a121cef20dc2e6c1e77f54ec4", "committedDate": "2020-03-31T17:24:52Z", "message": "(issue #1013) default value for system pref"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd15e4e0547449d043aa59e996f12de155955fff", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/cd15e4e0547449d043aa59e996f12de155955fff", "committedDate": "2020-03-31T17:43:44Z", "message": "(issue #1013) cleanup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09685d3aa66291203c9a34b1275630685f606ea9", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/09685d3aa66291203c9a34b1275630685f606ea9", "committedDate": "2020-03-31T17:33:23Z", "message": "(issue #1013) cleanup"}, "afterCommit": {"oid": "cd15e4e0547449d043aa59e996f12de155955fff", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/cd15e4e0547449d043aa59e996f12de155955fff", "committedDate": "2020-03-31T17:43:44Z", "message": "(issue #1013) cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0532d223425ff169bd8e2948ab49b1e92148018", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/e0532d223425ff169bd8e2948ab49b1e92148018", "committedDate": "2020-04-01T09:41:43Z", "message": "(issue #1013) check that tool os version start with allowed os version, not contain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1b7f642f3e26af876277c9f701968a68a7b2ee1", "author": {"user": {"login": "rodichenko", "name": "Mikhail Rodichenko"}}, "url": "https://github.com/epam/cloud-pipeline/commit/c1b7f642f3e26af876277c9f701968a68a7b2ee1", "committedDate": "2020-04-01T12:41:03Z", "message": "Allow to restrict \"non-supported\" docker images (#1013) - GUI part implemented"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODAyMjcw", "url": "https://github.com/epam/cloud-pipeline/pull/1025#pullrequestreview-385802270", "createdAt": "2020-04-01T17:32:49Z", "commit": {"oid": "c1b7f642f3e26af876277c9f701968a68a7b2ee1"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzozMjo0OVrOF_LRAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0NjozOFrOF_LxYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4OTE4NA==", "bodyText": "Maybe use Optional here?", "url": "https://github.com/epam/cloud-pipeline/pull/1025#discussion_r401789184", "createdAt": "2020-04-01T17:32:49Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/dao/tool/ToolVulnerabilityDao.java", "diffHunk": "@@ -260,6 +263,10 @@ private static MapSqlParameterSource getParams(long toolId, String version, Stri\n             params.addValue(ToolVersionColumns.SUCCESS_SCAN_DATE.name(),\n                             newStatus == ToolScanStatus.COMPLETED ? scanDate : null);\n             params.addValue(ToolVersionColumns.WHITE_LIST.name(), whiteList);\n+            params.addValue(ToolVersionColumns.OS_NAME.name(),\n+                    toolOSVersion != null ? toolOSVersion.getDistribution() : null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b7f642f3e26af876277c9f701968a68a7b2ee1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5MDIwNg==", "bodyText": "You can use log formatting:\nLOGGER.debug(\"Tool: {} version: {} \", tool.getId(), version) ...", "url": "https://github.com/epam/cloud-pipeline/pull/1025#discussion_r401790206", "createdAt": "2020-04-01T17:34:25Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/docker/scan/AggregatingToolScanManager.java", "diffHunk": "@@ -235,6 +237,16 @@ public boolean checkTool(Tool tool, String tag) {\n                     maxMediumVulnerabilities < severityCounters.getOrDefault(VulnerabilitySeverity.Medium, 0)) {\n                 return false;\n             }\n+\n+            LOGGER.debug(\"Tool: \" + tool.getId() + \" version: \" + tag +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b7f642f3e26af876277c9f701968a68a7b2ee1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5MjA1Nw==", "bodyText": "I see a lot of changes where null is added as argument to method updateToolVersionScanStatus. Maybe we should introduce overloaded method without osVersion argument  to reduce number of changes to the code?", "url": "https://github.com/epam/cloud-pipeline/pull/1025#discussion_r401792057", "createdAt": "2020-04-01T17:37:22Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/docker/DockerRegistryManager.java", "diffHunk": "@@ -490,7 +490,7 @@ private DockerRegistry loadByIdOrName(DockerRegistry registry) {\n                     toolGroup.getName()));\n             toolManager.updateToolVersionScanStatus(toolInGroup.get().getId(),\n                     ToolScanStatus.NOT_SCANNED, DateUtils.now(), event.getTarget().getTag(),\n-                    null, event.getTarget().getDigest());\n+                    null, null, event.getTarget().getDigest());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b7f642f3e26af876277c9f701968a68a7b2ee1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5Mjk0MA==", "bodyText": "Please, don't miss final", "url": "https://github.com/epam/cloud-pipeline/pull/1025#discussion_r401792940", "createdAt": "2020-04-01T17:38:50Z", "author": {"login": "mzueva"}, "path": "docker-comp-scan/src/main/java/com/epam/dockercompscan/owasp/analyzer/OSVersionAnalyzer.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.dockercompscan.owasp.analyzer;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.filefilter.NameFileFilter;\n+import org.owasp.dependencycheck.Engine;\n+import org.owasp.dependencycheck.analyzer.AbstractFileTypeAnalyzer;\n+import org.owasp.dependencycheck.analyzer.AnalysisPhase;\n+import org.owasp.dependencycheck.analyzer.Experimental;\n+import org.owasp.dependencycheck.analyzer.exception.AnalysisException;\n+import org.owasp.dependencycheck.dependency.Confidence;\n+import org.owasp.dependencycheck.dependency.Dependency;\n+import org.owasp.dependencycheck.dependency.EvidenceType;\n+import org.owasp.dependencycheck.exception.InitializationException;\n+import org.owasp.dependencycheck.utils.FileFilterBuilder;\n+\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Experimental\n+public class OSVersionAnalyzer extends AbstractFileTypeAnalyzer {\n+\n+    public static final String DEPENDENCY_ECOSYSTEM = \"OS\";\n+\n+    public static final String ANALYZER_OS_ENABLED = AnalyzeEnabler.ANALYZER_OS_PACKAGE.getValue();\n+\n+    /**\n+     * The name of the analyzer.\n+     */\n+    private static final String ANALYZER_NAME = \"OS Version Analyzer\";\n+\n+    /**\n+     * The phase that this analyzer is intended to run in.\n+     */\n+    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.INFORMATION_COLLECTION;\n+\n+    /**\n+     * Names of OS version files to analyze.\n+     */\n+    private static final String OS_RELEASE = \"os-release\";\n+    private static final String REDHAT_RELEASE = \"redhat-release\";\n+    private static final String SYSTEM_RELEASE = \"system-release\";\n+    private static final String CENTOS_RELEASE = \"centos-release\";\n+\n+    /**\n+     * Filter that detects files named \"os-release\".\n+     */\n+    private static final NameFileFilter NAME_FILE_FILTER = new NameFileFilter(\n+            new String[]{OS_RELEASE, REDHAT_RELEASE, SYSTEM_RELEASE, CENTOS_RELEASE});\n+\n+    /**\n+     * The file filter used to determine which files this analyzer supports.\n+     */\n+    private static final FileFilter FILTER = FileFilterBuilder.newInstance().addFileFilters(NAME_FILE_FILTER).build();\n+\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\".*\\nVERSION_ID=\\\"?([^\\n\\\"]*)\\\"?\\n.*\");\n+    private static final Pattern NAME_TITLE_PATTERN = Pattern.compile(\".*\\nID=\\\"?([^\\n\\\"]*)\\\"?\\n.*\");\n+    private static final Pattern SYSTEM_NAME_TITLE_PATTERN = Pattern.compile(\"([^ ]+).*\");\n+    private static final Pattern SYSTEM_VERSION_PATTERN = Pattern.compile(\"([\\\\d\\\\.\\\\-_]+)\");\n+\n+    @Override\n+    protected FileFilter getFileFilter() {\n+        return FILTER;\n+    }\n+\n+    @Override\n+    protected void prepareFileTypeAnalyzer(final Engine engine) throws InitializationException {\n+    }\n+\n+    @Override\n+    protected String getAnalyzerEnabledSettingKey() {\n+        return ANALYZER_OS_ENABLED;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return ANALYZER_NAME;\n+    }\n+\n+    @Override\n+    public AnalysisPhase getAnalysisPhase() {\n+        return ANALYSIS_PHASE;\n+    }\n+\n+    @Override\n+    protected void analyzeDependency(final Dependency dependency, final Engine engine) throws AnalysisException {\n+        final File actualFile = dependency.getActualFile();\n+        try {\n+            String contents = FileUtils.readFileToString(actualFile, Charset.defaultCharset()).trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b7f642f3e26af876277c9f701968a68a7b2ee1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5MzcxNA==", "bodyText": "Please check and exit first:\nif (StringUtils.isEmpty(contents)) {\n    return;\n}", "url": "https://github.com/epam/cloud-pipeline/pull/1025#discussion_r401793714", "createdAt": "2020-04-01T17:40:11Z", "author": {"login": "mzueva"}, "path": "docker-comp-scan/src/main/java/com/epam/dockercompscan/owasp/analyzer/OSVersionAnalyzer.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.dockercompscan.owasp.analyzer;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.filefilter.NameFileFilter;\n+import org.owasp.dependencycheck.Engine;\n+import org.owasp.dependencycheck.analyzer.AbstractFileTypeAnalyzer;\n+import org.owasp.dependencycheck.analyzer.AnalysisPhase;\n+import org.owasp.dependencycheck.analyzer.Experimental;\n+import org.owasp.dependencycheck.analyzer.exception.AnalysisException;\n+import org.owasp.dependencycheck.dependency.Confidence;\n+import org.owasp.dependencycheck.dependency.Dependency;\n+import org.owasp.dependencycheck.dependency.EvidenceType;\n+import org.owasp.dependencycheck.exception.InitializationException;\n+import org.owasp.dependencycheck.utils.FileFilterBuilder;\n+\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Experimental\n+public class OSVersionAnalyzer extends AbstractFileTypeAnalyzer {\n+\n+    public static final String DEPENDENCY_ECOSYSTEM = \"OS\";\n+\n+    public static final String ANALYZER_OS_ENABLED = AnalyzeEnabler.ANALYZER_OS_PACKAGE.getValue();\n+\n+    /**\n+     * The name of the analyzer.\n+     */\n+    private static final String ANALYZER_NAME = \"OS Version Analyzer\";\n+\n+    /**\n+     * The phase that this analyzer is intended to run in.\n+     */\n+    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.INFORMATION_COLLECTION;\n+\n+    /**\n+     * Names of OS version files to analyze.\n+     */\n+    private static final String OS_RELEASE = \"os-release\";\n+    private static final String REDHAT_RELEASE = \"redhat-release\";\n+    private static final String SYSTEM_RELEASE = \"system-release\";\n+    private static final String CENTOS_RELEASE = \"centos-release\";\n+\n+    /**\n+     * Filter that detects files named \"os-release\".\n+     */\n+    private static final NameFileFilter NAME_FILE_FILTER = new NameFileFilter(\n+            new String[]{OS_RELEASE, REDHAT_RELEASE, SYSTEM_RELEASE, CENTOS_RELEASE});\n+\n+    /**\n+     * The file filter used to determine which files this analyzer supports.\n+     */\n+    private static final FileFilter FILTER = FileFilterBuilder.newInstance().addFileFilters(NAME_FILE_FILTER).build();\n+\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\".*\\nVERSION_ID=\\\"?([^\\n\\\"]*)\\\"?\\n.*\");\n+    private static final Pattern NAME_TITLE_PATTERN = Pattern.compile(\".*\\nID=\\\"?([^\\n\\\"]*)\\\"?\\n.*\");\n+    private static final Pattern SYSTEM_NAME_TITLE_PATTERN = Pattern.compile(\"([^ ]+).*\");\n+    private static final Pattern SYSTEM_VERSION_PATTERN = Pattern.compile(\"([\\\\d\\\\.\\\\-_]+)\");\n+\n+    @Override\n+    protected FileFilter getFileFilter() {\n+        return FILTER;\n+    }\n+\n+    @Override\n+    protected void prepareFileTypeAnalyzer(final Engine engine) throws InitializationException {\n+    }\n+\n+    @Override\n+    protected String getAnalyzerEnabledSettingKey() {\n+        return ANALYZER_OS_ENABLED;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return ANALYZER_NAME;\n+    }\n+\n+    @Override\n+    public AnalysisPhase getAnalysisPhase() {\n+        return ANALYSIS_PHASE;\n+    }\n+\n+    @Override\n+    protected void analyzeDependency(final Dependency dependency, final Engine engine) throws AnalysisException {\n+        final File actualFile = dependency.getActualFile();\n+        try {\n+            String contents = FileUtils.readFileToString(actualFile, Charset.defaultCharset()).trim();\n+            collectDescriptionData(dependency, actualFile.getName(), contents);\n+        } catch (IOException e) {\n+            throw new AnalysisException(\"Problem occurred while reading dependency file.\", e);\n+        }\n+    }\n+\n+    private void collectDescriptionData(final Dependency dependency, final String source, final String contents) {\n+        if (!contents.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b7f642f3e26af876277c9f701968a68a7b2ee1"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NDExNA==", "bodyText": "No new line at the end of file", "url": "https://github.com/epam/cloud-pipeline/pull/1025#discussion_r401794114", "createdAt": "2020-04-01T17:40:53Z", "author": {"login": "mzueva"}, "path": "docker-comp-scan/src/main/resources/META-INF/services/org.owasp.dependencycheck.analyzer.Analyzer", "diffHunk": "@@ -30,4 +30,5 @@ org.owasp.dependencycheck.analyzer.ComposerLockAnalyzer\n org.owasp.dependencycheck.analyzer.CocoaPodsAnalyzer\n org.owasp.dependencycheck.analyzer.SwiftPackageManagerAnalyzer\n org.owasp.dependencycheck.analyzer.VersionFilterAnalyzer\n-com.epam.dockercompscan.owasp.analyzer.RPackageAnalyzer\n\\ No newline at end of file\n+com.epam.dockercompscan.owasp.analyzer.RPackageAnalyzer\n+com.epam.dockercompscan.owasp.analyzer.OSVersionAnalyzer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b7f642f3e26af876277c9f701968a68a7b2ee1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NTAzMQ==", "bodyText": "I think it is not the best idea to have field isAllowed in this class, as it is not stored in DB and actually is mutated and set in runtime.", "url": "https://github.com/epam/cloud-pipeline/pull/1025#discussion_r401795031", "createdAt": "2020-04-01T17:42:29Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/entity/scan/ToolOSVersion.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.entity.scan;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+\n+@Data\n+@RequiredArgsConstructor\n+@AllArgsConstructor\n+public class ToolOSVersion {\n+    private final String distribution;\n+    private final String version;\n+    private Boolean isAllowed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b7f642f3e26af876277c9f701968a68a7b2ee1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NzQ3NQ==", "bodyText": "I think we can get SystemPreference value and check os version at this point and remove isAllowed field from object itself.", "url": "https://github.com/epam/cloud-pipeline/pull/1025#discussion_r401797475", "createdAt": "2020-04-01T17:46:38Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/docker/scan/AggregatingToolScanManager.java", "diffHunk": "@@ -235,6 +237,16 @@ public boolean checkTool(Tool tool, String tag) {\n                     maxMediumVulnerabilities < severityCounters.getOrDefault(VulnerabilitySeverity.Medium, 0)) {\n                 return false;\n             }\n+\n+            LOGGER.debug(\"Tool: \" + tool.getId() + \" version: \" + tag +\n+                    \"Check tool os version.\");\n+            if (toolVersionScanResult.getToolOSVersion() != null\n+                    && !toolVersionScanResult.getToolOSVersion().getIsAllowed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b7f642f3e26af876277c9f701968a68a7b2ee1"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6cf4c9e7e48f7d4716146374841d1301af1f0a0", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/d6cf4c9e7e48f7d4716146374841d1301af1f0a0", "committedDate": "2020-04-02T10:15:18Z", "message": "(issue #1013) clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1515d92b2fd17f405a6ddfc95d96076e35549cb9", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/1515d92b2fd17f405a6ddfc95d96076e35549cb9", "committedDate": "2020-04-02T12:09:20Z", "message": "(issue #1013) introduce View objects for Tool scan related objects"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDEzNzI4", "url": "https://github.com/epam/cloud-pipeline/pull/1025#pullrequestreview-386413728", "createdAt": "2020-04-02T13:16:19Z", "commit": {"oid": "1515d92b2fd17f405a6ddfc95d96076e35549cb9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzoxNjoxOVrOF_qqjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzoxNjoxOVrOF_qqjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMwMzYzMA==", "bodyText": "Please, remove star import", "url": "https://github.com/epam/cloud-pipeline/pull/1025#discussion_r402303630", "createdAt": "2020-04-02T13:16:19Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/pipeline/ToolApiService.java", "diffHunk": "@@ -21,9 +21,7 @@\n import com.epam.pipeline.entity.docker.ToolDescription;\n import com.epam.pipeline.entity.docker.ToolVersion;\n import com.epam.pipeline.entity.pipeline.Tool;\n-import com.epam.pipeline.entity.scan.ToolScanPolicy;\n-import com.epam.pipeline.entity.scan.ToolScanResult;\n-import com.epam.pipeline.entity.scan.ToolVersionScanResult;\n+import com.epam.pipeline.entity.scan.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1515d92b2fd17f405a6ddfc95d96076e35549cb9"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47689efb8771a4dfc4f103b198e88773514eccdc", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/47689efb8771a4dfc4f103b198e88773514eccdc", "committedDate": "2020-04-02T13:21:16Z", "message": "(issue #1013) imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDUxNjMw", "url": "https://github.com/epam/cloud-pipeline/pull/1025#pullrequestreview-386451630", "createdAt": "2020-04-02T13:57:04Z", "commit": {"oid": "47689efb8771a4dfc4f103b198e88773514eccdc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3818, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}