{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDkyOTk3", "number": 981, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyODoyN1rODlYx6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1Njo0NFrODnHJtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTI5ODk5OnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyODoyN1rOFyP_8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoyMToxM1rOFyes4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTI1MA==", "bodyText": "This method maybe simplefied:\n`Optional.ofNullable(aggregations).map ...", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388235250", "createdAt": "2020-03-05T11:28:27Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "diffHunk": "@@ -138,7 +133,11 @@ public AwsStorageToBillingRequestConverter(final AbstractEntityMapper<StorageBil\n     }\n \n     private Optional<Long> extractStorageSize(final SearchResponse response) {\n-        final ParsedSum sumAggResult = response.getAggregations().get(STORAGE_SIZE_AGG_NAME);\n+        final Aggregations aggregations = response.getAggregations();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NjEyOA==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388476128", "createdAt": "2020-03-05T18:21:13Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "diffHunk": "@@ -138,7 +133,11 @@ public AwsStorageToBillingRequestConverter(final AbstractEntityMapper<StorageBil\n     }\n \n     private Optional<Long> extractStorageSize(final SearchResponse response) {\n-        final ParsedSum sumAggResult = response.getAggregations().get(STORAGE_SIZE_AGG_NAME);\n+        final Aggregations aggregations = response.getAggregations();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTI1MA=="}, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTMwMTU0OnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyOToxNFrOFyQBcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoyMToxN1rOFyetEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTYzMw==", "bodyText": "Let's move totalMatches check to the start of the method", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388235633", "createdAt": "2020-03-05T11:29:14Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "diffHunk": "@@ -138,7 +133,11 @@ public AwsStorageToBillingRequestConverter(final AbstractEntityMapper<StorageBil\n     }\n \n     private Optional<Long> extractStorageSize(final SearchResponse response) {\n-        final ParsedSum sumAggResult = response.getAggregations().get(STORAGE_SIZE_AGG_NAME);\n+        final Aggregations aggregations = response.getAggregations();\n+        if (aggregations == null) {\n+            return Optional.empty();\n+        }\n+        final ParsedSum sumAggResult = aggregations.get(STORAGE_SIZE_AGG_NAME);\n         final long storageSize = new Double(sumAggResult.getValue()).longValue();\n         final long totalMatches = response.getHits().getTotalHits();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NjE3Nw==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388476177", "createdAt": "2020-03-05T18:21:17Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "diffHunk": "@@ -138,7 +133,11 @@ public AwsStorageToBillingRequestConverter(final AbstractEntityMapper<StorageBil\n     }\n \n     private Optional<Long> extractStorageSize(final SearchResponse response) {\n-        final ParsedSum sumAggResult = response.getAggregations().get(STORAGE_SIZE_AGG_NAME);\n+        final Aggregations aggregations = response.getAggregations();\n+        if (aggregations == null) {\n+            return Optional.empty();\n+        }\n+        final ParsedSum sumAggResult = aggregations.get(STORAGE_SIZE_AGG_NAME);\n         final long storageSize = new Double(sumAggResult.getValue()).longValue();\n         final long totalMatches = response.getHits().getTotalHits();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTYzMw=="}, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTMwMzk1OnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyOTo1NVrOFyQCzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoyMToyNFrOFyetSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTk4Mw==", "bodyText": "Please, remove this suppression", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388235983", "createdAt": "2020-03-05T11:29:55Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "diffHunk": "@@ -44,39 +47,28 @@\n import java.time.YearMonth;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n \n @Slf4j\n @SuppressWarnings(\"checkstyle:MagicNumber\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NjIzNA==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388476234", "createdAt": "2020-03-05T18:21:24Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "diffHunk": "@@ -44,39 +47,28 @@\n import java.time.YearMonth;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n \n @Slf4j\n @SuppressWarnings(\"checkstyle:MagicNumber\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTk4Mw=="}, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTMxMDg3OnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTozMjowNFrOFyQG6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoyMzowOFrOFyewrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNzAzNA==", "bodyText": "I think it is better to put index pattern into application.properties.\nWhy do we need * in index pattern? As fas as I remember all indices have aliases cp-$type-file-$id.", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388237034", "createdAt": "2020-03-05T11:32:04Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "diffHunk": "@@ -44,39 +47,28 @@\n import java.time.YearMonth;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n \n @Slf4j\n @SuppressWarnings(\"checkstyle:MagicNumber\")\n-public class AwsStorageToBillingRequestConverter implements EntityToBillingRequestConverter<AbstractDataStorage> {\n+public class StorageToBillingRequestConverter implements EntityToBillingRequestConverter<AbstractDataStorage> {\n \n-    public static final int BYTES_TO_GB = 1 << 30;\n-    public static final int PRECISION = 5;\n     private static final String STORAGE_SIZE_AGG_NAME = \"sizeSumSearch\";\n     private static final String SIZE_FIELD = \"size\";\n     private static final String REGION_FIELD = \"storage_region\";\n-    private static final String ES_FILE_INDEX_PATTERN = \"cp-%s-file-%d\";\n+    private static final String ES_FILE_INDEX_PATTERN = \"*cp-%s-file-%d\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NzEwMg==", "bodyText": "Extracted pattern to properties.\nIndices contain a randomly generated string of 5 chars at the beginning.", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388477102", "createdAt": "2020-03-05T18:23:08Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "diffHunk": "@@ -44,39 +47,28 @@\n import java.time.YearMonth;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n \n @Slf4j\n @SuppressWarnings(\"checkstyle:MagicNumber\")\n-public class AwsStorageToBillingRequestConverter implements EntityToBillingRequestConverter<AbstractDataStorage> {\n+public class StorageToBillingRequestConverter implements EntityToBillingRequestConverter<AbstractDataStorage> {\n \n-    public static final int BYTES_TO_GB = 1 << 30;\n-    public static final int PRECISION = 5;\n     private static final String STORAGE_SIZE_AGG_NAME = \"sizeSumSearch\";\n     private static final String SIZE_FIELD = \"size\";\n     private static final String REGION_FIELD = \"storage_region\";\n-    private static final String ES_FILE_INDEX_PATTERN = \"cp-%s-file-%d\";\n+    private static final String ES_FILE_INDEX_PATTERN = \"*cp-%s-file-%d\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNzAzNA=="}, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTM0OTI0OnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePricingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo0NToyM1rOFyQeMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjo1NjoyM1rOFy3yRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0Mjk5NA==", "bodyText": "I'd suggest to parse prices into Object model instead of dealing with JsonNodes", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388242994", "createdAt": "2020-03-05T11:45:23Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePricingService.java", "diffHunk": "@@ -32,43 +33,25 @@\n import java.math.BigDecimal;\n import java.math.MathContext;\n import java.util.ArrayList;\n-import java.util.Comparator;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n \n @Slf4j\n-public class AwsStorageServicePricing {\n+public class AwsStoragePricingService extends AbstractStoragePricingService {\n \n-    private static final int CENTS_IN_DOLLAR = 100;\n-\n-    private final Map<Regions, StoragePricing> storagePriceListGb = new HashMap<>();\n-\n-    /**\n-     * Storage service name (either \"AmazonS3\" or \"AmazonEFS\")\n-     */\n-    private final String awsStorageServiceName;\n-\n-    /**\n-     * The highest price all over available regions\n-     */\n-    private BigDecimal defaultPriceGb;\n-\n-    public AwsStorageServicePricing(final String awsStorageServiceName) {\n-        this.awsStorageServiceName = awsStorageServiceName;\n-        updatePrices();\n+    public AwsStoragePricingService(final String awsStorageServiceName) {\n+        super(awsStorageServiceName);\n     }\n \n-    public AwsStorageServicePricing(final String awsStorageServiceName,\n-                                    final Map<Regions, StoragePricing> initialPriceList) {\n-        this.awsStorageServiceName = awsStorageServiceName;\n-        this.storagePriceListGb.putAll(initialPriceList);\n-        this.defaultPriceGb = calculateDefaultPriceGb();\n+    public AwsStoragePricingService(final String awsStorageServiceName,\n+                                    final Map<String, StoragePricing> initialPriceList) {\n+        super(awsStorageServiceName, initialPriceList);\n     }\n \n-    public void updatePrices() {\n-        loadFullPriceList(awsStorageServiceName).forEach(price -> {\n+    @Override\n+    public void loadFullPriceList() {\n+        loadPricesInJson(getStorageServiceGroup()).forEach(price -> {\n             try {\n                 final JsonNode regionInfo = new ObjectMapper().readTree(price);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4NzEwOA==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388887108", "createdAt": "2020-03-06T12:56:23Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePricingService.java", "diffHunk": "@@ -32,43 +33,25 @@\n import java.math.BigDecimal;\n import java.math.MathContext;\n import java.util.ArrayList;\n-import java.util.Comparator;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n \n @Slf4j\n-public class AwsStorageServicePricing {\n+public class AwsStoragePricingService extends AbstractStoragePricingService {\n \n-    private static final int CENTS_IN_DOLLAR = 100;\n-\n-    private final Map<Regions, StoragePricing> storagePriceListGb = new HashMap<>();\n-\n-    /**\n-     * Storage service name (either \"AmazonS3\" or \"AmazonEFS\")\n-     */\n-    private final String awsStorageServiceName;\n-\n-    /**\n-     * The highest price all over available regions\n-     */\n-    private BigDecimal defaultPriceGb;\n-\n-    public AwsStorageServicePricing(final String awsStorageServiceName) {\n-        this.awsStorageServiceName = awsStorageServiceName;\n-        updatePrices();\n+    public AwsStoragePricingService(final String awsStorageServiceName) {\n+        super(awsStorageServiceName);\n     }\n \n-    public AwsStorageServicePricing(final String awsStorageServiceName,\n-                                    final Map<Regions, StoragePricing> initialPriceList) {\n-        this.awsStorageServiceName = awsStorageServiceName;\n-        this.storagePriceListGb.putAll(initialPriceList);\n-        this.defaultPriceGb = calculateDefaultPriceGb();\n+    public AwsStoragePricingService(final String awsStorageServiceName,\n+                                    final Map<String, StoragePricing> initialPriceList) {\n+        super(awsStorageServiceName, initialPriceList);\n     }\n \n-    public void updatePrices() {\n-        loadFullPriceList(awsStorageServiceName).forEach(price -> {\n+    @Override\n+    public void loadFullPriceList() {\n+        loadPricesInJson(getStorageServiceGroup()).forEach(price -> {\n             try {\n                 final JsonNode regionInfo = new ObjectMapper().readTree(price);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0Mjk5NA=="}, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTM1ODgwOnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo0ODo0MFrOFyQj4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoyMzo0OVrOFyeyDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NDQ1MQ==", "bodyText": "Currently this abstract class contains lot's of implemented methods and two abstract methods. Can we make AbstractStoragePricingService just StoragePricingService and extract all abstract methods into a separate interface with implementations for different providers? I think it will make code more readable.", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388244451", "createdAt": "2020-03-05T11:48:40Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.math.BigDecimal;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Slf4j\n+@SuppressWarnings(\"checkstyle:magicNumber\")\n+public abstract class AbstractStoragePricingService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NzQ1NQ==", "bodyText": "Done, introduced StoragePriceListLoader interface", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388477455", "createdAt": "2020-03-05T18:23:49Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.math.BigDecimal;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Slf4j\n+@SuppressWarnings(\"checkstyle:magicNumber\")\n+public abstract class AbstractStoragePricingService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NDQ1MQ=="}, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTM2OTgwOnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePricingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo1MjozMVrOFyQqlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoyMzo1N1rOFyeyXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NjE2Nw==", "bodyText": "Please, use some more specific exception class", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388246167", "createdAt": "2020-03-05T11:52:31Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePricingService.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.cloudbilling.Cloudbilling;\n+import com.google.api.services.cloudbilling.model.ListServicesResponse;\n+import com.google.api.services.cloudbilling.model.ListSkusResponse;\n+import com.google.api.services.cloudbilling.model.Service;\n+import com.google.api.services.cloudbilling.model.Sku;\n+import com.google.api.services.cloudbilling.model.TierRate;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.security.GeneralSecurityException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class GcpStoragePricingService extends AbstractStoragePricingService {\n+\n+    private static final String GCP_STORAGE_SERVICES_FAMILY = \"Cloud Storage\";\n+    private static final List<String> SUPPORTED_STORAGE = Arrays.asList(\"RegionalStorage\", \"MultiRegionalStorage\");\n+\n+    public GcpStoragePricingService() {\n+        super(GCP_STORAGE_SERVICES_FAMILY);\n+    }\n+\n+    @Override\n+    public void loadFullPriceList() throws IOException, GeneralSecurityException {\n+        final String accessToken = GoogleCredential.getApplicationDefault().getAccessToken();\n+        final Cloudbilling cloudbilling = new Cloudbilling(GoogleNetHttpTransport.newTrustedTransport(),\n+                                                           JacksonFactory.getDefaultInstance(),\n+                                                           null);\n+        final ListServicesResponse services = cloudbilling.services().list().setAccessToken(accessToken).execute();\n+        final Service cloudStorageService = services.getServices().stream()\n+            .filter(service -> service.getDisplayName().equals(getStorageServiceGroup()))\n+            .findAny()\n+            .orElseThrow(() -> new RuntimeException(\"No services received from GCP!\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NzUzMg==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388477532", "createdAt": "2020-03-05T18:23:57Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePricingService.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.cloudbilling.Cloudbilling;\n+import com.google.api.services.cloudbilling.model.ListServicesResponse;\n+import com.google.api.services.cloudbilling.model.ListSkusResponse;\n+import com.google.api.services.cloudbilling.model.Service;\n+import com.google.api.services.cloudbilling.model.Sku;\n+import com.google.api.services.cloudbilling.model.TierRate;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.security.GeneralSecurityException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class GcpStoragePricingService extends AbstractStoragePricingService {\n+\n+    private static final String GCP_STORAGE_SERVICES_FAMILY = \"Cloud Storage\";\n+    private static final List<String> SUPPORTED_STORAGE = Arrays.asList(\"RegionalStorage\", \"MultiRegionalStorage\");\n+\n+    public GcpStoragePricingService() {\n+        super(GCP_STORAGE_SERVICES_FAMILY);\n+    }\n+\n+    @Override\n+    public void loadFullPriceList() throws IOException, GeneralSecurityException {\n+        final String accessToken = GoogleCredential.getApplicationDefault().getAccessToken();\n+        final Cloudbilling cloudbilling = new Cloudbilling(GoogleNetHttpTransport.newTrustedTransport(),\n+                                                           JacksonFactory.getDefaultInstance(),\n+                                                           null);\n+        final ListServicesResponse services = cloudbilling.services().list().setAccessToken(accessToken).execute();\n+        final Service cloudStorageService = services.getServices().stream()\n+            .filter(service -> service.getDisplayName().equals(getStorageServiceGroup()))\n+            .findAny()\n+            .orElseThrow(() -> new RuntimeException(\"No services received from GCP!\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NjE2Nw=="}, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTM3MzQ4OnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo1Mzo1MFrOFyQs0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoyNDoyOVrOFyezag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NjczNw==", "bodyText": "I think it is better to actually return something from this method since it is called only form updatePrices method where you can assign prices to some inner field.", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388246737", "createdAt": "2020-03-05T11:53:50Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.math.BigDecimal;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Slf4j\n+@SuppressWarnings(\"checkstyle:magicNumber\")\n+public abstract class AbstractStoragePricingService {\n+\n+    public static final int CENTS_IN_DOLLAR = 100;\n+    public static final int BYTES_TO_GB = 1 << 30;\n+    public static final int PRECISION = 5;\n+\n+    private final Map<String, StoragePricing> storagePriceListGb = new HashMap<>();\n+    private BigDecimal defaultPriceGb;\n+    private final String storageServiceGroup;\n+\n+    public AbstractStoragePricingService(final String storageServiceGroup) {\n+        this.storageServiceGroup = storageServiceGroup;\n+        updatePrices();\n+    }\n+\n+    protected abstract void loadFullPriceList() throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NzgwMg==", "bodyText": "Done, returning Map with pricing for regions from now", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388477802", "createdAt": "2020-03-05T18:24:29Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.math.BigDecimal;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Slf4j\n+@SuppressWarnings(\"checkstyle:magicNumber\")\n+public abstract class AbstractStoragePricingService {\n+\n+    public static final int CENTS_IN_DOLLAR = 100;\n+    public static final int BYTES_TO_GB = 1 << 30;\n+    public static final int PRECISION = 5;\n+\n+    private final Map<String, StoragePricing> storagePriceListGb = new HashMap<>();\n+    private BigDecimal defaultPriceGb;\n+    private final String storageServiceGroup;\n+\n+    public AbstractStoragePricingService(final String storageServiceGroup) {\n+        this.storageServiceGroup = storageServiceGroup;\n+        updatePrices();\n+    }\n+\n+    protected abstract void loadFullPriceList() throws Exception;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NjczNw=="}, "originalCommit": {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzM1Mzg0OnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/model/pricing/AwsPriceDimensions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1MDozNVrOF06cCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo0Njo1NVrOF1XhFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyNzcyMw==", "bodyText": "Do we really need this annotation if name of the property matches json field name?", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391027723", "createdAt": "2020-03-11T14:50:35Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/model/pricing/AwsPriceDimensions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.model.pricing;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+\n+import java.util.Map;\n+\n+@Data\n+public class AwsPriceDimensions {\n+\n+    @JsonProperty(value = \"priceDimensions\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDE0OA==", "bodyText": "Removed for all matching fields", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391504148", "createdAt": "2020-03-12T09:46:55Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/model/pricing/AwsPriceDimensions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.model.pricing;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+\n+import java.util.Map;\n+\n+@Data\n+public class AwsPriceDimensions {\n+\n+    @JsonProperty(value = \"priceDimensions\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyNzcyMw=="}, "originalCommit": {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzM2MTc0OnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1MjoxN1rOF06g-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo0NzowNFrOF1XhZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyODk4NA==", "bodyText": "To prevent some common errors, we can set property FailOnUnknownProperties to false for this mapper. In this case parsing won't fail if some new fields will be added to AWS model.", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391028984", "createdAt": "2020-03-11T14:52:17Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.pricing.AWSPricing;\n+import com.amazonaws.services.pricing.AWSPricingClientBuilder;\n+import com.amazonaws.services.pricing.model.Filter;\n+import com.amazonaws.services.pricing.model.GetProductsRequest;\n+import com.amazonaws.services.pricing.model.GetProductsResult;\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n+\n+    private static final String AWS_PRICE_FORMAT_VERSION = \"aws_v1\";\n+    private static final String LOCATION_KEY = \"location\";\n+    private static final String TERM_MATCH_FILTER = \"TERM_MATCH\";\n+    private static final String PRODUCT_FAMILY_KEY = \"productFamily\";\n+    private static final String STORAGE = \"Storage\";\n+    private static final String STORAGE_CLASS_KEY = \"storageClass\";\n+    private static final String GENERAL_STORAGE = \"General Purpose\";\n+    private static final String US_DOLLAR_CODE = \"USD\";\n+\n+    private final String awsStorageServiceName;\n+    private final ObjectMapper mapper;\n+\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n+        this.mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDIyOQ==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391504229", "createdAt": "2020-03-12T09:47:04Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.pricing.AWSPricing;\n+import com.amazonaws.services.pricing.AWSPricingClientBuilder;\n+import com.amazonaws.services.pricing.model.Filter;\n+import com.amazonaws.services.pricing.model.GetProductsRequest;\n+import com.amazonaws.services.pricing.model.GetProductsResult;\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n+\n+    private static final String AWS_PRICE_FORMAT_VERSION = \"aws_v1\";\n+    private static final String LOCATION_KEY = \"location\";\n+    private static final String TERM_MATCH_FILTER = \"TERM_MATCH\";\n+    private static final String PRODUCT_FAMILY_KEY = \"productFamily\";\n+    private static final String STORAGE = \"Storage\";\n+    private static final String STORAGE_CLASS_KEY = \"storageClass\";\n+    private static final String GENERAL_STORAGE = \"General Purpose\";\n+    private static final String US_DOLLAR_CODE = \"USD\";\n+\n+    private final String awsStorageServiceName;\n+    private final ObjectMapper mapper;\n+\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n+        this.mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyODk4NA=="}, "originalCommit": {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzM2NjU4OnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1MzoyMlrOF06kLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo0NzoxMFrOF1XhmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyOTgwNA==", "bodyText": "Can't we replace foreach with map?", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391029804", "createdAt": "2020-03-11T14:53:22Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.pricing.AWSPricing;\n+import com.amazonaws.services.pricing.AWSPricingClientBuilder;\n+import com.amazonaws.services.pricing.model.Filter;\n+import com.amazonaws.services.pricing.model.GetProductsRequest;\n+import com.amazonaws.services.pricing.model.GetProductsResult;\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n+\n+    private static final String AWS_PRICE_FORMAT_VERSION = \"aws_v1\";\n+    private static final String LOCATION_KEY = \"location\";\n+    private static final String TERM_MATCH_FILTER = \"TERM_MATCH\";\n+    private static final String PRODUCT_FAMILY_KEY = \"productFamily\";\n+    private static final String STORAGE = \"Storage\";\n+    private static final String STORAGE_CLASS_KEY = \"storageClass\";\n+    private static final String GENERAL_STORAGE = \"General Purpose\";\n+    private static final String US_DOLLAR_CODE = \"USD\";\n+\n+    private final String awsStorageServiceName;\n+    private final ObjectMapper mapper;\n+\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n+        this.mapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Map<String, StoragePricing> loadFullPriceList() {\n+        final Map<String, StoragePricing> fullPriceList = new HashMap<>();\n+        loadAwsPricingCards(awsStorageServiceName).forEach(price -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDI4MA==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391504280", "createdAt": "2020-03-12T09:47:10Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.pricing.AWSPricing;\n+import com.amazonaws.services.pricing.AWSPricingClientBuilder;\n+import com.amazonaws.services.pricing.model.Filter;\n+import com.amazonaws.services.pricing.model.GetProductsRequest;\n+import com.amazonaws.services.pricing.model.GetProductsResult;\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n+\n+    private static final String AWS_PRICE_FORMAT_VERSION = \"aws_v1\";\n+    private static final String LOCATION_KEY = \"location\";\n+    private static final String TERM_MATCH_FILTER = \"TERM_MATCH\";\n+    private static final String PRODUCT_FAMILY_KEY = \"productFamily\";\n+    private static final String STORAGE = \"Storage\";\n+    private static final String STORAGE_CLASS_KEY = \"storageClass\";\n+    private static final String GENERAL_STORAGE = \"General Purpose\";\n+    private static final String US_DOLLAR_CODE = \"USD\";\n+\n+    private final String awsStorageServiceName;\n+    private final ObjectMapper mapper;\n+\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n+        this.mapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Map<String, StoragePricing> loadFullPriceList() {\n+        final Map<String, StoragePricing> fullPriceList = new HashMap<>();\n+        loadAwsPricingCards(awsStorageServiceName).forEach(price -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyOTgwNA=="}, "originalCommit": {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzM3MDE2OnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1NDowNlrOF06mgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo0NzoxNFrOF1XhwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMDQwMw==", "bodyText": "I think, we can init awsPricingService  once before cycle", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391030403", "createdAt": "2020-03-11T14:54:06Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.pricing.AWSPricing;\n+import com.amazonaws.services.pricing.AWSPricingClientBuilder;\n+import com.amazonaws.services.pricing.model.Filter;\n+import com.amazonaws.services.pricing.model.GetProductsRequest;\n+import com.amazonaws.services.pricing.model.GetProductsResult;\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n+\n+    private static final String AWS_PRICE_FORMAT_VERSION = \"aws_v1\";\n+    private static final String LOCATION_KEY = \"location\";\n+    private static final String TERM_MATCH_FILTER = \"TERM_MATCH\";\n+    private static final String PRODUCT_FAMILY_KEY = \"productFamily\";\n+    private static final String STORAGE = \"Storage\";\n+    private static final String STORAGE_CLASS_KEY = \"storageClass\";\n+    private static final String GENERAL_STORAGE = \"General Purpose\";\n+    private static final String US_DOLLAR_CODE = \"USD\";\n+\n+    private final String awsStorageServiceName;\n+    private final ObjectMapper mapper;\n+\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n+        this.mapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Map<String, StoragePricing> loadFullPriceList() {\n+        final Map<String, StoragePricing> fullPriceList = new HashMap<>();\n+        loadAwsPricingCards(awsStorageServiceName).forEach(price -> {\n+            final String regionName = price.getProduct().getAttributes().get(LOCATION_KEY);\n+            getRegionFromFullLocation(regionName)\n+                .ifPresent(region -> fullPriceList.put(region.getName(),\n+                                                       convertAwsPricing(price.getTerms().getOnDemand())));\n+        });\n+        return fullPriceList;\n+    }\n+\n+    @Override\n+    public CloudProvider getProvider() {\n+        return CloudProvider.AWS;\n+    }\n+\n+    private StoragePricing convertAwsPricing(final Map<String, AwsPriceDimensions> allPrices) {\n+        final StoragePricing pricing = new StoragePricing();\n+        final List<AwsPriceRate> rates = CollectionUtils.emptyIfNull(allPrices.values()).stream()\n+            .map(AwsPriceDimensions::getPriceDimensions)\n+            .map(Map::values)\n+            .flatMap(Collection::stream)\n+            .collect(Collectors.toList());\n+        rates.forEach(rate -> {\n+            final BigDecimal priceGb = new BigDecimal(rate.getPricePerUnit().get(US_DOLLAR_CODE),\n+                                                      new MathContext(PRECISION))\n+                .multiply(BigDecimal.valueOf(CENTS_IN_DOLLAR));\n+            final Long beginRange = rate.getBeginRange() * BYTES_TO_GB;\n+            final Long endRange = rate.getEndRange().equals(Long.MAX_VALUE)\n+                                  ? Long.MAX_VALUE\n+                                  : rate.getEndRange() * BYTES_TO_GB;\n+            final StoragePricing.StoragePricingEntity pricingEntity =\n+                new StoragePricing.StoragePricingEntity(beginRange, endRange, priceGb);\n+            pricing.addPrice(pricingEntity);\n+        });\n+        return pricing;\n+    }\n+\n+    private List<AwsPricingCard> loadAwsPricingCards(final String awsStorageServiceName) {\n+        final List<AwsPricingCard> allPrices = new ArrayList<>();\n+        final Filter filter = new Filter();\n+        filter.setType(TERM_MATCH_FILTER);\n+        filter.setField(PRODUCT_FAMILY_KEY);\n+        filter.setValue(STORAGE);\n+        filter.setField(STORAGE_CLASS_KEY);\n+        filter.setValue(GENERAL_STORAGE);\n+\n+        String nextToken = StringUtils.EMPTY;\n+        do {\n+            final GetProductsRequest request = new GetProductsRequest()\n+                .withServiceCode(awsStorageServiceName)\n+                .withFilters(filter)\n+                .withNextToken(nextToken)\n+                .withFormatVersion(AWS_PRICE_FORMAT_VERSION);\n+\n+            final AWSPricing awsPricingService = AWSPricingClientBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDMyMA==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391504320", "createdAt": "2020-03-12T09:47:14Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.pricing.AWSPricing;\n+import com.amazonaws.services.pricing.AWSPricingClientBuilder;\n+import com.amazonaws.services.pricing.model.Filter;\n+import com.amazonaws.services.pricing.model.GetProductsRequest;\n+import com.amazonaws.services.pricing.model.GetProductsResult;\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n+\n+    private static final String AWS_PRICE_FORMAT_VERSION = \"aws_v1\";\n+    private static final String LOCATION_KEY = \"location\";\n+    private static final String TERM_MATCH_FILTER = \"TERM_MATCH\";\n+    private static final String PRODUCT_FAMILY_KEY = \"productFamily\";\n+    private static final String STORAGE = \"Storage\";\n+    private static final String STORAGE_CLASS_KEY = \"storageClass\";\n+    private static final String GENERAL_STORAGE = \"General Purpose\";\n+    private static final String US_DOLLAR_CODE = \"USD\";\n+\n+    private final String awsStorageServiceName;\n+    private final ObjectMapper mapper;\n+\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n+        this.mapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Map<String, StoragePricing> loadFullPriceList() {\n+        final Map<String, StoragePricing> fullPriceList = new HashMap<>();\n+        loadAwsPricingCards(awsStorageServiceName).forEach(price -> {\n+            final String regionName = price.getProduct().getAttributes().get(LOCATION_KEY);\n+            getRegionFromFullLocation(regionName)\n+                .ifPresent(region -> fullPriceList.put(region.getName(),\n+                                                       convertAwsPricing(price.getTerms().getOnDemand())));\n+        });\n+        return fullPriceList;\n+    }\n+\n+    @Override\n+    public CloudProvider getProvider() {\n+        return CloudProvider.AWS;\n+    }\n+\n+    private StoragePricing convertAwsPricing(final Map<String, AwsPriceDimensions> allPrices) {\n+        final StoragePricing pricing = new StoragePricing();\n+        final List<AwsPriceRate> rates = CollectionUtils.emptyIfNull(allPrices.values()).stream()\n+            .map(AwsPriceDimensions::getPriceDimensions)\n+            .map(Map::values)\n+            .flatMap(Collection::stream)\n+            .collect(Collectors.toList());\n+        rates.forEach(rate -> {\n+            final BigDecimal priceGb = new BigDecimal(rate.getPricePerUnit().get(US_DOLLAR_CODE),\n+                                                      new MathContext(PRECISION))\n+                .multiply(BigDecimal.valueOf(CENTS_IN_DOLLAR));\n+            final Long beginRange = rate.getBeginRange() * BYTES_TO_GB;\n+            final Long endRange = rate.getEndRange().equals(Long.MAX_VALUE)\n+                                  ? Long.MAX_VALUE\n+                                  : rate.getEndRange() * BYTES_TO_GB;\n+            final StoragePricing.StoragePricingEntity pricingEntity =\n+                new StoragePricing.StoragePricingEntity(beginRange, endRange, priceGb);\n+            pricing.addPrice(pricingEntity);\n+        });\n+        return pricing;\n+    }\n+\n+    private List<AwsPricingCard> loadAwsPricingCards(final String awsStorageServiceName) {\n+        final List<AwsPricingCard> allPrices = new ArrayList<>();\n+        final Filter filter = new Filter();\n+        filter.setType(TERM_MATCH_FILTER);\n+        filter.setField(PRODUCT_FAMILY_KEY);\n+        filter.setValue(STORAGE);\n+        filter.setField(STORAGE_CLASS_KEY);\n+        filter.setValue(GENERAL_STORAGE);\n+\n+        String nextToken = StringUtils.EMPTY;\n+        do {\n+            final GetProductsRequest request = new GetProductsRequest()\n+                .withServiceCode(awsStorageServiceName)\n+                .withFilters(filter)\n+                .withNextToken(nextToken)\n+                .withFormatVersion(AWS_PRICE_FORMAT_VERSION);\n+\n+            final AWSPricing awsPricingService = AWSPricingClientBuilder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMDQwMw=="}, "originalCommit": {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzM3NDgyOnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1NTowOVrOF06phw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo0NzoxN1rOF1Xh6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMTE3NQ==", "bodyText": "We can replace cycle with stream().filter().findAny()", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391031175", "createdAt": "2020-03-11T14:55:09Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.pricing.AWSPricing;\n+import com.amazonaws.services.pricing.AWSPricingClientBuilder;\n+import com.amazonaws.services.pricing.model.Filter;\n+import com.amazonaws.services.pricing.model.GetProductsRequest;\n+import com.amazonaws.services.pricing.model.GetProductsResult;\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n+\n+    private static final String AWS_PRICE_FORMAT_VERSION = \"aws_v1\";\n+    private static final String LOCATION_KEY = \"location\";\n+    private static final String TERM_MATCH_FILTER = \"TERM_MATCH\";\n+    private static final String PRODUCT_FAMILY_KEY = \"productFamily\";\n+    private static final String STORAGE = \"Storage\";\n+    private static final String STORAGE_CLASS_KEY = \"storageClass\";\n+    private static final String GENERAL_STORAGE = \"General Purpose\";\n+    private static final String US_DOLLAR_CODE = \"USD\";\n+\n+    private final String awsStorageServiceName;\n+    private final ObjectMapper mapper;\n+\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n+        this.mapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Map<String, StoragePricing> loadFullPriceList() {\n+        final Map<String, StoragePricing> fullPriceList = new HashMap<>();\n+        loadAwsPricingCards(awsStorageServiceName).forEach(price -> {\n+            final String regionName = price.getProduct().getAttributes().get(LOCATION_KEY);\n+            getRegionFromFullLocation(regionName)\n+                .ifPresent(region -> fullPriceList.put(region.getName(),\n+                                                       convertAwsPricing(price.getTerms().getOnDemand())));\n+        });\n+        return fullPriceList;\n+    }\n+\n+    @Override\n+    public CloudProvider getProvider() {\n+        return CloudProvider.AWS;\n+    }\n+\n+    private StoragePricing convertAwsPricing(final Map<String, AwsPriceDimensions> allPrices) {\n+        final StoragePricing pricing = new StoragePricing();\n+        final List<AwsPriceRate> rates = CollectionUtils.emptyIfNull(allPrices.values()).stream()\n+            .map(AwsPriceDimensions::getPriceDimensions)\n+            .map(Map::values)\n+            .flatMap(Collection::stream)\n+            .collect(Collectors.toList());\n+        rates.forEach(rate -> {\n+            final BigDecimal priceGb = new BigDecimal(rate.getPricePerUnit().get(US_DOLLAR_CODE),\n+                                                      new MathContext(PRECISION))\n+                .multiply(BigDecimal.valueOf(CENTS_IN_DOLLAR));\n+            final Long beginRange = rate.getBeginRange() * BYTES_TO_GB;\n+            final Long endRange = rate.getEndRange().equals(Long.MAX_VALUE)\n+                                  ? Long.MAX_VALUE\n+                                  : rate.getEndRange() * BYTES_TO_GB;\n+            final StoragePricing.StoragePricingEntity pricingEntity =\n+                new StoragePricing.StoragePricingEntity(beginRange, endRange, priceGb);\n+            pricing.addPrice(pricingEntity);\n+        });\n+        return pricing;\n+    }\n+\n+    private List<AwsPricingCard> loadAwsPricingCards(final String awsStorageServiceName) {\n+        final List<AwsPricingCard> allPrices = new ArrayList<>();\n+        final Filter filter = new Filter();\n+        filter.setType(TERM_MATCH_FILTER);\n+        filter.setField(PRODUCT_FAMILY_KEY);\n+        filter.setValue(STORAGE);\n+        filter.setField(STORAGE_CLASS_KEY);\n+        filter.setValue(GENERAL_STORAGE);\n+\n+        String nextToken = StringUtils.EMPTY;\n+        do {\n+            final GetProductsRequest request = new GetProductsRequest()\n+                .withServiceCode(awsStorageServiceName)\n+                .withFilters(filter)\n+                .withNextToken(nextToken)\n+                .withFormatVersion(AWS_PRICE_FORMAT_VERSION);\n+\n+            final AWSPricing awsPricingService = AWSPricingClientBuilder\n+                .standard()\n+                .withRegion(Regions.US_EAST_1)\n+                .build();\n+\n+            final GetProductsResult result = awsPricingService.getProducts(request);\n+            result.getPriceList().stream()\n+                .map(this::parseAwsPricingCard)\n+                .forEach(allPrices::add);\n+            nextToken = result.getNextToken();\n+        } while (nextToken != null);\n+        return allPrices;\n+    }\n+\n+    private AwsPricingCard parseAwsPricingCard(final String jsonStr) {\n+        try {\n+            return mapper.readValue(jsonStr, AwsPricingCard.class);\n+        } catch (IOException e) {\n+            throw new IllegalStateException(\"Error during AWS general pricing info parsing!\");\n+        }\n+    }\n+\n+    private Optional<Regions> getRegionFromFullLocation(final String location) {\n+        for (Regions region : Regions.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDM2Mg==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391504362", "createdAt": "2020-03-12T09:47:17Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.pricing.AWSPricing;\n+import com.amazonaws.services.pricing.AWSPricingClientBuilder;\n+import com.amazonaws.services.pricing.model.Filter;\n+import com.amazonaws.services.pricing.model.GetProductsRequest;\n+import com.amazonaws.services.pricing.model.GetProductsResult;\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n+\n+    private static final String AWS_PRICE_FORMAT_VERSION = \"aws_v1\";\n+    private static final String LOCATION_KEY = \"location\";\n+    private static final String TERM_MATCH_FILTER = \"TERM_MATCH\";\n+    private static final String PRODUCT_FAMILY_KEY = \"productFamily\";\n+    private static final String STORAGE = \"Storage\";\n+    private static final String STORAGE_CLASS_KEY = \"storageClass\";\n+    private static final String GENERAL_STORAGE = \"General Purpose\";\n+    private static final String US_DOLLAR_CODE = \"USD\";\n+\n+    private final String awsStorageServiceName;\n+    private final ObjectMapper mapper;\n+\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n+        this.mapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Map<String, StoragePricing> loadFullPriceList() {\n+        final Map<String, StoragePricing> fullPriceList = new HashMap<>();\n+        loadAwsPricingCards(awsStorageServiceName).forEach(price -> {\n+            final String regionName = price.getProduct().getAttributes().get(LOCATION_KEY);\n+            getRegionFromFullLocation(regionName)\n+                .ifPresent(region -> fullPriceList.put(region.getName(),\n+                                                       convertAwsPricing(price.getTerms().getOnDemand())));\n+        });\n+        return fullPriceList;\n+    }\n+\n+    @Override\n+    public CloudProvider getProvider() {\n+        return CloudProvider.AWS;\n+    }\n+\n+    private StoragePricing convertAwsPricing(final Map<String, AwsPriceDimensions> allPrices) {\n+        final StoragePricing pricing = new StoragePricing();\n+        final List<AwsPriceRate> rates = CollectionUtils.emptyIfNull(allPrices.values()).stream()\n+            .map(AwsPriceDimensions::getPriceDimensions)\n+            .map(Map::values)\n+            .flatMap(Collection::stream)\n+            .collect(Collectors.toList());\n+        rates.forEach(rate -> {\n+            final BigDecimal priceGb = new BigDecimal(rate.getPricePerUnit().get(US_DOLLAR_CODE),\n+                                                      new MathContext(PRECISION))\n+                .multiply(BigDecimal.valueOf(CENTS_IN_DOLLAR));\n+            final Long beginRange = rate.getBeginRange() * BYTES_TO_GB;\n+            final Long endRange = rate.getEndRange().equals(Long.MAX_VALUE)\n+                                  ? Long.MAX_VALUE\n+                                  : rate.getEndRange() * BYTES_TO_GB;\n+            final StoragePricing.StoragePricingEntity pricingEntity =\n+                new StoragePricing.StoragePricingEntity(beginRange, endRange, priceGb);\n+            pricing.addPrice(pricingEntity);\n+        });\n+        return pricing;\n+    }\n+\n+    private List<AwsPricingCard> loadAwsPricingCards(final String awsStorageServiceName) {\n+        final List<AwsPricingCard> allPrices = new ArrayList<>();\n+        final Filter filter = new Filter();\n+        filter.setType(TERM_MATCH_FILTER);\n+        filter.setField(PRODUCT_FAMILY_KEY);\n+        filter.setValue(STORAGE);\n+        filter.setField(STORAGE_CLASS_KEY);\n+        filter.setValue(GENERAL_STORAGE);\n+\n+        String nextToken = StringUtils.EMPTY;\n+        do {\n+            final GetProductsRequest request = new GetProductsRequest()\n+                .withServiceCode(awsStorageServiceName)\n+                .withFilters(filter)\n+                .withNextToken(nextToken)\n+                .withFormatVersion(AWS_PRICE_FORMAT_VERSION);\n+\n+            final AWSPricing awsPricingService = AWSPricingClientBuilder\n+                .standard()\n+                .withRegion(Regions.US_EAST_1)\n+                .build();\n+\n+            final GetProductsResult result = awsPricingService.getProducts(request);\n+            result.getPriceList().stream()\n+                .map(this::parseAwsPricingCard)\n+                .forEach(allPrices::add);\n+            nextToken = result.getNextToken();\n+        } while (nextToken != null);\n+        return allPrices;\n+    }\n+\n+    private AwsPricingCard parseAwsPricingCard(final String jsonStr) {\n+        try {\n+            return mapper.readValue(jsonStr, AwsPricingCard.class);\n+        } catch (IOException e) {\n+            throw new IllegalStateException(\"Error during AWS general pricing info parsing!\");\n+        }\n+    }\n+\n+    private Optional<Regions> getRegionFromFullLocation(final String location) {\n+        for (Regions region : Regions.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMTE3NQ=="}, "originalCommit": {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzM4MjMwOnYy", "diffSide": "RIGHT", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePriceListLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1Njo0NFrOF06uPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo0NzoyNFrOF1XiLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMjM4Mg==", "bodyText": "Again, let's prefer map to foreach", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391032382", "createdAt": "2020-03-11T14:56:44Z", "author": {"login": "mzueva"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.cloudbilling.Cloudbilling;\n+import com.google.api.services.cloudbilling.model.ListServicesResponse;\n+import com.google.api.services.cloudbilling.model.ListSkusResponse;\n+import com.google.api.services.cloudbilling.model.Service;\n+import com.google.api.services.cloudbilling.model.Sku;\n+import com.google.api.services.cloudbilling.model.TierRate;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.security.GeneralSecurityException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class GcpStoragePriceListLoader implements StoragePriceListLoader{\n+\n+    private static final String GCP_STORAGE_SERVICES_FAMILY = \"Cloud Storage\";\n+    private static final List<String> SUPPORTED_STORAGE = Arrays.asList(\"RegionalStorage\", \"MultiRegionalStorage\");\n+\n+    @Override\n+    public Map<String, StoragePricing> loadFullPriceList() throws IOException, GeneralSecurityException {\n+        final String accessToken = GoogleCredential.getApplicationDefault().getAccessToken();\n+        final Cloudbilling cloudbilling = new Cloudbilling(GoogleNetHttpTransport.newTrustedTransport(),\n+                                                           JacksonFactory.getDefaultInstance(),\n+                                                           null);\n+        final ListServicesResponse services = cloudbilling.services().list().setAccessToken(accessToken).execute();\n+        final Service cloudStorageService = services.getServices().stream()\n+            .filter(service -> service.getDisplayName().equals(GCP_STORAGE_SERVICES_FAMILY))\n+            .findAny()\n+            .orElseThrow(() -> new IllegalStateException(\"No services received from GCP!\"));\n+\n+        final ListSkusResponse skuResponse = cloudbilling.services()\n+            .skus()\n+            .list(cloudStorageService.getName())\n+            .setAccessToken(accessToken)\n+            .execute();\n+\n+        return skuResponse.getSkus().stream()\n+            .filter(sku -> SUPPORTED_STORAGE.contains(sku.getCategory().getResourceGroup()))\n+            .map(this::convertSku)\n+            .map(Map::entrySet)\n+            .flatMap(Set::stream)\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    }\n+\n+    private Map<String, StoragePricing> convertSku(final Sku sku) {\n+        final Map<String, StoragePricing> flattenPrices = new HashMap<>();\n+        final List<TierRate> tieredRates = sku.getPricingInfo().get(0).getPricingExpression().getTieredRates();\n+        final StoragePricing convertedRates = convertGcpTierRateToStoragePrices(tieredRates);\n+        sku.getServiceRegions().forEach(key -> flattenPrices.put(key, convertedRates));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDQzMA==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391504430", "createdAt": "2020-03-12T09:47:24Z", "author": {"login": "Wedds"}, "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.cloudbilling.Cloudbilling;\n+import com.google.api.services.cloudbilling.model.ListServicesResponse;\n+import com.google.api.services.cloudbilling.model.ListSkusResponse;\n+import com.google.api.services.cloudbilling.model.Service;\n+import com.google.api.services.cloudbilling.model.Sku;\n+import com.google.api.services.cloudbilling.model.TierRate;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.security.GeneralSecurityException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class GcpStoragePriceListLoader implements StoragePriceListLoader{\n+\n+    private static final String GCP_STORAGE_SERVICES_FAMILY = \"Cloud Storage\";\n+    private static final List<String> SUPPORTED_STORAGE = Arrays.asList(\"RegionalStorage\", \"MultiRegionalStorage\");\n+\n+    @Override\n+    public Map<String, StoragePricing> loadFullPriceList() throws IOException, GeneralSecurityException {\n+        final String accessToken = GoogleCredential.getApplicationDefault().getAccessToken();\n+        final Cloudbilling cloudbilling = new Cloudbilling(GoogleNetHttpTransport.newTrustedTransport(),\n+                                                           JacksonFactory.getDefaultInstance(),\n+                                                           null);\n+        final ListServicesResponse services = cloudbilling.services().list().setAccessToken(accessToken).execute();\n+        final Service cloudStorageService = services.getServices().stream()\n+            .filter(service -> service.getDisplayName().equals(GCP_STORAGE_SERVICES_FAMILY))\n+            .findAny()\n+            .orElseThrow(() -> new IllegalStateException(\"No services received from GCP!\"));\n+\n+        final ListSkusResponse skuResponse = cloudbilling.services()\n+            .skus()\n+            .list(cloudStorageService.getName())\n+            .setAccessToken(accessToken)\n+            .execute();\n+\n+        return skuResponse.getSkus().stream()\n+            .filter(sku -> SUPPORTED_STORAGE.contains(sku.getCategory().getResourceGroup()))\n+            .map(this::convertSku)\n+            .map(Map::entrySet)\n+            .flatMap(Set::stream)\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    }\n+\n+    private Map<String, StoragePricing> convertSku(final Sku sku) {\n+        final Map<String, StoragePricing> flattenPrices = new HashMap<>();\n+        final List<TierRate> tieredRates = sku.getPricingInfo().get(0).getPricingExpression().getTieredRates();\n+        final StoragePricing convertedRates = convertGcpTierRateToStoragePrices(tieredRates);\n+        sku.getServiceRegions().forEach(key -> flattenPrices.put(key, convertedRates));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMjM4Mg=="}, "originalCommit": {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 421, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}