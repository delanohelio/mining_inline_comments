{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MzkzODk5", "number": 1105, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo0NDo0MVrOD8gucg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo0ODo1MlrOD8g18Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Nzc3MzMwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/datastorage/leakagepolicy/DataLeakagePolicyAspect.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo0NDo0MVrOGVfvQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNToxNTo1MlrOGVhLww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5MzI4Mg==", "bodyText": "It would be great to return 403 code for such errors, please add a new exception class and it's handling in ExceptionHandlerAdvice class", "url": "https://github.com/epam/cloud-pipeline/pull/1105#discussion_r425193282", "createdAt": "2020-05-14T14:44:41Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/datastorage/leakagepolicy/DataLeakagePolicyAspect.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.datastorage.leakagepolicy;\n+\n+import com.epam.pipeline.common.MessageConstants;\n+import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import lombok.RequiredArgsConstructor;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * This aspect controls 'data-leakage' policy\n+ */\n+@Aspect\n+@Component\n+@RequiredArgsConstructor\n+public class DataLeakagePolicyAspect {\n+\n+    private final MessageHelper messageHelper;\n+\n+    @Around(\"execution(@com.epam.pipeline.manager.datastorage.leakagepolicy.SensitiveStorageOperation * *(..))\")\n+    public void proceedSensitiveStorageOperation(final ProceedingJoinPoint joinPoint) throws Throwable {\n+        Stream.of(joinPoint.getArgs())\n+            .filter(AbstractDataStorage.class::isInstance)\n+            .map(AbstractDataStorage.class::cast)\n+            .forEach(this::assertStorageIsNotSensitive);\n+        joinPoint.proceed();\n+    }\n+\n+    public void assertStorageIsNotSensitive(final AbstractDataStorage storage) {\n+        if (storage.isSensitive()) {\n+            throw new IllegalArgumentException(messageHelper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1e7a35d4d31d4e266c92036f0aada7e0fe4e30a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxNjk2Mw==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1105#discussion_r425216963", "createdAt": "2020-05-14T15:15:52Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/manager/datastorage/leakagepolicy/DataLeakagePolicyAspect.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.datastorage.leakagepolicy;\n+\n+import com.epam.pipeline.common.MessageConstants;\n+import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import lombok.RequiredArgsConstructor;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * This aspect controls 'data-leakage' policy\n+ */\n+@Aspect\n+@Component\n+@RequiredArgsConstructor\n+public class DataLeakagePolicyAspect {\n+\n+    private final MessageHelper messageHelper;\n+\n+    @Around(\"execution(@com.epam.pipeline.manager.datastorage.leakagepolicy.SensitiveStorageOperation * *(..))\")\n+    public void proceedSensitiveStorageOperation(final ProceedingJoinPoint joinPoint) throws Throwable {\n+        Stream.of(joinPoint.getArgs())\n+            .filter(AbstractDataStorage.class::isInstance)\n+            .map(AbstractDataStorage.class::cast)\n+            .forEach(this::assertStorageIsNotSensitive);\n+        joinPoint.proceed();\n+    }\n+\n+    public void assertStorageIsNotSensitive(final AbstractDataStorage storage) {\n+        if (storage.isSensitive()) {\n+            throw new IllegalArgumentException(messageHelper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5MzI4Mg=="}, "originalCommit": {"oid": "d1e7a35d4d31d4e266c92036f0aada7e0fe4e30a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Nzc5MjQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/datastorage/leakagepolicy/DataLeakagePolicyAspect.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo0ODo1MlrOGVf7vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNToxNTo1NlrOGVhL6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5NjQ3Ng==", "bodyText": "Move this file to aspect folder", "url": "https://github.com/epam/cloud-pipeline/pull/1105#discussion_r425196476", "createdAt": "2020-05-14T14:48:52Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/datastorage/leakagepolicy/DataLeakagePolicyAspect.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1e7a35d4d31d4e266c92036f0aada7e0fe4e30a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxNzAwMg==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1105#discussion_r425217002", "createdAt": "2020-05-14T15:15:56Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/manager/datastorage/leakagepolicy/DataLeakagePolicyAspect.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5NjQ3Ng=="}, "originalCommit": {"oid": "d1e7a35d4d31d4e266c92036f0aada7e0fe4e30a"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 441, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}