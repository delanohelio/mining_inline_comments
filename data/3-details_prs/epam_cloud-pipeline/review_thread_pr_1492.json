{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMjYxNTQy", "number": 1492, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyOTozNVrOEwLkOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODoyODowNlrOExGxog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTU2NjAxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyOTozNVrOHllIqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyOTozNVrOHllIqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2Nzc4Nw==", "bodyText": "Probably these changes have nothing to do with the pull request.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r509167787", "createdAt": "2020-10-21T10:29:35Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java", "diffHunk": "@@ -17,8 +17,10 @@\n package com.epam.pipeline.test.acl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDgyNzU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/controller/vo/configuration/RunConfigurationVO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOTozNzowMlrOHmZOtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOTozNzowMlrOHmZOtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAyMTMwMw==", "bodyText": "The change allows user to specify any owner in the request body therefore possibly gaining access to any run configuration. Let's not do that.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510021303", "createdAt": "2020-10-22T09:37:02Z", "author": {"login": "tcibinan"}, "path": "api/src/main/java/com/epam/pipeline/controller/vo/configuration/RunConfigurationVO.java", "diffHunk": "@@ -35,12 +35,14 @@\n     private Long id;\n     private String name;\n     private String description;\n+    private String owner;\n     private List<AbstractRunConfigurationEntry> entries;\n \n     public RunConfiguration toEntity() {\n         RunConfiguration configuration = new RunConfiguration();\n         configuration.setId(getId());\n         configuration.setName(getName());\n+        configuration.setOwner(getOwner());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDgzMTQ1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOTozNzo1NlrOHmZQ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOTozNzo1NlrOHmZQ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAyMTg4Nw==", "bodyText": "Please replace the field with the common constant.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510021887", "createdAt": "2020-10-22T09:37:56Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.configuration.RunConfigurationEntry;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class RunConfigurationApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"Test\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDgzODU1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOTozOTozM1rOHmZVXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOTo0NTo0N1rOHmZl_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAyMzAwNg==", "bodyText": "Let's create an overloaded version of the method with only two arguments.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510023006", "createdAt": "2020-10-22T09:39:33Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.configuration.RunConfigurationEntry;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class RunConfigurationApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"Test\";\n+    private final RunConfiguration runConfiguration =\n+            ConfigurationCreatorUtils.getRunConfiguration(1L, SIMPLE_USER, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAyNzI2MA==", "bodyText": "And also use common constant for id as well.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510027260", "createdAt": "2020-10-22T09:45:47Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.configuration.RunConfigurationEntry;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class RunConfigurationApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"Test\";\n+    private final RunConfiguration runConfiguration =\n+            ConfigurationCreatorUtils.getRunConfiguration(1L, SIMPLE_USER, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAyMzAwNg=="}, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDk0MDY1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDowNToxOVrOHmaUTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDozNDoyMFrOHmbX1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzOTExOQ==", "bodyText": "Let's use ANOTHER_SIMPLE_USER constant in abstract class for such cases. Currently it is pretty hard to read. In the context of the method TEST_STRING is the user name but the code reader doesn't know that.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510039119", "createdAt": "2020-10-22T10:05:19Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.configuration.RunConfigurationEntry;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class RunConfigurationApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"Test\";\n+    private final RunConfiguration runConfiguration =\n+            ConfigurationCreatorUtils.getRunConfiguration(1L, SIMPLE_USER, null);\n+    private final RunConfigurationVO runConfigurationVO =\n+            ConfigurationCreatorUtils.getRunConfigurationVO(1L, SIMPLE_USER);\n+    private final RunConfigurationEntry runConfigurationEntry = ConfigurationCreatorUtils.getRunConfigurationEntry();\n+    private final Folder folder = FolderCreatorUtils.getFolder(1L, SIMPLE_USER);\n+\n+    @Autowired\n+    private RunConfigurationApiService runConfigurationApiService;\n+\n+    @Autowired\n+    private RunConfigurationManager mockRunConfigurationManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private ConfigurationProviderManager mockConfigurationProviderManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSaveRunConfigurationForAdmin() {\n+        initAclEntity(folder);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThat(runConfigurationApiService.save(runConfigurationVO)).isEqualTo(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldSaveRunConfigurationWhenPermissionIsGranted() {\n+        RunConfiguration runConfiguration =\n+                ConfigurationCreatorUtils.getRunConfiguration(1L, TEST_STRING, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA1NjQwNQ==", "bodyText": "And also please add final keyword.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510056405", "createdAt": "2020-10-22T10:34:20Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.configuration.RunConfigurationEntry;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class RunConfigurationApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"Test\";\n+    private final RunConfiguration runConfiguration =\n+            ConfigurationCreatorUtils.getRunConfiguration(1L, SIMPLE_USER, null);\n+    private final RunConfigurationVO runConfigurationVO =\n+            ConfigurationCreatorUtils.getRunConfigurationVO(1L, SIMPLE_USER);\n+    private final RunConfigurationEntry runConfigurationEntry = ConfigurationCreatorUtils.getRunConfigurationEntry();\n+    private final Folder folder = FolderCreatorUtils.getFolder(1L, SIMPLE_USER);\n+\n+    @Autowired\n+    private RunConfigurationApiService runConfigurationApiService;\n+\n+    @Autowired\n+    private RunConfigurationManager mockRunConfigurationManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private ConfigurationProviderManager mockConfigurationProviderManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSaveRunConfigurationForAdmin() {\n+        initAclEntity(folder);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThat(runConfigurationApiService.save(runConfigurationVO)).isEqualTo(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldSaveRunConfigurationWhenPermissionIsGranted() {\n+        RunConfiguration runConfiguration =\n+                ConfigurationCreatorUtils.getRunConfiguration(1L, TEST_STRING, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzOTExOQ=="}, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDk0NDUxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDowNjoyNlrOHmaWtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDowNjoyNlrOHmaWtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzOTczNQ==", "bodyText": "Let's instantiate a new instance for run configuration vo just the same way you did in the test above. Please do the same for all similar cases below.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510039735", "createdAt": "2020-10-22T10:06:26Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.configuration.RunConfigurationEntry;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class RunConfigurationApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"Test\";\n+    private final RunConfiguration runConfiguration =\n+            ConfigurationCreatorUtils.getRunConfiguration(1L, SIMPLE_USER, null);\n+    private final RunConfigurationVO runConfigurationVO =\n+            ConfigurationCreatorUtils.getRunConfigurationVO(1L, SIMPLE_USER);\n+    private final RunConfigurationEntry runConfigurationEntry = ConfigurationCreatorUtils.getRunConfigurationEntry();\n+    private final Folder folder = FolderCreatorUtils.getFolder(1L, SIMPLE_USER);\n+\n+    @Autowired\n+    private RunConfigurationApiService runConfigurationApiService;\n+\n+    @Autowired\n+    private RunConfigurationManager mockRunConfigurationManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private ConfigurationProviderManager mockConfigurationProviderManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSaveRunConfigurationForAdmin() {\n+        initAclEntity(folder);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThat(runConfigurationApiService.save(runConfigurationVO)).isEqualTo(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldSaveRunConfigurationWhenPermissionIsGranted() {\n+        RunConfiguration runConfiguration =\n+                ConfigurationCreatorUtils.getRunConfiguration(1L, TEST_STRING, null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        initAclEntity(runConfiguration, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        final RunConfiguration returnedRunConfiguration = runConfigurationApiService.save(runConfigurationVO);\n+\n+        assertThat(returnedRunConfiguration).isEqualTo(runConfiguration);\n+        assertThat(returnedRunConfiguration.getMask()).isEqualTo(2);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDenySavingRunConfigurationWhenParentIdIsNull() {\n+        runConfigurationVO.setParentId(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTAxMDYyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoyMzo0N1rOHma-rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDoyMzo0N1rOHma-rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0OTk2NA==", "bodyText": "I'm thinking about making it more explicit like shouldDenySavingRunConfigurationWhenParentPermissionIsNotGranted.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510049964", "createdAt": "2020-10-22T10:23:47Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.configuration.RunConfigurationEntry;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class RunConfigurationApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"Test\";\n+    private final RunConfiguration runConfiguration =\n+            ConfigurationCreatorUtils.getRunConfiguration(1L, SIMPLE_USER, null);\n+    private final RunConfigurationVO runConfigurationVO =\n+            ConfigurationCreatorUtils.getRunConfigurationVO(1L, SIMPLE_USER);\n+    private final RunConfigurationEntry runConfigurationEntry = ConfigurationCreatorUtils.getRunConfigurationEntry();\n+    private final Folder folder = FolderCreatorUtils.getFolder(1L, SIMPLE_USER);\n+\n+    @Autowired\n+    private RunConfigurationApiService runConfigurationApiService;\n+\n+    @Autowired\n+    private RunConfigurationManager mockRunConfigurationManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private ConfigurationProviderManager mockConfigurationProviderManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSaveRunConfigurationForAdmin() {\n+        initAclEntity(folder);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThat(runConfigurationApiService.save(runConfigurationVO)).isEqualTo(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldSaveRunConfigurationWhenPermissionIsGranted() {\n+        RunConfiguration runConfiguration =\n+                ConfigurationCreatorUtils.getRunConfiguration(1L, TEST_STRING, null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        initAclEntity(runConfiguration, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        final RunConfiguration returnedRunConfiguration = runConfigurationApiService.save(runConfigurationVO);\n+\n+        assertThat(returnedRunConfiguration).isEqualTo(runConfiguration);\n+        assertThat(returnedRunConfiguration.getMask()).isEqualTo(2);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDenySavingRunConfigurationWhenParentIdIsNull() {\n+        runConfigurationVO.setParentId(null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenySavingRunConfigurationWithInvalidRole() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDenySavingRunConfigurationWithInvalidAclPermission() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTA1NDQ2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDozNTowMFrOHmbZSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDozNTowMFrOHmbZSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA1Njc3Ng==", "bodyText": "Please extract EXECUTE along with other permissions to abstract class fields.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510056776", "createdAt": "2020-10-22T10:35:00Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.configuration.RunConfigurationEntry;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class RunConfigurationApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"Test\";\n+    private final RunConfiguration runConfiguration =\n+            ConfigurationCreatorUtils.getRunConfiguration(1L, SIMPLE_USER, null);\n+    private final RunConfigurationVO runConfigurationVO =\n+            ConfigurationCreatorUtils.getRunConfigurationVO(1L, SIMPLE_USER);\n+    private final RunConfigurationEntry runConfigurationEntry = ConfigurationCreatorUtils.getRunConfigurationEntry();\n+    private final Folder folder = FolderCreatorUtils.getFolder(1L, SIMPLE_USER);\n+\n+    @Autowired\n+    private RunConfigurationApiService runConfigurationApiService;\n+\n+    @Autowired\n+    private RunConfigurationManager mockRunConfigurationManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private ConfigurationProviderManager mockConfigurationProviderManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSaveRunConfigurationForAdmin() {\n+        initAclEntity(folder);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThat(runConfigurationApiService.save(runConfigurationVO)).isEqualTo(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldSaveRunConfigurationWhenPermissionIsGranted() {\n+        RunConfiguration runConfiguration =\n+                ConfigurationCreatorUtils.getRunConfiguration(1L, TEST_STRING, null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        initAclEntity(runConfiguration, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        final RunConfiguration returnedRunConfiguration = runConfigurationApiService.save(runConfigurationVO);\n+\n+        assertThat(returnedRunConfiguration).isEqualTo(runConfiguration);\n+        assertThat(returnedRunConfiguration.getMask()).isEqualTo(2);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDenySavingRunConfigurationWhenParentIdIsNull() {\n+        runConfigurationVO.setParentId(null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenySavingRunConfigurationWithInvalidRole() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDenySavingRunConfigurationWithInvalidAclPermission() {\n+        folder.setOwner(TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDenySavingRunConfigurationWithInvalidPermissionToConfiguration() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(true).when(mockConfigurationProviderManager)\n+                .hasNoPermission(runConfigurationEntry, \"EXECUTE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTA2MzM3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDozNzoyM1rOHmbehQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDozNzoyM1rOHmbehQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA1ODExNw==", "bodyText": "Please replace all the 1L with ID constant as well.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510058117", "createdAt": "2020-10-22T10:37:23Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.configuration.RunConfigurationEntry;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class RunConfigurationApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"Test\";\n+    private final RunConfiguration runConfiguration =\n+            ConfigurationCreatorUtils.getRunConfiguration(1L, SIMPLE_USER, null);\n+    private final RunConfigurationVO runConfigurationVO =\n+            ConfigurationCreatorUtils.getRunConfigurationVO(1L, SIMPLE_USER);\n+    private final RunConfigurationEntry runConfigurationEntry = ConfigurationCreatorUtils.getRunConfigurationEntry();\n+    private final Folder folder = FolderCreatorUtils.getFolder(1L, SIMPLE_USER);\n+\n+    @Autowired\n+    private RunConfigurationApiService runConfigurationApiService;\n+\n+    @Autowired\n+    private RunConfigurationManager mockRunConfigurationManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private ConfigurationProviderManager mockConfigurationProviderManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSaveRunConfigurationForAdmin() {\n+        initAclEntity(folder);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThat(runConfigurationApiService.save(runConfigurationVO)).isEqualTo(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldSaveRunConfigurationWhenPermissionIsGranted() {\n+        RunConfiguration runConfiguration =\n+                ConfigurationCreatorUtils.getRunConfiguration(1L, TEST_STRING, null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        initAclEntity(runConfiguration, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        final RunConfiguration returnedRunConfiguration = runConfigurationApiService.save(runConfigurationVO);\n+\n+        assertThat(returnedRunConfiguration).isEqualTo(runConfiguration);\n+        assertThat(returnedRunConfiguration.getMask()).isEqualTo(2);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDenySavingRunConfigurationWhenParentIdIsNull() {\n+        runConfigurationVO.setParentId(null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenySavingRunConfigurationWithInvalidRole() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDenySavingRunConfigurationWithInvalidAclPermission() {\n+        folder.setOwner(TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDenySavingRunConfigurationWithInvalidPermissionToConfiguration() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(true).when(mockConfigurationProviderManager)\n+                .hasNoPermission(runConfigurationEntry, \"EXECUTE\");\n+\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateRunConfigurationForAdmin() {\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).update(runConfigurationVO);\n+\n+        assertThat(runConfigurationApiService.update(runConfigurationVO)).isEqualTo(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateRunConfigurationWhenPermissionIsGranted() {\n+        RunConfiguration runConfiguration =\n+                ConfigurationCreatorUtils.getRunConfiguration(1L, TEST_STRING, null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(runConfiguration, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).update(runConfigurationVO);\n+\n+        final RunConfiguration returnedRunConfiguration = runConfigurationApiService.update(runConfigurationVO);\n+\n+        assertThat(returnedRunConfiguration).isEqualTo(runConfiguration);\n+        assertThat(returnedRunConfiguration.getMask()).isEqualTo(2);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateRunConfigurationWhenPermissionIsNotGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(runConfiguration);\n+        doReturn(true).when(mockConfigurationProviderManager)\n+                .hasNoPermission(runConfigurationEntry, \"EXECUTE\");\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).update(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.update(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteRunConfigurationForAdmin() {\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).delete(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTA3NzIzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDo0MToxNVrOHmbm2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDo0MToxNVrOHmbm2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2MDI0OQ==", "bodyText": "Let's extract common mocking to the class private methods.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510060249", "createdAt": "2020-10-22T10:41:15Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/RunConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.configuration.RunConfigurationEntry;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class RunConfigurationApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"Test\";\n+    private final RunConfiguration runConfiguration =\n+            ConfigurationCreatorUtils.getRunConfiguration(1L, SIMPLE_USER, null);\n+    private final RunConfigurationVO runConfigurationVO =\n+            ConfigurationCreatorUtils.getRunConfigurationVO(1L, SIMPLE_USER);\n+    private final RunConfigurationEntry runConfigurationEntry = ConfigurationCreatorUtils.getRunConfigurationEntry();\n+    private final Folder folder = FolderCreatorUtils.getFolder(1L, SIMPLE_USER);\n+\n+    @Autowired\n+    private RunConfigurationApiService runConfigurationApiService;\n+\n+    @Autowired\n+    private RunConfigurationManager mockRunConfigurationManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private ConfigurationProviderManager mockConfigurationProviderManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSaveRunConfigurationForAdmin() {\n+        initAclEntity(folder);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThat(runConfigurationApiService.save(runConfigurationVO)).isEqualTo(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldSaveRunConfigurationWhenPermissionIsGranted() {\n+        RunConfiguration runConfiguration =\n+                ConfigurationCreatorUtils.getRunConfiguration(1L, TEST_STRING, null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        initAclEntity(runConfiguration, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        final RunConfiguration returnedRunConfiguration = runConfigurationApiService.save(runConfigurationVO);\n+\n+        assertThat(returnedRunConfiguration).isEqualTo(runConfiguration);\n+        assertThat(returnedRunConfiguration.getMask()).isEqualTo(2);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDenySavingRunConfigurationWhenParentIdIsNull() {\n+        runConfigurationVO.setParentId(null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenySavingRunConfigurationWithInvalidRole() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDenySavingRunConfigurationWithInvalidAclPermission() {\n+        folder.setOwner(TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDenySavingRunConfigurationWithInvalidPermissionToConfiguration() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(true).when(mockConfigurationProviderManager)\n+                .hasNoPermission(runConfigurationEntry, \"EXECUTE\");\n+\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).create(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.save(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateRunConfigurationForAdmin() {\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).update(runConfigurationVO);\n+\n+        assertThat(runConfigurationApiService.update(runConfigurationVO)).isEqualTo(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateRunConfigurationWhenPermissionIsGranted() {\n+        RunConfiguration runConfiguration =\n+                ConfigurationCreatorUtils.getRunConfiguration(1L, TEST_STRING, null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(runConfiguration, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).update(runConfigurationVO);\n+\n+        final RunConfiguration returnedRunConfiguration = runConfigurationApiService.update(runConfigurationVO);\n+\n+        assertThat(returnedRunConfiguration).isEqualTo(runConfiguration);\n+        assertThat(returnedRunConfiguration.getMask()).isEqualTo(2);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateRunConfigurationWhenPermissionIsNotGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(runConfiguration);\n+        doReturn(true).when(mockConfigurationProviderManager)\n+                .hasNoPermission(runConfigurationEntry, \"EXECUTE\");\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).update(runConfigurationVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.update(runConfigurationVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteRunConfigurationForAdmin() {\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).delete(1L);\n+\n+        assertThat(runConfigurationApiService.delete(1L)).isEqualTo(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = CONFIGURATION_MANAGER_ROLE)\n+    public void shouldDeleteRunConfigurationWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(runConfiguration, AclPermission.WRITE);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).delete(1L);\n+\n+        assertThat(runConfigurationApiService.delete(1L)).isEqualTo(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeletionRunConfigurationWhenPermissionIsNotGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(runConfiguration);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).delete(1L);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.delete(1L));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadRunConfigurationForAdmin() {\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).load(1L);\n+\n+        assertThat(runConfigurationApiService.load(1L)).isEqualTo(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadRunConfigurationWhenPermissionIsGranted() {\n+        RunConfiguration runConfiguration =\n+                ConfigurationCreatorUtils.getRunConfiguration(1L, TEST_STRING, null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(runConfiguration, AclPermission.READ);\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).load(1L);\n+\n+        final RunConfiguration returnedRunConfiguration = runConfigurationApiService.load(1L);\n+\n+        assertThat(returnedRunConfiguration).isEqualTo(runConfiguration);\n+        assertThat(returnedRunConfiguration.getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadingRunConfigurationWhenPermissionIsNotGranted() {\n+        runConfiguration.setOwner(TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(runConfiguration);\n+\n+        doReturn(runConfiguration).when(mockRunConfigurationManager).load(1L);\n+\n+        assertThrows(AccessDeniedException.class, () -> runConfigurationApiService.load(1L));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllRunConfigurationForAdmin() {\n+        doReturn(initSingleRunConfigurationList()).when(mockRunConfigurationManager).loadAll();\n+\n+        assertThat(runConfigurationApiService.loadAll()).hasSize(1).contains(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadAllRunConfigurationWhenPermissionIsGranted() {\n+        RunConfiguration runConfiguration =\n+                ConfigurationCreatorUtils.getRunConfiguration(1L, TEST_STRING, null);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(runConfiguration, AclPermission.READ);\n+        doReturn(initSingleRunConfigurationList()).when(mockRunConfigurationManager).loadAll();\n+\n+        final List<RunConfiguration> returnedRunConfiguration = runConfigurationApiService.loadAll();\n+\n+        assertThat(returnedRunConfiguration).hasSize(1).contains(runConfiguration);\n+        assertThat(returnedRunConfiguration.get(0).getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadAllRunConfigurationWhichPermissionIsGranted() {\n+        final RunConfiguration runConfigurationWithoutPermission =\n+                ConfigurationCreatorUtils.getRunConfiguration(2L, TEST_STRING, null);\n+        final List<RunConfiguration> twoRunConfigurationsList = new ArrayList<>();\n+        twoRunConfigurationsList.add(runConfiguration);\n+        twoRunConfigurationsList.add(runConfigurationWithoutPermission);\n+\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(runConfiguration, AclPermission.READ);\n+        initAclEntity(runConfigurationWithoutPermission);\n+        doReturn(twoRunConfigurationsList).when(mockRunConfigurationManager).loadAll();\n+\n+        assertThat(runConfigurationApiService.loadAll()).hasSize(1).contains(runConfiguration);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadingAllRunConfigurationWhichPermissionIsNotGranted() {\n+        runConfiguration.setOwner(TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTA5MDY3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/configuration/ServerlessConfigurationApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDo0NToxMFrOHmbu9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDo1NDozN1rOHmcDgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2MjMyNw==", "bodyText": "It looks like some of the tests in the class fail. Could you please check? My guess would be the tests execution order which is not method declarations order.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510062327", "createdAt": "2020-10-22T10:45:10Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/ServerlessConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.configuration.ServerlessConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ServerlessConfigurationApiServiceTest extends AbstractAclTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2NzU4NA==", "bodyText": "But at the same time it looks like the bug in ACL. Could you please fix the acl (replacing configuration with id) and recheck that the tests execution order is fine.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510067584", "createdAt": "2020-10-22T10:54:37Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/ServerlessConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.configuration.ServerlessConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ServerlessConfigurationApiServiceTest extends AbstractAclTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2MjMyNw=="}, "originalCommit": {"oid": "dcdf3acd1348aa9080a030bcabaa37695cf5c328"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTI2NjkwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/configuration/ServerlessConfigurationApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODoyODowNlrOHnD5sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODoyODowNlrOHnD5sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyMDQzNQ==", "bodyText": "Could you please remove the rule from config/pmd/pmd-ruleset.xml and then remove @SuppressWarnings since is not relevant anymore. We decided to get rid of this pmd rule because it doesn't seem to help the code style but just making everything harder.", "url": "https://github.com/epam/cloud-pipeline/pull/1492#discussion_r510720435", "createdAt": "2020-10-23T08:28:06Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/configuration/ServerlessConfigurationApiServiceTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.configuration;\n+\n+import com.epam.pipeline.controller.vo.configuration.RunConfigurationVO;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.manager.configuration.RunConfigurationManager;\n+import com.epam.pipeline.manager.configuration.ServerlessConfigurationManager;\n+import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.doReturn;\n+\n+@SuppressWarnings(\"PMD.TooManyStaticImports\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c53ea47ef7d76f9f347e860e7dc14b979b0a5062"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 283, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}