{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NjE2OTcw", "number": 1618, "title": "Issue #1404: Implemented tests for AclPermissionApiService", "bodyText": "This PR is related to issue #1404 and contains tests implementation for AclPermissionApiService", "createdAt": "2020-11-30T15:15:35Z", "url": "https://github.com/epam/cloud-pipeline/pull/1618", "merged": true, "mergeCommit": {"oid": "c2e25eebf7dc03940471119bb731a6d092a2e49d"}, "closed": true, "closedAt": "2020-12-10T11:23:32Z", "author": {"login": "cryteq"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdh7riCgBqjQwNTc4MDM3MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkxAd3ABqjQwOTQ0MjI3Nzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8fb4f221c3cbf5210c79c83c8271b45488ef69d", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/c8fb4f221c3cbf5210c79c83c8271b45488ef69d", "committedDate": "2020-12-01T15:20:00Z", "message": "Issue #1404: Added more tests"}, "afterCommit": {"oid": "0747e7de4ab9b0429cfdebe70fdd06d3f6038546", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0747e7de4ab9b0429cfdebe70fdd06d3f6038546", "committedDate": "2020-12-01T15:28:19Z", "message": "Issue #1404: Added more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzODkwMTA4", "url": "https://github.com/epam/cloud-pipeline/pull/1618#pullrequestreview-543890108", "createdAt": "2020-12-03T12:10:38Z", "commit": {"oid": "0747e7de4ab9b0429cfdebe70fdd06d3f6038546"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjoxMDozOFrOH-YZvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDoxNDozMVrOH_KGKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3MzU2NQ==", "bodyText": "Technically it works. But logically s3buket is not an ATTACHMENT, it's a DATA_STORAGE", "url": "https://github.com/epam/cloud-pipeline/pull/1618#discussion_r535173565", "createdAt": "2020-12-03T12:10:38Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/security/AclPermissionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.security;\n+\n+import com.epam.pipeline.controller.vo.EntityPermissionVO;\n+import com.epam.pipeline.controller.vo.PermissionGrantVO;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.security.acl.AclSecuredEntry;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.security.GrantPermissionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.security.PermissionCreatorUtils.getAclSecuredEntry;\n+import static com.epam.pipeline.test.creator.security.PermissionCreatorUtils.getEntityPermissionVO;\n+import static com.epam.pipeline.test.creator.security.PermissionCreatorUtils.getPermissionGrantVO;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class AclPermissionApiServiceTest extends AbstractAclTest {\n+\n+    private final AclSecuredEntry aclSecuredEntry = getAclSecuredEntry();\n+    private final PermissionGrantVO permissionGrantVO = getPermissionGrantVO();\n+    private final EntityPermissionVO entityPermissionVO = getEntityPermissionVO();\n+    private final S3bucketDataStorage s3bucket = getS3bucketDataStorage(ID, SIMPLE_USER);\n+    private final S3bucketDataStorage anotherS3bucket = getS3bucketDataStorage(ID, ANOTHER_SIMPLE_USER);\n+\n+    @Autowired\n+    private GrantPermissionManager spyPermissionManager;\n+\n+    @Autowired\n+    private AclPermissionApiService aclPermissionApiService;\n+\n+    @Autowired\n+    private EntityManager entityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSetPermissionForAdmin() {\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).setPermissions(permissionGrantVO);\n+\n+        assertThat(aclPermissionApiService.setPermissions(permissionGrantVO)).isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldSetPermissionsForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.ATTACHMENT, ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0747e7de4ab9b0429cfdebe70fdd06d3f6038546"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4Nzc1NQ==", "bodyText": "This method has usages in another places (ClusterApiServiceTest, ServerlessConfigurationApiServiceTest, AbstractDataStorageAclTest). Maybe we should consider moving this method to AbstractAclTest?", "url": "https://github.com/epam/cloud-pipeline/pull/1618#discussion_r535987755", "createdAt": "2020-12-04T10:14:31Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/security/AclPermissionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.security;\n+\n+import com.epam.pipeline.controller.vo.EntityPermissionVO;\n+import com.epam.pipeline.controller.vo.PermissionGrantVO;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.security.acl.AclSecuredEntry;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.security.GrantPermissionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.security.PermissionCreatorUtils.getAclSecuredEntry;\n+import static com.epam.pipeline.test.creator.security.PermissionCreatorUtils.getEntityPermissionVO;\n+import static com.epam.pipeline.test.creator.security.PermissionCreatorUtils.getPermissionGrantVO;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class AclPermissionApiServiceTest extends AbstractAclTest {\n+\n+    private final AclSecuredEntry aclSecuredEntry = getAclSecuredEntry();\n+    private final PermissionGrantVO permissionGrantVO = getPermissionGrantVO();\n+    private final EntityPermissionVO entityPermissionVO = getEntityPermissionVO();\n+    private final S3bucketDataStorage s3bucket = getS3bucketDataStorage(ID, SIMPLE_USER);\n+    private final S3bucketDataStorage anotherS3bucket = getS3bucketDataStorage(ID, ANOTHER_SIMPLE_USER);\n+\n+    @Autowired\n+    private GrantPermissionManager spyPermissionManager;\n+\n+    @Autowired\n+    private AclPermissionApiService aclPermissionApiService;\n+\n+    @Autowired\n+    private EntityManager entityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSetPermissionForAdmin() {\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).setPermissions(permissionGrantVO);\n+\n+        assertThat(aclPermissionApiService.setPermissions(permissionGrantVO)).isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldSetPermissionsForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.ATTACHMENT, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).setPermissions(permissionGrantVO);\n+        mockUser(SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.setPermissions(permissionGrantVO)).isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenySetPermissionForNotOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.ATTACHMENT, ID);\n+        mockUser(ANOTHER_SIMPLE_USER);\n+\n+        assertThrows(AccessDeniedException.class, () -> aclPermissionApiService.setPermissions(permissionGrantVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetPermissionsForAdmin() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.ATTACHMENT, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).getPermissions(ID, AclClass.ATTACHMENT);\n+\n+        assertThat(aclPermissionApiService.getPermissions(ID, AclClass.ATTACHMENT)).isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPermissionForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).getPermissions(ID, AclClass.DATA_STORAGE);\n+        mockSecurityContext();\n+        mockUser(SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.getPermissions(ID, AclClass.DATA_STORAGE)).isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyGetPermissionForNotOwner() {\n+        initAclEntity(s3bucket);\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).getPermissions(ID, AclClass.DATA_STORAGE);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class,\n+            () -> aclPermissionApiService.getPermissions(ID, AclClass.DATA_STORAGE));\n+    }\n+\n+    @Test\n+    @WithMockUser(SIMPLE_USER)\n+    public void shouldGetPermissionWhenPermissionIsGranted() {\n+        initAclEntity(anotherS3bucket, AclPermission.READ);\n+        doReturn(anotherS3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).getPermissions(ID, AclClass.DATA_STORAGE);\n+        mockSecurityContext();\n+\n+        assertThat(aclPermissionApiService.getPermissions(ID, AclClass.DATA_STORAGE)).isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser(SIMPLE_USER)\n+    public void shouldDenyGetPermissionWhenPermissionIsNotGranted() {\n+        initAclEntity(anotherS3bucket);\n+        doReturn(anotherS3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).getPermissions(ID, AclClass.DATA_STORAGE);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class,\n+            () -> aclPermissionApiService.getPermissions(ID, AclClass.DATA_STORAGE));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeletePermissionsForAdmin() {\n+        doReturn(aclSecuredEntry).when(spyPermissionManager)\n+                .deletePermissions(ID, AclClass.DATA_STORAGE, SIMPLE_USER, true);\n+\n+        assertThat(aclPermissionApiService.deletePermissions(ID, AclClass.DATA_STORAGE, SIMPLE_USER, true))\n+                .isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeletePermissionsForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager)\n+                .deletePermissions(ID, AclClass.DATA_STORAGE, SIMPLE_USER, true);\n+        mockUser(SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.deletePermissions(ID, AclClass.DATA_STORAGE, SIMPLE_USER, true))\n+                .isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeletePermissionsForNotOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        mockUser(ANOTHER_SIMPLE_USER);\n+\n+        assertThrows(AccessDeniedException.class,\n+            () -> aclPermissionApiService.deletePermissions(ID, AclClass.DATA_STORAGE, SIMPLE_USER, true));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAllPermissionsForAdmin() {\n+        doReturn(aclSecuredEntry).when(spyPermissionManager)\n+                .deleteAllPermissions(ID, AclClass.DATA_STORAGE);\n+\n+        assertThat(aclPermissionApiService.deleteAllPermissions(ID, AclClass.DATA_STORAGE))\n+                .isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteAllPermissionsForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager)\n+                .deleteAllPermissions(ID, AclClass.DATA_STORAGE);\n+        mockUser(SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.deleteAllPermissions(ID, AclClass.DATA_STORAGE))\n+                .isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteAllPermissionsForNotOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        mockUser(ANOTHER_SIMPLE_USER);\n+\n+        assertThrows(AccessDeniedException.class,\n+            () -> aclPermissionApiService.deleteAllPermissions(ID, AclClass.DATA_STORAGE));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldChangeOwnerForAdmin() {\n+        doReturn(aclSecuredEntry).when(spyPermissionManager)\n+                .changeOwner(ID, AclClass.DATA_STORAGE, SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.changeOwner(ID, AclClass.DATA_STORAGE, SIMPLE_USER))\n+                .isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldChangeOwnerForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager)\n+                .changeOwner(ID, AclClass.DATA_STORAGE, SIMPLE_USER);\n+        mockUser(SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.changeOwner(ID, AclClass.DATA_STORAGE, SIMPLE_USER))\n+                .isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyChangeOwnerForNotOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        mockUser(ANOTHER_SIMPLE_USER);\n+\n+        assertThrows(AccessDeniedException.class,\n+            () -> aclPermissionApiService.changeOwner(ID, AclClass.DATA_STORAGE, SIMPLE_USER));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadEntityPermissionForAdmin() {\n+        doReturn(entityPermissionVO).when(spyPermissionManager)\n+                .loadEntityPermission(AclClass.DATA_STORAGE, ID);\n+\n+        assertThat(aclPermissionApiService.loadEntityPermission(ID, AclClass.DATA_STORAGE))\n+                .isEqualTo(entityPermissionVO);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadEntityPermissionForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(entityPermissionVO).when(spyPermissionManager)\n+                .loadEntityPermission(AclClass.DATA_STORAGE, ID);\n+        mockUser(SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.loadEntityPermission(ID, AclClass.DATA_STORAGE))\n+                .isEqualTo(entityPermissionVO);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadEntityPermissionForNotOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        mockUser(ANOTHER_SIMPLE_USER);\n+\n+        assertThrows(AccessDeniedException.class,\n+            () -> aclPermissionApiService.loadEntityPermission(ID, AclClass.DATA_STORAGE));\n+    }\n+\n+    private void mockUser(final String username) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0747e7de4ab9b0429cfdebe70fdd06d3f6038546"}, "originalPosition": 269}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1OTg0NDIw", "url": "https://github.com/epam/cloud-pipeline/pull/1618#pullrequestreview-545984420", "createdAt": "2020-12-07T09:51:11Z", "commit": {"oid": "5a19d4ea1d215da32c3aa782d245deced27ee07d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MDc0NDI5", "url": "https://github.com/epam/cloud-pipeline/pull/1618#pullrequestreview-547074429", "createdAt": "2020-12-08T10:48:49Z", "commit": {"oid": "5a19d4ea1d215da32c3aa782d245deced27ee07d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo0ODo1MFrOIBTTaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo0ODo1MFrOIBTTaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIzNTc1Mw==", "bodyText": "Could it beDATA_STORAGE type too?", "url": "https://github.com/epam/cloud-pipeline/pull/1618#discussion_r538235753", "createdAt": "2020-12-08T10:48:50Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/test/creator/security/PermissionCreatorUtils.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.test.creator.security;\n+\n+import com.epam.pipeline.controller.vo.EntityPermissionVO;\n+import com.epam.pipeline.controller.vo.PermissionGrantVO;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.security.acl.AclPermissionEntry;\n+import com.epam.pipeline.entity.security.acl.AclSecuredEntry;\n+import com.epam.pipeline.entity.security.acl.AclSid;\n+\n+import java.util.Collections;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+\n+public final class PermissionCreatorUtils {\n+\n+    private PermissionCreatorUtils() {\n+\n+    }\n+\n+    public static AclSecuredEntry getAclSecuredEntry() {\n+        final AclSecuredEntry aclSecuredEntry = new AclSecuredEntry();\n+        aclSecuredEntry.setPermissions(Collections.singletonList(new AclPermissionEntry()));\n+        return aclSecuredEntry;\n+    }\n+\n+    public static PermissionGrantVO getPermissionGrantVO() {\n+        final PermissionGrantVO permissionGrantVO = new PermissionGrantVO();\n+        permissionGrantVO.setUserName(TEST_STRING);\n+        permissionGrantVO.setId(ID);\n+        permissionGrantVO.setMask(TEST_INT);\n+        permissionGrantVO.setPrincipal(true);\n+        permissionGrantVO.setAclClass(AclClass.DATA_STORAGE);\n+        return permissionGrantVO;\n+    }\n+\n+    public static EntityPermissionVO getEntityPermissionVO() {\n+        final EntityPermissionVO entityPermissionVO = new EntityPermissionVO();\n+        entityPermissionVO.setEntityId(ID);\n+        entityPermissionVO.setOwner(TEST_STRING);\n+        entityPermissionVO.setEntityClass(AclClass.ATTACHMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a19d4ea1d215da32c3aa782d245deced27ee07d"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MDA2ODI1", "url": "https://github.com/epam/cloud-pipeline/pull/1618#pullrequestreview-548006825", "createdAt": "2020-12-09T09:47:52Z", "commit": {"oid": "3dd0053e79f5e06bdcc57f1adcc534eed7adf171"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTo0Nzo1MlrOICLsRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTo0Nzo1MlrOICLsRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE1OTYyMQ==", "bodyText": "Maybe shouldDenyLoadEntityPermissionForNotOwner would be correct?", "url": "https://github.com/epam/cloud-pipeline/pull/1618#discussion_r539159621", "createdAt": "2020-12-09T09:47:52Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/security/AclPermissionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.security;\n+\n+import com.epam.pipeline.controller.vo.EntityPermissionVO;\n+import com.epam.pipeline.controller.vo.PermissionGrantVO;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.security.acl.AclSecuredEntry;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.security.GrantPermissionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.security.PermissionCreatorUtils.getAclSecuredEntry;\n+import static com.epam.pipeline.test.creator.security.PermissionCreatorUtils.getEntityPermissionVO;\n+import static com.epam.pipeline.test.creator.security.PermissionCreatorUtils.getPermissionGrantVO;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class AclPermissionApiServiceTest extends AbstractAclTest {\n+\n+    private static final AclClass DATA_STORAGE = AclClass.DATA_STORAGE;\n+    private final AclSecuredEntry aclSecuredEntry = getAclSecuredEntry();\n+    private final PermissionGrantVO permissionGrantVO = getPermissionGrantVO();\n+    private final EntityPermissionVO entityPermissionVO = getEntityPermissionVO();\n+    private final S3bucketDataStorage s3bucket = getS3bucketDataStorage(ID, SIMPLE_USER);\n+    private final S3bucketDataStorage anotherS3bucket = getS3bucketDataStorage(ID, ANOTHER_SIMPLE_USER);\n+\n+    @Autowired\n+    private GrantPermissionManager spyPermissionManager;\n+\n+    @Autowired\n+    private AclPermissionApiService aclPermissionApiService;\n+\n+    @Autowired\n+    private EntityManager entityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSetPermissionForAdmin() {\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).setPermissions(permissionGrantVO);\n+\n+        assertThat(aclPermissionApiService.setPermissions(permissionGrantVO)).isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldSetPermissionsForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).setPermissions(permissionGrantVO);\n+        mockUser(SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.setPermissions(permissionGrantVO)).isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenySetPermissionForNotOwner() {\n+        doReturn(s3bucket).when(entityManager).load(DATA_STORAGE, ID);\n+        mockUser(ANOTHER_SIMPLE_USER);\n+\n+        assertThrows(AccessDeniedException.class, () -> aclPermissionApiService.setPermissions(permissionGrantVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetPermissionsForAdmin() {\n+        doReturn(s3bucket).when(entityManager).load(DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).getPermissions(ID, DATA_STORAGE);\n+\n+        assertThat(aclPermissionApiService.getPermissions(ID, DATA_STORAGE)).isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPermissionForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).getPermissions(ID, AclClass.DATA_STORAGE);\n+        mockSecurityContext();\n+        mockUser(SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.getPermissions(ID, AclClass.DATA_STORAGE)).isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyGetPermissionForNotOwner() {\n+        initAclEntity(s3bucket);\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).getPermissions(ID, AclClass.DATA_STORAGE);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class,\n+            () -> aclPermissionApiService.getPermissions(ID, AclClass.DATA_STORAGE));\n+    }\n+\n+    @Test\n+    @WithMockUser(SIMPLE_USER)\n+    public void shouldGetPermissionWhenPermissionIsGranted() {\n+        initAclEntity(anotherS3bucket, AclPermission.READ);\n+        doReturn(anotherS3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).getPermissions(ID, AclClass.DATA_STORAGE);\n+        mockSecurityContext();\n+\n+        assertThat(aclPermissionApiService.getPermissions(ID, AclClass.DATA_STORAGE)).isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser(SIMPLE_USER)\n+    public void shouldDenyGetPermissionWhenPermissionIsNotGranted() {\n+        initAclEntity(anotherS3bucket);\n+        doReturn(anotherS3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager).getPermissions(ID, AclClass.DATA_STORAGE);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class,\n+            () -> aclPermissionApiService.getPermissions(ID, AclClass.DATA_STORAGE));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeletePermissionsForAdmin() {\n+        doReturn(aclSecuredEntry).when(spyPermissionManager)\n+                .deletePermissions(ID, AclClass.DATA_STORAGE, SIMPLE_USER, true);\n+\n+        assertThat(aclPermissionApiService.deletePermissions(ID, AclClass.DATA_STORAGE, SIMPLE_USER, true))\n+                .isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeletePermissionsForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager)\n+                .deletePermissions(ID, AclClass.DATA_STORAGE, SIMPLE_USER, true);\n+        mockUser(SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.deletePermissions(ID, AclClass.DATA_STORAGE, SIMPLE_USER, true))\n+                .isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeletePermissionsForNotOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        mockUser(ANOTHER_SIMPLE_USER);\n+\n+        assertThrows(AccessDeniedException.class,\n+            () -> aclPermissionApiService.deletePermissions(ID, AclClass.DATA_STORAGE, SIMPLE_USER, true));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAllPermissionsForAdmin() {\n+        doReturn(aclSecuredEntry).when(spyPermissionManager)\n+                .deleteAllPermissions(ID, AclClass.DATA_STORAGE);\n+\n+        assertThat(aclPermissionApiService.deleteAllPermissions(ID, AclClass.DATA_STORAGE))\n+                .isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteAllPermissionsForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager)\n+                .deleteAllPermissions(ID, AclClass.DATA_STORAGE);\n+        mockUser(SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.deleteAllPermissions(ID, AclClass.DATA_STORAGE))\n+                .isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteAllPermissionsForNotOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        mockUser(ANOTHER_SIMPLE_USER);\n+\n+        assertThrows(AccessDeniedException.class,\n+            () -> aclPermissionApiService.deleteAllPermissions(ID, AclClass.DATA_STORAGE));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldChangeOwnerForAdmin() {\n+        doReturn(aclSecuredEntry).when(spyPermissionManager)\n+                .changeOwner(ID, AclClass.DATA_STORAGE, SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.changeOwner(ID, AclClass.DATA_STORAGE, SIMPLE_USER))\n+                .isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldChangeOwnerForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(aclSecuredEntry).when(spyPermissionManager)\n+                .changeOwner(ID, AclClass.DATA_STORAGE, SIMPLE_USER);\n+        mockUser(SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.changeOwner(ID, AclClass.DATA_STORAGE, SIMPLE_USER))\n+                .isEqualTo(aclSecuredEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyChangeOwnerForNotOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        mockUser(ANOTHER_SIMPLE_USER);\n+\n+        assertThrows(AccessDeniedException.class,\n+            () -> aclPermissionApiService.changeOwner(ID, AclClass.DATA_STORAGE, SIMPLE_USER));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadEntityPermissionForAdmin() {\n+        doReturn(entityPermissionVO).when(spyPermissionManager)\n+                .loadEntityPermission(AclClass.DATA_STORAGE, ID);\n+\n+        assertThat(aclPermissionApiService.loadEntityPermission(ID, AclClass.DATA_STORAGE))\n+                .isEqualTo(entityPermissionVO);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadEntityPermissionForOwner() {\n+        doReturn(s3bucket).when(entityManager).load(AclClass.DATA_STORAGE, ID);\n+        doReturn(entityPermissionVO).when(spyPermissionManager)\n+                .loadEntityPermission(AclClass.DATA_STORAGE, ID);\n+        mockUser(SIMPLE_USER);\n+\n+        assertThat(aclPermissionApiService.loadEntityPermission(ID, AclClass.DATA_STORAGE))\n+                .isEqualTo(entityPermissionVO);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadEntityPermissionForNotOwner() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd0053e79f5e06bdcc57f1adcc534eed7adf171"}, "originalPosition": 262}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTM1OTg2", "url": "https://github.com/epam/cloud-pipeline/pull/1618#pullrequestreview-548135986", "createdAt": "2020-12-09T12:32:13Z", "commit": {"oid": "e6129ff641688d52c88bbdd9f431af13c7c1560f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90650cb431ecad4f1091d2e34084242f69fa468d", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/90650cb431ecad4f1091d2e34084242f69fa468d", "committedDate": "2020-12-10T10:39:34Z", "message": "Issue #1404: AclPermissionApiService moved to acl package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6c40b051644e725d823d2cb06b404933729f007", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/e6c40b051644e725d823d2cb06b404933729f007", "committedDate": "2020-12-10T10:41:47Z", "message": "Issue #1404: Implemented tests for AclPermissionApiService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7b13e6005ceefd1df18044fd9d89f43d4ed70a2", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/b7b13e6005ceefd1df18044fd9d89f43d4ed70a2", "committedDate": "2020-12-10T10:41:50Z", "message": "Issue #1404: Added more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "925b4e28cf60776883015a293fc0bb32d68f8dfd", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/925b4e28cf60776883015a293fc0bb32d68f8dfd", "committedDate": "2020-12-10T10:41:51Z", "message": "Issue #1404: mockUser method moved to AbstractAclTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aded38e83fd16931503a1ad7736896fa1930eba0", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/aded38e83fd16931503a1ad7736896fa1930eba0", "committedDate": "2020-12-10T10:41:51Z", "message": "Issue #1404: Renamed test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7a4a859aa6df84d145fbe886fc6a4666d4fbb2a", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/b7a4a859aa6df84d145fbe886fc6a4666d4fbb2a", "committedDate": "2020-12-10T10:44:05Z", "message": "Issue #1404: Changed import"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6129ff641688d52c88bbdd9f431af13c7c1560f", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/e6129ff641688d52c88bbdd9f431af13c7c1560f", "committedDate": "2020-12-09T11:19:55Z", "message": "Issue #1404: Renamed test"}, "afterCommit": {"oid": "b7a4a859aa6df84d145fbe886fc6a4666d4fbb2a", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/b7a4a859aa6df84d145fbe886fc6a4666d4fbb2a", "committedDate": "2020-12-10T10:44:05Z", "message": "Issue #1404: Changed import"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3582, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}