{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzOTE0MTYw", "number": 1534, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1NjozNFrOE6Bxug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1NjozNFrOE6Bxug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjgxOTc4OnYy", "diffSide": "RIGHT", "path": "pipe-cli/pipe.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1NjozNFrOH02BLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo1NjozNFrOH02BLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3MzAzOA==", "bodyText": "If the goal is to print stack trace we can use something like traceback.print_exc() in except section", "url": "https://github.com/epam/cloud-pipeline/pull/1534#discussion_r525173038", "createdAt": "2020-11-17T13:56:34Z", "author": {"login": "mzueva"}, "path": "pipe-cli/pipe.py", "diffHunk": "@@ -1226,42 +1227,82 @@ def ssh(ctx, run_id, retries):\n @click.argument('run-id', required=True, type=int)\n @click.option('-lp', '--local-port', required=True, type=int, help='Local port to establish connection from')\n @click.option('-rp', '--remote-port', required=True, type=int, help='Remote port to establish connection to')\n+@click.option('-ct', '--connection-timeout', required=False, type=float, default=0,\n+              help='Socket connection timeout in seconds')\n+@click.option('-s', '--ssh', required=False, is_flag=True, default=False,\n+              help='Configures passwordless ssh to specified run instance. '\n+                   'Supported on Linux only.')\n+@click.option('-sp', '--ssh-path', required=False, type=str,\n+              help='Path to .ssh directory for passwordless ssh configuration')\n+@click.option('-sh', '--ssh-host', required=False, type=str,\n+              help='Host name for passwordless ssh configuration')\n+@click.option('-sk', '--ssh-keep', required=False, is_flag=True, default=False,\n+              help='Keeps passwordless ssh configuration after tunnel stopping')\n @click.option('-l', '--log-file', required=False, help='Logs file for tunnel in background mode')\n @click.option('-v', '--log-level', required=False, help='Logs level for tunnel: '\n                                                         'CRITICAL, ERROR, WARNING, INFO or DEBUG')\n-@click.option('-t', '--timeout', required=False, type=int, default=1000,\n+@click.option('-t', '--timeout', required=False, type=int, default=5 * 1000,\n               help='Time period in ms for background tunnel process health check')\n @click.option('-f', '--foreground', required=False, is_flag=True, default=False,\n               help='Establishes tunnel in foreground mode')\n @click.option('-u', '--user', required=False, callback=set_user_token, expose_value=False, help=USER_OPTION_DESCRIPTION)\n+@click.option('-r', '--retries', required=False, type=int, default=10, help=RETRIES_OPTION_DESCRIPTION)\n+@click.option('--trace', required=False, is_flag=True, default=False, help=TRACE_OPTION_DESCRIPTION)\n @Config.validate_access_token\n-def tunnel(run_id, local_port, remote_port, log_file, log_level, timeout, foreground):\n+def tunnel(run_id, local_port, remote_port, connection_timeout,\n+           ssh, ssh_path, ssh_host, ssh_keep, log_file, log_level,\n+           timeout, foreground, retries, trace):\n     \"\"\"\n     Establishes tunnel connection to specified run instance port and serves it as a local port.\n \n     It allows to transfer any tcp traffic from local machine to run instance and works both on Linux and Windows.\n \n-    For example it can be used to allow ssh connections to run instance.\n+    Additionally it enables passwordless ssh connections if the corresponding option is specified.\n+    Once specified ssh is configured both locally and remotely to support passwordless connections.\n+    Passwordless ssh configuration is supported only for openssh client on Linux.\n+\n+    Examples:\n+\n+    I. Example of simple tcp port tunnel connection establishing.\n+\n+    Establish tunnel connection from run (12345) instance port (4567) to the same local port.\n+\n+        pipe tunnel -lp 4567 -rp 4567 12345\n+\n+    II. Example of ssh port tunnel connection establishing with enabled passwordless ssh configuration.\n \n-    \\b\n     First of all establish tunnel connection from run (12345) instance ssh port (22) to some local port (4567).\n-        pipe tunnel -lp 4567 -rp 22 12345\n \n-    \\b\n-    Then connect to run instance using regular ssh client on the configured local port (4567).\n-        ssh -p 4567 root@localhost\n+        pipe tunnel -lp 4567 -rp 22 --ssh 12345\n+\n+    Then connect to run instance using regular ssh client.\n+\n+        ssh root@pipeline-12345\n+\n+    Or transfer some files to and from run instance using regular scp client.\n+\n+        scp file.txt root@pipeline-12345:/common/workdir/file.txt\n+\n+    Advanced tunnel configuration environment variables:\n \n     \\b\n-    Additionally the following environment variables can be used to specify the exact tunnel properties.\n-        CP_CLI_TUNNEL_PROXY_HOST\n-        CP_CLI_TUNNEL_PROXY_PORT\n-        CP_CLI_TUNNEL_TARGET_HOST\n+        CP_CLI_TUNNEL_PROXY_HOST - tunnel proxy host\n+        CP_CLI_TUNNEL_PROXY_PORT - tunnel proxy port\n+        CP_CLI_TUNNEL_TARGET_HOST - tunnel target host\n+        CP_CLI_TUNNEL_SERVER_ADDRESS - tunnel server address\n     \"\"\"\n-    try:\n-        create_tunnel(run_id, local_port, remote_port, log_file, log_level, timeout, foreground)\n-    except Exception as runtime_error:\n-        click.echo('Error: {}'.format(str(runtime_error)), err=True)\n-        sys.exit(1)\n+    if trace:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbdb1d1041737a560b9c0b3fc15a69af15e83d5c"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 304, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}