{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNDI1MTM3", "number": 1657, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTowOTozNFrOFGPcLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDowOTo1MlrOFHMtIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDg4NzUwOnYy", "diffSide": "RIGHT", "path": "api/profiles/dev/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTowOTozNFrOIHKCzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjoyNTo0N1rOIHzQgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3NTUwMQ==", "bodyText": "Let's set the environment variable in deploy/contents/install/install-config to some default value.", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r544375501", "createdAt": "2020-12-16T15:09:34Z", "author": {"login": "tcibinan"}, "path": "api/profiles/dev/application.properties", "diffHunk": "@@ -25,6 +25,7 @@ database.initial.pool.size=5\n \n #monitoring configuration\n monitoring.backend=elastic\n+monitoring.stats.export.xls.template=${CP_API_MONITORING_XLS_TEMPLATE_PATH:}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1MDc1NA==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545050754", "createdAt": "2020-12-17T12:25:47Z", "author": {"login": "Wedds"}, "path": "api/profiles/dev/application.properties", "diffHunk": "@@ -25,6 +25,7 @@ database.initial.pool.size=5\n \n #monitoring configuration\n monitoring.backend=elastic\n+monitoring.stats.export.xls.template=${CP_API_MONITORING_XLS_TEMPLATE_PATH:}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3NTUwMQ=="}, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDkxNTQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToxNDozN1rOIHKTLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjoyNjowM1rOIHzRLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3OTY5Mg==", "bodyText": "Could we use approach similar to the one used in CloudFacadeImpl to determine what kind of writer is required?", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r544379692", "createdAt": "2020-12-16T15:14:37Z", "author": {"login": "tcibinan"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java", "diffHunk": "@@ -93,12 +97,14 @@ public InputStream getStatsForNodeAsInputStream(final String nodeName,\n                                           ? minDuration\n                                           : interval;\n         final List<MonitoringStats> monitoringStats = getStats(nodeName, start, end, adjustedDuration);\n-        final MonitoringStatsWriter statsWriter = new MonitoringStatsWriter();\n-        try {\n-            return new StringInputStream(statsWriter.convertStatsToCsvString(monitoringStats));\n-        } catch (IOException e) {\n-            throw new IllegalStateException(messageHelper.getMessage(MessageConstants.ERROR_BAD_STATS_FILE_ENCODING),\n-                                            e);\n+        switch (type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1MDkyNQ==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545050925", "createdAt": "2020-12-17T12:26:03Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java", "diffHunk": "@@ -93,12 +97,14 @@ public InputStream getStatsForNodeAsInputStream(final String nodeName,\n                                           ? minDuration\n                                           : interval;\n         final List<MonitoringStats> monitoringStats = getStats(nodeName, start, end, adjustedDuration);\n-        final MonitoringStatsWriter statsWriter = new MonitoringStatsWriter();\n-        try {\n-            return new StringInputStream(statsWriter.convertStatsToCsvString(monitoringStats));\n-        } catch (IOException e) {\n-            throw new IllegalStateException(messageHelper.getMessage(MessageConstants.ERROR_BAD_STATS_FILE_ENCODING),\n-                                            e);\n+        switch (type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3OTY5Mg=="}, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDkxOTYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToxNToyNFrOIHKVtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjoyODoxNFrOIHzWOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MDM0Mg==", "bodyText": "I suppose we can get rid of checked exceptions being thrown from CsvMonitoringStatsWriter to simplify the call site.", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r544380342", "createdAt": "2020-12-16T15:15:24Z", "author": {"login": "tcibinan"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java", "diffHunk": "@@ -249,4 +255,13 @@ private LocalDateTime asMonitoringDateTime(final String dateTimeString) {\n         s3.setUsableSpace(s1.getUsableSpace() + s2.getUsableSpace());\n         return s3;\n     }\n+\n+    private InputStream convertStatsToCsv(final List<MonitoringStats> monitoringStats) {\n+        try {\n+            return csvStatsWriter.convertStatsToFile(monitoringStats);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1MjIxOA==", "bodyText": "Removed checked exception from method declaration in the abstract class, process writer-specific exceptions inside a concrete class", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545052218", "createdAt": "2020-12-17T12:28:14Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java", "diffHunk": "@@ -249,4 +255,13 @@ private LocalDateTime asMonitoringDateTime(final String dateTimeString) {\n         s3.setUsableSpace(s1.getUsableSpace() + s2.getUsableSpace());\n         return s3;\n     }\n+\n+    private InputStream convertStatsToCsv(final List<MonitoringStats> monitoringStats) {\n+        try {\n+            return csvStatsWriter.convertStatsToFile(monitoringStats);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MDM0Mg=="}, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDk1NzkzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyMjoyNVrOIHKsCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjoyODoyMlrOIHzWhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NjA1OA==", "bodyText": "I assume a proper error message would be nice in case templatePath is either blank or null.", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r544386058", "createdAt": "2020-12-16T15:22:25Z", "author": {"login": "tcibinan"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.common.MessageConstants;\n+import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;\n+import org.apache.poi.hssf.util.CellReference;\n+import org.apache.poi.openxml4j.exceptions.InvalidFormatException;\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.CellStyle;\n+import org.apache.poi.ss.usermodel.CellType;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.ss.usermodel.WorkbookFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@SuppressWarnings(\"checkstyle:MagicNumber\")\n+public class XlsMonitoringStatsWriter extends AbstractMonitoringStatsWriter {\n+\n+    private static final String SCALED_DATA_SHEET = \"SCALED_DATA\";\n+    private static final String DISK_DATA_SHEET = \"DISKS_SUMMARY\";\n+    private static final String RAW_DATA_SHEET = \"DATA\";\n+    private static final String CPU_CONVERSION_FORMULA = \"DATA!%c%d/100\";\n+    private static final String MEM_CONVERSION_FORMULA = \"DATA!E%d*DATA!%c%d/100/1073741824\";\n+    private static final String NET_CONVERSION_FORMULA = \"DATA!%s/1048576\";\n+    private static final String DISK_USED_FORMULA = \"DATA!%s/1073741824*DATA!%s/100\";\n+    private static final String DISK_FREE_FORMULA = \"DATA!%s/1073741824*(100-DATA!%s)/100\";\n+    private static final Character CPU_AVG_COLUMN = 'C';\n+    private static final Character CPU_MAX_COLUMN = 'D';\n+    private static final Character MEM_AVG_COLUMN = 'F';\n+    private static final Character MEM_MAX_COLUMN = 'G';\n+    private static final long BYTES_IN_GB = 1L << 30;\n+    private static final String DISK_NAME_TEMPLATE = \"%s[%.2fGb]\";\n+    private static final String NUMERIC_CELL_PRECISION_FORMAT = \"0.00\";\n+\n+    private final String templatePath;\n+    private final MessageHelper messageHelper;\n+\n+    public XlsMonitoringStatsWriter(final @Value(\"${monitoring.stats.export.xls.template}\") String templatePath,\n+                                    final MessageHelper messageHelper) {\n+        this.templatePath = templatePath;\n+        this.messageHelper = messageHelper;\n+    }\n+\n+    @Override\n+    public synchronized InputStream convertStatsToFile(final List<MonitoringStats> stats) {\n+        try (Workbook wb = WorkbookFactory.create(new File(templatePath), null, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1MjI5NQ==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545052295", "createdAt": "2020-12-17T12:28:22Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.common.MessageConstants;\n+import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;\n+import org.apache.poi.hssf.util.CellReference;\n+import org.apache.poi.openxml4j.exceptions.InvalidFormatException;\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.CellStyle;\n+import org.apache.poi.ss.usermodel.CellType;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.ss.usermodel.WorkbookFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@SuppressWarnings(\"checkstyle:MagicNumber\")\n+public class XlsMonitoringStatsWriter extends AbstractMonitoringStatsWriter {\n+\n+    private static final String SCALED_DATA_SHEET = \"SCALED_DATA\";\n+    private static final String DISK_DATA_SHEET = \"DISKS_SUMMARY\";\n+    private static final String RAW_DATA_SHEET = \"DATA\";\n+    private static final String CPU_CONVERSION_FORMULA = \"DATA!%c%d/100\";\n+    private static final String MEM_CONVERSION_FORMULA = \"DATA!E%d*DATA!%c%d/100/1073741824\";\n+    private static final String NET_CONVERSION_FORMULA = \"DATA!%s/1048576\";\n+    private static final String DISK_USED_FORMULA = \"DATA!%s/1073741824*DATA!%s/100\";\n+    private static final String DISK_FREE_FORMULA = \"DATA!%s/1073741824*(100-DATA!%s)/100\";\n+    private static final Character CPU_AVG_COLUMN = 'C';\n+    private static final Character CPU_MAX_COLUMN = 'D';\n+    private static final Character MEM_AVG_COLUMN = 'F';\n+    private static final Character MEM_MAX_COLUMN = 'G';\n+    private static final long BYTES_IN_GB = 1L << 30;\n+    private static final String DISK_NAME_TEMPLATE = \"%s[%.2fGb]\";\n+    private static final String NUMERIC_CELL_PRECISION_FORMAT = \"0.00\";\n+\n+    private final String templatePath;\n+    private final MessageHelper messageHelper;\n+\n+    public XlsMonitoringStatsWriter(final @Value(\"${monitoring.stats.export.xls.template}\") String templatePath,\n+                                    final MessageHelper messageHelper) {\n+        this.templatePath = templatePath;\n+        this.messageHelper = messageHelper;\n+    }\n+\n+    @Override\n+    public synchronized InputStream convertStatsToFile(final List<MonitoringStats> stats) {\n+        try (Workbook wb = WorkbookFactory.create(new File(templatePath), null, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NjA1OA=="}, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDk2NTAzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToyMzo0OVrOIHKwag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjozODozNVrOIHztxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NzE3OA==", "bodyText": "Why is this method synchronized? It look likes we don't use any shared objects here.", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r544387178", "createdAt": "2020-12-16T15:23:49Z", "author": {"login": "tcibinan"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.common.MessageConstants;\n+import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;\n+import org.apache.poi.hssf.util.CellReference;\n+import org.apache.poi.openxml4j.exceptions.InvalidFormatException;\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.CellStyle;\n+import org.apache.poi.ss.usermodel.CellType;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.ss.usermodel.WorkbookFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@SuppressWarnings(\"checkstyle:MagicNumber\")\n+public class XlsMonitoringStatsWriter extends AbstractMonitoringStatsWriter {\n+\n+    private static final String SCALED_DATA_SHEET = \"SCALED_DATA\";\n+    private static final String DISK_DATA_SHEET = \"DISKS_SUMMARY\";\n+    private static final String RAW_DATA_SHEET = \"DATA\";\n+    private static final String CPU_CONVERSION_FORMULA = \"DATA!%c%d/100\";\n+    private static final String MEM_CONVERSION_FORMULA = \"DATA!E%d*DATA!%c%d/100/1073741824\";\n+    private static final String NET_CONVERSION_FORMULA = \"DATA!%s/1048576\";\n+    private static final String DISK_USED_FORMULA = \"DATA!%s/1073741824*DATA!%s/100\";\n+    private static final String DISK_FREE_FORMULA = \"DATA!%s/1073741824*(100-DATA!%s)/100\";\n+    private static final Character CPU_AVG_COLUMN = 'C';\n+    private static final Character CPU_MAX_COLUMN = 'D';\n+    private static final Character MEM_AVG_COLUMN = 'F';\n+    private static final Character MEM_MAX_COLUMN = 'G';\n+    private static final long BYTES_IN_GB = 1L << 30;\n+    private static final String DISK_NAME_TEMPLATE = \"%s[%.2fGb]\";\n+    private static final String NUMERIC_CELL_PRECISION_FORMAT = \"0.00\";\n+\n+    private final String templatePath;\n+    private final MessageHelper messageHelper;\n+\n+    public XlsMonitoringStatsWriter(final @Value(\"${monitoring.stats.export.xls.template}\") String templatePath,\n+                                    final MessageHelper messageHelper) {\n+        this.templatePath = templatePath;\n+        this.messageHelper = messageHelper;\n+    }\n+\n+    @Override\n+    public synchronized InputStream convertStatsToFile(final List<MonitoringStats> stats) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1Mjk3Nw==", "bodyText": "Done, opening file in read-only mode should be enough", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545052977", "createdAt": "2020-12-17T12:29:37Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.common.MessageConstants;\n+import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;\n+import org.apache.poi.hssf.util.CellReference;\n+import org.apache.poi.openxml4j.exceptions.InvalidFormatException;\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.CellStyle;\n+import org.apache.poi.ss.usermodel.CellType;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.ss.usermodel.WorkbookFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@SuppressWarnings(\"checkstyle:MagicNumber\")\n+public class XlsMonitoringStatsWriter extends AbstractMonitoringStatsWriter {\n+\n+    private static final String SCALED_DATA_SHEET = \"SCALED_DATA\";\n+    private static final String DISK_DATA_SHEET = \"DISKS_SUMMARY\";\n+    private static final String RAW_DATA_SHEET = \"DATA\";\n+    private static final String CPU_CONVERSION_FORMULA = \"DATA!%c%d/100\";\n+    private static final String MEM_CONVERSION_FORMULA = \"DATA!E%d*DATA!%c%d/100/1073741824\";\n+    private static final String NET_CONVERSION_FORMULA = \"DATA!%s/1048576\";\n+    private static final String DISK_USED_FORMULA = \"DATA!%s/1073741824*DATA!%s/100\";\n+    private static final String DISK_FREE_FORMULA = \"DATA!%s/1073741824*(100-DATA!%s)/100\";\n+    private static final Character CPU_AVG_COLUMN = 'C';\n+    private static final Character CPU_MAX_COLUMN = 'D';\n+    private static final Character MEM_AVG_COLUMN = 'F';\n+    private static final Character MEM_MAX_COLUMN = 'G';\n+    private static final long BYTES_IN_GB = 1L << 30;\n+    private static final String DISK_NAME_TEMPLATE = \"%s[%.2fGb]\";\n+    private static final String NUMERIC_CELL_PRECISION_FORMAT = \"0.00\";\n+\n+    private final String templatePath;\n+    private final MessageHelper messageHelper;\n+\n+    public XlsMonitoringStatsWriter(final @Value(\"${monitoring.stats.export.xls.template}\") String templatePath,\n+                                    final MessageHelper messageHelper) {\n+        this.templatePath = templatePath;\n+        this.messageHelper = messageHelper;\n+    }\n+\n+    @Override\n+    public synchronized InputStream convertStatsToFile(final List<MonitoringStats> stats) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NzE3OA=="}, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1ODI0Nw==", "bodyText": "Just to be clear. There are some concerns regarding thread-safety of apach poi library. Nevertheless it seems like our use case meets thread-safety requirements of the library which can be found here https://poi.apache.org/help/faq.html.", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545058247", "createdAt": "2020-12-17T12:38:35Z", "author": {"login": "tcibinan"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.common.MessageConstants;\n+import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;\n+import org.apache.poi.hssf.util.CellReference;\n+import org.apache.poi.openxml4j.exceptions.InvalidFormatException;\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.CellStyle;\n+import org.apache.poi.ss.usermodel.CellType;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.ss.usermodel.WorkbookFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@SuppressWarnings(\"checkstyle:MagicNumber\")\n+public class XlsMonitoringStatsWriter extends AbstractMonitoringStatsWriter {\n+\n+    private static final String SCALED_DATA_SHEET = \"SCALED_DATA\";\n+    private static final String DISK_DATA_SHEET = \"DISKS_SUMMARY\";\n+    private static final String RAW_DATA_SHEET = \"DATA\";\n+    private static final String CPU_CONVERSION_FORMULA = \"DATA!%c%d/100\";\n+    private static final String MEM_CONVERSION_FORMULA = \"DATA!E%d*DATA!%c%d/100/1073741824\";\n+    private static final String NET_CONVERSION_FORMULA = \"DATA!%s/1048576\";\n+    private static final String DISK_USED_FORMULA = \"DATA!%s/1073741824*DATA!%s/100\";\n+    private static final String DISK_FREE_FORMULA = \"DATA!%s/1073741824*(100-DATA!%s)/100\";\n+    private static final Character CPU_AVG_COLUMN = 'C';\n+    private static final Character CPU_MAX_COLUMN = 'D';\n+    private static final Character MEM_AVG_COLUMN = 'F';\n+    private static final Character MEM_MAX_COLUMN = 'G';\n+    private static final long BYTES_IN_GB = 1L << 30;\n+    private static final String DISK_NAME_TEMPLATE = \"%s[%.2fGb]\";\n+    private static final String NUMERIC_CELL_PRECISION_FORMAT = \"0.00\";\n+\n+    private final String templatePath;\n+    private final MessageHelper messageHelper;\n+\n+    public XlsMonitoringStatsWriter(final @Value(\"${monitoring.stats.export.xls.template}\") String templatePath,\n+                                    final MessageHelper messageHelper) {\n+        this.templatePath = templatePath;\n+        this.messageHelper = messageHelper;\n+    }\n+\n+    @Override\n+    public synchronized InputStream convertStatsToFile(final List<MonitoringStats> stats) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NzE3OA=="}, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTAxNTYwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTozMzowN1rOIHLObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjoyODozM1rOIHzW8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NDg2MQ==", "bodyText": "Probably we can rename this test class to CsvMonitoringStatsWriterTest as long as it tests only the csv functionality.", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r544394861", "createdAt": "2020-12-16T15:33:07Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriterTest.java", "diffHunk": "@@ -49,7 +49,7 @@\n     @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1MjQwMg==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545052402", "createdAt": "2020-12-17T12:28:33Z", "author": {"login": "Wedds"}, "path": "api/src/test/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriterTest.java", "diffHunk": "@@ -49,7 +49,7 @@\n     @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NDg2MQ=="}, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDYxOTAzOnYy", "diffSide": "RIGHT", "path": "api/profiles/dev/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODo1OTozM1rOIHrMuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjoyODo1M1rOIHzXlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxODcxMw==", "bodyText": "Also could you please add the monitoring excel template file to the repo? And unpack it during api deployment in deploy/docker/cp-api-srv/init-api.", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r544918713", "createdAt": "2020-12-17T08:59:33Z", "author": {"login": "tcibinan"}, "path": "api/profiles/dev/application.properties", "diffHunk": "@@ -25,6 +25,7 @@ database.initial.pool.size=5\n \n #monitoring configuration\n monitoring.backend=elastic\n+monitoring.stats.export.xls.template=${CP_API_MONITORING_XLS_TEMPLATE_PATH:}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1MjU2Nw==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545052567", "createdAt": "2020-12-17T12:28:53Z", "author": {"login": "Wedds"}, "path": "api/profiles/dev/application.properties", "diffHunk": "@@ -25,6 +25,7 @@ database.initial.pool.size=5\n \n #monitoring configuration\n monitoring.backend=elastic\n+monitoring.stats.export.xls.template=${CP_API_MONITORING_XLS_TEMPLATE_PATH:}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxODcxMw=="}, "originalCommit": {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTU5NzI0OnYy", "diffSide": "RIGHT", "path": "deploy/docker/cp-api-srv/init-api", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjo0NTo0NlrOIHz-yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjo0NTo0NlrOIHz-yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA2MjYwMQ==", "bodyText": "I'm not exactly sure but the path in the jar seems to be BOOT-INF/classes/static/monitoring_report_template.xls. Could you please doublecheck it?", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545062601", "createdAt": "2020-12-17T12:45:46Z", "author": {"login": "tcibinan"}, "path": "deploy/docker/cp-api-srv/init-api", "diffHunk": "@@ -126,6 +126,11 @@ function sign_and_publish_pipe_win_distribution() {\n     rm -rf pipe\n }\n \n+function unpack_monitoring_template() {\n+    local jar_path=\"$1\"\n+    unzip -p \"$jar_path\" static/monitoring_report_template.xls > \"$CP_API_MONITORING_XLS_TEMPLATE_PATH\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451a7818a8f02ab51b1120634bb517ef4477b8d7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTYxNzM2OnYy", "diffSide": "RIGHT", "path": "deploy/contents/install/install-config", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjo1MDoyNVrOIH0KAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMjo1MDoyNVrOIH0KAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA2NTQ3Mg==", "bodyText": "What about /opt/api/report-templates/monitoring_report_template.xls?", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545065472", "createdAt": "2020-12-17T12:50:25Z", "author": {"login": "tcibinan"}, "path": "deploy/contents/install/install-config", "diffHunk": "@@ -52,6 +52,7 @@ CP_PREF_TEMPLATES_FOLDER_DIRECTORY_EXT=/opt/api/ext/templates/folder-templates\n CP_PREF_TEMPLATES_ERROR_PAGES_DIRECTORY_EXT=/opt/api/ext/templates/error-templates\n CP_PREF_API_STATIC_DIRECTORY_EXT=/opt/api/ext/templates/static\n CP_PREF_API_ETC_DIRECTORY=/opt/api/etc\n+CP_API_MONITORING_XLS_TEMPLATE_PATH=/opt/api/monitoring_report_template.xls", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451a7818a8f02ab51b1120634bb517ef4477b8d7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTk1NTc1OnYy", "diffSide": "RIGHT", "path": "deploy/docker/cp-api-srv/init-api", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDowNjo1NVrOIH3NhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDowNjo1NVrOIH3NhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTExNTUyNQ==", "bodyText": "Could you please initiate CP_API_MONITORING_XLS_TEMPLATE_PATH with the default value similarly to CP_API_SRV_STATIC_DIR?", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545115525", "createdAt": "2020-12-17T14:06:55Z", "author": {"login": "tcibinan"}, "path": "deploy/docker/cp-api-srv/init-api", "diffHunk": "@@ -128,7 +128,8 @@ function sign_and_publish_pipe_win_distribution() {\n \n function unpack_monitoring_template() {\n     local jar_path=\"$1\"\n-    unzip -p \"$jar_path\" static/monitoring_report_template.xls > \"$CP_API_MONITORING_XLS_TEMPLATE_PATH\"\n+    mkdir -p $(dirname $CP_API_MONITORING_XLS_TEMPLATE_PATH)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c66762801e3f37eff67d8d1263c35b438dd8f6a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDg5OTc4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDowMzoyNlrOIIkCFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDowMzoyNlrOIIkCFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg0OTg3Ng==", "bodyText": "It is better to keep CSV as default value to keep existing behaviour", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545849876", "createdAt": "2020-12-18T14:03:26Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java", "diffHunk": "@@ -220,8 +222,9 @@ public void downloadNodeUsageStatisticsReport(\n         @DateTimeFormat(pattern = DATE_TIME_FORMAT)\n         @RequestParam(value = TO, required = false) final LocalDateTime to,\n         @RequestParam(value = INTERVAL, required = false, defaultValue = \"PT1M\") final Duration interval,\n+        @RequestParam(value = REPORT_TYPE, required = false, defaultValue = \"XLS\") final MonitoringReportType type,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d650886155e94d761d04cbefdd1c764ff035758"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDkyNTE1OnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDowOTo1MlrOIIkQrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDowOTo1MlrOIIkQrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1MzYxMw==", "bodyText": "I think that by default we can store the template in the api/src/main/resources/templates/ folder and use classpath:templates/... url as default value for monitoring.stats.export.xls.template. In this case you do not need any additional file manipulations during build and deploy and you still can replace xls template with some external value setting CP_API_MONITORING_XLS_TEMPLATE_PATH env var", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545853613", "createdAt": "2020-12-18T14:09:52Z", "author": {"login": "mzueva"}, "path": "api/build.gradle", "diffHunk": "@@ -35,6 +35,11 @@ task copyCommitRunScripts(type: Copy) {\n     into \"$rootDir/api/src/main/resources/static/commit-run-scripts\"\n }\n \n+task copyMonitoringTemplate(type: Copy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d650886155e94d761d04cbefdd1c764ff035758"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 227, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}