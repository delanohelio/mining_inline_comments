{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwOTI0NDYx", "number": 1624, "title": "Issue 1615 Route53 integration to be able to create custom dns records for the tools", "bodyText": "This PR  is related to #1615 and adds functionality to create custom DNS records with AWS Route53 service (Azure and GCP regions not supported)", "createdAt": "2020-12-02T10:45:37Z", "url": "https://github.com/epam/cloud-pipeline/pull/1624", "merged": true, "mergeCommit": {"oid": "d7a0194ab4fa38dad4bb977ff95d121bcf29ecde"}, "closed": true, "closedAt": "2020-12-23T17:51:13Z", "author": {"login": "SilinPavel"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdifJ6ugH2gAyNTMwOTI0NDYxOjM2NDhlNmU3NDMxNTFjYzUxOTlkZmI3ZWJkOTg5NzNlMjI1OWVjOTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdpCeGWgFqTU1ODEzMTMwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3648e6e743151cc5199dfb7ebd98973e2259ec95", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/3648e6e743151cc5199dfb7ebd98973e2259ec95", "committedDate": "2020-12-03T08:48:33Z", "message": "issue #1615 WIP implement possibility to create custom dns records if specified (aws only)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0d141a49773ee95a8b2715ecb7526b7b0ac9d33", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/f0d141a49773ee95a8b2715ecb7526b7b0ac9d33", "committedDate": "2020-12-03T08:48:33Z", "message": "issue #1615 fail run if custom DNS record couldn't be created"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c3e5e025c83bc11784e43a87c9082047e723441", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/9c3e5e025c83bc11784e43a87c9082047e723441", "committedDate": "2020-12-03T08:48:33Z", "message": "issue #1615 do not fail if DNS record already exist when api trying to create it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f46649cea028c2ae50938c7692b609024769d61c", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/f46649cea028c2ae50938c7692b609024769d61c", "committedDate": "2020-12-03T08:48:34Z", "message": "issue #1615 refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0510ac5cef2b7e13f19c5164d760dab331004a55", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0510ac5cef2b7e13f19c5164d760dab331004a55", "committedDate": "2020-12-03T08:48:34Z", "message": "issue #1615 move removing of DNS records to api server code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a74d4f8e5e5fc88f6ffc48b3dba86d5541efda12", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/a74d4f8e5e5fc88f6ffc48b3dba86d5541efda12", "committedDate": "2020-12-03T08:48:34Z", "message": "issue #1615 small fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24e76195180b1e0ab775b3ed82b8bef68140efa8", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/24e76195180b1e0ab775b3ed82b8bef68140efa8", "committedDate": "2020-12-03T08:48:35Z", "message": "issue #1615 change customDNS flag location"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63869d3c00ea773106abeddde700327edea4eedc", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/63869d3c00ea773106abeddde700327edea4eedc", "committedDate": "2020-12-02T17:27:24Z", "message": "issue #1615 change customDNS flag location"}, "afterCommit": {"oid": "a9658a811ac8ce41ac5f2a094ec98108ac782d75", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/a9658a811ac8ce41ac5f2a094ec98108ac782d75", "committedDate": "2020-12-03T11:00:21Z", "message": "issue #1615 refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c7595d54aeb5ea3d128db5d60ca5ace260bdd44", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0c7595d54aeb5ea3d128db5d60ca5ace260bdd44", "committedDate": "2020-12-03T11:02:52Z", "message": "issue #1615 refactor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9658a811ac8ce41ac5f2a094ec98108ac782d75", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/a9658a811ac8ce41ac5f2a094ec98108ac782d75", "committedDate": "2020-12-03T11:00:21Z", "message": "issue #1615 refactor"}, "afterCommit": {"oid": "0c7595d54aeb5ea3d128db5d60ca5ace260bdd44", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0c7595d54aeb5ea3d128db5d60ca5ace260bdd44", "committedDate": "2020-12-03T11:02:52Z", "message": "issue #1615 refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "435f9959dce4776b0379e59451cef842bf1bb81c", "author": {"user": {"login": "rodichenko", "name": "Mikhail Rodichenko"}}, "url": "https://github.com/epam/cloud-pipeline/commit/435f9959dce4776b0379e59451cef842bf1bb81c", "committedDate": "2020-12-03T13:57:52Z", "message": "Tool settings: 'Use sub-domain' property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27fc6341bf88fcedbfed609d228a544ac04ed9e4", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/27fc6341bf88fcedbfed609d228a544ac04ed9e4", "committedDate": "2020-12-04T16:57:58Z", "message": "issue #1615 fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18cb3eadab789dd13b215ba8823ddbb3b0e7ba1b", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/18cb3eadab789dd13b215ba8823ddbb3b0e7ba1b", "committedDate": "2020-12-04T16:46:24Z", "message": "issue #1615 fixes"}, "afterCommit": {"oid": "27fc6341bf88fcedbfed609d228a544ac04ed9e4", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/27fc6341bf88fcedbfed609d228a544ac04ed9e4", "committedDate": "2020-12-04T16:57:58Z", "message": "issue #1615 fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06622f2a75c59a881dec09e1209eeb41d47a9c3d", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/06622f2a75c59a881dec09e1209eeb41d47a9c3d", "committedDate": "2020-12-06T16:54:25Z", "message": "issue #1615 fixe to create inc file instead of loc file for all locations with custom dns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abe8d3e6b3c31523c251d5eacfa7b7b43d2bea0e", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/abe8d3e6b3c31523c251d5eacfa7b7b43d2bea0e", "committedDate": "2020-12-07T09:37:18Z", "message": "issue #1615 fix to correctly fail run if creation of dns record is impossible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38281883b85092024e5f25d4272855f9bb1dcc7e", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/38281883b85092024e5f25d4272855f9bb1dcc7e", "committedDate": "2020-12-07T12:17:36Z", "message": "issue #1615 do not wait when trying to delete DNS record"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "391f0ea482b8fe2d669efcf5a71f9239bfedecb5", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/391f0ea482b8fe2d669efcf5a71f9239bfedecb5", "committedDate": "2020-12-08T08:33:59Z", "message": "issue #1615 create locations for custom dns asynchronously"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/45122747b4ea27ce806f5e00e6c33db321363db6", "committedDate": "2020-12-08T08:54:05Z", "message": "issue #1615 do not sort locations before process"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MjcyNTM5", "url": "https://github.com/epam/cloud-pipeline/pull/1624#pullrequestreview-547272539", "createdAt": "2020-12-08T14:14:34Z", "commit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoxNDozNFrOIBedNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDo0MzowOFrOIBgTag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQxODQ4Nw==", "bodyText": "I think that edge service is running under admin account, so we can add @PreAuthorize(ADMIN_ONLY) here", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538418487", "createdAt": "2020-12-08T14:14:34Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java", "diffHunk": "@@ -112,4 +113,11 @@ public AllowedInstanceAndPriceTypes getAllowedInstanceAndPriceTypes(final Long t\n     public List<NodeDisk> loadNodeDisks(final String name) {\n         return nodeDiskManager.loadByNodeId(name);\n     }\n+\n+\n+    public InstanceDNSRecord changeInstanceDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyMDA2Mg==", "bodyText": "missing final", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538420062", "createdAt": "2020-12-08T14:16:09Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java", "diffHunk": "@@ -236,4 +238,17 @@ public void downloadNodeUsageStatisticsReport(\n     public Result<List<NodeDisk>> loadNodeDisks(@PathVariable(value = NAME) final String name) {\n         return Result.success(clusterApiService.loadNodeDisks(name));\n     }\n+\n+    @PostMapping(\"/cluster/dnsrecord\")\n+    @ResponseBody\n+    @ApiOperation(\n+            value = \"Creates or deletes dns record.\",\n+            notes = \"Creates or deletes dns record.\",\n+            produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)})\n+    public Result<InstanceDNSRecord> dnsRecordChangeRequest(@RequestParam(required = false) final Long regionId,\n+                                                            @RequestParam(defaultValue = \"false\") final boolean delete,\n+                                                            @RequestBody InstanceDNSRecord dnsRecord) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyMTQ4Ng==", "bodyText": "missing final", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538421486", "createdAt": "2020-12-08T14:17:21Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,23 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    @Override\n+    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyMjQ4OQ==", "bodyText": "redundant empty line", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538422489", "createdAt": "2020-12-08T14:18:13Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,23 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    @Override\n+    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyMzE2OA==", "bodyText": "We can use noneMatch here", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538423168", "createdAt": "2020-12-08T14:18:52Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,23 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    @Override\n+    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n+\n+        if (delete && regionId == null) {\n+            List<PipelineRun> runs = pipelineRunManager.loadAllRunsByServiceURL(dnsRecord.getDnsRecord());\n+            if (!runs.stream().allMatch(pipelineRun -> pipelineRun.getEndDate() != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyNDM0Nw==", "bodyText": "I would also add or !pipelineRun.getStatus().isFinal()", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538424347", "createdAt": "2020-12-08T14:19:55Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,23 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    @Override\n+    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n+\n+        if (delete && regionId == null) {\n+            List<PipelineRun> runs = pipelineRunManager.loadAllRunsByServiceURL(dnsRecord.getDnsRecord());\n+            if (!runs.stream().allMatch(pipelineRun -> pipelineRun.getEndDate() != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyNjI0MA==", "bodyText": "Please, do not mutate input arguments, introduce a new variable instead. You can extract logic to determine actual region id to a separate method.", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538426240", "createdAt": "2020-12-08T14:21:38Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,23 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    @Override\n+    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n+\n+        if (delete && regionId == null) {\n+            List<PipelineRun> runs = pipelineRunManager.loadAllRunsByServiceURL(dnsRecord.getDnsRecord());\n+            if (!runs.stream().allMatch(pipelineRun -> pipelineRun.getEndDate() != null)) {\n+                log.warn(\"Won't try to delete dns record: \" + dnsRecord.getDnsRecord() + \" because it is still used a least in one active run.\");\n+                return null;\n+            } else {\n+                regionId = runs.stream().findFirst().map(pipelineRun -> pipelineRun.getInstance().getCloudRegionId()).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyOTc5Mg==", "bodyText": "What is the goal of using one method for getOrCreate and delete operations? If there is no some issues with this, I'd prefer to split these methods on all layers.", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538429792", "createdAt": "2020-12-08T14:25:11Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java", "diffHunk": "@@ -236,4 +238,17 @@ public void downloadNodeUsageStatisticsReport(\n     public Result<List<NodeDisk>> loadNodeDisks(@PathVariable(value = NAME) final String name) {\n         return Result.success(clusterApiService.loadNodeDisks(name));\n     }\n+\n+    @PostMapping(\"/cluster/dnsrecord\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzMDgzOA==", "bodyText": "We can make Route53Helper a bean to skip constructor call at every method call", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538430838", "createdAt": "2020-12-08T14:26:19Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/AWSInstanceService.java", "diffHunk": "@@ -271,6 +274,25 @@ public CloudInstanceState getInstanceState(final AwsRegion region, final String\n         return null;\n     }\n \n+    @Override\n+    public InstanceDNSRecord changeInstanceDNSRecord(final InstanceDNSRecord dnsRecord, final boolean delete) {\n+        if (dnsRecord.getDnsRecord().contains(preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_BASE))) {\n+            if (delete) {\n+                return new Route53Helper()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzMTg4MA==", "bodyText": "Missing final or you can simply return client without local variable assignment", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538431880", "createdAt": "2020-12-08T14:27:24Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cloud.aws;\n+\n+import com.amazonaws.services.route53.AmazonRoute53;\n+import com.amazonaws.services.route53.AmazonRoute53AsyncClientBuilder;\n+import com.amazonaws.services.route53.model.Change;\n+import com.amazonaws.services.route53.model.ChangeAction;\n+import com.amazonaws.services.route53.model.ChangeBatch;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsResult;\n+import com.amazonaws.services.route53.model.ChangeStatus;\n+import com.amazonaws.services.route53.model.GetChangeRequest;\n+import com.amazonaws.services.route53.model.GetChangeResult;\n+import com.amazonaws.services.route53.model.InvalidChangeBatchException;\n+import com.amazonaws.services.route53.model.ListResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.RRType;\n+import com.amazonaws.services.route53.model.ResourceRecord;\n+import com.amazonaws.services.route53.model.ResourceRecordSet;\n+import com.amazonaws.services.route53.waiters.AmazonRoute53Waiters;\n+import com.amazonaws.waiters.FixedDelayStrategy;\n+import com.amazonaws.waiters.MaxAttemptsRetryStrategy;\n+import com.amazonaws.waiters.PollingStrategy;\n+import com.amazonaws.waiters.WaiterParameters;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RequiredArgsConstructor\n+public class Route53Helper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Route53Helper.class);\n+    private static final long TTL_TIME = 60L;\n+    private static final int MAX_ATTEMPTS = 100;\n+    private static final int DELAY_IN_SECONDS = 1;\n+\n+    public AmazonRoute53 getRoute53Client() {\n+        AmazonRoute53AsyncClientBuilder builder = AmazonRoute53AsyncClientBuilder.standard();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzMjk3OA==", "bodyText": "Let's call method getOrCreate to make it more clear", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538432978", "createdAt": "2020-12-08T14:28:32Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cloud.aws;\n+\n+import com.amazonaws.services.route53.AmazonRoute53;\n+import com.amazonaws.services.route53.AmazonRoute53AsyncClientBuilder;\n+import com.amazonaws.services.route53.model.Change;\n+import com.amazonaws.services.route53.model.ChangeAction;\n+import com.amazonaws.services.route53.model.ChangeBatch;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsResult;\n+import com.amazonaws.services.route53.model.ChangeStatus;\n+import com.amazonaws.services.route53.model.GetChangeRequest;\n+import com.amazonaws.services.route53.model.GetChangeResult;\n+import com.amazonaws.services.route53.model.InvalidChangeBatchException;\n+import com.amazonaws.services.route53.model.ListResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.RRType;\n+import com.amazonaws.services.route53.model.ResourceRecord;\n+import com.amazonaws.services.route53.model.ResourceRecordSet;\n+import com.amazonaws.services.route53.waiters.AmazonRoute53Waiters;\n+import com.amazonaws.waiters.FixedDelayStrategy;\n+import com.amazonaws.waiters.MaxAttemptsRetryStrategy;\n+import com.amazonaws.waiters.PollingStrategy;\n+import com.amazonaws.waiters.WaiterParameters;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RequiredArgsConstructor\n+public class Route53Helper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Route53Helper.class);\n+    private static final long TTL_TIME = 60L;\n+    private static final int MAX_ATTEMPTS = 100;\n+    private static final int DELAY_IN_SECONDS = 1;\n+\n+    public AmazonRoute53 getRoute53Client() {\n+        AmazonRoute53AsyncClientBuilder builder = AmazonRoute53AsyncClientBuilder.standard();\n+        return builder.build();\n+    }\n+\n+    public InstanceDNSRecord createDNSRecord(final String hostedZoneId, final InstanceDNSRecord dnsRecord) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzMzY2MA==", "bodyText": "Missing final", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538433660", "createdAt": "2020-12-08T14:29:15Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cloud.aws;\n+\n+import com.amazonaws.services.route53.AmazonRoute53;\n+import com.amazonaws.services.route53.AmazonRoute53AsyncClientBuilder;\n+import com.amazonaws.services.route53.model.Change;\n+import com.amazonaws.services.route53.model.ChangeAction;\n+import com.amazonaws.services.route53.model.ChangeBatch;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsResult;\n+import com.amazonaws.services.route53.model.ChangeStatus;\n+import com.amazonaws.services.route53.model.GetChangeRequest;\n+import com.amazonaws.services.route53.model.GetChangeResult;\n+import com.amazonaws.services.route53.model.InvalidChangeBatchException;\n+import com.amazonaws.services.route53.model.ListResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.RRType;\n+import com.amazonaws.services.route53.model.ResourceRecord;\n+import com.amazonaws.services.route53.model.ResourceRecordSet;\n+import com.amazonaws.services.route53.waiters.AmazonRoute53Waiters;\n+import com.amazonaws.waiters.FixedDelayStrategy;\n+import com.amazonaws.waiters.MaxAttemptsRetryStrategy;\n+import com.amazonaws.waiters.PollingStrategy;\n+import com.amazonaws.waiters.WaiterParameters;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RequiredArgsConstructor\n+public class Route53Helper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Route53Helper.class);\n+    private static final long TTL_TIME = 60L;\n+    private static final int MAX_ATTEMPTS = 100;\n+    private static final int DELAY_IN_SECONDS = 1;\n+\n+    public AmazonRoute53 getRoute53Client() {\n+        AmazonRoute53AsyncClientBuilder builder = AmazonRoute53AsyncClientBuilder.standard();\n+        return builder.build();\n+    }\n+\n+    public InstanceDNSRecord createDNSRecord(final String hostedZoneId, final InstanceDNSRecord dnsRecord) {\n+        LOGGER.info(\"Creating DNS record for hostedZoneId: \" + hostedZoneId + \" record: \" + dnsRecord.getDnsRecord() + \" and target: \" + dnsRecord.getTarget());\n+        final AmazonRoute53 client = getRoute53Client();\n+        if (!isDnsRecordExists(hostedZoneId, dnsRecord, client)) {\n+            try {\n+                final ChangeResourceRecordSetsResult result = performChangeRequest(hostedZoneId,\n+                        dnsRecord.getDnsRecord(), dnsRecord.getTarget(), client, ChangeAction.CREATE, true);\n+                return buildInstanceDNSRecord(dnsRecord.getDnsRecord(), dnsRecord.getTarget(), result.getChangeInfo().getStatus());\n+            } catch (InvalidChangeBatchException e) {\n+                LOGGER.error(\"AWS 53 Route service responded with: \" + e.getLocalizedMessage());\n+                if (e.getLocalizedMessage().matches(\".*Tried to create resource record set.*but it already exists.*\")) {\n+                    LOGGER.info(\"DNS Record already exists, API will proceed with this record.\");\n+                } else {\n+                    throw e;\n+                }\n+            }\n+        }\n+        return buildInstanceDNSRecord(dnsRecord.getDnsRecord(), dnsRecord.getTarget(), InstanceDNSRecord.DNSRecordStatus.INSYNC.name());\n+    }\n+\n+    public InstanceDNSRecord removeDNSRecord(final String hostedZoneId, final InstanceDNSRecord dnsRecord) {\n+        LOGGER.info(\"Removing DNS record: \" + dnsRecord.getDnsRecord() + \" for target: \" + dnsRecord.getTarget() + \" in hostedZoneId: \" + hostedZoneId);\n+        final AmazonRoute53 client = getRoute53Client();\n+        if (!isDnsRecordExists(hostedZoneId, dnsRecord, client)) {\n+            LOGGER.info(\"DNS record: \" + dnsRecord.getDnsRecord() + \" type: \" + getRRType(dnsRecord.getTarget()) + \" for target: \" + dnsRecord.getTarget()\n+                    + \" in hostedZoneId: \" + hostedZoneId + \" doesn't exists\");\n+            return buildInstanceDNSRecord(dnsRecord.getDnsRecord(), dnsRecord.getTarget(), InstanceDNSRecord.DNSRecordStatus.INSYNC.name());\n+        } else {\n+            final ChangeResourceRecordSetsResult result = performChangeRequest(hostedZoneId,\n+                    dnsRecord.getDnsRecord(), dnsRecord.getTarget(), client, ChangeAction.DELETE, false);\n+            return buildInstanceDNSRecord(dnsRecord.getDnsRecord(), dnsRecord.getTarget(), result.getChangeInfo().getStatus());\n+        }\n+\n+    }\n+\n+    private boolean isDnsRecordExists(final String hostedZoneId, final InstanceDNSRecord dnsRecord, final AmazonRoute53 client) {\n+        return client.listResourceRecordSets(new ListResourceRecordSetsRequest()\n+                .withHostedZoneId(hostedZoneId)\n+                .withStartRecordName(dnsRecord.getDnsRecord())\n+                .withStartRecordType(getRRType(dnsRecord.getTarget()))).getResourceRecordSets().stream()\n+                .map(ResourceRecordSet::getName)\n+                .anyMatch(resourceRecord -> resourceRecord.equalsIgnoreCase(dnsRecord.getDnsRecord())\n+                        || resourceRecord.equalsIgnoreCase(dnsRecord.getDnsRecord() + \".\"));\n+    }\n+\n+    private InstanceDNSRecord buildInstanceDNSRecord(final String dnsRecord,\n+                                                     final String target, final String status) {\n+        return new InstanceDNSRecord(dnsRecord, target, getStatus(status));\n+    }\n+\n+    private InstanceDNSRecord.DNSRecordStatus getStatus(final String status) {\n+        switch (status) {\n+            case \"PENDING\":\n+                return InstanceDNSRecord.DNSRecordStatus.PENDING;\n+            case \"INSYNC\":\n+                return InstanceDNSRecord.DNSRecordStatus.INSYNC;\n+            default:\n+                return InstanceDNSRecord.DNSRecordStatus.NO_OP;\n+        }\n+    }\n+\n+    private ChangeResourceRecordSetsResult performChangeRequest(final String hostedZoneId, final String dnsRecord,\n+                                                                final String target, final AmazonRoute53 client,\n+                                                                final ChangeAction action, final boolean await) {\n+        ChangeResourceRecordSetsResult result = client.changeResourceRecordSets(new ChangeResourceRecordSetsRequest()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzOTUxNA==", "bodyText": "I'd suggest to move dns method/methods to a new apiService and manager classes, as ClusterApiService mostly works with kubernetes cluster, except for instance offers (but is another topic to discuss).", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538439514", "createdAt": "2020-12-08T14:34:52Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java", "diffHunk": "@@ -112,4 +113,11 @@ public AllowedInstanceAndPriceTypes getAllowedInstanceAndPriceTypes(final Long t\n     public List<NodeDisk> loadNodeDisks(final String name) {\n         return nodeDiskManager.loadByNodeId(name);\n     }\n+\n+\n+    public InstanceDNSRecord changeInstanceDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0MTc4Mg==", "bodyText": "Can't we use JsonMapper.parseData instead of creating a new mapper?", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538441782", "createdAt": "2020-12-08T14:36:58Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.cleaner;\n+\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cloud.aws.Route53Helper;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.utils.UtilsManager;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+@Service\n+@Slf4j\n+public class DNSRecordRunCleaner implements RunCleaner {\n+\n+    private static final String HTTP = \"http://\";\n+    private static final String HTTPS = \"https://\";\n+    private static final String DELIMITER = \"/\";\n+    private static final String PORT_DELIMITER = \":\";\n+\n+    private final PreferenceManager preferenceManager;\n+    private final UtilsManager utilsManager;\n+    private final Route53Helper route53Helper = new Route53Helper();\n+    private final ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0MjI3MQ==", "bodyText": "missing final", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538442271", "createdAt": "2020-12-08T14:37:21Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.cleaner;\n+\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cloud.aws.Route53Helper;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.utils.UtilsManager;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+@Service\n+@Slf4j\n+public class DNSRecordRunCleaner implements RunCleaner {\n+\n+    private static final String HTTP = \"http://\";\n+    private static final String HTTPS = \"https://\";\n+    private static final String DELIMITER = \"/\";\n+    private static final String PORT_DELIMITER = \":\";\n+\n+    private final PreferenceManager preferenceManager;\n+    private final UtilsManager utilsManager;\n+    private final Route53Helper route53Helper = new Route53Helper();\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    public DNSRecordRunCleaner(final PreferenceManager preferenceManager,\n+                               UtilsManager utilsManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0NDM1NA==", "bodyText": "Let's invert if to improve readability.\nif (StringUtils.isEmpty(serviceUrls)) {\n    return;\n}\nfinal String hostZoneId = ...\n...", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538444354", "createdAt": "2020-12-08T14:39:10Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.cleaner;\n+\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cloud.aws.Route53Helper;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.utils.UtilsManager;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+@Service\n+@Slf4j\n+public class DNSRecordRunCleaner implements RunCleaner {\n+\n+    private static final String HTTP = \"http://\";\n+    private static final String HTTPS = \"https://\";\n+    private static final String DELIMITER = \"/\";\n+    private static final String PORT_DELIMITER = \":\";\n+\n+    private final PreferenceManager preferenceManager;\n+    private final UtilsManager utilsManager;\n+    private final Route53Helper route53Helper = new Route53Helper();\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    public DNSRecordRunCleaner(final PreferenceManager preferenceManager,\n+                               UtilsManager utilsManager) {\n+        this.preferenceManager = preferenceManager;\n+        this.utilsManager = utilsManager;\n+    }\n+\n+    @Override\n+    public void cleanResources(final PipelineRun run) {\n+        final String serviceUrls = run.getServiceUrl();\n+        if (!StringUtils.isEmpty(serviceUrls)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0NTU2Nw==", "bodyText": "missing final", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538445567", "createdAt": "2020-12-08T14:40:18Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java", "diffHunk": "@@ -53,6 +53,14 @@ public String buildSshUrl(Long runId) {\n         return buildUrl(SSH_URL_TEMPLATE, runId);\n     }\n \n+    public String getEdgeUrl() {\n+        ServiceDescription service = kubeManager.getServiceByLabel(edgeLabel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0NzQ4Nw==", "bodyText": "It seems that some code is duplicated with buildUrl method", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538447487", "createdAt": "2020-12-08T14:42:00Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java", "diffHunk": "@@ -53,6 +53,14 @@ public String buildSshUrl(Long runId) {\n         return buildUrl(SSH_URL_TEMPLATE, runId);\n     }\n \n+    public String getEdgeUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0ODc0Ng==", "bodyText": "Is ip enough here? If it is so, let's rename method to getEdgeIP", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538448746", "createdAt": "2020-12-08T14:43:08Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java", "diffHunk": "@@ -53,6 +53,14 @@ public String buildSshUrl(Long runId) {\n         return buildUrl(SSH_URL_TEMPLATE, runId);\n     }\n \n+    public String getEdgeUrl() {\n+        ServiceDescription service = kubeManager.getServiceByLabel(edgeLabel);\n+        if (service == null) {\n+            throw new IllegalArgumentException(\"Edge server is not registered in the cluster.\");\n+        }\n+        return service.getIp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "committedDate": "2020-12-08T16:15:19Z", "message": "issue #1615 correction on review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db6ca713431f437ef37455ba04edf049c14e247f", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/db6ca713431f437ef37455ba04edf049c14e247f", "committedDate": "2020-12-08T16:30:47Z", "message": "issue #1615 move methods to new manager and service classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70f2fbcad92a3cd3157ac1aa6e2536524143360d", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/70f2fbcad92a3cd3157ac1aa6e2536524143360d", "committedDate": "2020-12-09T10:34:33Z", "message": "issue #1615 corrections on review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTA4MTQ5", "url": "https://github.com/epam/cloud-pipeline/pull/1624#pullrequestreview-549108149", "createdAt": "2020-12-10T11:35:21Z", "commit": {"oid": "70f2fbcad92a3cd3157ac1aa6e2536524143360d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTozNToyMVrOIDE5kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTo0MzoxM1rOIDFLsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA5NjkxMg==", "bodyText": "Please, do not use star imports in the source code", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540096912", "createdAt": "2020-12-10T11:35:21Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java", "diffHunk": "@@ -39,9 +40,7 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Service;\n \n-import static com.epam.pipeline.security.acl.AclExpressions.NODE_READ;\n-import static com.epam.pipeline.security.acl.AclExpressions.NODE_READ_FILTER;\n-import static com.epam.pipeline.security.acl.AclExpressions.NODE_STOP;\n+import static com.epam.pipeline.security.acl.AclExpressions.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f2fbcad92a3cd3157ac1aa6e2536524143360d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA5OTU0MA==", "bodyText": "It is better to use CloudFacade here rather than directly call AWS implementation as run may be assigned to any of cloud regions.", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540099540", "createdAt": "2020-12-10T11:39:48Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.cleaner;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cloud.aws.Route53Helper;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.utils.UtilsManager;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Service\n+@Slf4j\n+public class DNSRecordRunCleaner implements RunCleaner {\n+\n+    private static final String HTTP = \"http://\";\n+    private static final String HTTPS = \"https://\";\n+    private static final String DELIMITER = \"/\";\n+    private static final String PORT_DELIMITER = \":\";\n+\n+    private final PreferenceManager preferenceManager;\n+    private final UtilsManager utilsManager;\n+    private final Route53Helper route53Helper;\n+\n+    public DNSRecordRunCleaner(final PreferenceManager preferenceManager,\n+                               final UtilsManager utilsManager,\n+                               final Route53Helper route53Helper) {\n+        this.preferenceManager = preferenceManager;\n+        this.utilsManager = utilsManager;\n+        this.route53Helper = route53Helper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f2fbcad92a3cd3157ac1aa6e2536524143360d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEwMTU1Mg==", "bodyText": "Unused import", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540101552", "createdAt": "2020-12-10T11:43:13Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java", "diffHunk": "@@ -22,6 +22,7 @@\n import java.util.List;\n \n import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f2fbcad92a3cd3157ac1aa6e2536524143360d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/9b2d7ab8169fe76fc2a606fde7055af897268eb3", "committedDate": "2020-12-11T11:18:53Z", "message": "issue #1615 fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f493759060fe6a91966c14cd8088b79a623db030", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/f493759060fe6a91966c14cd8088b79a623db030", "committedDate": "2020-12-10T12:48:31Z", "message": "issue #1615 fix tests"}, "afterCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/9b2d7ab8169fe76fc2a606fde7055af897268eb3", "committedDate": "2020-12-11T11:18:53Z", "message": "issue #1615 fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMDMwMjMz", "url": "https://github.com/epam/cloud-pipeline/pull/1624#pullrequestreview-550030233", "createdAt": "2020-12-11T11:47:48Z", "commit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo0Nzo0OFrOID1ZGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjowMToxNFrOID10_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MTQxNw==", "bodyText": "Do not use star imports", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540891417", "createdAt": "2020-12-11T11:47:48Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/acl/cluster/InfrastructureApiService.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.manager.cluster.InfrastructureManager;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import static com.epam.pipeline.security.acl.AclExpressions.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MTg3MA==", "bodyText": "missing final", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540891870", "createdAt": "2020-12-11T11:48:38Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,17 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    public InstanceDNSRecord createDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n+        AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MTkwMA==", "bodyText": "missing final", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540891900", "createdAt": "2020-12-11T11:48:42Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,17 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    public InstanceDNSRecord createDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n+        AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n+        return getInstanceService(cloudRegion).getOrCreateInstanceDNSRecord(dnsRecord);\n+    }\n+\n+    @Override\n+    public InstanceDNSRecord removeDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n+        AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MjU3MQ==", "bodyText": "license year -> 2017-2020", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540892571", "createdAt": "2020-12-11T11:49:58Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MzIzMg==", "bodyText": "Let's use @Sl4j annotation instead of declaring a logger manually", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540893232", "createdAt": "2020-12-11T11:51:22Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cloud.aws;\n+\n+import com.amazonaws.services.route53.AmazonRoute53;\n+import com.amazonaws.services.route53.AmazonRoute53AsyncClientBuilder;\n+import com.amazonaws.services.route53.model.Change;\n+import com.amazonaws.services.route53.model.ChangeAction;\n+import com.amazonaws.services.route53.model.ChangeBatch;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsResult;\n+import com.amazonaws.services.route53.model.ChangeStatus;\n+import com.amazonaws.services.route53.model.GetChangeRequest;\n+import com.amazonaws.services.route53.model.GetChangeResult;\n+import com.amazonaws.services.route53.model.InvalidChangeBatchException;\n+import com.amazonaws.services.route53.model.ListResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.RRType;\n+import com.amazonaws.services.route53.model.ResourceRecord;\n+import com.amazonaws.services.route53.model.ResourceRecordSet;\n+import com.amazonaws.services.route53.waiters.AmazonRoute53Waiters;\n+import com.amazonaws.waiters.FixedDelayStrategy;\n+import com.amazonaws.waiters.MaxAttemptsRetryStrategy;\n+import com.amazonaws.waiters.PollingStrategy;\n+import com.amazonaws.waiters.WaiterParameters;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+@RequiredArgsConstructor\n+public class Route53Helper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Route53Helper.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5Mzc1MQ==", "bodyText": "To make logging more readable we can use log.info(\"Creating DNS record for hostedZoneid : {} record {}\",  hostedZoneId, dnsRecord.getDnsRecord())", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540893751", "createdAt": "2020-12-11T11:52:16Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cloud.aws;\n+\n+import com.amazonaws.services.route53.AmazonRoute53;\n+import com.amazonaws.services.route53.AmazonRoute53AsyncClientBuilder;\n+import com.amazonaws.services.route53.model.Change;\n+import com.amazonaws.services.route53.model.ChangeAction;\n+import com.amazonaws.services.route53.model.ChangeBatch;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsResult;\n+import com.amazonaws.services.route53.model.ChangeStatus;\n+import com.amazonaws.services.route53.model.GetChangeRequest;\n+import com.amazonaws.services.route53.model.GetChangeResult;\n+import com.amazonaws.services.route53.model.InvalidChangeBatchException;\n+import com.amazonaws.services.route53.model.ListResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.RRType;\n+import com.amazonaws.services.route53.model.ResourceRecord;\n+import com.amazonaws.services.route53.model.ResourceRecordSet;\n+import com.amazonaws.services.route53.waiters.AmazonRoute53Waiters;\n+import com.amazonaws.waiters.FixedDelayStrategy;\n+import com.amazonaws.waiters.MaxAttemptsRetryStrategy;\n+import com.amazonaws.waiters.PollingStrategy;\n+import com.amazonaws.waiters.WaiterParameters;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+@RequiredArgsConstructor\n+public class Route53Helper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Route53Helper.class);\n+    private static final long TTL_TIME = 60L;\n+    private static final int MAX_ATTEMPTS = 100;\n+    private static final int DELAY_IN_SECONDS = 1;\n+\n+    public InstanceDNSRecord createDNSRecord(final String hostedZoneId, final InstanceDNSRecord dnsRecord) {\n+        LOGGER.info(\"Creating DNS record for hostedZoneId: \" + hostedZoneId + \" record: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NDczOA==", "bodyText": "License year 2017-2020", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540894738", "createdAt": "2020-12-11T11:54:07Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/InfrastructureManager.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NTAxNA==", "bodyText": "Missing final", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540895014", "createdAt": "2020-12-11T11:54:33Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.cleaner;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cloud.CloudFacade;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.utils.UtilsManager;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Service\n+@Slf4j\n+public class DNSRecordRunCleaner implements RunCleaner {\n+\n+    private static final String HTTP = \"http://\";\n+    private static final String HTTPS = \"https://\";\n+    private static final String DELIMITER = \"/\";\n+    private static final String PORT_DELIMITER = \":\";\n+\n+    private final PreferenceManager preferenceManager;\n+    private final UtilsManager utilsManager;\n+    private final CloudFacade cloudFacade;\n+\n+    public DNSRecordRunCleaner(final PreferenceManager preferenceManager,\n+                               final UtilsManager utilsManager,\n+                               final CloudFacade cloudFacade) {\n+        this.preferenceManager = preferenceManager;\n+        this.utilsManager = utilsManager;\n+        this.cloudFacade = cloudFacade;\n+    }\n+\n+    @Override\n+    public void cleanResources(final PipelineRun run) {\n+        final String serviceUrls = run.getServiceUrl();\n+        if (StringUtils.isEmpty(serviceUrls)) {\n+            return;\n+        }\n+\n+        final String hostZoneId = preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_ID);\n+        final String hostZoneUrlBase = preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_BASE);\n+        Assert.isTrue(\n+                !StringUtils.isEmpty(hostZoneId) && !StringUtils.isEmpty(hostZoneUrlBase),\n+                \"instance.dns.hosted.zone.id or instance.dns.hosted.zone.base is empty can't remove DNS record.\"\n+        );\n+\n+        List<Map<String, String>> serviceUrlsList = JsonMapper.parseData(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NzA1OA==", "bodyText": "At the moment this method will throw an error for all runs with service URLs if DNS settings are not configured. Can we at first check whether run uses custom DNS approach at first and only then check the settings?", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540897058", "createdAt": "2020-12-11T11:58:20Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.cleaner;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cloud.CloudFacade;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.utils.UtilsManager;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Service\n+@Slf4j\n+public class DNSRecordRunCleaner implements RunCleaner {\n+\n+    private static final String HTTP = \"http://\";\n+    private static final String HTTPS = \"https://\";\n+    private static final String DELIMITER = \"/\";\n+    private static final String PORT_DELIMITER = \":\";\n+\n+    private final PreferenceManager preferenceManager;\n+    private final UtilsManager utilsManager;\n+    private final CloudFacade cloudFacade;\n+\n+    public DNSRecordRunCleaner(final PreferenceManager preferenceManager,\n+                               final UtilsManager utilsManager,\n+                               final CloudFacade cloudFacade) {\n+        this.preferenceManager = preferenceManager;\n+        this.utilsManager = utilsManager;\n+        this.cloudFacade = cloudFacade;\n+    }\n+\n+    @Override\n+    public void cleanResources(final PipelineRun run) {\n+        final String serviceUrls = run.getServiceUrl();\n+        if (StringUtils.isEmpty(serviceUrls)) {\n+            return;\n+        }\n+\n+        final String hostZoneId = preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_ID);\n+        final String hostZoneUrlBase = preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_BASE);\n+        Assert.isTrue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5ODAxMg==", "bodyText": "Controller should use InfrastructureApiService not InfrastructureManager", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540898012", "createdAt": "2020-12-11T12:00:11Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java", "diffHunk": "@@ -236,4 +240,16 @@ public void downloadNodeUsageStatisticsReport(\n     public Result<List<NodeDisk>> loadNodeDisks(@PathVariable(value = NAME) final String name) {\n         return Result.success(clusterApiService.loadNodeDisks(name));\n     }\n+\n+    @PostMapping(\"/cluster/dnsrecord\")\n+    @ResponseBody\n+    @ApiOperation(\n+            value = \"Creates dns record.\",\n+            notes = \"Creates dns record.\",\n+            produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)})\n+    public Result<InstanceDNSRecord> requestDnsRecord(@RequestParam final Long regionId,\n+                                                      @RequestBody final InstanceDNSRecord dnsRecord) {\n+        return Result.success(infrastructureManager.createInstanceDNSRecord(regionId, dnsRecord));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5ODUwMA==", "bodyText": "Wrong message Deletion -> Creation", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540898500", "createdAt": "2020-12-11T12:01:07Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/azure/AzureInstanceService.java", "diffHunk": "@@ -257,6 +258,15 @@ public CloudInstanceState getInstanceState(final AzureRegion region, final Strin\n         }\n     }\n \n+    public InstanceDNSRecord getOrCreateInstanceDNSRecord(final InstanceDNSRecord dnsRecord) {\n+        throw new UnsupportedOperationException(\"Deletion of DNS record doesn't work with Azure provider yet.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5ODU1OA==", "bodyText": "Wrong message Deletion -> Creation", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540898558", "createdAt": "2020-12-11T12:01:14Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/gcp/GCPInstanceService.java", "diffHunk": "@@ -214,6 +215,16 @@ public void attachDisk(final GCPRegion region, final Long runId, final DiskAttac\n         throw new UnsupportedOperationException(\"Disk attaching doesn't work with GCP provider yet.\");\n     }\n \n+    @Override\n+    public InstanceDNSRecord getOrCreateInstanceDNSRecord(final InstanceDNSRecord dnsRecord) {\n+        throw new UnsupportedOperationException(\"Deletion of DNS record doesn't work with GCP provider yet.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMDQ2NzM4", "url": "https://github.com/epam/cloud-pipeline/pull/1624#pullrequestreview-550046738", "createdAt": "2020-12-11T12:13:56Z", "commit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjoxMzo1NlrOID2OMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjoxMzo1NlrOID2OMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkwNTAwOQ==", "bodyText": "With this approach plain endpoints are initialised only when all dns records will be created, so users will have to wait. Can we improve this?", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540905009", "createdAt": "2020-12-11T12:13:56Z", "author": {"login": "mzueva"}, "path": "deploy/docker/cp-edge/sync-routes.py", "diffHunk": "@@ -680,3 +780,5 @@ def load_pods_for_runs_with_endpoints():\n                 print('Service url ({}) assigned to RunID: {}'.format(service_urls_json, run_id))\n         else:\n                 print('Service url was not assigned due to API errors')\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3"}, "originalPosition": 354}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "committedDate": "2020-12-11T12:42:33Z", "message": "issue #1615 corrections on review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57a1880572d32dba1bbdbbf80dfe6af9163bbf47", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/57a1880572d32dba1bbdbbf80dfe6af9163bbf47", "committedDate": "2020-12-11T13:59:16Z", "message": "issue #1615 reload nginx two times"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMTAyOTg1", "url": "https://github.com/epam/cloud-pipeline/pull/1624#pullrequestreview-550102985", "createdAt": "2020-12-11T13:37:29Z", "commit": {"oid": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMzozNzoyOVrOID5FNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDowNzozNlrOID6RYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1MTg2MQ==", "bodyText": "Looks like this can be simplified to just\nif service_spec[\"create_dns_record\"] and not service_spec[\"custom_domain\"]:\n        dns_services_pool.apply_async(create_dns_service_location, (service_spec, added_route))", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540951861", "createdAt": "2020-12-11T13:37:29Z", "author": {"login": "tcibinan"}, "path": "deploy/docker/cp-edge/sync-routes.py", "diffHunk": "@@ -596,66 +738,24 @@ def load_pods_for_runs_with_endpoints():\n     sensitive_routes = json.load(sensitive_routes_file)\n \n service_url_dict = {}\n+\n+# loop through all routes that we need to create, if this route doesn't have option to create custom DNS record\n+# we handle it it the main thread, if custom DNS record should be created, since it consume some time ~ 20 sec,\n+# we put it to the async pool and store result future.\n for added_route in routes_to_add:\n         service_spec = services_list[added_route]\n \n-        has_custom_domain = service_spec[\"custom_domain\"] is not None\n-        service_hostname = service_spec[\"custom_domain\"] if has_custom_domain else edge_service_external_ip\n-        service_location = '/{}/'.format(service_spec[\"edge_location\"]) if service_spec[\"edge_location\"] else \"/\"\n-\n-        nginx_route_definition = nginx_loc_module_template_contents\\\n-                .replace('{edge_route_location}', service_location)\\\n-                .replace('{edge_route_target}', service_spec[\"edge_target\"])\\\n-                .replace('{edge_route_owner}', service_spec[\"pod_owner\"]) \\\n-                .replace('{run_id}', service_spec[\"run_id\"]) \\\n-                .replace('{edge_route_shared_users}', service_spec[\"shared_users_sids\"]) \\\n-                .replace('{edge_route_shared_groups}', service_spec[\"shared_groups_sids\"]) \\\n-                .replace('{edge_route_schema}', 'https' if service_spec[\"is_ssl_backend\"] else 'http') \\\n-                .replace('{additional}', service_spec[\"additional\"])\n-\n-        nginx_sensitive_route_definitions = []\n-        if service_spec[\"sensitive\"]:\n-                for sensitive_route in sensitive_routes:\n-                        # proxy_pass cannot have trailing slash for regexp locations\n-                        edge_target = service_spec[\"edge_target\"]\n-                        if edge_target.endswith(\"/\"):\n-                                edge_target = edge_target[:-1]\n-                        nginx_sensitive_route_definition = nginx_sensitive_loc_module_template_contents \\\n-                                .replace('{edge_route_location}', service_location + sensitive_route['route']) \\\n-                                .replace('{edge_route_sensitive_methods}', '|'.join(sensitive_route['methods'])) \\\n-                                .replace('{edge_route_target}', edge_target) \\\n-                                .replace('{edge_route_owner}', service_spec[\"pod_owner\"]) \\\n-                                .replace('{run_id}', service_spec[\"run_id\"]) \\\n-                                .replace('{edge_route_shared_users}', service_spec[\"shared_users_sids\"]) \\\n-                                .replace('{edge_route_shared_groups}', service_spec[\"shared_groups_sids\"]) \\\n-                                .replace('{additional}', service_spec[\"additional\"])\n-                        nginx_sensitive_route_definitions.append(nginx_sensitive_route_definition)\n-\n-        path_to_route = os.path.join(nginx_sites_path, added_route + '.conf')\n-        if service_spec[\"sensitive\"]:\n-                print('Adding new sensitive route: ' + path_to_route)\n+        need_to_create_dns_record = service_spec[\"create_dns_record\"] if service_spec[\"create_dns_record\"] and not service_spec[\"custom_domain\"] else False\n+        if need_to_create_dns_record:\n+                dns_services_pool.apply_async(create_dns_service_location, (service_spec, added_route))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1NjA1Ng==", "bodyText": "Typo in current.", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540956056", "createdAt": "2020-12-11T13:44:12Z", "author": {"login": "tcibinan"}, "path": "deploy/docker/cp-edge/sync-routes.py", "diffHunk": "@@ -500,6 +515,133 @@ def load_pods_for_runs_with_endpoints():\n                                 pods_with_endpoints.append(pod)\n         return pods_with_endpoints\n \n+\n+def create_dns_record(service_spec):\n+        if hosted_zone_base_value is not None:\n+                dns_custom_domain = service_spec[\"edge_location\"] + \".\" + hosted_zone_base_value\n+                dns_record_create = os.path.join(api_url, API_POST_DNS_RECORD\n+                                                 + \"?regionId={regionId}\"\n+                                                 .format(regionId=service_spec[\"cloudRegionId\"]))\n+                data = json.dumps({\n+                        'dnsRecord': dns_custom_domain,\n+                        'target': \"{external_ip}\".format(external_ip=edge_service_external_ip)\n+                })\n+                dns_record_create_response = call_api(dns_record_create, data)\n+                if dns_record_create_response and \"payload\" in dns_record_create_response and \"status\" in \\\n+                        dns_record_create_response[\"payload\"] \\\n+                        and dns_record_create_response[\"payload\"][\"status\"] == \"INSYNC\":\n+                        service_spec[\"custom_domain\"] = dns_custom_domain\n+                        service_spec[\"edge_location\"] = None\n+                else:\n+                        log_task_event(\"CreateDNSRecord\",\n+                                       \"Fail to create DNS record for the run\",\n+                                       service_spec[\"run_id\"],\n+                                       service_spec[\"pod_id\"],\n+                                       \"FAILURE\")\n+                        update_run_status(service_spec[\"run_id\"], \"FAILURE\")\n+                        raise ValueError(\"Couldn't create DNS record\")\n+        else:\n+                log_task_event(\"CreateDNSRecord\",\n+                               \"No hosted zone is configured for currect environment, will not create any DNS records\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk2NzM4MQ==", "bodyText": "I would propose not to throw any exceptions without handling them explicitly. I'm not sure enough how unhanded exceptions will affect threads in the pool. In order to avoid the worst scenario when a single failing endpoint prevents other endpoints from being processed I suggest to handle errors explicitly.\nOf course If you've tested it and you are pretty confident that it is safe then I'm good too.", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540967381", "createdAt": "2020-12-11T14:01:35Z", "author": {"login": "tcibinan"}, "path": "deploy/docker/cp-edge/sync-routes.py", "diffHunk": "@@ -500,6 +515,133 @@ def load_pods_for_runs_with_endpoints():\n                                 pods_with_endpoints.append(pod)\n         return pods_with_endpoints\n \n+\n+def create_dns_record(service_spec):\n+        if hosted_zone_base_value is not None:\n+                dns_custom_domain = service_spec[\"edge_location\"] + \".\" + hosted_zone_base_value\n+                dns_record_create = os.path.join(api_url, API_POST_DNS_RECORD\n+                                                 + \"?regionId={regionId}\"\n+                                                 .format(regionId=service_spec[\"cloudRegionId\"]))\n+                data = json.dumps({\n+                        'dnsRecord': dns_custom_domain,\n+                        'target': \"{external_ip}\".format(external_ip=edge_service_external_ip)\n+                })\n+                dns_record_create_response = call_api(dns_record_create, data)\n+                if dns_record_create_response and \"payload\" in dns_record_create_response and \"status\" in \\\n+                        dns_record_create_response[\"payload\"] \\\n+                        and dns_record_create_response[\"payload\"][\"status\"] == \"INSYNC\":\n+                        service_spec[\"custom_domain\"] = dns_custom_domain\n+                        service_spec[\"edge_location\"] = None\n+                else:\n+                        log_task_event(\"CreateDNSRecord\",\n+                                       \"Fail to create DNS record for the run\",\n+                                       service_spec[\"run_id\"],\n+                                       service_spec[\"pod_id\"],\n+                                       \"FAILURE\")\n+                        update_run_status(service_spec[\"run_id\"], \"FAILURE\")\n+                        raise ValueError(\"Couldn't create DNS record\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3MTM2MQ==", "bodyText": "There is a simple notation for such calls:\ncloud_region_id = run_info.get(\"instance\", {}).get(\"cloudRegionId\") or None", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540971361", "createdAt": "2020-12-11T14:07:36Z", "author": {"login": "tcibinan"}, "path": "deploy/docker/cp-edge/sync-routes.py", "diffHunk": "@@ -353,6 +382,10 @@ def get_service_list(pod_id, pod_run_id, pod_ip):\n                         pretty_url = parse_pretty_url(run_info[\"prettyUrl\"])\n                 sensitive = run_info.get(\"sensitive\") or False\n \n+                cloud_region_id = None\n+                if \"instance\" in run_info:\n+                        cloud_region_id = run_info[\"instance\"].get(\"cloudRegionId\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7c65db12259a0b8abfcb1461bcd8ca4bd05e2e2", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/c7c65db12259a0b8abfcb1461bcd8ca4bd05e2e2", "committedDate": "2020-12-11T14:28:24Z", "message": "issue #1615 check exception in dns record creation thread"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c191ea0637382e845d77920eaa5b52db0b5ef63b", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/c191ea0637382e845d77920eaa5b52db0b5ef63b", "committedDate": "2020-12-11T14:24:44Z", "message": "issue #1615 check exception in dns record creation thread"}, "afterCommit": {"oid": "c7c65db12259a0b8abfcb1461bcd8ca4bd05e2e2", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/c7c65db12259a0b8abfcb1461bcd8ca4bd05e2e2", "committedDate": "2020-12-11T14:28:24Z", "message": "issue #1615 check exception in dns record creation thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28ec04f6ad9dfac3e1ea7cae35e3f22f1cf86397", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/28ec04f6ad9dfac3e1ea7cae35e3f22f1cf86397", "committedDate": "2020-12-13T21:28:11Z", "message": "Merge remote-tracking branch 'origin/develop' into issue_1615_route53_integration\n\n# Conflicts:\n#\tapi/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\n#\tapi/src/test/java/com/epam/pipeline/test/web/ControllerTestBeans.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26875cb1b1ec0a09305d5791aed47df4c380d991", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/26875cb1b1ec0a09305d5791aed47df4c380d991", "committedDate": "2020-12-14T15:10:25Z", "message": "issue #1615 deal with routes without dns first"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f6be288560ea794e855e9b268be514fe3dc52ee", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/1f6be288560ea794e855e9b268be514fe3dc52ee", "committedDate": "2020-12-14T12:44:15Z", "message": "issue #1615 sorting routes before creation of route configs"}, "afterCommit": {"oid": "26875cb1b1ec0a09305d5791aed47df4c380d991", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/26875cb1b1ec0a09305d5791aed47df4c380d991", "committedDate": "2020-12-14T15:10:25Z", "message": "issue #1615 deal with routes without dns first"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MjM2MTMz", "url": "https://github.com/epam/cloud-pipeline/pull/1624#pullrequestreview-555236133", "createdAt": "2020-12-18T07:51:45Z", "commit": {"oid": "26875cb1b1ec0a09305d5791aed47df4c380d991"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MTo0NlrOIIWgsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1MTo0NlrOIIWgsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyODMzNg==", "bodyText": "I wonder if it is safe to modify the same service_url_dict dictionary in multiple threads including the main one. Correct me if I'm wrong but this apply_async call just copies the arguments and therefore the dictionary in multiple threads is just not the same one anymore.", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r545628336", "createdAt": "2020-12-18T07:51:46Z", "author": {"login": "tcibinan"}, "path": "deploy/docker/cp-edge/sync-routes.py", "diffHunk": "@@ -595,88 +759,56 @@ def load_pods_for_runs_with_endpoints():\n with open(nginx_sensitive_routes_config_path, 'r') as sensitive_routes_file:\n     sensitive_routes = json.load(sensitive_routes_file)\n \n+\n+# loop through all routes that we need to create, if this route doesn't have option to create custom DNS record\n+# we handle it in the main thread, if custom DNS record should be created, since it consume some time ~ 20 sec,\n+# we put it to the separate collection to handle it at the end.\n service_url_dict = {}\n+routes_with_custom_dns = set()\n+runs_with_custom_dns = set()\n for added_route in routes_to_add:\n         service_spec = services_list[added_route]\n \n-        has_custom_domain = service_spec[\"custom_domain\"] is not None\n-        service_hostname = service_spec[\"custom_domain\"] if has_custom_domain else edge_service_external_ip\n-        service_location = '/{}/'.format(service_spec[\"edge_location\"]) if service_spec[\"edge_location\"] else \"/\"\n-\n-        nginx_route_definition = nginx_loc_module_template_contents\\\n-                .replace('{edge_route_location}', service_location)\\\n-                .replace('{edge_route_target}', service_spec[\"edge_target\"])\\\n-                .replace('{edge_route_owner}', service_spec[\"pod_owner\"]) \\\n-                .replace('{run_id}', service_spec[\"run_id\"]) \\\n-                .replace('{edge_route_shared_users}', service_spec[\"shared_users_sids\"]) \\\n-                .replace('{edge_route_shared_groups}', service_spec[\"shared_groups_sids\"]) \\\n-                .replace('{edge_route_schema}', 'https' if service_spec[\"is_ssl_backend\"] else 'http') \\\n-                .replace('{additional}', service_spec[\"additional\"])\n-\n-        nginx_sensitive_route_definitions = []\n-        if service_spec[\"sensitive\"]:\n-                for sensitive_route in sensitive_routes:\n-                        # proxy_pass cannot have trailing slash for regexp locations\n-                        edge_target = service_spec[\"edge_target\"]\n-                        if edge_target.endswith(\"/\"):\n-                                edge_target = edge_target[:-1]\n-                        nginx_sensitive_route_definition = nginx_sensitive_loc_module_template_contents \\\n-                                .replace('{edge_route_location}', service_location + sensitive_route['route']) \\\n-                                .replace('{edge_route_sensitive_methods}', '|'.join(sensitive_route['methods'])) \\\n-                                .replace('{edge_route_target}', edge_target) \\\n-                                .replace('{edge_route_owner}', service_spec[\"pod_owner\"]) \\\n-                                .replace('{run_id}', service_spec[\"run_id\"]) \\\n-                                .replace('{edge_route_shared_users}', service_spec[\"shared_users_sids\"]) \\\n-                                .replace('{edge_route_shared_groups}', service_spec[\"shared_groups_sids\"]) \\\n-                                .replace('{additional}', service_spec[\"additional\"])\n-                        nginx_sensitive_route_definitions.append(nginx_sensitive_route_definition)\n-\n-        path_to_route = os.path.join(nginx_sites_path, added_route + '.conf')\n-        if service_spec[\"sensitive\"]:\n-                print('Adding new sensitive route: ' + path_to_route)\n+        if service_spec[\"create_dns_record\"] and not service_spec[\"custom_domain\"]:\n+                runs_with_custom_dns.add(service_spec[\"run_id\"])\n+                routes_with_custom_dns.add(added_route)\n         else:\n-                print('Adding new route: ' + path_to_route)\n-        with open(path_to_route, \"w\") as added_route_file:\n-                added_route_file.write(nginx_route_definition)\n-                if nginx_sensitive_route_definitions:\n-                        for nginx_sensitive_route_definition in nginx_sensitive_route_definitions:\n-                                added_route_file.write(nginx_sensitive_route_definition)\n-\n-        if has_custom_domain:\n-                print('Adding {} route to the server block {}'.format(path_to_route, service_hostname))\n-                add_custom_domain(service_hostname, path_to_route)\n-\n-        service_url = SVC_URL_TMPL.format(external_ip=service_hostname,\n-                                          edge_location=service_spec[\"edge_location\"] if service_spec[\"edge_location\"] else \"\",\n-                                          edge_port=str(edge_service_port),\n-                                          service_name=service_spec[\"service_name\"],\n-                                          is_default_endpoint=service_spec[\"is_default_endpoint\"],\n-                                          external_schema=edge_service_external_schema)\n-        run_id = service_spec[\"run_id\"]\n-        if run_id in service_url_dict:\n-                service_url = service_url_dict[run_id] + ',' + service_url\n-        service_url_dict[run_id] = service_url\n+                create_service_location(service_spec, added_route, service_url_dict)\n \n-# Once all entries are added to the template - run \"nginx -s reload\"\n+# reload nginx first time to enable all urls with out custom dns with \"nginx -s reload\"\n # TODO: Add error handling, if non-zero is returned - restore previous state\n if len(routes_to_add) > 0 or len(routes_to_delete) or routes_were_updated:\n-        print('Reloading nginx config')\n+        print('Reloading nginx config to enable non custom DNS runs')\n         check_output('nginx -s reload', shell=True)\n \n-\n # For all added entries - call API and set Service URL property for the run:\n # -- Get ServiceExternalIP from the EDGE-labeled service description\n # -- http://{ServiceExternalIP}/{PodID}-{svc-port-N}-{N}\n \n for run_id in service_url_dict:\n-        # make array of json objects\n-        service_urls_json = '[' + service_url_dict[run_id] + ']'\n-        update_svc_method = os.path.join(api_url, API_UPDATE_SVC.format(run_id=run_id))\n-        print('Assigning service url ({}) to RunID: {}'.format(service_urls_json, run_id))\n+        if run_id not in runs_with_custom_dns:\n+                update_svc_url_for_run(run_id)\n \n-        data = json.dumps({'serviceUrl': service_urls_json})\n-        response_data = call_api(update_svc_method, data=data)\n-        if response_data:\n-                print('Service url ({}) assigned to RunID: {}'.format(service_urls_json, run_id))\n-        else:\n-                print('Service url was not assigned due to API errors')\n+#Now handle all routes with custom DNS\n+for added_route in routes_with_custom_dns:\n+        service_spec = services_list[added_route]\n+        dns_services_pool.apply_async(create_dns_service_location, (service_spec, added_route, service_url_dict))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26875cb1b1ec0a09305d5791aed47df4c380d991"}, "originalPosition": 398}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcfb7e4d77144d0df59362d2ed36055361b4f79a", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/bcfb7e4d77144d0df59362d2ed36055361b4f79a", "committedDate": "2020-12-18T10:21:27Z", "message": "issue 1615 merge async results synchronously"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf1181e42ede30c71ba06099a08b2df17bc4bac4", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/cf1181e42ede30c71ba06099a08b2df17bc4bac4", "committedDate": "2020-12-22T15:23:46Z", "message": "Merge remote-tracking branch 'origin/develop' into issue_1615_route53_integration\n\n# Conflicts:\n#\tapi/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9380279a830d659fd67f375133aa24b26a90f7d1", "author": {"user": {"login": "SilinPavel", "name": "Pavel Silin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/9380279a830d659fd67f375133aa24b26a90f7d1", "committedDate": "2020-12-22T15:25:02Z", "message": "issue 1615 fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MTMxMzA0", "url": "https://github.com/epam/cloud-pipeline/pull/1624#pullrequestreview-558131304", "createdAt": "2020-12-23T17:20:49Z", "commit": {"oid": "9380279a830d659fd67f375133aa24b26a90f7d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3585, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}