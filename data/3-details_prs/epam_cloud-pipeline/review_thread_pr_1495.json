{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMjY3NjQ4", "number": 1495, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo0OTozOVrOEt2MHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDo0MzozMlrOEvQOdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTA5MjEyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo0OTozOVrOHh4X9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo0OTozOVrOHh4X9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI4ODY5NA==", "bodyText": "There is a helpful method in CustomAssertions utility class. Probably it is better to use such method to assert exceptions rather than using @Test(expected = AccessDeniedException.class) cause it allows us to specify only a single line that should fail.\nassertThrows(AccessDeniedException.class, () -> preferenceApiService.loadAll())", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505288694", "createdAt": "2020-10-15T07:49:39Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();\n+\n+        assertThat(resultPreferenceList.size()).isEqualTo(1);\n+        assertThat(resultPreferenceList.get(0)).isEqualTo(contextualPreference);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadingAllContextualPreferencesForNotAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        preferenceApiService.loadAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTE4MTYzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowMTo1MVrOHh5VRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowMTo1MVrOHh5VRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwNDM4OQ==", "bodyText": "It seems fine to just call it externalResource or even resource because we are already in the context of the contextual preference test class.", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505304389", "createdAt": "2020-10-15T08:01:51Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTIwMzQ0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowNDozOVrOHh5kBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowODowNFrOHh5x_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwODE2Ng==", "bodyText": "What about calling this loaded preferences list just loadedPreferences. Such result prefix is just a boilerplate giving no additional meaning to the reader :)", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505308166", "createdAt": "2020-10-15T08:04:39Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxMTc0Mg==", "bodyText": "In case where there is only one assert in the test method we can even inline the variable and don't think about naming it at all.", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505311742", "createdAt": "2020-10-15T08:08:04Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwODE2Ng=="}, "originalCommit": {"oid": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTIxMzMxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowNjowNVrOHh5qcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowNjowNVrOHh5qcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwOTgxMA==", "bodyText": "We expect here to be at least a simple user role here so let's add corresponding @WithMockUser annotation.", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505309810", "createdAt": "2020-10-15T08:06:05Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();\n+\n+        assertThat(resultPreferenceList.size()).isEqualTo(1);\n+        assertThat(resultPreferenceList.get(0)).isEqualTo(contextualPreference);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadingAllContextualPreferencesForNotAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        preferenceApiService.loadAll();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadContextualPreferenceForAdmin() {\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n+\n+        ContextualPreference resultPreference = preferenceApiService.load(TEST_STRING, cpeResource);\n+\n+        assertThat(resultPreference).isEqualTo(contextualPreference);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadingContextualPreferenceForNotAdmin() {\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n+\n+        preferenceApiService.load(TEST_STRING, cpeResource);\n+    }\n+\n+    @Test\n+    public void shouldSearchContextualPreference() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTg0Mzc0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDo0MzozMlrOHkIYBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDo0MzozMlrOHkIYBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY0ODAwNQ==", "bodyText": "As discussed with the team let's use @WithMockUser wherever possible. Even while testing methods without acl annotations at all. Specified without arguments it mocks the test with user name and role_user authority.", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r507648005", "createdAt": "2020-10-19T10:43:32Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final ContextualPreferenceExternalResource externalResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        assertThat(preferenceApiService.loadAll()).hasSize(1).contains(contextualPreference);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a448e04b0987a02c1eee08ea7dd8e267c3c7310"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 287, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}