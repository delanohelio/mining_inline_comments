{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNjY2MTUz", "number": 1667, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjozNjozM1rOFHxsCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjozOToxMVrOFHxvHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjk4NDQyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserImportManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjozNjozM1rOIJW2Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjozNjozM1rOIJW2Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4MjM3MQ==", "bodyText": "I don't think that @Transactional will work in this case as it is called from public non-transcation methods in the same class", "url": "https://github.com/epam/cloud-pipeline/pull/1667#discussion_r546682371", "createdAt": "2020-12-21T12:36:33Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/user/UserImportManager.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.user;\n+\n+import com.epam.pipeline.entity.metadata.CategoricalAttribute;\n+import com.epam.pipeline.entity.metadata.CategoricalAttributeValue;\n+import com.epam.pipeline.entity.metadata.MetadataEntry;\n+import com.epam.pipeline.entity.metadata.PipeConfValue;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.user.PipelineUser;\n+import com.epam.pipeline.entity.user.PipelineUserEvent;\n+import com.epam.pipeline.entity.user.PipelineUserEventsList;\n+import com.epam.pipeline.entity.user.PipelineUserWithStoragePath;\n+import com.epam.pipeline.entity.user.Role;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeManager;\n+import com.epam.pipeline.manager.metadata.MetadataManager;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class UserImportManager {\n+    private final UserManager userManager;\n+    private final CategoricalAttributeManager categoricalAttributeManager;\n+    private final MetadataManager metadataManager;\n+    private final RoleManager roleManager;\n+\n+    /**\n+     * Registers a new {@link PipelineUser}, {@link Role}, {@link MetadataEntry} for users\n+     * and {@link CategoricalAttribute} if allowed. Otherwise, log event and skip action.\n+     * @param createUser true if user shall be created if not exists\n+     * @param createGroup true if role shall be created if not exists\n+     * @param attributesToCreate the list of metadata keys that shall be created if not exists\n+     * @param file the input file with users\n+     * @return the list of events that happened during user processing\n+     */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n+    public List<PipelineUserEvent> importUsersFromFile(final boolean createUser, final boolean createGroup,\n+                                                       final List<String> attributesToCreate,\n+                                                       final MultipartFile file) {\n+        final List<PipelineUserEvent> events = new ArrayList<>();\n+        final List<CategoricalAttribute> categoricalAttributes = ListUtils\n+                .emptyIfNull(categoricalAttributeManager.loadAll());\n+        final List<PipelineUserWithStoragePath> users =\n+                new UserImporter(events, categoricalAttributes, attributesToCreate).importUsers(file);\n+        categoricalAttributeManager.updateCategoricalAttributes(categoricalAttributes);\n+\n+        users.forEach(user -> {\n+            try {\n+                events.addAll(ListUtils.emptyIfNull(processUser(user, createUser, createGroup, categoricalAttributes)));\n+            } catch (Exception e) {\n+                log.error(String.format(\"Failed to process user '%s'\", user.getUserName()), e);\n+                events.add(PipelineUserEvent.error(user.getUserName(), e.getMessage()));\n+            }\n+        });\n+        return events;\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3807c45f8756dc3a9409eefa84c952dea121d5e"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjk4NTk3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserImportManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjozNjo1NFrOIJW2xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjozNjo1NFrOIJW2xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4MjU2NQ==", "bodyText": "can be replaced with map", "url": "https://github.com/epam/cloud-pipeline/pull/1667#discussion_r546682565", "createdAt": "2020-12-21T12:36:54Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/user/UserImportManager.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.user;\n+\n+import com.epam.pipeline.entity.metadata.CategoricalAttribute;\n+import com.epam.pipeline.entity.metadata.CategoricalAttributeValue;\n+import com.epam.pipeline.entity.metadata.MetadataEntry;\n+import com.epam.pipeline.entity.metadata.PipeConfValue;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.user.PipelineUser;\n+import com.epam.pipeline.entity.user.PipelineUserEvent;\n+import com.epam.pipeline.entity.user.PipelineUserEventsList;\n+import com.epam.pipeline.entity.user.PipelineUserWithStoragePath;\n+import com.epam.pipeline.entity.user.Role;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeManager;\n+import com.epam.pipeline.manager.metadata.MetadataManager;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class UserImportManager {\n+    private final UserManager userManager;\n+    private final CategoricalAttributeManager categoricalAttributeManager;\n+    private final MetadataManager metadataManager;\n+    private final RoleManager roleManager;\n+\n+    /**\n+     * Registers a new {@link PipelineUser}, {@link Role}, {@link MetadataEntry} for users\n+     * and {@link CategoricalAttribute} if allowed. Otherwise, log event and skip action.\n+     * @param createUser true if user shall be created if not exists\n+     * @param createGroup true if role shall be created if not exists\n+     * @param attributesToCreate the list of metadata keys that shall be created if not exists\n+     * @param file the input file with users\n+     * @return the list of events that happened during user processing\n+     */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n+    public List<PipelineUserEvent> importUsersFromFile(final boolean createUser, final boolean createGroup,\n+                                                       final List<String> attributesToCreate,\n+                                                       final MultipartFile file) {\n+        final List<PipelineUserEvent> events = new ArrayList<>();\n+        final List<CategoricalAttribute> categoricalAttributes = ListUtils\n+                .emptyIfNull(categoricalAttributeManager.loadAll());\n+        final List<PipelineUserWithStoragePath> users =\n+                new UserImporter(events, categoricalAttributes, attributesToCreate).importUsers(file);\n+        categoricalAttributeManager.updateCategoricalAttributes(categoricalAttributes);\n+\n+        users.forEach(user -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3807c45f8756dc3a9409eefa84c952dea121d5e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjk5MjI4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserImportManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjozOToxMVrOIJW6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjozOToxMVrOIJW6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4MzQ5OA==", "bodyText": "I'd suggest to use MessageHelper for message formatting", "url": "https://github.com/epam/cloud-pipeline/pull/1667#discussion_r546683498", "createdAt": "2020-12-21T12:39:11Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/user/UserImportManager.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.user;\n+\n+import com.epam.pipeline.entity.metadata.CategoricalAttribute;\n+import com.epam.pipeline.entity.metadata.CategoricalAttributeValue;\n+import com.epam.pipeline.entity.metadata.MetadataEntry;\n+import com.epam.pipeline.entity.metadata.PipeConfValue;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.user.PipelineUser;\n+import com.epam.pipeline.entity.user.PipelineUserEvent;\n+import com.epam.pipeline.entity.user.PipelineUserEventsList;\n+import com.epam.pipeline.entity.user.PipelineUserWithStoragePath;\n+import com.epam.pipeline.entity.user.Role;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeManager;\n+import com.epam.pipeline.manager.metadata.MetadataManager;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class UserImportManager {\n+    private final UserManager userManager;\n+    private final CategoricalAttributeManager categoricalAttributeManager;\n+    private final MetadataManager metadataManager;\n+    private final RoleManager roleManager;\n+\n+    /**\n+     * Registers a new {@link PipelineUser}, {@link Role}, {@link MetadataEntry} for users\n+     * and {@link CategoricalAttribute} if allowed. Otherwise, log event and skip action.\n+     * @param createUser true if user shall be created if not exists\n+     * @param createGroup true if role shall be created if not exists\n+     * @param attributesToCreate the list of metadata keys that shall be created if not exists\n+     * @param file the input file with users\n+     * @return the list of events that happened during user processing\n+     */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n+    public List<PipelineUserEvent> importUsersFromFile(final boolean createUser, final boolean createGroup,\n+                                                       final List<String> attributesToCreate,\n+                                                       final MultipartFile file) {\n+        final List<PipelineUserEvent> events = new ArrayList<>();\n+        final List<CategoricalAttribute> categoricalAttributes = ListUtils\n+                .emptyIfNull(categoricalAttributeManager.loadAll());\n+        final List<PipelineUserWithStoragePath> users =\n+                new UserImporter(events, categoricalAttributes, attributesToCreate).importUsers(file);\n+        categoricalAttributeManager.updateCategoricalAttributes(categoricalAttributes);\n+\n+        users.forEach(user -> {\n+            try {\n+                events.addAll(ListUtils.emptyIfNull(processUser(user, createUser, createGroup, categoricalAttributes)));\n+            } catch (Exception e) {\n+                log.error(String.format(\"Failed to process user '%s'\", user.getUserName()), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3807c45f8756dc3a9409eefa84c952dea121d5e"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 236, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}