{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NzIzODQ4", "number": 1413, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDozOToyN1rOEm-zWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoyOTo0NlrOEojOmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzEwMjk4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDozOToyN1rOHXUWWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDozOToyN1rOHXUWWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIxMjY5OA==", "bodyText": "Could you please shouldDoSmtgh notation for test names", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r494212698", "createdAt": "2020-09-24T10:39:27Z", "author": {"login": "mzueva"}, "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.log;\n+\n+import com.epam.pipeline.controller.AbstractControllerTest;\n+import com.epam.pipeline.entity.log.LogFilter;\n+import com.epam.pipeline.manager.log.LogApiService;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultHandlers;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = LogController.class)\n+public class LogControllerTest extends AbstractControllerTest {\n+\n+    @Autowired\n+    private LogApiService mockLogApiService;\n+\n+    @Test\n+    public void testFilterGet() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861c98f612254cd2c24cc38c82131c2646a05ebf"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzEwMzgyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDozOTo0NVrOHXUW_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDozOTo0NVrOHXUW_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIxMjg2Mg==", "bodyText": "Please add final for all fields and arguments", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r494212862", "createdAt": "2020-09-24T10:39:45Z", "author": {"login": "mzueva"}, "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.log;\n+\n+import com.epam.pipeline.controller.AbstractControllerTest;\n+import com.epam.pipeline.entity.log.LogFilter;\n+import com.epam.pipeline.manager.log.LogApiService;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultHandlers;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = LogController.class)\n+public class LogControllerTest extends AbstractControllerTest {\n+\n+    @Autowired\n+    private LogApiService mockLogApiService;\n+\n+    @Test\n+    public void testFilterGet() throws Exception {\n+        LogFilter logFilter = new LogFilter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861c98f612254cd2c24cc38c82131c2646a05ebf"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzEwNTE1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDo0MDowOVrOHXUX0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDo0MDowOVrOHXUX0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIxMzA3NQ==", "bodyText": "Let's parse object from response and use it for validation", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r494213075", "createdAt": "2020-09-24T10:40:09Z", "author": {"login": "mzueva"}, "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.log;\n+\n+import com.epam.pipeline.controller.AbstractControllerTest;\n+import com.epam.pipeline.entity.log.LogFilter;\n+import com.epam.pipeline.manager.log.LogApiService;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultHandlers;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = LogController.class)\n+public class LogControllerTest extends AbstractControllerTest {\n+\n+    @Autowired\n+    private LogApiService mockLogApiService;\n+\n+    @Test\n+    public void testFilterGet() throws Exception {\n+        LogFilter logFilter = new LogFilter();\n+        MvcResult mvcResult = mvc().perform(get(\"/restapi/log/filter\")\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(getObjectMapper().writeValueAsString(logFilter)))\n+                .andDo(MockMvcResultHandlers.print())\n+                .andExpect(status().isOk()).andReturn();\n+\n+        verify(mockLogApiService, times(1)).getFilters();\n+\n+        String actual = mvcResult.getResponse().getContentAsString();\n+        assertThat(actual).isNotBlank();\n+    }\n+\n+    @Test\n+    public void testFilterPost() throws Exception {\n+        LogFilter logFilter = new LogFilter();\n+        logFilter.setMessage(\"testMessage\");\n+        MvcResult mvcResult = mvc().perform(post(\"/restapi/log/filter\")\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(getObjectMapper().writeValueAsString(logFilter)))\n+                .andExpect(status().isOk()).andReturn();\n+\n+        ArgumentCaptor<LogFilter> logFilterCaptor = ArgumentCaptor.forClass(LogFilter.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861c98f612254cd2c24cc38c82131c2646a05ebf"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDA2MTc1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/CommonTestContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDo1NDo1MVrOHY4fzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDo1NDo1MVrOHY4fzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1MzUxOA==", "bodyText": "Could you please cleanup licence format? (double comment)", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r495853518", "createdAt": "2020-09-28T10:54:51Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/CommonTestContext.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04396d69786f56edbfaf9eb3e639daa9775f9747"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDA2NDk4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDo1NTo0OVrOHY4huQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDo1NTo0OVrOHY4huQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NDAwOQ==", "bodyText": "Could you please add space before =?", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r495854009", "createdAt": "2020-09-28T10:55:49Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.log;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.controller.AbstractControllerTest;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.entity.log.LogFilter;\n+import com.epam.pipeline.entity.log.LogPagination;\n+import com.epam.pipeline.manager.log.LogApiService;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = LogController.class)\n+public class LogControllerTest extends AbstractControllerTest {\n+\n+    @Autowired\n+    private LogApiService mockLogApiService;\n+\n+    private static final String LOG_ENDPOINT = SERVLET_PATH + \"/log/filter\";\n+    private final LogFilter logFilter = new LogFilter();\n+\n+    @Test\n+    public void shouldFailForUnauthorizedUserGet() throws Exception {\n+        mvc().perform(get(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnLogFilter() throws Exception {\n+        logFilter.setSortOrder(\"ASC\");\n+        Mockito.doReturn(logFilter).when(mockLogApiService).getFilters();\n+        final MvcResult mvcResult = mvc().perform(get(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk()).andReturn();\n+        Mockito.verify(mockLogApiService).getFilters();\n+\n+        final ResponseResult<LogFilter> expectedResult = new ResponseResult<>();\n+        expectedResult.setStatus(\"OK\");\n+        expectedResult.setPayload(logFilter);\n+\n+        final String actual= mvcResult.getResponse().getContentAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04396d69786f56edbfaf9eb3e639daa9775f9747"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDA5NjU5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTowNjowMlrOHY401g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTowNjowMlrOHY401g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1ODkwMg==", "bodyText": "Could we move this logic into separate generic method? (to use it in other test)\nsmth like:\nprivate <T> ResponseResult<T> buildExpectedResult(final T payload) {\n        final ResponseResult<T> expectedResult = new ResponseResult<>();\n        expectedResult.setStatus(\"OK\");\n        expectedResult.setPayload(payload);\n        return expectedResult;\n    }\n\nP.S.: may be should create additional utility class for controller tests", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r495858902", "createdAt": "2020-09-28T11:06:02Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.log;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.controller.AbstractControllerTest;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.entity.log.LogFilter;\n+import com.epam.pipeline.entity.log.LogPagination;\n+import com.epam.pipeline.manager.log.LogApiService;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = LogController.class)\n+public class LogControllerTest extends AbstractControllerTest {\n+\n+    @Autowired\n+    private LogApiService mockLogApiService;\n+\n+    private static final String LOG_ENDPOINT = SERVLET_PATH + \"/log/filter\";\n+    private final LogFilter logFilter = new LogFilter();\n+\n+    @Test\n+    public void shouldFailForUnauthorizedUserGet() throws Exception {\n+        mvc().perform(get(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnLogFilter() throws Exception {\n+        logFilter.setSortOrder(\"ASC\");\n+        Mockito.doReturn(logFilter).when(mockLogApiService).getFilters();\n+        final MvcResult mvcResult = mvc().perform(get(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk()).andReturn();\n+        Mockito.verify(mockLogApiService).getFilters();\n+\n+        final ResponseResult<LogFilter> expectedResult = new ResponseResult<>();\n+        expectedResult.setStatus(\"OK\");\n+        expectedResult.setPayload(logFilter);\n+\n+        final String actual= mvcResult.getResponse().getContentAsString();\n+        assertThat(actual).isEqualToIgnoringWhitespace(getObjectMapper().writeValueAsString(expectedResult));\n+\n+        final Result<LogFilter> actualResult =\n+                JsonMapper.parseData(actual, new TypeReference<Result<LogFilter>>() { });\n+\n+        assertEquals(expectedResult.getPayload(), actualResult.getPayload());\n+    }\n+\n+    @Test\n+    public void shouldFailForUnauthorizedUserPost() throws Exception {\n+        mvc().perform(post(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(getObjectMapper().writeValueAsString(logFilter)))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredLogs() throws Exception {\n+        final LogPagination logPagination = LogPagination.builder().pageSize(5).build();\n+        logFilter.setMessage(\"testMessage\");\n+        Mockito.doReturn(logPagination).when(mockLogApiService).filter(logFilter);\n+        final MvcResult mvcResult = mvc().perform(post(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(getObjectMapper().writeValueAsString(logFilter)))\n+                .andExpect(status().isOk()).andReturn();\n+\n+        final ArgumentCaptor<LogFilter> logFilterCaptor = ArgumentCaptor.forClass(LogFilter.class);\n+        Mockito.verify(mockLogApiService).filter(logFilterCaptor.capture());\n+        assertThat(logFilterCaptor.getValue().getMessage()).isEqualTo(\"testMessage\");\n+\n+        final ResponseResult<LogPagination> expectedResult = new ResponseResult<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04396d69786f56edbfaf9eb3e639daa9775f9747"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDEwMTU0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTowNzo0M1rOHY431w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDo1OToxM1rOHZnssg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1OTY3MQ==", "bodyText": "Could we move this assertions into separate generic method? (to use it in other test)\nP.S.: may be should create additional utility class for controller tests", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r495859671", "createdAt": "2020-09-28T11:07:43Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.log;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.controller.AbstractControllerTest;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.entity.log.LogFilter;\n+import com.epam.pipeline.entity.log.LogPagination;\n+import com.epam.pipeline.manager.log.LogApiService;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = LogController.class)\n+public class LogControllerTest extends AbstractControllerTest {\n+\n+    @Autowired\n+    private LogApiService mockLogApiService;\n+\n+    private static final String LOG_ENDPOINT = SERVLET_PATH + \"/log/filter\";\n+    private final LogFilter logFilter = new LogFilter();\n+\n+    @Test\n+    public void shouldFailForUnauthorizedUserGet() throws Exception {\n+        mvc().perform(get(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnLogFilter() throws Exception {\n+        logFilter.setSortOrder(\"ASC\");\n+        Mockito.doReturn(logFilter).when(mockLogApiService).getFilters();\n+        final MvcResult mvcResult = mvc().perform(get(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk()).andReturn();\n+        Mockito.verify(mockLogApiService).getFilters();\n+\n+        final ResponseResult<LogFilter> expectedResult = new ResponseResult<>();\n+        expectedResult.setStatus(\"OK\");\n+        expectedResult.setPayload(logFilter);\n+\n+        final String actual= mvcResult.getResponse().getContentAsString();\n+        assertThat(actual).isEqualToIgnoringWhitespace(getObjectMapper().writeValueAsString(expectedResult));\n+\n+        final Result<LogFilter> actualResult =\n+                JsonMapper.parseData(actual, new TypeReference<Result<LogFilter>>() { });\n+\n+        assertEquals(expectedResult.getPayload(), actualResult.getPayload());\n+    }\n+\n+    @Test\n+    public void shouldFailForUnauthorizedUserPost() throws Exception {\n+        mvc().perform(post(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(getObjectMapper().writeValueAsString(logFilter)))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredLogs() throws Exception {\n+        final LogPagination logPagination = LogPagination.builder().pageSize(5).build();\n+        logFilter.setMessage(\"testMessage\");\n+        Mockito.doReturn(logPagination).when(mockLogApiService).filter(logFilter);\n+        final MvcResult mvcResult = mvc().perform(post(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(getObjectMapper().writeValueAsString(logFilter)))\n+                .andExpect(status().isOk()).andReturn();\n+\n+        final ArgumentCaptor<LogFilter> logFilterCaptor = ArgumentCaptor.forClass(LogFilter.class);\n+        Mockito.verify(mockLogApiService).filter(logFilterCaptor.capture());\n+        assertThat(logFilterCaptor.getValue().getMessage()).isEqualTo(\"testMessage\");\n+\n+        final ResponseResult<LogPagination> expectedResult = new ResponseResult<>();\n+        expectedResult.setStatus(\"OK\");\n+        expectedResult.setPayload(logPagination);\n+\n+        final String actual = mvcResult.getResponse().getContentAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04396d69786f56edbfaf9eb3e639daa9775f9747"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyNjg2Ng==", "bodyText": "Lets move TypeReference into method arguments:\n    private <T> void assertResponse(final MvcResult mvcResult,\n                                    final ResponseResult<T> expectedResult,\n                                    final TypeReference<Result<T>> typeReference) throws Exception {\n        final String actual = mvcResult.getResponse().getContentAsString();\n        assertThat(actual).isNotBlank();\n        assertThat(actual).isEqualToIgnoringWhitespace(getObjectMapper().writeValueAsString(expectedResult));\n\n        final Result<T> actualResult = JsonMapper.parseData(actual, typeReference);\n        assertEquals(expectedResult.getPayload(), actualResult.getPayload());\n    }\n\nAlso, I would prefer to don't use isNotBlank method since it works incorrectly.\nCould we use org.apache.commons.lang3.StringUtils#isNotBlank or org.skyscreamer.jsonassert.JSONAssert#assertEquals?", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r496626866", "createdAt": "2020-09-29T10:59:13Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.log;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.controller.AbstractControllerTest;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.entity.log.LogFilter;\n+import com.epam.pipeline.entity.log.LogPagination;\n+import com.epam.pipeline.manager.log.LogApiService;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = LogController.class)\n+public class LogControllerTest extends AbstractControllerTest {\n+\n+    @Autowired\n+    private LogApiService mockLogApiService;\n+\n+    private static final String LOG_ENDPOINT = SERVLET_PATH + \"/log/filter\";\n+    private final LogFilter logFilter = new LogFilter();\n+\n+    @Test\n+    public void shouldFailForUnauthorizedUserGet() throws Exception {\n+        mvc().perform(get(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnLogFilter() throws Exception {\n+        logFilter.setSortOrder(\"ASC\");\n+        Mockito.doReturn(logFilter).when(mockLogApiService).getFilters();\n+        final MvcResult mvcResult = mvc().perform(get(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk()).andReturn();\n+        Mockito.verify(mockLogApiService).getFilters();\n+\n+        final ResponseResult<LogFilter> expectedResult = new ResponseResult<>();\n+        expectedResult.setStatus(\"OK\");\n+        expectedResult.setPayload(logFilter);\n+\n+        final String actual= mvcResult.getResponse().getContentAsString();\n+        assertThat(actual).isEqualToIgnoringWhitespace(getObjectMapper().writeValueAsString(expectedResult));\n+\n+        final Result<LogFilter> actualResult =\n+                JsonMapper.parseData(actual, new TypeReference<Result<LogFilter>>() { });\n+\n+        assertEquals(expectedResult.getPayload(), actualResult.getPayload());\n+    }\n+\n+    @Test\n+    public void shouldFailForUnauthorizedUserPost() throws Exception {\n+        mvc().perform(post(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(getObjectMapper().writeValueAsString(logFilter)))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredLogs() throws Exception {\n+        final LogPagination logPagination = LogPagination.builder().pageSize(5).build();\n+        logFilter.setMessage(\"testMessage\");\n+        Mockito.doReturn(logPagination).when(mockLogApiService).filter(logFilter);\n+        final MvcResult mvcResult = mvc().perform(post(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(getObjectMapper().writeValueAsString(logFilter)))\n+                .andExpect(status().isOk()).andReturn();\n+\n+        final ArgumentCaptor<LogFilter> logFilterCaptor = ArgumentCaptor.forClass(LogFilter.class);\n+        Mockito.verify(mockLogApiService).filter(logFilterCaptor.capture());\n+        assertThat(logFilterCaptor.getValue().getMessage()).isEqualTo(\"testMessage\");\n+\n+        final ResponseResult<LogPagination> expectedResult = new ResponseResult<>();\n+        expectedResult.setStatus(\"OK\");\n+        expectedResult.setPayload(logPagination);\n+\n+        final String actual = mvcResult.getResponse().getContentAsString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1OTY3MQ=="}, "originalCommit": {"oid": "04396d69786f56edbfaf9eb3e639daa9775f9747"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDE2MDc0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/AbstractControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMToyNjoxNVrOHY5bZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMToyNjoxNVrOHY5bZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2ODc3Mg==", "bodyText": "Do we need this fields?", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r495868772", "createdAt": "2020-09-28T11:26:15Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/AbstractControllerTest.java", "diffHunk": "@@ -17,20 +17,26 @@\n package com.epam.pipeline.controller;\n \n import static org.junit.Assert.assertNotNull;\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n \n import com.epam.pipeline.config.JsonMapper;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import org.junit.Before;\n+import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.test.web.servlet.MockMvc;\n import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n import org.springframework.web.context.WebApplicationContext;\n \n+@RunWith(SpringRunner.class)\n+@WebTestConfiguration\n public abstract class AbstractControllerTest {\n     protected static final String JPATH_STATUS = \"$.status\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04396d69786f56edbfaf9eb3e639daa9775f9747"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDE2NDcwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/AbstractControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMToyNzozMFrOHY5dpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMToyNzozMFrOHY5dpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2OTM0OQ==", "bodyText": "Do we need typeFacroty field?", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r495869349", "createdAt": "2020-09-28T11:27:30Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/AbstractControllerTest.java", "diffHunk": "@@ -49,7 +55,8 @@ public void setup() throws Exception {\n         assertNotNull(\"ObjectMapper isn't provided.\", objectMapper);\n \n         typeFactory = TypeFactory.defaultInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04396d69786f56edbfaf9eb3e639daa9775f9747"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDE3NzEyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/TestRestConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTozMToyMFrOHY5k7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTozMToyMFrOHY5k7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3MTIxMg==", "bodyText": "Why do we need this class?", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r495871212", "createdAt": "2020-09-28T11:31:20Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/TestRestConfiguration.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04396d69786f56edbfaf9eb3e639daa9775f9747"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDE4MjM5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/WebTestConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTozMzowMFrOHY5oEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTozMzowMFrOHY5oEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3MjAxNw==", "bodyText": "Could you please move all controller tests configuration into separate package com.epam.pipeline.test.web?", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r495872017", "createdAt": "2020-09-28T11:33:00Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/WebTestConfiguration.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04396d69786f56edbfaf9eb3e639daa9775f9747"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg0OTUyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/util/ControllerTestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyMToyOFrOHZmcUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyMToyOFrOHZmcUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNjI5MQ==", "bodyText": "Could we make this class an interface or add empty constructor (to fix checkstyleTest task)?", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r496606291", "createdAt": "2020-09-29T10:21:28Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/util/ControllerTestUtils.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.util;\n+\n+import com.epam.pipeline.controller.ResponseResult;\n+\n+\n+public class ControllerTestUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d396dfb7c638346d889bca03c9399ce97d82a1d1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg1MDM0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/util/ControllerTestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyMTo0OFrOHZmc6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyMTo0OFrOHZmc6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNjQ0Mg==", "bodyText": "Empty line", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r496606442", "createdAt": "2020-09-29T10:21:48Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/util/ControllerTestUtils.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.util;\n+\n+import com.epam.pipeline.controller.ResponseResult;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d396dfb7c638346d889bca03c9399ce97d82a1d1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg4NjE1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozMTo1MlrOHZmzDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozMTo1MlrOHZmzDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxMjExMQ==", "bodyText": "Could we move testMessage into constants?", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r496612111", "createdAt": "2020-09-29T10:31:52Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/log/LogControllerTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.log;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.entity.log.LogFilter;\n+import com.epam.pipeline.entity.log.LogPagination;\n+import com.epam.pipeline.manager.log.LogApiService;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = LogController.class)\n+public class LogControllerTest extends AbstractControllerTest {\n+\n+    @Autowired\n+    private LogApiService mockLogApiService;\n+\n+    private static final String LOG_ENDPOINT = SERVLET_PATH + \"/log/filter\";\n+    private final LogFilter logFilter = new LogFilter();\n+\n+    @Test\n+    public void shouldFailForUnauthorizedUserGet() throws Exception {\n+        mvc().perform(get(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnLogFilter() throws Exception {\n+        logFilter.setSortOrder(\"ASC\");\n+        Mockito.doReturn(logFilter).when(mockLogApiService).getFilters();\n+        final MvcResult mvcResult = mvc().perform(get(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk()).andReturn();\n+\n+        Mockito.verify(mockLogApiService).getFilters();\n+\n+        final ResponseResult<LogFilter> expectedResult = ControllerTestUtils.buildExpectedResult(logFilter);\n+\n+        final String actual = mvcResult.getResponse().getContentAsString();\n+        assertThat(actual).isNotBlank();\n+        assertThat(actual).isEqualToIgnoringWhitespace(getObjectMapper().writeValueAsString(expectedResult));\n+\n+        final Result<LogFilter> actualResult =\n+                JsonMapper.parseData(actual, new TypeReference<Result<LogFilter>>() { });\n+        assertEquals(expectedResult.getPayload(), actualResult.getPayload());\n+    }\n+\n+    @Test\n+    public void shouldFailForUnauthorizedUserPost() throws Exception {\n+        mvc().perform(post(LOG_ENDPOINT)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(getObjectMapper().writeValueAsString(logFilter)))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredLogs() throws Exception {\n+        final LogPagination logPagination = LogPagination.builder().pageSize(5).build();\n+        logFilter.setMessage(\"testMessage\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d396dfb7c638346d889bca03c9399ce97d82a1d1"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTU1NTAwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/util/ControllerTestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoyOToyOVrOHZtMeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoyOToyOVrOHZtMeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNjkyMQ==", "bodyText": "The test should fail if actual response is blank (StringUtils#isNotBlank returns boolean)", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r496716921", "createdAt": "2020-09-29T13:29:29Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/util/ControllerTestUtils.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.util;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+\n+public final class ControllerTestUtils {\n+\n+    private ControllerTestUtils() {\n+    }\n+\n+    public static <T> ResponseResult<T> buildExpectedResult(final T payload) {\n+        final ResponseResult<T> expectedResult = new ResponseResult<>();\n+        expectedResult.setStatus(\"OK\");\n+        expectedResult.setPayload(payload);\n+        return expectedResult;\n+    }\n+\n+    public static <T> void assertResponse(final MvcResult mvcResult,\n+                                          final JsonMapper objectMapper,\n+                                          final ResponseResult<T> expectedResult,\n+                                          final TypeReference<Result<T>> typeReference) throws Exception {\n+        final String actual = mvcResult.getResponse().getContentAsString();\n+        StringUtils.isNotBlank(actual);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e9fe25c9f518fc4750554fcd6de35b1ba8d73a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTU1NjcyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/util/ControllerTestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoyOTo0NlrOHZtNgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoyOTo0NlrOHZtNgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNzE4Ng==", "bodyText": "Cleanup please", "url": "https://github.com/epam/cloud-pipeline/pull/1413#discussion_r496717186", "createdAt": "2020-09-29T13:29:46Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/util/ControllerTestUtils.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.util;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+\n+public final class ControllerTestUtils {\n+\n+    private ControllerTestUtils() {\n+    }\n+\n+    public static <T> ResponseResult<T> buildExpectedResult(final T payload) {\n+        final ResponseResult<T> expectedResult = new ResponseResult<>();\n+        expectedResult.setStatus(\"OK\");\n+        expectedResult.setPayload(payload);\n+        return expectedResult;\n+    }\n+\n+    public static <T> void assertResponse(final MvcResult mvcResult,\n+                                          final JsonMapper objectMapper,\n+                                          final ResponseResult<T> expectedResult,\n+                                          final TypeReference<Result<T>> typeReference) throws Exception {\n+        final String actual = mvcResult.getResponse().getContentAsString();\n+        StringUtils.isNotBlank(actual);\n+        assertThat(actual).isEqualToIgnoringWhitespace(objectMapper.writeValueAsString(expectedResult));\n+\n+        final Result<T> actualResult = JsonMapper.parseData(actual, typeReference);\n+        assertEquals(expectedResult.getPayload(), actualResult.getPayload());\n+        System.out.println(actualResult.getPayload());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e9fe25c9f518fc4750554fcd6de35b1ba8d73a"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 375, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}