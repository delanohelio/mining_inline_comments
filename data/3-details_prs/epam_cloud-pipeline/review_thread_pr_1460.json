{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NzE5ODM4", "number": 1460, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwOTo1NjoyOFrOEqp1kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTo0MDowMlrOErrIUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTYxMTA2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwOTo1NjoyOFrOHc-0yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoxMDoxMFrOHdFlRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE1MTQ5Ng==", "bodyText": "Why should we add changes to this class? Does this configuration affect new tests?", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500151496", "createdAt": "2020-10-06T09:56:28Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java", "diffHunk": "@@ -45,6 +45,7 @@\n import com.epam.pipeline.manager.pipeline.ToolManager;\n import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n import com.epam.pipeline.manager.pipeline.runner.ConfigurationRunner;\n+import com.epam.pipeline.manager.region.CloudRegionManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4029e38d56e3b7b553477a1cc9dae3fb049e49c7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MjIxNQ==", "bodyText": "If we don't add this manager, tests in the RunApiServiceTest will be failed. So, if I may say so, new tests affect the old tests and their configuration. But thanks to your remark, I found a redundant bin in this configuration, which I added earlier.", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500262215", "createdAt": "2020-10-06T13:10:10Z", "author": {"login": "YouKofan"}, "path": "api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java", "diffHunk": "@@ -45,6 +45,7 @@\n import com.epam.pipeline.manager.pipeline.ToolManager;\n import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n import com.epam.pipeline.manager.pipeline.runner.ConfigurationRunner;\n+import com.epam.pipeline.manager.region.CloudRegionManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE1MTQ5Ng=="}, "originalCommit": {"oid": "4029e38d56e3b7b553477a1cc9dae3fb049e49c7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTYyMjMyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwOTo1OToyNlrOHc-7mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoxMDowMlrOHdFk4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE1MzI0Mg==", "bodyText": "To avoid confusion, let's give the fields actual names, depending on their current mock state", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500153242", "createdAt": "2020-10-06T09:59:26Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java", "diffHunk": "@@ -179,24 +210,15 @@\n     @MockBean\n     protected ToolApiService mockToolApiService;\n \n-    @MockBean\n-    protected PermissionsService mockPermissionsService;\n-\n-    @MockBean\n-    protected PermissionEvaluator mockPermissionEvaluator;\n-\n     @MockBean\n     protected MessageHelper mockMessageHelper;\n \n-    @MockBean\n+    @Autowired\n     protected CheckPermissionHelper mockPermissionHelper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4029e38d56e3b7b553477a1cc9dae3fb049e49c7"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MjExNQ==", "bodyText": "Thank you, fixed.", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500262115", "createdAt": "2020-10-06T13:10:02Z", "author": {"login": "YouKofan"}, "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java", "diffHunk": "@@ -179,24 +210,15 @@\n     @MockBean\n     protected ToolApiService mockToolApiService;\n \n-    @MockBean\n-    protected PermissionsService mockPermissionsService;\n-\n-    @MockBean\n-    protected PermissionEvaluator mockPermissionEvaluator;\n-\n     @MockBean\n     protected MessageHelper mockMessageHelper;\n \n-    @MockBean\n+    @Autowired\n     protected CheckPermissionHelper mockPermissionHelper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE1MzI0Mg=="}, "originalCommit": {"oid": "4029e38d56e3b7b553477a1cc9dae3fb049e49c7"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTY2Nzc4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxMjozMVrOHc_YEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoxMDowNVrOHdFlDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MDUzMA==", "bodyText": "Lets make a new expected object that will not be mutated during the test execution", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500160530", "createdAt": "2020-10-06T10:12:31Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> clouds;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        clouds = new ArrayList<>();\n+        clouds.add(region);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(clouds).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+\n+        assertThat(abstractCloudRegions).isEqualTo(clouds);\n+        assertThat(abstractCloudRegions.get(0).getId()).isEqualTo(clouds.get(0).getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(clouds).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+\n+        assertThat(abstractCloudRegions).isEqualTo(clouds);\n+        assertThat(abstractCloudRegions.get(0).getId()).isEqualTo(clouds.get(0).getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4029e38d56e3b7b553477a1cc9dae3fb049e49c7"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MjE1Nw==", "bodyText": "Done. I hope that i understand you correctly.", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500262157", "createdAt": "2020-10-06T13:10:05Z", "author": {"login": "YouKofan"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> clouds;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        clouds = new ArrayList<>();\n+        clouds.add(region);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(clouds).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+\n+        assertThat(abstractCloudRegions).isEqualTo(clouds);\n+        assertThat(abstractCloudRegions.get(0).getId()).isEqualTo(clouds.get(0).getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(clouds).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+\n+        assertThat(abstractCloudRegions).isEqualTo(clouds);\n+        assertThat(abstractCloudRegions.get(0).getId()).isEqualTo(clouds.get(0).getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MDUzMA=="}, "originalCommit": {"oid": "4029e38d56e3b7b553477a1cc9dae3fb049e49c7"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTkyMDU4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMToyNzo1NVrOHdBzsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoxMDoxNlrOHdFlkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDM3MA==", "bodyText": "Lets add test to the following case:\n\ncreate two regions: region1, region2\ngrant permissions for user only for region1\nmock mockCloudRegionManager to return two regions\ncheck that user gets only region1", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500200370", "createdAt": "2020-10-06T11:27:55Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> clouds;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        clouds = new ArrayList<>();\n+        clouds.add(region);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(clouds).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+\n+        assertThat(abstractCloudRegions).isEqualTo(clouds);\n+        assertThat(abstractCloudRegions.get(0).getId()).isEqualTo(clouds.get(0).getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4029e38d56e3b7b553477a1cc9dae3fb049e49c7"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MjI5MA==", "bodyText": "Test is added.", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500262290", "createdAt": "2020-10-06T13:10:16Z", "author": {"login": "YouKofan"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> clouds;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        clouds = new ArrayList<>();\n+        clouds.add(region);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(clouds).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+\n+        assertThat(abstractCloudRegions).isEqualTo(clouds);\n+        assertThat(abstractCloudRegions.get(0).getId()).isEqualTo(clouds.get(0).getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDM3MA=="}, "originalCommit": {"oid": "4029e38d56e3b7b553477a1cc9dae3fb049e49c7"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjQxNzE3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMToyNVrOHdGjUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo1Njo0NlrOHdRPeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3ODA5OQ==", "bodyText": "To my mind it would be cleaner to create this object directly in test since twoRegionList used in one test only. No need to create this object for each test.", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500278099", "createdAt": "2020-10-06T13:31:25Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyNTg2Ng==", "bodyText": "Also, we can use Arrays.asList here", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500325866", "createdAt": "2020-10-06T14:21:09Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3ODA5OQ=="}, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MzI0Mg==", "bodyText": "twoRegionList moved to the method that calls them (also moved regionWithoutPermissionobject as it used at once too).\nAbout using Arrays.asList please see following comment.", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500453242", "createdAt": "2020-10-06T16:56:46Z", "author": {"login": "YouKofan"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3ODA5OQ=="}, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjQyNTI5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMjo1MFrOHdGoOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo1Mjo1NFrOHdRGEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3OTM1Mw==", "bodyText": "Could we use Collections.singletonList here?", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500279353", "createdAt": "2020-10-06T13:32:50Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MDgzMw==", "bodyText": "Collections.singletonList, as well as the list created with the help of Arrays.asList, call UnsupportedOperationException when trying to change them (the stack trace comes to the remove method in the AbstractList class).", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500450833", "createdAt": "2020-10-06T16:52:54Z", "author": {"login": "YouKofan"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3OTM1Mw=="}, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjQyNjY3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMzowN1rOHdGpIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo1Njo1OFrOHdRQEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3OTU4NA==", "bodyText": "Could we use Collections.singletonList here?", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500279584", "createdAt": "2020-10-06T13:33:07Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MzM5Mg==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500453392", "createdAt": "2020-10-06T16:56:58Z", "author": {"login": "YouKofan"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3OTU4NA=="}, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjQyOTQ0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMzozNFrOHdGq2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo1NzoxMlrOHdRQqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4MDAyNA==", "bodyText": "Cleanup please", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500280024", "createdAt": "2020-10-06T13:33:34Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        final AbstractCloudRegion resultRegion = abstractCloudRegions.get(0);\n+\n+        assertThat(abstractCloudRegions).isEqualTo(singleRegionList);\n+        assertThat(resultRegion.getId()).isEqualTo(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        System.out.println(abstractCloudRegions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MzU0NA==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500453544", "createdAt": "2020-10-06T16:57:12Z", "author": {"login": "YouKofan"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        final AbstractCloudRegion resultRegion = abstractCloudRegions.get(0);\n+\n+        assertThat(abstractCloudRegions).isEqualTo(singleRegionList);\n+        assertThat(resultRegion.getId()).isEqualTo(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        System.out.println(abstractCloudRegions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4MDAyNA=="}, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjY0NjY1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowOToyMFrOHdIxIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo1NzoyM1rOHdRRCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNDQwMg==", "bodyText": "The singleRegionList object was mutated during @PostFilter operation. This way this assertion is useless and we need another one. For example, let's check elements count (in this case we shall move abstractCloudRegions.get(0) after checking size).", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500314402", "createdAt": "2020-10-06T14:09:20Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        final AbstractCloudRegion resultRegion = abstractCloudRegions.get(0);\n+\n+        assertThat(abstractCloudRegions).isEqualTo(singleRegionList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MzY0Mg==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500453642", "createdAt": "2020-10-06T16:57:23Z", "author": {"login": "YouKofan"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        final AbstractCloudRegion resultRegion = abstractCloudRegions.get(0);\n+\n+        assertThat(abstractCloudRegions).isEqualTo(singleRegionList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNDQwMg=="}, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjY3ODg1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoxNDozN1rOHdJFIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo1NzozMFrOHdRRSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxOTUyMw==", "bodyText": "Let's add check chat returned region id as expected.", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500319523", "createdAt": "2020-10-06T14:14:37Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        final AbstractCloudRegion resultRegion = abstractCloudRegions.get(0);\n+\n+        assertThat(abstractCloudRegions).isEqualTo(singleRegionList);\n+        assertThat(resultRegion.getId()).isEqualTo(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        System.out.println(abstractCloudRegions);\n+        final AbstractCloudRegion resultRegion = abstractCloudRegions.get(0);\n+\n+        assertThat(abstractCloudRegions).isEqualTo(singleRegionList);\n+        assertThat(resultRegion.getId()).isEqualTo(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithRegionsPermissionsForWhichIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(regionWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(twoRegionsList).when(mockCloudRegionManager).loadAll();\n+        \n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+\n+        assertThat(abstractCloudRegions.size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MzcwNA==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500453704", "createdAt": "2020-10-06T16:57:30Z", "author": {"login": "YouKofan"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        final AbstractCloudRegion resultRegion = abstractCloudRegions.get(0);\n+\n+        assertThat(abstractCloudRegions).isEqualTo(singleRegionList);\n+        assertThat(resultRegion.getId()).isEqualTo(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        System.out.println(abstractCloudRegions);\n+        final AbstractCloudRegion resultRegion = abstractCloudRegions.get(0);\n+\n+        assertThat(abstractCloudRegions).isEqualTo(singleRegionList);\n+        assertThat(resultRegion.getId()).isEqualTo(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithRegionsPermissionsForWhichIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(regionWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(twoRegionsList).when(mockCloudRegionManager).loadAll();\n+        \n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+\n+        assertThat(abstractCloudRegions.size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxOTUyMw=="}, "originalCommit": {"oid": "e171e37bc99ab82b052ca7926f00309a92066e06"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDgxMDA4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo0MDo0MVrOHeWTqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo0MDo0MVrOHeWTqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4NDgxMA==", "bodyText": "Could you please change object casting to something like:\nfinal List<? extends AbstractCloudRegion> resultList = cloudRegionApiService.loadAll();\n\nassertThat(resultList).hasSize(1);\nassertThat(resultList.get(0)).isEqualTo(region);", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501584810", "createdAt": "2020-10-08T09:40:41Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        cloudRegionInfoList = Collections.singletonList(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<AwsRegion> resultList = (List<AwsRegion>) cloudRegionApiService.loadAll();\n+\n+        assertThat(resultList).hasSize(1).contains(region);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<AwsRegion> resultList = (List<AwsRegion>) cloudRegionApiService.loadAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614e4ac3de3170ca83c37f28074c2f9ce499ad01"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDgyNDk1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo0NDoyOFrOHeWczw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo0NDoyOFrOHeWczw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4NzE1MQ==", "bodyText": "Will this code ever get executed?", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501587151", "createdAt": "2020-10-08T09:44:28Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        cloudRegionInfoList = Collections.singletonList(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<AwsRegion> resultList = (List<AwsRegion>) cloudRegionApiService.loadAll();\n+\n+        assertThat(resultList).hasSize(1).contains(region);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<AwsRegion> resultList = (List<AwsRegion>) cloudRegionApiService.loadAll();\n+\n+        assertThat(resultList).hasSize(1).contains(region);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithRegionsPermissionsForWhichIsGranted() {\n+        final AwsRegion regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        final ArrayList<AbstractCloudRegion> twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(regionWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(twoRegionsList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<AwsRegion> resultList = (List<AwsRegion>) cloudRegionApiService.loadAll();\n+\n+        assertThat(resultList).hasSize(1).contains(region);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyListOfCloudRegionsWithoutPermission() {\n+        initAclEntity(region);\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<AwsRegion> resultList = (List<AwsRegion>) cloudRegionApiService.loadAll();\n+\n+        assertThat(resultList).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).load(region.getId());\n+\n+        final AbstractCloudRegion load = cloudRegionApiService.load(region.getId());\n+\n+        assertThat(load).isEqualTo(region);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnCloudRegionWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        when(mockCloudRegionManager.load(eq(region.getId()))).thenReturn(region);\n+\n+        final AbstractCloudRegion result = cloudRegionApiService.load(region.getId());\n+\n+        assertThat(result).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldFailReturningCloudRegionWithoutPermission() {\n+        initAclEntity(region);\n+        doReturn(region).when(mockCloudRegionManager).load(region.getId());\n+\n+        cloudRegionApiService.load(region.getId());\n+\n+        assertThat(region).isNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614e4ac3de3170ca83c37f28074c2f9ce499ad01"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjI3NzIyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTozMjo1NVrOHekaNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTo1Mzo0N1rOHelTuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNTg2MQ==", "bodyText": "Can't we use here SIMPLE_USER_ROLE? I think it is better to stuck to one role if both have equal meaning", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501815861", "createdAt": "2020-10-08T15:32:55Z", "author": {"login": "mzueva"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        cloudRegionInfoList = Collections.singletonList(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465dbf0e4dd6570bededce2198bda7e0348b5458"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyNzMxNA==", "bodyText": "The method that is tested here has the condition ADMIN_OR_GENERAL_USER in PreAuthorize. I thought the General User had access as opposed to the Simple User. So I made a separate variable for General user.", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501827314", "createdAt": "2020-10-08T15:49:07Z", "author": {"login": "YouKofan"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        cloudRegionInfoList = Collections.singletonList(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNTg2MQ=="}, "originalCommit": {"oid": "465dbf0e4dd6570bededce2198bda7e0348b5458"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMDU4NA==", "bodyText": "General user is any user with role named USER or ROLE_USER, so there is no actual difference between General user and Simple user", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501830584", "createdAt": "2020-10-08T15:53:47Z", "author": {"login": "mzueva"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        cloudRegionInfoList = Collections.singletonList(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNTg2MQ=="}, "originalCommit": {"oid": "465dbf0e4dd6570bededce2198bda7e0348b5458"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjI4NzI3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTozNTowOFrOHekgQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTozNTowOFrOHekgQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNzQxMA==", "bodyText": "Please, do not mix role and username, let's introduce a separate constant for username", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501817410", "createdAt": "2020-10-08T15:35:08Z", "author": {"login": "mzueva"}, "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        cloudRegionInfoList = Collections.singletonList(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> resultList = cloudRegionApiService.loadAll();\n+\n+        assertThat(resultList).hasSize(1);\n+        assertThat(resultList.get(0)).isEqualTo(region);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465dbf0e4dd6570bededce2198bda7e0348b5458"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjMwODY0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTo0MDowMlrOHektsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTo0MDowMlrOHektsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMDg0OQ==", "bodyText": "It seems that you can just use basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"} without excludes", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501820849", "createdAt": "2020-10-08T15:40:02Z", "author": {"login": "mzueva"}, "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java", "diffHunk": "@@ -37,10 +39,18 @@\n  */\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n+@ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n+@ComponentScan(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465dbf0e4dd6570bededce2198bda7e0348b5458"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 264, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}