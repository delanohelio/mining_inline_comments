{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODcwNTMy", "number": 1043, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowODo1N1rODwEATw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowOTo1MFrODwEB3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzIzODU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/log/LogManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowODo1N1rOGC2ZgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDozODoxNlrOGDTRaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MTYwMQ==", "bodyText": "As far as I remember sorting by id is not recommended due to performance considerations: \"The _id field has a unique value per document but it is not recommended to use it as a tiebreaker directly\" https://www.elastic.co/guide/en/elasticsearch/reference/6.8/search-request-search-after.html.\nI think sorting by timestamp shall be enough?", "url": "https://github.com/epam/cloud-pipeline/pull/1043#discussion_r405641601", "createdAt": "2020-04-08T16:08:57Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/log/LogManager.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.log;\n+\n+import com.epam.pipeline.common.MessageConstants;\n+import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.entity.log.*;\n+import com.epam.pipeline.exception.PipelineException;\n+import com.epam.pipeline.manager.utils.GlobalSearchElasticHelper;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang.BooleanUtils;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.search.ShardSearchFailure;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.index.query.RangeQueryBuilder;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation;\n+import org.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@Slf4j\n+@Service\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+public class LogManager {\n+\n+    private static final IndicesOptions INDICES_OPTIONS = IndicesOptions.fromOptions(true,\n+            SearchRequest.DEFAULT_INDICES_OPTIONS.allowNoIndices(),\n+            SearchRequest.DEFAULT_INDICES_OPTIONS.expandWildcardsOpen(),\n+            SearchRequest.DEFAULT_INDICES_OPTIONS.expandWildcardsClosed(),\n+            SearchRequest.DEFAULT_INDICES_OPTIONS);\n+\n+    private static final String USER = \"user\";\n+    private static final String TIMESTAMP = \"@timestamp\";\n+    private static final String MESSAGE_TIMESTAMP = \"message_timestamp\";\n+    private static final String HOSTNAME = \"hostname\";\n+    private static final String SERVICE_NAME = \"service_name\";\n+    private static final String TYPE = \"type\";\n+    private static final String MESSAGE = \"message\";\n+    private static final String SEVERITY = \"level\";\n+    private static final DateTimeFormatter DATE_TIME_FORMATTER =\n+            DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n+    private static final String DEFAULT_SEVERITY = \"INFO\";\n+    public static final String ID = \"_id\";\n+    public static final String SERVICE_ACCOUNT = \"service_account\";\n+\n+    private final GlobalSearchElasticHelper elasticHelper;\n+    private final MessageHelper messageHelper;\n+\n+    @Value(\"${log.security.elastic.index.prefix}\")\n+    private String indexTemplate;\n+\n+    /**\n+     * Searches log according to specified log filter.\n+     * @param logFilter - filter for constructing elasticsearch query\n+     * @return {@link LogPagination} object with related search result and additional information\n+     * */\n+    public LogPagination filter(final LogFilter logFilter) {\n+        final LogPaginationRequest pagination = logFilter.getPagination();\n+\n+        Assert.notNull(pagination, messageHelper.getMessage(MessageConstants.ERROR_PAGINATION_IS_NOT_PROVIDED));\n+        Assert.isTrue(pagination.getPageSize() > 0,\n+                messageHelper.getMessage(MessageConstants.ERROR_INVALID_PAGE_INDEX_OR_SIZE));\n+\n+        final SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()\n+                .query(constructQueryFilter(logFilter))\n+                .sort(MESSAGE_TIMESTAMP, SortOrder.ASC)\n+                .sort(ID, SortOrder.ASC)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8c9009bcbe84307e3d1d98634eb7b2b79212ca2"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExNDY2Nw==", "bodyText": "Two fields is used here to have unique value from pair. Here I try to resolve problem when two messages can be acquired at the same time. But indeed we should get rid of using _id as  tiebreaker, now ingest pipeline creates second field event_id to use it instead of _id", "url": "https://github.com/epam/cloud-pipeline/pull/1043#discussion_r406114667", "createdAt": "2020-04-09T10:38:16Z", "author": {"login": "SilinPavel"}, "path": "api/src/main/java/com/epam/pipeline/manager/log/LogManager.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.log;\n+\n+import com.epam.pipeline.common.MessageConstants;\n+import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.entity.log.*;\n+import com.epam.pipeline.exception.PipelineException;\n+import com.epam.pipeline.manager.utils.GlobalSearchElasticHelper;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang.BooleanUtils;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.search.ShardSearchFailure;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.index.query.RangeQueryBuilder;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation;\n+import org.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@Slf4j\n+@Service\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+public class LogManager {\n+\n+    private static final IndicesOptions INDICES_OPTIONS = IndicesOptions.fromOptions(true,\n+            SearchRequest.DEFAULT_INDICES_OPTIONS.allowNoIndices(),\n+            SearchRequest.DEFAULT_INDICES_OPTIONS.expandWildcardsOpen(),\n+            SearchRequest.DEFAULT_INDICES_OPTIONS.expandWildcardsClosed(),\n+            SearchRequest.DEFAULT_INDICES_OPTIONS);\n+\n+    private static final String USER = \"user\";\n+    private static final String TIMESTAMP = \"@timestamp\";\n+    private static final String MESSAGE_TIMESTAMP = \"message_timestamp\";\n+    private static final String HOSTNAME = \"hostname\";\n+    private static final String SERVICE_NAME = \"service_name\";\n+    private static final String TYPE = \"type\";\n+    private static final String MESSAGE = \"message\";\n+    private static final String SEVERITY = \"level\";\n+    private static final DateTimeFormatter DATE_TIME_FORMATTER =\n+            DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n+    private static final String DEFAULT_SEVERITY = \"INFO\";\n+    public static final String ID = \"_id\";\n+    public static final String SERVICE_ACCOUNT = \"service_account\";\n+\n+    private final GlobalSearchElasticHelper elasticHelper;\n+    private final MessageHelper messageHelper;\n+\n+    @Value(\"${log.security.elastic.index.prefix}\")\n+    private String indexTemplate;\n+\n+    /**\n+     * Searches log according to specified log filter.\n+     * @param logFilter - filter for constructing elasticsearch query\n+     * @return {@link LogPagination} object with related search result and additional information\n+     * */\n+    public LogPagination filter(final LogFilter logFilter) {\n+        final LogPaginationRequest pagination = logFilter.getPagination();\n+\n+        Assert.notNull(pagination, messageHelper.getMessage(MessageConstants.ERROR_PAGINATION_IS_NOT_PROVIDED));\n+        Assert.isTrue(pagination.getPageSize() > 0,\n+                messageHelper.getMessage(MessageConstants.ERROR_INVALID_PAGE_INDEX_OR_SIZE));\n+\n+        final SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()\n+                .query(constructQueryFilter(logFilter))\n+                .sort(MESSAGE_TIMESTAMP, SortOrder.ASC)\n+                .sort(ID, SortOrder.ASC)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MTYwMQ=="}, "originalCommit": {"oid": "a8c9009bcbe84307e3d1d98634eb7b2b79212ca2"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzI0MjU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/log/LogManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowOTo1MFrOGC2b-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowOTo1MFrOGC2b-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MjIzMw==", "bodyText": "Please, check usage of final here and below", "url": "https://github.com/epam/cloud-pipeline/pull/1043#discussion_r405642233", "createdAt": "2020-04-08T16:09:50Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/log/LogManager.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.log;\n+\n+import com.epam.pipeline.common.MessageConstants;\n+import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.entity.log.*;\n+import com.epam.pipeline.exception.PipelineException;\n+import com.epam.pipeline.manager.utils.GlobalSearchElasticHelper;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang.BooleanUtils;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.search.ShardSearchFailure;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.index.query.RangeQueryBuilder;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation;\n+import org.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.SortOrder;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@Slf4j\n+@Service\n+@Getter\n+@Setter\n+@RequiredArgsConstructor\n+public class LogManager {\n+\n+    private static final IndicesOptions INDICES_OPTIONS = IndicesOptions.fromOptions(true,\n+            SearchRequest.DEFAULT_INDICES_OPTIONS.allowNoIndices(),\n+            SearchRequest.DEFAULT_INDICES_OPTIONS.expandWildcardsOpen(),\n+            SearchRequest.DEFAULT_INDICES_OPTIONS.expandWildcardsClosed(),\n+            SearchRequest.DEFAULT_INDICES_OPTIONS);\n+\n+    private static final String USER = \"user\";\n+    private static final String TIMESTAMP = \"@timestamp\";\n+    private static final String MESSAGE_TIMESTAMP = \"message_timestamp\";\n+    private static final String HOSTNAME = \"hostname\";\n+    private static final String SERVICE_NAME = \"service_name\";\n+    private static final String TYPE = \"type\";\n+    private static final String MESSAGE = \"message\";\n+    private static final String SEVERITY = \"level\";\n+    private static final DateTimeFormatter DATE_TIME_FORMATTER =\n+            DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n+    private static final String DEFAULT_SEVERITY = \"INFO\";\n+    public static final String ID = \"_id\";\n+    public static final String SERVICE_ACCOUNT = \"service_account\";\n+\n+    private final GlobalSearchElasticHelper elasticHelper;\n+    private final MessageHelper messageHelper;\n+\n+    @Value(\"${log.security.elastic.index.prefix}\")\n+    private String indexTemplate;\n+\n+    /**\n+     * Searches log according to specified log filter.\n+     * @param logFilter - filter for constructing elasticsearch query\n+     * @return {@link LogPagination} object with related search result and additional information\n+     * */\n+    public LogPagination filter(final LogFilter logFilter) {\n+        final LogPaginationRequest pagination = logFilter.getPagination();\n+\n+        Assert.notNull(pagination, messageHelper.getMessage(MessageConstants.ERROR_PAGINATION_IS_NOT_PROVIDED));\n+        Assert.isTrue(pagination.getPageSize() > 0,\n+                messageHelper.getMessage(MessageConstants.ERROR_INVALID_PAGE_INDEX_OR_SIZE));\n+\n+        final SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()\n+                .query(constructQueryFilter(logFilter))\n+                .sort(MESSAGE_TIMESTAMP, SortOrder.ASC)\n+                .sort(ID, SortOrder.ASC)\n+                .size(pagination.getPageSize() + 1);\n+\n+        if (logFilter.getPagination().getToken() != null) {\n+            searchSourceBuilder.searchAfter(\n+                    new Object[]{\n+                            logFilter.getPagination().getToken().getMessageTimestamp().toString(),\n+                            logFilter.getPagination().getToken().getId()\n+                    }\n+            );\n+        }\n+\n+        final SearchHits hits = verifyResponse(\n+                                    executeRequest(new SearchRequest(indexTemplate)\n+                                            .source(searchSourceBuilder)\n+                                            .indicesOptions(INDICES_OPTIONS))\n+                                ).getHits();\n+\n+        final List<LogEntry> entries = Arrays.stream(hits.getHits())\n+                .map(this::mapHitToLogEntry)\n+                .collect(Collectors.toList());\n+\n+        return LogPagination.builder()\n+                .logEntries(entries.stream().limit(pagination.getPageSize()).collect(Collectors.toList()))\n+                .pageSize(pagination.getPageSize())\n+                .token(getToken(entries, pagination.getPageSize()))\n+                .totalHits(hits.totalHits)\n+                .build();\n+    }\n+\n+    private PageMarker getToken(List<LogEntry> items, int pageSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8c9009bcbe84307e3d1d98634eb7b2b79212ca2"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 430, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}