{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NDY4MDIw", "number": 1114, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoyNDozMlrOD-S7JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjozMDozNlrOD-TD7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjQ4MzU3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/dao/cluster/NodeDiskDao.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoyNDozMlrOGYT2jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMTozNDozNVrOGYvl7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NDI3MQ==", "bodyText": "Please add Transactional annotation", "url": "https://github.com/epam/cloud-pipeline/pull/1114#discussion_r428144271", "createdAt": "2020-05-20T16:24:32Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/dao/cluster/NodeDiskDao.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.epam.pipeline.dao.cluster;\n+\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.DiskRegistrationRequest;\n+import com.epam.pipeline.entity.utils.DateUtils;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcDaoSupport;\n+\n+import java.sql.Timestamp;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@RequiredArgsConstructor\n+public class NodeDiskDao extends NamedParameterJdbcDaoSupport {\n+    \n+    private final String insertNodeDiskQuery;\n+    private final String loadNodeDisksByNodeIdQuery;\n+    private final String deleteNodeDisksByNodeIdQuery;\n+\n+    public List<NodeDisk> insert(final String nodeId, final List<DiskRegistrationRequest> requests) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436ad7b389701e28a76bab908fbfadfd97ec1a43"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5ODc2Nw==", "bodyText": "Added.", "url": "https://github.com/epam/cloud-pipeline/pull/1114#discussion_r428598767", "createdAt": "2020-05-21T11:34:35Z", "author": {"login": "tcibinan"}, "path": "api/src/main/java/com/epam/pipeline/dao/cluster/NodeDiskDao.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.epam.pipeline.dao.cluster;\n+\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.DiskRegistrationRequest;\n+import com.epam.pipeline.entity.utils.DateUtils;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcDaoSupport;\n+\n+import java.sql.Timestamp;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@RequiredArgsConstructor\n+public class NodeDiskDao extends NamedParameterJdbcDaoSupport {\n+    \n+    private final String insertNodeDiskQuery;\n+    private final String loadNodeDisksByNodeIdQuery;\n+    private final String deleteNodeDisksByNodeIdQuery;\n+\n+    public List<NodeDisk> insert(final String nodeId, final List<DiskRegistrationRequest> requests) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NDI3MQ=="}, "originalCommit": {"oid": "436ad7b389701e28a76bab908fbfadfd97ec1a43"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjUwNjA3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/dao/cluster/NodeDiskDaoTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjozMDozNlrOGYUFaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMTozNjowMFrOGYvoUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0ODA3NQ==", "bodyText": "You can just add @Transactional annotation to the class and all DB changes will be rolled-back.", "url": "https://github.com/epam/cloud-pipeline/pull/1114#discussion_r428148075", "createdAt": "2020-05-20T16:30:36Z", "author": {"login": "mzueva"}, "path": "api/src/test/java/com/epam/pipeline/dao/cluster/NodeDiskDaoTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package com.epam.pipeline.dao.cluster;\n+\n+import com.epam.pipeline.AbstractSpringTest;\n+import com.epam.pipeline.entity.cluster.DiskRegistrationRequest;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.utils.DateUtils;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataIntegrityViolationException;\n+\n+import java.time.LocalDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NodeDiskDaoTest extends AbstractSpringTest {\n+    \n+    private static final String NODE_ID = \"NODE_ID\";\n+    private static final String ANOTHER_NODE_ID = \"ANOTHER_NODE_ID\";\n+    private static final String NULL_NODE_ID = null;\n+    private static final Long SIZE = 1L;\n+    private static final Long NULL_SIZE = null;\n+\n+    @Autowired\n+    private NodeDiskDao dao;\n+\n+    @After\n+    public void deleteDisksByNodeId() {\n+        dao.deleteByNodeId(NODE_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436ad7b389701e28a76bab908fbfadfd97ec1a43"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5OTM3OQ==", "bodyText": "That's good. Thanks. Added.", "url": "https://github.com/epam/cloud-pipeline/pull/1114#discussion_r428599379", "createdAt": "2020-05-21T11:36:00Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/dao/cluster/NodeDiskDaoTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package com.epam.pipeline.dao.cluster;\n+\n+import com.epam.pipeline.AbstractSpringTest;\n+import com.epam.pipeline.entity.cluster.DiskRegistrationRequest;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.utils.DateUtils;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataIntegrityViolationException;\n+\n+import java.time.LocalDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NodeDiskDaoTest extends AbstractSpringTest {\n+    \n+    private static final String NODE_ID = \"NODE_ID\";\n+    private static final String ANOTHER_NODE_ID = \"ANOTHER_NODE_ID\";\n+    private static final String NULL_NODE_ID = null;\n+    private static final Long SIZE = 1L;\n+    private static final Long NULL_SIZE = null;\n+\n+    @Autowired\n+    private NodeDiskDao dao;\n+\n+    @After\n+    public void deleteDisksByNodeId() {\n+        dao.deleteByNodeId(NODE_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0ODA3NQ=="}, "originalCommit": {"oid": "436ad7b389701e28a76bab908fbfadfd97ec1a43"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 444, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}