{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MDQwMzQ3", "number": 1693, "title": "Issue #1687: rewritten tests (replacing Spring test context with simp\u2026", "bodyText": "Issue #1687\nSigned-off-by: Iurii_Kofanov youkofan@gmail.com", "createdAt": "2020-12-28T10:46:15Z", "url": "https://github.com/epam/cloud-pipeline/pull/1693", "merged": true, "mergeCommit": {"oid": "97fb22e435236484e928848be06b3dedd7a37d35"}, "closed": true, "closedAt": "2021-01-13T16:18:39Z", "author": {"login": "YouKofan"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdqjzPZAH2gAyNTQ2MDQwMzQ3OjFhYjJhM2RkNDg0NzY4OWU2NDUyMWEzNjMxYTQ3ZGY4MmIyNTM1MTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdvEYavAFqTU2NTI0NzMxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1ab2a3dd4847689e64521a3631a47df82b253518", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/1ab2a3dd4847689e64521a3631a47df82b253518", "committedDate": "2020-12-28T10:44:42Z", "message": "Issue #1687: rewritten tests (replacing Spring test context with simple JUnit)\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MTMxNzgz", "url": "https://github.com/epam/cloud-pipeline/pull/1693#pullrequestreview-559131783", "createdAt": "2020-12-28T12:49:28Z", "commit": {"oid": "1ab2a3dd4847689e64521a3631a47df82b253518"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMjo0OToyOFrOIL41fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzo1OTowMlrOIL6HYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMzNjQ0Ng==", "bodyText": "I would prefer to add changes to tests class instead of service. For example:\nUserAccessService accessService = new UserAccessService(userManager, true)", "url": "https://github.com/epam/cloud-pipeline/pull/1693#discussion_r549336446", "createdAt": "2020-12-28T12:49:28Z", "author": {"login": "ekazachkova"}, "path": "api/src/main/java/com/epam/pipeline/security/UserAccessService.java", "diffHunk": "@@ -34,6 +35,7 @@\n \n @Service\n @Slf4j\n+@NoArgsConstructor(force = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab2a3dd4847689e64521a3631a47df82b253518"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMzODU0Mw==", "bodyText": "Let's make this field final", "url": "https://github.com/epam/cloud-pipeline/pull/1693#discussion_r549338543", "createdAt": "2020-12-28T12:56:43Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/security/saml/SAMLUserDetailsServiceImplTest.java", "diffHunk": "@@ -105,261 +116,262 @@ public void setUp() {\n         expectedUserContext.setGroups(groups);\n \n         MockitoAnnotations.initMocks(this);\n-        Mockito.when(nameID.getValue()).thenReturn(USER_NAME);\n-        Mockito.when(credential.getNameID()).thenReturn(nameID);\n+        when(nameID.getValue()).thenReturn(USER_NAME);\n+        when(credential.getNameID()).thenReturn(nameID);\n         String[] mockAttributesArray = {SAML_ATTRIBUTE_1, SAML_ATTRIBUTE_2};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab2a3dd4847689e64521a3631a47df82b253518"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0MDMxNw==", "bodyText": "Let's reorganize methods order: the test methods shall above others", "url": "https://github.com/epam/cloud-pipeline/pull/1693#discussion_r549340317", "createdAt": "2020-12-28T13:02:39Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/security/saml/SAMLUserDetailsServiceImplTest.java", "diffHunk": "@@ -105,261 +116,262 @@ public void setUp() {\n         expectedUserContext.setGroups(groups);\n \n         MockitoAnnotations.initMocks(this);\n-        Mockito.when(nameID.getValue()).thenReturn(USER_NAME);\n-        Mockito.when(credential.getNameID()).thenReturn(nameID);\n+        when(nameID.getValue()).thenReturn(USER_NAME);\n+        when(credential.getNameID()).thenReturn(nameID);\n         String[] mockAttributesArray = {SAML_ATTRIBUTE_1, SAML_ATTRIBUTE_2};\n-        Mockito.when(credential.getAttributeAsStringArray(Matchers.anyString())).thenReturn(mockAttributesArray);\n-        Mockito.when(credential.getAttributeAsString(Matchers.anyString())).thenReturn(SAML_ATTRIBUTES_STRING);\n+        when(credential.getAttributeAsStringArray(anyString())).thenReturn(mockAttributesArray);\n+        when(credential.getAttributeAsString(anyString())).thenReturn(SAML_ATTRIBUTES_STRING);\n+        when(messageHelper.getMessage(anyString(), any())).thenReturn(TEST_STRING);\n     }\n \n     @Test\n     public void testLoadUserBySAMLWithCreation() {\n-        switchToAutoMode();\n-\n+        switchRegisterStrategyTo(AUTO);\n+        mockUserDoesNotExistSituation();\n         user.setUserName(USER_NAME);\n+        when(roleManager.getDefaultRolesIds()).thenReturn(Collections.singletonList(1L));\n+        doNothing().when(accessService).validateUserGroupsBlockStatus(any());\n \n-        mockUserDoesNotExistSituation();\n+        final UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n \n-        UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n         Assert.assertEquals(expectedUserContext.getUsername(), actualUserContext.getUsername());\n         Assert.assertEquals(expectedUserContext.getGroups(), actualUserContext.getGroups());\n     }\n \n     @Test\n     public void testLoadUserBySAMLWithExistingUser() {\n-        switchToAutoMode();\n-\n+        switchRegisterStrategyTo(AUTO);\n         user.setUserName(OLD_USER_NAME);\n         user.setGroups(Stream.of(SAML_ATTRIBUTE_1).collect(Collectors.toList()));\n-\n-        Mockito.when(userManager.loadUserByName(Matchers.anyString())).thenReturn(user);\n         user.setGroups(Stream.of(SAML_ATTRIBUTE_1, SAML_ATTRIBUTE_2).collect(Collectors.toList()));\n-        Mockito.when(userManager.updateUserSAMLInfo(Matchers.anyLong(), Matchers.anyString(),\n-                                                    Matchers.anyListOf(Long.class), Matchers.anyListOf(String.class),\n-                                                    Matchers.anyMapOf(String.class, String.class))).thenReturn(user);\n+        when(userManager.loadUserByName(anyString())).thenReturn(user);\n+        doNothing().when(accessService).validateUserGroupsBlockStatus(any());\n+        when(userManager.updateUserSAMLInfo(anyLong(), anyString(),\n+                anyListOf(Long.class), anyListOf(String.class),\n+                anyMapOf(String.class, String.class))).thenReturn(user);\n+\n+        final UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n \n-        UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n         Assert.assertEquals(expectedUserContext.getUsername(), actualUserContext.getUsername());\n         Assert.assertEquals(expectedUserContext.getGroups(), actualUserContext.getGroups());\n     }\n \n     @Test\n     public void testReadAuthorities() {\n-        List<String> actualAuthorities = userDetailsService.readAuthorities(credential);\n+        setAuthorities();\n+\n+        final List<String> actualAuthorities = userDetailsService.readAuthorities(credential);\n+\n         Assert.assertTrue(CollectionUtils.isEqualCollection(groups, actualAuthorities));\n     }\n \n     @Test\n     public void testReadAttributes() {\n-        Map<String, String> readAttributes = userDetailsService.readAttributes(credential);\n+        setSamlAttributes();\n+\n+        final Map<String, String> readAttributes = userDetailsService.readAttributes(credential);\n+\n         Assert.assertTrue(CollectionUtils.isEqualCollection(expectedAttributes.entrySet(), readAttributes.entrySet()));\n     }\n \n     @Test\n-    @WithMockUser(username = USER_NAME)\n     public void shouldRegisterUserIfGroupPresentsAndEntityExistsWithExplicitGroupMode() {\n-        switchToExplicitGroupMode();\n-\n+        switchRegisterStrategyTo(EXPLICIT_GROUP);\n         mockUserDoesNotExistSituation();\n+        setAuthorities();\n+        setSamlAttributes();\n         user.setUserName(USER_NAME);\n-\n-        final Folder folder = initFolder();\n-        initFolderPermissions(folder);\n+        when(grantPermissionManager.isGroupRegistered(any())).thenReturn(true);\n+        when(roleManager.getDefaultRolesIds()).thenReturn(Collections.singletonList(1L));\n+        doNothing().when(accessService).validateUserGroupsBlockStatus(any());\n \n         final UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n+\n         Assert.assertEquals(expectedUserContext.getUsername(), actualUserContext.getUsername());\n         Assert.assertEquals(expectedUserContext.getGroups(), actualUserContext.getGroups());\n     }\n \n     @Test\n-    @WithMockUser(username = USER_NAME)\n     public void shouldAuthorizeRegisteredUserIfHisGroupsHaveValidGroupStatus() {\n         setValidGroupsStatusForUser();\n+        doNothing().when(accessService).validateUserGroupsBlockStatus(any());\n+\n         final UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n+\n         Assert.assertEquals(expectedUserContext.getUsername(), actualUserContext.getUsername());\n         Assert.assertEquals(expectedUserContext.getGroups(), actualUserContext.getGroups());\n     }\n \n     @Test\n-    @WithMockUser(username = USER_NAME)\n     public void shouldAuthorizeRegisteredUserIfHisGroupsAreNotAtGroupStatus() {\n         setEmptyGroupsStatusListForUser();\n+        doNothing().when(accessService).validateUserGroupsBlockStatus(any());\n+\n         final UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n+\n         Assert.assertEquals(expectedUserContext.getUsername(), actualUserContext.getUsername());\n         Assert.assertEquals(expectedUserContext.getGroups(), actualUserContext.getGroups());\n     }\n \n-    @Test(expected = UsernameNotFoundException.class)\n-    @WithMockUser(username = USER_NAME)\n+    @Test\n     public void shouldNotRegisterUserIfGroupPresentsButNoEntityReferWithExplicitGroupMode() {\n-        switchToExplicitGroupMode();\n-\n+        switchRegisterStrategyTo(EXPLICIT_GROUP);\n         mockUserDoesNotExistSituation();\n+        setAuthorities();\n+        setSamlAttributes();\n \n-        final Folder folder = initFolder();\n-        initFolderPermissions(folder);\n-        folderManager.delete(folder.getId());\n-\n-        userDetailsService.loadUserBySAML(credential);\n+        assertThrows(UsernameNotFoundException.class, () -> userDetailsService.loadUserBySAML(credential));\n     }\n \n-    @Test(expected = UsernameNotFoundException.class)\n-    @WithMockUser(username = USER_NAME)\n+    @Test\n     public void shouldNotRegisterUserIfGroupNotPresentsWithExplicitGroupMode() {\n-        switchToExplicitGroupMode();\n-\n+        switchRegisterStrategyTo(EXPLICIT_GROUP);\n         mockUserDoesNotExistSituation();\n         final String[] mockAttributesArray = {\"unknown\"};\n-        Mockito.when(credential.getAttributeAsStringArray(Matchers.anyString())).thenReturn(mockAttributesArray);\n-\n-        final Folder folder = initFolder();\n-        initFolderPermissions(folder);\n+        when(credential.getAttributeAsStringArray(anyString())).thenReturn(mockAttributesArray);\n \n-        userDetailsService.loadUserBySAML(credential);\n+        assertThrows(UsernameNotFoundException.class, () -> userDetailsService.loadUserBySAML(credential));\n     }\n \n-    @Test(expected = UsernameNotFoundException.class)\n-    @WithMockUser(username = USER_NAME)\n+    @Test\n     public void shouldNotRegisterUserWithExplicitMode() {\n-        switchToExplicitMode();\n-\n+        switchRegisterStrategyTo(EXPLICIT);\n         mockUserDoesNotExistSituation();\n \n-        userDetailsService.loadUserBySAML(credential);\n+        assertThrows(UsernameNotFoundException.class, () -> userDetailsService.loadUserBySAML(credential));\n     }\n \n     private void mockUserDoesNotExistSituation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab2a3dd4847689e64521a3631a47df82b253518"}, "originalPosition": 316}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NDIzMQ==", "bodyText": "Let's add a test fixes too: do we need this assignment?", "url": "https://github.com/epam/cloud-pipeline/pull/1693#discussion_r549344231", "createdAt": "2020-12-28T13:15:57Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/security/saml/SAMLUserDetailsServiceImplTest.java", "diffHunk": "@@ -105,261 +116,262 @@ public void setUp() {\n         expectedUserContext.setGroups(groups);\n \n         MockitoAnnotations.initMocks(this);\n-        Mockito.when(nameID.getValue()).thenReturn(USER_NAME);\n-        Mockito.when(credential.getNameID()).thenReturn(nameID);\n+        when(nameID.getValue()).thenReturn(USER_NAME);\n+        when(credential.getNameID()).thenReturn(nameID);\n         String[] mockAttributesArray = {SAML_ATTRIBUTE_1, SAML_ATTRIBUTE_2};\n-        Mockito.when(credential.getAttributeAsStringArray(Matchers.anyString())).thenReturn(mockAttributesArray);\n-        Mockito.when(credential.getAttributeAsString(Matchers.anyString())).thenReturn(SAML_ATTRIBUTES_STRING);\n+        when(credential.getAttributeAsStringArray(anyString())).thenReturn(mockAttributesArray);\n+        when(credential.getAttributeAsString(anyString())).thenReturn(SAML_ATTRIBUTES_STRING);\n+        when(messageHelper.getMessage(anyString(), any())).thenReturn(TEST_STRING);\n     }\n \n     @Test\n     public void testLoadUserBySAMLWithCreation() {\n-        switchToAutoMode();\n-\n+        switchRegisterStrategyTo(AUTO);\n+        mockUserDoesNotExistSituation();\n         user.setUserName(USER_NAME);\n+        when(roleManager.getDefaultRolesIds()).thenReturn(Collections.singletonList(1L));\n+        doNothing().when(accessService).validateUserGroupsBlockStatus(any());\n \n-        mockUserDoesNotExistSituation();\n+        final UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n \n-        UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n         Assert.assertEquals(expectedUserContext.getUsername(), actualUserContext.getUsername());\n         Assert.assertEquals(expectedUserContext.getGroups(), actualUserContext.getGroups());\n     }\n \n     @Test\n     public void testLoadUserBySAMLWithExistingUser() {\n-        switchToAutoMode();\n-\n+        switchRegisterStrategyTo(AUTO);\n         user.setUserName(OLD_USER_NAME);\n         user.setGroups(Stream.of(SAML_ATTRIBUTE_1).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab2a3dd4847689e64521a3631a47df82b253518"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM1NzQxMQ==", "bodyText": "Let's move this lines into the separate method:\nAssert.assertEquals(expectedUserContext.getUsername(), actualUserContext.getUsername());\nAssert.assertEquals(expectedUserContext.getGroups(), actualUserContext.getGroups());", "url": "https://github.com/epam/cloud-pipeline/pull/1693#discussion_r549357411", "createdAt": "2020-12-28T13:59:02Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/security/saml/SAMLUserDetailsServiceImplTest.java", "diffHunk": "@@ -105,261 +116,262 @@ public void setUp() {\n         expectedUserContext.setGroups(groups);\n \n         MockitoAnnotations.initMocks(this);\n-        Mockito.when(nameID.getValue()).thenReturn(USER_NAME);\n-        Mockito.when(credential.getNameID()).thenReturn(nameID);\n+        when(nameID.getValue()).thenReturn(USER_NAME);\n+        when(credential.getNameID()).thenReturn(nameID);\n         String[] mockAttributesArray = {SAML_ATTRIBUTE_1, SAML_ATTRIBUTE_2};\n-        Mockito.when(credential.getAttributeAsStringArray(Matchers.anyString())).thenReturn(mockAttributesArray);\n-        Mockito.when(credential.getAttributeAsString(Matchers.anyString())).thenReturn(SAML_ATTRIBUTES_STRING);\n+        when(credential.getAttributeAsStringArray(anyString())).thenReturn(mockAttributesArray);\n+        when(credential.getAttributeAsString(anyString())).thenReturn(SAML_ATTRIBUTES_STRING);\n+        when(messageHelper.getMessage(anyString(), any())).thenReturn(TEST_STRING);\n     }\n \n     @Test\n     public void testLoadUserBySAMLWithCreation() {\n-        switchToAutoMode();\n-\n+        switchRegisterStrategyTo(AUTO);\n+        mockUserDoesNotExistSituation();\n         user.setUserName(USER_NAME);\n+        when(roleManager.getDefaultRolesIds()).thenReturn(Collections.singletonList(1L));\n+        doNothing().when(accessService).validateUserGroupsBlockStatus(any());\n \n-        mockUserDoesNotExistSituation();\n+        final UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n \n-        UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n         Assert.assertEquals(expectedUserContext.getUsername(), actualUserContext.getUsername());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab2a3dd4847689e64521a3631a47df82b253518"}, "originalPosition": 168}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae6394c294d75dece75c67b814e64996a27fb448", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/ae6394c294d75dece75c67b814e64996a27fb448", "committedDate": "2020-12-28T16:21:26Z", "message": "Issue #1687: improvements and refactoring in accordance with comments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5OTcwNDA5", "url": "https://github.com/epam/cloud-pipeline/pull/1693#pullrequestreview-559970409", "createdAt": "2020-12-30T09:25:56Z", "commit": {"oid": "ae6394c294d75dece75c67b814e64996a27fb448"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToyNTo1NlrOIMl3Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToyNjo1OVrOIMl68Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA3NDE5NA==", "bodyText": "Let's stick to a single mock strategy and use annotation:\n@Spy\nprivate final UserAccessService spyAccessService = new UserAccessService(mockUserManager, true);", "url": "https://github.com/epam/cloud-pipeline/pull/1693#discussion_r550074194", "createdAt": "2020-12-30T09:25:56Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/security/saml/SAMLUserDetailsServiceImplTest.java", "diffHunk": "@@ -85,82 +85,75 @@\n     private Map<String, String> expectedAttributes = new HashMap<>();\n \n     @Mock\n-    private GrantPermissionManager grantPermissionManager;\n+    private GrantPermissionManager mockPermissionManager;\n \n     @Mock\n-    private SAMLCredential credential;\n+    private SAMLCredential mockCredential;\n \n     @Mock\n-    private NameID nameID;\n+    private NameID mockNameID;\n \n     @Mock\n-    private UserManager userManager;\n+    private UserManager mockUserManager;\n \n     @Mock\n-    private MessageHelper messageHelper;\n+    private MessageHelper mockMessageHelper;\n \n     @Mock\n-    private RoleManager roleManager;\n-\n-    @Spy\n-    private UserAccessService accessService;\n+    private RoleManager mockRoleManager;\n \n     @InjectMocks\n     private SAMLUserDetailsServiceImpl userDetailsService;\n \n+    private UserAccessService spyAccessService;\n+\n     @Before\n     public void setUp() {\n+        spyAccessService = Mockito.spy(new UserAccessService(mockUserManager, true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae6394c294d75dece75c67b814e64996a27fb448"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA3NTEyMQ==", "bodyText": "Could you please check this comment?", "url": "https://github.com/epam/cloud-pipeline/pull/1693#discussion_r550075121", "createdAt": "2020-12-30T09:26:59Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/security/saml/SAMLUserDetailsServiceImplTest.java", "diffHunk": "@@ -105,261 +116,262 @@ public void setUp() {\n         expectedUserContext.setGroups(groups);\n \n         MockitoAnnotations.initMocks(this);\n-        Mockito.when(nameID.getValue()).thenReturn(USER_NAME);\n-        Mockito.when(credential.getNameID()).thenReturn(nameID);\n+        when(nameID.getValue()).thenReturn(USER_NAME);\n+        when(credential.getNameID()).thenReturn(nameID);\n         String[] mockAttributesArray = {SAML_ATTRIBUTE_1, SAML_ATTRIBUTE_2};\n-        Mockito.when(credential.getAttributeAsStringArray(Matchers.anyString())).thenReturn(mockAttributesArray);\n-        Mockito.when(credential.getAttributeAsString(Matchers.anyString())).thenReturn(SAML_ATTRIBUTES_STRING);\n+        when(credential.getAttributeAsStringArray(anyString())).thenReturn(mockAttributesArray);\n+        when(credential.getAttributeAsString(anyString())).thenReturn(SAML_ATTRIBUTES_STRING);\n+        when(messageHelper.getMessage(anyString(), any())).thenReturn(TEST_STRING);\n     }\n \n     @Test\n     public void testLoadUserBySAMLWithCreation() {\n-        switchToAutoMode();\n-\n+        switchRegisterStrategyTo(AUTO);\n+        mockUserDoesNotExistSituation();\n         user.setUserName(USER_NAME);\n+        when(roleManager.getDefaultRolesIds()).thenReturn(Collections.singletonList(1L));\n+        doNothing().when(accessService).validateUserGroupsBlockStatus(any());\n \n-        mockUserDoesNotExistSituation();\n+        final UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n \n-        UserContext actualUserContext = userDetailsService.loadUserBySAML(credential);\n         Assert.assertEquals(expectedUserContext.getUsername(), actualUserContext.getUsername());\n         Assert.assertEquals(expectedUserContext.getGroups(), actualUserContext.getGroups());\n     }\n \n     @Test\n     public void testLoadUserBySAMLWithExistingUser() {\n-        switchToAutoMode();\n-\n+        switchRegisterStrategyTo(AUTO);\n         user.setUserName(OLD_USER_NAME);\n         user.setGroups(Stream.of(SAML_ATTRIBUTE_1).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NDIzMQ=="}, "originalCommit": {"oid": "1ab2a3dd4847689e64521a3631a47df82b253518"}, "originalPosition": 178}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cece52e73e48329053771a1bcb8f910af196c388", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/cece52e73e48329053771a1bcb8f910af196c388", "committedDate": "2020-12-30T10:58:31Z", "message": "Issue #1687: Initialization of UserAccessService spy has been changed\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e699881c7559a08b1fdd09f843e66bbba208a62", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/2e699881c7559a08b1fdd09f843e66bbba208a62", "committedDate": "2020-12-30T11:47:56Z", "message": "Issue #1687: removed redundant setter\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMDc0MDA4", "url": "https://github.com/epam/cloud-pipeline/pull/1693#pullrequestreview-560074008", "createdAt": "2020-12-30T14:40:07Z", "commit": {"oid": "2e699881c7559a08b1fdd09f843e66bbba208a62"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDo0MDowN1rOIMukUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNDo0MDowN1rOIMukUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxNjc4NA==", "bodyText": "It seems that this mock doesn't affect anything.", "url": "https://github.com/epam/cloud-pipeline/pull/1693#discussion_r550216784", "createdAt": "2020-12-30T14:40:07Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/security/saml/SAMLUserDetailsServiceImplTest.java", "diffHunk": "@@ -105,263 +116,252 @@ public void setUp() {\n         expectedUserContext.setGroups(groups);\n \n         MockitoAnnotations.initMocks(this);\n-        Mockito.when(nameID.getValue()).thenReturn(USER_NAME);\n-        Mockito.when(credential.getNameID()).thenReturn(nameID);\n-        String[] mockAttributesArray = {SAML_ATTRIBUTE_1, SAML_ATTRIBUTE_2};\n-        Mockito.when(credential.getAttributeAsStringArray(Matchers.anyString())).thenReturn(mockAttributesArray);\n-        Mockito.when(credential.getAttributeAsString(Matchers.anyString())).thenReturn(SAML_ATTRIBUTES_STRING);\n+        when(mockNameID.getValue()).thenReturn(USER_NAME);\n+        when(mockCredential.getNameID()).thenReturn(mockNameID);\n+        final String[] mockAttributesArray = {SAML_ATTRIBUTE_1, SAML_ATTRIBUTE_2};\n+        when(mockCredential.getAttributeAsStringArray(anyString())).thenReturn(mockAttributesArray);\n+        when(mockCredential.getAttributeAsString(anyString())).thenReturn(SAML_ATTRIBUTES_STRING);\n+        when(mockMessageHelper.getMessage(anyString(), any())).thenReturn(TEST_STRING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e699881c7559a08b1fdd09f843e66bbba208a62"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "668305a64eaabe265a32035adeaf34d6148b22ee", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/668305a64eaabe265a32035adeaf34d6148b22ee", "committedDate": "2020-12-30T14:55:43Z", "message": "Issue #1687: removed redundant mock behaviour\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMDg0MzAy", "url": "https://github.com/epam/cloud-pipeline/pull/1693#pullrequestreview-560084302", "createdAt": "2020-12-30T15:05:35Z", "commit": {"oid": "668305a64eaabe265a32035adeaf34d6148b22ee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNTowNTozNVrOIMvFsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNTowNTozNVrOIMvFsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIyNTMzMA==", "bodyText": "Let's add @SuppressWarnings(\"PMD.UnusedPrivateField\") to avoid pmdTest task failure.", "url": "https://github.com/epam/cloud-pipeline/pull/1693#discussion_r550225330", "createdAt": "2020-12-30T15:05:35Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/security/saml/SAMLUserDetailsServiceImplTest.java", "diffHunk": "@@ -16,86 +16,97 @@\n \n package com.epam.pipeline.security.saml;\n \n-import com.epam.pipeline.AbstractSpringTest;\n-import com.epam.pipeline.app.TestApplicationWithAclSecurity;\n-import com.epam.pipeline.controller.vo.PermissionGrantVO;\n-import com.epam.pipeline.entity.pipeline.Folder;\n-import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.common.MessageHelper;\n import com.epam.pipeline.entity.user.GroupStatus;\n import com.epam.pipeline.entity.user.PipelineUser;\n import com.epam.pipeline.entity.user.Role;\n-import com.epam.pipeline.manager.pipeline.FolderManager;\n import com.epam.pipeline.manager.security.GrantPermissionManager;\n+import com.epam.pipeline.manager.user.RoleManager;\n import com.epam.pipeline.manager.user.UserManager;\n+import com.epam.pipeline.security.UserAccessService;\n import com.epam.pipeline.security.UserContext;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InjectMocks;\n-import org.mockito.Matchers;\n import org.mockito.Mock;\n-import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n+import org.mockito.Spy;\n import org.opensaml.saml2.core.NameID;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.security.authentication.LockedException;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.springframework.security.saml.SAMLCredential;\n-import org.springframework.security.test.context.support.WithMockUser;\n-import org.springframework.test.annotation.DirtiesContext;\n-import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.util.ReflectionTestUtils;\n-import org.springframework.transaction.annotation.Propagation;\n-import org.springframework.transaction.annotation.Transactional;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Collections;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-@DirtiesContext\n-@ContextConfiguration(classes = TestApplicationWithAclSecurity.class)\n-@Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-public class SAMLUserDetailsServiceImplTest extends AbstractSpringTest {\n+import static com.epam.pipeline.security.saml.SamlUserRegisterStrategy.AUTO;\n+import static com.epam.pipeline.security.saml.SamlUserRegisterStrategy.EXPLICIT;\n+import static com.epam.pipeline.security.saml.SamlUserRegisterStrategy.EXPLICIT_GROUP;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyListOf;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.anyMapOf;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class SAMLUserDetailsServiceImplTest {\n \n     private static final String USER_NAME = \"TEST_USER\";\n+    private static final String TEST_STRING = \"TEST\";\n     private static final String OLD_USER_NAME = \"user_name\";\n     private static final String SAML_ATTRIBUTE_1 = \"ATTR_1\";\n     private static final String SAML_ATTRIBUTE_2 = \"ATTR_2\";\n     private static final String SAML_ATTRIBUTES_STRING = \"ATTR_3\";\n     private static final String ATTRIBUTES_KEY_1 = \"email\";\n     private static final String ATTRIBUTES_KEY_2 = \"user\";\n-    private static final String TEST_FOLDER = \"test-folder\";\n-    private PipelineUser user = new PipelineUser();\n-    private Map<String, String> expectedAttributes = new HashMap<>();\n-    private List<String> groups = Stream.of(SAML_ATTRIBUTE_1, SAML_ATTRIBUTE_2).collect(Collectors.toList());\n-    private UserContext expectedUserContext = new UserContext(1L, USER_NAME.toUpperCase());\n     private static final String SAML_ATTRIBUTE_BLOCKED_USER_VALUE_1 = \"true\";\n     private static final String SAML_ATTRIBUTE_BLOCKED_USER_VALUE_2 = \"True\";\n     private static final String SAML_ATTRIBUTE_BLOCKED_USER_VALUE_3 = \"TRUE\";\n+    private static final String SAML_ATTRIBUTE_BLOCKED_USER_VALUE_4 = \"tRUe\";\n     private static final String SAML_ATTRIBUTE_NOT_BLOCKED_USER_VALUE = \"false\";\n \n-    @InjectMocks\n-    @Autowired\n-    private SAMLUserDetailsServiceImpl userDetailsService;\n-    @Autowired\n-    private GrantPermissionManager grantPermissionManager;\n-    @Autowired\n-    private FolderManager folderManager;\n+    private final PipelineUser user = new PipelineUser();\n+    private final List<String> groups = Stream.of(SAML_ATTRIBUTE_1, SAML_ATTRIBUTE_2).collect(Collectors.toList());\n+    private final UserContext expectedUserContext = new UserContext(1L, USER_NAME.toUpperCase());\n+    private Map<String, String> expectedAttributes = new HashMap<>();\n \n     @Mock\n-    private SAMLCredential credential;\n+    private GrantPermissionManager mockPermissionManager;\n \n     @Mock\n-    private NameID nameID;\n+    private SAMLCredential mockCredential;\n \n-    @MockBean\n-    private UserManager userManager;\n+    @Mock\n+    private NameID mockNameID;\n+\n+    @Mock\n+    private UserManager mockUserManager;\n+\n+    @Mock\n+    private MessageHelper mockMessageHelper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668305a64eaabe265a32035adeaf34d6148b22ee"}, "originalPosition": 128}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9acb04e23cf135d9e821017f6952d6d2a9e9ee67", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/9acb04e23cf135d9e821017f6952d6d2a9e9ee67", "committedDate": "2020-12-30T15:52:44Z", "message": "Issue #1687: added @SuppressWarnings\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1MjQ3MzE3", "url": "https://github.com/epam/cloud-pipeline/pull/1693#pullrequestreview-565247317", "createdAt": "2021-01-11T10:57:58Z", "commit": {"oid": "9acb04e23cf135d9e821017f6952d6d2a9e9ee67"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3634, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}