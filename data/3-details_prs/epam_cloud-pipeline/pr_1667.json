{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNjY2MTUz", "number": 1667, "title": "`pipe` shall allow to import users from CSV", "bodyText": "The current PR provides implementation for issue #1639 and contains the following changes:\n\na new API method POST users/import was implemented. This method registers users, roles and metadata specified in input file. Supports optional query parameters:\n\ncreateUser - true if user shall be created if not exists. Default: false\ncreateGroup - true if group shall be created if not exists. Default: false\ncreateMetadata - the list of metadata keys that shall be created if not exists\n\n\na new CLI command pipe users import <path-to-file> implemented. This command provides the following options:\n\n--create-user (-cu) - true if user shall be created if not exists. Default: false\n--create-group (-cg) - true if group shall be created if not exists. Default: false\n--create-metadata (-cm) - metadata keys that shall be created. Multiple options supported.", "createdAt": "2020-12-18T17:02:46Z", "url": "https://github.com/epam/cloud-pipeline/pull/1667", "merged": true, "mergeCommit": {"oid": "a20e9220c318621438ad62e3c6a1cdf21e9d8be3"}, "closed": true, "closedAt": "2020-12-21T17:16:52Z", "author": {"login": "ekazachkova"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoVWKOgFqTU1NjM0ODA3Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoZNlMAFqTU1NjUzNzY0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MzQ4MDcz", "url": "https://github.com/epam/cloud-pipeline/pull/1667#pullrequestreview-556348073", "createdAt": "2020-12-21T12:36:33Z", "commit": {"oid": "d3807c45f8756dc3a9409eefa84c952dea121d5e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjozNjozM1rOIJW2Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjozOToxMVrOIJW6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4MjM3MQ==", "bodyText": "I don't think that @Transactional will work in this case as it is called from public non-transcation methods in the same class", "url": "https://github.com/epam/cloud-pipeline/pull/1667#discussion_r546682371", "createdAt": "2020-12-21T12:36:33Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/user/UserImportManager.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.user;\n+\n+import com.epam.pipeline.entity.metadata.CategoricalAttribute;\n+import com.epam.pipeline.entity.metadata.CategoricalAttributeValue;\n+import com.epam.pipeline.entity.metadata.MetadataEntry;\n+import com.epam.pipeline.entity.metadata.PipeConfValue;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.user.PipelineUser;\n+import com.epam.pipeline.entity.user.PipelineUserEvent;\n+import com.epam.pipeline.entity.user.PipelineUserEventsList;\n+import com.epam.pipeline.entity.user.PipelineUserWithStoragePath;\n+import com.epam.pipeline.entity.user.Role;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeManager;\n+import com.epam.pipeline.manager.metadata.MetadataManager;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class UserImportManager {\n+    private final UserManager userManager;\n+    private final CategoricalAttributeManager categoricalAttributeManager;\n+    private final MetadataManager metadataManager;\n+    private final RoleManager roleManager;\n+\n+    /**\n+     * Registers a new {@link PipelineUser}, {@link Role}, {@link MetadataEntry} for users\n+     * and {@link CategoricalAttribute} if allowed. Otherwise, log event and skip action.\n+     * @param createUser true if user shall be created if not exists\n+     * @param createGroup true if role shall be created if not exists\n+     * @param attributesToCreate the list of metadata keys that shall be created if not exists\n+     * @param file the input file with users\n+     * @return the list of events that happened during user processing\n+     */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n+    public List<PipelineUserEvent> importUsersFromFile(final boolean createUser, final boolean createGroup,\n+                                                       final List<String> attributesToCreate,\n+                                                       final MultipartFile file) {\n+        final List<PipelineUserEvent> events = new ArrayList<>();\n+        final List<CategoricalAttribute> categoricalAttributes = ListUtils\n+                .emptyIfNull(categoricalAttributeManager.loadAll());\n+        final List<PipelineUserWithStoragePath> users =\n+                new UserImporter(events, categoricalAttributes, attributesToCreate).importUsers(file);\n+        categoricalAttributeManager.updateCategoricalAttributes(categoricalAttributes);\n+\n+        users.forEach(user -> {\n+            try {\n+                events.addAll(ListUtils.emptyIfNull(processUser(user, createUser, createGroup, categoricalAttributes)));\n+            } catch (Exception e) {\n+                log.error(String.format(\"Failed to process user '%s'\", user.getUserName()), e);\n+                events.add(PipelineUserEvent.error(user.getUserName(), e.getMessage()));\n+            }\n+        });\n+        return events;\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3807c45f8756dc3a9409eefa84c952dea121d5e"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4MjU2NQ==", "bodyText": "can be replaced with map", "url": "https://github.com/epam/cloud-pipeline/pull/1667#discussion_r546682565", "createdAt": "2020-12-21T12:36:54Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/user/UserImportManager.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.user;\n+\n+import com.epam.pipeline.entity.metadata.CategoricalAttribute;\n+import com.epam.pipeline.entity.metadata.CategoricalAttributeValue;\n+import com.epam.pipeline.entity.metadata.MetadataEntry;\n+import com.epam.pipeline.entity.metadata.PipeConfValue;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.user.PipelineUser;\n+import com.epam.pipeline.entity.user.PipelineUserEvent;\n+import com.epam.pipeline.entity.user.PipelineUserEventsList;\n+import com.epam.pipeline.entity.user.PipelineUserWithStoragePath;\n+import com.epam.pipeline.entity.user.Role;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeManager;\n+import com.epam.pipeline.manager.metadata.MetadataManager;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class UserImportManager {\n+    private final UserManager userManager;\n+    private final CategoricalAttributeManager categoricalAttributeManager;\n+    private final MetadataManager metadataManager;\n+    private final RoleManager roleManager;\n+\n+    /**\n+     * Registers a new {@link PipelineUser}, {@link Role}, {@link MetadataEntry} for users\n+     * and {@link CategoricalAttribute} if allowed. Otherwise, log event and skip action.\n+     * @param createUser true if user shall be created if not exists\n+     * @param createGroup true if role shall be created if not exists\n+     * @param attributesToCreate the list of metadata keys that shall be created if not exists\n+     * @param file the input file with users\n+     * @return the list of events that happened during user processing\n+     */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n+    public List<PipelineUserEvent> importUsersFromFile(final boolean createUser, final boolean createGroup,\n+                                                       final List<String> attributesToCreate,\n+                                                       final MultipartFile file) {\n+        final List<PipelineUserEvent> events = new ArrayList<>();\n+        final List<CategoricalAttribute> categoricalAttributes = ListUtils\n+                .emptyIfNull(categoricalAttributeManager.loadAll());\n+        final List<PipelineUserWithStoragePath> users =\n+                new UserImporter(events, categoricalAttributes, attributesToCreate).importUsers(file);\n+        categoricalAttributeManager.updateCategoricalAttributes(categoricalAttributes);\n+\n+        users.forEach(user -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3807c45f8756dc3a9409eefa84c952dea121d5e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4MzQ5OA==", "bodyText": "I'd suggest to use MessageHelper for message formatting", "url": "https://github.com/epam/cloud-pipeline/pull/1667#discussion_r546683498", "createdAt": "2020-12-21T12:39:11Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/user/UserImportManager.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.user;\n+\n+import com.epam.pipeline.entity.metadata.CategoricalAttribute;\n+import com.epam.pipeline.entity.metadata.CategoricalAttributeValue;\n+import com.epam.pipeline.entity.metadata.MetadataEntry;\n+import com.epam.pipeline.entity.metadata.PipeConfValue;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.user.PipelineUser;\n+import com.epam.pipeline.entity.user.PipelineUserEvent;\n+import com.epam.pipeline.entity.user.PipelineUserEventsList;\n+import com.epam.pipeline.entity.user.PipelineUserWithStoragePath;\n+import com.epam.pipeline.entity.user.Role;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeManager;\n+import com.epam.pipeline.manager.metadata.MetadataManager;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class UserImportManager {\n+    private final UserManager userManager;\n+    private final CategoricalAttributeManager categoricalAttributeManager;\n+    private final MetadataManager metadataManager;\n+    private final RoleManager roleManager;\n+\n+    /**\n+     * Registers a new {@link PipelineUser}, {@link Role}, {@link MetadataEntry} for users\n+     * and {@link CategoricalAttribute} if allowed. Otherwise, log event and skip action.\n+     * @param createUser true if user shall be created if not exists\n+     * @param createGroup true if role shall be created if not exists\n+     * @param attributesToCreate the list of metadata keys that shall be created if not exists\n+     * @param file the input file with users\n+     * @return the list of events that happened during user processing\n+     */\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n+    public List<PipelineUserEvent> importUsersFromFile(final boolean createUser, final boolean createGroup,\n+                                                       final List<String> attributesToCreate,\n+                                                       final MultipartFile file) {\n+        final List<PipelineUserEvent> events = new ArrayList<>();\n+        final List<CategoricalAttribute> categoricalAttributes = ListUtils\n+                .emptyIfNull(categoricalAttributeManager.loadAll());\n+        final List<PipelineUserWithStoragePath> users =\n+                new UserImporter(events, categoricalAttributes, attributesToCreate).importUsers(file);\n+        categoricalAttributeManager.updateCategoricalAttributes(categoricalAttributes);\n+\n+        users.forEach(user -> {\n+            try {\n+                events.addAll(ListUtils.emptyIfNull(processUser(user, createUser, createGroup, categoricalAttributes)));\n+            } catch (Exception e) {\n+                log.error(String.format(\"Failed to process user '%s'\", user.getUserName()), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3807c45f8756dc3a9409eefa84c952dea121d5e"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "193048a2d6cc24b71ce4f47dce18229e84a59991", "author": {"user": {"login": "ekazachkova", "name": "Ekaterina Kazachkova"}}, "url": "https://github.com/epam/cloud-pipeline/commit/193048a2d6cc24b71ce4f47dce18229e84a59991", "committedDate": "2020-12-21T17:15:10Z", "message": "Issue #1639: `pipe` shall allow to import users from CSV - API method (WIP)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0050439bb1368800c9f62cb4fcd7f058eda2fb57", "author": {"user": {"login": "ekazachkova", "name": "Ekaterina Kazachkova"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0050439bb1368800c9f62cb4fcd7f058eda2fb57", "committedDate": "2020-12-21T17:15:54Z", "message": "Issue #1639: `pipe` shall allow to import users from CSV - API method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71f5cb731de2bb5e1c717a5e2cb2e087be9387fc", "author": {"user": {"login": "ekazachkova", "name": "Ekaterina Kazachkova"}}, "url": "https://github.com/epam/cloud-pipeline/commit/71f5cb731de2bb5e1c717a5e2cb2e087be9387fc", "committedDate": "2020-12-21T17:15:59Z", "message": "Issue #1639: `pipe` shall allow to import users from CSV - CLI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dd8c2128d97c37c847cf69e4f25431bbc351e4e", "author": {"user": {"login": "ekazachkova", "name": "Ekaterina Kazachkova"}}, "url": "https://github.com/epam/cloud-pipeline/commit/7dd8c2128d97c37c847cf69e4f25431bbc351e4e", "committedDate": "2020-12-21T17:15:59Z", "message": "Issue #1639: `pipe` shall allow to import users from CSV - cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca58cca1242d5141176972e0b52ba5d28b949c14", "author": {"user": {"login": "ekazachkova", "name": "Ekaterina Kazachkova"}}, "url": "https://github.com/epam/cloud-pipeline/commit/ca58cca1242d5141176972e0b52ba5d28b949c14", "committedDate": "2020-12-21T17:15:59Z", "message": "Issue #1639: `pipe` shall allow to import users from CSV - cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51a33ccc7dc089c121c5792f23f5daa5b32e8b2d", "author": {"user": {"login": "ekazachkova", "name": "Ekaterina Kazachkova"}}, "url": "https://github.com/epam/cloud-pipeline/commit/51a33ccc7dc089c121c5792f23f5daa5b32e8b2d", "committedDate": "2020-12-21T17:16:00Z", "message": "Issue #1639: `pipe` shall allow to import users from CSV - fix for transaction, log messages moved to message constants, categorical attribute creation removed (update attribute value allowed)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bfd2a2eba21f22e20fe13db54c03eb21f568afa", "author": {"user": {"login": "ekazachkova", "name": "Ekaterina Kazachkova"}}, "url": "https://github.com/epam/cloud-pipeline/commit/8bfd2a2eba21f22e20fe13db54c03eb21f568afa", "committedDate": "2020-12-21T16:11:47Z", "message": "Issue #1639: `pipe` shall allow to import users from CSV - fix for transaction, log messages moved to message constants, categorical attribute creation removed (update attribute value allowed)"}, "afterCommit": {"oid": "51a33ccc7dc089c121c5792f23f5daa5b32e8b2d", "author": {"user": {"login": "ekazachkova", "name": "Ekaterina Kazachkova"}}, "url": "https://github.com/epam/cloud-pipeline/commit/51a33ccc7dc089c121c5792f23f5daa5b32e8b2d", "committedDate": "2020-12-21T17:16:00Z", "message": "Issue #1639: `pipe` shall allow to import users from CSV - fix for transaction, log messages moved to message constants, categorical attribute creation removed (update attribute value allowed)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NTM3NjQy", "url": "https://github.com/epam/cloud-pipeline/pull/1667#pullrequestreview-556537642", "createdAt": "2020-12-21T17:16:40Z", "commit": {"oid": "51a33ccc7dc089c121c5792f23f5daa5b32e8b2d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3625, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}