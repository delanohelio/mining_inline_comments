{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMzgyOTMy", "number": 1632, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDo1NzowM1rOFBuBHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoxMzo0NVrOFBzK8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzQ2ODQ3OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDo1NzowM1rOIAhGwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjowMTowNFrOIAt3Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMzMxNA==", "bodyText": "The field is never used", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537413314", "createdAt": "2020-12-07T10:57:03Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {\n+    private final String pipeline1 = \"pipe-config-\" + Utils.randomSuffix();\n+    private final String pipeline2 = \"pipe-config-\" + Utils.randomSuffix();\n+    private String clusterNetworksConfig = \"cluster.networks.config\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyMjM2Nw==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537622367", "createdAt": "2020-12-07T16:01:04Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {\n+    private final String pipeline1 = \"pipe-config-\" + Utils.randomSuffix();\n+    private final String pipeline2 = \"pipe-config-\" + Utils.randomSuffix();\n+    private String clusterNetworksConfig = \"cluster.networks.config\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMzMxNA=="}, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDAwMjExOnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzowNjoyNlrOIAl4sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjowMjoxMFrOIAt65w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ5MTYzMg==", "bodyText": "Let's rename this class to something CustomNodeImageTest", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537491632", "createdAt": "2020-12-07T13:06:26Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyMzI3MQ==", "bodyText": "Class has been renamed to CustomNodeImagesForRunsTest", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537623271", "createdAt": "2020-12-07T16:02:10Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ5MTYzMg=="}, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDA0NDU2OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzoxNjo0N1rOIAmRVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTowMjozM1rOIDDpRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ5Nzk0Mg==", "bodyText": "cloudRegion is never used. Are we sure that need this?", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537497942", "createdAt": "2020-12-07T13:16:47Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {\n+    private final String pipeline1 = \"pipe-config-\" + Utils.randomSuffix();\n+    private final String pipeline2 = \"pipe-config-\" + Utils.randomSuffix();\n+    private String clusterNetworksConfig = \"cluster.networks.config\";\n+    private String runID1517_1 = \"\";\n+    private String testAmi = \"\";\n+\n+    @AfterClass(alwaysRun = true)\n+    public void removePipelines() {\n+        open(C.ROOT_ADDRESS);\n+        navigationMenu()\n+                .library()\n+                .removePipelineIfExists(pipeline1)\n+                .removePipelineIfExists(pipeline2);\n+    }\n+\n+    @Test\n+    @TestCase(\"1517_1\")\n+    public void checkCustomNodeImageForThePipelineRun() {\n+        final String[] cloudRegion = {\"\"};\n+        library()\n+                .createPipeline(pipeline1)\n+                .createPipeline(pipeline2)\n+                .clickOnDraftVersion(pipeline1)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile -> {\n+                    cloudRegion[0] = profile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3NjM1OA==", "bodyText": "cloudRegion has been added as parameter to getAmisFromClusterNetworksConfigPreference method", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r540076358", "createdAt": "2020-12-10T11:02:33Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {\n+    private final String pipeline1 = \"pipe-config-\" + Utils.randomSuffix();\n+    private final String pipeline2 = \"pipe-config-\" + Utils.randomSuffix();\n+    private String clusterNetworksConfig = \"cluster.networks.config\";\n+    private String runID1517_1 = \"\";\n+    private String testAmi = \"\";\n+\n+    @AfterClass(alwaysRun = true)\n+    public void removePipelines() {\n+        open(C.ROOT_ADDRESS);\n+        navigationMenu()\n+                .library()\n+                .removePipelineIfExists(pipeline1)\n+                .removePipelineIfExists(pipeline2);\n+    }\n+\n+    @Test\n+    @TestCase(\"1517_1\")\n+    public void checkCustomNodeImageForThePipelineRun() {\n+        final String[] cloudRegion = {\"\"};\n+        library()\n+                .createPipeline(pipeline1)\n+                .createPipeline(pipeline2)\n+                .clickOnDraftVersion(pipeline1)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile -> {\n+                    cloudRegion[0] = profile", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ5Nzk0Mg=="}, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDExNjE3OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzozMzoyNFrOIAm60A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODowMTo0OVrOIDWVyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwODU2MA==", "bodyText": "Let's add a message to assert with ami values", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537508560", "createdAt": "2020-12-07T13:33:24Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {\n+    private final String pipeline1 = \"pipe-config-\" + Utils.randomSuffix();\n+    private final String pipeline2 = \"pipe-config-\" + Utils.randomSuffix();\n+    private String clusterNetworksConfig = \"cluster.networks.config\";\n+    private String runID1517_1 = \"\";\n+    private String testAmi = \"\";\n+\n+    @AfterClass(alwaysRun = true)\n+    public void removePipelines() {\n+        open(C.ROOT_ADDRESS);\n+        navigationMenu()\n+                .library()\n+                .removePipelineIfExists(pipeline1)\n+                .removePipelineIfExists(pipeline2);\n+    }\n+\n+    @Test\n+    @TestCase(\"1517_1\")\n+    public void checkCustomNodeImageForThePipelineRun() {\n+        final String[] cloudRegion = {\"\"};\n+        library()\n+                .createPipeline(pipeline1)\n+                .createPipeline(pipeline2)\n+                .clickOnDraftVersion(pipeline1)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile -> {\n+                    cloudRegion[0] = profile\n+                            .expandTab(EXEC_ENVIRONMENT)\n+                            .getCloudRegion();});\n+\n+        String[] amis = navigationMenu()\n+                .settings()\n+                .switchToPreferences()\n+                .getAmisFromClusterNetworksConfigPreference();\n+        assertNotEquals(amiValue(amis[0]), testAmi = amiValue(amis[1]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4MjY2Nw==", "bodyText": "Message has been added", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r540382667", "createdAt": "2020-12-10T18:01:49Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {\n+    private final String pipeline1 = \"pipe-config-\" + Utils.randomSuffix();\n+    private final String pipeline2 = \"pipe-config-\" + Utils.randomSuffix();\n+    private String clusterNetworksConfig = \"cluster.networks.config\";\n+    private String runID1517_1 = \"\";\n+    private String testAmi = \"\";\n+\n+    @AfterClass(alwaysRun = true)\n+    public void removePipelines() {\n+        open(C.ROOT_ADDRESS);\n+        navigationMenu()\n+                .library()\n+                .removePipelineIfExists(pipeline1)\n+                .removePipelineIfExists(pipeline2);\n+    }\n+\n+    @Test\n+    @TestCase(\"1517_1\")\n+    public void checkCustomNodeImageForThePipelineRun() {\n+        final String[] cloudRegion = {\"\"};\n+        library()\n+                .createPipeline(pipeline1)\n+                .createPipeline(pipeline2)\n+                .clickOnDraftVersion(pipeline1)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile -> {\n+                    cloudRegion[0] = profile\n+                            .expandTab(EXEC_ENVIRONMENT)\n+                            .getCloudRegion();});\n+\n+        String[] amis = navigationMenu()\n+                .settings()\n+                .switchToPreferences()\n+                .getAmisFromClusterNetworksConfigPreference();\n+        assertNotEquals(amiValue(amis[0]), testAmi = amiValue(amis[1]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwODU2MA=="}, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDEyNDM5OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzozNTowN1rOIAm_iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoyMjoyOVrOIAxuJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwOTc3MQ==", "bodyText": "Rrun -> Run", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537509771", "createdAt": "2020-12-07T13:35:07Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {\n+    private final String pipeline1 = \"pipe-config-\" + Utils.randomSuffix();\n+    private final String pipeline2 = \"pipe-config-\" + Utils.randomSuffix();\n+    private String clusterNetworksConfig = \"cluster.networks.config\";\n+    private String runID1517_1 = \"\";\n+    private String testAmi = \"\";\n+\n+    @AfterClass(alwaysRun = true)\n+    public void removePipelines() {\n+        open(C.ROOT_ADDRESS);\n+        navigationMenu()\n+                .library()\n+                .removePipelineIfExists(pipeline1)\n+                .removePipelineIfExists(pipeline2);\n+    }\n+\n+    @Test\n+    @TestCase(\"1517_1\")\n+    public void checkCustomNodeImageForThePipelineRun() {\n+        final String[] cloudRegion = {\"\"};\n+        library()\n+                .createPipeline(pipeline1)\n+                .createPipeline(pipeline2)\n+                .clickOnDraftVersion(pipeline1)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile -> {\n+                    cloudRegion[0] = profile\n+                            .expandTab(EXEC_ENVIRONMENT)\n+                            .getCloudRegion();});\n+\n+        String[] amis = navigationMenu()\n+                .settings()\n+                .switchToPreferences()\n+                .getAmisFromClusterNetworksConfigPreference();\n+        assertNotEquals(amiValue(amis[0]), testAmi = amiValue(amis[1]));\n+        library()\n+                .clickOnDraftVersion(pipeline1)\n+                .codeTab()\n+                .clickOnFile(\"config.json\")\n+                .editFile(configuration -> addInstanceImageToConfig(configuration, testAmi))\n+                .saveAndCommitWithMessage(\"test: Add instance image\")\n+                .runPipeline()\n+                .launch(this);\n+        final Set<String> logMess =\n+                runsMenu()\n+                .showLog(runID1517_1 = getLastRunId())\n+                .instanceParameters(instance ->\n+                        instance.ensure(NODE_IMAGE, text(testAmi)))\n+                .waitForCompletion()\n+                .click(taskWithName(\"InitializeNode\"))\n+                .ensure(STATUS, SUCCESS.reached)\n+                .logMessages()\n+                .collect(toSet());\n+        runsMenu()\n+                .completedRuns()\n+                .showLog(runID1517_1)\n+                .logContainsMessage(logMess, format(\"Image: %s\", testAmi))\n+                .logContainsMessage(logMess, format(\"Specified in configuration image %s will be used\", testAmi));\n+    }\n+\n+    @Test (dependsOnMethods = {\"checkCustomNodeImageForThePipelineRun\"})\n+    @TestCase(\"1517_2\")\n+    public void checkNodeReuseAfterTheCustomNodeImageRrun() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NTU0Mw==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537685543", "createdAt": "2020-12-07T17:22:29Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {\n+    private final String pipeline1 = \"pipe-config-\" + Utils.randomSuffix();\n+    private final String pipeline2 = \"pipe-config-\" + Utils.randomSuffix();\n+    private String clusterNetworksConfig = \"cluster.networks.config\";\n+    private String runID1517_1 = \"\";\n+    private String testAmi = \"\";\n+\n+    @AfterClass(alwaysRun = true)\n+    public void removePipelines() {\n+        open(C.ROOT_ADDRESS);\n+        navigationMenu()\n+                .library()\n+                .removePipelineIfExists(pipeline1)\n+                .removePipelineIfExists(pipeline2);\n+    }\n+\n+    @Test\n+    @TestCase(\"1517_1\")\n+    public void checkCustomNodeImageForThePipelineRun() {\n+        final String[] cloudRegion = {\"\"};\n+        library()\n+                .createPipeline(pipeline1)\n+                .createPipeline(pipeline2)\n+                .clickOnDraftVersion(pipeline1)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile -> {\n+                    cloudRegion[0] = profile\n+                            .expandTab(EXEC_ENVIRONMENT)\n+                            .getCloudRegion();});\n+\n+        String[] amis = navigationMenu()\n+                .settings()\n+                .switchToPreferences()\n+                .getAmisFromClusterNetworksConfigPreference();\n+        assertNotEquals(amiValue(amis[0]), testAmi = amiValue(amis[1]));\n+        library()\n+                .clickOnDraftVersion(pipeline1)\n+                .codeTab()\n+                .clickOnFile(\"config.json\")\n+                .editFile(configuration -> addInstanceImageToConfig(configuration, testAmi))\n+                .saveAndCommitWithMessage(\"test: Add instance image\")\n+                .runPipeline()\n+                .launch(this);\n+        final Set<String> logMess =\n+                runsMenu()\n+                .showLog(runID1517_1 = getLastRunId())\n+                .instanceParameters(instance ->\n+                        instance.ensure(NODE_IMAGE, text(testAmi)))\n+                .waitForCompletion()\n+                .click(taskWithName(\"InitializeNode\"))\n+                .ensure(STATUS, SUCCESS.reached)\n+                .logMessages()\n+                .collect(toSet());\n+        runsMenu()\n+                .completedRuns()\n+                .showLog(runID1517_1)\n+                .logContainsMessage(logMess, format(\"Image: %s\", testAmi))\n+                .logContainsMessage(logMess, format(\"Specified in configuration image %s will be used\", testAmi));\n+    }\n+\n+    @Test (dependsOnMethods = {\"checkCustomNodeImageForThePipelineRun\"})\n+    @TestCase(\"1517_2\")\n+    public void checkNodeReuseAfterTheCustomNodeImageRrun() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwOTc3MQ=="}, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDEzODM2OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineCodeTabAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzozODowOVrOIAnHmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoyNDoxM1rOIAxzVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMTgzNA==", "bodyText": "Update the license header, please", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537511834", "createdAt": "2020-12-07T13:38:09Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineCodeTabAO.java", "diffHunk": "@@ -52,6 +52,7 @@\n import static com.epam.pipeline.autotests.ao.Primitive.UPLOAD;\n import static com.epam.pipeline.autotests.utils.PipelineSelectors.button;\n import static com.epam.pipeline.autotests.utils.PipelineSelectors.buttonByIconClass;\n+import static java.lang.String.format;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4Njg2OQ==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537686869", "createdAt": "2020-12-07T17:24:13Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineCodeTabAO.java", "diffHunk": "@@ -52,6 +52,7 @@\n import static com.epam.pipeline.autotests.ao.Primitive.UPLOAD;\n import static com.epam.pipeline.autotests.utils.PipelineSelectors.button;\n import static com.epam.pipeline.autotests.utils.PipelineSelectors.buttonByIconClass;\n+import static java.lang.String.format;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMTgzNA=="}, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDE0MjM5OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineCodeTabAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzozOTowOVrOIAnJ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjowNTozOFrOIAuFyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMjQ0NQ==", "bodyText": "Clean up, please", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537512445", "createdAt": "2020-12-07T13:39:09Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineCodeTabAO.java", "diffHunk": "@@ -265,14 +266,17 @@ public FileEditingPopupAO editFile(final UnaryOperator<String> action) {\n \n         public FileEditingPopupAO shouldContainInCode(final String expectedCode) {\n             final Function<String, SelenideElement> lineWithText =\n-                    text -> $x(String.format(\"//pre[contains(@class, 'CodeMirror-line') and contains(., '%s')]\", text));\n+                    text -> $x(format(\"//pre[contains(@class, 'CodeMirror-line') and contains(., '%s')]\", text));\n             Arrays.stream(expectedCode.split(\"\\n\"))\n                     .map(String::trim)\n                     .map(lineWithText)\n                     .forEach(el -> el.should(exist));\n             return this;\n         }\n \n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyNjA1Ng==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537626056", "createdAt": "2020-12-07T16:05:38Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineCodeTabAO.java", "diffHunk": "@@ -265,14 +266,17 @@ public FileEditingPopupAO editFile(final UnaryOperator<String> action) {\n \n         public FileEditingPopupAO shouldContainInCode(final String expectedCode) {\n             final Function<String, SelenideElement> lineWithText =\n-                    text -> $x(String.format(\"//pre[contains(@class, 'CodeMirror-line') and contains(., '%s')]\", text));\n+                    text -> $x(format(\"//pre[contains(@class, 'CodeMirror-line') and contains(., '%s')]\", text));\n             Arrays.stream(expectedCode.split(\"\\n\"))\n                     .map(String::trim)\n                     .map(lineWithText)\n                     .forEach(el -> el.should(exist));\n             return this;\n         }\n \n+\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMjQ0NQ=="}, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDI5Mjg0OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/SettingsPageAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoxMDowN1rOIAohXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoyOTo1NlrOIBberQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDgxMw==", "bodyText": "Can be replaced with collection.toArray()", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537534813", "createdAt": "2020-12-07T14:10:07Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/SettingsPageAO.java", "diffHunk": "@@ -1026,6 +1027,22 @@ public PreferencesAO setSystemSshDefaultRootUserEnabled() {\n             return this;\n         }\n \n+        public String[] getAmisFromClusterNetworksConfigPreference() {\n+            searchPreference(\"cluster.networks.config\");\n+            String[] result = new String[2];\n+            String[] strings = context().$(byClassName(\"CodeMirror-code\"))\n+                            .findAll(byClassName(\"CodeMirror-line\")).texts().stream()\n+                            .toArray(String[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM2OTcwOQ==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r538369709", "createdAt": "2020-12-08T13:29:56Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/SettingsPageAO.java", "diffHunk": "@@ -1026,6 +1027,22 @@ public PreferencesAO setSystemSshDefaultRootUserEnabled() {\n             return this;\n         }\n \n+        public String[] getAmisFromClusterNetworksConfigPreference() {\n+            searchPreference(\"cluster.networks.config\");\n+            String[] result = new String[2];\n+            String[] strings = context().$(byClassName(\"CodeMirror-code\"))\n+                            .findAll(byClassName(\"CodeMirror-line\")).texts().stream()\n+                            .toArray(String[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDgxMw=="}, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDMxMjgwOnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/SettingsPageAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoxMzo0NVrOIAos8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMTowMzowNFrOIDDqjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNzc3OA==", "bodyText": "Add line breaks and spaces, please", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537537778", "createdAt": "2020-12-07T14:13:45Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/SettingsPageAO.java", "diffHunk": "@@ -1026,6 +1027,22 @@ public PreferencesAO setSystemSshDefaultRootUserEnabled() {\n             return this;\n         }\n \n+        public String[] getAmisFromClusterNetworksConfigPreference() {\n+            searchPreference(\"cluster.networks.config\");\n+            String[] result = new String[2];\n+            String[] strings = context().$(byClassName(\"CodeMirror-code\"))\n+                            .findAll(byClassName(\"CodeMirror-line\")).texts().stream()\n+                            .toArray(String[]::new);\n+            IntStream.range(0, strings.length).forEach((i) -> {\n+                if (strings[i].contains(\"\\\"instance_mask\\\":\")) {\n+                    if (strings[i].contains(\"\\\"*\\\"\")) {\n+                        result[0]=strings[i+1];\n+                    } else {result[1]=strings[i+1];}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3NjY4NA==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r540076684", "createdAt": "2020-12-10T11:03:04Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/SettingsPageAO.java", "diffHunk": "@@ -1026,6 +1027,22 @@ public PreferencesAO setSystemSshDefaultRootUserEnabled() {\n             return this;\n         }\n \n+        public String[] getAmisFromClusterNetworksConfigPreference() {\n+            searchPreference(\"cluster.networks.config\");\n+            String[] result = new String[2];\n+            String[] strings = context().$(byClassName(\"CodeMirror-code\"))\n+                            .findAll(byClassName(\"CodeMirror-line\")).texts().stream()\n+                            .toArray(String[]::new);\n+            IntStream.range(0, strings.length).forEach((i) -> {\n+                if (strings[i].contains(\"\\\"instance_mask\\\":\")) {\n+                    if (strings[i].contains(\"\\\"*\\\"\")) {\n+                        result[0]=strings[i+1];\n+                    } else {result[1]=strings[i+1];}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNzc3OA=="}, "originalCommit": {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 206, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}