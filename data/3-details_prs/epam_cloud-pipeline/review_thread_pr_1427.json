{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNTIxNjc2", "number": 1427, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjoxMToxM1rOEmDZEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjo0Mjo1NVrOEmks8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzM2OTE1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjoxMToxM1rOHV28vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzoyODo1NlrOHWE79Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4MjQzMQ==", "bodyText": "Let's user @RestController and remove @responsebody from all methods", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492682431", "createdAt": "2020-09-22T12:11:13Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMTYwNQ==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492911605", "createdAt": "2020-09-22T17:28:56Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4MjQzMQ=="}, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzM5ODQ0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjoxOTowOFrOHV3OQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzoyOTowMVrOHWE8Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NjkxNA==", "bodyText": "I'd suggest to use common path /categoricalAttribute and do not add load/loadAll/delete/deleteValue suffixes. To distinguish load and loadAll we can use @GetMapping(params = { \"attributeKey\"}).", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492686914", "createdAt": "2020-09-22T12:19:08Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMTY0Mg==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492911642", "createdAt": "2020-09-22T17:29:01Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NjkxNA=="}, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzQwMTEwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjoxOTo0N1rOHV3PxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzoyOToyN1rOHWE9NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NzMwMA==", "bodyText": "I'd suggest to allow only one attributeKey for this method since we already have a method to loadAll. And let's move to path from request params", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492687300", "createdAt": "2020-09-22T12:19:47Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMTkyNA==", "bodyText": "Done, extracted to the path", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492911924", "createdAt": "2020-09-22T17:29:27Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NzMwMA=="}, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzQwMzYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjoyMDoxNVrOHV3RHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzoyOTo0M1rOHWE9zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NzY0Nw==", "bodyText": "Let's move attributeKey to path", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492687647", "createdAt": "2020-09-22T12:20:15Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {\n+        return Result.success(categoricalAttributeApiService.loadAllValuesForKeys(attributeKeys));\n+    }\n+\n+    @DeleteMapping(\"/delete\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete all values for a requested attribute.\",\n+        notes = \"Delete all values for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAllAttributeValues(@RequestParam final String attributeKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMjA3OQ==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492912079", "createdAt": "2020-09-22T17:29:43Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {\n+        return Result.success(categoricalAttributeApiService.loadAllValuesForKeys(attributeKeys));\n+    }\n+\n+    @DeleteMapping(\"/delete\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete all values for a requested attribute.\",\n+        notes = \"Delete all values for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAllAttributeValues(@RequestParam final String attributeKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NzY0Nw=="}, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzQwOTMyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjoyMTo0M1rOHV3UpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzoyOTo1OVrOHWE-mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4ODU0OA==", "bodyText": "Also, let's do not action to path and use params in DeleteMapping annotation", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492688548", "createdAt": "2020-09-22T12:21:43Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {\n+        return Result.success(categoricalAttributeApiService.loadAllValuesForKeys(attributeKeys));\n+    }\n+\n+    @DeleteMapping(\"/delete\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete all values for a requested attribute.\",\n+        notes = \"Delete all values for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAllAttributeValues(@RequestParam final String attributeKey) {\n+        return Result.success(categoricalAttributeApiService.deleteAttributeValues(attributeKey));\n+    }\n+\n+    @DeleteMapping(\"/deleteValue\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMjI4Mg==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492912282", "createdAt": "2020-09-22T17:29:59Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {\n+        return Result.success(categoricalAttributeApiService.loadAllValuesForKeys(attributeKeys));\n+    }\n+\n+    @DeleteMapping(\"/delete\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete all values for a requested attribute.\",\n+        notes = \"Delete all values for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAllAttributeValues(@RequestParam final String attributeKey) {\n+        return Result.success(categoricalAttributeApiService.deleteAttributeValues(attributeKey));\n+    }\n+\n+    @DeleteMapping(\"/deleteValue\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4ODU0OA=="}, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzQxMTUxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjoyMjoxOFrOHV3V8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzozMDowN1rOHWE-7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4ODg4Mw==", "bodyText": "Let's make it POST, since this request is not idempotent", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492688883", "createdAt": "2020-09-22T12:22:18Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {\n+        return Result.success(categoricalAttributeApiService.loadAllValuesForKeys(attributeKeys));\n+    }\n+\n+    @DeleteMapping(\"/delete\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete all values for a requested attribute.\",\n+        notes = \"Delete all values for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAllAttributeValues(@RequestParam final String attributeKey) {\n+        return Result.success(categoricalAttributeApiService.deleteAttributeValues(attributeKey));\n+    }\n+\n+    @DeleteMapping(\"/deleteValue\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete one specific value for a requested attribute.\",\n+        notes = \"Delete one specific value for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAttributeValue(@RequestParam final String attributeKey,\n+                                                @RequestParam final String value) {\n+        return Result.success(categoricalAttributeApiService.deleteAttributeValue(attributeKey, value));\n+    }\n+\n+    @GetMapping(\"/sync\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMjM2Nw==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492912367", "createdAt": "2020-09-22T17:30:07Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {\n+        return Result.success(categoricalAttributeApiService.loadAllValuesForKeys(attributeKeys));\n+    }\n+\n+    @DeleteMapping(\"/delete\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete all values for a requested attribute.\",\n+        notes = \"Delete all values for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAllAttributeValues(@RequestParam final String attributeKey) {\n+        return Result.success(categoricalAttributeApiService.deleteAttributeValues(attributeKey));\n+    }\n+\n+    @DeleteMapping(\"/deleteValue\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete one specific value for a requested attribute.\",\n+        notes = \"Delete one specific value for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAttributeValue(@RequestParam final String attributeKey,\n+                                                @RequestParam final String value) {\n+        return Result.success(categoricalAttributeApiService.deleteAttributeValue(attributeKey, value));\n+    }\n+\n+    @GetMapping(\"/sync\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4ODg4Mw=="}, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzQyMjc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjoyNToxM1rOHV3ctg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzozMDo0OVrOHWFAng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5MDYxNA==", "bodyText": "Let's introduce a separate class CategoricalAttribute and use it instead of Map<String, List<String, String>>. It will increase readability of the code and may be useful if decide to introduce more complex ACL permissions.", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492690614", "createdAt": "2020-09-22T12:25:13Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMjc5OA==", "bodyText": "Done, using List<CategoricalAttribute> instead of Map<String, List<String>> and return single CategoricalAttribute, when loading by one key", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492912798", "createdAt": "2020-09-22T17:30:49Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5MDYxNA=="}, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODgyNjc0OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/db/migration/v2020.09.18_15.00__issue_values_dict_metadata.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjo0Mjo1NVrOHWrgoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzowMDoxMFrOHWsgcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU0MzU4NQ==", "bodyText": "Could you please add issue number to sql file name?", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r493543585", "createdAt": "2020-09-23T12:42:55Z", "author": {"login": "mzueva"}, "path": "api/src/main/resources/db/migration/v2020.09.18_15.00__issue_values_dict_metadata.sql", "diffHunk": "@@ -0,0 +1,5 @@\n+CREATE TABLE IF NOT EXISTS pipeline.categorical_attributes(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3caef30b53d8e0437382294a3816715ec2722f1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU1OTkyMQ==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r493559921", "createdAt": "2020-09-23T13:00:10Z", "author": {"login": "Wedds"}, "path": "api/src/main/resources/db/migration/v2020.09.18_15.00__issue_values_dict_metadata.sql", "diffHunk": "@@ -0,0 +1,5 @@\n+CREATE TABLE IF NOT EXISTS pipeline.categorical_attributes(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU0MzU4NQ=="}, "originalCommit": {"oid": "f3caef30b53d8e0437382294a3816715ec2722f1"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 381, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}