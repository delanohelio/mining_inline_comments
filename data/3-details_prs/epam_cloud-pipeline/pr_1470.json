{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NjExNzM5", "number": 1470, "title": "Issue #1405: Implemented tests for ContextualPreferenceController", "bodyText": "This PR is related to issue #1405 and contains tests implementation for ContextualPreferenceController", "createdAt": "2020-10-06T14:56:54Z", "url": "https://github.com/epam/cloud-pipeline/pull/1470", "merged": true, "mergeCommit": {"oid": "4855b767a3cb8a942a6ef461edf0eadfd7fa8537"}, "closed": true, "closedAt": "2020-10-22T10:30:57Z", "author": {"login": "cryteq"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQzWqSABqjM4NTk0MzQ3MTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdU_cb8AFqTUxNDU4MzI4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa22d7ee5424a2391ca8c34afcaaa32ecd5a4311", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/aa22d7ee5424a2391ca8c34afcaaa32ecd5a4311", "committedDate": "2020-10-06T14:55:22Z", "message": "Issue #1405: Implemented tests for ContextualPreferenceController"}, "afterCommit": {"oid": "59fda5ce1f8a90f950b6158c4e55729d6dc79058", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/59fda5ce1f8a90f950b6158c4e55729d6dc79058", "committedDate": "2020-10-09T10:09:24Z", "message": "Issue #1405: Changed ContextualPreferenceControllerTest to use ContextualPreferenceCreatorUtils"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "798e42fd7255c3fdaccd96be7f4a100c9cbad46c", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/798e42fd7255c3fdaccd96be7f4a100c9cbad46c", "committedDate": "2020-10-09T10:12:08Z", "message": "Issue #1405: Removed redundant ArgumentCaptor assertions"}, "afterCommit": {"oid": "78e861cfeaa237b9549f48914b133dc89a23946e", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/78e861cfeaa237b9549f48914b133dc89a23946e", "committedDate": "2020-10-12T08:53:17Z", "message": "Issue #1405: Removed redundant ArgumentCaptor assertions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MDk5NDcz", "url": "https://github.com/epam/cloud-pipeline/pull/1470#pullrequestreview-508099473", "createdAt": "2020-10-14T08:14:26Z", "commit": {"oid": "78e861cfeaa237b9549f48914b133dc89a23946e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODoxNDoyNlrOHhHadw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODozMTozMFrOHhIFXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4NjUxOQ==", "bodyText": "It seems cleaner to inline test class field initiliazations and get rid of setUp method.", "url": "https://github.com/epam/cloud-pipeline/pull/1470#discussion_r504486519", "createdAt": "2020-10-14T08:14:26Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/contextual/ContextualPreferenceControllerTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.contextual;\n+\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceSearchRequest;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceApiService;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = ContextualPreferenceController.class)\n+public class ContextualPreferenceControllerTest extends AbstractControllerTest {\n+\n+    private static final String TEST_STRING = \"TEST\";\n+    private static final String CONTEXTUAL_URL = SERVLET_PATH + \"/contextual/preference\";\n+    private static final String LOAD_URL = CONTEXTUAL_URL + \"/load\";\n+    private static final String LOAD_ALL_URL = LOAD_URL + \"/all\";\n+    private static final ContextualPreferenceLevel PREFERENCE_LEVEL = ContextualPreferenceLevel.ROLE;\n+    private ContextualPreference contextualPreference;\n+    private ResponseResult<ContextualPreference> expectedResult;\n+    private ContextualPreferenceExternalResource contextualPreferenceExternalResource;\n+\n+    @Autowired\n+    private ContextualPreferenceApiService mockContextualPreferenceApiService;\n+\n+    @Before\n+    public void setUp() {\n+        contextualPreference = ContextualPreferenceCreatorUtils.getContextualPreference();\n+        expectedResult = ControllerTestUtils.buildExpectedResult(contextualPreference);\n+\n+        contextualPreferenceExternalResource\n+                = ContextualPreferenceCreatorUtils.getCPExternalResource();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e861cfeaa237b9549f48914b133dc89a23946e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5NzUwMQ==", "bodyText": "Probably we can move this verbose type reference instantiation to some other place like ContextualPreferenceCreatorUtils. It can be pretty handy to use it later on like the following\nControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult, \n        ContextualPreferenceCreatorUtils.contextualPreferencesListType);\n// or\nControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult, \n        ContextualPreferenceCreatorUtils.listOfContextualPreferencesType);", "url": "https://github.com/epam/cloud-pipeline/pull/1470#discussion_r504497501", "createdAt": "2020-10-14T08:31:30Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/contextual/ContextualPreferenceControllerTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.contextual;\n+\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceSearchRequest;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceApiService;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = ContextualPreferenceController.class)\n+public class ContextualPreferenceControllerTest extends AbstractControllerTest {\n+\n+    private static final String TEST_STRING = \"TEST\";\n+    private static final String CONTEXTUAL_URL = SERVLET_PATH + \"/contextual/preference\";\n+    private static final String LOAD_URL = CONTEXTUAL_URL + \"/load\";\n+    private static final String LOAD_ALL_URL = LOAD_URL + \"/all\";\n+    private static final ContextualPreferenceLevel PREFERENCE_LEVEL = ContextualPreferenceLevel.ROLE;\n+    private ContextualPreference contextualPreference;\n+    private ResponseResult<ContextualPreference> expectedResult;\n+    private ContextualPreferenceExternalResource contextualPreferenceExternalResource;\n+\n+    @Autowired\n+    private ContextualPreferenceApiService mockContextualPreferenceApiService;\n+\n+    @Before\n+    public void setUp() {\n+        contextualPreference = ContextualPreferenceCreatorUtils.getContextualPreference();\n+        expectedResult = ControllerTestUtils.buildExpectedResult(contextualPreference);\n+\n+        contextualPreferenceExternalResource\n+                = ContextualPreferenceCreatorUtils.getCPExternalResource();\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(LOAD_ALL_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAll() throws Exception {\n+        final List<ContextualPreference> contextualPreferences = Collections.singletonList(contextualPreference);\n+\n+        Mockito.doReturn(contextualPreferences).when(mockContextualPreferenceApiService).loadAll();\n+\n+        final MvcResult mvcResult = mvc().perform(get(LOAD_ALL_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockContextualPreferenceApiService).loadAll();\n+\n+        final ResponseResult<List<ContextualPreference>> expectedResult =\n+                ControllerTestUtils.buildExpectedResult(contextualPreferences);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,\n+                new TypeReference<Result<List<ContextualPreference>>>() { });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e861cfeaa237b9549f48914b133dc89a23946e"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee0b78ebb8f512b8bb19f94d8ca904b0780d6bad", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/ee0b78ebb8f512b8bb19f94d8ca904b0780d6bad", "committedDate": "2020-10-16T14:04:40Z", "message": "Issue #1405: Implemented tests for ContextualPreferenceController"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d4e8f6c9ec96ced966a56e9579de000fd6d0cbb", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0d4e8f6c9ec96ced966a56e9579de000fd6d0cbb", "committedDate": "2020-10-16T14:04:41Z", "message": "Issue #1405: Changed ContextualPreferenceControllerTest to use ContextualPreferenceCreatorUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b01f01c54772e30f934213b4aad8d20c9141ee1", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/6b01f01c54772e30f934213b4aad8d20c9141ee1", "committedDate": "2020-10-16T14:04:41Z", "message": "Issue #1405: Removed redundant ArgumentCaptor assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d6ce7abe951a560ea97b59f6140875de8a009d8", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/1d6ce7abe951a560ea97b59f6140875de8a009d8", "committedDate": "2020-10-16T14:04:41Z", "message": "Issue #1405: setUp method removed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c6a61bf27a4113baa11f34e1d0fa4ec1881c569", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/1c6a61bf27a4113baa11f34e1d0fa4ec1881c569", "committedDate": "2020-10-16T14:04:41Z", "message": "Issue #1405: TypeReference creation moved to CreatorUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8da1fc81fb34ca3b98ea1dbf9908387538313563", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/8da1fc81fb34ca3b98ea1dbf9908387538313563", "committedDate": "2020-10-16T14:16:43Z", "message": "Issue #1405: ContextualPreferenceControllerTest refactoring"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78e861cfeaa237b9549f48914b133dc89a23946e", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/78e861cfeaa237b9549f48914b133dc89a23946e", "committedDate": "2020-10-12T08:53:17Z", "message": "Issue #1405: Removed redundant ArgumentCaptor assertions"}, "afterCommit": {"oid": "8da1fc81fb34ca3b98ea1dbf9908387538313563", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/8da1fc81fb34ca3b98ea1dbf9908387538313563", "committedDate": "2020-10-16T14:16:43Z", "message": "Issue #1405: ContextualPreferenceControllerTest refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDU3Nzc5", "url": "https://github.com/epam/cloud-pipeline/pull/1470#pullrequestreview-511457779", "createdAt": "2020-10-19T06:56:20Z", "commit": {"oid": "8da1fc81fb34ca3b98ea1dbf9908387538313563"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjo1NjoyMFrOHkAIrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjo1NjoyMFrOHkAIrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxMzAwNg==", "bodyText": "I wonder if it is a good idea to group test code lines logically. For instance we could split lines to three parts:\n\nsetup (building resources, configuring mocks)\ntest (performing test target operation)\nassert (verifying calls, asserting output)\n\nIn this test case it seems to increase readability if the code is organised like this:\n    @Test\n    @WithMockUser\n    public void shouldLoadAll() throws Exception {\n        final List<ContextualPreference> contextualPreferences = Collections.singletonList(contextualPreference);\n        Mockito.doReturn(contextualPreferences).when(mockContextualPreferenceApiService).loadAll();\n\n        final MvcResult mvcResult = performRequest(get(LOAD_ALL_URL));\n\n        Mockito.verify(mockContextualPreferenceApiService).loadAll();\n        assertResponse(mvcResult, contextualPreferences,\n                ContextualPreferenceCreatorUtils.CONTEXTUAL_PREFERENCE_LIST_TYPE);\n    }", "url": "https://github.com/epam/cloud-pipeline/pull/1470#discussion_r507513006", "createdAt": "2020-10-19T06:56:20Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/contextual/ContextualPreferenceControllerTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceSearchRequest;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceApiService;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+\n+@WebMvcTest(controllers = ContextualPreferenceController.class)\n+public class ContextualPreferenceControllerTest extends AbstractControllerTest {\n+\n+    private static final String TEST_STRING = \"TEST\";\n+    private static final String CONTEXTUAL_URL = SERVLET_PATH + \"/contextual/preference\";\n+    private static final String LOAD_URL = CONTEXTUAL_URL + \"/load\";\n+    private static final String LOAD_ALL_URL = LOAD_URL + \"/all\";\n+    private static final ContextualPreferenceLevel PREFERENCE_LEVEL = ContextualPreferenceLevel.ROLE;\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final ContextualPreferenceExternalResource contextualPreferenceExternalResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    @Autowired\n+    private ContextualPreferenceApiService mockContextualPreferenceApiService;\n+\n+    @Test\n+    public void shouldFailLoadAllForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_ALL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAll() throws Exception {\n+        final List<ContextualPreference> contextualPreferences = Collections.singletonList(contextualPreference);\n+\n+        Mockito.doReturn(contextualPreferences).when(mockContextualPreferenceApiService).loadAll();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_ALL_URL));\n+\n+        Mockito.verify(mockContextualPreferenceApiService).loadAll();\n+\n+        assertResponse(mvcResult, contextualPreferences,\n+                ContextualPreferenceCreatorUtils.CONTEXTUAL_PREFERENCE_LIST_TYPE);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8da1fc81fb34ca3b98ea1dbf9908387538313563"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dd85189d687e32f44aa0c58d486b3443cd3e063", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/9dd85189d687e32f44aa0c58d486b3443cd3e063", "committedDate": "2020-10-19T11:16:06Z", "message": "Issue #1405: Method call checks added, removed extra line breaks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNzI4Njg2", "url": "https://github.com/epam/cloud-pipeline/pull/1470#pullrequestreview-511728686", "createdAt": "2020-10-19T12:55:42Z", "commit": {"oid": "9dd85189d687e32f44aa0c58d486b3443cd3e063"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NTcwNTE2", "url": "https://github.com/epam/cloud-pipeline/pull/1470#pullrequestreview-514570516", "createdAt": "2020-10-22T10:14:39Z", "commit": {"oid": "9dd85189d687e32f44aa0c58d486b3443cd3e063"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NTgzMjg3", "url": "https://github.com/epam/cloud-pipeline/pull/1470#pullrequestreview-514583287", "createdAt": "2020-10-22T10:30:48Z", "commit": {"oid": "9dd85189d687e32f44aa0c58d486b3443cd3e063"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3659, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}