{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMTczMTIw", "number": 1422, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzozMToyM1rOEoFKSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozNToyMlrOEoHALA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDYzMDQ4OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/utils/C.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzozMToyM1rOHY90pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoxMjowMVrOHZKF7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MDc3Mg==", "bodyText": "Do we really need this field? I don't see its use and property in default.conf", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495940772", "createdAt": "2020-09-28T13:31:23Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/utils/C.java", "diffHunk": "@@ -131,6 +135,10 @@\n     public static final String CLOUD_PROVIDER;\n     public static final String ANOTHER_INSTANCE;\n     public static final String DEFAULT_INSTANCE_FAMILY_NAME;\n+    public static final String DEFAULT_CLUSTER_ALLOWED_INSTANCE_TYPES;\n+    public static final String CLUSTER_ALLOWED_MASKS;\n+    public static final String DEFAULT_CLUSTER_ALLOWED_PRICE_TYPES;\n+    public static final String CLUSTER_ALLOWED_PRICE_TYPES_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MTgwNw==", "bodyText": "CLUSTER_ALLOWED_PRICE_TYPES_VALUE has been removed.", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496141807", "createdAt": "2020-09-28T18:12:01Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/utils/C.java", "diffHunk": "@@ -131,6 +135,10 @@\n     public static final String CLOUD_PROVIDER;\n     public static final String ANOTHER_INSTANCE;\n     public static final String DEFAULT_INSTANCE_FAMILY_NAME;\n+    public static final String DEFAULT_CLUSTER_ALLOWED_INSTANCE_TYPES;\n+    public static final String CLUSTER_ALLOWED_MASKS;\n+    public static final String DEFAULT_CLUSTER_ALLOWED_PRICE_TYPES;\n+    public static final String CLUSTER_ALLOWED_PRICE_TYPES_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MDc3Mg=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDY0NDMxOnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzozNDoxN1rOHY98zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo1OTo1NFrOHZCBZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0Mjg2MA==", "bodyText": "Could you please add space before and after = ?", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495942860", "createdAt": "2020-09-28T13:34:17Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -69,13 +76,23 @@\n     private final String pipeline = \"restrictionTestPipeline\" + Utils.randomSuffix();\n     private final String secondPipeline = \"restrictionTestPipeline\" + Utils.randomSuffix();\n     private final String configuration = \"restrictionTestConfiguration\" + Utils.randomSuffix();\n+    private final String configuration1 = \"restrictionTestConfiguration\" + Utils.randomSuffix();\n     private final String secondConfiguration = \"restrictionTestConfiguration\" + Utils.randomSuffix();\n     private final String customDisk = \"22\";\n     private final String configurationName = \"customConfig\";\n     private final String testRole = \"ROLE_USER\";\n     private final String instanceTypesMask = \"Allowed instance types mask\";\n     private final String toolInstanceTypesMask = \"Allowed tool instance types mask\";\n     private final String onDemandPrice = \"On demand\";\n+    private final String clusterAllowedPrice = \"on_demand\";\n+    private final String spotPriceName=C.SPOT_PRICE_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwOTU3NA==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496009574", "createdAt": "2020-09-28T14:59:54Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -69,13 +76,23 @@\n     private final String pipeline = \"restrictionTestPipeline\" + Utils.randomSuffix();\n     private final String secondPipeline = \"restrictionTestPipeline\" + Utils.randomSuffix();\n     private final String configuration = \"restrictionTestConfiguration\" + Utils.randomSuffix();\n+    private final String configuration1 = \"restrictionTestConfiguration\" + Utils.randomSuffix();\n     private final String secondConfiguration = \"restrictionTestConfiguration\" + Utils.randomSuffix();\n     private final String customDisk = \"22\";\n     private final String configurationName = \"customConfig\";\n     private final String testRole = \"ROLE_USER\";\n     private final String instanceTypesMask = \"Allowed instance types mask\";\n     private final String toolInstanceTypesMask = \"Allowed tool instance types mask\";\n     private final String onDemandPrice = \"On demand\";\n+    private final String clusterAllowedPrice = \"on_demand\";\n+    private final String spotPriceName=C.SPOT_PRICE_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0Mjg2MA=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDY3MjE2OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0MDoxOFrOHY-NWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjo1NjozMlrOHZHZWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NzA5Ng==", "bodyText": "Unindent lines, please", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495947096", "createdAt": "2020-09-28T13:40:18Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NzYyNw==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496097627", "createdAt": "2020-09-28T16:56:32Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NzA5Ng=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDczNTM3OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/AccessObject.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo1Mzo1MFrOHY-zoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzo1MDoyM1rOHZJWfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1Njg5Ng==", "bodyText": "We can use shouldHaveSize() for check instead of this", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495956896", "createdAt": "2020-09-28T13:53:50Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/AccessObject.java", "diffHunk": "@@ -499,6 +500,18 @@ default ELEMENT_TYPE checkValueIsInDropDown(final Primitive combobox, final Stri\n         return (ELEMENT_TYPE) this;\n     }\n \n+    default ELEMENT_TYPE checkDropDownCount(final Primitive combobox, final int count) {\n+        get(combobox).shouldBe(visible).click();\n+        assertEquals(SelenideElements.of(byClassName(\"ant-select-dropdown-menu-item\")).size(), count,\n+                \"Dropdown list count doesn't correspond expected\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyOTY2MQ==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496129661", "createdAt": "2020-09-28T17:50:23Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/AccessObject.java", "diffHunk": "@@ -499,6 +500,18 @@ default ELEMENT_TYPE checkValueIsInDropDown(final Primitive combobox, final Stri\n         return (ELEMENT_TYPE) this;\n     }\n \n+    default ELEMENT_TYPE checkDropDownCount(final Primitive combobox, final int count) {\n+        get(combobox).shouldBe(visible).click();\n+        assertEquals(SelenideElements.of(byClassName(\"ant-select-dropdown-menu-item\")).size(), count,\n+                \"Dropdown list count doesn't correspond expected\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1Njg5Ng=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDc2OTc3OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDowMDo1OVrOHY_IxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzowMTowMVrOHZHo9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MjMwOQ==", "bodyText": "We have Utils.ON_DEMAND constant, let's replace in all places of the class", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495962309", "createdAt": "2020-09-28T14:00:59Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 509}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMTYyMQ==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496101621", "createdAt": "2020-09-28T17:01:01Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MjMwOQ=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 509}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDc3MzYzOnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDowMTo0MFrOHY_K8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoxNzo1OFrOHZIOpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2Mjg2Ng==", "bodyText": "Could you please add space before and after = ?", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495962866", "createdAt": "2020-09-28T14:01:40Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 499}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMTI2OQ==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496111269", "createdAt": "2020-09-28T17:17:58Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2Mjg2Ng=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 499}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDg3MzIzOnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyMzoxMlrOHZAHXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoxODo0MlrOHZIQNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3ODMzNA==", "bodyText": "Could you please add space before and after = ?", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495978334", "createdAt": "2020-09-28T14:23:12Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMTY3MQ==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496111671", "createdAt": "2020-09-28T17:18:42Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3ODMzNA=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 318}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDg5MjE5OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyNzowNVrOHZASxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoyNzoxNVrOHZIjaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTI1NA==", "bodyText": "The same as above", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495981254", "createdAt": "2020-09-28T14:27:05Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 520}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNjU4NQ==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496116585", "createdAt": "2020-09-28T17:27:15Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTI1NA=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 520}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDg5MjYwOnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyNzoxMVrOHZAS_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoyNzo1NFrOHZIk4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTMxMA==", "bodyText": "The same as above", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495981310", "createdAt": "2020-09-28T14:27:11Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 534}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNjk2Mw==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496116963", "createdAt": "2020-09-28T17:27:54Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTMxMA=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 534}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDg5NTAzOnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyNzo0NFrOHZAUkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoyODozNVrOHZImRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTcxNA==", "bodyText": "The same as above", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495981714", "createdAt": "2020-09-28T14:27:44Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 588}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNzMxNw==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496117317", "createdAt": "2020-09-28T17:28:35Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTcxNA=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 588}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDg5NTc2OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyNzo1MlrOHZAU-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoyODo1NVrOHZInDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTgxOQ==", "bodyText": "The same as above", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495981819", "createdAt": "2020-09-28T14:27:52Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 596}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNzUxNw==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496117517", "createdAt": "2020-09-28T17:28:55Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTgxOQ=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 596}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDg5NjQ5OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyODowMVrOHZAVaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzoyOTowN1rOHZIneQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTkyOQ==", "bodyText": "The same as above", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495981929", "createdAt": "2020-09-28T14:28:01Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 605}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNzYyNQ==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496117625", "createdAt": "2020-09-28T17:29:07Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTkyOQ=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 605}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDg5NzAzOnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyODoxMFrOHZAVxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzozMDo1MFrOHZIrYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MjAyMg==", "bodyText": "The same as above", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495982022", "createdAt": "2020-09-28T14:28:10Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2652\"})\n+    public void validationOfPriceTypesRestrictionsHierarchy() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            tools()\n+                    .performWithin(defaultRegistry,defaultGroup,testingTool,tool->\n+                            tool.showInstanceManagement(instanceManagement->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(spotPriceName)\n+                                            .clickApply()\n+                                            .sleep(2,SECONDS)));\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", spotPriceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 621}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExODYyNw==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496118627", "createdAt": "2020-09-28T17:30:50Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2652\"})\n+    public void validationOfPriceTypesRestrictionsHierarchy() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            tools()\n+                    .performWithin(defaultRegistry,defaultGroup,testingTool,tool->\n+                            tool.showInstanceManagement(instanceManagement->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(spotPriceName)\n+                                            .clickApply()\n+                                            .sleep(2,SECONDS)));\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", spotPriceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MjAyMg=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 621}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDg5NzQ3OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyODoxN1rOHZAWDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzozMTowMlrOHZIrzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MjA5Mw==", "bodyText": "The same as above", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495982093", "createdAt": "2020-09-28T14:28:17Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2652\"})\n+    public void validationOfPriceTypesRestrictionsHierarchy() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            tools()\n+                    .performWithin(defaultRegistry,defaultGroup,testingTool,tool->\n+                            tool.showInstanceManagement(instanceManagement->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(spotPriceName)\n+                                            .clickApply()\n+                                            .sleep(2,SECONDS)));\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", spotPriceName);\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 629}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExODczMg==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496118732", "createdAt": "2020-09-28T17:31:02Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2652\"})\n+    public void validationOfPriceTypesRestrictionsHierarchy() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            tools()\n+                    .performWithin(defaultRegistry,defaultGroup,testingTool,tool->\n+                            tool.showInstanceManagement(instanceManagement->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(spotPriceName)\n+                                            .clickApply()\n+                                            .sleep(2,SECONDS)));\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", spotPriceName);\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MjA5Mw=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 629}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDkwNDc0OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyOTo0M1rOHZAacQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzowNjozMlrOHZH2Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MzIxNw==", "bodyText": "Could you please add space before { ?", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495983217", "createdAt": "2020-09-28T14:29:43Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2652\"})\n+    public void validationOfPriceTypesRestrictionsHierarchy() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            tools()\n+                    .performWithin(defaultRegistry,defaultGroup,testingTool,tool->\n+                            tool.showInstanceManagement(instanceManagement->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(spotPriceName)\n+                                            .clickApply()\n+                                            .sleep(2,SECONDS)));\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", spotPriceName);\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+            tools()\n+                    .performWithin(defaultRegistry,defaultGroup,testingTool,tool->\n+                            tool.showInstanceManagement(instanceManagement->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .sleep(2,SECONDS)));\n+        }\n+    }\n+\n+    private EditUserPopup openEditUserTab(String user) {\n+        return navigationMenu()\n+                .settings()\n+                .switchToUserManagement()\n+                .switchToUsers()\n+                .searchForUserEntry(user)\n+                .edit();\n+    }\n+\n+    private void setMaskForUser(String user, String mask, String value) {\n+        openEditUserTab(user)\n+                .addAllowedLaunchOptions(mask, value)\n+                .ok();\n+    }\n+\n+    private void setMaskForRole(String role, String mask, String value){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 661}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwNTAwMg==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496105002", "createdAt": "2020-09-28T17:06:32Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2652\"})\n+    public void validationOfPriceTypesRestrictionsHierarchy() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            tools()\n+                    .performWithin(defaultRegistry,defaultGroup,testingTool,tool->\n+                            tool.showInstanceManagement(instanceManagement->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(spotPriceName)\n+                                            .clickApply()\n+                                            .sleep(2,SECONDS)));\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", spotPriceName);\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+            tools()\n+                    .performWithin(defaultRegistry,defaultGroup,testingTool,tool->\n+                            tool.showInstanceManagement(instanceManagement->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .sleep(2,SECONDS)));\n+        }\n+    }\n+\n+    private EditUserPopup openEditUserTab(String user) {\n+        return navigationMenu()\n+                .settings()\n+                .switchToUserManagement()\n+                .switchToUsers()\n+                .searchForUserEntry(user)\n+                .edit();\n+    }\n+\n+    private void setMaskForUser(String user, String mask, String value) {\n+        openEditUserTab(user)\n+                .addAllowedLaunchOptions(mask, value)\n+                .ok();\n+    }\n+\n+    private void setMaskForRole(String role, String mask, String value){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MzIxNw=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 661}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDkzMjI4OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozNToyMlrOHZArAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzowMzozN1rOHZHwCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4NzQ1Nw==", "bodyText": "Could you please add space after , and before ->?", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495987457", "createdAt": "2020-09-28T14:35:22Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -188,123 +693,24 @@ public void validationOfInstanceTypesRestrictionsExistingObjects() {\n                 .exitFromConfigurationWithoutSaved();\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n-    @TestCase({\"EPMCMBIBPC-2639\"})\n-    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n-        loginAs(user);\n+    private void validationOfPriceTypesRestrictions(String pipelinePriceTypes, String configurationPriceTypes, String toolPriceTypes) {\n         library()\n                 .cd(folder)\n-                .createPipeline(secondPipeline)\n-                .clickOnDraftVersion(secondPipeline)\n+                .clickOnDraftVersion(pipeline)\n                 .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n+                .editConfiguration(configurationName,profile->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 704}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMzQzNQ==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496103435", "createdAt": "2020-09-28T17:03:37Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -188,123 +693,24 @@ public void validationOfInstanceTypesRestrictionsExistingObjects() {\n                 .exitFromConfigurationWithoutSaved();\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n-    @TestCase({\"EPMCMBIBPC-2639\"})\n-    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n-        loginAs(user);\n+    private void validationOfPriceTypesRestrictions(String pipelinePriceTypes, String configurationPriceTypes, String toolPriceTypes) {\n         library()\n                 .cd(folder)\n-                .createPipeline(secondPipeline)\n-                .clickOnDraftVersion(secondPipeline)\n+                .clickOnDraftVersion(pipeline)\n                 .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n+                .editConfiguration(configurationName,profile->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4NzQ1Nw=="}, "originalCommit": {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d"}, "originalPosition": 704}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 378, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}