{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NTEzNDU2", "number": 924, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDowMTozM1rODcL8-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxMzo0MlrODcMKGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODgyNTUyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/ClusterApiService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDowMTozM1rOFkGhrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowODo1MFrOFkK11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5OTk4MA==", "bodyText": "Name in the PreAuthorize section must match argument name: #nodeName -> #name", "url": "https://github.com/epam/cloud-pipeline/pull/924#discussion_r373399980", "createdAt": "2020-01-31T10:01:33Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/ClusterApiService.java", "diffHunk": "@@ -74,6 +76,12 @@ public NodeInstance terminateNode(String name) {\n         return usageMonitoringManager.getStatsForNode(nodeName, from, to);\n     }\n \n+    @PreAuthorize(\"hasRole('ADMIN') OR @grantPermissionManager.nodePermission(#nodeName, 'READ')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7e9e857e2c05329abff936df17c627807caf9c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3MDY3OQ==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/924#discussion_r373470679", "createdAt": "2020-01-31T13:08:50Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/ClusterApiService.java", "diffHunk": "@@ -74,6 +76,12 @@ public NodeInstance terminateNode(String name) {\n         return usageMonitoringManager.getStatsForNode(nodeName, from, to);\n     }\n \n+    @PreAuthorize(\"hasRole('ADMIN') OR @grantPermissionManager.nodePermission(#nodeName, 'READ')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5OTk4MA=="}, "originalCommit": {"oid": "5e7e9e857e2c05329abff936df17c627807caf9c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODgzMTg5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDowMzo1MlrOFkGllQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowODo0NVrOFkK1sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwMDk4MQ==", "bodyText": "Move error message to MessageConstants", "url": "https://github.com/epam/cloud-pipeline/pull/924#discussion_r373400981", "createdAt": "2020-01-31T10:03:52Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java", "diffHunk": "@@ -67,11 +71,34 @@\n         final LocalDateTime oldestMonitoring = oldestMonitoringDate();\n         final LocalDateTime start = requestedStart.isAfter(oldestMonitoring) ? requestedStart : oldestMonitoring;\n         final LocalDateTime end = Optional.ofNullable(to).orElseGet(DateUtils::nowUTC);\n+        final Duration interval = interval(start, end);\n         return end.isAfter(start) && end.isAfter(oldestMonitoring)\n-                ? getStats(nodeName, start, end)\n+                ? getStats(nodeName, start, end, interval)\n                 : Collections.emptyList();\n     }\n \n+    @Override\n+    public InputStream getStatsForNodeAsInputStream(final String nodeName,\n+                                                    final LocalDateTime from,\n+                                                    final LocalDateTime to,\n+                                                    final Duration interval) {\n+        final LocalDateTime requestedStart = Optional.ofNullable(from).orElseGet(() -> creationDate(nodeName));\n+        final LocalDateTime oldestMonitoring = oldestMonitoringDate();\n+        final LocalDateTime start = requestedStart.isAfter(oldestMonitoring) ? requestedStart : oldestMonitoring;\n+        final LocalDateTime end = Optional.ofNullable(to).orElseGet(DateUtils::nowUTC);\n+        final Duration minDuration = minimalDuration();\n+        final Duration adjustedDuration = interval.compareTo(minDuration) < 0\n+                                          ? minDuration\n+                                          : interval;\n+        final List<MonitoringStats> monitoringStats = getStats(nodeName, start, end, adjustedDuration);\n+        final MonitoringStatsWriter statsWriter = new MonitoringStatsWriter();\n+        try {\n+            return new StringInputStream(statsWriter.convertStatsToCsvString(monitoringStats));\n+        } catch (IOException e) {\n+            throw new IllegalStateException(\"Written csv stats file encoding differs from UTF-8.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7e9e857e2c05329abff936df17c627807caf9c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3MDY0MA==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/924#discussion_r373470640", "createdAt": "2020-01-31T13:08:45Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java", "diffHunk": "@@ -67,11 +71,34 @@\n         final LocalDateTime oldestMonitoring = oldestMonitoringDate();\n         final LocalDateTime start = requestedStart.isAfter(oldestMonitoring) ? requestedStart : oldestMonitoring;\n         final LocalDateTime end = Optional.ofNullable(to).orElseGet(DateUtils::nowUTC);\n+        final Duration interval = interval(start, end);\n         return end.isAfter(start) && end.isAfter(oldestMonitoring)\n-                ? getStats(nodeName, start, end)\n+                ? getStats(nodeName, start, end, interval)\n                 : Collections.emptyList();\n     }\n \n+    @Override\n+    public InputStream getStatsForNodeAsInputStream(final String nodeName,\n+                                                    final LocalDateTime from,\n+                                                    final LocalDateTime to,\n+                                                    final Duration interval) {\n+        final LocalDateTime requestedStart = Optional.ofNullable(from).orElseGet(() -> creationDate(nodeName));\n+        final LocalDateTime oldestMonitoring = oldestMonitoringDate();\n+        final LocalDateTime start = requestedStart.isAfter(oldestMonitoring) ? requestedStart : oldestMonitoring;\n+        final LocalDateTime end = Optional.ofNullable(to).orElseGet(DateUtils::nowUTC);\n+        final Duration minDuration = minimalDuration();\n+        final Duration adjustedDuration = interval.compareTo(minDuration) < 0\n+                                          ? minDuration\n+                                          : interval;\n+        final List<MonitoringStats> monitoringStats = getStats(nodeName, start, end, adjustedDuration);\n+        final MonitoringStatsWriter statsWriter = new MonitoringStatsWriter();\n+        try {\n+            return new StringInputStream(statsWriter.convertStatsToCsvString(monitoringStats));\n+        } catch (IOException e) {\n+            throw new IllegalStateException(\"Written csv stats file encoding differs from UTF-8.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwMDk4MQ=="}, "originalCommit": {"oid": "5e7e9e857e2c05329abff936df17c627807caf9c"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODg1MTQ0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxMTowOFrOFkGxSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowODo0MFrOFkK1hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwMzk3Nw==", "bodyText": "In order to remove hardcoded indices, I'd suggest to use List to build CSV line and then convert it to array", "url": "https://github.com/epam/cloud-pipeline/pull/924#discussion_r373403977", "createdAt": "2020-01-31T10:11:08Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.opencsv.CSVWriter;\n+import lombok.NoArgsConstructor;\n+import lombok.Value;\n+\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@NoArgsConstructor\n+public class MonitoringStatsWriter {\n+\n+    private static final List<String> COMMON_STATS_HEADER =\n+        Arrays.asList(\"Timestamp\", \"CPU_cores\", \"CPU_usage[%]\", \"MEM_capacity[bytes]\", \"MEM_usage[%]\");\n+    private static final String DISK_TOTAL_HEADER_TEMPLATE = \"%s_total[bytes]\";\n+    private static final String DISK_USAGE_HEADER_TEMPLATE = \"%s_usage[%%]\";\n+    private static final String NETWORK_USAGE_IN_HEADER_TEMPLATE = \"%s_in[bytes]\";\n+    private static final String NETWORK_USAGE_OUT_HEADER_TEMPLATE = \"%s_out[bytes]\";\n+    private static final double HUNDRED_PERCENTS = 100.0;\n+\n+    public String convertStatsToCsvString(final List<MonitoringStats> stats) {\n+        final StringWriter stringWriter = new StringWriter();\n+        final CSVWriter csvWriter = new CSVWriter(stringWriter);\n+        final List<String[]> allLines = extractTable(stats);\n+        csvWriter.writeAll(allLines);\n+        return stringWriter.toString();\n+    }\n+\n+    private List<String[]> extractTable(final List<MonitoringStats> stats) {\n+        final List<String[]> allLines = new ArrayList<>();\n+        final MonitoringStatsHeader header = extractHeader(stats);\n+        if (!header.getColumnNames().isEmpty()) {\n+            allLines.add(header.getColumnNames().toArray(new String[0]));\n+            final List<String[]> entities = stats.stream()\n+                .map(stat -> createNewLine(header, stat))\n+                .collect(Collectors.toList());\n+            allLines.addAll(entities);\n+            return allLines;\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    private MonitoringStatsHeader extractHeader(final List<MonitoringStats> stats) {\n+        if (stats.size() == 0) {\n+            return MonitoringStatsHeader.EMPTY_HEADER;\n+        }\n+        final List<String> headerColumns = new ArrayList<>(COMMON_STATS_HEADER);\n+        final List<String> disks = stats.stream()\n+            .map(MonitoringStats::getDisksUsage)\n+            .map(MonitoringStats.DisksUsage::getStatsByDevices)\n+            .map(Map::keySet)\n+            .flatMap(Set::stream)\n+            .distinct()\n+            .sorted()\n+            .peek(disk -> {\n+                headerColumns.add(String.format(DISK_TOTAL_HEADER_TEMPLATE, disk));\n+                headerColumns.add(String.format(DISK_USAGE_HEADER_TEMPLATE, disk));\n+            })\n+            .collect(Collectors.toList());\n+        final List<String> networkInterfaces = stats.stream()\n+            .map(MonitoringStats::getNetworkUsage)\n+            .map(MonitoringStats.NetworkUsage::getStatsByInterface)\n+            .map(Map::keySet)\n+            .flatMap(Set::stream)\n+            .distinct()\n+            .sorted()\n+            .peek(netInterface -> {\n+                headerColumns.add(String.format(NETWORK_USAGE_IN_HEADER_TEMPLATE, netInterface));\n+                headerColumns.add(String.format(NETWORK_USAGE_OUT_HEADER_TEMPLATE, netInterface));\n+            })\n+            .collect(Collectors.toList());\n+        return new MonitoringStatsHeader(disks, networkInterfaces, headerColumns);\n+    }\n+\n+    private String[] createNewLine(final MonitoringStatsHeader header, final MonitoringStats stat) {\n+        final String[] newLine = new String[header.getColumnNames().size()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7e9e857e2c05329abff936df17c627807caf9c"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3MDU5OA==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/924#discussion_r373470598", "createdAt": "2020-01-31T13:08:40Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.opencsv.CSVWriter;\n+import lombok.NoArgsConstructor;\n+import lombok.Value;\n+\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@NoArgsConstructor\n+public class MonitoringStatsWriter {\n+\n+    private static final List<String> COMMON_STATS_HEADER =\n+        Arrays.asList(\"Timestamp\", \"CPU_cores\", \"CPU_usage[%]\", \"MEM_capacity[bytes]\", \"MEM_usage[%]\");\n+    private static final String DISK_TOTAL_HEADER_TEMPLATE = \"%s_total[bytes]\";\n+    private static final String DISK_USAGE_HEADER_TEMPLATE = \"%s_usage[%%]\";\n+    private static final String NETWORK_USAGE_IN_HEADER_TEMPLATE = \"%s_in[bytes]\";\n+    private static final String NETWORK_USAGE_OUT_HEADER_TEMPLATE = \"%s_out[bytes]\";\n+    private static final double HUNDRED_PERCENTS = 100.0;\n+\n+    public String convertStatsToCsvString(final List<MonitoringStats> stats) {\n+        final StringWriter stringWriter = new StringWriter();\n+        final CSVWriter csvWriter = new CSVWriter(stringWriter);\n+        final List<String[]> allLines = extractTable(stats);\n+        csvWriter.writeAll(allLines);\n+        return stringWriter.toString();\n+    }\n+\n+    private List<String[]> extractTable(final List<MonitoringStats> stats) {\n+        final List<String[]> allLines = new ArrayList<>();\n+        final MonitoringStatsHeader header = extractHeader(stats);\n+        if (!header.getColumnNames().isEmpty()) {\n+            allLines.add(header.getColumnNames().toArray(new String[0]));\n+            final List<String[]> entities = stats.stream()\n+                .map(stat -> createNewLine(header, stat))\n+                .collect(Collectors.toList());\n+            allLines.addAll(entities);\n+            return allLines;\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    private MonitoringStatsHeader extractHeader(final List<MonitoringStats> stats) {\n+        if (stats.size() == 0) {\n+            return MonitoringStatsHeader.EMPTY_HEADER;\n+        }\n+        final List<String> headerColumns = new ArrayList<>(COMMON_STATS_HEADER);\n+        final List<String> disks = stats.stream()\n+            .map(MonitoringStats::getDisksUsage)\n+            .map(MonitoringStats.DisksUsage::getStatsByDevices)\n+            .map(Map::keySet)\n+            .flatMap(Set::stream)\n+            .distinct()\n+            .sorted()\n+            .peek(disk -> {\n+                headerColumns.add(String.format(DISK_TOTAL_HEADER_TEMPLATE, disk));\n+                headerColumns.add(String.format(DISK_USAGE_HEADER_TEMPLATE, disk));\n+            })\n+            .collect(Collectors.toList());\n+        final List<String> networkInterfaces = stats.stream()\n+            .map(MonitoringStats::getNetworkUsage)\n+            .map(MonitoringStats.NetworkUsage::getStatsByInterface)\n+            .map(Map::keySet)\n+            .flatMap(Set::stream)\n+            .distinct()\n+            .sorted()\n+            .peek(netInterface -> {\n+                headerColumns.add(String.format(NETWORK_USAGE_IN_HEADER_TEMPLATE, netInterface));\n+                headerColumns.add(String.format(NETWORK_USAGE_OUT_HEADER_TEMPLATE, netInterface));\n+            })\n+            .collect(Collectors.toList());\n+        return new MonitoringStatsHeader(disks, networkInterfaces, headerColumns);\n+    }\n+\n+    private String[] createNewLine(final MonitoringStatsHeader header, final MonitoringStats stat) {\n+        final String[] newLine = new String[header.getColumnNames().size()];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwMzk3Nw=="}, "originalCommit": {"oid": "5e7e9e857e2c05329abff936df17c627807caf9c"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODg1MzYwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxMTo1MlrOFkGyeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowODoyOVrOFkK1Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwNDI4MA==", "bodyText": "It is always better to use CollectionUtils.isEmpty for such checks", "url": "https://github.com/epam/cloud-pipeline/pull/924#discussion_r373404280", "createdAt": "2020-01-31T10:11:52Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.opencsv.CSVWriter;\n+import lombok.NoArgsConstructor;\n+import lombok.Value;\n+\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@NoArgsConstructor\n+public class MonitoringStatsWriter {\n+\n+    private static final List<String> COMMON_STATS_HEADER =\n+        Arrays.asList(\"Timestamp\", \"CPU_cores\", \"CPU_usage[%]\", \"MEM_capacity[bytes]\", \"MEM_usage[%]\");\n+    private static final String DISK_TOTAL_HEADER_TEMPLATE = \"%s_total[bytes]\";\n+    private static final String DISK_USAGE_HEADER_TEMPLATE = \"%s_usage[%%]\";\n+    private static final String NETWORK_USAGE_IN_HEADER_TEMPLATE = \"%s_in[bytes]\";\n+    private static final String NETWORK_USAGE_OUT_HEADER_TEMPLATE = \"%s_out[bytes]\";\n+    private static final double HUNDRED_PERCENTS = 100.0;\n+\n+    public String convertStatsToCsvString(final List<MonitoringStats> stats) {\n+        final StringWriter stringWriter = new StringWriter();\n+        final CSVWriter csvWriter = new CSVWriter(stringWriter);\n+        final List<String[]> allLines = extractTable(stats);\n+        csvWriter.writeAll(allLines);\n+        return stringWriter.toString();\n+    }\n+\n+    private List<String[]> extractTable(final List<MonitoringStats> stats) {\n+        final List<String[]> allLines = new ArrayList<>();\n+        final MonitoringStatsHeader header = extractHeader(stats);\n+        if (!header.getColumnNames().isEmpty()) {\n+            allLines.add(header.getColumnNames().toArray(new String[0]));\n+            final List<String[]> entities = stats.stream()\n+                .map(stat -> createNewLine(header, stat))\n+                .collect(Collectors.toList());\n+            allLines.addAll(entities);\n+            return allLines;\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    private MonitoringStatsHeader extractHeader(final List<MonitoringStats> stats) {\n+        if (stats.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7e9e857e2c05329abff936df17c627807caf9c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3MDU1NA==", "bodyText": "Removed during refactoring: now checking if the whole stats list is empty at the beginning of convertStatsToCsvString", "url": "https://github.com/epam/cloud-pipeline/pull/924#discussion_r373470554", "createdAt": "2020-01-31T13:08:29Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.opencsv.CSVWriter;\n+import lombok.NoArgsConstructor;\n+import lombok.Value;\n+\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@NoArgsConstructor\n+public class MonitoringStatsWriter {\n+\n+    private static final List<String> COMMON_STATS_HEADER =\n+        Arrays.asList(\"Timestamp\", \"CPU_cores\", \"CPU_usage[%]\", \"MEM_capacity[bytes]\", \"MEM_usage[%]\");\n+    private static final String DISK_TOTAL_HEADER_TEMPLATE = \"%s_total[bytes]\";\n+    private static final String DISK_USAGE_HEADER_TEMPLATE = \"%s_usage[%%]\";\n+    private static final String NETWORK_USAGE_IN_HEADER_TEMPLATE = \"%s_in[bytes]\";\n+    private static final String NETWORK_USAGE_OUT_HEADER_TEMPLATE = \"%s_out[bytes]\";\n+    private static final double HUNDRED_PERCENTS = 100.0;\n+\n+    public String convertStatsToCsvString(final List<MonitoringStats> stats) {\n+        final StringWriter stringWriter = new StringWriter();\n+        final CSVWriter csvWriter = new CSVWriter(stringWriter);\n+        final List<String[]> allLines = extractTable(stats);\n+        csvWriter.writeAll(allLines);\n+        return stringWriter.toString();\n+    }\n+\n+    private List<String[]> extractTable(final List<MonitoringStats> stats) {\n+        final List<String[]> allLines = new ArrayList<>();\n+        final MonitoringStatsHeader header = extractHeader(stats);\n+        if (!header.getColumnNames().isEmpty()) {\n+            allLines.add(header.getColumnNames().toArray(new String[0]));\n+            final List<String[]> entities = stats.stream()\n+                .map(stat -> createNewLine(header, stat))\n+                .collect(Collectors.toList());\n+            allLines.addAll(entities);\n+            return allLines;\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    private MonitoringStatsHeader extractHeader(final List<MonitoringStats> stats) {\n+        if (stats.size() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwNDI4MA=="}, "originalCommit": {"oid": "5e7e9e857e2c05329abff936df17c627807caf9c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODg1OTE0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoxMzo0MlrOFkG1pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzowODozNFrOFkK1dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwNTA5NQ==", "bodyText": "You can wrap collections into ListUtils.emptyIfNull", "url": "https://github.com/epam/cloud-pipeline/pull/924#discussion_r373405095", "createdAt": "2020-01-31T10:13:42Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.opencsv.CSVWriter;\n+import lombok.NoArgsConstructor;\n+import lombok.Value;\n+\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@NoArgsConstructor\n+public class MonitoringStatsWriter {\n+\n+    private static final List<String> COMMON_STATS_HEADER =\n+        Arrays.asList(\"Timestamp\", \"CPU_cores\", \"CPU_usage[%]\", \"MEM_capacity[bytes]\", \"MEM_usage[%]\");\n+    private static final String DISK_TOTAL_HEADER_TEMPLATE = \"%s_total[bytes]\";\n+    private static final String DISK_USAGE_HEADER_TEMPLATE = \"%s_usage[%%]\";\n+    private static final String NETWORK_USAGE_IN_HEADER_TEMPLATE = \"%s_in[bytes]\";\n+    private static final String NETWORK_USAGE_OUT_HEADER_TEMPLATE = \"%s_out[bytes]\";\n+    private static final double HUNDRED_PERCENTS = 100.0;\n+\n+    public String convertStatsToCsvString(final List<MonitoringStats> stats) {\n+        final StringWriter stringWriter = new StringWriter();\n+        final CSVWriter csvWriter = new CSVWriter(stringWriter);\n+        final List<String[]> allLines = extractTable(stats);\n+        csvWriter.writeAll(allLines);\n+        return stringWriter.toString();\n+    }\n+\n+    private List<String[]> extractTable(final List<MonitoringStats> stats) {\n+        final List<String[]> allLines = new ArrayList<>();\n+        final MonitoringStatsHeader header = extractHeader(stats);\n+        if (!header.getColumnNames().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7e9e857e2c05329abff936df17c627807caf9c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3MDU4MA==", "bodyText": "Removed during refactoring: now checking if the whole stats list is empty at the beginning of convertStatsToCsvString", "url": "https://github.com/epam/cloud-pipeline/pull/924#discussion_r373470580", "createdAt": "2020-01-31T13:08:34Z", "author": {"login": "Wedds"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.opencsv.CSVWriter;\n+import lombok.NoArgsConstructor;\n+import lombok.Value;\n+\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@NoArgsConstructor\n+public class MonitoringStatsWriter {\n+\n+    private static final List<String> COMMON_STATS_HEADER =\n+        Arrays.asList(\"Timestamp\", \"CPU_cores\", \"CPU_usage[%]\", \"MEM_capacity[bytes]\", \"MEM_usage[%]\");\n+    private static final String DISK_TOTAL_HEADER_TEMPLATE = \"%s_total[bytes]\";\n+    private static final String DISK_USAGE_HEADER_TEMPLATE = \"%s_usage[%%]\";\n+    private static final String NETWORK_USAGE_IN_HEADER_TEMPLATE = \"%s_in[bytes]\";\n+    private static final String NETWORK_USAGE_OUT_HEADER_TEMPLATE = \"%s_out[bytes]\";\n+    private static final double HUNDRED_PERCENTS = 100.0;\n+\n+    public String convertStatsToCsvString(final List<MonitoringStats> stats) {\n+        final StringWriter stringWriter = new StringWriter();\n+        final CSVWriter csvWriter = new CSVWriter(stringWriter);\n+        final List<String[]> allLines = extractTable(stats);\n+        csvWriter.writeAll(allLines);\n+        return stringWriter.toString();\n+    }\n+\n+    private List<String[]> extractTable(final List<MonitoringStats> stats) {\n+        final List<String[]> allLines = new ArrayList<>();\n+        final MonitoringStatsHeader header = extractHeader(stats);\n+        if (!header.getColumnNames().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwNTA5NQ=="}, "originalCommit": {"oid": "5e7e9e857e2c05329abff936df17c627807caf9c"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 469, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}