{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MjIzNjcz", "number": 1635, "title": "Issue #1405: Implemented tests for controller layer User package", "bodyText": "Issue #1405\nSigned-off-by: Iurii_Kofanov youkofan@gmail.com", "createdAt": "2020-12-08T07:51:28Z", "url": "https://github.com/epam/cloud-pipeline/pull/1635", "merged": true, "mergeCommit": {"oid": "37045d85d91d4d11f8f88967763971a2ee9a60f0"}, "closed": true, "closedAt": "2020-12-21T10:22:12Z", "author": {"login": "YouKofan"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkJ_o_AH2gAyNTM0MjIzNjczOmI2ZWZjMGY3ZDBjZGUzYTY4YTE5NWRiNGM3ZTBlNzE5ODQ5NmUwYTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmVQ9IgFqTU1MjE3MDc4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b6efc0f7d0cde3a68a195db4c7e0e7198496e0a0", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/b6efc0f7d0cde3a68a195db4c7e0e7198496e0a0", "committedDate": "2020-12-08T13:17:10Z", "message": "Issue #1405: Implemented tests for controller layer User package\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c965a9469d726d59ce3afe38bcd46813ca73772", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/3c965a9469d726d59ce3afe38bcd46813ca73772", "committedDate": "2020-12-08T17:14:31Z", "message": "Issue #1405: added missing tests\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe931c660e14c112eb90698c3c337cb8362a45ad", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/fe931c660e14c112eb90698c3c337cb8362a45ad", "committedDate": "2020-12-08T07:50:29Z", "message": "Issue #1405: Implemented tests for controller layer User package\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}, "afterCommit": {"oid": "3c965a9469d726d59ce3afe38bcd46813ca73772", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/3c965a9469d726d59ce3afe38bcd46813ca73772", "committedDate": "2020-12-08T17:14:31Z", "message": "Issue #1405: added missing tests\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4OTQzMTU5", "url": "https://github.com/epam/cloud-pipeline/pull/1635#pullrequestreview-548943159", "createdAt": "2020-12-10T08:15:18Z", "commit": {"oid": "3c965a9469d726d59ce3afe38bcd46813ca73772"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODoxNToxOVrOIC8mjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODo1ODoyNVrOIC-RHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2MDk3Mg==", "bodyText": "Please add a space between the field's type and its name.", "url": "https://github.com/epam/cloud-pipeline/pull/1635#discussion_r539960972", "createdAt": "2020-12-10T08:15:19Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/test/creator/security/SecurityCreatorUtils.java", "diffHunk": "@@ -35,6 +35,8 @@\n     public static final TypeReference<Result<Map<AclClass, List<S3bucketDataStorage>>>> ACL_SECURED_ENTITY_MAP_TYPE =\n             new TypeReference<Result<Map<AclClass, List<S3bucketDataStorage>>>>() {};\n     public static final TypeReference<JwtRawToken> JWT_RAW_TOKEN_INSTANCE_TYPE = new TypeReference<JwtRawToken>() {};\n+    public static final TypeReference<Result<JwtRawToken>>JWT_RAW_TOKEN_TYPE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c965a9469d726d59ce3afe38bcd46813ca73772"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2MjYwMA==", "bodyText": "I suppose the overloaded getPipelineUser method can be used rather than the constructor call..", "url": "https://github.com/epam/cloud-pipeline/pull/1635#discussion_r539962600", "createdAt": "2020-12-10T08:18:08Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/test/creator/user/UserCreatorUtils.java", "diffHunk": "@@ -45,6 +69,18 @@ public static PipelineUser getPipelineUser(final String name) {\n         return pipelineUser;\n     }\n \n+    public static PipelineUser getPipelineUser() {\n+        PipelineUser pipelineUser = new PipelineUser(TEST_STRING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c965a9469d726d59ce3afe38bcd46813ca73772"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2ODI4Ng==", "bodyText": "The current approach is error-prone. Imagine if some controller method accepts just a string and not a list. If we try to pass f.e. the following string Array[Sample] to the method using multiValueMapOf it will be cut to ArraySample. Imagine debugging something like this :)\nAs long as this special processing is required for only List type then we can handle it explicitly using instanceof. Additionally I assume there is no need to process the map keys. Probably we can even check that the keys are of String type and fail otherwise.", "url": "https://github.com/epam/cloud-pipeline/pull/1635#discussion_r539968286", "createdAt": "2020-12-10T08:27:31Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java", "diffHunk": "@@ -197,7 +197,8 @@ public void performRequestWithoutResponse(final MockHttpServletRequestBuilder re\n     public MultiValueMap<String, String> multiValueMapOf(Object... objects) {\n         final MultiValueMap<String, String> map = new LinkedMultiValueMap<>();\n         for (int i = 0; i < objects.length; i += 2) {\n-            map.add(String.valueOf(objects[i]), String.valueOf(objects[i + 1]));\n+            map.add(String.valueOf(objects[i]).replaceAll(\"[\\\\[\\\\]]\", \"\"),\n+                    String.valueOf(objects[i + 1]).replaceAll(\"[\\\\[\\\\]]\", \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c965a9469d726d59ce3afe38bcd46813ca73772"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3NDU2NQ==", "bodyText": "Could you please add ForUnauthorizedUser suffix to all the similar tests?", "url": "https://github.com/epam/cloud-pipeline/pull/1635#discussion_r539974565", "createdAt": "2020-12-10T08:37:22Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/user/RoleControllerTest.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.user;\n+\n+import com.epam.pipeline.acl.user.RoleApiService;\n+import com.epam.pipeline.controller.vo.user.RoleVO;\n+import com.epam.pipeline.entity.user.ExtendedRole;\n+import com.epam.pipeline.entity.user.Role;\n+import com.epam.pipeline.test.creator.user.UserCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+\n+public class RoleControllerTest extends AbstractControllerTest {\n+\n+    private static final String ROLE_URL = SERVLET_PATH + \"/role\";\n+    private static final String ROLE_ID_URL = ROLE_URL + \"/%d\";\n+    private static final String LOAD_ALL_URL = ROLE_URL + \"/loadAll\";\n+    private static final String ASSIGN_URL = ROLE_ID_URL + \"/assign\";\n+    private static final String REMOVE_URL = ROLE_ID_URL + \"/remove\";\n+    private static final String CREATE_URL = ROLE_URL + \"/create\";\n+\n+    private static final String LOAD_USERS = \"loadUsers\";\n+    private static final String USER_IDS = \"userIds\";\n+    private static final String ROLE_NAME = \"roleName\";\n+    private static final String USER_DEFAULT = \"userDefault\";\n+    private static final String DEFAULT_STORAGE_ID = \"defaultStorageId\";\n+\n+    private final Role role = UserCreatorUtils.getRole();\n+    private final ExtendedRole extendedRole = UserCreatorUtils.getExtendedRole();\n+    private final RoleVO roleVO = UserCreatorUtils.getRoleVO();\n+    private final List<Role> roleList = Collections.singletonList(role);\n+\n+    @Autowired\n+    private RoleApiService mockRoleApiService;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadRolesWithUsers() {\n+        doReturn(roleList).when(mockRoleApiService).loadRolesWithUsers();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_ALL_URL).params(multiValueMapOf(LOAD_USERS, true)));\n+\n+        verify(mockRoleApiService).loadRolesWithUsers();\n+        assertResponse(mvcResult, roleList, UserCreatorUtils.COLLECTION_ROLE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadRolesWithoutUsers() {\n+        doReturn(roleList).when(mockRoleApiService).loadRoles();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_ALL_URL).params(multiValueMapOf(LOAD_USERS, false)));\n+\n+        verify(mockRoleApiService).loadRoles();\n+        assertResponse(mvcResult, roleList, UserCreatorUtils.COLLECTION_ROLE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadRoles() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c965a9469d726d59ce3afe38bcd46813ca73772"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3ODI2Ng==", "bodyText": "I see that in controller the method is called getSettings but it seems misleading. Probably we can call the test method shouldGenerateToken. Please also rename all test methods for the same controller method.", "url": "https://github.com/epam/cloud-pipeline/pull/1635#discussion_r539978266", "createdAt": "2020-12-10T08:43:17Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/user/UserControllerTest.java", "diffHunk": "@@ -0,0 +1,504 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.user;\n+\n+import com.epam.pipeline.acl.user.UserApiService;\n+import com.epam.pipeline.controller.vo.PipelineUserExportVO;\n+import com.epam.pipeline.controller.vo.PipelineUserVO;\n+import com.epam.pipeline.controller.vo.RouteType;\n+import com.epam.pipeline.entity.info.UserInfo;\n+import com.epam.pipeline.entity.security.JwtRawToken;\n+import com.epam.pipeline.entity.user.CustomControl;\n+import com.epam.pipeline.entity.user.GroupStatus;\n+import com.epam.pipeline.entity.user.PipelineUser;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import com.epam.pipeline.test.creator.user.UserCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.OBJECT_TYPE;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+\n+\n+public class UserControllerTest extends AbstractControllerTest {\n+\n+    private static final String USER_TOKEN_URL = SERVLET_PATH + \"/user/token\";\n+    private static final String WHOAMI_URL = SERVLET_PATH + \"/whoami\";\n+    private static final String USER_URL = SERVLET_PATH + \"/user\";\n+    private static final String USER_FIND_URL = USER_URL + \"/find\";\n+    private static final String USER_MEMBER_URL = USER_URL + \"/isMember\";\n+    private static final String USER_EXPORT_URL = USER_URL + \"/export\";\n+    private static final String USER_ID_URL = USER_URL + \"/%d\";\n+    private static final String USER_ID_BLOCK_URL = USER_ID_URL + \"/block\";\n+    private static final String USER_ID_UPDATE_URL = USER_ID_URL + \"/update\";\n+    private static final String USER_CONTROLS_URL = USER_URL + \"/controls\";\n+    private static final String USERS_URL = SERVLET_PATH + \"/users\";\n+    private static final String USERS_INFO_URL = USERS_URL + \"/info\";\n+    private static final String GROUP_URL = SERVLET_PATH + \"/group\";\n+    private static final String GROUP_FIND_URL = GROUP_URL + \"/find\";\n+    private static final String GROUP_NAME_URL = GROUP_URL + \"/%s\";\n+    private static final String GROUP_NAME_BLOCK_URL = GROUP_NAME_URL + \"/block\";\n+    private static final String GROUPS_BLOCK_URL = SERVLET_PATH + \"/groups/block\";\n+    private static final String ROUTE_URL = SERVLET_PATH + \"/route\";\n+\n+    private static final String EXPIRATION = \"expiration\";\n+    private static final String NAME = \"name\";\n+    private static final String PREFIX = \"prefix\";\n+    private static final String BLOCK_STATUS = \"blockStatus\";\n+    private static final String ROLE_IDS = \"roleIds\";\n+    private static final String USER_NAME = \"userName\";\n+    private static final String GROUP = \"group\";\n+    private static final String GROUP_NAME = \"groupName\";\n+    private static final String URL = \"url\";\n+    private static final String TYPE = \"type\";\n+    private final String redirectCookie =\n+            \"\\\"<html><body><script>window.location.href = \\\\\\\"TEST\\\\\\\"</script></body></html>\\\"\";\n+    private final String redirectForm =\n+            \"\\\"<html>\\\\n\"\n+            + \"<body>\\\\n\"\n+            + \"<form id=\\\\\\\"form\\\\\\\" method=\\\\\\\"post\\\\\\\" action=\\\\\\\"TEST\\\\\\\">\\\\n\"\n+            + \" <input type=\\\\\\\"hidden\\\\\\\" name=\\\\\\\"bearer\\\\\\\" value=\\\\\\\"TEST\\\\\\\" />\\\\n\"\n+            + \"</form>\\\\n\"\n+            + \"<script>\\\\n\" + \"document.getElementById('form').submit()\\\\n\"\n+            + \"</script>\\\\n\"\n+            + \"</body>\\\\n\"\n+            + \"</html>\\\"\";\n+    private static final String TEXT_HTML_UTF8_CONTENT_TYPE = \"text/html;charset=UTF-8\";\n+\n+    private final JwtRawToken token = SecurityCreatorUtils.getJwtRawToken();\n+    private final PipelineUser pipelineUser = UserCreatorUtils.getPipelineUser();\n+    private final PipelineUserVO pipelineUserVO = UserCreatorUtils.getPipelineUserVO();\n+    private final UserInfo userInfo = UserCreatorUtils.getUserInfo(UserCreatorUtils.getPipelineUser());\n+    private final CustomControl customControl = UserCreatorUtils.getCustomControl();\n+    private final PipelineUserExportVO userExportVO = UserCreatorUtils.getPipelineUserExportVO();\n+    private final GroupStatus groupStatus = UserCreatorUtils.getGroupStatus();\n+\n+    private final List<PipelineUser> pipelineUserList = Collections.singletonList(pipelineUser);\n+    private final List<UserInfo> userInfoList = Collections.singletonList(userInfo);\n+    private final List<CustomControl> customControlList = Collections.singletonList(customControl);\n+    private final List<GroupStatus> groupStatusList = Collections.singletonList(groupStatus);\n+\n+    @Autowired\n+    private UserApiService mockUserApiService;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetSettings() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c965a9469d726d59ce3afe38bcd46813ca73772"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3OTczMg==", "bodyText": "The line break seems non required here.", "url": "https://github.com/epam/cloud-pipeline/pull/1635#discussion_r539979732", "createdAt": "2020-12-10T08:45:29Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/user/UserControllerTest.java", "diffHunk": "@@ -0,0 +1,504 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.user;\n+\n+import com.epam.pipeline.acl.user.UserApiService;\n+import com.epam.pipeline.controller.vo.PipelineUserExportVO;\n+import com.epam.pipeline.controller.vo.PipelineUserVO;\n+import com.epam.pipeline.controller.vo.RouteType;\n+import com.epam.pipeline.entity.info.UserInfo;\n+import com.epam.pipeline.entity.security.JwtRawToken;\n+import com.epam.pipeline.entity.user.CustomControl;\n+import com.epam.pipeline.entity.user.GroupStatus;\n+import com.epam.pipeline.entity.user.PipelineUser;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import com.epam.pipeline.test.creator.user.UserCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.OBJECT_TYPE;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+\n+\n+public class UserControllerTest extends AbstractControllerTest {\n+\n+    private static final String USER_TOKEN_URL = SERVLET_PATH + \"/user/token\";\n+    private static final String WHOAMI_URL = SERVLET_PATH + \"/whoami\";\n+    private static final String USER_URL = SERVLET_PATH + \"/user\";\n+    private static final String USER_FIND_URL = USER_URL + \"/find\";\n+    private static final String USER_MEMBER_URL = USER_URL + \"/isMember\";\n+    private static final String USER_EXPORT_URL = USER_URL + \"/export\";\n+    private static final String USER_ID_URL = USER_URL + \"/%d\";\n+    private static final String USER_ID_BLOCK_URL = USER_ID_URL + \"/block\";\n+    private static final String USER_ID_UPDATE_URL = USER_ID_URL + \"/update\";\n+    private static final String USER_CONTROLS_URL = USER_URL + \"/controls\";\n+    private static final String USERS_URL = SERVLET_PATH + \"/users\";\n+    private static final String USERS_INFO_URL = USERS_URL + \"/info\";\n+    private static final String GROUP_URL = SERVLET_PATH + \"/group\";\n+    private static final String GROUP_FIND_URL = GROUP_URL + \"/find\";\n+    private static final String GROUP_NAME_URL = GROUP_URL + \"/%s\";\n+    private static final String GROUP_NAME_BLOCK_URL = GROUP_NAME_URL + \"/block\";\n+    private static final String GROUPS_BLOCK_URL = SERVLET_PATH + \"/groups/block\";\n+    private static final String ROUTE_URL = SERVLET_PATH + \"/route\";\n+\n+    private static final String EXPIRATION = \"expiration\";\n+    private static final String NAME = \"name\";\n+    private static final String PREFIX = \"prefix\";\n+    private static final String BLOCK_STATUS = \"blockStatus\";\n+    private static final String ROLE_IDS = \"roleIds\";\n+    private static final String USER_NAME = \"userName\";\n+    private static final String GROUP = \"group\";\n+    private static final String GROUP_NAME = \"groupName\";\n+    private static final String URL = \"url\";\n+    private static final String TYPE = \"type\";\n+    private final String redirectCookie =\n+            \"\\\"<html><body><script>window.location.href = \\\\\\\"TEST\\\\\\\"</script></body></html>\\\"\";\n+    private final String redirectForm =\n+            \"\\\"<html>\\\\n\"\n+            + \"<body>\\\\n\"\n+            + \"<form id=\\\\\\\"form\\\\\\\" method=\\\\\\\"post\\\\\\\" action=\\\\\\\"TEST\\\\\\\">\\\\n\"\n+            + \" <input type=\\\\\\\"hidden\\\\\\\" name=\\\\\\\"bearer\\\\\\\" value=\\\\\\\"TEST\\\\\\\" />\\\\n\"\n+            + \"</form>\\\\n\"\n+            + \"<script>\\\\n\" + \"document.getElementById('form').submit()\\\\n\"\n+            + \"</script>\\\\n\"\n+            + \"</body>\\\\n\"\n+            + \"</html>\\\"\";\n+    private static final String TEXT_HTML_UTF8_CONTENT_TYPE = \"text/html;charset=UTF-8\";\n+\n+    private final JwtRawToken token = SecurityCreatorUtils.getJwtRawToken();\n+    private final PipelineUser pipelineUser = UserCreatorUtils.getPipelineUser();\n+    private final PipelineUserVO pipelineUserVO = UserCreatorUtils.getPipelineUserVO();\n+    private final UserInfo userInfo = UserCreatorUtils.getUserInfo(UserCreatorUtils.getPipelineUser());\n+    private final CustomControl customControl = UserCreatorUtils.getCustomControl();\n+    private final PipelineUserExportVO userExportVO = UserCreatorUtils.getPipelineUserExportVO();\n+    private final GroupStatus groupStatus = UserCreatorUtils.getGroupStatus();\n+\n+    private final List<PipelineUser> pipelineUserList = Collections.singletonList(pipelineUser);\n+    private final List<UserInfo> userInfoList = Collections.singletonList(userInfo);\n+    private final List<CustomControl> customControlList = Collections.singletonList(customControl);\n+    private final List<GroupStatus> groupStatusList = Collections.singletonList(groupStatus);\n+\n+    @Autowired\n+    private UserApiService mockUserApiService;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetSettings() {\n+        doReturn(token).when(mockUserApiService).issueToken(TEST_STRING, ID);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_TOKEN_URL)\n+                .params(multiValueMapOf(EXPIRATION, ID,\n+                                        NAME, TEST_STRING)));\n+\n+        verify(mockUserApiService).issueToken(TEST_STRING, ID);\n+        assertResponse(mvcResult, token, SecurityCreatorUtils.JWT_RAW_TOKEN_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetSettingsForCurrentUser() {\n+        doReturn(token).when(mockAuthManager).issueTokenForCurrentUser(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_TOKEN_URL)\n+                .params(multiValueMapOf(EXPIRATION, ID,\n+                                        null, null)));\n+\n+        verify(mockAuthManager).issueTokenForCurrentUser(ID);\n+        assertResponse(mvcResult, token, SecurityCreatorUtils.JWT_RAW_TOKEN_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetSettings() {\n+        performUnauthorizedRequest(get(USER_TOKEN_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetCurrentUser() {\n+        doReturn(pipelineUser).when(mockUserApiService).getCurrentUser();\n+\n+        final MvcResult mvcResult = performRequest(get(WHOAMI_URL));\n+\n+        verify(mockUserApiService).getCurrentUser();\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetCurrentUser() {\n+        performUnauthorizedRequest(get(WHOAMI_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRedirectWithCookieRouteType() throws Exception {\n+        doReturn(token).when(mockAuthManager).issueTokenForCurrentUser(null);\n+\n+        final MvcResult mvcResult = performRequest(get(ROUTE_URL)\n+                .params(multiValueMapOf(URL, TEST_STRING,\n+                                        TYPE, RouteType.COOKIE)),\n+                                        TEXT_HTML_UTF8_CONTENT_TYPE);\n+\n+        verify(mockAuthManager).issueTokenForCurrentUser(null);\n+        assertThat(mvcResult.getResponse().getContentAsString()).contains(redirectCookie);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRedirectWithFormRouteType() throws Exception {\n+        doReturn(token).when(mockAuthManager).issueTokenForCurrentUser(null);\n+\n+        final MvcResult mvcResult = performRequest(get(ROUTE_URL)\n+                .params(multiValueMapOf(URL, TEST_STRING,\n+                                        TYPE, RouteType.FORM)),\n+                                        TEXT_HTML_UTF8_CONTENT_TYPE);\n+\n+        verify(mockAuthManager).issueTokenForCurrentUser(null);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c965a9469d726d59ce3afe38bcd46813ca73772"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MzgzNw==", "bodyText": "The controller method /route is one of a very few methods accessible by so-called anonymous users. Currently it is the only one if I'm correct. Could you please add the test that checks that a user with a single role ROLE_ANONYMOUS_USER without even ROLE_USER can access the method.", "url": "https://github.com/epam/cloud-pipeline/pull/1635#discussion_r539983837", "createdAt": "2020-12-10T08:51:45Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/user/UserControllerTest.java", "diffHunk": "@@ -0,0 +1,504 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.user;\n+\n+import com.epam.pipeline.acl.user.UserApiService;\n+import com.epam.pipeline.controller.vo.PipelineUserExportVO;\n+import com.epam.pipeline.controller.vo.PipelineUserVO;\n+import com.epam.pipeline.controller.vo.RouteType;\n+import com.epam.pipeline.entity.info.UserInfo;\n+import com.epam.pipeline.entity.security.JwtRawToken;\n+import com.epam.pipeline.entity.user.CustomControl;\n+import com.epam.pipeline.entity.user.GroupStatus;\n+import com.epam.pipeline.entity.user.PipelineUser;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import com.epam.pipeline.test.creator.user.UserCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.OBJECT_TYPE;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+\n+\n+public class UserControllerTest extends AbstractControllerTest {\n+\n+    private static final String USER_TOKEN_URL = SERVLET_PATH + \"/user/token\";\n+    private static final String WHOAMI_URL = SERVLET_PATH + \"/whoami\";\n+    private static final String USER_URL = SERVLET_PATH + \"/user\";\n+    private static final String USER_FIND_URL = USER_URL + \"/find\";\n+    private static final String USER_MEMBER_URL = USER_URL + \"/isMember\";\n+    private static final String USER_EXPORT_URL = USER_URL + \"/export\";\n+    private static final String USER_ID_URL = USER_URL + \"/%d\";\n+    private static final String USER_ID_BLOCK_URL = USER_ID_URL + \"/block\";\n+    private static final String USER_ID_UPDATE_URL = USER_ID_URL + \"/update\";\n+    private static final String USER_CONTROLS_URL = USER_URL + \"/controls\";\n+    private static final String USERS_URL = SERVLET_PATH + \"/users\";\n+    private static final String USERS_INFO_URL = USERS_URL + \"/info\";\n+    private static final String GROUP_URL = SERVLET_PATH + \"/group\";\n+    private static final String GROUP_FIND_URL = GROUP_URL + \"/find\";\n+    private static final String GROUP_NAME_URL = GROUP_URL + \"/%s\";\n+    private static final String GROUP_NAME_BLOCK_URL = GROUP_NAME_URL + \"/block\";\n+    private static final String GROUPS_BLOCK_URL = SERVLET_PATH + \"/groups/block\";\n+    private static final String ROUTE_URL = SERVLET_PATH + \"/route\";\n+\n+    private static final String EXPIRATION = \"expiration\";\n+    private static final String NAME = \"name\";\n+    private static final String PREFIX = \"prefix\";\n+    private static final String BLOCK_STATUS = \"blockStatus\";\n+    private static final String ROLE_IDS = \"roleIds\";\n+    private static final String USER_NAME = \"userName\";\n+    private static final String GROUP = \"group\";\n+    private static final String GROUP_NAME = \"groupName\";\n+    private static final String URL = \"url\";\n+    private static final String TYPE = \"type\";\n+    private final String redirectCookie =\n+            \"\\\"<html><body><script>window.location.href = \\\\\\\"TEST\\\\\\\"</script></body></html>\\\"\";\n+    private final String redirectForm =\n+            \"\\\"<html>\\\\n\"\n+            + \"<body>\\\\n\"\n+            + \"<form id=\\\\\\\"form\\\\\\\" method=\\\\\\\"post\\\\\\\" action=\\\\\\\"TEST\\\\\\\">\\\\n\"\n+            + \" <input type=\\\\\\\"hidden\\\\\\\" name=\\\\\\\"bearer\\\\\\\" value=\\\\\\\"TEST\\\\\\\" />\\\\n\"\n+            + \"</form>\\\\n\"\n+            + \"<script>\\\\n\" + \"document.getElementById('form').submit()\\\\n\"\n+            + \"</script>\\\\n\"\n+            + \"</body>\\\\n\"\n+            + \"</html>\\\"\";\n+    private static final String TEXT_HTML_UTF8_CONTENT_TYPE = \"text/html;charset=UTF-8\";\n+\n+    private final JwtRawToken token = SecurityCreatorUtils.getJwtRawToken();\n+    private final PipelineUser pipelineUser = UserCreatorUtils.getPipelineUser();\n+    private final PipelineUserVO pipelineUserVO = UserCreatorUtils.getPipelineUserVO();\n+    private final UserInfo userInfo = UserCreatorUtils.getUserInfo(UserCreatorUtils.getPipelineUser());\n+    private final CustomControl customControl = UserCreatorUtils.getCustomControl();\n+    private final PipelineUserExportVO userExportVO = UserCreatorUtils.getPipelineUserExportVO();\n+    private final GroupStatus groupStatus = UserCreatorUtils.getGroupStatus();\n+\n+    private final List<PipelineUser> pipelineUserList = Collections.singletonList(pipelineUser);\n+    private final List<UserInfo> userInfoList = Collections.singletonList(userInfo);\n+    private final List<CustomControl> customControlList = Collections.singletonList(customControl);\n+    private final List<GroupStatus> groupStatusList = Collections.singletonList(groupStatus);\n+\n+    @Autowired\n+    private UserApiService mockUserApiService;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetSettings() {\n+        doReturn(token).when(mockUserApiService).issueToken(TEST_STRING, ID);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_TOKEN_URL)\n+                .params(multiValueMapOf(EXPIRATION, ID,\n+                                        NAME, TEST_STRING)));\n+\n+        verify(mockUserApiService).issueToken(TEST_STRING, ID);\n+        assertResponse(mvcResult, token, SecurityCreatorUtils.JWT_RAW_TOKEN_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetSettingsForCurrentUser() {\n+        doReturn(token).when(mockAuthManager).issueTokenForCurrentUser(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_TOKEN_URL)\n+                .params(multiValueMapOf(EXPIRATION, ID,\n+                                        null, null)));\n+\n+        verify(mockAuthManager).issueTokenForCurrentUser(ID);\n+        assertResponse(mvcResult, token, SecurityCreatorUtils.JWT_RAW_TOKEN_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetSettings() {\n+        performUnauthorizedRequest(get(USER_TOKEN_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetCurrentUser() {\n+        doReturn(pipelineUser).when(mockUserApiService).getCurrentUser();\n+\n+        final MvcResult mvcResult = performRequest(get(WHOAMI_URL));\n+\n+        verify(mockUserApiService).getCurrentUser();\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetCurrentUser() {\n+        performUnauthorizedRequest(get(WHOAMI_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRedirectWithCookieRouteType() throws Exception {\n+        doReturn(token).when(mockAuthManager).issueTokenForCurrentUser(null);\n+\n+        final MvcResult mvcResult = performRequest(get(ROUTE_URL)\n+                .params(multiValueMapOf(URL, TEST_STRING,\n+                                        TYPE, RouteType.COOKIE)),\n+                                        TEXT_HTML_UTF8_CONTENT_TYPE);\n+\n+        verify(mockAuthManager).issueTokenForCurrentUser(null);\n+        assertThat(mvcResult.getResponse().getContentAsString()).contains(redirectCookie);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRedirectWithFormRouteType() throws Exception {\n+        doReturn(token).when(mockAuthManager).issueTokenForCurrentUser(null);\n+\n+        final MvcResult mvcResult = performRequest(get(ROUTE_URL)\n+                .params(multiValueMapOf(URL, TEST_STRING,\n+                                        TYPE, RouteType.FORM)),\n+                                        TEXT_HTML_UTF8_CONTENT_TYPE);\n+\n+        verify(mockAuthManager).issueTokenForCurrentUser(null);\n+\n+        assertThat(mvcResult.getResponse().getContentAsString()).contains(redirectForm);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c965a9469d726d59ce3afe38bcd46813ca73772"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4Njg2MA==", "bodyText": "Let's extract user.csv string to the class field.", "url": "https://github.com/epam/cloud-pipeline/pull/1635#discussion_r539986860", "createdAt": "2020-12-10T08:56:20Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/user/UserControllerTest.java", "diffHunk": "@@ -0,0 +1,504 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.user;\n+\n+import com.epam.pipeline.acl.user.UserApiService;\n+import com.epam.pipeline.controller.vo.PipelineUserExportVO;\n+import com.epam.pipeline.controller.vo.PipelineUserVO;\n+import com.epam.pipeline.controller.vo.RouteType;\n+import com.epam.pipeline.entity.info.UserInfo;\n+import com.epam.pipeline.entity.security.JwtRawToken;\n+import com.epam.pipeline.entity.user.CustomControl;\n+import com.epam.pipeline.entity.user.GroupStatus;\n+import com.epam.pipeline.entity.user.PipelineUser;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import com.epam.pipeline.test.creator.user.UserCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.OBJECT_TYPE;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+\n+\n+public class UserControllerTest extends AbstractControllerTest {\n+\n+    private static final String USER_TOKEN_URL = SERVLET_PATH + \"/user/token\";\n+    private static final String WHOAMI_URL = SERVLET_PATH + \"/whoami\";\n+    private static final String USER_URL = SERVLET_PATH + \"/user\";\n+    private static final String USER_FIND_URL = USER_URL + \"/find\";\n+    private static final String USER_MEMBER_URL = USER_URL + \"/isMember\";\n+    private static final String USER_EXPORT_URL = USER_URL + \"/export\";\n+    private static final String USER_ID_URL = USER_URL + \"/%d\";\n+    private static final String USER_ID_BLOCK_URL = USER_ID_URL + \"/block\";\n+    private static final String USER_ID_UPDATE_URL = USER_ID_URL + \"/update\";\n+    private static final String USER_CONTROLS_URL = USER_URL + \"/controls\";\n+    private static final String USERS_URL = SERVLET_PATH + \"/users\";\n+    private static final String USERS_INFO_URL = USERS_URL + \"/info\";\n+    private static final String GROUP_URL = SERVLET_PATH + \"/group\";\n+    private static final String GROUP_FIND_URL = GROUP_URL + \"/find\";\n+    private static final String GROUP_NAME_URL = GROUP_URL + \"/%s\";\n+    private static final String GROUP_NAME_BLOCK_URL = GROUP_NAME_URL + \"/block\";\n+    private static final String GROUPS_BLOCK_URL = SERVLET_PATH + \"/groups/block\";\n+    private static final String ROUTE_URL = SERVLET_PATH + \"/route\";\n+\n+    private static final String EXPIRATION = \"expiration\";\n+    private static final String NAME = \"name\";\n+    private static final String PREFIX = \"prefix\";\n+    private static final String BLOCK_STATUS = \"blockStatus\";\n+    private static final String ROLE_IDS = \"roleIds\";\n+    private static final String USER_NAME = \"userName\";\n+    private static final String GROUP = \"group\";\n+    private static final String GROUP_NAME = \"groupName\";\n+    private static final String URL = \"url\";\n+    private static final String TYPE = \"type\";\n+    private final String redirectCookie =\n+            \"\\\"<html><body><script>window.location.href = \\\\\\\"TEST\\\\\\\"</script></body></html>\\\"\";\n+    private final String redirectForm =\n+            \"\\\"<html>\\\\n\"\n+            + \"<body>\\\\n\"\n+            + \"<form id=\\\\\\\"form\\\\\\\" method=\\\\\\\"post\\\\\\\" action=\\\\\\\"TEST\\\\\\\">\\\\n\"\n+            + \" <input type=\\\\\\\"hidden\\\\\\\" name=\\\\\\\"bearer\\\\\\\" value=\\\\\\\"TEST\\\\\\\" />\\\\n\"\n+            + \"</form>\\\\n\"\n+            + \"<script>\\\\n\" + \"document.getElementById('form').submit()\\\\n\"\n+            + \"</script>\\\\n\"\n+            + \"</body>\\\\n\"\n+            + \"</html>\\\"\";\n+    private static final String TEXT_HTML_UTF8_CONTENT_TYPE = \"text/html;charset=UTF-8\";\n+\n+    private final JwtRawToken token = SecurityCreatorUtils.getJwtRawToken();\n+    private final PipelineUser pipelineUser = UserCreatorUtils.getPipelineUser();\n+    private final PipelineUserVO pipelineUserVO = UserCreatorUtils.getPipelineUserVO();\n+    private final UserInfo userInfo = UserCreatorUtils.getUserInfo(UserCreatorUtils.getPipelineUser());\n+    private final CustomControl customControl = UserCreatorUtils.getCustomControl();\n+    private final PipelineUserExportVO userExportVO = UserCreatorUtils.getPipelineUserExportVO();\n+    private final GroupStatus groupStatus = UserCreatorUtils.getGroupStatus();\n+\n+    private final List<PipelineUser> pipelineUserList = Collections.singletonList(pipelineUser);\n+    private final List<UserInfo> userInfoList = Collections.singletonList(userInfo);\n+    private final List<CustomControl> customControlList = Collections.singletonList(customControl);\n+    private final List<GroupStatus> groupStatusList = Collections.singletonList(groupStatus);\n+\n+    @Autowired\n+    private UserApiService mockUserApiService;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetSettings() {\n+        doReturn(token).when(mockUserApiService).issueToken(TEST_STRING, ID);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_TOKEN_URL)\n+                .params(multiValueMapOf(EXPIRATION, ID,\n+                                        NAME, TEST_STRING)));\n+\n+        verify(mockUserApiService).issueToken(TEST_STRING, ID);\n+        assertResponse(mvcResult, token, SecurityCreatorUtils.JWT_RAW_TOKEN_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetSettingsForCurrentUser() {\n+        doReturn(token).when(mockAuthManager).issueTokenForCurrentUser(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_TOKEN_URL)\n+                .params(multiValueMapOf(EXPIRATION, ID,\n+                                        null, null)));\n+\n+        verify(mockAuthManager).issueTokenForCurrentUser(ID);\n+        assertResponse(mvcResult, token, SecurityCreatorUtils.JWT_RAW_TOKEN_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetSettings() {\n+        performUnauthorizedRequest(get(USER_TOKEN_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetCurrentUser() {\n+        doReturn(pipelineUser).when(mockUserApiService).getCurrentUser();\n+\n+        final MvcResult mvcResult = performRequest(get(WHOAMI_URL));\n+\n+        verify(mockUserApiService).getCurrentUser();\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetCurrentUser() {\n+        performUnauthorizedRequest(get(WHOAMI_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRedirectWithCookieRouteType() throws Exception {\n+        doReturn(token).when(mockAuthManager).issueTokenForCurrentUser(null);\n+\n+        final MvcResult mvcResult = performRequest(get(ROUTE_URL)\n+                .params(multiValueMapOf(URL, TEST_STRING,\n+                                        TYPE, RouteType.COOKIE)),\n+                                        TEXT_HTML_UTF8_CONTENT_TYPE);\n+\n+        verify(mockAuthManager).issueTokenForCurrentUser(null);\n+        assertThat(mvcResult.getResponse().getContentAsString()).contains(redirectCookie);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRedirectWithFormRouteType() throws Exception {\n+        doReturn(token).when(mockAuthManager).issueTokenForCurrentUser(null);\n+\n+        final MvcResult mvcResult = performRequest(get(ROUTE_URL)\n+                .params(multiValueMapOf(URL, TEST_STRING,\n+                                        TYPE, RouteType.FORM)),\n+                                        TEXT_HTML_UTF8_CONTENT_TYPE);\n+\n+        verify(mockAuthManager).issueTokenForCurrentUser(null);\n+\n+        assertThat(mvcResult.getResponse().getContentAsString()).contains(redirectForm);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindUsers() {\n+        doReturn(pipelineUserList).when(mockUserApiService).findUsers(TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_FIND_URL).params(multiValueMapOf(PREFIX, TEST_STRING)));\n+\n+        verify(mockUserApiService).findUsers(TEST_STRING);\n+        assertResponse(mvcResult, pipelineUserList, UserCreatorUtils.PIPELINE_USER_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindUsers() {\n+        performUnauthorizedRequest(get(USER_FIND_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCreateUser() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(pipelineUserVO);\n+        doReturn(pipelineUser).when(mockUserApiService).createUser(pipelineUserVO);\n+\n+        final MvcResult mvcResult = performRequest(post(USER_URL).content(content));\n+\n+        verify(mockUserApiService).createUser(pipelineUserVO);\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailCreateUser() {\n+        performUnauthorizedRequest(post(USER_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadUser() {\n+        doReturn(pipelineUser).when(mockUserApiService).loadUser(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(USER_ID_URL, ID)));\n+\n+        verify(mockUserApiService).loadUser(ID);\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadUser() {\n+        performUnauthorizedRequest(get(String.format(USER_ID_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadUserByName() {\n+        doReturn(pipelineUser).when(mockUserApiService).loadUserByName(TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_URL).params(multiValueMapOf(NAME, TEST_STRING)));\n+\n+        verify(mockUserApiService).loadUserByName(TEST_STRING);\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadUserByName() {\n+        performUnauthorizedRequest(get(USER_ID_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateUser() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(pipelineUserVO);\n+        doReturn(pipelineUser).when(mockUserApiService).updateUser(ID, pipelineUserVO);\n+\n+        final MvcResult mvcResult = performRequest(put(String.format(USER_ID_URL, ID)).content(content));\n+\n+        verify(mockUserApiService).updateUser(ID, pipelineUserVO);\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateUser() {\n+        performUnauthorizedRequest(put(String.format(USER_ID_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteUser() {\n+        final MvcResult mvcResult = performRequest(delete(String.format(USER_ID_URL, ID)));\n+\n+        verify(mockUserApiService).deleteUser(ID);\n+        assertResponse(mvcResult, null, OBJECT_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteUser() {\n+        performUnauthorizedRequest(delete(String.format(USER_ID_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadUsers() {\n+        doReturn(pipelineUserList).when(mockUserApiService).loadUsers();\n+\n+        final MvcResult mvcResult = performRequest(get(USERS_URL));\n+\n+        verify(mockUserApiService).loadUsers();\n+        assertResponse(mvcResult, pipelineUserList, UserCreatorUtils.PIPELINE_USER_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadUsers() {\n+        performUnauthorizedRequest(get(USERS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadUsersInfo() {\n+        doReturn(userInfoList).when(mockUserApiService).loadUsersInfo();\n+\n+        final MvcResult mvcResult = performRequest(get(USERS_INFO_URL));\n+\n+        verify(mockUserApiService).loadUsersInfo();\n+        assertResponse(mvcResult, userInfoList, UserCreatorUtils.USER_INFO_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadUsersInfo() {\n+        performUnauthorizedRequest(get(USERS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetUserControls() {\n+        doReturn(customControlList).when(mockUserApiService).getUserControls();\n+\n+        final MvcResult mvcResult = performRequest(get(USER_CONTROLS_URL));\n+\n+        verify(mockUserApiService).getUserControls();\n+        assertResponse(mvcResult, customControlList, UserCreatorUtils.CUSTOM_CONTROL_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetUserControls() {\n+        performUnauthorizedRequest(get(USER_CONTROLS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateUserBlockingStatus() {\n+        doReturn(pipelineUser).when(mockUserApiService).updateUserBlockingStatus(ID, true);\n+\n+        final MvcResult mvcResult = performRequest(put(String.format(USER_ID_BLOCK_URL, ID))\n+                .params(multiValueMapOf(BLOCK_STATUS, true)));\n+\n+        verify(mockUserApiService).updateUserBlockingStatus(ID, true);\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateUserBlockingStatus() {\n+        performUnauthorizedRequest(put(String.format(USER_ID_BLOCK_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateUserRoles() {\n+        doReturn(pipelineUser).when(mockUserApiService).updateUserRoles(ID, TEST_LONG_LIST);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(USER_ID_UPDATE_URL, ID))\n+                .params(multiValueMapOf(ROLE_IDS, TEST_LONG_LIST)));\n+\n+        verify(mockUserApiService).updateUserRoles(ID, TEST_LONG_LIST);\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateUserRoles() {\n+        performUnauthorizedRequest(put(String.format(USER_ID_BLOCK_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCheckUserByGroup() {\n+        doReturn(true).when(mockUserApiService).checkUserByGroup(TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_MEMBER_URL)\n+                .params(multiValueMapOf(USER_NAME, TEST_STRING,\n+                                        GROUP, TEST_STRING)));\n+\n+        verify(mockUserApiService).checkUserByGroup(TEST_STRING, TEST_STRING);\n+        assertResponse(mvcResult, true, CommonCreatorConstants.BOOLEAN_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailCheckUserByGroup() {\n+        performUnauthorizedRequest(get(USER_MEMBER_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldExportUsers() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(userExportVO);\n+        doReturn(TEST_ARRAY).when(mockUserApiService).exportUsers(userExportVO);\n+\n+        final MvcResult mvcResult = performRequest(post(USER_EXPORT_URL).content(content),\n+                EXPECTED_CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+\n+        verify(mockUserApiService).exportUsers(userExportVO);\n+        assertFileResponse(mvcResult, \"users.csv\", TEST_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c965a9469d726d59ce3afe38bcd46813ca73772"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4ODI1Mw==", "bodyText": "Let's use a single methods to test these calls. See ServerlessConfigurationControllerTest.shouldRun for a similar case.", "url": "https://github.com/epam/cloud-pipeline/pull/1635#discussion_r539988253", "createdAt": "2020-12-10T08:58:25Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/user/UserControllerTest.java", "diffHunk": "@@ -0,0 +1,504 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.user;\n+\n+import com.epam.pipeline.acl.user.UserApiService;\n+import com.epam.pipeline.controller.vo.PipelineUserExportVO;\n+import com.epam.pipeline.controller.vo.PipelineUserVO;\n+import com.epam.pipeline.controller.vo.RouteType;\n+import com.epam.pipeline.entity.info.UserInfo;\n+import com.epam.pipeline.entity.security.JwtRawToken;\n+import com.epam.pipeline.entity.user.CustomControl;\n+import com.epam.pipeline.entity.user.GroupStatus;\n+import com.epam.pipeline.entity.user.PipelineUser;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import com.epam.pipeline.test.creator.user.UserCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.OBJECT_TYPE;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+\n+\n+public class UserControllerTest extends AbstractControllerTest {\n+\n+    private static final String USER_TOKEN_URL = SERVLET_PATH + \"/user/token\";\n+    private static final String WHOAMI_URL = SERVLET_PATH + \"/whoami\";\n+    private static final String USER_URL = SERVLET_PATH + \"/user\";\n+    private static final String USER_FIND_URL = USER_URL + \"/find\";\n+    private static final String USER_MEMBER_URL = USER_URL + \"/isMember\";\n+    private static final String USER_EXPORT_URL = USER_URL + \"/export\";\n+    private static final String USER_ID_URL = USER_URL + \"/%d\";\n+    private static final String USER_ID_BLOCK_URL = USER_ID_URL + \"/block\";\n+    private static final String USER_ID_UPDATE_URL = USER_ID_URL + \"/update\";\n+    private static final String USER_CONTROLS_URL = USER_URL + \"/controls\";\n+    private static final String USERS_URL = SERVLET_PATH + \"/users\";\n+    private static final String USERS_INFO_URL = USERS_URL + \"/info\";\n+    private static final String GROUP_URL = SERVLET_PATH + \"/group\";\n+    private static final String GROUP_FIND_URL = GROUP_URL + \"/find\";\n+    private static final String GROUP_NAME_URL = GROUP_URL + \"/%s\";\n+    private static final String GROUP_NAME_BLOCK_URL = GROUP_NAME_URL + \"/block\";\n+    private static final String GROUPS_BLOCK_URL = SERVLET_PATH + \"/groups/block\";\n+    private static final String ROUTE_URL = SERVLET_PATH + \"/route\";\n+\n+    private static final String EXPIRATION = \"expiration\";\n+    private static final String NAME = \"name\";\n+    private static final String PREFIX = \"prefix\";\n+    private static final String BLOCK_STATUS = \"blockStatus\";\n+    private static final String ROLE_IDS = \"roleIds\";\n+    private static final String USER_NAME = \"userName\";\n+    private static final String GROUP = \"group\";\n+    private static final String GROUP_NAME = \"groupName\";\n+    private static final String URL = \"url\";\n+    private static final String TYPE = \"type\";\n+    private final String redirectCookie =\n+            \"\\\"<html><body><script>window.location.href = \\\\\\\"TEST\\\\\\\"</script></body></html>\\\"\";\n+    private final String redirectForm =\n+            \"\\\"<html>\\\\n\"\n+            + \"<body>\\\\n\"\n+            + \"<form id=\\\\\\\"form\\\\\\\" method=\\\\\\\"post\\\\\\\" action=\\\\\\\"TEST\\\\\\\">\\\\n\"\n+            + \" <input type=\\\\\\\"hidden\\\\\\\" name=\\\\\\\"bearer\\\\\\\" value=\\\\\\\"TEST\\\\\\\" />\\\\n\"\n+            + \"</form>\\\\n\"\n+            + \"<script>\\\\n\" + \"document.getElementById('form').submit()\\\\n\"\n+            + \"</script>\\\\n\"\n+            + \"</body>\\\\n\"\n+            + \"</html>\\\"\";\n+    private static final String TEXT_HTML_UTF8_CONTENT_TYPE = \"text/html;charset=UTF-8\";\n+\n+    private final JwtRawToken token = SecurityCreatorUtils.getJwtRawToken();\n+    private final PipelineUser pipelineUser = UserCreatorUtils.getPipelineUser();\n+    private final PipelineUserVO pipelineUserVO = UserCreatorUtils.getPipelineUserVO();\n+    private final UserInfo userInfo = UserCreatorUtils.getUserInfo(UserCreatorUtils.getPipelineUser());\n+    private final CustomControl customControl = UserCreatorUtils.getCustomControl();\n+    private final PipelineUserExportVO userExportVO = UserCreatorUtils.getPipelineUserExportVO();\n+    private final GroupStatus groupStatus = UserCreatorUtils.getGroupStatus();\n+\n+    private final List<PipelineUser> pipelineUserList = Collections.singletonList(pipelineUser);\n+    private final List<UserInfo> userInfoList = Collections.singletonList(userInfo);\n+    private final List<CustomControl> customControlList = Collections.singletonList(customControl);\n+    private final List<GroupStatus> groupStatusList = Collections.singletonList(groupStatus);\n+\n+    @Autowired\n+    private UserApiService mockUserApiService;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetSettings() {\n+        doReturn(token).when(mockUserApiService).issueToken(TEST_STRING, ID);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_TOKEN_URL)\n+                .params(multiValueMapOf(EXPIRATION, ID,\n+                                        NAME, TEST_STRING)));\n+\n+        verify(mockUserApiService).issueToken(TEST_STRING, ID);\n+        assertResponse(mvcResult, token, SecurityCreatorUtils.JWT_RAW_TOKEN_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetSettingsForCurrentUser() {\n+        doReturn(token).when(mockAuthManager).issueTokenForCurrentUser(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_TOKEN_URL)\n+                .params(multiValueMapOf(EXPIRATION, ID,\n+                                        null, null)));\n+\n+        verify(mockAuthManager).issueTokenForCurrentUser(ID);\n+        assertResponse(mvcResult, token, SecurityCreatorUtils.JWT_RAW_TOKEN_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetSettings() {\n+        performUnauthorizedRequest(get(USER_TOKEN_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetCurrentUser() {\n+        doReturn(pipelineUser).when(mockUserApiService).getCurrentUser();\n+\n+        final MvcResult mvcResult = performRequest(get(WHOAMI_URL));\n+\n+        verify(mockUserApiService).getCurrentUser();\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetCurrentUser() {\n+        performUnauthorizedRequest(get(WHOAMI_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRedirectWithCookieRouteType() throws Exception {\n+        doReturn(token).when(mockAuthManager).issueTokenForCurrentUser(null);\n+\n+        final MvcResult mvcResult = performRequest(get(ROUTE_URL)\n+                .params(multiValueMapOf(URL, TEST_STRING,\n+                                        TYPE, RouteType.COOKIE)),\n+                                        TEXT_HTML_UTF8_CONTENT_TYPE);\n+\n+        verify(mockAuthManager).issueTokenForCurrentUser(null);\n+        assertThat(mvcResult.getResponse().getContentAsString()).contains(redirectCookie);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRedirectWithFormRouteType() throws Exception {\n+        doReturn(token).when(mockAuthManager).issueTokenForCurrentUser(null);\n+\n+        final MvcResult mvcResult = performRequest(get(ROUTE_URL)\n+                .params(multiValueMapOf(URL, TEST_STRING,\n+                                        TYPE, RouteType.FORM)),\n+                                        TEXT_HTML_UTF8_CONTENT_TYPE);\n+\n+        verify(mockAuthManager).issueTokenForCurrentUser(null);\n+\n+        assertThat(mvcResult.getResponse().getContentAsString()).contains(redirectForm);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindUsers() {\n+        doReturn(pipelineUserList).when(mockUserApiService).findUsers(TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_FIND_URL).params(multiValueMapOf(PREFIX, TEST_STRING)));\n+\n+        verify(mockUserApiService).findUsers(TEST_STRING);\n+        assertResponse(mvcResult, pipelineUserList, UserCreatorUtils.PIPELINE_USER_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindUsers() {\n+        performUnauthorizedRequest(get(USER_FIND_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCreateUser() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(pipelineUserVO);\n+        doReturn(pipelineUser).when(mockUserApiService).createUser(pipelineUserVO);\n+\n+        final MvcResult mvcResult = performRequest(post(USER_URL).content(content));\n+\n+        verify(mockUserApiService).createUser(pipelineUserVO);\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailCreateUser() {\n+        performUnauthorizedRequest(post(USER_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadUser() {\n+        doReturn(pipelineUser).when(mockUserApiService).loadUser(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(USER_ID_URL, ID)));\n+\n+        verify(mockUserApiService).loadUser(ID);\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadUser() {\n+        performUnauthorizedRequest(get(String.format(USER_ID_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadUserByName() {\n+        doReturn(pipelineUser).when(mockUserApiService).loadUserByName(TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_URL).params(multiValueMapOf(NAME, TEST_STRING)));\n+\n+        verify(mockUserApiService).loadUserByName(TEST_STRING);\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadUserByName() {\n+        performUnauthorizedRequest(get(USER_ID_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateUser() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(pipelineUserVO);\n+        doReturn(pipelineUser).when(mockUserApiService).updateUser(ID, pipelineUserVO);\n+\n+        final MvcResult mvcResult = performRequest(put(String.format(USER_ID_URL, ID)).content(content));\n+\n+        verify(mockUserApiService).updateUser(ID, pipelineUserVO);\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateUser() {\n+        performUnauthorizedRequest(put(String.format(USER_ID_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteUser() {\n+        final MvcResult mvcResult = performRequest(delete(String.format(USER_ID_URL, ID)));\n+\n+        verify(mockUserApiService).deleteUser(ID);\n+        assertResponse(mvcResult, null, OBJECT_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteUser() {\n+        performUnauthorizedRequest(delete(String.format(USER_ID_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadUsers() {\n+        doReturn(pipelineUserList).when(mockUserApiService).loadUsers();\n+\n+        final MvcResult mvcResult = performRequest(get(USERS_URL));\n+\n+        verify(mockUserApiService).loadUsers();\n+        assertResponse(mvcResult, pipelineUserList, UserCreatorUtils.PIPELINE_USER_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadUsers() {\n+        performUnauthorizedRequest(get(USERS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadUsersInfo() {\n+        doReturn(userInfoList).when(mockUserApiService).loadUsersInfo();\n+\n+        final MvcResult mvcResult = performRequest(get(USERS_INFO_URL));\n+\n+        verify(mockUserApiService).loadUsersInfo();\n+        assertResponse(mvcResult, userInfoList, UserCreatorUtils.USER_INFO_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadUsersInfo() {\n+        performUnauthorizedRequest(get(USERS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetUserControls() {\n+        doReturn(customControlList).when(mockUserApiService).getUserControls();\n+\n+        final MvcResult mvcResult = performRequest(get(USER_CONTROLS_URL));\n+\n+        verify(mockUserApiService).getUserControls();\n+        assertResponse(mvcResult, customControlList, UserCreatorUtils.CUSTOM_CONTROL_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetUserControls() {\n+        performUnauthorizedRequest(get(USER_CONTROLS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateUserBlockingStatus() {\n+        doReturn(pipelineUser).when(mockUserApiService).updateUserBlockingStatus(ID, true);\n+\n+        final MvcResult mvcResult = performRequest(put(String.format(USER_ID_BLOCK_URL, ID))\n+                .params(multiValueMapOf(BLOCK_STATUS, true)));\n+\n+        verify(mockUserApiService).updateUserBlockingStatus(ID, true);\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateUserBlockingStatus() {\n+        performUnauthorizedRequest(put(String.format(USER_ID_BLOCK_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateUserRoles() {\n+        doReturn(pipelineUser).when(mockUserApiService).updateUserRoles(ID, TEST_LONG_LIST);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(USER_ID_UPDATE_URL, ID))\n+                .params(multiValueMapOf(ROLE_IDS, TEST_LONG_LIST)));\n+\n+        verify(mockUserApiService).updateUserRoles(ID, TEST_LONG_LIST);\n+        assertResponse(mvcResult, pipelineUser, UserCreatorUtils.PIPELINE_USER_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateUserRoles() {\n+        performUnauthorizedRequest(put(String.format(USER_ID_BLOCK_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCheckUserByGroup() {\n+        doReturn(true).when(mockUserApiService).checkUserByGroup(TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(USER_MEMBER_URL)\n+                .params(multiValueMapOf(USER_NAME, TEST_STRING,\n+                                        GROUP, TEST_STRING)));\n+\n+        verify(mockUserApiService).checkUserByGroup(TEST_STRING, TEST_STRING);\n+        assertResponse(mvcResult, true, CommonCreatorConstants.BOOLEAN_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailCheckUserByGroup() {\n+        performUnauthorizedRequest(get(USER_MEMBER_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldExportUsers() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(userExportVO);\n+        doReturn(TEST_ARRAY).when(mockUserApiService).exportUsers(userExportVO);\n+\n+        final MvcResult mvcResult = performRequest(post(USER_EXPORT_URL).content(content),\n+                EXPECTED_CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+\n+        verify(mockUserApiService).exportUsers(userExportVO);\n+        assertFileResponse(mvcResult, \"users.csv\", TEST_ARRAY);\n+    }\n+\n+    @Test\n+    public void shouldFailExportUsers() {\n+        performUnauthorizedRequest(post(USER_EXPORT_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadUsersByGroup() {\n+        doReturn(pipelineUserList).when(mockUserApiService).loadUsersByGroup(TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(GROUP_URL).params(multiValueMapOf(GROUP, TEST_STRING)));\n+\n+        verify(mockUserApiService).loadUsersByGroup(TEST_STRING);\n+        assertResponse(mvcResult, pipelineUserList, UserCreatorUtils.PIPELINE_USER_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadUsersByGroup() {\n+        performUnauthorizedRequest(get(GROUP_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindGroups() {\n+        doReturn(TEST_STRING_LIST).when(mockUserApiService).findGroups(TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(GROUP_FIND_URL).params(multiValueMapOf(PREFIX, TEST_STRING)));\n+\n+        verify(mockUserApiService).findGroups(TEST_STRING);\n+        assertResponse(mvcResult, TEST_STRING_LIST, CommonCreatorConstants.STRING_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindGroups() {\n+        performUnauthorizedRequest(get(GROUP_FIND_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpsertGroupBlockingStatusByPostRequest() {\n+        doReturn(groupStatus).when(mockUserApiService).upsertGroupBlockingStatus(TEST_STRING, true);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(GROUP_NAME_BLOCK_URL, TEST_STRING))\n+                .params(multiValueMapOf(BLOCK_STATUS, true)));\n+\n+        verify(mockUserApiService).upsertGroupBlockingStatus(TEST_STRING, true);\n+        assertResponse(mvcResult, groupStatus, UserCreatorUtils.GROUP_STATUS_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpsertGroupBlockingStatusByPutRequest() {\n+        doReturn(groupStatus).when(mockUserApiService).upsertGroupBlockingStatus(TEST_STRING, true);\n+\n+        final MvcResult mvcResult = performRequest(put(String.format(GROUP_NAME_BLOCK_URL, TEST_STRING))\n+                .params(multiValueMapOf(BLOCK_STATUS, true)));\n+\n+        verify(mockUserApiService).upsertGroupBlockingStatus(TEST_STRING, true);\n+        assertResponse(mvcResult, groupStatus, UserCreatorUtils.GROUP_STATUS_INSTANCE_TYPE);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c965a9469d726d59ce3afe38bcd46813ca73772"}, "originalPosition": 465}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92236c62c21a73f29a598f773bff0f462a333fdc", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/92236c62c21a73f29a598f773bff0f462a333fdc", "committedDate": "2020-12-11T08:02:28Z", "message": "Issue #1405: Fixed and improvements in accordance with comments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMTgyMTI2", "url": "https://github.com/epam/cloud-pipeline/pull/1635#pullrequestreview-551182126", "createdAt": "2020-12-14T09:26:08Z", "commit": {"oid": "92236c62c21a73f29a598f773bff0f462a333fdc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOToyNjowOVrOIFHNNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOToyNjowOVrOIFHNNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIzMTg2MQ==", "bodyText": "I suppose it's cleaner to use String.valueOf for each of the list elements and just join them after using f.e. Collectors.joining.", "url": "https://github.com/epam/cloud-pipeline/pull/1635#discussion_r542231861", "createdAt": "2020-12-14T09:26:09Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java", "diffHunk": "@@ -197,8 +199,11 @@ public void performRequestWithoutResponse(final MockHttpServletRequestBuilder re\n     public MultiValueMap<String, String> multiValueMapOf(Object... objects) {\n         final MultiValueMap<String, String> map = new LinkedMultiValueMap<>();\n         for (int i = 0; i < objects.length; i += 2) {\n-            map.add(String.valueOf(objects[i]).replaceAll(\"[\\\\[\\\\]]\", \"\"),\n-                    String.valueOf(objects[i + 1]).replaceAll(\"[\\\\[\\\\]]\", \"\"));\n+            if (objects[i + 1] instanceof List) {\n+                map.add(String.valueOf(objects[i]), String.valueOf(objects[i + 1]).replaceAll(\"[\\\\[\\\\]]\", \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92236c62c21a73f29a598f773bff0f462a333fdc"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec7404fcd86eb9e78a80b312690103a6e6833b8a", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/ec7404fcd86eb9e78a80b312690103a6e6833b8a", "committedDate": "2020-12-14T15:22:02Z", "message": "Issue #1405: multiValueMapOf method refactoring\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTcwNzg4", "url": "https://github.com/epam/cloud-pipeline/pull/1635#pullrequestreview-552170788", "createdAt": "2020-12-15T07:32:53Z", "commit": {"oid": "ec7404fcd86eb9e78a80b312690103a6e6833b8a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3596, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}