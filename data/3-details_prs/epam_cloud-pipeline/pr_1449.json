{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NDg4NjM3", "number": 1449, "title": "Issue #1405: Implemented tests for CloudRegionController", "bodyText": "This PR is related to issue #1405 and contains tests implementation for CloudRegionController", "createdAt": "2020-09-30T12:54:37Z", "url": "https://github.com/epam/cloud-pipeline/pull/1449", "merged": true, "mergeCommit": {"oid": "2585fe31bbe82da16ec13da57b8916b60dc7b8a7"}, "closed": true, "closedAt": "2020-10-16T12:27:43Z", "author": {"login": "cryteq"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOOEYhAFqTUwMDE3MDc4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTFhKwgFqTUxMDQyMDk5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMTcwNzg2", "url": "https://github.com/epam/cloud-pipeline/pull/1449#pullrequestreview-500170786", "createdAt": "2020-10-01T09:33:41Z", "commit": {"oid": "19fc1f53ace3a35ac810c265a79386d99c9451ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOTozMzo0MVrOHbCQwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOTozMzo0MVrOHbCQwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODExMDY1Nw==", "bodyText": "Lets make the CloudRegionInfo a mutable object: add no args constructor, remove final and change @Value to @Data  to use ControllerTestUtils#assertResponse method", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r498110657", "createdAt": "2020-10-01T09:33:41Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/region/CloudRegionControllerTest.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.region;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionApiService;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.apache.commons.lang3.StringUtils;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = CloudRegionController.class)\n+public class CloudRegionControllerTest extends AbstractControllerTest {\n+\n+    public static final long ID = 1L;\n+    private static final String REGION_URL = SERVLET_PATH + \"/cloud/region\";\n+    public static final String LOAD_PROVIDERS_URL = REGION_URL + \"/provider\";\n+    public static final String LOAD_REGIONS_INFO_URL = REGION_URL + \"/info\";\n+    public static final String LOAD_AVAILABLE_REGIONS_URL = REGION_URL + \"/available\";\n+    private static final String REGION_ID_URL = REGION_URL + \"/%d\";\n+    private AwsRegion awsRegion;\n+    private ResponseResult<AwsRegion> expectedAwsRegionResult;\n+\n+    @Autowired\n+    private CloudRegionApiService mockCloudRegionApiService;\n+\n+    @Before\n+    public void setUp() {\n+        awsRegion = new AwsRegion();\n+        awsRegion.setId(ID);\n+        awsRegion.setName(\"testName\");\n+        awsRegion.setRegionCode(\"7367\");\n+\n+        expectedAwsRegionResult = ControllerTestUtils.buildExpectedResult(awsRegion);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadProvidersForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(LOAD_PROVIDERS_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadProviders() throws Exception {\n+        final List<CloudProvider> cloudProviders = Collections.singletonList(CloudProvider.AWS);\n+\n+        Mockito.doReturn(cloudProviders).when(mockCloudRegionApiService).loadProviders();\n+\n+        final MvcResult mvcResult = mvc().perform(get(LOAD_PROVIDERS_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockCloudRegionApiService).loadProviders();\n+\n+        final ResponseResult<List<CloudProvider>> expectedResult =\n+                ControllerTestUtils.buildExpectedResult(cloudProviders);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,\n+                new TypeReference<Result<List<CloudProvider>>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(REGION_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAll() throws Exception {\n+        final List<AwsRegion> cloudRegions = Collections.singletonList(awsRegion);\n+\n+        Mockito.doReturn(cloudRegions).when(mockCloudRegionApiService).loadAll();\n+\n+        final MvcResult mvcResult = mvc().perform(get(REGION_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockCloudRegionApiService).loadAll();\n+\n+        final ResponseResult<List<AwsRegion>> expectedResult =\n+                ControllerTestUtils.buildExpectedResult(cloudRegions);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,\n+                new TypeReference<Result<List<AwsRegion>>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllRegionsInfoForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(LOAD_REGIONS_INFO_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAllRegionsInfo() throws Exception {\n+        final CloudRegionInfo awsRegionInfo = new CloudRegionInfo(awsRegion);\n+        final List<CloudRegionInfo> cloudRegionInfos = Collections.singletonList(awsRegionInfo);\n+\n+        Mockito.doReturn(cloudRegionInfos).when(mockCloudRegionApiService).loadAllRegionsInfo();\n+\n+        final MvcResult mvcResult = mvc().perform(get(LOAD_REGIONS_INFO_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockCloudRegionApiService).loadAllRegionsInfo();\n+\n+        final ResponseResult<List<CloudRegionInfo>> expectedResult =\n+                ControllerTestUtils.buildExpectedResult(cloudRegionInfos);\n+\n+        final String actual= mvcResult.getResponse().getContentAsString();\n+        Assert.assertTrue(StringUtils.isNotBlank(actual));\n+        Assertions.assertThat(actual).isEqualToIgnoringWhitespace(getObjectMapper().writeValueAsString(expectedResult));\n+\n+        final Result<List<AbstractCloudRegion>> actualResult =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fc1f53ace3a35ac810c265a79386d99c9451ec"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMzI2NDEw", "url": "https://github.com/epam/cloud-pipeline/pull/1449#pullrequestreview-500326410", "createdAt": "2020-10-01T13:07:20Z", "commit": {"oid": "cd1167ee7a9470cf2122e42a02e3a0cc48778b8d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzowNzoyMFrOHbJgHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzowODo1OFrOHbJkUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyOTI3OQ==", "bodyText": "Could you please replace constructor creation with @NoArgsConstructor?", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r498229279", "createdAt": "2020-10-01T13:07:20Z", "author": {"login": "ekazachkova"}, "path": "api/src/main/java/com/epam/pipeline/entity/info/CloudRegionInfo.java", "diffHunk": "@@ -18,15 +18,19 @@\n \n import com.epam.pipeline.entity.region.AbstractCloudRegion;\n import com.epam.pipeline.entity.region.CloudProvider;\n-import lombok.Value;\n+import lombok.Data;\n \n-@Value\n+@Data\n public class CloudRegionInfo {\n \n-    private final Long id;\n-    private final String name;\n-    private final CloudProvider provider;\n-    private final String regionId;\n+    private Long id;\n+    private String name;\n+    private CloudProvider provider;\n+    private String regionId;\n+\n+    public CloudRegionInfo() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1167ee7a9470cf2122e42a02e3a0cc48778b8d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIzMDM1NA==", "bodyText": "Are this constants shall be public?", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r498230354", "createdAt": "2020-10-01T13:08:58Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/region/CloudRegionControllerTest.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.region;\n+\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionApiService;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = CloudRegionController.class)\n+public class CloudRegionControllerTest extends AbstractControllerTest {\n+\n+    public static final long ID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1167ee7a9470cf2122e42a02e3a0cc48778b8d"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNTYwNTg2", "url": "https://github.com/epam/cloud-pipeline/pull/1449#pullrequestreview-500560586", "createdAt": "2020-10-01T17:18:29Z", "commit": {"oid": "b074eac4f66c8d66f329f451df1b0968b9e3215f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNzQ3NzQ5", "url": "https://github.com/epam/cloud-pipeline/pull/1449#pullrequestreview-502747749", "createdAt": "2020-10-06T09:23:57Z", "commit": {"oid": "b074eac4f66c8d66f329f451df1b0968b9e3215f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDIwMTcx", "url": "https://github.com/epam/cloud-pipeline/pull/1449#pullrequestreview-504020171", "createdAt": "2020-10-07T15:44:07Z", "commit": {"oid": "3f3427f566509ccc2d95175594321ecead889311"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo0NDowOFrOHd5yOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoxNDowN1rOHd7HEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExNzQ5Nw==", "bodyText": "Could you please move constants to fields as much as it possible to avoid magic values?\nDo not forget to add final", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r501117497", "createdAt": "2020-10-07T15:44:08Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/region/RegionCreatorUtils.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AzureRegionDTO;\n+import com.epam.pipeline.controller.vo.region.GCPRegionDTO;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.AzurePolicy;\n+import com.epam.pipeline.entity.region.AzureRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.entity.region.GCPCustomInstanceType;\n+import com.epam.pipeline.entity.region.GCPRegion;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public final class RegionCreatorUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3427f566509ccc2d95175594321ecead889311"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzOTIxNg==", "bodyText": "In general, I see no point to use argument captor here and elsewhere in this class. But if for some reasons it necessary let's discuss it.", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r501139216", "createdAt": "2020-10-07T16:14:07Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/region/CloudRegionControllerTest.java", "diffHunk": "@@ -0,0 +1,514 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.region;\n+\n+import com.epam.pipeline.controller.vo.region.AzureRegionDTO;\n+import com.epam.pipeline.controller.vo.region.GCPRegionDTO;\n+import com.epam.pipeline.entity.region.AzureRegion;\n+import com.epam.pipeline.entity.region.GCPRegion;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionApiService;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = CloudRegionController.class)\n+public class CloudRegionControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final String REGION_URL = SERVLET_PATH + \"/cloud/region\";\n+    private static final String LOAD_PROVIDERS_URL = REGION_URL + \"/provider\";\n+    private static final String LOAD_REGIONS_INFO_URL = REGION_URL + \"/info\";\n+    private static final String LOAD_AVAILABLE_REGIONS_URL = REGION_URL + \"/available\";\n+    private static final String REGION_ID_URL = REGION_URL + \"/%d\";\n+    private AwsRegion awsRegion;\n+    private AWSRegionDTO awsRegionDTO;\n+    private AzureRegion azureRegion;\n+    private AzureRegionDTO azureRegionDTO;\n+    private GCPRegion gcpRegion;\n+    private GCPRegionDTO gcpRegionDTO;\n+    private ResponseResult<AwsRegion> expectedAwsRegionResult;\n+    private ResponseResult<AzureRegion> expectedAzureResult;\n+    private ResponseResult<GCPRegion> expectedGcpResult;\n+\n+    @Autowired\n+    private CloudRegionApiService mockCloudRegionApiService;\n+\n+    @Before\n+    public void setUp() {\n+        awsRegion = RegionCreatorUtils.getDefaultAwsRegion();\n+        azureRegion = RegionCreatorUtils.getDefaultAzureRegion();\n+        gcpRegion = RegionCreatorUtils.getDefaultGcpRegion();\n+\n+        awsRegionDTO = RegionCreatorUtils.getDefaultAwsRegionDTO();\n+        azureRegionDTO = RegionCreatorUtils.getDefaultAzureRegionDTO();\n+        gcpRegionDTO = RegionCreatorUtils.getDefaultGcpRegionDTO();\n+\n+        expectedAwsRegionResult = ControllerTestUtils.buildExpectedResult(awsRegion);\n+        expectedAzureResult = ControllerTestUtils.buildExpectedResult(azureRegion);\n+        expectedGcpResult = ControllerTestUtils.buildExpectedResult(gcpRegion);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadProvidersForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(LOAD_PROVIDERS_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadProviders() throws Exception {\n+        final List<CloudProvider> cloudProviders = Collections.singletonList(CloudProvider.AWS);\n+\n+        Mockito.doReturn(cloudProviders).when(mockCloudRegionApiService).loadProviders();\n+\n+        final MvcResult mvcResult = mvc().perform(get(LOAD_PROVIDERS_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockCloudRegionApiService).loadProviders();\n+\n+        final ResponseResult<List<CloudProvider>> expectedResult =\n+                ControllerTestUtils.buildExpectedResult(cloudProviders);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,\n+                new TypeReference<Result<List<CloudProvider>>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(REGION_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAll() throws Exception {\n+        final List<AwsRegion> cloudRegions = Collections.singletonList(awsRegion);\n+\n+        Mockito.doReturn(cloudRegions).when(mockCloudRegionApiService).loadAll();\n+\n+        final MvcResult mvcResult = mvc().perform(get(REGION_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockCloudRegionApiService).loadAll();\n+\n+        final ResponseResult<List<AwsRegion>> expectedResult =\n+                ControllerTestUtils.buildExpectedResult(cloudRegions);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,\n+                new TypeReference<Result<List<AwsRegion>>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllRegionsInfoForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(LOAD_REGIONS_INFO_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAllRegionsInfo() throws Exception {\n+        final CloudRegionInfo awsRegionInfo = new CloudRegionInfo(awsRegion);\n+        final List<CloudRegionInfo> cloudRegionInfos = Collections.singletonList(awsRegionInfo);\n+\n+        Mockito.doReturn(cloudRegionInfos).when(mockCloudRegionApiService).loadAllRegionsInfo();\n+\n+        final MvcResult mvcResult = mvc().perform(get(LOAD_REGIONS_INFO_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockCloudRegionApiService).loadAllRegionsInfo();\n+\n+        final ResponseResult<List<CloudRegionInfo>> expectedResult =\n+                ControllerTestUtils.buildExpectedResult(cloudRegionInfos);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,\n+                new TypeReference<Result<List<CloudRegionInfo>>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailLoadForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(String.format(REGION_ID_URL, ID))\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAwsRegionById() throws Exception{\n+        Mockito.doReturn(awsRegion).when(mockCloudRegionApiService).load(ID);\n+\n+        final MvcResult mvcResult = mvc().perform(get(String.format(REGION_ID_URL, ID))\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        final ArgumentCaptor<Long> longCaptor = ArgumentCaptor.forClass(Long.class);\n+        Mockito.verify(mockCloudRegionApiService).load(longCaptor.capture());\n+        Assertions.assertThat(longCaptor.getValue()).isEqualTo(ID);\n+\n+        Mockito.verify(mockCloudRegionApiService).load(ID);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedAwsRegionResult,\n+                new TypeReference<Result<AwsRegion>>() { });\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAzureRegionById() throws Exception{\n+        Mockito.doReturn(azureRegion).when(mockCloudRegionApiService).load(ID);\n+\n+        final MvcResult mvcResult = mvc().perform(get(String.format(REGION_ID_URL, ID))\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        final ArgumentCaptor<Long> longCaptor = ArgumentCaptor.forClass(Long.class);\n+        Mockito.verify(mockCloudRegionApiService).load(longCaptor.capture());\n+        Assertions.assertThat(longCaptor.getValue()).isEqualTo(ID);\n+\n+        Mockito.verify(mockCloudRegionApiService).load(ID);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedAzureResult,\n+                new TypeReference<Result<AzureRegion>>() { });\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadGcpRegionById() throws Exception{\n+        Mockito.doReturn(gcpRegion).when(mockCloudRegionApiService).load(ID);\n+\n+        final MvcResult mvcResult = mvc().perform(get(String.format(REGION_ID_URL, ID))\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        final ArgumentCaptor<Long> longCaptor = ArgumentCaptor.forClass(Long.class);\n+        Mockito.verify(mockCloudRegionApiService).load(longCaptor.capture());\n+        Assertions.assertThat(longCaptor.getValue()).isEqualTo(ID);\n+\n+        Mockito.verify(mockCloudRegionApiService).load(ID);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedGcpResult,\n+                new TypeReference<Result<GCPRegion>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllAvailableRegionsForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(LOAD_AVAILABLE_REGIONS_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAllAvailableRegions() throws Exception {\n+        final List<String> regions = Collections.singletonList(\"testRegion\");\n+        Mockito.doReturn(regions).when(mockCloudRegionApiService).loadAllAvailable(CloudProvider.AWS);\n+\n+        final MvcResult mvcResult = mvc().perform(get(LOAD_AVAILABLE_REGIONS_URL)\n+                .param(\"provider\", CloudProvider.AWS.name())\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        final ArgumentCaptor<CloudProvider> cloudProviderCaptor = ArgumentCaptor.forClass(CloudProvider.class);\n+        Mockito.verify(mockCloudRegionApiService).loadAllAvailable(cloudProviderCaptor.capture());\n+        Assertions.assertThat(cloudProviderCaptor.getValue()).isEqualTo(CloudProvider.AWS);\n+\n+        Mockito.verify(mockCloudRegionApiService).loadAllAvailable(CloudProvider.AWS);\n+\n+        final ResponseResult<List<String>> expectedResult = ControllerTestUtils.buildExpectedResult(regions);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,\n+                new TypeReference<Result<List<String>>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailCreateForUnauthorizedUser() throws Exception {\n+        mvc().perform(post(REGION_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCreateAwsRegion() throws Exception {\n+        Mockito.doReturn(awsRegion).when(mockCloudRegionApiService).create(Mockito.refEq(awsRegionDTO));\n+\n+        final MvcResult mvcResult = mvc().perform(post(REGION_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(getObjectMapper().writeValueAsString(awsRegionDTO)))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        final ArgumentCaptor<AWSRegionDTO> awsRegionDTOCaptor = ArgumentCaptor.forClass(AWSRegionDTO.class);\n+        Mockito.verify(mockCloudRegionApiService).create(awsRegionDTOCaptor.capture());\n+        Assertions.assertThat(awsRegionDTOCaptor.getValue()).isEqualToComparingFieldByField(awsRegionDTO);\n+\n+        Mockito.verify(mockCloudRegionApiService).create(Mockito.refEq(awsRegionDTO));\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedAwsRegionResult,\n+                new TypeReference<Result<AwsRegion>>() { });\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCreateAzureRegion() throws Exception {\n+        Mockito.doReturn(azureRegion).when(mockCloudRegionApiService).create(Mockito.refEq(azureRegionDTO));\n+\n+        final MvcResult mvcResult = mvc().perform(post(REGION_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(getObjectMapper().writeValueAsString(azureRegionDTO)))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        final ArgumentCaptor<AzureRegionDTO> azureRegionDTOCaptor = ArgumentCaptor.forClass(AzureRegionDTO.class);\n+        Mockito.verify(mockCloudRegionApiService).create(azureRegionDTOCaptor.capture());\n+        Assertions.assertThat(azureRegionDTOCaptor.getValue().getAuthFile())\n+                .isEqualTo(azureRegionDTO.getAuthFile());\n+\n+        Mockito.verify(mockCloudRegionApiService).create(Mockito.refEq(azureRegionDTO));\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedAzureResult,\n+                new TypeReference<Result<AzureRegion>>() { });\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCreateGcpRegion() throws Exception {\n+        Mockito.doReturn(gcpRegion).when(mockCloudRegionApiService).create(Mockito.refEq(gcpRegionDTO));\n+\n+        final MvcResult mvcResult = mvc().perform(post(REGION_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(getObjectMapper().writeValueAsString(gcpRegionDTO)))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        final ArgumentCaptor<GCPRegionDTO> gcpRegionDTOCaptor = ArgumentCaptor.forClass(GCPRegionDTO.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3427f566509ccc2d95175594321ecead889311"}, "originalPosition": 354}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f3427f566509ccc2d95175594321ecead889311", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/3f3427f566509ccc2d95175594321ecead889311", "committedDate": "2020-10-06T14:42:01Z", "message": "Issue #1405: Created RegionCreatorUtils, added tests for different CloudRegions"}, "afterCommit": {"oid": "f0ab3900701f60a72970e2d20bf7b1f6430c0ba6", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/f0ab3900701f60a72970e2d20bf7b1f6430c0ba6", "committedDate": "2020-10-09T09:55:54Z", "message": "Issue #1405: RegionCreatorUtils moved to creator package, created constant fields"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0ab3900701f60a72970e2d20bf7b1f6430c0ba6", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/f0ab3900701f60a72970e2d20bf7b1f6430c0ba6", "committedDate": "2020-10-09T09:55:54Z", "message": "Issue #1405: RegionCreatorUtils moved to creator package, created constant fields"}, "afterCommit": {"oid": "183e3deea861b11c422687ac26539d26931f833b", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/183e3deea861b11c422687ac26539d26931f833b", "committedDate": "2020-10-09T13:17:12Z", "message": "Issue #1405: Fixed CloudRegionApiService import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NzY2MTk0", "url": "https://github.com/epam/cloud-pipeline/pull/1449#pullrequestreview-506766194", "createdAt": "2020-10-12T16:33:33Z", "commit": {"oid": "183e3deea861b11c422687ac26539d26931f833b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjozMzozM1rOHgFqWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjozOTozNVrOHgF22g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwOTI0Mw==", "bodyText": "Maybe we should consider implementation common method to avoid such routine? Also, it would be grate to add same method for unauthorized case.", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r503409243", "createdAt": "2020-10-12T16:33:33Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/region/CloudRegionControllerTest.java", "diffHunk": "@@ -0,0 +1,460 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.region;\n+\n+import com.epam.pipeline.acl.region.CloudRegionApiService;\n+import com.epam.pipeline.controller.vo.region.AzureRegionDTO;\n+import com.epam.pipeline.controller.vo.region.GCPRegionDTO;\n+import com.epam.pipeline.entity.region.AzureRegion;\n+import com.epam.pipeline.entity.region.GCPRegion;\n+import com.epam.pipeline.test.creator.region.RegionCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = CloudRegionController.class)\n+public class CloudRegionControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final String TEST_STRING = \"TEST\";\n+    private static final String REGION_URL = SERVLET_PATH + \"/cloud/region\";\n+    private static final String LOAD_PROVIDERS_URL = REGION_URL + \"/provider\";\n+    private static final String LOAD_REGIONS_INFO_URL = REGION_URL + \"/info\";\n+    private static final String LOAD_AVAILABLE_REGIONS_URL = REGION_URL + \"/available\";\n+    private static final String REGION_ID_URL = REGION_URL + \"/%d\";\n+    private AwsRegion awsRegion;\n+    private AWSRegionDTO awsRegionDTO;\n+    private AzureRegion azureRegion;\n+    private AzureRegionDTO azureRegionDTO;\n+    private GCPRegion gcpRegion;\n+    private GCPRegionDTO gcpRegionDTO;\n+    private ResponseResult<AwsRegion> expectedAwsRegionResult;\n+    private ResponseResult<AzureRegion> expectedAzureResult;\n+    private ResponseResult<GCPRegion> expectedGcpResult;\n+\n+    @Autowired\n+    private CloudRegionApiService mockCloudRegionApiService;\n+\n+    @Before\n+    public void setUp() {\n+        awsRegion = RegionCreatorUtils.getDefaultAwsRegion();\n+        azureRegion = RegionCreatorUtils.getDefaultAzureRegion();\n+        gcpRegion = RegionCreatorUtils.getDefaultGcpRegion();\n+\n+        awsRegionDTO = RegionCreatorUtils.getDefaultAwsRegionDTO();\n+        azureRegionDTO = RegionCreatorUtils.getDefaultAzureRegionDTO();\n+        gcpRegionDTO = RegionCreatorUtils.getDefaultGcpRegionDTO();\n+\n+        expectedAwsRegionResult = ControllerTestUtils.buildExpectedResult(awsRegion);\n+        expectedAzureResult = ControllerTestUtils.buildExpectedResult(azureRegion);\n+        expectedGcpResult = ControllerTestUtils.buildExpectedResult(gcpRegion);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadProvidersForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(LOAD_PROVIDERS_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadProviders() throws Exception {\n+        final List<CloudProvider> cloudProviders = Collections.singletonList(CloudProvider.AWS);\n+\n+        Mockito.doReturn(cloudProviders).when(mockCloudRegionApiService).loadProviders();\n+\n+        final MvcResult mvcResult = mvc().perform(get(LOAD_PROVIDERS_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockCloudRegionApiService).loadProviders();\n+\n+        final ResponseResult<List<CloudProvider>> expectedResult =\n+                ControllerTestUtils.buildExpectedResult(cloudProviders);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,\n+                new TypeReference<Result<List<CloudProvider>>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(REGION_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAll() throws Exception {\n+        final List<AwsRegion> cloudRegions = Collections.singletonList(awsRegion);\n+\n+        Mockito.doReturn(cloudRegions).when(mockCloudRegionApiService).loadAll();\n+\n+        final MvcResult mvcResult = mvc().perform(get(REGION_URL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "183e3deea861b11c422687ac26539d26931f833b"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQxMjQ0Mg==", "bodyText": "Could we move it to class fields to reuse? (new TypeReference<Result<List<AwsRegion>>>() { })", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r503412442", "createdAt": "2020-10-12T16:39:35Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/region/CloudRegionControllerTest.java", "diffHunk": "@@ -0,0 +1,460 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.region;\n+\n+import com.epam.pipeline.acl.region.CloudRegionApiService;\n+import com.epam.pipeline.controller.vo.region.AzureRegionDTO;\n+import com.epam.pipeline.controller.vo.region.GCPRegionDTO;\n+import com.epam.pipeline.entity.region.AzureRegion;\n+import com.epam.pipeline.entity.region.GCPRegion;\n+import com.epam.pipeline.test.creator.region.RegionCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = CloudRegionController.class)\n+public class CloudRegionControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final String TEST_STRING = \"TEST\";\n+    private static final String REGION_URL = SERVLET_PATH + \"/cloud/region\";\n+    private static final String LOAD_PROVIDERS_URL = REGION_URL + \"/provider\";\n+    private static final String LOAD_REGIONS_INFO_URL = REGION_URL + \"/info\";\n+    private static final String LOAD_AVAILABLE_REGIONS_URL = REGION_URL + \"/available\";\n+    private static final String REGION_ID_URL = REGION_URL + \"/%d\";\n+    private AwsRegion awsRegion;\n+    private AWSRegionDTO awsRegionDTO;\n+    private AzureRegion azureRegion;\n+    private AzureRegionDTO azureRegionDTO;\n+    private GCPRegion gcpRegion;\n+    private GCPRegionDTO gcpRegionDTO;\n+    private ResponseResult<AwsRegion> expectedAwsRegionResult;\n+    private ResponseResult<AzureRegion> expectedAzureResult;\n+    private ResponseResult<GCPRegion> expectedGcpResult;\n+\n+    @Autowired\n+    private CloudRegionApiService mockCloudRegionApiService;\n+\n+    @Before\n+    public void setUp() {\n+        awsRegion = RegionCreatorUtils.getDefaultAwsRegion();\n+        azureRegion = RegionCreatorUtils.getDefaultAzureRegion();\n+        gcpRegion = RegionCreatorUtils.getDefaultGcpRegion();\n+\n+        awsRegionDTO = RegionCreatorUtils.getDefaultAwsRegionDTO();\n+        azureRegionDTO = RegionCreatorUtils.getDefaultAzureRegionDTO();\n+        gcpRegionDTO = RegionCreatorUtils.getDefaultGcpRegionDTO();\n+\n+        expectedAwsRegionResult = ControllerTestUtils.buildExpectedResult(awsRegion);\n+        expectedAzureResult = ControllerTestUtils.buildExpectedResult(azureRegion);\n+        expectedGcpResult = ControllerTestUtils.buildExpectedResult(gcpRegion);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadProvidersForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(LOAD_PROVIDERS_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadProviders() throws Exception {\n+        final List<CloudProvider> cloudProviders = Collections.singletonList(CloudProvider.AWS);\n+\n+        Mockito.doReturn(cloudProviders).when(mockCloudRegionApiService).loadProviders();\n+\n+        final MvcResult mvcResult = mvc().perform(get(LOAD_PROVIDERS_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockCloudRegionApiService).loadProviders();\n+\n+        final ResponseResult<List<CloudProvider>> expectedResult =\n+                ControllerTestUtils.buildExpectedResult(cloudProviders);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,\n+                new TypeReference<Result<List<CloudProvider>>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(REGION_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAll() throws Exception {\n+        final List<AwsRegion> cloudRegions = Collections.singletonList(awsRegion);\n+\n+        Mockito.doReturn(cloudRegions).when(mockCloudRegionApiService).loadAll();\n+\n+        final MvcResult mvcResult = mvc().perform(get(REGION_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockCloudRegionApiService).loadAll();\n+\n+        final ResponseResult<List<AwsRegion>> expectedResult =\n+                ControllerTestUtils.buildExpectedResult(cloudRegions);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,\n+                new TypeReference<Result<List<AwsRegion>>>() { });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "183e3deea861b11c422687ac26539d26931f833b"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MDcwOTk4", "url": "https://github.com/epam/cloud-pipeline/pull/1449#pullrequestreview-507070998", "createdAt": "2020-10-13T05:04:28Z", "commit": {"oid": "183e3deea861b11c422687ac26539d26931f833b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTowNDoyOFrOHgVf7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzozODo0MFrOHgZV-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2ODcxNw==", "bodyText": "Let's get rid of the setUp method and move all the assignments right to the declarations to keep everything simple.\npublic class CloudRegionControllerTest extends AbstractControllerTest {\n    ...\n    private final AwsRegion awsRegion = RegionCreatorUtils.getDefaultAwsRegion();\n    ...\n}", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r503668717", "createdAt": "2020-10-13T05:04:28Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/region/CloudRegionControllerTest.java", "diffHunk": "@@ -0,0 +1,460 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.region;\n+\n+import com.epam.pipeline.acl.region.CloudRegionApiService;\n+import com.epam.pipeline.controller.vo.region.AzureRegionDTO;\n+import com.epam.pipeline.controller.vo.region.GCPRegionDTO;\n+import com.epam.pipeline.entity.region.AzureRegion;\n+import com.epam.pipeline.entity.region.GCPRegion;\n+import com.epam.pipeline.test.creator.region.RegionCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = CloudRegionController.class)\n+public class CloudRegionControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final String TEST_STRING = \"TEST\";\n+    private static final String REGION_URL = SERVLET_PATH + \"/cloud/region\";\n+    private static final String LOAD_PROVIDERS_URL = REGION_URL + \"/provider\";\n+    private static final String LOAD_REGIONS_INFO_URL = REGION_URL + \"/info\";\n+    private static final String LOAD_AVAILABLE_REGIONS_URL = REGION_URL + \"/available\";\n+    private static final String REGION_ID_URL = REGION_URL + \"/%d\";\n+    private AwsRegion awsRegion;\n+    private AWSRegionDTO awsRegionDTO;\n+    private AzureRegion azureRegion;\n+    private AzureRegionDTO azureRegionDTO;\n+    private GCPRegion gcpRegion;\n+    private GCPRegionDTO gcpRegionDTO;\n+    private ResponseResult<AwsRegion> expectedAwsRegionResult;\n+    private ResponseResult<AzureRegion> expectedAzureResult;\n+    private ResponseResult<GCPRegion> expectedGcpResult;\n+\n+    @Autowired\n+    private CloudRegionApiService mockCloudRegionApiService;\n+\n+    @Before\n+    public void setUp() {\n+        awsRegion = RegionCreatorUtils.getDefaultAwsRegion();\n+        azureRegion = RegionCreatorUtils.getDefaultAzureRegion();\n+        gcpRegion = RegionCreatorUtils.getDefaultGcpRegion();\n+\n+        awsRegionDTO = RegionCreatorUtils.getDefaultAwsRegionDTO();\n+        azureRegionDTO = RegionCreatorUtils.getDefaultAzureRegionDTO();\n+        gcpRegionDTO = RegionCreatorUtils.getDefaultGcpRegionDTO();\n+\n+        expectedAwsRegionResult = ControllerTestUtils.buildExpectedResult(awsRegion);\n+        expectedAzureResult = ControllerTestUtils.buildExpectedResult(azureRegion);\n+        expectedGcpResult = ControllerTestUtils.buildExpectedResult(gcpRegion);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "183e3deea861b11c422687ac26539d26931f833b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMTcwNQ==", "bodyText": "It looks like all the calls to ControllerTestUtils.assertResponse in this test class as well as all the others have the same second argument. Moreover in order to use assertResponse expected result should be built beforehand using ControllerTestUtils.buildExpectedResult method.\nI suppose we can introduce overloaded ControllerTestUtils.assertResponse method with only three arguments which builds expected result and compares it with an actual result. In order to do that ControllerTestUtils can be transformed to a regular bean.\nWhat do you think @ekazachkova? Does it worth trying?", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r503731705", "createdAt": "2020-10-13T07:38:40Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/region/CloudRegionControllerTest.java", "diffHunk": "@@ -0,0 +1,460 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.region;\n+\n+import com.epam.pipeline.acl.region.CloudRegionApiService;\n+import com.epam.pipeline.controller.vo.region.AzureRegionDTO;\n+import com.epam.pipeline.controller.vo.region.GCPRegionDTO;\n+import com.epam.pipeline.entity.region.AzureRegion;\n+import com.epam.pipeline.entity.region.GCPRegion;\n+import com.epam.pipeline.test.creator.region.RegionCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = CloudRegionController.class)\n+public class CloudRegionControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final String TEST_STRING = \"TEST\";\n+    private static final String REGION_URL = SERVLET_PATH + \"/cloud/region\";\n+    private static final String LOAD_PROVIDERS_URL = REGION_URL + \"/provider\";\n+    private static final String LOAD_REGIONS_INFO_URL = REGION_URL + \"/info\";\n+    private static final String LOAD_AVAILABLE_REGIONS_URL = REGION_URL + \"/available\";\n+    private static final String REGION_ID_URL = REGION_URL + \"/%d\";\n+    private AwsRegion awsRegion;\n+    private AWSRegionDTO awsRegionDTO;\n+    private AzureRegion azureRegion;\n+    private AzureRegionDTO azureRegionDTO;\n+    private GCPRegion gcpRegion;\n+    private GCPRegionDTO gcpRegionDTO;\n+    private ResponseResult<AwsRegion> expectedAwsRegionResult;\n+    private ResponseResult<AzureRegion> expectedAzureResult;\n+    private ResponseResult<GCPRegion> expectedGcpResult;\n+\n+    @Autowired\n+    private CloudRegionApiService mockCloudRegionApiService;\n+\n+    @Before\n+    public void setUp() {\n+        awsRegion = RegionCreatorUtils.getDefaultAwsRegion();\n+        azureRegion = RegionCreatorUtils.getDefaultAzureRegion();\n+        gcpRegion = RegionCreatorUtils.getDefaultGcpRegion();\n+\n+        awsRegionDTO = RegionCreatorUtils.getDefaultAwsRegionDTO();\n+        azureRegionDTO = RegionCreatorUtils.getDefaultAzureRegionDTO();\n+        gcpRegionDTO = RegionCreatorUtils.getDefaultGcpRegionDTO();\n+\n+        expectedAwsRegionResult = ControllerTestUtils.buildExpectedResult(awsRegion);\n+        expectedAzureResult = ControllerTestUtils.buildExpectedResult(azureRegion);\n+        expectedGcpResult = ControllerTestUtils.buildExpectedResult(gcpRegion);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadProvidersForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(LOAD_PROVIDERS_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadProviders() throws Exception {\n+        final List<CloudProvider> cloudProviders = Collections.singletonList(CloudProvider.AWS);\n+\n+        Mockito.doReturn(cloudProviders).when(mockCloudRegionApiService).loadProviders();\n+\n+        final MvcResult mvcResult = mvc().perform(get(LOAD_PROVIDERS_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockCloudRegionApiService).loadProviders();\n+\n+        final ResponseResult<List<CloudProvider>> expectedResult =\n+                ControllerTestUtils.buildExpectedResult(cloudProviders);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "183e3deea861b11c422687ac26539d26931f833b"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MjU3ODk5", "url": "https://github.com/epam/cloud-pipeline/pull/1449#pullrequestreview-508257899", "createdAt": "2020-10-14T11:42:08Z", "commit": {"oid": "ffd2eb10f613520d9c3bbc48e84b7ca3306f22f0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMTo0MjowOFrOHhO5zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjoxNDoyOFrOHhP_cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwOTIyOQ==", "bodyText": "Let's remove ControllerTestUtils class and place all it's methods to  AbstractControllerTest", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r504609229", "createdAt": "2020-10-14T11:42:08Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java", "diffHunk": "@@ -59,12 +55,16 @@\n                                                 \"\\\"loadDetails\\\":true,\" +\n                                                 \"\\\"pageSize\\\":5,\" +\n                                                 \"\\\"pageNum\\\":1}\";\n+    private static final MultiValueMap<String, String> EMPTY_PARAMS = new LinkedMultiValueMap<>();\n     private BillingChartRequest billingChartRequest;\n     private List<BillingChartInfo> billingChartInfos;\n \n     @Autowired\n     private BillingApiService mockBillingApiService;\n \n+    @Autowired\n+    private ControllerTestUtils controllerTestUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd2eb10f613520d9c3bbc48e84b7ca3306f22f0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxMTQ1OA==", "bodyText": "Could you please pass request to method arguments (to my mind it would be more flexible):\npublic void performUnauthorizedRequest(final MockHttpServletRequestBuilder requestBuilder) throws Exception {\n        mvc.perform(requestBuilder\n                .servletPath(SERVLET_PATH))\n                .andExpect(status().isUnauthorized());\n    }\n\nThis way the method calling will be:\ncontrollerTestUtils.performUnauthorizedRequest(post(GET_BILLING_CHART_INFO_URL));", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r504611458", "createdAt": "2020-10-14T11:46:15Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java", "diffHunk": "@@ -80,38 +80,26 @@ public void setUp() {\n \n     @Test\n     public void shouldFailGetBillingChartInfoForUnauthorizedUser() throws Exception {\n-        mvc().perform(post(GET_BILLING_CHART_INFO_URL)\n-                .servletPath(SERVLET_PATH))\n-                .andExpect(status().isUnauthorized());\n+        controllerTestUtils.postRequestUnauthorized(mvc(), GET_BILLING_CHART_INFO_URL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd2eb10f613520d9c3bbc48e84b7ca3306f22f0"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyMzMxMw==", "bodyText": "Could you please pass request to method arguments (to my mind it would be more flexible):\npublic MvcResult performRequest(final MockHttpServletRequestBuilder requestBuilder) throws Exception {\n        return mvc.perform(requestBuilder\n                .servletPath(SERVLET_PATH)\n                .contentType(CONTENT_TYPE))\n                .andExpect(status().isOk())\n                .andExpect(MockMvcResultMatchers.content().contentType(CONTENT_TYPE))\n                .andReturn();\n    }\n\nThis way the method calling will be:\nfinal MvcResult mvcResult = controllerTestUtils\n                .performRequest(post(GET_BILLING_CHART_INFO_URL)\n                        .content(REQUEST_JSON));", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r504623313", "createdAt": "2020-10-14T12:07:53Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java", "diffHunk": "@@ -80,38 +80,26 @@ public void setUp() {\n \n     @Test\n     public void shouldFailGetBillingChartInfoForUnauthorizedUser() throws Exception {\n-        mvc().perform(post(GET_BILLING_CHART_INFO_URL)\n-                .servletPath(SERVLET_PATH))\n-                .andExpect(status().isUnauthorized());\n+        controllerTestUtils.postRequestUnauthorized(mvc(), GET_BILLING_CHART_INFO_URL);\n     }\n \n     @Test\n     @WithMockUser\n     public void shouldReturnBillingChartInfo() throws Exception {\n         Mockito.doReturn(billingChartInfos).when(mockBillingApiService).getBillingChartInfo(billingChartRequest);\n \n-        final MvcResult mvcResult = mvc().perform(post(GET_BILLING_CHART_INFO_URL)\n-                .servletPath(SERVLET_PATH)\n-                .contentType(EXPECTED_CONTENT_TYPE)\n-                .content(REQUEST_JSON))\n-                .andExpect(status().isOk())\n-                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n-                .andReturn();\n+        final MvcResult mvcResult = controllerTestUtils", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd2eb10f613520d9c3bbc48e84b7ca3306f22f0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyNDMxMA==", "bodyText": "Could you move it to class fields?", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r504624310", "createdAt": "2020-10-14T12:09:44Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java", "diffHunk": "@@ -151,18 +129,11 @@ public void shouldGetAllBillingCenters() throws Exception {\n \n         Mockito.doReturn(centers).when(mockBillingApiService).getAllBillingCenters();\n \n-        final MvcResult mvcResult = mvc().perform(get(GET_BILLING_CENTERS)\n-                .servletPath(SERVLET_PATH)\n-                .contentType(EXPECTED_CONTENT_TYPE))\n-                .andExpect(status().isOk())\n-                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n-                .andReturn();\n+        final MvcResult mvcResult = controllerTestUtils.getRequest(mvc(), GET_BILLING_CENTERS, EMPTY_PARAMS, \"\");\n \n         Mockito.verify(mockBillingApiService).getAllBillingCenters();\n \n-        final ResponseResult<List<String>> expectedResult = ControllerTestUtils.buildExpectedResult(centers);\n-\n-        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,\n+        controllerTestUtils.assertResponse(mvcResult, centers,\n                 new TypeReference<Result<List<String>>>() { });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd2eb10f613520d9c3bbc48e84b7ca3306f22f0"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyNzA1OQ==", "bodyText": "I would prefer to use constructor injection. (add @RequiredArgsConstructor and make fields public)", "url": "https://github.com/epam/cloud-pipeline/pull/1449#discussion_r504627059", "createdAt": "2020-10-14T12:14:28Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/util/ControllerTestUtils.java", "diffHunk": "@@ -21,33 +21,130 @@\n import com.epam.pipeline.controller.Result;\n import com.fasterxml.jackson.core.type.TypeReference;\n import org.apache.commons.lang3.StringUtils;\n+import org.junit.Assert;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MockMvc;\n import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+import org.springframework.util.MultiValueMap;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n \n-public final class ControllerTestUtils {\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n-    private ControllerTestUtils() {\n-    }\n+public class ControllerTestUtils {\n+\n+    private static final String SERVLET_PATH = \"/restapi\";\n+    private static final String CONTENT_TYPE = \"application/json;charset=UTF-8\";\n \n-    public static <T> ResponseResult<T> buildExpectedResult(final T payload) {\n+    @Autowired\n+    private JsonMapper jsonMapper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd2eb10f613520d9c3bbc48e84b7ca3306f22f0"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzM4ODYw", "url": "https://github.com/epam/cloud-pipeline/pull/1449#pullrequestreview-510338860", "createdAt": "2020-10-16T10:16:47Z", "commit": {"oid": "849d19bd8a4c0d73f57f9fede7e8e86cc9a167b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c72105f8a49be19f27f04d9a6e8eb97d2e42577e", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/c72105f8a49be19f27f04d9a6e8eb97d2e42577e", "committedDate": "2020-10-16T10:38:17Z", "message": "Issue #1405: Implemented tests for CloudRegionController"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c9c47821f5a60f344c9e43bdd4e46172f7ba3e9", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/7c9c47821f5a60f344c9e43bdd4e46172f7ba3e9", "committedDate": "2020-10-16T10:38:24Z", "message": "Issue #1405: Checkstyle fixes, CloudRegionInfo made mutable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d35c8b4bc088b297ab95fa68090caf82d7b35a71", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/d35c8b4bc088b297ab95fa68090caf82d7b35a71", "committedDate": "2020-10-16T10:38:24Z", "message": "Issue #1405: Constants scope changed, constructor replaced with lombok annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad3ada14762c9f7f574f8d14f5ec1fcf0de5f53d", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/ad3ada14762c9f7f574f8d14f5ec1fcf0de5f53d", "committedDate": "2020-10-16T10:38:24Z", "message": "Issue #1405: Created RegionCreatorUtils, added tests for different CloudRegions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e4af871794af90cec128d2b5c12e0d479779b05", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/7e4af871794af90cec128d2b5c12e0d479779b05", "committedDate": "2020-10-16T10:38:25Z", "message": "Issue #1405: Removed redundant ArgumentCaptor assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1c2d5824b97f46c178b77a9ce9297365a2b4eba", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/b1c2d5824b97f46c178b77a9ce9297365a2b4eba", "committedDate": "2020-10-16T10:38:25Z", "message": "Issue #1405: RegionCreatorUtils moved to creator package, created constant fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "076b147d0c981acdc7ab8144be60f1013cc2dda6", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/076b147d0c981acdc7ab8144be60f1013cc2dda6", "committedDate": "2020-10-16T10:38:25Z", "message": "Issue #1405: Fixed CloudRegionApiService import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b1b4850a05736c978412ce3ca47203c97b98ff4", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/2b1b4850a05736c978412ce3ca47203c97b98ff4", "committedDate": "2020-10-16T10:38:26Z", "message": "Issue #1405: ControllerTestUtils refactored, mock requests extracted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3238dce837134aed1056324e67bdc67875edf7a", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/f3238dce837134aed1056324e67bdc67875edf7a", "committedDate": "2020-10-16T10:38:26Z", "message": "Issue #1405: ControllerTestUtils methods moved to AbstractControllerTest, moved TypeReference creation to CreatorUtils"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "849d19bd8a4c0d73f57f9fede7e8e86cc9a167b1", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/849d19bd8a4c0d73f57f9fede7e8e86cc9a167b1", "committedDate": "2020-10-14T15:30:56Z", "message": "Issue #1405: ControllerTestUtils methods moved to AbstractControllerTest, moved TypeReference creation to CreatorUtils"}, "afterCommit": {"oid": "f3238dce837134aed1056324e67bdc67875edf7a", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/f3238dce837134aed1056324e67bdc67875edf7a", "committedDate": "2020-10-16T10:38:26Z", "message": "Issue #1405: ControllerTestUtils methods moved to AbstractControllerTest, moved TypeReference creation to CreatorUtils"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNDIwOTk5", "url": "https://github.com/epam/cloud-pipeline/pull/1449#pullrequestreview-510420999", "createdAt": "2020-10-16T12:27:33Z", "commit": {"oid": "f3238dce837134aed1056324e67bdc67875edf7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3788, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}