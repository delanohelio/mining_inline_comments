{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNTIxNjc2", "number": 1427, "title": "Issue #1426 System dictionaries", "bodyText": "This PR is related to issue #1426\nIt brings basic CRUD operations for managing such dictionaries and a routine to build such dictionaries based on a currently presented in the system metadata.", "createdAt": "2020-09-21T19:49:42Z", "url": "https://github.com/epam/cloud-pipeline/pull/1427", "merged": true, "mergeCommit": {"oid": "2fa0372da986fffecb32d0a11668a9dfe180bd4c"}, "closed": true, "closedAt": "2020-09-23T13:56:48Z", "author": {"login": "Wedds"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLIvN6gH2gAyNDkwNTIxNjc2OjM3NTg2MDlmZmM1Mjk3YmJmODIxYjNiZWVmNWVhOGUxNmYyZGU4Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLsLnpgH2gAyNDkwNTIxNjc2OjFlNjBiNjFkODE1ZDQ4NDY3ZWM2Y2JkYjMwNWViMjVlMGM3OTA2NzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3758609ffc5297bbf821b3beef5ea8e16f2de867", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/3758609ffc5297bbf821b3beef5ea8e16f2de867", "committedDate": "2020-09-21T19:41:13Z", "message": "Issue #1426 Categorical attributes CRUD operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95601a7d627bc01a5ddd4e83bff22bcfdb47690f", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/95601a7d627bc01a5ddd4e83bff22bcfdb47690f", "committedDate": "2020-09-21T19:41:40Z", "message": "Issue #1426 Categorical attributes DAO tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "949344f3bc84485318bedcc5f45e4b60817dcb12", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/949344f3bc84485318bedcc5f45e4b60817dcb12", "committedDate": "2020-09-21T19:41:53Z", "message": "Issue #1426 Implement synchronization of current metadata state into categorical attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a276419d168ef96c38a65195a8416b4ba44c16c", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/7a276419d168ef96c38a65195a8416b4ba44c16c", "committedDate": "2020-09-21T19:42:24Z", "message": "Issue #1426 Provide tests on the process of synchronization of the metadata into categorical attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/fb3f231e0338435460725fd4ae6a7109720e4f99", "committedDate": "2020-09-21T19:42:37Z", "message": "Issue #1426 Refactoring regarding code style and static analyzers violations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzkyMjY4", "url": "https://github.com/epam/cloud-pipeline/pull/1427#pullrequestreview-493392268", "createdAt": "2020-09-22T12:11:12Z", "commit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjoxMToxM1rOHV28vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjoyNToxM1rOHV3ctg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4MjQzMQ==", "bodyText": "Let's user @RestController and remove @responsebody from all methods", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492682431", "createdAt": "2020-09-22T12:11:13Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NjkxNA==", "bodyText": "I'd suggest to use common path /categoricalAttribute and do not add load/loadAll/delete/deleteValue suffixes. To distinguish load and loadAll we can use @GetMapping(params = { \"attributeKey\"}).", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492686914", "createdAt": "2020-09-22T12:19:08Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NzMwMA==", "bodyText": "I'd suggest to allow only one attributeKey for this method since we already have a method to loadAll. And let's move to path from request params", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492687300", "createdAt": "2020-09-22T12:19:47Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NzY0Nw==", "bodyText": "Let's move attributeKey to path", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492687647", "createdAt": "2020-09-22T12:20:15Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {\n+        return Result.success(categoricalAttributeApiService.loadAllValuesForKeys(attributeKeys));\n+    }\n+\n+    @DeleteMapping(\"/delete\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete all values for a requested attribute.\",\n+        notes = \"Delete all values for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAllAttributeValues(@RequestParam final String attributeKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4ODU0OA==", "bodyText": "Also, let's do not action to path and use params in DeleteMapping annotation", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492688548", "createdAt": "2020-09-22T12:21:43Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {\n+        return Result.success(categoricalAttributeApiService.loadAllValuesForKeys(attributeKeys));\n+    }\n+\n+    @DeleteMapping(\"/delete\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete all values for a requested attribute.\",\n+        notes = \"Delete all values for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAllAttributeValues(@RequestParam final String attributeKey) {\n+        return Result.success(categoricalAttributeApiService.deleteAttributeValues(attributeKey));\n+    }\n+\n+    @DeleteMapping(\"/deleteValue\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4ODg4Mw==", "bodyText": "Let's make it POST, since this request is not idempotent", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492688883", "createdAt": "2020-09-22T12:22:18Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {\n+        return Result.success(categoricalAttributeApiService.loadAllValuesForKeys(attributeKeys));\n+    }\n+\n+    @DeleteMapping(\"/delete\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete all values for a requested attribute.\",\n+        notes = \"Delete all values for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAllAttributeValues(@RequestParam final String attributeKey) {\n+        return Result.success(categoricalAttributeApiService.deleteAttributeValues(attributeKey));\n+    }\n+\n+    @DeleteMapping(\"/deleteValue\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete one specific value for a requested attribute.\",\n+        notes = \"Delete one specific value for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAttributeValue(@RequestParam final String attributeKey,\n+                                                @RequestParam final String value) {\n+        return Result.success(categoricalAttributeApiService.deleteAttributeValue(attributeKey, value));\n+    }\n+\n+    @GetMapping(\"/sync\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5MDYxNA==", "bodyText": "Let's introduce a separate class CategoricalAttribute and use it instead of Map<String, List<String, String>>. It will increase readability of the code and may be useful if decide to introduce more complex ACL permissions.", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492690614", "createdAt": "2020-09-22T12:25:13Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a99433b287fc85c76a97a632068e8b88257b1bea", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/a99433b287fc85c76a97a632068e8b88257b1bea", "committedDate": "2020-09-22T13:58:24Z", "message": "Issue #1426 Use correct annotation for controller and `POST` mapping for sync method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abbfc5b5927035e97c16467fd02f983d6b7c5fcd", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/abbfc5b5927035e97c16467fd02f983d6b7c5fcd", "committedDate": "2020-09-22T14:04:24Z", "message": "Issue #1426 Accept only one value, when loading values for a key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c51ae6b577370649813436bb3c223a99faaa12f0", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/c51ae6b577370649813436bb3c223a99faaa12f0", "committedDate": "2020-09-22T16:36:24Z", "message": "Issue #1426 Refactor endpoints URL format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3385feb1a00731600e9cd9c4518abb7c41ec5436", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/3385feb1a00731600e9cd9c4518abb7c41ec5436", "committedDate": "2020-09-22T16:36:25Z", "message": "Issue #1426 Introduce CategoricalAttribute entity to store system dictionaries values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04bc603a1962cf0a045aa7d784b3ce15213f74f1", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/04bc603a1962cf0a045aa7d784b3ce15213f74f1", "committedDate": "2020-09-22T16:49:53Z", "message": "Issue #1426 Add test on the conversion of string pairs to list of categorical attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1ebd5fdf79019fd2b3228d21eb743584ad46de5", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/e1ebd5fdf79019fd2b3228d21eb743584ad46de5", "committedDate": "2020-09-22T17:44:07Z", "message": "Issue #1426 Change the way of responding to requests, when trying to load a dictionary for a non-existent key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "501089eba5dd8074a3c033d7dee54688910aa8c4", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/501089eba5dd8074a3c033d7dee54688910aa8c4", "committedDate": "2020-09-22T17:34:51Z", "message": "Issue #1426 Change the way of responding to requests, when trying to load a dictionary for a non-existent key"}, "afterCommit": {"oid": "e1ebd5fdf79019fd2b3228d21eb743584ad46de5", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/e1ebd5fdf79019fd2b3228d21eb743584ad46de5", "committedDate": "2020-09-22T17:44:07Z", "message": "Issue #1426 Change the way of responding to requests, when trying to load a dictionary for a non-existent key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3caef30b53d8e0437382294a3816715ec2722f1", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/f3caef30b53d8e0437382294a3816715ec2722f1", "committedDate": "2020-09-23T10:39:11Z", "message": "Issue #1426 Unify endpoint for attribute values removal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NjE3Mzk4", "url": "https://github.com/epam/cloud-pipeline/pull/1427#pullrequestreview-494617398", "createdAt": "2020-09-23T12:42:55Z", "commit": {"oid": "f3caef30b53d8e0437382294a3816715ec2722f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjo0Mjo1NVrOHWrgoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMjo0Mjo1NVrOHWrgoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU0MzU4NQ==", "bodyText": "Could you please add issue number to sql file name?", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r493543585", "createdAt": "2020-09-23T12:42:55Z", "author": {"login": "mzueva"}, "path": "api/src/main/resources/db/migration/v2020.09.18_15.00__issue_values_dict_metadata.sql", "diffHunk": "@@ -0,0 +1,5 @@\n+CREATE TABLE IF NOT EXISTS pipeline.categorical_attributes(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3caef30b53d8e0437382294a3816715ec2722f1"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e60b61d815d48467ec6cbdb305eb25e0c790673", "author": {"user": {"login": "Wedds", "name": "Andrey Georgitsa"}}, "url": "https://github.com/epam/cloud-pipeline/commit/1e60b61d815d48467ec6cbdb305eb25e0c790673", "committedDate": "2020-09-23T12:58:55Z", "message": "Issue #1426 Fix naming for db migration file"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3773, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}