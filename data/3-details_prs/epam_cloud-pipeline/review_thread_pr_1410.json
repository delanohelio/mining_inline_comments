{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NTg3NzEx", "number": 1410, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTo0NTo0NVrOEkfvGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTo0NTo0NVrOEkfvGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzA0MTUyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ResourceMonitoringManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTo0NTo0NVrOHTeJTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTo0NTo0NVrOHTeJTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3ODg5NQ==", "bodyText": "Just stop is not enough in this case as paused instance will stay in the cloud: I'd suggest to use NodesManager.terminateNode method here.", "url": "https://github.com/epam/cloud-pipeline/pull/1410#discussion_r490178895", "createdAt": "2020-09-17T11:45:45Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ResourceMonitoringManager.java", "diffHunk": "@@ -434,5 +436,30 @@ public void updateInstanceMap(Map<String, InstanceType> types) {\n             instanceTypeMap.clear();\n             instanceTypeMap.putAll(types);\n         }\n+\n+        private void processLongPausedRuns() {\n+            final LongPausedRunAction action = LongPausedRunAction.valueOf(preferenceManager.getPreference(\n+                    SystemPreferences.SYSTEM_LONG_PAUSED_ACTION));\n+\n+            final List<PipelineRun> pausedRuns = pipelineRunManager\n+                    .loadRunsByStatuses(Collections.singletonList(TaskStatus.PAUSED)).stream()\n+                    .map(run -> pipelineRunManager.loadPipelineRunWithStatuses(run.getId()))\n+                    .collect(Collectors.toList());\n+\n+            processLongPausedRuns(pausedRuns, action);\n+        }\n+\n+        private void processLongPausedRuns(final List<PipelineRun> pausedRuns, final LongPausedRunAction action) {\n+            if (CollectionUtils.isEmpty(pausedRuns)) {\n+                return;\n+            }\n+\n+            if (LongPausedRunAction.STOP.equals(action)) {\n+                ListUtils.emptyIfNull(notificationManager.notifyLongPausedRunsBeforeStop(pausedRuns))\n+                        .forEach(run -> pipelineRunManager.stop(run.getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aedde9557551bfe1178b4fae0c80d3d7cb2e618d"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 371, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}