{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1Njc1ODMw", "number": 1591, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyNzowNFrOE9jFZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyNzowNFrOE9jFZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTczNDEzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/preference/PreferenceApiServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyNzowNFrOH6SuYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOToyNzowNFrOH6SuYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4NjI0Mg==", "bodyText": "Let's use PreferenceCreatorUtils.getPreference instead of constructor here.", "url": "https://github.com/epam/cloud-pipeline/pull/1591#discussion_r530886242", "createdAt": "2020-11-26T09:27:04Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/acl/preference/PreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.preference;\n+\n+import com.epam.pipeline.entity.preference.Preference;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.epam.pipeline.test.creator.preferences.PreferenceCreatorUtils.getPreference;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+\n+public class PreferenceApiServiceTest extends AbstractAclTest {\n+\n+    private final Preference preference = getPreference();\n+    private final List<Preference> preferenceList = Collections.singletonList(preference);\n+\n+    @Autowired\n+    private PreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private PreferenceManager mockPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Test\n+    public void shouldLoadAll() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+        doReturn(true).when(mockAuthManager).isAdmin();\n+\n+        assertThat(preferenceApiService.loadAll()).isEqualTo(preferenceList);\n+    }\n+\n+    @Test\n+    public void shouldLoadVisible() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadVisible();\n+\n+        assertThat(preferenceApiService.loadAll()).isEqualTo(preferenceList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdatePreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).update(preferenceList);\n+\n+        assertThat(preferenceApiService.update(preferenceList)).isEqualTo(preferenceList);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyUpdatePreferencesForNotAdmin() {\n+        assertThrows(AccessDeniedException.class, () -> preferenceApiService.update(preferenceList));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadPreferenceForAdmin() {\n+        doReturn(Optional.of(preference)).when(mockPreferenceManager).load(TEST_NAME);\n+\n+        assertThat(preferenceApiService.load(TEST_NAME)).isEqualTo(preference);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadVisiblePreferenceForNotAdmin() {\n+        final Preference visiblePreference = new Preference();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4c66c21dec3f7067e8eeb4554d225b72fd02c43"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 348, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}