{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzODYyMDAw", "number": 1261, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo1MzowM1rOEVwoBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo1MzoxOFrOEVwoSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjUyMjI4OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchClusterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo1MzowM1rOG8sqpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDozNjozOFrOG82dCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5OTU1Nw==", "bodyText": "Let's extract to constant, please", "url": "https://github.com/epam/cloud-pipeline/pull/1261#discussion_r466299557", "createdAt": "2020-08-06T09:53:03Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchClusterTest.java", "diffHunk": "@@ -421,6 +442,67 @@ public void hybridAutoScaledClusterCPUDeadlock() {\n                 .ensure(STATUS, text(String.valueOf(Integer.parseInt(getRunId()) + 1)));\n     }\n \n+    @Test\n+    @TestCase({\"EPMCMBIBPC-3153\"})\n+    public void hybridAutoScaledCluster() {\n+        String cpu = library()\n+                .createPipeline(Template.SHELL, getPipelineName())\n+                .clickOnPipeline(getPipelineName())\n+                .firstVersion()\n+                .runPipeline()\n+                .setDefaultLaunchOptions()\n+                .getCPU();\n+        onLaunchPage()\n+                .enableClusterLaunch()\n+                .clusterSettingsForm(autoScaledSettingForm)\n+                .enableHybridClusterSelect()\n+                .ok()\n+                .setCommand(String.format(\"qsub -b y -pe local %s sleep 15m && sleep infinity\", Integer.parseInt(cpu) + 1))\n+                .launch(this)\n+                .shouldContainRun(getPipelineName(), getRunId())\n+                .showLog(getRunId())\n+                .expandTab(PARAMETERS)\n+                .ensure(configurationParameter(\"CP_CAP_AUTOSCALE\", \"true\"), exist)\n+                .ensure(configurationParameter(\"CP_CAP_AUTOSCALE_WORKERS\", \"1\"), exist)\n+                .ensure(configurationParameter(\"CP_CAP_AUTOSCALE_HYBRID\", \"true\"), exist)\n+                .waitForSshLink()\n+                .ssh(shell -> shell\n+                        .execute(\"qhost\")\n+                        .assertOutputContains(\"HOSTNAME\", \"global\", String.format(\"%s-%s lx-amd64\",\n+                                getPipelineName().toLowerCase(), getRunId()))\n+                        .sleep(20, SECONDS)\n+                        .execute(\"qstat\")\n+                        .assertPageContains(\"sleep\", \" 1 \")\n+                        .assertPageContains(\"sleep\", \" qw \")\n+                        .assertPageContains(\"sleep\", String.format(\" %s \", Integer.parseInt(cpu) + 1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "416b226098610bbaf23e9a3d1a35ea06fcb3bc64"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1OTkxMg==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1261#discussion_r466459912", "createdAt": "2020-08-06T14:36:38Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchClusterTest.java", "diffHunk": "@@ -421,6 +442,67 @@ public void hybridAutoScaledClusterCPUDeadlock() {\n                 .ensure(STATUS, text(String.valueOf(Integer.parseInt(getRunId()) + 1)));\n     }\n \n+    @Test\n+    @TestCase({\"EPMCMBIBPC-3153\"})\n+    public void hybridAutoScaledCluster() {\n+        String cpu = library()\n+                .createPipeline(Template.SHELL, getPipelineName())\n+                .clickOnPipeline(getPipelineName())\n+                .firstVersion()\n+                .runPipeline()\n+                .setDefaultLaunchOptions()\n+                .getCPU();\n+        onLaunchPage()\n+                .enableClusterLaunch()\n+                .clusterSettingsForm(autoScaledSettingForm)\n+                .enableHybridClusterSelect()\n+                .ok()\n+                .setCommand(String.format(\"qsub -b y -pe local %s sleep 15m && sleep infinity\", Integer.parseInt(cpu) + 1))\n+                .launch(this)\n+                .shouldContainRun(getPipelineName(), getRunId())\n+                .showLog(getRunId())\n+                .expandTab(PARAMETERS)\n+                .ensure(configurationParameter(\"CP_CAP_AUTOSCALE\", \"true\"), exist)\n+                .ensure(configurationParameter(\"CP_CAP_AUTOSCALE_WORKERS\", \"1\"), exist)\n+                .ensure(configurationParameter(\"CP_CAP_AUTOSCALE_HYBRID\", \"true\"), exist)\n+                .waitForSshLink()\n+                .ssh(shell -> shell\n+                        .execute(\"qhost\")\n+                        .assertOutputContains(\"HOSTNAME\", \"global\", String.format(\"%s-%s lx-amd64\",\n+                                getPipelineName().toLowerCase(), getRunId()))\n+                        .sleep(20, SECONDS)\n+                        .execute(\"qstat\")\n+                        .assertPageContains(\"sleep\", \" 1 \")\n+                        .assertPageContains(\"sleep\", \" qw \")\n+                        .assertPageContains(\"sleep\", String.format(\" %s \", Integer.parseInt(cpu) + 1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5OTU1Nw=="}, "originalCommit": {"oid": "416b226098610bbaf23e9a3d1a35ea06fcb3bc64"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjUyMjk5OnYy", "diffSide": "RIGHT", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchClusterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo1MzoxOFrOG8srFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDozNjo0OFrOG82dlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5OTY3MA==", "bodyText": "The same as above", "url": "https://github.com/epam/cloud-pipeline/pull/1261#discussion_r466299670", "createdAt": "2020-08-06T09:53:18Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchClusterTest.java", "diffHunk": "@@ -421,6 +442,67 @@ public void hybridAutoScaledClusterCPUDeadlock() {\n                 .ensure(STATUS, text(String.valueOf(Integer.parseInt(getRunId()) + 1)));\n     }\n \n+    @Test\n+    @TestCase({\"EPMCMBIBPC-3153\"})\n+    public void hybridAutoScaledCluster() {\n+        String cpu = library()\n+                .createPipeline(Template.SHELL, getPipelineName())\n+                .clickOnPipeline(getPipelineName())\n+                .firstVersion()\n+                .runPipeline()\n+                .setDefaultLaunchOptions()\n+                .getCPU();\n+        onLaunchPage()\n+                .enableClusterLaunch()\n+                .clusterSettingsForm(autoScaledSettingForm)\n+                .enableHybridClusterSelect()\n+                .ok()\n+                .setCommand(String.format(\"qsub -b y -pe local %s sleep 15m && sleep infinity\", Integer.parseInt(cpu) + 1))\n+                .launch(this)\n+                .shouldContainRun(getPipelineName(), getRunId())\n+                .showLog(getRunId())\n+                .expandTab(PARAMETERS)\n+                .ensure(configurationParameter(\"CP_CAP_AUTOSCALE\", \"true\"), exist)\n+                .ensure(configurationParameter(\"CP_CAP_AUTOSCALE_WORKERS\", \"1\"), exist)\n+                .ensure(configurationParameter(\"CP_CAP_AUTOSCALE_HYBRID\", \"true\"), exist)\n+                .waitForSshLink()\n+                .ssh(shell -> shell\n+                        .execute(\"qhost\")\n+                        .assertOutputContains(\"HOSTNAME\", \"global\", String.format(\"%s-%s lx-amd64\",\n+                                getPipelineName().toLowerCase(), getRunId()))\n+                        .sleep(20, SECONDS)\n+                        .execute(\"qstat\")\n+                        .assertPageContains(\"sleep\", \" 1 \")\n+                        .assertPageContains(\"sleep\", \" qw \")\n+                        .assertPageContains(\"sleep\", String.format(\" %s \", Integer.parseInt(cpu) + 1))\n+                        .close());\n+        String nestedRunID = navigationMenu()\n+                                .runs()\n+                                .activeRuns()\n+                                .showLog(getRunId())\n+                                .waitForNestedRunsLink()\n+                                .getNestedRunID(1);\n+        runsMenu()\n+                .activeRuns()\n+                .showLog(getRunId())\n+                .clickOnNestedRunLink()\n+                .instanceParameters(instance ->\n+                        instance.ensure(TYPE, text(C.DEFAULT_INSTANCE.substring(0, C.DEFAULT_INSTANCE.indexOf(\".\"))))\n+                        .ensure(TYPE, not(text(C.DEFAULT_INSTANCE.substring(C.DEFAULT_INSTANCE.indexOf(\".\")))))\n+                )\n+                .waitForSshLink()\n+                .ssh(shell -> shell\n+                        .execute(\"qhost\")\n+                        .assertOutputContains(\"HOSTNAME\", \"global\", String.format(\"%s-%s lx-amd64\",\n+                                getPipelineName().toLowerCase(), getRunId()), String.format(\"pipeline-%s\",\n+                                nestedRunID))\n+                        .sleep(20, SECONDS)\n+                        .execute(\"qstat\")\n+                        .assertPageContains(\"sleep\", \" r \")\n+                        .assertPageContains(\"sleep\", String.format(\"main.q@pipeline-%s\", nestedRunID))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "416b226098610bbaf23e9a3d1a35ea06fcb3bc64"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MDA1Mw==", "bodyText": "Done", "url": "https://github.com/epam/cloud-pipeline/pull/1261#discussion_r466460053", "createdAt": "2020-08-06T14:36:48Z", "author": {"login": "maryvictol"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchClusterTest.java", "diffHunk": "@@ -421,6 +442,67 @@ public void hybridAutoScaledClusterCPUDeadlock() {\n                 .ensure(STATUS, text(String.valueOf(Integer.parseInt(getRunId()) + 1)));\n     }\n \n+    @Test\n+    @TestCase({\"EPMCMBIBPC-3153\"})\n+    public void hybridAutoScaledCluster() {\n+        String cpu = library()\n+                .createPipeline(Template.SHELL, getPipelineName())\n+                .clickOnPipeline(getPipelineName())\n+                .firstVersion()\n+                .runPipeline()\n+                .setDefaultLaunchOptions()\n+                .getCPU();\n+        onLaunchPage()\n+                .enableClusterLaunch()\n+                .clusterSettingsForm(autoScaledSettingForm)\n+                .enableHybridClusterSelect()\n+                .ok()\n+                .setCommand(String.format(\"qsub -b y -pe local %s sleep 15m && sleep infinity\", Integer.parseInt(cpu) + 1))\n+                .launch(this)\n+                .shouldContainRun(getPipelineName(), getRunId())\n+                .showLog(getRunId())\n+                .expandTab(PARAMETERS)\n+                .ensure(configurationParameter(\"CP_CAP_AUTOSCALE\", \"true\"), exist)\n+                .ensure(configurationParameter(\"CP_CAP_AUTOSCALE_WORKERS\", \"1\"), exist)\n+                .ensure(configurationParameter(\"CP_CAP_AUTOSCALE_HYBRID\", \"true\"), exist)\n+                .waitForSshLink()\n+                .ssh(shell -> shell\n+                        .execute(\"qhost\")\n+                        .assertOutputContains(\"HOSTNAME\", \"global\", String.format(\"%s-%s lx-amd64\",\n+                                getPipelineName().toLowerCase(), getRunId()))\n+                        .sleep(20, SECONDS)\n+                        .execute(\"qstat\")\n+                        .assertPageContains(\"sleep\", \" 1 \")\n+                        .assertPageContains(\"sleep\", \" qw \")\n+                        .assertPageContains(\"sleep\", String.format(\" %s \", Integer.parseInt(cpu) + 1))\n+                        .close());\n+        String nestedRunID = navigationMenu()\n+                                .runs()\n+                                .activeRuns()\n+                                .showLog(getRunId())\n+                                .waitForNestedRunsLink()\n+                                .getNestedRunID(1);\n+        runsMenu()\n+                .activeRuns()\n+                .showLog(getRunId())\n+                .clickOnNestedRunLink()\n+                .instanceParameters(instance ->\n+                        instance.ensure(TYPE, text(C.DEFAULT_INSTANCE.substring(0, C.DEFAULT_INSTANCE.indexOf(\".\"))))\n+                        .ensure(TYPE, not(text(C.DEFAULT_INSTANCE.substring(C.DEFAULT_INSTANCE.indexOf(\".\")))))\n+                )\n+                .waitForSshLink()\n+                .ssh(shell -> shell\n+                        .execute(\"qhost\")\n+                        .assertOutputContains(\"HOSTNAME\", \"global\", String.format(\"%s-%s lx-amd64\",\n+                                getPipelineName().toLowerCase(), getRunId()), String.format(\"pipeline-%s\",\n+                                nestedRunID))\n+                        .sleep(20, SECONDS)\n+                        .execute(\"qstat\")\n+                        .assertPageContains(\"sleep\", \" r \")\n+                        .assertPageContains(\"sleep\", String.format(\"main.q@pipeline-%s\", nestedRunID))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5OTY3MA=="}, "originalCommit": {"oid": "416b226098610bbaf23e9a3d1a35ea06fcb3bc64"}, "originalPosition": 201}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 416, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}