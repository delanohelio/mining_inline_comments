{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NjIxMDEy", "number": 1551, "title": "Issue #1405: Implemented tests for Tool controller layer", "bodyText": "Issue #1405:\nSigned-off-by: Iurii_Kofanov youkofan@gmail.com", "createdAt": "2020-11-09T09:32:28Z", "url": "https://github.com/epam/cloud-pipeline/pull/1551", "merged": true, "mergeCommit": {"oid": "0921110cabff08d09408a1534869bc372bf1581f"}, "closed": true, "closedAt": "2020-11-16T11:01:14Z", "author": {"login": "YouKofan"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbKkcjgFqTUyNzA0NDI0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcF0cDgBqjM5OTMxNTMwODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MDQ0MjQ3", "url": "https://github.com/epam/cloud-pipeline/pull/1551#pullrequestreview-527044247", "createdAt": "2020-11-10T10:07:48Z", "commit": {"oid": "ce5869943661f15be54e7920cee803d6409bdb8e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDowNzo0OFrOHwVJ0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDo1MTo1OFrOHwgRZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0MDI3NQ==", "bodyText": "Could you please align the lines properly.", "url": "https://github.com/epam/cloud-pipeline/pull/1551#discussion_r520440275", "createdAt": "2020-11-10T10:07:48Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/docker/ToolControllerTest.java", "diffHunk": "@@ -0,0 +1,522 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.docker;\n+\n+import com.epam.pipeline.entity.configuration.ConfigurationEntry;\n+import com.epam.pipeline.entity.docker.ImageDescription;\n+import com.epam.pipeline.entity.docker.ImageHistoryLayer;\n+import com.epam.pipeline.entity.docker.ToolDescription;\n+import com.epam.pipeline.entity.docker.ToolVersion;\n+import com.epam.pipeline.entity.pipeline.Tool;\n+import com.epam.pipeline.entity.scan.ToolScanPolicy;\n+import com.epam.pipeline.entity.scan.ToolScanResultView;\n+import com.epam.pipeline.entity.scan.ToolVersionScanResult;\n+import com.epam.pipeline.entity.tool.ToolSymlinkRequest;\n+import com.epam.pipeline.manager.pipeline.ToolApiService;\n+import com.epam.pipeline.manager.pipeline.ToolManager;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.docker.DockerCreatorUtils;\n+import com.epam.pipeline.test.creator.scan.ScanCreatorUtils;\n+import com.epam.pipeline.test.creator.tool.ToolCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.http.MediaType.APPLICATION_OCTET_STREAM_VALUE;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+@WebMvcTest(controllers = ToolController.class)\n+public class ToolControllerTest extends AbstractControllerTest {\n+\n+    private static final String TOOL_URL = SERVLET_PATH + \"/tool\";\n+    private static final String REGISTER_TOOL_URL = TOOL_URL + \"/register\";\n+    private static final String UPDATE_TOOL_URL = TOOL_URL + \"/update\";\n+    private static final String UPDATE_WHITE_LIST_URL = TOOL_URL + \"/updateWhiteList\";\n+    private static final String LOAD_TOOL_URL = TOOL_URL + \"/load\";\n+    private static final String DELETE_TOOL_URL = TOOL_URL + \"/delete\";\n+    private static final String LOAD_IMAGE_TAGS_URL = TOOL_URL + \"/%d/tags\";\n+    private static final String LOAD_IMAGE_DESCRIPTIONS_URL = TOOL_URL + \"/%d/description\";\n+    private static final String LOAD_IMAGE_HISTORY_URL = TOOL_URL + \"/%d/history\";\n+    private static final String DEFAULT_CMD_URL = TOOL_URL + \"/%d/defaultCmd\";\n+    private static final String SCAN_TOOL_URL = TOOL_URL + \"/scan\";\n+    private static final String SCAN_POLICY_TOOL_URL = SCAN_TOOL_URL + \"/policy\";\n+    private static final String ENABLE_SCAN_TOOL_URL = SCAN_TOOL_URL + \"/enabled\";\n+    private static final String ICON_TOOL_URL = TOOL_URL + \"/%d/icon\";\n+    private static final String ATTRIBUTES_TOOL_URL = TOOL_URL + \"/%d/attributes\";\n+    private static final String SETTINGS_TOOL_URL = TOOL_URL + \"/%d/settings\";\n+    private static final String SYMLINK_TOOL_URL = TOOL_URL + \"/symlink\";\n+\n+    private static final String ID_AS_STRING = String.valueOf(ID);\n+    private static final String TRUE_AS_STRING = String.valueOf(true);\n+    private static final String TOOL_ID = \"toolId\";\n+    private static final String VERSION = \"version\";\n+    private static final String REGISTRY = \"registry\";\n+    private static final String IMAGE = \"image\";\n+    private static final String HARD = \"hard\";\n+    private static final String TAG = \"tag\";\n+    private static final String TOOL = \"tool\";\n+    private static final String RESCAN = \"rescan\";\n+    private static final String FILE = \"file.jpg\";\n+    private static final String PATH = \"path\";\n+    private static final String MULTIPART_CONTENT_TYPE =\n+            \"multipart/form-data; boundary=--------------------------boundary\";\n+    private static final String MULTIPART_CONTENT =\n+            \"----------------------------boundary\\r\\n\" +\n+                    \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"file.jpg\\\"\\r\\n\" +\n+                    \"Content-Type:  image/jpg\\r\\n\" +\n+                    \"\\r\\n\" +\n+                    \"file.jpg\" +\n+                    \"\\r\\n\" +\n+                    \"----------------------------boundary\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5869943661f15be54e7920cee803d6409bdb8e"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NjMxNw==", "bodyText": "More like shouldCheckIfToolScanningEnabled.", "url": "https://github.com/epam/cloud-pipeline/pull/1551#discussion_r520446317", "createdAt": "2020-11-10T10:16:48Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/docker/ToolControllerTest.java", "diffHunk": "@@ -0,0 +1,522 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.docker;\n+\n+import com.epam.pipeline.entity.configuration.ConfigurationEntry;\n+import com.epam.pipeline.entity.docker.ImageDescription;\n+import com.epam.pipeline.entity.docker.ImageHistoryLayer;\n+import com.epam.pipeline.entity.docker.ToolDescription;\n+import com.epam.pipeline.entity.docker.ToolVersion;\n+import com.epam.pipeline.entity.pipeline.Tool;\n+import com.epam.pipeline.entity.scan.ToolScanPolicy;\n+import com.epam.pipeline.entity.scan.ToolScanResultView;\n+import com.epam.pipeline.entity.scan.ToolVersionScanResult;\n+import com.epam.pipeline.entity.tool.ToolSymlinkRequest;\n+import com.epam.pipeline.manager.pipeline.ToolApiService;\n+import com.epam.pipeline.manager.pipeline.ToolManager;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.docker.DockerCreatorUtils;\n+import com.epam.pipeline.test.creator.scan.ScanCreatorUtils;\n+import com.epam.pipeline.test.creator.tool.ToolCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.http.MediaType.APPLICATION_OCTET_STREAM_VALUE;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+@WebMvcTest(controllers = ToolController.class)\n+public class ToolControllerTest extends AbstractControllerTest {\n+\n+    private static final String TOOL_URL = SERVLET_PATH + \"/tool\";\n+    private static final String REGISTER_TOOL_URL = TOOL_URL + \"/register\";\n+    private static final String UPDATE_TOOL_URL = TOOL_URL + \"/update\";\n+    private static final String UPDATE_WHITE_LIST_URL = TOOL_URL + \"/updateWhiteList\";\n+    private static final String LOAD_TOOL_URL = TOOL_URL + \"/load\";\n+    private static final String DELETE_TOOL_URL = TOOL_URL + \"/delete\";\n+    private static final String LOAD_IMAGE_TAGS_URL = TOOL_URL + \"/%d/tags\";\n+    private static final String LOAD_IMAGE_DESCRIPTIONS_URL = TOOL_URL + \"/%d/description\";\n+    private static final String LOAD_IMAGE_HISTORY_URL = TOOL_URL + \"/%d/history\";\n+    private static final String DEFAULT_CMD_URL = TOOL_URL + \"/%d/defaultCmd\";\n+    private static final String SCAN_TOOL_URL = TOOL_URL + \"/scan\";\n+    private static final String SCAN_POLICY_TOOL_URL = SCAN_TOOL_URL + \"/policy\";\n+    private static final String ENABLE_SCAN_TOOL_URL = SCAN_TOOL_URL + \"/enabled\";\n+    private static final String ICON_TOOL_URL = TOOL_URL + \"/%d/icon\";\n+    private static final String ATTRIBUTES_TOOL_URL = TOOL_URL + \"/%d/attributes\";\n+    private static final String SETTINGS_TOOL_URL = TOOL_URL + \"/%d/settings\";\n+    private static final String SYMLINK_TOOL_URL = TOOL_URL + \"/symlink\";\n+\n+    private static final String ID_AS_STRING = String.valueOf(ID);\n+    private static final String TRUE_AS_STRING = String.valueOf(true);\n+    private static final String TOOL_ID = \"toolId\";\n+    private static final String VERSION = \"version\";\n+    private static final String REGISTRY = \"registry\";\n+    private static final String IMAGE = \"image\";\n+    private static final String HARD = \"hard\";\n+    private static final String TAG = \"tag\";\n+    private static final String TOOL = \"tool\";\n+    private static final String RESCAN = \"rescan\";\n+    private static final String FILE = \"file.jpg\";\n+    private static final String PATH = \"path\";\n+    private static final String MULTIPART_CONTENT_TYPE =\n+            \"multipart/form-data; boundary=--------------------------boundary\";\n+    private static final String MULTIPART_CONTENT =\n+            \"----------------------------boundary\\r\\n\" +\n+                    \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"file.jpg\\\"\\r\\n\" +\n+                    \"Content-Type:  image/jpg\\r\\n\" +\n+                    \"\\r\\n\" +\n+                    \"file.jpg\" +\n+                    \"\\r\\n\" +\n+                    \"----------------------------boundary\";\n+\n+    private final Tool tool = ToolCreatorUtils.getTool();\n+    private final ToolVersion toolVersion = DockerCreatorUtils.getToolVersion();\n+\n+    @Autowired\n+    private ToolApiService mockToolApiService;\n+\n+    @Autowired\n+    private ToolManager mockToolManager;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCreateTool() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(tool);\n+        doReturn(tool).when(mockToolApiService).create(tool);\n+\n+        final MvcResult mvcResult = performRequest(post(REGISTER_TOOL_URL).content(content));\n+\n+        verify(mockToolApiService).create(tool);\n+        assertResponse(mvcResult, tool, ToolCreatorUtils.TOOL_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailCreateTool() throws Exception {\n+        performUnauthorizedRequest(post(REGISTER_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateTool() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(tool);\n+        doReturn(tool).when(mockToolApiService).updateTool(tool);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_TOOL_URL).content(content));\n+\n+        verify(mockToolApiService).updateTool(tool);\n+        assertResponse(mvcResult, tool, ToolCreatorUtils.TOOL_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateTool() throws Exception {\n+        performUnauthorizedRequest(post(UPDATE_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateWhiteListWithToolVersion() throws Exception {\n+        final ToolVersionScanResult toolVersionScanResult = ScanCreatorUtils.getToolVersionScanResult();\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(TOOL_ID, ID_AS_STRING);\n+        params.add(VERSION, TEST_STRING);\n+        doReturn(toolVersionScanResult).when(mockToolApiService)\n+                .updateWhiteListWithToolVersion(ID, TEST_STRING, true);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_WHITE_LIST_URL).params(params));\n+\n+        verify(mockToolApiService).updateWhiteListWithToolVersion(ID, TEST_STRING, true);\n+        assertResponse(mvcResult, toolVersionScanResult, ScanCreatorUtils.TOOL_VERSION_SCAN_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateWhiteListWithToolVersion() throws Exception {\n+        performUnauthorizedRequest(post(UPDATE_WHITE_LIST_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadTool() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(REGISTRY, TEST_STRING);\n+        params.add(IMAGE, TEST_STRING);\n+        doReturn(tool).when(mockToolApiService).loadTool(TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_TOOL_URL).params(params));\n+\n+        verify(mockToolApiService).loadTool(TEST_STRING, TEST_STRING);\n+        assertResponse(mvcResult, tool, ToolCreatorUtils.TOOL_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadTool() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteTool() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(REGISTRY, TEST_STRING);\n+        params.add(IMAGE, TEST_STRING);\n+        params.add(HARD, TRUE_AS_STRING);\n+        doReturn(tool).when(mockToolApiService).delete(TEST_STRING, TEST_STRING, true);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_TOOL_URL).params(params));\n+\n+        verify(mockToolApiService).delete(TEST_STRING, TEST_STRING, true);\n+        assertResponse(mvcResult, tool, ToolCreatorUtils.TOOL_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteToolVersion() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(REGISTRY, TEST_STRING);\n+        params.add(IMAGE, TEST_STRING);\n+        params.add(VERSION, TEST_STRING);\n+        params.add(HARD, TRUE_AS_STRING);\n+        doReturn(tool).when(mockToolApiService).deleteToolVersion(TEST_STRING, TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_TOOL_URL).params(params));\n+\n+        verify(mockToolApiService).deleteToolVersion(TEST_STRING, TEST_STRING, TEST_STRING);\n+        assertResponse(mvcResult, tool, ToolCreatorUtils.TOOL_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteToolVersion() throws Exception {\n+        performUnauthorizedRequest(delete(DELETE_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadImageTags() throws Exception {\n+        doReturn(TEST_STRING_LIST).when(mockToolApiService).loadImageTags(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_IMAGE_TAGS_URL, ID)));\n+\n+        verify(mockToolApiService).loadImageTags(ID);\n+        assertResponse(mvcResult, TEST_STRING_LIST, ToolCreatorUtils.LIST_STRING_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadImageTags() throws Exception {\n+        performUnauthorizedRequest(get(String.format(LOAD_IMAGE_TAGS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadImageDescription() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(TAG, TEST_STRING);\n+        final ImageDescription imageDescription = DockerCreatorUtils.getImageDescription();\n+        doReturn(imageDescription).when(mockToolApiService).getImageDescription(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_IMAGE_DESCRIPTIONS_URL, ID)).params(params));\n+\n+        verify(mockToolApiService).getImageDescription(ID, TEST_STRING);\n+        assertResponse(mvcResult, imageDescription, DockerCreatorUtils.IMAGE_DESCRIPTION_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadImageDescription() throws Exception {\n+        performUnauthorizedRequest(get(String.format(LOAD_IMAGE_DESCRIPTIONS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadImageHistory() throws Exception {\n+        final ImageHistoryLayer imageHistoryLayer = DockerCreatorUtils.getImageHistoryLayer();\n+        final List<ImageHistoryLayer> imageHistoryLayers = Collections.singletonList(imageHistoryLayer);\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(VERSION, TEST_STRING);\n+        doReturn(imageHistoryLayers).when(mockToolApiService).getImageHistory(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_IMAGE_HISTORY_URL, ID)).params(params));\n+\n+        verify(mockToolApiService).getImageHistory(ID, TEST_STRING);\n+        assertResponse(mvcResult, imageHistoryLayers, DockerCreatorUtils.IMAGE_HISTORY_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadImageHistory() throws Exception {\n+        performUnauthorizedRequest(get(String.format(LOAD_IMAGE_HISTORY_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadDefaultImageCmd() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(VERSION, TEST_STRING);\n+        doReturn(TEST_STRING).when(mockToolApiService).getImageDefaultCommand(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(DEFAULT_CMD_URL, ID)).params(params));\n+\n+        verify(mockToolApiService).getImageDefaultCommand(ID, TEST_STRING);\n+        assertResponse(mvcResult, TEST_STRING, CommonCreatorConstants.STRING_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadDefaultImageCmd() throws Exception {\n+        performUnauthorizedRequest(get(String.format(DEFAULT_CMD_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldScanTool() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(REGISTRY, TEST_STRING);\n+        params.add(TOOL, TEST_STRING);\n+        params.add(VERSION, TEST_STRING);\n+        params.add(RESCAN, TRUE_AS_STRING);\n+        doNothing().when(mockToolApiService).forceScanTool(TEST_STRING, TEST_STRING, TEST_STRING, true);\n+\n+        final MvcResult mvcResult = performRequest(post(SCAN_TOOL_URL).params(params));\n+\n+        verify(mockToolApiService).forceScanTool(TEST_STRING, TEST_STRING, TEST_STRING, true);\n+        assertResponse(mvcResult, true, CommonCreatorConstants.BOOLEAN_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailScanTool() throws Exception {\n+        performUnauthorizedRequest(post(SCAN_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldClearToolScan() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(REGISTRY, TEST_STRING);\n+        params.add(TOOL, TEST_STRING);\n+        params.add(VERSION, TEST_STRING);\n+        doNothing().when(mockToolApiService).clearToolScan(TEST_STRING, TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(delete(SCAN_TOOL_URL).params(params));\n+\n+        verify(mockToolApiService).clearToolScan(TEST_STRING, TEST_STRING, TEST_STRING);\n+        assertResponse(mvcResult, true, CommonCreatorConstants.BOOLEAN_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailClearToolScan() throws Exception {\n+        performUnauthorizedRequest(delete(SCAN_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadVulnerabilities() throws Exception {\n+        final ToolScanResultView toolScanResultView = ScanCreatorUtils.getToolScanResultView();\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(REGISTRY, TEST_STRING);\n+        params.add(TOOL, TEST_STRING);\n+        doReturn(toolScanResultView).when(mockToolApiService).loadToolScanResult(TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(SCAN_TOOL_URL).params(params));\n+\n+        verify(mockToolApiService).loadToolScanResult(TEST_STRING, TEST_STRING);\n+        assertResponse(mvcResult, toolScanResultView, ScanCreatorUtils.SCAN_RESULT_VIEW_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadVulnerabilities() throws Exception {\n+        performUnauthorizedRequest(get(SCAN_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadSecurityPolicy() throws Exception {\n+        final ToolScanPolicy toolScanPolicy = ScanCreatorUtils.getToolScanPolicy();\n+        doReturn(toolScanPolicy).when(mockToolApiService).loadSecurityPolicy();\n+\n+        final MvcResult mvcResult = performRequest(get(SCAN_POLICY_TOOL_URL));\n+\n+        verify(mockToolApiService).loadSecurityPolicy();\n+        assertResponse(mvcResult, toolScanPolicy, ScanCreatorUtils.TOOL_SCAN_POLICY_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadSecurityPolicy() throws Exception {\n+        performUnauthorizedRequest(get(SCAN_POLICY_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldEnabledToolScanning() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5869943661f15be54e7920cee803d6409bdb8e"}, "originalPosition": 379}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0Nzg0Ng==", "bodyText": "Please check tool icon file name correctness as well.", "url": "https://github.com/epam/cloud-pipeline/pull/1551#discussion_r520447846", "createdAt": "2020-11-10T10:19:11Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/docker/ToolControllerTest.java", "diffHunk": "@@ -0,0 +1,522 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.docker;\n+\n+import com.epam.pipeline.entity.configuration.ConfigurationEntry;\n+import com.epam.pipeline.entity.docker.ImageDescription;\n+import com.epam.pipeline.entity.docker.ImageHistoryLayer;\n+import com.epam.pipeline.entity.docker.ToolDescription;\n+import com.epam.pipeline.entity.docker.ToolVersion;\n+import com.epam.pipeline.entity.pipeline.Tool;\n+import com.epam.pipeline.entity.scan.ToolScanPolicy;\n+import com.epam.pipeline.entity.scan.ToolScanResultView;\n+import com.epam.pipeline.entity.scan.ToolVersionScanResult;\n+import com.epam.pipeline.entity.tool.ToolSymlinkRequest;\n+import com.epam.pipeline.manager.pipeline.ToolApiService;\n+import com.epam.pipeline.manager.pipeline.ToolManager;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.docker.DockerCreatorUtils;\n+import com.epam.pipeline.test.creator.scan.ScanCreatorUtils;\n+import com.epam.pipeline.test.creator.tool.ToolCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.http.MediaType.APPLICATION_OCTET_STREAM_VALUE;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+@WebMvcTest(controllers = ToolController.class)\n+public class ToolControllerTest extends AbstractControllerTest {\n+\n+    private static final String TOOL_URL = SERVLET_PATH + \"/tool\";\n+    private static final String REGISTER_TOOL_URL = TOOL_URL + \"/register\";\n+    private static final String UPDATE_TOOL_URL = TOOL_URL + \"/update\";\n+    private static final String UPDATE_WHITE_LIST_URL = TOOL_URL + \"/updateWhiteList\";\n+    private static final String LOAD_TOOL_URL = TOOL_URL + \"/load\";\n+    private static final String DELETE_TOOL_URL = TOOL_URL + \"/delete\";\n+    private static final String LOAD_IMAGE_TAGS_URL = TOOL_URL + \"/%d/tags\";\n+    private static final String LOAD_IMAGE_DESCRIPTIONS_URL = TOOL_URL + \"/%d/description\";\n+    private static final String LOAD_IMAGE_HISTORY_URL = TOOL_URL + \"/%d/history\";\n+    private static final String DEFAULT_CMD_URL = TOOL_URL + \"/%d/defaultCmd\";\n+    private static final String SCAN_TOOL_URL = TOOL_URL + \"/scan\";\n+    private static final String SCAN_POLICY_TOOL_URL = SCAN_TOOL_URL + \"/policy\";\n+    private static final String ENABLE_SCAN_TOOL_URL = SCAN_TOOL_URL + \"/enabled\";\n+    private static final String ICON_TOOL_URL = TOOL_URL + \"/%d/icon\";\n+    private static final String ATTRIBUTES_TOOL_URL = TOOL_URL + \"/%d/attributes\";\n+    private static final String SETTINGS_TOOL_URL = TOOL_URL + \"/%d/settings\";\n+    private static final String SYMLINK_TOOL_URL = TOOL_URL + \"/symlink\";\n+\n+    private static final String ID_AS_STRING = String.valueOf(ID);\n+    private static final String TRUE_AS_STRING = String.valueOf(true);\n+    private static final String TOOL_ID = \"toolId\";\n+    private static final String VERSION = \"version\";\n+    private static final String REGISTRY = \"registry\";\n+    private static final String IMAGE = \"image\";\n+    private static final String HARD = \"hard\";\n+    private static final String TAG = \"tag\";\n+    private static final String TOOL = \"tool\";\n+    private static final String RESCAN = \"rescan\";\n+    private static final String FILE = \"file.jpg\";\n+    private static final String PATH = \"path\";\n+    private static final String MULTIPART_CONTENT_TYPE =\n+            \"multipart/form-data; boundary=--------------------------boundary\";\n+    private static final String MULTIPART_CONTENT =\n+            \"----------------------------boundary\\r\\n\" +\n+                    \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"file.jpg\\\"\\r\\n\" +\n+                    \"Content-Type:  image/jpg\\r\\n\" +\n+                    \"\\r\\n\" +\n+                    \"file.jpg\" +\n+                    \"\\r\\n\" +\n+                    \"----------------------------boundary\";\n+\n+    private final Tool tool = ToolCreatorUtils.getTool();\n+    private final ToolVersion toolVersion = DockerCreatorUtils.getToolVersion();\n+\n+    @Autowired\n+    private ToolApiService mockToolApiService;\n+\n+    @Autowired\n+    private ToolManager mockToolManager;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCreateTool() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(tool);\n+        doReturn(tool).when(mockToolApiService).create(tool);\n+\n+        final MvcResult mvcResult = performRequest(post(REGISTER_TOOL_URL).content(content));\n+\n+        verify(mockToolApiService).create(tool);\n+        assertResponse(mvcResult, tool, ToolCreatorUtils.TOOL_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailCreateTool() throws Exception {\n+        performUnauthorizedRequest(post(REGISTER_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateTool() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(tool);\n+        doReturn(tool).when(mockToolApiService).updateTool(tool);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_TOOL_URL).content(content));\n+\n+        verify(mockToolApiService).updateTool(tool);\n+        assertResponse(mvcResult, tool, ToolCreatorUtils.TOOL_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateTool() throws Exception {\n+        performUnauthorizedRequest(post(UPDATE_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateWhiteListWithToolVersion() throws Exception {\n+        final ToolVersionScanResult toolVersionScanResult = ScanCreatorUtils.getToolVersionScanResult();\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(TOOL_ID, ID_AS_STRING);\n+        params.add(VERSION, TEST_STRING);\n+        doReturn(toolVersionScanResult).when(mockToolApiService)\n+                .updateWhiteListWithToolVersion(ID, TEST_STRING, true);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_WHITE_LIST_URL).params(params));\n+\n+        verify(mockToolApiService).updateWhiteListWithToolVersion(ID, TEST_STRING, true);\n+        assertResponse(mvcResult, toolVersionScanResult, ScanCreatorUtils.TOOL_VERSION_SCAN_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateWhiteListWithToolVersion() throws Exception {\n+        performUnauthorizedRequest(post(UPDATE_WHITE_LIST_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadTool() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(REGISTRY, TEST_STRING);\n+        params.add(IMAGE, TEST_STRING);\n+        doReturn(tool).when(mockToolApiService).loadTool(TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_TOOL_URL).params(params));\n+\n+        verify(mockToolApiService).loadTool(TEST_STRING, TEST_STRING);\n+        assertResponse(mvcResult, tool, ToolCreatorUtils.TOOL_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadTool() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteTool() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(REGISTRY, TEST_STRING);\n+        params.add(IMAGE, TEST_STRING);\n+        params.add(HARD, TRUE_AS_STRING);\n+        doReturn(tool).when(mockToolApiService).delete(TEST_STRING, TEST_STRING, true);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_TOOL_URL).params(params));\n+\n+        verify(mockToolApiService).delete(TEST_STRING, TEST_STRING, true);\n+        assertResponse(mvcResult, tool, ToolCreatorUtils.TOOL_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteToolVersion() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(REGISTRY, TEST_STRING);\n+        params.add(IMAGE, TEST_STRING);\n+        params.add(VERSION, TEST_STRING);\n+        params.add(HARD, TRUE_AS_STRING);\n+        doReturn(tool).when(mockToolApiService).deleteToolVersion(TEST_STRING, TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_TOOL_URL).params(params));\n+\n+        verify(mockToolApiService).deleteToolVersion(TEST_STRING, TEST_STRING, TEST_STRING);\n+        assertResponse(mvcResult, tool, ToolCreatorUtils.TOOL_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteToolVersion() throws Exception {\n+        performUnauthorizedRequest(delete(DELETE_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadImageTags() throws Exception {\n+        doReturn(TEST_STRING_LIST).when(mockToolApiService).loadImageTags(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_IMAGE_TAGS_URL, ID)));\n+\n+        verify(mockToolApiService).loadImageTags(ID);\n+        assertResponse(mvcResult, TEST_STRING_LIST, ToolCreatorUtils.LIST_STRING_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadImageTags() throws Exception {\n+        performUnauthorizedRequest(get(String.format(LOAD_IMAGE_TAGS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadImageDescription() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(TAG, TEST_STRING);\n+        final ImageDescription imageDescription = DockerCreatorUtils.getImageDescription();\n+        doReturn(imageDescription).when(mockToolApiService).getImageDescription(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_IMAGE_DESCRIPTIONS_URL, ID)).params(params));\n+\n+        verify(mockToolApiService).getImageDescription(ID, TEST_STRING);\n+        assertResponse(mvcResult, imageDescription, DockerCreatorUtils.IMAGE_DESCRIPTION_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadImageDescription() throws Exception {\n+        performUnauthorizedRequest(get(String.format(LOAD_IMAGE_DESCRIPTIONS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadImageHistory() throws Exception {\n+        final ImageHistoryLayer imageHistoryLayer = DockerCreatorUtils.getImageHistoryLayer();\n+        final List<ImageHistoryLayer> imageHistoryLayers = Collections.singletonList(imageHistoryLayer);\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(VERSION, TEST_STRING);\n+        doReturn(imageHistoryLayers).when(mockToolApiService).getImageHistory(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_IMAGE_HISTORY_URL, ID)).params(params));\n+\n+        verify(mockToolApiService).getImageHistory(ID, TEST_STRING);\n+        assertResponse(mvcResult, imageHistoryLayers, DockerCreatorUtils.IMAGE_HISTORY_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadImageHistory() throws Exception {\n+        performUnauthorizedRequest(get(String.format(LOAD_IMAGE_HISTORY_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadDefaultImageCmd() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(VERSION, TEST_STRING);\n+        doReturn(TEST_STRING).when(mockToolApiService).getImageDefaultCommand(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(DEFAULT_CMD_URL, ID)).params(params));\n+\n+        verify(mockToolApiService).getImageDefaultCommand(ID, TEST_STRING);\n+        assertResponse(mvcResult, TEST_STRING, CommonCreatorConstants.STRING_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadDefaultImageCmd() throws Exception {\n+        performUnauthorizedRequest(get(String.format(DEFAULT_CMD_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldScanTool() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(REGISTRY, TEST_STRING);\n+        params.add(TOOL, TEST_STRING);\n+        params.add(VERSION, TEST_STRING);\n+        params.add(RESCAN, TRUE_AS_STRING);\n+        doNothing().when(mockToolApiService).forceScanTool(TEST_STRING, TEST_STRING, TEST_STRING, true);\n+\n+        final MvcResult mvcResult = performRequest(post(SCAN_TOOL_URL).params(params));\n+\n+        verify(mockToolApiService).forceScanTool(TEST_STRING, TEST_STRING, TEST_STRING, true);\n+        assertResponse(mvcResult, true, CommonCreatorConstants.BOOLEAN_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailScanTool() throws Exception {\n+        performUnauthorizedRequest(post(SCAN_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldClearToolScan() throws Exception {\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(REGISTRY, TEST_STRING);\n+        params.add(TOOL, TEST_STRING);\n+        params.add(VERSION, TEST_STRING);\n+        doNothing().when(mockToolApiService).clearToolScan(TEST_STRING, TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(delete(SCAN_TOOL_URL).params(params));\n+\n+        verify(mockToolApiService).clearToolScan(TEST_STRING, TEST_STRING, TEST_STRING);\n+        assertResponse(mvcResult, true, CommonCreatorConstants.BOOLEAN_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailClearToolScan() throws Exception {\n+        performUnauthorizedRequest(delete(SCAN_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadVulnerabilities() throws Exception {\n+        final ToolScanResultView toolScanResultView = ScanCreatorUtils.getToolScanResultView();\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(REGISTRY, TEST_STRING);\n+        params.add(TOOL, TEST_STRING);\n+        doReturn(toolScanResultView).when(mockToolApiService).loadToolScanResult(TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(SCAN_TOOL_URL).params(params));\n+\n+        verify(mockToolApiService).loadToolScanResult(TEST_STRING, TEST_STRING);\n+        assertResponse(mvcResult, toolScanResultView, ScanCreatorUtils.SCAN_RESULT_VIEW_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadVulnerabilities() throws Exception {\n+        performUnauthorizedRequest(get(SCAN_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadSecurityPolicy() throws Exception {\n+        final ToolScanPolicy toolScanPolicy = ScanCreatorUtils.getToolScanPolicy();\n+        doReturn(toolScanPolicy).when(mockToolApiService).loadSecurityPolicy();\n+\n+        final MvcResult mvcResult = performRequest(get(SCAN_POLICY_TOOL_URL));\n+\n+        verify(mockToolApiService).loadSecurityPolicy();\n+        assertResponse(mvcResult, toolScanPolicy, ScanCreatorUtils.TOOL_SCAN_POLICY_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadSecurityPolicy() throws Exception {\n+        performUnauthorizedRequest(get(SCAN_POLICY_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldEnabledToolScanning() throws Exception {\n+        doReturn(true).when(mockToolManager).isToolScanningEnabled();\n+\n+        final MvcResult mvcResult = performRequest(get(ENABLE_SCAN_TOOL_URL));\n+\n+        verify(mockToolManager).isToolScanningEnabled();\n+        assertResponse(mvcResult, true, CommonCreatorConstants.BOOLEAN_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailEnabledToolScanning() throws Exception {\n+        performUnauthorizedRequest(get(ENABLE_SCAN_TOOL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadToolIcon() throws Exception {\n+        doReturn(ID).when(mockToolApiService).updateToolIcon(ID, FILE, FILE.getBytes());\n+\n+        final MvcResult mvcResult = performRequest(\n+                post(String.format(ICON_TOOL_URL, ID)).content(MULTIPART_CONTENT).param(PATH, FILE),\n+                MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n+\n+        verify(mockToolApiService).updateToolIcon(ID, FILE, FILE.getBytes());\n+        assertResponse(mvcResult, ID, CommonCreatorConstants.LONG_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUploadToolIcon() throws Exception {\n+        performUnauthorizedRequest(post(String.format(ICON_TOOL_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDownloadToolIcon() throws Exception {\n+        final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+        Pair<String, InputStream> pair = new ImmutablePair<>(TEST_STRING, inputStream);\n+        doReturn(pair).when(mockToolApiService).loadToolIcon(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(ICON_TOOL_URL, ID)),\n+                APPLICATION_OCTET_STREAM_VALUE);\n+\n+        verify(mockToolApiService).loadToolIcon(ID);\n+        final String actualResult = mvcResult.getResponse().getContentAsString();\n+        Assert.assertEquals(TEST_STRING, actualResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5869943661f15be54e7920cee803d6409bdb8e"}, "originalPosition": 423}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyMjQzOA==", "bodyText": "Tool version creation method is located in docker creator utils but it seems better to put it closer to tools.\nProbably we can get rid or tool and scan creator utils because it won't be quite clear where to put specific methods and fields in the future as well. Only a single docker creator utils will be enough from my point of view.", "url": "https://github.com/epam/cloud-pipeline/pull/1551#discussion_r520622438", "createdAt": "2020-11-10T14:51:58Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/test/creator/docker/DockerCreatorUtils.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5869943661f15be54e7920cee803d6409bdb8e"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5OTI5NjMx", "url": "https://github.com/epam/cloud-pipeline/pull/1551#pullrequestreview-529929631", "createdAt": "2020-11-13T10:02:54Z", "commit": {"oid": "2f82a4fe7548a8814c82ba28c10b35d7ae429540"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78242c1ea49aba5990f8222a1f24ae1512c71e61", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/78242c1ea49aba5990f8222a1f24ae1512c71e61", "committedDate": "2020-11-13T11:33:40Z", "message": "Issue #1405: Implemented tests for Tool controller layer\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7fe7a7d594920e74aa3e8b3a13df3de4d98d155", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/d7fe7a7d594920e74aa3e8b3a13df3de4d98d155", "committedDate": "2020-11-13T11:34:12Z", "message": "Issue #1405: Tests improvements, style fixes, creator util classes refactoring\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93fb7a420d28ccff647a4091a4bb60222b1f17ea", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/93fb7a420d28ccff647a4091a4bb60222b1f17ea", "committedDate": "2020-11-13T11:35:49Z", "message": "Issue #1405: Added assertion method\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fa09a06499bd8721f2a2547b121f797fe1b5047", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/1fa09a06499bd8721f2a2547b121f797fe1b5047", "committedDate": "2020-11-13T11:35:50Z", "message": "Issue #1405: Fix assertion method\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ab7ec3ed28c288a85b9d5dbf7c1dcf5ccde22db", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0ab7ec3ed28c288a85b9d5dbf7c1dcf5ccde22db", "committedDate": "2020-11-13T11:35:50Z", "message": "Issue #1405: One more assertion method added\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbf085185d5e2fa526096814f6482ce21a40c3b6", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/bbf085185d5e2fa526096814f6482ce21a40c3b6", "committedDate": "2020-11-13T11:53:37Z", "message": "Issue #1405: Rebased and merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f82a4fe7548a8814c82ba28c10b35d7ae429540", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/2f82a4fe7548a8814c82ba28c10b35d7ae429540", "committedDate": "2020-11-12T11:20:23Z", "message": "Issue #1405: One more assertion method added\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}, "afterCommit": {"oid": "bbf085185d5e2fa526096814f6482ce21a40c3b6", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/bbf085185d5e2fa526096814f6482ce21a40c3b6", "committedDate": "2020-11-13T11:53:37Z", "message": "Issue #1405: Rebased and merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3705, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}