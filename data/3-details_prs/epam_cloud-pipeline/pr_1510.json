{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3OTAyMjYz", "number": 1510, "title": "Issue #1404: Tests for DataStorageApiService", "bodyText": "Acl tests for DataStorageApiService\nIssue - #1404\nSigned-off-by: Iurii_Kofanov youkofan@gmail.com", "createdAt": "2020-10-21T22:36:00Z", "url": "https://github.com/epam/cloud-pipeline/pull/1510", "merged": true, "mergeCommit": {"oid": "57f3f91ce4ed833599f946bab0117c7543571b03"}, "closed": true, "closedAt": "2020-11-11T11:33:45Z", "author": {"login": "YouKofan"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWYyf_gBqjM5MjIyNTExODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbIQvbgBqjM5Nzg1ODcyNTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45145008413bba89f2e2d7ff3856541f0c8a8d43", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/45145008413bba89f2e2d7ff3856541f0c8a8d43", "committedDate": "2020-10-21T22:34:31Z", "message": "Issue #1404: Tests for DataStorageApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}, "afterCommit": {"oid": "01774bed26dd71c6e0c220e0f3c1e69e46386c13", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/01774bed26dd71c6e0c220e0f3c1e69e46386c13", "committedDate": "2020-10-26T18:36:05Z", "message": "Issue #1404: Tests for DataStorageApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b0a237c207af3693f052e6ccac763ae89abcba9", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/2b0a237c207af3693f052e6ccac763ae89abcba9", "committedDate": "2020-10-28T14:27:37Z", "message": "Issue #1404: DataStorage Acl tests are separated\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}, "afterCommit": {"oid": "428a0ee637ec21b0a2ccf8523ea17e71c54a3220", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/428a0ee637ec21b0a2ccf8523ea17e71c54a3220", "committedDate": "2020-10-29T14:44:57Z", "message": "Issue #1404: Tests refactored, merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNTQ3MzIy", "url": "https://github.com/epam/cloud-pipeline/pull/1510#pullrequestreview-520547322", "createdAt": "2020-10-30T10:37:20Z", "commit": {"oid": "428a0ee637ec21b0a2ccf8523ea17e71c54a3220"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDozNzoyMFrOHrJcGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzowMTowMlrOHrN9oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNTQ2NQ==", "bodyText": "Let's rename this test class to move case specific name.", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r515005465", "createdAt": "2020-10-30T10:37:20Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceTest.java", "diffHunk": "@@ -0,0 +1,1355 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.ContentDisposition;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageListing;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.anyLong;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class DataStorageApiServiceTest extends AbstractDataStorageAclTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "428a0ee637ec21b0a2ccf8523ea17e71c54a3220"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxMzMwNA==", "bodyText": "Also, let's recombine test methods from DataStorageApiServiceTest and DataStorageApiServiceCrudTest classes:\n\nDataStorageApiServiceFileTest contains test methods associated with files/items (upload/download operations), tags\nDataStorageApiServiceCommonTest the rest (crud and operations with data storages)", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r515013304", "createdAt": "2020-10-30T10:53:01Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceTest.java", "diffHunk": "@@ -0,0 +1,1355 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.ContentDisposition;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageListing;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.anyLong;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class DataStorageApiServiceTest extends AbstractDataStorageAclTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "428a0ee637ec21b0a2ccf8523ea17e71c54a3220"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxNDcyNQ==", "bodyText": "It seems that this mock used in DataStorageApiServiceRuleTest only.", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r515014725", "createdAt": "2020-10-30T10:55:47Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/AbstractDataStorageAclTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.DataStorageVO;\n+import com.epam.pipeline.controller.vo.data.storage.UpdateDataStorageItemVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorageItem;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageDownloadFileUrl;\n+import com.epam.pipeline.entity.datastorage.DataStorageFile;\n+import com.epam.pipeline.entity.datastorage.DataStorageItemContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageListing;\n+import com.epam.pipeline.entity.datastorage.DataStorageStreamingContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageWithShareMount;\n+import com.epam.pipeline.entity.datastorage.PathDescription;\n+import com.epam.pipeline.entity.datastorage.StorageMountPath;\n+import com.epam.pipeline.entity.datastorage.StorageUsage;\n+import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n+import com.epam.pipeline.entity.datastorage.rules.DataStorageRule;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.cloud.TemporaryCredentialsManager;\n+import com.epam.pipeline.manager.datastorage.DataStorageManager;\n+import com.epam.pipeline.manager.datastorage.DataStorageRuleManager;\n+import com.epam.pipeline.manager.datastorage.RunMountService;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.manager.security.GrantPermissionManager;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.mockito.Mockito.doReturn;\n+\n+abstract class AbstractDataStorageAclTest extends AbstractAclTest {\n+\n+    protected final AbstractDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);\n+    protected final AbstractDataStorage anotherS3bucket =\n+            DatastorageCreatorUtils.getS3bucketDataStorage(ID_2, TEST_STRING);\n+    protected final DataStorageWithShareMount storageShareMount =\n+            DatastorageCreatorUtils.getDataStorageWithShareMount();\n+    protected final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n+    protected final UserContext context = SecurityCreatorUtils.getUserContext();\n+    protected final DataStorageListing dataStorageListing = DatastorageCreatorUtils.getDataStorageListing();\n+    protected final AbstractDataStorageItem dataStorageFile = DatastorageCreatorUtils.getDataStorageFile();\n+    protected final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    protected final DataStorageDownloadFileUrl downloadFileUrl =\n+            DatastorageCreatorUtils.getDataStorageDownloadFileUrl();\n+    protected final Pipeline pipeline = PipelineCreatorUtils.getPipeline(OWNER_USER);\n+    protected final DataStorageRule dataStorageRule = DatastorageCreatorUtils.getDataStorageRule();\n+    protected final DataStorageItemContent dataStorageItemContent =\n+            DatastorageCreatorUtils.getDefaultDataStorageItemContent();\n+    protected final DataStorageStreamingContent dataStorageStreamingContent =\n+            DatastorageCreatorUtils.getDefaultDataStorageStreamingContent(inputStream);\n+    protected final List<PathDescription> pathDescriptionList = DatastorageCreatorUtils.getPathDescriptionList();\n+    protected final StorageUsage storageUsage = DatastorageCreatorUtils.getStorageUsage();\n+    protected final StorageMountPath storageMountPath = DatastorageCreatorUtils.getStorageMountPath();\n+    protected final DataStorageVO dataStorageVO = DatastorageCreatorUtils.getDataStorageVO();\n+    protected final TemporaryCredentials temporaryCredentials = DatastorageCreatorUtils.getTemporaryCredentials();\n+\n+    protected final List<String> testList = Collections.singletonList(TEST_STRING);\n+    protected final List<UpdateDataStorageItemVO> dataStorageItemVOList =\n+            DatastorageCreatorUtils.getUpdateDataStorageItemVOList();\n+    protected final List<DataStorageFile> dataStorageFileList = DatastorageCreatorUtils.getDataStorageFileList();\n+    protected final List<DataStorageDownloadFileUrl> downloadFileUrlList =\n+            DatastorageCreatorUtils.getDataStorageDownloadFileUrlList();\n+    protected final List<DataStorageRule> dataStorageRuleList = DatastorageCreatorUtils.getDataStorageRuleList();\n+    protected final List<DataStorageAction> dataStorageActionList = DatastorageCreatorUtils.getDataStorageActionList();\n+\n+    @Autowired\n+    protected DataStorageApiService dataStorageApiService;\n+\n+    @Autowired\n+    protected GrantPermissionManager grantPermissionManager;\n+\n+    @Autowired\n+    protected DataStorageManager mockDataStorageManager;\n+\n+    @Autowired\n+    protected DataStorageRuleManager mockDataStorageRuleManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "428a0ee637ec21b0a2ccf8523ea17e71c54a3220"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyMTg4OA==", "bodyText": "It seems that the lines\ninitAclEntity(pipeline);\nmockS3bucket();\nmockAuthUser(OWNER_USER);\n\nhave no effect to the test result.\nAlso, check this for other testes.", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r515021888", "createdAt": "2020-10-30T11:10:32Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceRuleTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.security.acl.AclPermission;\n+import org.junit.Test;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class DataStorageApiServiceRuleTest extends AbstractDataStorageAclTest {\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateRuleForAdmin() {\n+        initAclEntity(pipeline);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8b82608fd1aa95ddd3001b1c1aea5f3399f0fb1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNjI5OQ==", "bodyText": "Could you please clarify why we should use mock here?", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r515026299", "createdAt": "2020-10-30T11:18:41Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/FileShareMountApiServiceTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.entity.datastorage.FileShareMount;\n+import com.epam.pipeline.manager.datastorage.FileShareMountManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class FileShareMountApiServiceTest extends AbstractAclTest {\n+\n+    private final FileShareMount fileShareMount = DatastorageCreatorUtils.getFileShareMount();\n+\n+    @Autowired\n+    private FileShareMountApiService fileShareMountApiService;\n+\n+    @Autowired\n+    private FileShareMountManager mockFileShareMountManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSaveFileShareMountForAdmin() {\n+        doReturn(fileShareMount).when(mockFileShareMountManager).save(fileShareMount);\n+\n+        assertThat(fileShareMountApiService.save(fileShareMount)).isEqualTo(fileShareMount);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenySaveFileShareMountForNotAdmin() {\n+        doReturn(fileShareMount).when(mockFileShareMountManager).save(fileShareMount);\n+\n+        assertThrows(AccessDeniedException.class, () -> fileShareMountApiService.save(fileShareMount));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteFileShareMountForAdmin() {\n+        final FileShareMountApiService mockFileShareMountApiService = mock(FileShareMountApiService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8b82608fd1aa95ddd3001b1c1aea5f3399f0fb1"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNzM0NA==", "bodyText": "We may not to use times method with 1 argument due to verify method has time(1) by default", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r515027344", "createdAt": "2020-10-30T11:20:26Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/FileShareMountApiServiceTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.entity.datastorage.FileShareMount;\n+import com.epam.pipeline.manager.datastorage.FileShareMountManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class FileShareMountApiServiceTest extends AbstractAclTest {\n+\n+    private final FileShareMount fileShareMount = DatastorageCreatorUtils.getFileShareMount();\n+\n+    @Autowired\n+    private FileShareMountApiService fileShareMountApiService;\n+\n+    @Autowired\n+    private FileShareMountManager mockFileShareMountManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSaveFileShareMountForAdmin() {\n+        doReturn(fileShareMount).when(mockFileShareMountManager).save(fileShareMount);\n+\n+        assertThat(fileShareMountApiService.save(fileShareMount)).isEqualTo(fileShareMount);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenySaveFileShareMountForNotAdmin() {\n+        doReturn(fileShareMount).when(mockFileShareMountManager).save(fileShareMount);\n+\n+        assertThrows(AccessDeniedException.class, () -> fileShareMountApiService.save(fileShareMount));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteFileShareMountForAdmin() {\n+        final FileShareMountApiService mockFileShareMountApiService = mock(FileShareMountApiService.class);\n+        doNothing().when(mockFileShareMountManager).delete(ID);\n+\n+        mockFileShareMountApiService.delete(ID);\n+\n+        verify(mockFileShareMountApiService, times(1)).delete(ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8b82608fd1aa95ddd3001b1c1aea5f3399f0fb1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzNDMxMA==", "bodyText": "Maybe we can refuse using such method and use Collections.singleton* instead?", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r515034310", "createdAt": "2020-10-30T11:33:26Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/test/creator/CommonCreatorConstants.java", "diffHunk": "@@ -17,18 +17,36 @@\n package com.epam.pipeline.test.creator;\n \n import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n \n public final class CommonCreatorConstants {\n \n     public static final long ID = 1L;\n     public static final long ID_2 = 2L;\n     public static final int TEST_INT = 4;\n     public static final String TEST_STRING = \"TEST\";\n-    public static final String TEST_STRING_2 = \"TEST_2\";\n     public static final List<String> TEST_STRING_LIST = Collections.singletonList(TEST_STRING);\n+    public static final byte[] TEST_ARRAY = {1, 1, 1};\n+    public static final Map<String, String> TEST_STRING_MAP = getTestMap();\n+    public static final Set<String> TEST_STRING_SET = getTestSet();\n \n     private CommonCreatorConstants() {\n \n     }\n+\n+    private static Map<String, String> getTestMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8b82608fd1aa95ddd3001b1c1aea5f3399f0fb1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2OTQwOQ==", "bodyText": "Could we create a new method mockUserContext?\nprotected void mockUserContext(final boolean external) {\n        doReturn(SecurityCreatorUtils.getUserContext(external)).when(mockAuthManager).getUserContext();\n    }", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r515069409", "createdAt": "2020-10-30T12:40:54Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceTest.java", "diffHunk": "@@ -0,0 +1,1351 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.ContentDisposition;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.anyLong;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class DataStorageApiServiceTest extends AbstractDataStorageAclTest {\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetDataStorageItemsForAdmin() {\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initMocks(OWNER_USER, context);\n+\n+        assertThat(dataStorageApiService.getDataStorageItems(\n+                ID, TEST_STRING, true, TEST_INT, TEST_STRING)).isEqualTo(dataStorageListing);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetDataStorageItemsWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initMocks(OWNER_USER, context);\n+\n+        assertThat(dataStorageApiService.getDataStorageItems(\n+                ID, TEST_STRING, true, TEST_INT, TEST_STRING)).isEqualTo(dataStorageListing);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyGetDataStorageItemsWhenStoragePermissionIsNotGranted() {\n+        initAclEntity(s3bucket, AclPermission.NO_READ);\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initMocks(SIMPLE_USER, context);\n+\n+        assertThrows(AccessDeniedException.class, () ->\n+                dataStorageApiService.getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyGetDataStorageItemsWhenCheckStorageSharedPermissionIsNotGranted() {\n+        final UserContext context = SecurityCreatorUtils.getUserContext(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8b82608fd1aa95ddd3001b1c1aea5f3399f0fb1"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NDIzMw==", "bodyText": "It is not clear which mocks we are going to init. Could you rename this method? Also, it would be great to call mockUserContext into this method.", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r515074233", "createdAt": "2020-10-30T12:50:48Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceTest.java", "diffHunk": "@@ -0,0 +1,1351 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.ContentDisposition;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.anyLong;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class DataStorageApiServiceTest extends AbstractDataStorageAclTest {\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetDataStorageItemsForAdmin() {\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initMocks(OWNER_USER, context);\n+\n+        assertThat(dataStorageApiService.getDataStorageItems(\n+                ID, TEST_STRING, true, TEST_INT, TEST_STRING)).isEqualTo(dataStorageListing);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetDataStorageItemsWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initMocks(OWNER_USER, context);\n+\n+        assertThat(dataStorageApiService.getDataStorageItems(\n+                ID, TEST_STRING, true, TEST_INT, TEST_STRING)).isEqualTo(dataStorageListing);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyGetDataStorageItemsWhenStoragePermissionIsNotGranted() {\n+        initAclEntity(s3bucket, AclPermission.NO_READ);\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initMocks(SIMPLE_USER, context);\n+\n+        assertThrows(AccessDeniedException.class, () ->\n+                dataStorageApiService.getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyGetDataStorageItemsWhenCheckStorageSharedPermissionIsNotGranted() {\n+        final UserContext context = SecurityCreatorUtils.getUserContext(true);\n+        final AbstractDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER, false);\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initMocks(OWNER_USER, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8b82608fd1aa95ddd3001b1c1aea5f3399f0fb1"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3OTU4NQ==", "bodyText": "Moreover, to my mind, we should pass s3bucket object to this method.", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r515079585", "createdAt": "2020-10-30T13:01:02Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceTest.java", "diffHunk": "@@ -0,0 +1,1351 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.ContentDisposition;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.anyLong;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class DataStorageApiServiceTest extends AbstractDataStorageAclTest {\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetDataStorageItemsForAdmin() {\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initMocks(OWNER_USER, context);\n+\n+        assertThat(dataStorageApiService.getDataStorageItems(\n+                ID, TEST_STRING, true, TEST_INT, TEST_STRING)).isEqualTo(dataStorageListing);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetDataStorageItemsWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initMocks(OWNER_USER, context);\n+\n+        assertThat(dataStorageApiService.getDataStorageItems(\n+                ID, TEST_STRING, true, TEST_INT, TEST_STRING)).isEqualTo(dataStorageListing);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyGetDataStorageItemsWhenStoragePermissionIsNotGranted() {\n+        initAclEntity(s3bucket, AclPermission.NO_READ);\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initMocks(SIMPLE_USER, context);\n+\n+        assertThrows(AccessDeniedException.class, () ->\n+                dataStorageApiService.getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyGetDataStorageItemsWhenCheckStorageSharedPermissionIsNotGranted() {\n+        final UserContext context = SecurityCreatorUtils.getUserContext(true);\n+        final AbstractDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER, false);\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initMocks(OWNER_USER, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NDIzMw=="}, "originalCommit": {"oid": "f8b82608fd1aa95ddd3001b1c1aea5f3399f0fb1"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNjcwMjY2", "url": "https://github.com/epam/cloud-pipeline/pull/1510#pullrequestreview-521670266", "createdAt": "2020-11-02T14:21:45Z", "commit": {"oid": "5f68b9578c7107d5e87c4c51792c01a17ce22c42"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDoyMTo0NVrOHsGX5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjoyMjoxOFrOHsLoJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAwMzgxMw==", "bodyText": "Let's not remove final", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r516003813", "createdAt": "2020-11-02T14:21:45Z", "author": {"login": "ekazachkova"}, "path": "api/src/main/java/com/epam/pipeline/acl/datastorage/FileShareMountApiService.java", "diffHunk": "@@ -14,27 +14,29 @@\n  * limitations under the License.\n  */\n \n-package com.epam.pipeline.manager.datastorage;\n+package com.epam.pipeline.acl.datastorage;\n \n import com.epam.pipeline.entity.datastorage.FileShareMount;\n+import com.epam.pipeline.manager.datastorage.FileShareMountManager;\n import com.epam.pipeline.security.acl.AclExpressions;\n-import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Service;\n \n @Service\n-@RequiredArgsConstructor\n public class FileShareMountApiService {\n \n-    private final FileShareMountManager fileShareMountManager;\n+    @Autowired\n+    private FileShareMountManager fileShareMountManager;\n \n     @PreAuthorize(AclExpressions.ADMIN_ONLY)\n-    public FileShareMount save(final FileShareMount fileShareMount) {\n+    public FileShareMount save(FileShareMount fileShareMount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f68b9578c7107d5e87c4c51792c01a17ce22c42"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAwNjE1Nw==", "bodyText": "What is the difference between calls:\ninitAclEntity(s3bucket, AclPermission.NO_READ);\n\nand\ninitAclEntity(s3bucket); ?\n\nLet's choose a single strategy", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r516006157", "createdAt": "2020-11-02T14:25:10Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceCommonTest.java", "diffHunk": "@@ -0,0 +1,634 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.DataStorageVO;\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.DataStorageStreamingContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageWithShareMount;\n+import com.epam.pipeline.entity.datastorage.StorageMountPath;\n+import com.epam.pipeline.entity.datastorage.StorageUsage;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.datastorage.DataStorageManager;\n+import com.epam.pipeline.manager.datastorage.RunMountService;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.GrantPermissionManager;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.util.AopTestUtils;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class DataStorageApiServiceCommonTest extends AbstractDataStorageAclTest {\n+\n+    private final DataStorageVO dataStorageVO = DatastorageCreatorUtils.getDataStorageVO();\n+    private final DataStorageWithShareMount storageShareMount =\n+            DatastorageCreatorUtils.getDataStorageWithShareMount();\n+    private final DataStorageStreamingContent dataStorageStreamingContent =\n+            DatastorageCreatorUtils.getDefaultDataStorageStreamingContent(inputStream);\n+    private final StorageUsage storageUsage = DatastorageCreatorUtils.getStorageUsage();\n+    private final StorageMountPath storageMountPath = DatastorageCreatorUtils.getStorageMountPath();\n+    private final PipelineRun pipelinerun = PipelineCreatorUtils.getPipelineRun(ID, SIMPLE_USER);\n+\n+    @Autowired\n+    private GrantPermissionManager grantPermissionManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private RunMountService mockRunMountService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnDataStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnDataStoragesWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnDataStoragesWhichPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        initAclEntity(anotherS3bucket, AclPermission.NO_READ);\n+        doReturn(mutableListOf(s3bucket, anotherS3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyDataStorageListWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket, AclPermission.NO_READ);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f68b9578c7107d5e87c4c51792c01a17ce22c42"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxMTQxMg==", "bodyText": "Looks like the result list is empty due to the fact that you didn't provide any permissions for default user - username. But you did it for SIMPLE_USER.", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r516011412", "createdAt": "2020-11-02T14:32:46Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceCommonTest.java", "diffHunk": "@@ -0,0 +1,634 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.DataStorageVO;\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.DataStorageStreamingContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageWithShareMount;\n+import com.epam.pipeline.entity.datastorage.StorageMountPath;\n+import com.epam.pipeline.entity.datastorage.StorageUsage;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.datastorage.DataStorageManager;\n+import com.epam.pipeline.manager.datastorage.RunMountService;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.GrantPermissionManager;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.util.AopTestUtils;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class DataStorageApiServiceCommonTest extends AbstractDataStorageAclTest {\n+\n+    private final DataStorageVO dataStorageVO = DatastorageCreatorUtils.getDataStorageVO();\n+    private final DataStorageWithShareMount storageShareMount =\n+            DatastorageCreatorUtils.getDataStorageWithShareMount();\n+    private final DataStorageStreamingContent dataStorageStreamingContent =\n+            DatastorageCreatorUtils.getDefaultDataStorageStreamingContent(inputStream);\n+    private final StorageUsage storageUsage = DatastorageCreatorUtils.getStorageUsage();\n+    private final StorageMountPath storageMountPath = DatastorageCreatorUtils.getStorageMountPath();\n+    private final PipelineRun pipelinerun = PipelineCreatorUtils.getPipelineRun(ID, SIMPLE_USER);\n+\n+    @Autowired\n+    private GrantPermissionManager grantPermissionManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private RunMountService mockRunMountService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnDataStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnDataStoragesWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnDataStoragesWhichPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        initAclEntity(anotherS3bucket, AclPermission.NO_READ);\n+        doReturn(mutableListOf(s3bucket, anotherS3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f68b9578c7107d5e87c4c51792c01a17ce22c42"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxNDEyNg==", "bodyText": "To reduce magic numbers usage and increase readability lets introduce a constants for permission masks.", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r516014126", "createdAt": "2020-11-02T14:36:45Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceCommonTest.java", "diffHunk": "@@ -0,0 +1,634 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.DataStorageVO;\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.DataStorageStreamingContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageWithShareMount;\n+import com.epam.pipeline.entity.datastorage.StorageMountPath;\n+import com.epam.pipeline.entity.datastorage.StorageUsage;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.datastorage.DataStorageManager;\n+import com.epam.pipeline.manager.datastorage.RunMountService;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.GrantPermissionManager;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.util.AopTestUtils;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class DataStorageApiServiceCommonTest extends AbstractDataStorageAclTest {\n+\n+    private final DataStorageVO dataStorageVO = DatastorageCreatorUtils.getDataStorageVO();\n+    private final DataStorageWithShareMount storageShareMount =\n+            DatastorageCreatorUtils.getDataStorageWithShareMount();\n+    private final DataStorageStreamingContent dataStorageStreamingContent =\n+            DatastorageCreatorUtils.getDefaultDataStorageStreamingContent(inputStream);\n+    private final StorageUsage storageUsage = DatastorageCreatorUtils.getStorageUsage();\n+    private final StorageMountPath storageMountPath = DatastorageCreatorUtils.getStorageMountPath();\n+    private final PipelineRun pipelinerun = PipelineCreatorUtils.getPipelineRun(ID, SIMPLE_USER);\n+\n+    @Autowired\n+    private GrantPermissionManager grantPermissionManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private RunMountService mockRunMountService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnDataStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnDataStoragesWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnDataStoragesWhichPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        initAclEntity(anotherS3bucket, AclPermission.NO_READ);\n+        doReturn(mutableListOf(s3bucket, anotherS3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyDataStorageListWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket, AclPermission.NO_READ);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnWritableDataStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getWritableStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnWritableDataStoragesWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.WRITE.getMask())));\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getWritableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f68b9578c7107d5e87c4c51792c01a17ce22c42"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzMzk1Ng==", "bodyText": "To my mind getStreamingContent method is file related  and should be into the DataStorageApiServiceFileTest class.", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r516033956", "createdAt": "2020-11-02T15:04:48Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceCommonTest.java", "diffHunk": "@@ -0,0 +1,634 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.DataStorageVO;\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.DataStorageStreamingContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageWithShareMount;\n+import com.epam.pipeline.entity.datastorage.StorageMountPath;\n+import com.epam.pipeline.entity.datastorage.StorageUsage;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.datastorage.DataStorageManager;\n+import com.epam.pipeline.manager.datastorage.RunMountService;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.GrantPermissionManager;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.util.AopTestUtils;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class DataStorageApiServiceCommonTest extends AbstractDataStorageAclTest {\n+\n+    private final DataStorageVO dataStorageVO = DatastorageCreatorUtils.getDataStorageVO();\n+    private final DataStorageWithShareMount storageShareMount =\n+            DatastorageCreatorUtils.getDataStorageWithShareMount();\n+    private final DataStorageStreamingContent dataStorageStreamingContent =\n+            DatastorageCreatorUtils.getDefaultDataStorageStreamingContent(inputStream);\n+    private final StorageUsage storageUsage = DatastorageCreatorUtils.getStorageUsage();\n+    private final StorageMountPath storageMountPath = DatastorageCreatorUtils.getStorageMountPath();\n+    private final PipelineRun pipelinerun = PipelineCreatorUtils.getPipelineRun(ID, SIMPLE_USER);\n+\n+    @Autowired\n+    private GrantPermissionManager grantPermissionManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private RunMountService mockRunMountService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnDataStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnDataStoragesWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnDataStoragesWhichPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        initAclEntity(anotherS3bucket, AclPermission.NO_READ);\n+        doReturn(mutableListOf(s3bucket, anotherS3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyDataStorageListWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket, AclPermission.NO_READ);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnWritableDataStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getWritableStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnWritableDataStoragesWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.WRITE.getMask())));\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getWritableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(3);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnWritableDataStoragesWhichPermissionIsGranted() {\n+        initAclEntity(s3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.WRITE.getMask())));\n+        initAclEntity(anotherS3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.WRITE.getMask())));\n+        doReturn(mutableListOf(s3bucket, anotherS3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getWritableStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyWritableDataStorageListWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.NO_WRITE.getMask())));\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getWritableStorages()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAvailableStoragesWithShareMountForAdmin() {\n+        doReturn(mutableListOf(storageShareMount)).when(mockDataStorageManager).getDataStoragesWithShareMountObject(ID);\n+\n+        assertThat(dataStorageApiService.getAvailableStoragesWithShareMount(ID)).hasSize(1).contains(storageShareMount);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWithShareMountWhenReadPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(mutableListOf(storageShareMount)).when(mockDataStorageManager).getDataStoragesWithShareMountObject(ID);\n+\n+        assertThat(dataStorageApiService.getAvailableStoragesWithShareMount(ID)).hasSize(1).contains(storageShareMount);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWithShareMountWhenWritePermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.WRITE);\n+        doReturn(mutableListOf(storageShareMount)).when(mockDataStorageManager).getDataStoragesWithShareMountObject(ID);\n+\n+        assertThat(dataStorageApiService.getAvailableStoragesWithShareMount(ID)).hasSize(1).contains(storageShareMount);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyAvailableStoragesWithShareMountWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket);\n+        doReturn(mutableListOf(storageShareMount)).when(mockDataStorageManager).getDataStoragesWithShareMountObject(ID);\n+\n+        assertThat(dataStorageApiService.getAvailableStoragesWithShareMount(ID)).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAvailableStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getAvailableStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWhenReadPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getAvailableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWhenWritePermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.WRITE);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getAvailableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(2);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWhichPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        initAclEntity(anotherS3bucket);\n+        doReturn(mutableListOf(s3bucket, anotherS3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getAvailableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyAvailableStoragesWhenWritePermissionIsNotGranted() {\n+        initAclEntity(s3bucket);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getAvailableStorages()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadDataStorageForAdmin() {\n+        final UserContext context = SecurityCreatorUtils.getUserContext();\n+        doReturn(s3bucket).when(mockDataStorageManager).load(ID);\n+        mockUserContext(context);\n+\n+        assertThat(dataStorageApiService.load(ID)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadDataStorageWhenPermissionIsGranted() {\n+        final UserContext context = SecurityCreatorUtils.getUserContext();\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(s3bucket).when(mockDataStorageManager).load(ID);\n+        initUserAndEntityMocks(OWNER_USER, s3bucket, context);\n+\n+        final AbstractDataStorage returnedDataStorage = dataStorageApiService.load(ID);\n+\n+        assertThat(returnedDataStorage).isEqualTo(s3bucket);\n+        assertThat(returnedDataStorage.getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadDataStorageWhenStoragePermissionIsNotGranted() {\n+        initAclEntity(s3bucket, AclPermission.NO_READ);\n+        doReturn(s3bucket).when(mockDataStorageManager).load(ID);\n+        mockS3bucket(s3bucket);\n+        mockAuthUser(SIMPLE_USER);\n+\n+        assertThrows(AccessDeniedException.class, () -> dataStorageApiService.load(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadDataStorageWhenCheckStorageSharedPermissionIsNotGranted() {\n+        final UserContext context = SecurityCreatorUtils.getUserContext(true);\n+        final AbstractDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER, false);\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(s3bucket).when(mockDataStorageManager).load(ID);\n+        initUserAndEntityMocks(OWNER_USER, s3bucket, context);\n+\n+        assertThrows(AccessDeniedException.class, () -> dataStorageApiService.load(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadByNameOrIdForAdmin() {\n+        doReturn(s3bucket).when(mockDataStorageManager).loadByNameOrId(TEST_STRING);\n+\n+        assertThat(dataStorageApiService.loadByNameOrId(TEST_STRING)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadByNameOrIdWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(s3bucket).when(mockDataStorageManager).loadByNameOrId(TEST_STRING);\n+\n+        final AbstractDataStorage returnedDataStorage = dataStorageApiService.loadByNameOrId(TEST_STRING);\n+\n+        assertThat(returnedDataStorage).isEqualTo(s3bucket);\n+        assertThat(returnedDataStorage.getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadingByNameOrIdWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket, AclPermission.NO_READ);\n+        doReturn(s3bucket).when(mockDataStorageManager).loadByNameOrId(TEST_STRING);\n+\n+        assertThrows(AccessDeniedException.class, () -> dataStorageApiService.loadByNameOrId(TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadByPathOrIdForAdmin() {\n+        doReturn(s3bucket).when(mockDataStorageManager).loadByPathOrId(TEST_STRING);\n+\n+        assertThat(dataStorageApiService.loadByPathOrId(TEST_STRING)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadByPathOrIdWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(s3bucket).when(mockDataStorageManager).loadByPathOrId(TEST_STRING);\n+\n+        final AbstractDataStorage returnedDataStorage = dataStorageApiService.loadByPathOrId(TEST_STRING);\n+\n+        assertThat(returnedDataStorage).isEqualTo(s3bucket);\n+        assertThat(returnedDataStorage.getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadingByPathOrIdWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket, AclPermission.NO_READ);\n+        doReturn(s3bucket).when(mockDataStorageManager).loadByPathOrId(TEST_STRING);\n+\n+        assertThrows(AccessDeniedException.class, () -> dataStorageApiService.loadByPathOrId(TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateDataStorageForAdmin() {\n+        initAclEntity(s3bucket);\n+        final DataStorageManager target = AopTestUtils.getUltimateTargetObject(mockDataStorageManager);\n+        doReturn(s3bucket).when(target).update(dataStorageVO);\n+\n+        assertThat(dataStorageApiService.update(dataStorageVO)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateDataStorageWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.WRITE);\n+        mockS3bucket(s3bucket);\n+        mockAuthUser(OWNER_USER);\n+        final DataStorageManager target = AopTestUtils.getUltimateTargetObject(mockDataStorageManager);\n+        doReturn(s3bucket).when(target).update(dataStorageVO);\n+\n+        final AbstractDataStorage returnedStorage = dataStorageApiService.update(dataStorageVO);\n+\n+        assertThat(returnedStorage).isEqualTo(s3bucket);\n+        assertThat(returnedStorage.getMask()).isEqualTo(2);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateDataStorageWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket);\n+        mockS3bucket(s3bucket);\n+        mockAuthUser(SIMPLE_USER);\n+        final DataStorageManager target = AopTestUtils.getUltimateTargetObject(mockDataStorageManager);\n+        doReturn(s3bucket).when(target).update(dataStorageVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> dataStorageApiService.update(dataStorageVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdatePolicyForAdmin() {\n+        doReturn(s3bucket).when(mockDataStorageManager).updatePolicy(dataStorageVO);\n+\n+        assertThat(dataStorageApiService.updatePolicy(dataStorageVO)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdatePolicyWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.OWNER);\n+        mockS3bucket(s3bucket);\n+        mockAuthUser(OWNER_USER);\n+        doReturn(s3bucket).when(mockDataStorageManager).updatePolicy(dataStorageVO);\n+\n+        assertThat(dataStorageApiService.updatePolicy(dataStorageVO)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdatePolicyWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket);\n+        mockS3bucket(s3bucket);\n+        mockAuthUser(SIMPLE_USER);\n+        doReturn(s3bucket).when(mockDataStorageManager).updatePolicy(dataStorageVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> dataStorageApiService.updatePolicy(dataStorageVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteDataStorageForAdmin() {\n+        final DataStorageManager target = AopTestUtils.getUltimateTargetObject(mockDataStorageManager);\n+        doReturn(s3bucket).when(target).delete(ID, true);\n+\n+        assertThat(dataStorageApiService.delete(ID, true)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = STORAGE_MANAGER_ROLE)\n+    public void shouldDeleteDataStorageWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.WRITE);\n+        mockS3bucket(s3bucket);\n+        mockAuthUser(OWNER_USER);\n+        final DataStorageManager target = AopTestUtils.getUltimateTargetObject(mockDataStorageManager);\n+        doReturn(s3bucket).when(target).delete(ID, true);\n+\n+        assertThat(dataStorageApiService.delete(ID, true)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = STORAGE_MANAGER_ROLE)\n+    public void shouldDenyDeleteDataStorageWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket);\n+        mockS3bucket(s3bucket);\n+        mockAuthUser(SIMPLE_USER);\n+        final DataStorageManager target = AopTestUtils.getUltimateTargetObject(mockDataStorageManager);\n+        doReturn(s3bucket).when(target).delete(ID, true);\n+\n+        assertThrows(AccessDeniedException.class, () -> dataStorageApiService.delete(ID, true));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteDataStorageWhenRoleIsNotGranted() {\n+        initAclEntity(s3bucket, AclPermission.WRITE);\n+        mockS3bucket(s3bucket);\n+        mockAuthUser(SIMPLE_USER);\n+        final DataStorageManager target = AopTestUtils.getUltimateTargetObject(mockDataStorageManager);\n+        doReturn(s3bucket).when(target).delete(ID, true);\n+\n+        assertThrows(AccessDeniedException.class, () -> dataStorageApiService.delete(ID, true));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetStreamingContentForAdmin() {\n+        doReturn(dataStorageStreamingContent).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f68b9578c7107d5e87c4c51792c01a17ce22c42"}, "originalPosition": 466}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzODgyNg==", "bodyText": "Could we use here AbstractDataStorageAclTest#context?\nAlso, could we create a new field for AbstractDataStorageAclTest:\nprotected final UserContext externalContext = SecurityCreatorUtils.getUserContext(true);", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r516038826", "createdAt": "2020-11-02T15:11:44Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceCommonTest.java", "diffHunk": "@@ -0,0 +1,634 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.DataStorageVO;\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.DataStorageStreamingContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageWithShareMount;\n+import com.epam.pipeline.entity.datastorage.StorageMountPath;\n+import com.epam.pipeline.entity.datastorage.StorageUsage;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.datastorage.DataStorageManager;\n+import com.epam.pipeline.manager.datastorage.RunMountService;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.GrantPermissionManager;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.util.AopTestUtils;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class DataStorageApiServiceCommonTest extends AbstractDataStorageAclTest {\n+\n+    private final DataStorageVO dataStorageVO = DatastorageCreatorUtils.getDataStorageVO();\n+    private final DataStorageWithShareMount storageShareMount =\n+            DatastorageCreatorUtils.getDataStorageWithShareMount();\n+    private final DataStorageStreamingContent dataStorageStreamingContent =\n+            DatastorageCreatorUtils.getDefaultDataStorageStreamingContent(inputStream);\n+    private final StorageUsage storageUsage = DatastorageCreatorUtils.getStorageUsage();\n+    private final StorageMountPath storageMountPath = DatastorageCreatorUtils.getStorageMountPath();\n+    private final PipelineRun pipelinerun = PipelineCreatorUtils.getPipelineRun(ID, SIMPLE_USER);\n+\n+    @Autowired\n+    private GrantPermissionManager grantPermissionManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private RunMountService mockRunMountService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnDataStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnDataStoragesWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnDataStoragesWhichPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        initAclEntity(anotherS3bucket, AclPermission.NO_READ);\n+        doReturn(mutableListOf(s3bucket, anotherS3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyDataStorageListWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket, AclPermission.NO_READ);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnWritableDataStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getWritableStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnWritableDataStoragesWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.WRITE.getMask())));\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getWritableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(3);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnWritableDataStoragesWhichPermissionIsGranted() {\n+        initAclEntity(s3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.WRITE.getMask())));\n+        initAclEntity(anotherS3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.WRITE.getMask())));\n+        doReturn(mutableListOf(s3bucket, anotherS3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getWritableStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyWritableDataStorageListWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.NO_WRITE.getMask())));\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getWritableStorages()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAvailableStoragesWithShareMountForAdmin() {\n+        doReturn(mutableListOf(storageShareMount)).when(mockDataStorageManager).getDataStoragesWithShareMountObject(ID);\n+\n+        assertThat(dataStorageApiService.getAvailableStoragesWithShareMount(ID)).hasSize(1).contains(storageShareMount);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWithShareMountWhenReadPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(mutableListOf(storageShareMount)).when(mockDataStorageManager).getDataStoragesWithShareMountObject(ID);\n+\n+        assertThat(dataStorageApiService.getAvailableStoragesWithShareMount(ID)).hasSize(1).contains(storageShareMount);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWithShareMountWhenWritePermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.WRITE);\n+        doReturn(mutableListOf(storageShareMount)).when(mockDataStorageManager).getDataStoragesWithShareMountObject(ID);\n+\n+        assertThat(dataStorageApiService.getAvailableStoragesWithShareMount(ID)).hasSize(1).contains(storageShareMount);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyAvailableStoragesWithShareMountWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket);\n+        doReturn(mutableListOf(storageShareMount)).when(mockDataStorageManager).getDataStoragesWithShareMountObject(ID);\n+\n+        assertThat(dataStorageApiService.getAvailableStoragesWithShareMount(ID)).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAvailableStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getAvailableStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWhenReadPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getAvailableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWhenWritePermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.WRITE);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getAvailableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(2);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWhichPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        initAclEntity(anotherS3bucket);\n+        doReturn(mutableListOf(s3bucket, anotherS3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getAvailableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyAvailableStoragesWhenWritePermissionIsNotGranted() {\n+        initAclEntity(s3bucket);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getAvailableStorages()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadDataStorageForAdmin() {\n+        final UserContext context = SecurityCreatorUtils.getUserContext();\n+        doReturn(s3bucket).when(mockDataStorageManager).load(ID);\n+        mockUserContext(context);\n+\n+        assertThat(dataStorageApiService.load(ID)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadDataStorageWhenPermissionIsGranted() {\n+        final UserContext context = SecurityCreatorUtils.getUserContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f68b9578c7107d5e87c4c51792c01a17ce22c42"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0ODg2Mw==", "bodyText": "To my mind the temporary credentials generation is the data storage related operation. I would prefer to move it DataStorageApiSeviceCommonTest", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r516048863", "createdAt": "2020-11-02T15:25:40Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceFileTest.java", "diffHunk": "@@ -0,0 +1,1209 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.data.storage.UpdateDataStorageItemVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorageItem;\n+import com.epam.pipeline.entity.datastorage.ContentDisposition;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageDownloadFileUrl;\n+import com.epam.pipeline.entity.datastorage.DataStorageFile;\n+import com.epam.pipeline.entity.datastorage.DataStorageItemContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageListing;\n+import com.epam.pipeline.entity.datastorage.PathDescription;\n+import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.cloud.TemporaryCredentialsManager;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.anyLong;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+public class DataStorageApiServiceFileTest extends AbstractDataStorageAclTest {\n+\n+    private final DataStorageListing dataStorageListing = DatastorageCreatorUtils.getDataStorageListing();\n+    private final AbstractDataStorageItem dataStorageFile = DatastorageCreatorUtils.getDataStorageFile();\n+    private final DataStorageDownloadFileUrl downloadFileUrl =\n+            DatastorageCreatorUtils.getDataStorageDownloadFileUrl();\n+    private final DataStorageItemContent dataStorageItemContent =\n+            DatastorageCreatorUtils.getDefaultDataStorageItemContent();\n+    private final TemporaryCredentials temporaryCredentials = DatastorageCreatorUtils.getTemporaryCredentials();\n+\n+    private final List<PathDescription> pathDescriptionList = DatastorageCreatorUtils.getPathDescriptionList();\n+    private final List<String> testList = Collections.singletonList(TEST_STRING);\n+    private final List<UpdateDataStorageItemVO> dataStorageItemVOList =\n+            DatastorageCreatorUtils.getUpdateDataStorageItemVOList();\n+    private final List<DataStorageFile> dataStorageFileList = DatastorageCreatorUtils.getDataStorageFileList();\n+    private final List<DataStorageDownloadFileUrl> downloadFileUrlList =\n+            DatastorageCreatorUtils.getDataStorageDownloadFileUrlList();\n+    private final List<DataStorageAction> dataStorageActionList = DatastorageCreatorUtils.getDataStorageActionList();\n+\n+    @Autowired\n+    private TemporaryCredentialsManager mockTemporaryCredentialsManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f68b9578c7107d5e87c4c51792c01a17ce22c42"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4MDY5Ng==", "bodyText": "It looks a bit confusing: test runs with SIMPLE_USER environment but then mocks OWNER_USER.", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r516080696", "createdAt": "2020-11-02T16:09:14Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceFileTest.java", "diffHunk": "@@ -0,0 +1,1209 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.data.storage.UpdateDataStorageItemVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorageItem;\n+import com.epam.pipeline.entity.datastorage.ContentDisposition;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageDownloadFileUrl;\n+import com.epam.pipeline.entity.datastorage.DataStorageFile;\n+import com.epam.pipeline.entity.datastorage.DataStorageItemContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageListing;\n+import com.epam.pipeline.entity.datastorage.PathDescription;\n+import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.cloud.TemporaryCredentialsManager;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.anyLong;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+public class DataStorageApiServiceFileTest extends AbstractDataStorageAclTest {\n+\n+    private final DataStorageListing dataStorageListing = DatastorageCreatorUtils.getDataStorageListing();\n+    private final AbstractDataStorageItem dataStorageFile = DatastorageCreatorUtils.getDataStorageFile();\n+    private final DataStorageDownloadFileUrl downloadFileUrl =\n+            DatastorageCreatorUtils.getDataStorageDownloadFileUrl();\n+    private final DataStorageItemContent dataStorageItemContent =\n+            DatastorageCreatorUtils.getDefaultDataStorageItemContent();\n+    private final TemporaryCredentials temporaryCredentials = DatastorageCreatorUtils.getTemporaryCredentials();\n+\n+    private final List<PathDescription> pathDescriptionList = DatastorageCreatorUtils.getPathDescriptionList();\n+    private final List<String> testList = Collections.singletonList(TEST_STRING);\n+    private final List<UpdateDataStorageItemVO> dataStorageItemVOList =\n+            DatastorageCreatorUtils.getUpdateDataStorageItemVOList();\n+    private final List<DataStorageFile> dataStorageFileList = DatastorageCreatorUtils.getDataStorageFileList();\n+    private final List<DataStorageDownloadFileUrl> downloadFileUrlList =\n+            DatastorageCreatorUtils.getDataStorageDownloadFileUrlList();\n+    private final List<DataStorageAction> dataStorageActionList = DatastorageCreatorUtils.getDataStorageActionList();\n+\n+    @Autowired\n+    private TemporaryCredentialsManager mockTemporaryCredentialsManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetDataStorageItemsForAdmin() {\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        mockUserContext(context);\n+\n+        assertThat(dataStorageApiService.getDataStorageItems(\n+                ID, TEST_STRING, true, TEST_INT, TEST_STRING)).isEqualTo(dataStorageListing);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetDataStorageItemsWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initUserAndEntityMocks(OWNER_USER, s3bucket, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f68b9578c7107d5e87c4c51792c01a17ce22c42"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4NDcxNQ==", "bodyText": "It seems that the lines\n        mockS3bucket(s3bucket);\n        mockAuthUser(OWNER_USER);\n\nhave no effect to the test result", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r516084715", "createdAt": "2020-11-02T16:14:48Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceRuleTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.entity.datastorage.rules.DataStorageRule;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.manager.datastorage.DataStorageRuleManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class DataStorageApiServiceRuleTest extends AbstractDataStorageAclTest {\n+\n+    private final DataStorageRule dataStorageRule = DatastorageCreatorUtils.getDataStorageRule();\n+    private final Pipeline pipeline = PipelineCreatorUtils.getPipeline(OWNER_USER);\n+    private final List<DataStorageRule> dataStorageRuleList = DatastorageCreatorUtils.getDataStorageRuleList();\n+\n+    @Autowired\n+    private DataStorageRuleManager mockDataStorageRuleManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateRuleForAdmin() {\n+        doReturn(dataStorageRule).when(mockDataStorageRuleManager).createRule(dataStorageRule);\n+\n+        assertThat(dataStorageApiService.createRule(dataStorageRule)).isEqualTo(dataStorageRule);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldCreateRuleWhenPermissionIsGranted() {\n+        initAclEntity(pipeline, AclPermission.WRITE);\n+        mockS3bucket(s3bucket);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f68b9578c7107d5e87c4c51792c01a17ce22c42"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4OTg5NA==", "bodyText": "I would prefer to add at least one element to set", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r516089894", "createdAt": "2020-11-02T16:22:18Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/test/creator/CommonCreatorConstants.java", "diffHunk": "@@ -18,15 +18,19 @@\n \n import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n \n public final class CommonCreatorConstants {\n \n     public static final long ID = 1L;\n     public static final long ID_2 = 2L;\n     public static final int TEST_INT = 4;\n     public static final String TEST_STRING = \"TEST\";\n-    public static final String TEST_STRING_2 = \"TEST_2\";\n     public static final List<String> TEST_STRING_LIST = Collections.singletonList(TEST_STRING);\n+    public static final byte[] TEST_ARRAY = {1, 1, 1};\n+    public static final Map<String, String> TEST_STRING_MAP = Collections.singletonMap(TEST_STRING, TEST_STRING);\n+    public static final Set<String> TEST_STRING_SET = Collections.emptySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f68b9578c7107d5e87c4c51792c01a17ce22c42"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MDk0MDk4", "url": "https://github.com/epam/cloud-pipeline/pull/1510#pullrequestreview-524094098", "createdAt": "2020-11-05T09:54:28Z", "commit": {"oid": "ce952e92bf17042de60cde9578da51b89dc92cf1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOTo1NDoyOFrOHt7jLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo0OTo1OVrOHt9sqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyMzYzMQ==", "bodyText": "Could we turn back constructor injection?", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r517923631", "createdAt": "2020-11-05T09:54:28Z", "author": {"login": "ekazachkova"}, "path": "api/src/main/java/com/epam/pipeline/acl/datastorage/FileShareMountApiService.java", "diffHunk": "@@ -14,19 +14,20 @@\n  * limitations under the License.\n  */\n \n-package com.epam.pipeline.manager.datastorage;\n+package com.epam.pipeline.acl.datastorage;\n \n import com.epam.pipeline.entity.datastorage.FileShareMount;\n+import com.epam.pipeline.manager.datastorage.FileShareMountManager;\n import com.epam.pipeline.security.acl.AclExpressions;\n-import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Service;\n \n @Service\n-@RequiredArgsConstructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce952e92bf17042de60cde9578da51b89dc92cf1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1NzgxMA==", "bodyText": "Looks a bit confusing:\n\n@WithMockUser(username = SIMPLE_USER) - runs test with SIMPLE_USER\ninitAclEntity(s3bucket, AclPermission.READ);- grants permission for SIMPLE_USER\ninitUserAndEntityMocks(OWNER_USER, s3bucket, context); - mocks auth for OWNER_USER\n\nTo my mind we should use one user - SIMPLE_USER for all actions.", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r517957810", "createdAt": "2020-11-05T10:48:22Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceCommonTest.java", "diffHunk": "@@ -0,0 +1,649 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.DataStorageVO;\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageWithShareMount;\n+import com.epam.pipeline.entity.datastorage.StorageMountPath;\n+import com.epam.pipeline.entity.datastorage.StorageUsage;\n+import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.cloud.TemporaryCredentialsManager;\n+import com.epam.pipeline.manager.datastorage.DataStorageManager;\n+import com.epam.pipeline.manager.datastorage.RunMountService;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.GrantPermissionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.util.AopTestUtils;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class DataStorageApiServiceCommonTest extends AbstractDataStorageAclTest {\n+\n+    private static final int READ_PERMISSION = 1;\n+    private static final int WRITE_PERMISSION = 2;\n+    private static final int READ_AND_WRITE_PERMISSION = 3;\n+\n+    private final DataStorageVO dataStorageVO = DatastorageCreatorUtils.getDataStorageVO();\n+    private final DataStorageWithShareMount storageShareMount =\n+            DatastorageCreatorUtils.getDataStorageWithShareMount();\n+    private final TemporaryCredentials temporaryCredentials = DatastorageCreatorUtils.getTemporaryCredentials();\n+    private final StorageUsage storageUsage = DatastorageCreatorUtils.getStorageUsage();\n+    private final StorageMountPath storageMountPath = DatastorageCreatorUtils.getStorageMountPath();\n+    private final PipelineRun pipelinerun = PipelineCreatorUtils.getPipelineRun(ID, SIMPLE_USER);\n+    private final List<DataStorageAction> dataStorageActionList = DatastorageCreatorUtils.getDataStorageActionList();\n+\n+    @Autowired\n+    private GrantPermissionManager grantPermissionManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private RunMountService mockRunMountService;\n+\n+    @Autowired\n+    private TemporaryCredentialsManager mockTemporaryCredentialsManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnDataStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnDataStoragesWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(READ_PERMISSION);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnDataStoragesWhichPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        initAclEntity(anotherS3bucket);\n+        doReturn(mutableListOf(s3bucket, anotherS3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyDataStorageListWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getDataStorages()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnWritableDataStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getWritableStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnWritableDataStoragesWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.WRITE.getMask())));\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getWritableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(READ_AND_WRITE_PERMISSION);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnWritableDataStoragesWhichPermissionIsGranted() {\n+        initAclEntity(s3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.WRITE.getMask())));\n+        initAclEntity(anotherS3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.WRITE.getMask())));\n+        doReturn(mutableListOf(s3bucket, anotherS3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getWritableStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyWritableDataStorageListWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket, Arrays.asList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask()),\n+                new UserPermission(SIMPLE_USER, AclPermission.NO_WRITE.getMask())));\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getWritableStorages()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAvailableStoragesWithShareMountForAdmin() {\n+        doReturn(mutableListOf(storageShareMount)).when(mockDataStorageManager).getDataStoragesWithShareMountObject(ID);\n+\n+        assertThat(dataStorageApiService.getAvailableStoragesWithShareMount(ID)).hasSize(1).contains(storageShareMount);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWithShareMountWhenReadPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(mutableListOf(storageShareMount)).when(mockDataStorageManager).getDataStoragesWithShareMountObject(ID);\n+\n+        assertThat(dataStorageApiService.getAvailableStoragesWithShareMount(ID)).hasSize(1).contains(storageShareMount);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWithShareMountWhenWritePermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.WRITE);\n+        doReturn(mutableListOf(storageShareMount)).when(mockDataStorageManager).getDataStoragesWithShareMountObject(ID);\n+\n+        assertThat(dataStorageApiService.getAvailableStoragesWithShareMount(ID)).hasSize(1).contains(storageShareMount);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyAvailableStoragesWithShareMountWhenPermissionIsNotGranted() {\n+        initAclEntity(s3bucket);\n+        doReturn(mutableListOf(storageShareMount)).when(mockDataStorageManager).getDataStoragesWithShareMountObject(ID);\n+\n+        assertThat(dataStorageApiService.getAvailableStoragesWithShareMount(ID)).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAvailableStoragesForAdmin() {\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getAvailableStorages()).hasSize(1).contains(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWhenReadPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getAvailableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(READ_PERMISSION);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWhenWritePermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.WRITE);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getAvailableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(WRITE_PERMISSION);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnAvailableStoragesWhichPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        initAclEntity(anotherS3bucket);\n+        doReturn(mutableListOf(s3bucket, anotherS3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        final List<AbstractDataStorage> returnedDataStorages = dataStorageApiService.getAvailableStorages();\n+\n+        assertThat(returnedDataStorages).hasSize(1).contains(s3bucket);\n+        assertThat(returnedDataStorages.get(0).getMask()).isEqualTo(READ_PERMISSION);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyAvailableStoragesWhenWritePermissionIsNotGranted() {\n+        initAclEntity(s3bucket);\n+        doReturn(mutableListOf(s3bucket)).when(mockDataStorageManager).getDataStorages();\n+\n+        assertThat(dataStorageApiService.getAvailableStorages()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadDataStorageForAdmin() {\n+        doReturn(s3bucket).when(mockDataStorageManager).load(ID);\n+        mockUserContext(context);\n+\n+        assertThat(dataStorageApiService.load(ID)).isEqualTo(s3bucket);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadDataStorageWhenPermissionIsGranted() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce952e92bf17042de60cde9578da51b89dc92cf1"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1ODgyNQ==", "bodyText": "It still looks a bit confusing", "url": "https://github.com/epam/cloud-pipeline/pull/1510#discussion_r517958825", "createdAt": "2020-11-05T10:49:59Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/datastorage/DataStorageApiServiceFileTest.java", "diffHunk": "@@ -0,0 +1,1209 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.datastorage;\n+\n+import com.epam.pipeline.controller.vo.data.storage.UpdateDataStorageItemVO;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorageItem;\n+import com.epam.pipeline.entity.datastorage.ContentDisposition;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageDownloadFileUrl;\n+import com.epam.pipeline.entity.datastorage.DataStorageFile;\n+import com.epam.pipeline.entity.datastorage.DataStorageItemContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageListing;\n+import com.epam.pipeline.entity.datastorage.PathDescription;\n+import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.cloud.TemporaryCredentialsManager;\n+import com.epam.pipeline.security.UserContext;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.anyLong;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+public class DataStorageApiServiceFileTest extends AbstractDataStorageAclTest {\n+\n+    private final DataStorageListing dataStorageListing = DatastorageCreatorUtils.getDataStorageListing();\n+    private final AbstractDataStorageItem dataStorageFile = DatastorageCreatorUtils.getDataStorageFile();\n+    private final DataStorageDownloadFileUrl downloadFileUrl =\n+            DatastorageCreatorUtils.getDataStorageDownloadFileUrl();\n+    private final DataStorageItemContent dataStorageItemContent =\n+            DatastorageCreatorUtils.getDefaultDataStorageItemContent();\n+    private final TemporaryCredentials temporaryCredentials = DatastorageCreatorUtils.getTemporaryCredentials();\n+\n+    private final List<PathDescription> pathDescriptionList = DatastorageCreatorUtils.getPathDescriptionList();\n+    private final List<String> testList = Collections.singletonList(TEST_STRING);\n+    private final List<UpdateDataStorageItemVO> dataStorageItemVOList =\n+            DatastorageCreatorUtils.getUpdateDataStorageItemVOList();\n+    private final List<DataStorageFile> dataStorageFileList = DatastorageCreatorUtils.getDataStorageFileList();\n+    private final List<DataStorageDownloadFileUrl> downloadFileUrlList =\n+            DatastorageCreatorUtils.getDataStorageDownloadFileUrlList();\n+    private final List<DataStorageAction> dataStorageActionList = DatastorageCreatorUtils.getDataStorageActionList();\n+\n+    @Autowired\n+    private TemporaryCredentialsManager mockTemporaryCredentialsManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetDataStorageItemsForAdmin() {\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        mockUserContext(context);\n+\n+        assertThat(dataStorageApiService.getDataStorageItems(\n+                ID, TEST_STRING, true, TEST_INT, TEST_STRING)).isEqualTo(dataStorageListing);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetDataStorageItemsWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(dataStorageListing).when(mockDataStorageManager)\n+                .getDataStorageItems(ID, TEST_STRING, true, TEST_INT, TEST_STRING);\n+        initUserAndEntityMocks(OWNER_USER, s3bucket, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4MDY5Ng=="}, "originalCommit": {"oid": "5f68b9578c7107d5e87c4c51792c01a17ce22c42"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDc5MTQ3", "url": "https://github.com/epam/cloud-pipeline/pull/1510#pullrequestreview-526079147", "createdAt": "2020-11-09T09:44:48Z", "commit": {"oid": "e8d01d5d6dac129a78c7d4d12c80b5f3d83b442d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b550ed59ef67bd17097299e2fc79d8b456d60ef", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/9b550ed59ef67bd17097299e2fc79d8b456d60ef", "committedDate": "2020-11-10T11:15:55Z", "message": "Issue #1404: Tests for DataStorageApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f480ccd0e25487d598a9c602305c090f3ae0e081", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/f480ccd0e25487d598a9c602305c090f3ae0e081", "committedDate": "2020-11-10T11:16:28Z", "message": "Issue #1404: Tests for DataStorageApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4147ed3add4e693b4719a22c35ee0748add6d465", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/4147ed3add4e693b4719a22c35ee0748add6d465", "committedDate": "2020-11-10T11:16:38Z", "message": "Issue #1404: DataStorage Acl tests are separated\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45baaab480026d1161d1b7c631f07a610a1ca06d", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/45baaab480026d1161d1b7c631f07a610a1ca06d", "committedDate": "2020-11-10T11:17:12Z", "message": "Issue #1404: Tests refactored, merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c03195ce915aecf3ebb7fefa5984b6d3ffe77c50", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/c03195ce915aecf3ebb7fefa5984b6d3ffe77c50", "committedDate": "2020-11-10T11:17:12Z", "message": "Issue #1404: Minor style fixes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72d951349dd610e369d6a57a0b9e962e075b615f", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/72d951349dd610e369d6a57a0b9e962e075b615f", "committedDate": "2020-11-10T11:18:57Z", "message": "Issue #1404: Fixes and refactoring in accordance with comments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f13f0aa538db6b1a8146d4a759329e245e484bd", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/2f13f0aa538db6b1a8146d4a759329e245e484bd", "committedDate": "2020-11-10T11:19:06Z", "message": "Issue #1404: And more corrections and improvements\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4527260aa8d8afeab4c636c4f41066760fdf756e", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/4527260aa8d8afeab4c636c4f41066760fdf756e", "committedDate": "2020-11-10T11:19:06Z", "message": "Issue #1404: Fixed issues with OWNER and SIMPLE users\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a48b13e8724ae54fbaeba202f6fd571f16ab421", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/3a48b13e8724ae54fbaeba202f6fd571f16ab421", "committedDate": "2020-11-10T12:10:24Z", "message": "Issue #1405: Rebase done and merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8d01d5d6dac129a78c7d4d12c80b5f3d83b442d", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/e8d01d5d6dac129a78c7d4d12c80b5f3d83b442d", "committedDate": "2020-11-05T14:00:05Z", "message": "Issue #1404: Fixed issues with OWNER and SIMPLE users\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}, "afterCommit": {"oid": "3a48b13e8724ae54fbaeba202f6fd571f16ab421", "author": {"user": {"login": "YouKofan", "name": "Iurii Kofanov"}}, "url": "https://github.com/epam/cloud-pipeline/commit/3a48b13e8724ae54fbaeba202f6fd571f16ab421", "committedDate": "2020-11-10T12:10:24Z", "message": "Issue #1405: Rebase done and merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3681, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}