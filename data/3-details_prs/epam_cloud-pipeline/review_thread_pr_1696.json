{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MDY2NDMx", "number": 1696, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo0MDoxM1rOFJvaCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo0MTo1M1rOFJvbQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzU4MjE4OnYy", "diffSide": "RIGHT", "path": "deploy/docker/cp-run-policy-manager/policy_manager.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo0MDoxM1rOIMMXQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo0MDoxM1rOIMMXQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1NjM4NQ==", "bodyText": "Let's make these paths customizable via env vars", "url": "https://github.com/epam/cloud-pipeline/pull/1696#discussion_r549656385", "createdAt": "2020-12-29T10:40:13Z", "author": {"login": "mzueva"}, "path": "deploy/docker/cp-run-policy-manager/policy_manager.py", "diffHunk": "@@ -0,0 +1,188 @@\n+# Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import datetime\n+import os\n+import re\n+import time\n+import uuid\n+import yaml\n+from kubernetes import client, config\n+\n+NAMESPACE = 'default'\n+CALICO_NETPOL_PLURAL = 'networkpolicies'\n+CALICO_RESOURCES_VERSION = 'v1'\n+CALICO_RESOURCES_GROUP = 'crd.projectcalico.org'\n+K8S_OBJ_NAME_KEY = 'name'\n+K8S_LABELS_KEY = 'labels'\n+K8S_METADATA_KEY = 'metadata'\n+K8S_METADATA_NAME_FIELD_SELECTOR = 'metadata.name={}'\n+NETPOL_OWNER_PLACEHOLDER = '<OWNER>'\n+NETPOL_NAME_PREFIX_PLACEHOLDER = '<POLICY_NAME_PREFIX>'\n+OWNER_LABEL = 'owner'\n+PIPELINE_POD_LABEL_SELECTOR = 'type=pipeline'\n+PIPELINE_POD_PHASE_SELECTOR = 'status.phase={}'\n+SENSITIVE_LABEL = 'sensitive'\n+TRACKED_POD_PHASES = ['Pending', 'Running']\n+COMMON_NETPOL_TEMPLATE_PATH = '/policy-manager/common-run-policy-template.yaml'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d76a689a0d23b0491a3ebced628d05775588b2ef"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzU4NTI5OnYy", "diffSide": "RIGHT", "path": "deploy/docker/cp-run-policy-manager/policy_manager.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo0MTo1M1rOIMMZGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo0MTo1M1rOIMMZGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1Njg1OQ==", "bodyText": "Username is often a email, let's split name by @ sign at first, as it is done in other services. E.g. mariia_zueva@epam.com -> mariia-zueva", "url": "https://github.com/epam/cloud-pipeline/pull/1696#discussion_r549656859", "createdAt": "2020-12-29T10:41:53Z", "author": {"login": "mzueva"}, "path": "deploy/docker/cp-run-policy-manager/policy_manager.py", "diffHunk": "@@ -0,0 +1,188 @@\n+# Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import datetime\n+import os\n+import re\n+import time\n+import uuid\n+import yaml\n+from kubernetes import client, config\n+\n+NAMESPACE = 'default'\n+CALICO_NETPOL_PLURAL = 'networkpolicies'\n+CALICO_RESOURCES_VERSION = 'v1'\n+CALICO_RESOURCES_GROUP = 'crd.projectcalico.org'\n+K8S_OBJ_NAME_KEY = 'name'\n+K8S_LABELS_KEY = 'labels'\n+K8S_METADATA_KEY = 'metadata'\n+K8S_METADATA_NAME_FIELD_SELECTOR = 'metadata.name={}'\n+NETPOL_OWNER_PLACEHOLDER = '<OWNER>'\n+NETPOL_NAME_PREFIX_PLACEHOLDER = '<POLICY_NAME_PREFIX>'\n+OWNER_LABEL = 'owner'\n+PIPELINE_POD_LABEL_SELECTOR = 'type=pipeline'\n+PIPELINE_POD_PHASE_SELECTOR = 'status.phase={}'\n+SENSITIVE_LABEL = 'sensitive'\n+TRACKED_POD_PHASES = ['Pending', 'Running']\n+COMMON_NETPOL_TEMPLATE_PATH = '/policy-manager/common-run-policy-template.yaml'\n+SENSITIVE_NETPOL_TEMPLATE_PATH = '/policy-manager/sensitive-run-policy-template.yaml'\n+\n+MONITORING_PERIOD_SEC = int(os.getenv('RUN_OWNER_POLICY_POLL_PERIOD_SEC', 5))\n+\n+\n+def log_message(message):\n+    print('[{}] {}'.format(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'), message))\n+\n+\n+def get_custom_resource_api():\n+    config.load_kube_config()\n+    return client.CustomObjectsApi()\n+\n+\n+def load_all_active_policies():\n+    api = get_custom_resource_api()\n+    policies_response = api.list_namespaced_custom_object(group=CALICO_RESOURCES_GROUP,\n+                                                          version=CALICO_RESOURCES_VERSION,\n+                                                          namespace=NAMESPACE,\n+                                                          plural=CALICO_NETPOL_PLURAL)\n+    return policies_response['items']\n+\n+\n+def create_policy(owner, is_sensitive):\n+    log_message('Creating policy for [{}{}]'.format(owner, '-sensitive' if is_sensitive else ''))\n+    api = get_custom_resource_api()\n+    policy_yaml = create_policy_yaml_object(owner, is_sensitive)\n+    policy_name_template = policy_yaml[K8S_METADATA_KEY][K8S_OBJ_NAME_KEY]\n+    sanitized_owner_name = sanitize_name(owner)\n+    policy_name_candidate = policy_name_template.replace(NETPOL_NAME_PREFIX_PLACEHOLDER, sanitized_owner_name)\n+    while True:\n+        existing_policy_response = api.list_namespaced_custom_object(group=CALICO_RESOURCES_GROUP,\n+                                                                     version=CALICO_RESOURCES_VERSION,\n+                                                                     namespace=NAMESPACE,\n+                                                                     plural=CALICO_NETPOL_PLURAL,\n+                                                                     field_selector=K8S_METADATA_NAME_FIELD_SELECTOR\n+                                                                     .format(policy_name_candidate))\n+        if len(existing_policy_response.get('items')) > 0:\n+            log_message('Policy with name [{}] exists already: generating suffix for the current one.'\n+                        .format(policy_name_candidate))\n+            policy_name_candidate = policy_name_template.replace(NETPOL_NAME_PREFIX_PLACEHOLDER,\n+                                                                 sanitized_owner_name + '-' + str(uuid.uuid4())[:8])\n+        else:\n+            policy_yaml[K8S_METADATA_KEY][K8S_OBJ_NAME_KEY] = policy_name_candidate\n+            api.create_namespaced_custom_object(group=CALICO_RESOURCES_GROUP,\n+                                                version=CALICO_RESOURCES_VERSION,\n+                                                namespace=NAMESPACE,\n+                                                plural=CALICO_NETPOL_PLURAL,\n+                                                body=policy_yaml)\n+            log_message('Policy [{}] created successfully'.format(policy_name_candidate))\n+            break\n+\n+\n+def sanitize_name(name: str):\n+    return re.sub('[^A-Za-z0-9]+', '-', name).lower()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d76a689a0d23b0491a3ebced628d05775588b2ef"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 246, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}