{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NDAzNTQz", "number": 1466, "title": "Gui tests limit mounts", "bodyText": "This PR provides implementation for EPMCMBIBPC-2681, EPMCMBIBPC-2682, EPMCMBIBPC-2683 Limit Mounts tests", "createdAt": "2020-10-06T09:36:38Z", "url": "https://github.com/epam/cloud-pipeline/pull/1466", "merged": true, "mergeCommit": {"oid": "885820ef29e7aa1179b25c36481e2f7e7c0ba8e7"}, "closed": true, "closedAt": "2020-10-20T15:15:03Z", "author": {"login": "maryvictol"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNPlksAH2gAyNDk4NDAzNTQzOjEyZDRhYjI5OTI4YzE1ODQ4ZDAzMjlkN2JjODA1MjU3ODA0MjE4OTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUaO_1AFqTUxMjgyODYwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "12d4ab29928c15848d0329d7bc80525780421899", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/12d4ab29928c15848d0329d7bc80525780421899", "committedDate": "2020-09-28T08:47:52Z", "message": "add select limit mount popup\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad63ad8ec6bac2268571fcef24e90090fbfc82c5", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/ad63ad8ec6bac2268571fcef24e90090fbfc82c5", "committedDate": "2020-09-28T14:57:14Z", "message": "update EPMCMBIBPC-2681\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "977026f91fade7675465af8677905e65077a33eb", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/977026f91fade7675465af8677905e65077a33eb", "committedDate": "2020-09-29T14:21:38Z", "message": "add EPMCMBIBPC-2682 test\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5452ae2e92581cd04dfcc1ef964410c6b7dc9363", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/5452ae2e92581cd04dfcc1ef964410c6b7dc9363", "committedDate": "2020-09-30T15:28:44Z", "message": "add EPMCMBIBPC-2683 limit mounts test\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dcdf423d8011a1bf110fb60e555041fb2dd4af1", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0dcdf423d8011a1bf110fb60e555041fb2dd4af1", "committedDate": "2020-09-30T16:26:38Z", "message": "Merge branch 'develop' into gui_tests_limit_mounts\n\n# Conflicts:\n#\te2e/gui/default.conf\n#\te2e/gui/src/test/java/com/epam/pipeline/autotests/ao/Profile.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ce53295d5276a79a82d7bcf41fdc76bc8c76373", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0ce53295d5276a79a82d7bcf41fdc76bc8c76373", "committedDate": "2020-09-30T20:45:31Z", "message": "add Limit Mounts tests to testng xml\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60b8410106449162e326b3ce24dd2428e2a5131d", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/60b8410106449162e326b3ce24dd2428e2a5131d", "committedDate": "2020-10-01T22:18:51Z", "message": "update Limit Mounts tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f3252b6b20b9ff99e57e1469b3883711ef9cecf", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/0f3252b6b20b9ff99e57e1469b3883711ef9cecf", "committedDate": "2020-10-02T15:20:15Z", "message": "update Limit Mounts tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b01ed318dbb8b9fbeca7d18cc1a4aa89dcb99a0", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/7b01ed318dbb8b9fbeca7d18cc1a4aa89dcb99a0", "committedDate": "2020-10-02T17:03:47Z", "message": "update Limit Mounts tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da7cdec5e606d35c85239ea12ab2f061592aaf3c", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/da7cdec5e606d35c85239ea12ab2f061592aaf3c", "committedDate": "2020-10-02T17:34:53Z", "message": "update Limit Mounts tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab970b28ce7043f174fa51a9fff471d403363c7a", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/ab970b28ce7043f174fa51a9fff471d403363c7a", "committedDate": "2020-10-05T17:08:04Z", "message": "add EPMCMBIBPC-3176 Kubernetes cluster test\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53c5cb77d95559445162b2f54416a31189353634", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/53c5cb77d95559445162b2f54416a31189353634", "committedDate": "2020-10-05T17:10:14Z", "message": "update Limit Mounts tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "196c5da17e56d7366b7ffc3e3c3156b1010c80bb", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/196c5da17e56d7366b7ffc3e3c3156b1010c80bb", "committedDate": "2020-10-06T09:21:20Z", "message": "update Limit Mounts tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b528c34f4108a28919b96aa200c69d67ee5c0ae9", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/b528c34f4108a28919b96aa200c69d67ee5c0ae9", "committedDate": "2020-10-06T09:42:50Z", "message": "Merge branch 'develop' into gui_tests_limit_mounts\n\n# Conflicts:\n#\te2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineRunFormAO.java\n#\te2e/gui/src/test/java/com/epam/pipeline/autotests/ao/Primitive.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "396c3c509fd7ef8b633ca3f6ccc0a5cd9534086f", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/396c3c509fd7ef8b633ca3f6ccc0a5cd9534086f", "committedDate": "2020-10-06T09:45:28Z", "message": "merge with develop\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b950959435d926e26c1c5720bc951fcab8ac5121", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/b950959435d926e26c1c5720bc951fcab8ac5121", "committedDate": "2020-10-06T18:22:33Z", "message": "update logContainsMessage method\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4177e4283210e7c950d85106d64d93e71b663b57", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/4177e4283210e7c950d85106d64d93e71b663b57", "committedDate": "2020-10-06T19:02:21Z", "message": "add Copyright to Launch_LimitMountsTest\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed839625271de2eb79b91a057a59b87e1b2409f0", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/ed839625271de2eb79b91a057a59b87e1b2409f0", "committedDate": "2020-10-09T17:58:23Z", "message": "add EPMCMBIBPC-3177, EPMCMBIBPC-3178 Limit Mounts tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "020cefebf1c51bacb47a02aaafc8b39260d2a539", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/020cefebf1c51bacb47a02aaafc8b39260d2a539", "committedDate": "2020-10-09T18:19:03Z", "message": "codacy fix\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1484de1a4a914fa72b08c5f61622395f36190c75", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/1484de1a4a914fa72b08c5f61622395f36190c75", "committedDate": "2020-10-13T18:17:08Z", "message": "Merge branch 'develop' into gui_tests_limit_mounts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7e4c7a86ebe9af62fda9779a3f73828db6c00b9", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/b7e4c7a86ebe9af62fda9779a3f73828db6c00b9", "committedDate": "2020-10-14T14:47:41Z", "message": "update EPMCMBIBPC-3178 limit mounts test\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NTU3NjQ3", "url": "https://github.com/epam/cloud-pipeline/pull/1466#pullrequestreview-509557647", "createdAt": "2020-10-15T16:25:22Z", "commit": {"oid": "b7e4c7a86ebe9af62fda9779a3f73828db6c00b9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyNToyM1rOHiQCnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTo0NDozOFrOHiXXuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3NjQ0NQ==", "bodyText": "It would be better to extract to the separate method in Utils", "url": "https://github.com/epam/cloud-pipeline/pull/1466#discussion_r505676445", "createdAt": "2020-10-15T16:25:23Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchLimitMountsTest.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.codeborne.selenide.WebDriverRunner;\n+import com.epam.pipeline.autotests.ao.ToolSettings;\n+import com.epam.pipeline.autotests.ao.ToolTab;\n+import com.epam.pipeline.autotests.mixins.Navigation;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.disabled;\n+import static com.codeborne.selenide.Condition.enabled;\n+import static com.codeborne.selenide.Condition.exist;\n+import static com.codeborne.selenide.Condition.text;\n+import static com.epam.pipeline.autotests.ao.LogAO.configurationParameter;\n+import static com.epam.pipeline.autotests.ao.LogAO.containsMessages;\n+import static com.epam.pipeline.autotests.ao.LogAO.log;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.ADVANCED_PANEL;\n+import static com.epam.pipeline.autotests.ao.Primitive.CANCEL;\n+import static com.epam.pipeline.autotests.ao.Primitive.CLEAR_SELECTION;\n+import static com.epam.pipeline.autotests.ao.Primitive.LIMIT_MOUNTS;\n+import static com.epam.pipeline.autotests.ao.Primitive.OK;\n+import static com.epam.pipeline.autotests.ao.Primitive.PARAMETERS;\n+import static com.epam.pipeline.autotests.ao.Primitive.SAVE;\n+import static com.epam.pipeline.autotests.ao.Primitive.SEARCH_INPUT;\n+import static com.epam.pipeline.autotests.ao.Primitive.SELECT_ALL;\n+import static com.epam.pipeline.autotests.ao.Primitive.SELECT_ALL_NON_SENSITIVE;\n+import static com.epam.pipeline.autotests.ao.Primitive.SENSITIVE_STORAGE;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+\n+public class LaunchLimitMountsTest extends AbstractAutoRemovingPipelineRunningTest implements Navigation {\n+    private String storage1 = \"launchLimitMountsStorage\" + Utils.randomSuffix();\n+    private String storage2 = \"launchLimitMountsStorage\" + Utils.randomSuffix();\n+    private String storageSensitive = \"launchLimitMountsStorage\" + Utils.randomSuffix();\n+    private final String registry = C.DEFAULT_REGISTRY;\n+    private final String tool = C.TESTING_TOOL_NAME;\n+    private final String group = C.DEFAULT_GROUP;\n+    private final String mountDataStoragesTask = \"MountDataStorages\";\n+    private String storageID = \"\";\n+    private String sensitiveStorageID = \"\";\n+    private String testRunID = \"\";\n+    private String message = \"Selection contains sensitive storages. This will apply a number of restrictions \" +\n+            \"for the job: no Internet access, all the storages will be available in a read-only mode, \" +\n+            \"you won't be able to extract the data from the running job and other.\";\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void setPreferences() {\n+        library()\n+                .createStorage(storage1)\n+                .createStorage(storage2)\n+                .clickOnCreateStorageButton()\n+                .setStoragePath(storageSensitive)\n+                .clickSensitiveStorageCheckbox()\n+                .ok()\n+                .selectStorage(storage1)\n+                .validateHeader(storage1);\n+\n+        String url = WebDriverRunner.getWebDriver().getCurrentUrl();\n+        storageID = url.substring(url.lastIndexOf(\"/\") + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e4c7a86ebe9af62fda9779a3f73828db6c00b9"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3ODQ4NQ==", "bodyText": "Add a space before 2, please", "url": "https://github.com/epam/cloud-pipeline/pull/1466#discussion_r505678485", "createdAt": "2020-10-15T16:28:27Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchLimitMountsTest.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.codeborne.selenide.WebDriverRunner;\n+import com.epam.pipeline.autotests.ao.ToolSettings;\n+import com.epam.pipeline.autotests.ao.ToolTab;\n+import com.epam.pipeline.autotests.mixins.Navigation;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.disabled;\n+import static com.codeborne.selenide.Condition.enabled;\n+import static com.codeborne.selenide.Condition.exist;\n+import static com.codeborne.selenide.Condition.text;\n+import static com.epam.pipeline.autotests.ao.LogAO.configurationParameter;\n+import static com.epam.pipeline.autotests.ao.LogAO.containsMessages;\n+import static com.epam.pipeline.autotests.ao.LogAO.log;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.ADVANCED_PANEL;\n+import static com.epam.pipeline.autotests.ao.Primitive.CANCEL;\n+import static com.epam.pipeline.autotests.ao.Primitive.CLEAR_SELECTION;\n+import static com.epam.pipeline.autotests.ao.Primitive.LIMIT_MOUNTS;\n+import static com.epam.pipeline.autotests.ao.Primitive.OK;\n+import static com.epam.pipeline.autotests.ao.Primitive.PARAMETERS;\n+import static com.epam.pipeline.autotests.ao.Primitive.SAVE;\n+import static com.epam.pipeline.autotests.ao.Primitive.SEARCH_INPUT;\n+import static com.epam.pipeline.autotests.ao.Primitive.SELECT_ALL;\n+import static com.epam.pipeline.autotests.ao.Primitive.SELECT_ALL_NON_SENSITIVE;\n+import static com.epam.pipeline.autotests.ao.Primitive.SENSITIVE_STORAGE;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+\n+public class LaunchLimitMountsTest extends AbstractAutoRemovingPipelineRunningTest implements Navigation {\n+    private String storage1 = \"launchLimitMountsStorage\" + Utils.randomSuffix();\n+    private String storage2 = \"launchLimitMountsStorage\" + Utils.randomSuffix();\n+    private String storageSensitive = \"launchLimitMountsStorage\" + Utils.randomSuffix();\n+    private final String registry = C.DEFAULT_REGISTRY;\n+    private final String tool = C.TESTING_TOOL_NAME;\n+    private final String group = C.DEFAULT_GROUP;\n+    private final String mountDataStoragesTask = \"MountDataStorages\";\n+    private String storageID = \"\";\n+    private String sensitiveStorageID = \"\";\n+    private String testRunID = \"\";\n+    private String message = \"Selection contains sensitive storages. This will apply a number of restrictions \" +\n+            \"for the job: no Internet access, all the storages will be available in a read-only mode, \" +\n+            \"you won't be able to extract the data from the running job and other.\";\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void setPreferences() {\n+        library()\n+                .createStorage(storage1)\n+                .createStorage(storage2)\n+                .clickOnCreateStorageButton()\n+                .setStoragePath(storageSensitive)\n+                .clickSensitiveStorageCheckbox()\n+                .ok()\n+                .selectStorage(storage1)\n+                .validateHeader(storage1);\n+\n+        String url = WebDriverRunner.getWebDriver().getCurrentUrl();\n+        storageID = url.substring(url.lastIndexOf(\"/\") + 1);\n+        library()\n+                .selectStorage(storageSensitive)\n+                .validateHeader(storageSensitive);\n+\n+        url = WebDriverRunner.getWebDriver().getCurrentUrl();\n+        sensitiveStorageID = url.substring(url.lastIndexOf(\"/\") + 1);\n+        tools()\n+                .performWithin(registry, group, tool, tool ->\n+                        tool.settings()\n+                                .disableAllowSensitiveStorage()\n+                                .performIf(SAVE, enabled, ToolSettings::save)\n+                );\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void removeEntities() {\n+        library()\n+                .removeStorage(storage1)\n+                .removeStorage(storage2)\n+                .removeStorage(storageSensitive);\n+        tools()\n+                .performWithin(registry, group, tool, tool ->\n+                        tool.settings()\n+                                .disableAllowSensitiveStorage()\n+                                .performIf(SAVE, enabled, ToolSettings::save)\n+                );\n+    }\n+\n+    @Test(priority = 1)\n+    @TestCase(value = {\"EPMCMBIBPC-2681\"})\n+    public void prepareLimitMounts() {\n+        tools()\n+                .perform(registry, group, tool, ToolTab::runWithCustomSettings)\n+                .expandTab(ADVANCED_PANEL)\n+                .ensure(LIMIT_MOUNTS, text(\"All available non-sensitive storages\"))\n+                .selectDataStoragesToLimitMounts()\n+                .ensureVisible(SEARCH_INPUT)\n+                .ensureAll(disabled, SELECT_ALL, SELECT_ALL_NON_SENSITIVE)\n+                .ensureAll(enabled, CLEAR_SELECTION, CANCEL, OK)\n+                .validateFields(\"\", \"Name\", \"Type\")\n+                .storagesCountShouldBeGreaterThan(2)\n+                .clearSelection()\n+                .ensureAll(enabled, SELECT_ALL, SELECT_ALL_NON_SENSITIVE)\n+                .ensureAll(disabled, OK)\n+                .ensureNotVisible(CLEAR_SELECTION)\n+                .searchStorage(storage1)\n+                .selectStorage(storage1)\n+                .ensureVisible(CLEAR_SELECTION)\n+                .ensureAll(enabled, OK)\n+                .ok()\n+                .ensure(LIMIT_MOUNTS, text(storage1));\n+    }\n+\n+    @Test(priority = 1)\n+    @TestCase(value = {\"EPMCMBIBPC-2682\"})\n+    public void runPipelineWithLimitMounts() {\n+        tools()\n+                .perform(registry, group, tool, ToolTab::runWithCustomSettings)\n+                .expandTab(ADVANCED_PANEL)\n+                .selectDataStoragesToLimitMounts()\n+                .clearSelection()\n+                .searchStorage(storage1)\n+                .selectStorage(storage1)\n+                .ok()\n+                .launch(this)\n+                .showLog(testRunID = getRunId())\n+                .expandTab(PARAMETERS)\n+                .ensure(configurationParameter(\"CP_CAP_LIMIT_MOUNTS\", storage1), exist)\n+                .waitForSshLink()\n+                .waitForTask(mountDataStoragesTask)\n+                .click(taskWithName(mountDataStoragesTask))\n+                .ensure(log(), containsMessages(\"Found 1 available storage(s). Checking mount options.\"))\n+                .ensure(log(), containsMessages(format(\"Run is launched with mount limits (%s) Only 1 storages will be mounted\", storageID)))\n+                .ensure(log(), containsMessages(mountStorageMessage(storage1)))\n+                .ssh(shell -> shell\n+                        .execute(\"ls /cloud-data/\")\n+                        .assertOutputContains(storage1.toLowerCase())\n+                        .assertPageDoesNotContain(storage2.toLowerCase())\n+                        .close());\n+    }\n+\n+    @Test(priority = 1, dependsOnMethods = {\"runPipelineWithLimitMounts\"})\n+    @TestCase(value = {\"EPMCMBIBPC-2683\"})\n+    public void rerunPipelineWithoutLimitMounts() {\n+        final Set<String> logMess =\n+                 runsMenu()\n+                .showLog(testRunID)\n+                .stop(format(\"pipeline-%s\", testRunID))\n+                .clickOnRerunButton()\n+                .expandTab(ADVANCED_PANEL)\n+                .ensure(LIMIT_MOUNTS, text(storage1))\n+                .selectDataStoragesToLimitMounts()\n+                .selectAllNonSensitive()\n+                .ok()\n+                .ensure(LIMIT_MOUNTS, text(\"All available non-sensitive storages\"))\n+                .launch(this)\n+                .showLog(getRunId())\n+                .ensureNotVisible(PARAMETERS)\n+                .waitForSshLink()\n+                .waitForTask(mountDataStoragesTask)\n+                .clickMountBuckets()\n+                .logMessages()\n+                .collect(toSet());\n+\n+        runsMenu()\n+                .showLog(getRunId())\n+                .logContainsMessage(logMess, \" available storage(s). Checking mount options.\")\n+                .checkAvailableStoragesCount(logMess,2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e4c7a86ebe9af62fda9779a3f73828db6c00b9"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwMjA5NQ==", "bodyText": "cantained -> contained", "url": "https://github.com/epam/cloud-pipeline/pull/1466#discussion_r505702095", "createdAt": "2020-10-15T17:04:59Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/LogAO.java", "diffHunk": "@@ -335,42 +360,70 @@ public static By task() {\n \n     public static By taskWithName(final String name) {\n         Objects.requireNonNull(name);\n-        final By taskQualifier = byXpath(String.format(\".//li[contains(., '%s')]\", name));\n-        return Combiners.confine(taskQualifier, taskList(), String.format(\"task with name %s\", name));\n+        final By taskQualifier = byXpath(format(\".//li[contains(., '%s')]\", name));\n+        return Combiners.confine(taskQualifier, taskList(), format(\"task with name %s\", name));\n     }\n \n     public static By parameterWithName(final String name, final String value) {\n         Objects.requireNonNull(name);\n-        return byXpath(String.format(\n+        return byXpath(format(\n                 \"//tr[.//td[contains(@class, 'log__task-parameter-name') and contains(.//text(), '%s')] and \" +\n                         \".//td[contains(., '%s')]]\", name, value));\n     }\n \n+    public LogAO checkMountLimitsParameter(String...storages) {\n+        Arrays.stream(storages)\n+                .forEach(storage -> $(byText(\"CP_CAP_LIMIT_MOUNTS\")).$(By.xpath(\"following::td\"))\n+                        .shouldHave(text(storage)));\n+        return this;\n+    }\n+\n     public static By log() {\n         return byClassName(\"ReactVirtualized__List\");\n     }\n \n+    public LogAO logContainsMessage(Set<String> logMess, final String message) {\n+        assertTrue(logMess.stream().anyMatch(mes -> mes.contains(message)), format(\"Message '%s' isn't cantained in log\", message));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e4c7a86ebe9af62fda9779a3f73828db6c00b9"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwMjE3Mg==", "bodyText": "cantained -> contained", "url": "https://github.com/epam/cloud-pipeline/pull/1466#discussion_r505702172", "createdAt": "2020-10-15T17:05:09Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/LogAO.java", "diffHunk": "@@ -335,42 +360,70 @@ public static By task() {\n \n     public static By taskWithName(final String name) {\n         Objects.requireNonNull(name);\n-        final By taskQualifier = byXpath(String.format(\".//li[contains(., '%s')]\", name));\n-        return Combiners.confine(taskQualifier, taskList(), String.format(\"task with name %s\", name));\n+        final By taskQualifier = byXpath(format(\".//li[contains(., '%s')]\", name));\n+        return Combiners.confine(taskQualifier, taskList(), format(\"task with name %s\", name));\n     }\n \n     public static By parameterWithName(final String name, final String value) {\n         Objects.requireNonNull(name);\n-        return byXpath(String.format(\n+        return byXpath(format(\n                 \"//tr[.//td[contains(@class, 'log__task-parameter-name') and contains(.//text(), '%s')] and \" +\n                         \".//td[contains(., '%s')]]\", name, value));\n     }\n \n+    public LogAO checkMountLimitsParameter(String...storages) {\n+        Arrays.stream(storages)\n+                .forEach(storage -> $(byText(\"CP_CAP_LIMIT_MOUNTS\")).$(By.xpath(\"following::td\"))\n+                        .shouldHave(text(storage)));\n+        return this;\n+    }\n+\n     public static By log() {\n         return byClassName(\"ReactVirtualized__List\");\n     }\n \n+    public LogAO logContainsMessage(Set<String> logMess, final String message) {\n+        assertTrue(logMess.stream().anyMatch(mes -> mes.contains(message)), format(\"Message '%s' isn't cantained in log\", message));\n+        return this;\n+    }\n+\n+    public LogAO logNotContainsMessage(Set<String> logMess, final String message) {\n+        assertTrue(logMess.stream().noneMatch(mes -> mes.contains(message)), format(\"Message '%s' isn't cantained in log\", message));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e4c7a86ebe9af62fda9779a3f73828db6c00b9"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc5NDU4NA==", "bodyText": "It would be better to add the checkbox to Map<Primitive, SelenideElement> elements", "url": "https://github.com/epam/cloud-pipeline/pull/1466#discussion_r505794584", "createdAt": "2020-10-15T19:41:33Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/ToolSettings.java", "diffHunk": "@@ -122,6 +123,24 @@ public ToolSettings setDefaultCommand(final String command) {\n         return this;\n     }\n \n+    public ToolSettings disableAllowSensitiveStorage() {\n+        SelenideElement checkbox = context().$(byText(\"Allow sensitive storages\"))\n+                .parent().find(By.xpath(\"following-sibling::div//span\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e4c7a86ebe9af62fda9779a3f73828db6c00b9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc5NDkxNg==", "bodyText": "Clean up?", "url": "https://github.com/epam/cloud-pipeline/pull/1466#discussion_r505794916", "createdAt": "2020-10-15T19:41:59Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/SelectLimitMountsPopupAO.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests.ao;\n+\n+import com.codeborne.selenide.SelenideElement;\n+import com.epam.pipeline.autotests.utils.SelenideElements;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+\n+import java.util.Map;\n+\n+import static com.codeborne.selenide.CollectionCondition.sizeGreaterThan;\n+import static com.codeborne.selenide.CollectionCondition.texts;\n+import static com.codeborne.selenide.Condition.visible;\n+import static com.codeborne.selenide.Selectors.byClassName;\n+import static com.codeborne.selenide.Selectors.byText;\n+import static com.codeborne.selenide.Selectors.byXpath;\n+import static com.codeborne.selenide.Selenide.$;\n+import static com.codeborne.selenide.Selenide.$$;\n+import static com.codeborne.selenide.Selenide.actions;\n+import static com.epam.pipeline.autotests.ao.Primitive.CANCEL;\n+import static com.epam.pipeline.autotests.ao.Primitive.CLEAR_SELECTION;\n+import static com.epam.pipeline.autotests.ao.Primitive.OK;\n+import static com.epam.pipeline.autotests.ao.Primitive.SEARCH_INPUT;\n+import static com.epam.pipeline.autotests.ao.Primitive.SELECT_ALL;\n+import static com.epam.pipeline.autotests.ao.Primitive.SELECT_ALL_NON_SENSITIVE;\n+import static com.epam.pipeline.autotests.ao.Primitive.SENSITIVE_STORAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.TABLE;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class SelectLimitMountsPopupAO extends PopupAO<SelectLimitMountsPopupAO, PipelineRunFormAO> {\n+    private final Map<Primitive, SelenideElement> elements = initialiseElements(\n+            entry(CANCEL, context().find(byText(\"Cancel\"))),\n+            entry(OK, context().find(byClassName(\"ant-btn-primary\"))),\n+            entry(CLEAR_SELECTION, context().find(byClassName(\"ant-btn-danger\"))),\n+            entry(SELECT_ALL, context().find(byXpath(\"//button/span[.='Select all']\")).closest(\"button\")),\n+            entry(SELECT_ALL_NON_SENSITIVE, context().find(byXpath(\"//button/span[.='Select all non-sensitive']\")).closest(\"button\")),\n+            entry(SEARCH_INPUT, context().find(byClassName(\"ant-input\"))),\n+            entry(TABLE, context().find(byClassName(\"ant-table-content\"))),\n+            entry(SENSITIVE_STORAGE, context().find(byClassName(\"ant-alert-message\")))\n+    );\n+\n+    public SelectLimitMountsPopupAO(PipelineRunFormAO parentAO) {\n+        super(parentAO);\n+    }\n+\n+    @Override\n+    public PipelineRunFormAO cancel() {\n+        return click(CANCEL).parent();\n+    }\n+\n+    @Override\n+    public PipelineRunFormAO ok() {\n+        return click(OK).parent();\n+    }\n+\n+    public SelectLimitMountsPopupAO clearSelection() {\n+        return click(CLEAR_SELECTION).sleep(1, SECONDS);\n+    }\n+\n+    public SelectLimitMountsPopupAO selectAllNonSensitive() {\n+        return click(SELECT_ALL_NON_SENSITIVE).sleep(1, SECONDS);\n+    }\n+\n+    @Override\n+    public SelenideElement context() {\n+        return $$(byClassName(\"ant-modal-content\")).find(visible);\n+    }\n+\n+    @Override\n+    public Map<Primitive, SelenideElement> elements() {\n+        return elements;\n+    }\n+\n+    public SelectLimitMountsPopupAO clickSearch() {\n+        click(SEARCH_INPUT);\n+        return this;\n+    }\n+\n+    public SelectLimitMountsPopupAO pressEnter() {\n+        actions().sendKeys(Keys.ENTER).perform();\n+        return this;\n+    }\n+\n+    public SelectLimitMountsPopupAO setSearchStorage(String storage) {\n+        clear(SEARCH_INPUT);\n+        setValue(SEARCH_INPUT, storage);\n+        return this;\n+    }\n+\n+    public SelectLimitMountsPopupAO searchStorage(String storage) {\n+        return //setSearchStorage(storage)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e4c7a86ebe9af62fda9779a3f73828db6c00b9"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc5NjUzNg==", "bodyText": "Result of 'Matcher.find()' is ignored", "url": "https://github.com/epam/cloud-pipeline/pull/1466#discussion_r505796536", "createdAt": "2020-10-15T19:44:38Z", "author": {"login": "kamyshova"}, "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/LogAO.java", "diffHunk": "@@ -335,42 +360,70 @@ public static By task() {\n \n     public static By taskWithName(final String name) {\n         Objects.requireNonNull(name);\n-        final By taskQualifier = byXpath(String.format(\".//li[contains(., '%s')]\", name));\n-        return Combiners.confine(taskQualifier, taskList(), String.format(\"task with name %s\", name));\n+        final By taskQualifier = byXpath(format(\".//li[contains(., '%s')]\", name));\n+        return Combiners.confine(taskQualifier, taskList(), format(\"task with name %s\", name));\n     }\n \n     public static By parameterWithName(final String name, final String value) {\n         Objects.requireNonNull(name);\n-        return byXpath(String.format(\n+        return byXpath(format(\n                 \"//tr[.//td[contains(@class, 'log__task-parameter-name') and contains(.//text(), '%s')] and \" +\n                         \".//td[contains(., '%s')]]\", name, value));\n     }\n \n+    public LogAO checkMountLimitsParameter(String...storages) {\n+        Arrays.stream(storages)\n+                .forEach(storage -> $(byText(\"CP_CAP_LIMIT_MOUNTS\")).$(By.xpath(\"following::td\"))\n+                        .shouldHave(text(storage)));\n+        return this;\n+    }\n+\n     public static By log() {\n         return byClassName(\"ReactVirtualized__List\");\n     }\n \n+    public LogAO logContainsMessage(Set<String> logMess, final String message) {\n+        assertTrue(logMess.stream().anyMatch(mes -> mes.contains(message)), format(\"Message '%s' isn't cantained in log\", message));\n+        return this;\n+    }\n+\n+    public LogAO logNotContainsMessage(Set<String> logMess, final String message) {\n+        assertTrue(logMess.stream().noneMatch(mes -> mes.contains(message)), format(\"Message '%s' isn't cantained in log\", message));\n+        return this;\n+    }\n+\n+    public LogAO checkAvailableStoragesCount(Set<String> logMess, int count) {\n+        String str = logMess.stream().filter(Pattern.compile(\"\\\\d+ available storage\\\\(s\\\\)\\\\. Checking mount options\\\\.\")\n+                        .asPredicate()).findFirst().toString();\n+        Matcher matcher = Pattern.compile(\" \\\\d* \").matcher(str);\n+        matcher.find();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e4c7a86ebe9af62fda9779a3f73828db6c00b9"}, "originalPosition": 166}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc0971e8d605e562c75941f6c25597ea654d8ed6", "author": {"user": {"login": "maryvictol", "name": "Mariia Tolstaia"}}, "url": "https://github.com/epam/cloud-pipeline/commit/fc0971e8d605e562c75941f6c25597ea654d8ed6", "committedDate": "2020-10-16T14:22:17Z", "message": "Requested changes\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyODI4NjAx", "url": "https://github.com/epam/cloud-pipeline/pull/1466#pullrequestreview-512828601", "createdAt": "2020-10-20T15:09:38Z", "commit": {"oid": "fc0971e8d605e562c75941f6c25597ea654d8ed6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3657, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}