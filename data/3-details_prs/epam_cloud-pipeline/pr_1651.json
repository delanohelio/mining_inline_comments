{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MDA4MDk0", "number": 1651, "title": "Issue #1645: Rewrite RunApiServiceTest", "bodyText": "This PR is related to issue #1645 and contains rewritten RunApiService tests", "createdAt": "2020-12-11T15:22:27Z", "url": "https://github.com/epam/cloud-pipeline/pull/1651", "merged": true, "mergeCommit": {"oid": "48c270f8b05106718d9254fc9cc90ed4a0e6dfd0"}, "closed": true, "closedAt": "2020-12-22T10:47:35Z", "author": {"login": "cryteq"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoUNKWgFqTU1NjI3NTAwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdooOaWgBqjQxMzk2MTU4MTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2Mjc1MDA5", "url": "https://github.com/epam/cloud-pipeline/pull/1651#pullrequestreview-556275009", "createdAt": "2020-12-21T10:22:50Z", "commit": {"oid": "2dcdee5d0c4bccb7b9827dbd05ba6d8f8641a14d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyMjo1MFrOIJTUxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyNDozNFrOIJTYHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNDcxMA==", "bodyText": "Could you please double check if the test logic correct?", "url": "https://github.com/epam/cloud-pipeline/pull/1651#discussion_r546624710", "createdAt": "2020-12-21T10:22:50Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/run/RunApiServiceTest.java", "diffHunk": "@@ -96,181 +77,182 @@\n     @Autowired\n     private EntityManager mockEntityManager;\n \n-    private RunAclFactory runAclFactory;\n-    private PipelineAclFactory pipelineAclFactory;\n-    private ToolAclFactory toolAclFactory;\n-\n     @Autowired\n-    public void setRunAclFactory(final AuthManager authManager,\n-                                 final PipelineRunManager mockRunManager) {\n-        this.runAclFactory = new RunAclFactory(authManager, mockRunManager);\n-    }\n-\n-    @Autowired\n-    public void setPipelineAclFactory(final AuthManager authManager,\n-                                      final GrantPermissionManager grantPermissionManager,\n-                                      final JdbcMutableAclServiceImpl aclService,\n-                                      final UserManager mockUserManager,\n-                                      final PipelineManager mockPipelineManager,\n-                                      final EntityManager mockEntityManager) {\n-        this.pipelineAclFactory = new PipelineAclFactory(authManager,\n-                grantPermissionManager, aclService, mockUserManager,\n-                mockPipelineManager, mockEntityManager);\n-    }\n+    private ToolManager mockToolManager;\n \n-    @Autowired\n-    public void setToolAclFactory(final AuthManager authManager, final ToolManager mockToolManager) {\n-        this.toolAclFactory = new ToolAclFactory(authManager, mockToolManager);\n-    }\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadToolRunForOwner() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n+        mockAuthUser(ANOTHER_SIMPLE_USER);\n \n-    @After\n-    public void tearDown() {\n-        aclCache.clearCache();\n+        assertThat(runApiService.loadPipelineRun(ID)).isEqualTo(pipelineRun);\n     }\n \n     @Test\n-    @WithMockUser(username = TEST_OWNER)\n-    public void loadToolRunShouldBeAllowedForOwner() {\n-        runAclFactory.initToolPipelineRunForCurrentUser();\n-        assertThat(runApiService.loadPipelineRun(TEST_RUN_ID).getId(), equalTo(TEST_RUN_ID));\n-    }\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyLoadToolRunForNonOwner() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = TEST_USER1)\n-    public void loadToolRunShouldBeDeniedForNonOwner() {\n-        runAclFactory.initToolPipelineRunForOwner(TEST_OWNER);\n-        runApiService.loadPipelineRun(TEST_RUN_ID);\n+        assertThrows(AccessDeniedException.class, () -> runApiService.loadPipelineRun(ID));\n     }\n \n     @Test\n-    @WithMockUser(username = TEST_ADMIN_NAME, roles = {TEST_ADMIN_ROLE})\n-    public void loadToolRunShouldBeAllowedForAdmin() {\n-        runAclFactory.initToolPipelineRunForOwner(TEST_OWNER);\n-        assertThat(runApiService.loadPipelineRun(TEST_RUN_ID).getId(), equalTo(TEST_RUN_ID));\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadToolRunForAdmin() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n+\n+        assertThat(runApiService.loadPipelineRun(ID)).isEqualTo(pipelineRun);\n     }\n \n     @Test\n-    @WithMockUser(username = TEST_USER1)\n-    public void loadPipelineRunShouldBeAllowedForOwner() {\n-        final Pipeline pipeline = pipelineAclFactory.initPipelineForCurrentUser();\n-        runAclFactory.initPipelineRunForCurrentUser(pipeline);\n-        assertThat(runApiService.loadPipelineRun(TEST_RUN_ID).getId(), equalTo(TEST_RUN_ID));\n+    @WithMockUser\n+    public void shouldLoadPipelineRunForOwner() {\n+        final PipelineRun pipelineRun = getPipelineRun(ID, SIMPLE_USER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dcdee5d0c4bccb7b9827dbd05ba6d8f8641a14d"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNTU2NQ==", "bodyText": "Add space please.", "url": "https://github.com/epam/cloud-pipeline/pull/1651#discussion_r546625565", "createdAt": "2020-12-21T10:24:34Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/run/RunApiServiceTest.java", "diffHunk": "@@ -96,181 +77,182 @@\n     @Autowired\n     private EntityManager mockEntityManager;\n \n-    private RunAclFactory runAclFactory;\n-    private PipelineAclFactory pipelineAclFactory;\n-    private ToolAclFactory toolAclFactory;\n-\n     @Autowired\n-    public void setRunAclFactory(final AuthManager authManager,\n-                                 final PipelineRunManager mockRunManager) {\n-        this.runAclFactory = new RunAclFactory(authManager, mockRunManager);\n-    }\n-\n-    @Autowired\n-    public void setPipelineAclFactory(final AuthManager authManager,\n-                                      final GrantPermissionManager grantPermissionManager,\n-                                      final JdbcMutableAclServiceImpl aclService,\n-                                      final UserManager mockUserManager,\n-                                      final PipelineManager mockPipelineManager,\n-                                      final EntityManager mockEntityManager) {\n-        this.pipelineAclFactory = new PipelineAclFactory(authManager,\n-                grantPermissionManager, aclService, mockUserManager,\n-                mockPipelineManager, mockEntityManager);\n-    }\n+    private ToolManager mockToolManager;\n \n-    @Autowired\n-    public void setToolAclFactory(final AuthManager authManager, final ToolManager mockToolManager) {\n-        this.toolAclFactory = new ToolAclFactory(authManager, mockToolManager);\n-    }\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadToolRunForOwner() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n+        mockAuthUser(ANOTHER_SIMPLE_USER);\n \n-    @After\n-    public void tearDown() {\n-        aclCache.clearCache();\n+        assertThat(runApiService.loadPipelineRun(ID)).isEqualTo(pipelineRun);\n     }\n \n     @Test\n-    @WithMockUser(username = TEST_OWNER)\n-    public void loadToolRunShouldBeAllowedForOwner() {\n-        runAclFactory.initToolPipelineRunForCurrentUser();\n-        assertThat(runApiService.loadPipelineRun(TEST_RUN_ID).getId(), equalTo(TEST_RUN_ID));\n-    }\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyLoadToolRunForNonOwner() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = TEST_USER1)\n-    public void loadToolRunShouldBeDeniedForNonOwner() {\n-        runAclFactory.initToolPipelineRunForOwner(TEST_OWNER);\n-        runApiService.loadPipelineRun(TEST_RUN_ID);\n+        assertThrows(AccessDeniedException.class, () -> runApiService.loadPipelineRun(ID));\n     }\n \n     @Test\n-    @WithMockUser(username = TEST_ADMIN_NAME, roles = {TEST_ADMIN_ROLE})\n-    public void loadToolRunShouldBeAllowedForAdmin() {\n-        runAclFactory.initToolPipelineRunForOwner(TEST_OWNER);\n-        assertThat(runApiService.loadPipelineRun(TEST_RUN_ID).getId(), equalTo(TEST_RUN_ID));\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadToolRunForAdmin() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n+\n+        assertThat(runApiService.loadPipelineRun(ID)).isEqualTo(pipelineRun);\n     }\n \n     @Test\n-    @WithMockUser(username = TEST_USER1)\n-    public void loadPipelineRunShouldBeAllowedForOwner() {\n-        final Pipeline pipeline = pipelineAclFactory.initPipelineForCurrentUser();\n-        runAclFactory.initPipelineRunForCurrentUser(pipeline);\n-        assertThat(runApiService.loadPipelineRun(TEST_RUN_ID).getId(), equalTo(TEST_RUN_ID));\n+    @WithMockUser\n+    public void shouldLoadPipelineRunForOwner() {\n+        final PipelineRun pipelineRun = getPipelineRun(ID, SIMPLE_USER);\n+        pipelineRun.setPipelineId(pipelineRun.getId());\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n+        mockAuthUser(SIMPLE_USER);\n+\n+        assertThat(runApiService.loadPipelineRun(ID).getId()).isEqualTo(pipeline.getId());\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = TEST_USER1)\n-    public void loadPipelineRunShouldBeDeniedForNonOwner() {\n-        final Pipeline pipeline = pipelineAclFactory.initPipelineForOwner(TEST_OWNER);\n-        runAclFactory.initPipelineRunForOwner(pipeline, TEST_OWNER);\n-        runApiService.loadPipelineRun(TEST_RUN_ID);\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyLoadPipelineRunForNonOwner() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n+        doReturn(pipeline).when(mockRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(pipeline);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () ->runApiService.loadPipelineRun(ID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dcdee5d0c4bccb7b9827dbd05ba6d8f8641a14d"}, "originalPosition": 183}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "39dcc62673b40831dc8862aa1ef724006f05c387", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/39dcc62673b40831dc8862aa1ef724006f05c387", "committedDate": "2020-12-21T12:59:52Z", "message": "Issue #1645: Fixed loadPipeline test"}, "afterCommit": {"oid": "7d5a9b4e32c97e785dcc335ec865cbac2802b039", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/7d5a9b4e32c97e785dcc335ec865cbac2802b039", "committedDate": "2020-12-21T14:48:31Z", "message": "Issue #1645: Fixed loadPipeline test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NTIxMTYx", "url": "https://github.com/epam/cloud-pipeline/pull/1651#pullrequestreview-556521161", "createdAt": "2020-12-21T16:52:31Z", "commit": {"oid": "7d5a9b4e32c97e785dcc335ec865cbac2802b039"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "458ffe4e0507f0b82a9223516ea8da1d874f7c68", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/458ffe4e0507f0b82a9223516ea8da1d874f7c68", "committedDate": "2020-12-22T10:37:26Z", "message": "Issue #1645: Rewrote RunApiServiceTest using new approach"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3089adeaedbc4a4a1ec4568432ea698a47e76c63", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/3089adeaedbc4a4a1ec4568432ea698a47e76c63", "committedDate": "2020-12-22T10:38:46Z", "message": "Issue #1645: Removed old acl config and unused factory classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4588c075eb4a74581d89f2fd0ab5124fa1411e00", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/4588c075eb4a74581d89f2fd0ab5124fa1411e00", "committedDate": "2020-12-22T10:38:49Z", "message": "Issue #1645: Renamed test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "442b9f052c79db5411b126fa15bb9e4fd7685d02", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/442b9f052c79db5411b126fa15bb9e4fd7685d02", "committedDate": "2020-12-22T10:38:49Z", "message": "Issue #1645: Fixed loadPipeline test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d5a9b4e32c97e785dcc335ec865cbac2802b039", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/7d5a9b4e32c97e785dcc335ec865cbac2802b039", "committedDate": "2020-12-21T14:48:31Z", "message": "Issue #1645: Fixed loadPipeline test"}, "afterCommit": {"oid": "442b9f052c79db5411b126fa15bb9e4fd7685d02", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/442b9f052c79db5411b126fa15bb9e4fd7685d02", "committedDate": "2020-12-22T10:38:49Z", "message": "Issue #1645: Fixed loadPipeline test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3611, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}