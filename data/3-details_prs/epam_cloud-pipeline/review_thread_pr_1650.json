{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NjQzMTE1", "number": 1650, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoxNjo1OVrOFFghWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwODo0Mjo1NFrOFIErfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzIwMDI0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoxNjo1OVrOIGDUjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoxNjo1OVrOIGDUjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxNjc4MA==", "bodyText": "Probably you can always use getObjectMapper in all the subclasses.", "url": "https://github.com/epam/cloud-pipeline/pull/1650#discussion_r543216780", "createdAt": "2020-12-15T10:16:59Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java", "diffHunk": "@@ -72,7 +72,7 @@\n     private ObjectMapper deserializationMapper;\n \n     @Autowired\n-    private JsonMapper objectMapper;\n+    protected JsonMapper objectMapper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaca842dcf8ae031a147285098de9042d1419d4f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzIyMDIyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoyMToxNFrOIGDgKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoyMToxNFrOIGDgKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxOTc1Mw==", "bodyText": "Could you please extract this call to stringOf method of the superclass? I was thinking about this for a long time but now it's the time :)\nOnce applied we can inline all the calls in the class slightly reducing the test class size. By the way use the new method only in this pull request. We can upgrade all the old ones later on.", "url": "https://github.com/epam/cloud-pipeline/pull/1650#discussion_r543219753", "createdAt": "2020-12-15T10:21:14Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "diffHunk": "@@ -0,0 +1,827 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.pipeline;\n+\n+import com.epam.pipeline.acl.pipeline.PipelineApiService;\n+import com.epam.pipeline.controller.vo.CheckRepositoryVO;\n+import com.epam.pipeline.controller.vo.GenerateFileVO;\n+import com.epam.pipeline.controller.vo.InstanceOfferParametersVO;\n+import com.epam.pipeline.controller.vo.PipelineSourceItemVO;\n+import com.epam.pipeline.controller.vo.PipelineSourceItemsVO;\n+import com.epam.pipeline.controller.vo.PipelineVO;\n+import com.epam.pipeline.controller.vo.PipelinesWithPermissionsVO;\n+import com.epam.pipeline.controller.vo.RegisterPipelineVersionVO;\n+import com.epam.pipeline.controller.vo.TaskGraphVO;\n+import com.epam.pipeline.controller.vo.UploadFileMetadata;\n+import com.epam.pipeline.entity.cluster.InstancePrice;\n+import com.epam.pipeline.entity.git.GitCommitEntry;\n+import com.epam.pipeline.entity.git.GitCredentials;\n+import com.epam.pipeline.entity.git.GitRepositoryEntry;\n+import com.epam.pipeline.entity.git.GitTagEntry;\n+import com.epam.pipeline.entity.pipeline.DocumentGenerationProperty;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.entity.pipeline.Revision;\n+import com.epam.pipeline.exception.git.GitClientException;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.git.GitCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyListOf;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+public class PipelineControllerTest extends AbstractControllerTest {\n+\n+    private static final String PIPELINE_URL = SERVLET_PATH + \"/pipeline\";\n+    private static final String PIPELINE_REGISTER_URL = PIPELINE_URL + \"/register\";\n+    private static final String PIPELINE_CHECK_URL = PIPELINE_URL + \"/check\";\n+    private static final String PIPELINE_UPDATE_URL = PIPELINE_URL + \"/update\";\n+    private static final String PIPELINE_UPDATE_TOKEN_URL = PIPELINE_URL + \"/updateToken\";\n+    private static final String PIPELINE_LOAD_ALL_URL = PIPELINE_URL + \"/loadAll\";\n+    private static final String PIPELINE_FIND_URL = PIPELINE_URL + \"/find\";\n+    private static final String PIPELINE_LOAD_ALL_PERMISSIONS_URL = PIPELINE_URL + \"/permissions\";\n+    private static final String PIPELINE_ID_URL = PIPELINE_URL + \"/%d\";\n+    private static final String PIPELINE_ID_LOAD_URL = PIPELINE_ID_URL + \"/load\";\n+    private static final String PIPELINE_ID_DELETE_URL = PIPELINE_ID_URL + \"/delete\";\n+    private static final String PIPELINE_ID_RUNS_URL = PIPELINE_ID_URL + \"/runs\";\n+    private static final String PIPELINE_ID_VERSIONS_URL = PIPELINE_ID_URL + \"/versions\";\n+    private static final String PIPELINE_ID_VERSION_URL = PIPELINE_ID_URL + \"/version\";\n+    private static final String PIPELINE_VERSION_REGISTER_URL = PIPELINE_URL + \"/version/register\";\n+    private static final String PIPELINE_ID_CLONE_URL = PIPELINE_ID_URL + \"/clone\";\n+    private static final String PIPELINE_ID_PRICE_URL = PIPELINE_ID_URL + \"/price\";\n+    private static final String PIPELINE_ID_GRAPH_URL = PIPELINE_ID_URL + \"/graph\";\n+    private static final String PIPELINE_ID_SOURCES_URL = PIPELINE_ID_URL + \"/sources\";\n+    private static final String PIPELINE_ID_FOLDER_URL = PIPELINE_ID_URL + \"/folder\";\n+    private static final String PIPELINE_ID_DOCS_URL = PIPELINE_ID_URL + \"/docs\";\n+    private static final String PIPELINE_ID_FILE_URL = PIPELINE_ID_URL + \"/file\";\n+    private static final String PIPELINE_ID_FILE_TRUNCATE_URL = PIPELINE_ID_FILE_URL + \"/truncate\";\n+    private static final String PIPELINE_ID_FILE_DOWNLOAD_URL = PIPELINE_ID_FILE_URL + \"/download\";\n+    private static final String PIPELINE_ID_FILE_UPLOAD_URL = PIPELINE_ID_FILE_URL + \"/upload\";\n+    private static final String PIPELINE_ID_FILE_GENERATE_URL = PIPELINE_ID_FILE_URL + \"/generate\";\n+    private static final String PIPELINE_ID_FILES_URL = PIPELINE_ID_URL + \"/files\";\n+    private static final String PIPELINE_GIT_URL = PIPELINE_URL + \"/git\";\n+    private static final String PIPELINE_PRICE_URL = PIPELINE_URL + \"/price\";\n+    private static final String PIPELINE_GIT_CREDENTIALS_URL = PIPELINE_GIT_URL + \"/credentials\";\n+    private static final String PIPELINE_ID_TEMPLATE_URL = PIPELINE_ID_URL + \"/template\";\n+    private static final String PIPELINE_ID_TEMPLATE_PROPERTIES_URL = PIPELINE_ID_TEMPLATE_URL + \"/properties\";\n+    private static final String PIPELINE_ID_TEMPLATE_PROPERTIES_NAME_URL = PIPELINE_ID_TEMPLATE_PROPERTIES_URL + \"/%s\";\n+    private static final String PIPELINE_TEMPLATE_PROPERTIES_URL = PIPELINE_URL + \"/template\" + \"/properties\";\n+    private static final String PIPELINE_FIND_BY_URL_URL = PIPELINE_URL + \"/findByUrl\";\n+    private static final String PIPELINE_ID_ADD_HOOK_URL = PIPELINE_ID_URL + \"/addHook\";\n+    private static final String PIPELINE_ID_REPOSITORY_URL = PIPELINE_ID_URL + \"/repository\";\n+    private static final String PIPELINE_ID_COPY_URL = PIPELINE_ID_URL + \"/copy\";\n+\n+    private static final String LOAD_VERSION = \"loadVersion\";\n+    private static final String PAGE_NUM = \"pageNum\";\n+    private static final String PAGE_SIZE = \"pageSize\";\n+    private static final String STRING_ID = \"id\";\n+    private static final String KEEP_REPOSITORY = \"keepRepository\";\n+    private static final String VERSION = \"version\";\n+    private static final String DURATION = \"duration\";\n+    private static final String CONFIG = \"config\";\n+    private static final String PATH = \"path\";\n+    private static final String RECURSIVE = \"recursive\";\n+    private static final String URL = \"url\";\n+    private static final String PARENT_ID = \"parentId\";\n+    private static final String NAME = \"name\";\n+    private static final String FILE_SIZE = \"0 Kb\";\n+    private static final String BYTE_LIMIT = \"byteLimit\";\n+\n+    private final Pipeline pipeline = PipelineCreatorUtils.getPipeline();\n+    private final PipelineVO pipelineVO = PipelineCreatorUtils.getPipelineVO();\n+    private final CheckRepositoryVO repositoryVO = PipelineCreatorUtils.getCheckRepositoryVO();\n+    private final PipelinesWithPermissionsVO pipelinesWithPermissionsVO =\n+            PipelineCreatorUtils.getPipelinesWithPermissionsVO();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun();\n+    private final Revision revision = PipelineCreatorUtils.getRevision();\n+    private final GitTagEntry gitTagEntry = GitCreatorUtils.getGitTagEntry();\n+    private final GitCredentials gitCredentials = GitCreatorUtils.getGitCredentials();\n+    private final InstancePrice instancePrice = PipelineCreatorUtils.getInstancePrice();\n+    private final InstanceOfferParametersVO instance = PipelineCreatorUtils.getInstanceOfferParametersVO();\n+    private final TaskGraphVO taskGraphVO = PipelineCreatorUtils.getTaskGraphVO();\n+    private final GitRepositoryEntry gitRepositoryEntry = GitCreatorUtils.getGitRepositoryEntry();\n+    private final PipelineSourceItemVO sourceItemVO = PipelineCreatorUtils.getPipelineSourceItemVO();\n+    private final PipelineSourceItemsVO sourceItemsVO = PipelineCreatorUtils.getPipelineSourceItemsVO();\n+    private final GitCommitEntry gitCommitEntry = GitCreatorUtils.getGitCommitEntry();\n+    private final UploadFileMetadata fileMetadata = PipelineCreatorUtils.getUploadFileMetadata();\n+    private final GenerateFileVO generateFileVO = PipelineCreatorUtils.getGenerateFileVO();\n+    private final RegisterPipelineVersionVO pipelineVersionVO = PipelineCreatorUtils.getRegisterPipelineVersionVO();\n+    private final DocumentGenerationProperty documentGenerationProperty =\n+            PipelineCreatorUtils.getDocumentGenerationProperty();\n+\n+    private final List<Pipeline> pipelineList = Collections.singletonList(pipeline);\n+    private final List<PipelineRun> pipelineRunList = Collections.singletonList(pipelineRun);\n+    private final List<Revision> revisionList = Collections.singletonList(revision);\n+    private final List<GitRepositoryEntry> gitRepositoryEntries = Collections.singletonList(gitRepositoryEntry);\n+    private final List<UploadFileMetadata> fileMetadataList = Collections.singletonList(fileMetadata);\n+    private final List<DocumentGenerationProperty> generationProperties =\n+            Collections.singletonList(documentGenerationProperty);\n+\n+    @Autowired\n+    private PipelineApiService mockPipelineApiService;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRegisterPipeline() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(pipelineVO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaca842dcf8ae031a147285098de9042d1419d4f"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzgxMzA4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozOTo1M1rOIGI3vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozOTo1M1rOIGI3vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNzcxMA==", "bodyText": "Could you please extract these lines along with the corresponding assert to a private method in PipelineControllerTest.", "url": "https://github.com/epam/cloud-pipeline/pull/1650#discussion_r543307710", "createdAt": "2020-12-15T12:39:53Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "diffHunk": "@@ -0,0 +1,827 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.pipeline;\n+\n+import com.epam.pipeline.acl.pipeline.PipelineApiService;\n+import com.epam.pipeline.controller.vo.CheckRepositoryVO;\n+import com.epam.pipeline.controller.vo.GenerateFileVO;\n+import com.epam.pipeline.controller.vo.InstanceOfferParametersVO;\n+import com.epam.pipeline.controller.vo.PipelineSourceItemVO;\n+import com.epam.pipeline.controller.vo.PipelineSourceItemsVO;\n+import com.epam.pipeline.controller.vo.PipelineVO;\n+import com.epam.pipeline.controller.vo.PipelinesWithPermissionsVO;\n+import com.epam.pipeline.controller.vo.RegisterPipelineVersionVO;\n+import com.epam.pipeline.controller.vo.TaskGraphVO;\n+import com.epam.pipeline.controller.vo.UploadFileMetadata;\n+import com.epam.pipeline.entity.cluster.InstancePrice;\n+import com.epam.pipeline.entity.git.GitCommitEntry;\n+import com.epam.pipeline.entity.git.GitCredentials;\n+import com.epam.pipeline.entity.git.GitRepositoryEntry;\n+import com.epam.pipeline.entity.git.GitTagEntry;\n+import com.epam.pipeline.entity.pipeline.DocumentGenerationProperty;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.entity.pipeline.Revision;\n+import com.epam.pipeline.exception.git.GitClientException;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.git.GitCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyListOf;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+public class PipelineControllerTest extends AbstractControllerTest {\n+\n+    private static final String PIPELINE_URL = SERVLET_PATH + \"/pipeline\";\n+    private static final String PIPELINE_REGISTER_URL = PIPELINE_URL + \"/register\";\n+    private static final String PIPELINE_CHECK_URL = PIPELINE_URL + \"/check\";\n+    private static final String PIPELINE_UPDATE_URL = PIPELINE_URL + \"/update\";\n+    private static final String PIPELINE_UPDATE_TOKEN_URL = PIPELINE_URL + \"/updateToken\";\n+    private static final String PIPELINE_LOAD_ALL_URL = PIPELINE_URL + \"/loadAll\";\n+    private static final String PIPELINE_FIND_URL = PIPELINE_URL + \"/find\";\n+    private static final String PIPELINE_LOAD_ALL_PERMISSIONS_URL = PIPELINE_URL + \"/permissions\";\n+    private static final String PIPELINE_ID_URL = PIPELINE_URL + \"/%d\";\n+    private static final String PIPELINE_ID_LOAD_URL = PIPELINE_ID_URL + \"/load\";\n+    private static final String PIPELINE_ID_DELETE_URL = PIPELINE_ID_URL + \"/delete\";\n+    private static final String PIPELINE_ID_RUNS_URL = PIPELINE_ID_URL + \"/runs\";\n+    private static final String PIPELINE_ID_VERSIONS_URL = PIPELINE_ID_URL + \"/versions\";\n+    private static final String PIPELINE_ID_VERSION_URL = PIPELINE_ID_URL + \"/version\";\n+    private static final String PIPELINE_VERSION_REGISTER_URL = PIPELINE_URL + \"/version/register\";\n+    private static final String PIPELINE_ID_CLONE_URL = PIPELINE_ID_URL + \"/clone\";\n+    private static final String PIPELINE_ID_PRICE_URL = PIPELINE_ID_URL + \"/price\";\n+    private static final String PIPELINE_ID_GRAPH_URL = PIPELINE_ID_URL + \"/graph\";\n+    private static final String PIPELINE_ID_SOURCES_URL = PIPELINE_ID_URL + \"/sources\";\n+    private static final String PIPELINE_ID_FOLDER_URL = PIPELINE_ID_URL + \"/folder\";\n+    private static final String PIPELINE_ID_DOCS_URL = PIPELINE_ID_URL + \"/docs\";\n+    private static final String PIPELINE_ID_FILE_URL = PIPELINE_ID_URL + \"/file\";\n+    private static final String PIPELINE_ID_FILE_TRUNCATE_URL = PIPELINE_ID_FILE_URL + \"/truncate\";\n+    private static final String PIPELINE_ID_FILE_DOWNLOAD_URL = PIPELINE_ID_FILE_URL + \"/download\";\n+    private static final String PIPELINE_ID_FILE_UPLOAD_URL = PIPELINE_ID_FILE_URL + \"/upload\";\n+    private static final String PIPELINE_ID_FILE_GENERATE_URL = PIPELINE_ID_FILE_URL + \"/generate\";\n+    private static final String PIPELINE_ID_FILES_URL = PIPELINE_ID_URL + \"/files\";\n+    private static final String PIPELINE_GIT_URL = PIPELINE_URL + \"/git\";\n+    private static final String PIPELINE_PRICE_URL = PIPELINE_URL + \"/price\";\n+    private static final String PIPELINE_GIT_CREDENTIALS_URL = PIPELINE_GIT_URL + \"/credentials\";\n+    private static final String PIPELINE_ID_TEMPLATE_URL = PIPELINE_ID_URL + \"/template\";\n+    private static final String PIPELINE_ID_TEMPLATE_PROPERTIES_URL = PIPELINE_ID_TEMPLATE_URL + \"/properties\";\n+    private static final String PIPELINE_ID_TEMPLATE_PROPERTIES_NAME_URL = PIPELINE_ID_TEMPLATE_PROPERTIES_URL + \"/%s\";\n+    private static final String PIPELINE_TEMPLATE_PROPERTIES_URL = PIPELINE_URL + \"/template\" + \"/properties\";\n+    private static final String PIPELINE_FIND_BY_URL_URL = PIPELINE_URL + \"/findByUrl\";\n+    private static final String PIPELINE_ID_ADD_HOOK_URL = PIPELINE_ID_URL + \"/addHook\";\n+    private static final String PIPELINE_ID_REPOSITORY_URL = PIPELINE_ID_URL + \"/repository\";\n+    private static final String PIPELINE_ID_COPY_URL = PIPELINE_ID_URL + \"/copy\";\n+\n+    private static final String LOAD_VERSION = \"loadVersion\";\n+    private static final String PAGE_NUM = \"pageNum\";\n+    private static final String PAGE_SIZE = \"pageSize\";\n+    private static final String STRING_ID = \"id\";\n+    private static final String KEEP_REPOSITORY = \"keepRepository\";\n+    private static final String VERSION = \"version\";\n+    private static final String DURATION = \"duration\";\n+    private static final String CONFIG = \"config\";\n+    private static final String PATH = \"path\";\n+    private static final String RECURSIVE = \"recursive\";\n+    private static final String URL = \"url\";\n+    private static final String PARENT_ID = \"parentId\";\n+    private static final String NAME = \"name\";\n+    private static final String FILE_SIZE = \"0 Kb\";\n+    private static final String BYTE_LIMIT = \"byteLimit\";\n+\n+    private final Pipeline pipeline = PipelineCreatorUtils.getPipeline();\n+    private final PipelineVO pipelineVO = PipelineCreatorUtils.getPipelineVO();\n+    private final CheckRepositoryVO repositoryVO = PipelineCreatorUtils.getCheckRepositoryVO();\n+    private final PipelinesWithPermissionsVO pipelinesWithPermissionsVO =\n+            PipelineCreatorUtils.getPipelinesWithPermissionsVO();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun();\n+    private final Revision revision = PipelineCreatorUtils.getRevision();\n+    private final GitTagEntry gitTagEntry = GitCreatorUtils.getGitTagEntry();\n+    private final GitCredentials gitCredentials = GitCreatorUtils.getGitCredentials();\n+    private final InstancePrice instancePrice = PipelineCreatorUtils.getInstancePrice();\n+    private final InstanceOfferParametersVO instance = PipelineCreatorUtils.getInstanceOfferParametersVO();\n+    private final TaskGraphVO taskGraphVO = PipelineCreatorUtils.getTaskGraphVO();\n+    private final GitRepositoryEntry gitRepositoryEntry = GitCreatorUtils.getGitRepositoryEntry();\n+    private final PipelineSourceItemVO sourceItemVO = PipelineCreatorUtils.getPipelineSourceItemVO();\n+    private final PipelineSourceItemsVO sourceItemsVO = PipelineCreatorUtils.getPipelineSourceItemsVO();\n+    private final GitCommitEntry gitCommitEntry = GitCreatorUtils.getGitCommitEntry();\n+    private final UploadFileMetadata fileMetadata = PipelineCreatorUtils.getUploadFileMetadata();\n+    private final GenerateFileVO generateFileVO = PipelineCreatorUtils.getGenerateFileVO();\n+    private final RegisterPipelineVersionVO pipelineVersionVO = PipelineCreatorUtils.getRegisterPipelineVersionVO();\n+    private final DocumentGenerationProperty documentGenerationProperty =\n+            PipelineCreatorUtils.getDocumentGenerationProperty();\n+\n+    private final List<Pipeline> pipelineList = Collections.singletonList(pipeline);\n+    private final List<PipelineRun> pipelineRunList = Collections.singletonList(pipelineRun);\n+    private final List<Revision> revisionList = Collections.singletonList(revision);\n+    private final List<GitRepositoryEntry> gitRepositoryEntries = Collections.singletonList(gitRepositoryEntry);\n+    private final List<UploadFileMetadata> fileMetadataList = Collections.singletonList(fileMetadata);\n+    private final List<DocumentGenerationProperty> generationProperties =\n+            Collections.singletonList(documentGenerationProperty);\n+\n+    @Autowired\n+    private PipelineApiService mockPipelineApiService;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRegisterPipeline() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(pipelineVO);\n+        doReturn(pipeline).when(mockPipelineApiService).create(pipelineVO);\n+\n+        final MvcResult mvcResult = performRequest(post(PIPELINE_REGISTER_URL).content(content));\n+\n+        verify(mockPipelineApiService).create(pipelineVO);\n+        assertResponse(mvcResult, pipeline, PipelineCreatorUtils.PIPELINE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailRegisterPipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(PIPELINE_REGISTER_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCheckPipelineRepository() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(repositoryVO);\n+        doReturn(repositoryVO).when(mockPipelineApiService).check(repositoryVO);\n+\n+        final MvcResult mvcResult = performRequest(post(PIPELINE_CHECK_URL).content(content));\n+\n+        verify(mockPipelineApiService).check(repositoryVO);\n+        assertResponse(mvcResult, repositoryVO, PipelineCreatorUtils.CHECK_REPOSITORY_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailCheckPipelineRepositoryForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(PIPELINE_CHECK_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdatePipeline() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(pipelineVO);\n+        doReturn(pipeline).when(mockPipelineApiService).update(pipelineVO);\n+\n+        final MvcResult mvcResult = performRequest(post(PIPELINE_UPDATE_URL).content(content));\n+\n+        verify(mockPipelineApiService).update(pipelineVO);\n+        assertResponse(mvcResult, pipeline, PipelineCreatorUtils.PIPELINE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdatePipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(PIPELINE_UPDATE_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdatePipelineToken() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(pipelineVO);\n+        doReturn(pipeline).when(mockPipelineApiService).updateToken(pipelineVO);\n+\n+        final MvcResult mvcResult = performRequest(post(PIPELINE_UPDATE_TOKEN_URL).content(content));\n+\n+        verify(mockPipelineApiService).updateToken(pipelineVO);\n+        assertResponse(mvcResult, pipeline, PipelineCreatorUtils.PIPELINE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdatePipelineTokenForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(PIPELINE_UPDATE_TOKEN_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAllPipelines() {\n+        doReturn(pipelineList).when(mockPipelineApiService).loadAllPipelines(true);\n+\n+        final MvcResult mvcResult = performRequest(get(PIPELINE_LOAD_ALL_URL)\n+                .params(multiValueMapOf(LOAD_VERSION, true)));\n+\n+        verify(mockPipelineApiService).loadAllPipelines(true);\n+        assertResponse(mvcResult, pipelineList, PipelineCreatorUtils.PIPELINE_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllPipelinesForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(PIPELINE_LOAD_ALL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAllPipelinesWithPermissions() {\n+        doReturn(pipelinesWithPermissionsVO).when(mockPipelineApiService)\n+                .loadAllPipelinesWithPermissions(TEST_INT, TEST_INT);\n+\n+        final MvcResult mvcResult = performRequest(get(PIPELINE_LOAD_ALL_PERMISSIONS_URL)\n+                .params(multiValueMapOf(PAGE_NUM, TEST_INT,\n+                                        PAGE_SIZE, TEST_INT)));\n+\n+        verify(mockPipelineApiService).loadAllPipelinesWithPermissions(TEST_INT, TEST_INT);\n+        assertResponse(mvcResult, pipelinesWithPermissionsVO, PipelineCreatorUtils.PIPELINE_WITH_PERMISSIONS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllPipelinesWithPermissionsForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(PIPELINE_LOAD_ALL_PERMISSIONS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadPipeline() {\n+        doReturn(pipeline).when(mockPipelineApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_LOAD_URL, ID)));\n+\n+        verify(mockPipelineApiService).load(ID);\n+        assertResponse(mvcResult, pipeline, PipelineCreatorUtils.PIPELINE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadPipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_LOAD_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindPipeline() {\n+        doReturn(pipeline).when(mockPipelineApiService).loadPipelineByIdOrName(TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(PIPELINE_FIND_URL)\n+                .params(multiValueMapOf(STRING_ID, TEST_STRING)));\n+\n+        verify(mockPipelineApiService).loadPipelineByIdOrName(TEST_STRING);\n+        assertResponse(mvcResult, pipeline, PipelineCreatorUtils.PIPELINE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindPipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(PIPELINE_FIND_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeletePipeline() {\n+        doReturn(pipeline).when(mockPipelineApiService).delete(ID, false);\n+\n+        final MvcResult mvcResult = performRequest(delete(String.format(PIPELINE_ID_DELETE_URL, ID))\n+                .params(multiValueMapOf(KEEP_REPOSITORY, false)));\n+\n+        verify(mockPipelineApiService).delete(ID, false);\n+        assertResponse(mvcResult, pipeline, PipelineCreatorUtils.PIPELINE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeletePipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(delete(String.format(PIPELINE_ID_DELETE_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadRunsByPipeline() {\n+        doReturn(pipelineRunList).when(mockPipelineApiService).loadAllRunsByPipeline(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_RUNS_URL, ID)));\n+\n+        verify(mockPipelineApiService).loadAllRunsByPipeline(ID);\n+        assertResponse(mvcResult, pipelineRunList, PipelineCreatorUtils.PIPELINE_RUN_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadRunsByPipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_RUNS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadVersionsByPipeline() throws Exception {\n+        doReturn(revisionList).when(mockPipelineApiService).loadAllVersionFromGit(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_VERSIONS_URL, ID)));\n+\n+        verify(mockPipelineApiService).loadAllVersionFromGit(ID);\n+        assertResponse(mvcResult, revisionList, PipelineCreatorUtils.REVISION_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadVersionsByPipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_VERSIONS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadPipelineVersion() throws Exception {\n+        doReturn(gitTagEntry).when(mockPipelineApiService).loadRevision(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_VERSION_URL, ID))\n+                .params(multiValueMapOf(VERSION, TEST_STRING)));\n+\n+        verify(mockPipelineApiService).loadRevision(ID, TEST_STRING);\n+        assertResponse(mvcResult, gitTagEntry, GitCreatorUtils.GIT_TAG_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadPipelineVersionForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_VERSION_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPipelineCloneURL() {\n+        doReturn(TEST_STRING).when(mockPipelineApiService).getPipelineCloneUrl(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_CLONE_URL, ID)));\n+\n+        verify(mockPipelineApiService).getPipelineCloneUrl(ID);\n+        assertResponse(mvcResult, TEST_STRING, CommonCreatorConstants.STRING_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetPipelineCloneURLForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_CLONE_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPipelineCredentials() {\n+        doReturn(gitCredentials).when(mockPipelineApiService).getPipelineCredentials(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(PIPELINE_GIT_CREDENTIALS_URL)\n+                .params(multiValueMapOf(DURATION, ID)));\n+\n+        verify(mockPipelineApiService).getPipelineCredentials(ID);\n+        assertResponse(mvcResult, gitCredentials, GitCreatorUtils.GIT_CREDENTIALS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetPipelineCredentialsForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(PIPELINE_GIT_CREDENTIALS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPipelineEstimatedPrice() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(instance);\n+        doReturn(instancePrice).when(mockPipelineApiService)\n+                .getInstanceEstimatedPrice(ID, TEST_STRING, TEST_STRING, TEST_STRING, TEST_INT, true, ID);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(PIPELINE_ID_PRICE_URL, ID)).content(content)\n+                .params(multiValueMapOf(VERSION, TEST_STRING,\n+                                        CONFIG, TEST_STRING)));\n+\n+        verify(mockPipelineApiService)\n+                .getInstanceEstimatedPrice(ID, TEST_STRING, TEST_STRING, TEST_STRING, TEST_INT, true, ID);\n+        assertResponse(mvcResult, instancePrice, PipelineCreatorUtils.INSTANCE_PRICE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetPipelineEstimatedPriceForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_PRICE_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetEstimatedPrice() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(instance);\n+        doReturn(instancePrice).when(mockPipelineApiService)\n+                .getInstanceEstimatedPrice(TEST_STRING, TEST_INT, true, ID);\n+\n+        final MvcResult mvcResult = performRequest(post(PIPELINE_PRICE_URL).content(content));\n+\n+        verify(mockPipelineApiService).getInstanceEstimatedPrice(TEST_STRING, TEST_INT, true, ID);\n+        assertResponse(mvcResult, instancePrice, PipelineCreatorUtils.INSTANCE_PRICE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetEstimatedPriceForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(PIPELINE_PRICE_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetWorkflowGraph() {\n+        doReturn(taskGraphVO).when(mockPipelineApiService).getWorkflowGraph(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_GRAPH_URL, ID))\n+                .params(multiValueMapOf(VERSION, TEST_STRING)));\n+\n+        verify(mockPipelineApiService).getWorkflowGraph(ID, TEST_STRING);\n+        assertResponse(mvcResult, taskGraphVO, PipelineCreatorUtils.TASK_GRAPH_VO_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetWorkflowGraphForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_GRAPH_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPipelineSources() throws GitClientException {\n+        doReturn(gitRepositoryEntries).when(mockPipelineApiService)\n+                .getPipelineSources(ID, TEST_STRING, TEST_STRING, true, true);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_SOURCES_URL, ID))\n+                .params(multiValueMapOf(VERSION, TEST_STRING,\n+                                        PATH, TEST_STRING,\n+                                        RECURSIVE, true)));\n+\n+        verify(mockPipelineApiService).getPipelineSources(ID, TEST_STRING, TEST_STRING, true, true);\n+        assertResponse(mvcResult, gitRepositoryEntries, GitCreatorUtils.GIT_REPOSITORY_ENTRY_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetPipelineSourcesForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_SOURCES_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCreateOrRenamePipelineFolder() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(sourceItemVO);\n+        doReturn(gitCommitEntry).when(mockPipelineApiService).createOrRenameFolder(ID, sourceItemVO);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(PIPELINE_ID_FOLDER_URL, ID)).content(content));\n+\n+        verify(mockPipelineApiService).createOrRenameFolder(ID, sourceItemVO);\n+        assertResponse(mvcResult, gitCommitEntry, GitCreatorUtils.GIT_COMMIT_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailCreateOrRenamePipelineFolderForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(String.format(PIPELINE_ID_FOLDER_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRemovePipelineFolder() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(sourceItemVO);\n+        doReturn(gitCommitEntry).when(mockPipelineApiService).removeFolder(ID, TEST_STRING, TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(delete(String.format(PIPELINE_ID_FOLDER_URL, ID)).content(content));\n+\n+        verify(mockPipelineApiService).removeFolder(ID, TEST_STRING, TEST_STRING, TEST_STRING);\n+        assertResponse(mvcResult, gitCommitEntry, GitCreatorUtils.GIT_COMMIT_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailRemovePipelineFolderForUnauthorizedUser() {\n+        performUnauthorizedRequest(delete(String.format(PIPELINE_ID_FOLDER_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPipelineDocs() throws Exception {\n+        doReturn(gitRepositoryEntries).when(mockPipelineApiService).getPipelineDocs(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_DOCS_URL, ID))\n+                .params(multiValueMapOf(VERSION, TEST_STRING)));\n+\n+        verify(mockPipelineApiService).getPipelineDocs(ID, TEST_STRING);\n+        assertResponse(mvcResult, gitRepositoryEntries, GitCreatorUtils.GIT_REPOSITORY_ENTRY_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetPipelineDocsForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_DOCS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPipelineFile() throws Exception {\n+        doReturn(TEST_ARRAY).when(mockPipelineApiService).getPipelineFileContents(ID, TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_FILE_URL, ID))\n+                .params(multiValueMapOf(VERSION, TEST_STRING,\n+                                        PATH, TEST_STRING)));\n+        final String contentAsString = mvcResult.getResponse().getContentAsString();\n+        final byte[] returnedEntityBody = objectMapper.readValue(contentAsString, byte[].class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaca842dcf8ae031a147285098de9042d1419d4f"}, "originalPosition": 528}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzgzOTgwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0NTo1NVrOIGJHSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0NTo1NVrOIGJHSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxMTY5MA==", "bodyText": "Could you please use a regular assertResponse method? Also let's check that pipelineApiService.uploadFiles is called with the proper file metadata using an argument captor.\nThe controller method is quite an unusual one so let's test most of its logic.", "url": "https://github.com/epam/cloud-pipeline/pull/1650#discussion_r543311690", "createdAt": "2020-12-15T12:45:55Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "diffHunk": "@@ -0,0 +1,827 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.pipeline;\n+\n+import com.epam.pipeline.acl.pipeline.PipelineApiService;\n+import com.epam.pipeline.controller.vo.CheckRepositoryVO;\n+import com.epam.pipeline.controller.vo.GenerateFileVO;\n+import com.epam.pipeline.controller.vo.InstanceOfferParametersVO;\n+import com.epam.pipeline.controller.vo.PipelineSourceItemVO;\n+import com.epam.pipeline.controller.vo.PipelineSourceItemsVO;\n+import com.epam.pipeline.controller.vo.PipelineVO;\n+import com.epam.pipeline.controller.vo.PipelinesWithPermissionsVO;\n+import com.epam.pipeline.controller.vo.RegisterPipelineVersionVO;\n+import com.epam.pipeline.controller.vo.TaskGraphVO;\n+import com.epam.pipeline.controller.vo.UploadFileMetadata;\n+import com.epam.pipeline.entity.cluster.InstancePrice;\n+import com.epam.pipeline.entity.git.GitCommitEntry;\n+import com.epam.pipeline.entity.git.GitCredentials;\n+import com.epam.pipeline.entity.git.GitRepositoryEntry;\n+import com.epam.pipeline.entity.git.GitTagEntry;\n+import com.epam.pipeline.entity.pipeline.DocumentGenerationProperty;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.entity.pipeline.Revision;\n+import com.epam.pipeline.exception.git.GitClientException;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.git.GitCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_ARRAY;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.anyListOf;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+public class PipelineControllerTest extends AbstractControllerTest {\n+\n+    private static final String PIPELINE_URL = SERVLET_PATH + \"/pipeline\";\n+    private static final String PIPELINE_REGISTER_URL = PIPELINE_URL + \"/register\";\n+    private static final String PIPELINE_CHECK_URL = PIPELINE_URL + \"/check\";\n+    private static final String PIPELINE_UPDATE_URL = PIPELINE_URL + \"/update\";\n+    private static final String PIPELINE_UPDATE_TOKEN_URL = PIPELINE_URL + \"/updateToken\";\n+    private static final String PIPELINE_LOAD_ALL_URL = PIPELINE_URL + \"/loadAll\";\n+    private static final String PIPELINE_FIND_URL = PIPELINE_URL + \"/find\";\n+    private static final String PIPELINE_LOAD_ALL_PERMISSIONS_URL = PIPELINE_URL + \"/permissions\";\n+    private static final String PIPELINE_ID_URL = PIPELINE_URL + \"/%d\";\n+    private static final String PIPELINE_ID_LOAD_URL = PIPELINE_ID_URL + \"/load\";\n+    private static final String PIPELINE_ID_DELETE_URL = PIPELINE_ID_URL + \"/delete\";\n+    private static final String PIPELINE_ID_RUNS_URL = PIPELINE_ID_URL + \"/runs\";\n+    private static final String PIPELINE_ID_VERSIONS_URL = PIPELINE_ID_URL + \"/versions\";\n+    private static final String PIPELINE_ID_VERSION_URL = PIPELINE_ID_URL + \"/version\";\n+    private static final String PIPELINE_VERSION_REGISTER_URL = PIPELINE_URL + \"/version/register\";\n+    private static final String PIPELINE_ID_CLONE_URL = PIPELINE_ID_URL + \"/clone\";\n+    private static final String PIPELINE_ID_PRICE_URL = PIPELINE_ID_URL + \"/price\";\n+    private static final String PIPELINE_ID_GRAPH_URL = PIPELINE_ID_URL + \"/graph\";\n+    private static final String PIPELINE_ID_SOURCES_URL = PIPELINE_ID_URL + \"/sources\";\n+    private static final String PIPELINE_ID_FOLDER_URL = PIPELINE_ID_URL + \"/folder\";\n+    private static final String PIPELINE_ID_DOCS_URL = PIPELINE_ID_URL + \"/docs\";\n+    private static final String PIPELINE_ID_FILE_URL = PIPELINE_ID_URL + \"/file\";\n+    private static final String PIPELINE_ID_FILE_TRUNCATE_URL = PIPELINE_ID_FILE_URL + \"/truncate\";\n+    private static final String PIPELINE_ID_FILE_DOWNLOAD_URL = PIPELINE_ID_FILE_URL + \"/download\";\n+    private static final String PIPELINE_ID_FILE_UPLOAD_URL = PIPELINE_ID_FILE_URL + \"/upload\";\n+    private static final String PIPELINE_ID_FILE_GENERATE_URL = PIPELINE_ID_FILE_URL + \"/generate\";\n+    private static final String PIPELINE_ID_FILES_URL = PIPELINE_ID_URL + \"/files\";\n+    private static final String PIPELINE_GIT_URL = PIPELINE_URL + \"/git\";\n+    private static final String PIPELINE_PRICE_URL = PIPELINE_URL + \"/price\";\n+    private static final String PIPELINE_GIT_CREDENTIALS_URL = PIPELINE_GIT_URL + \"/credentials\";\n+    private static final String PIPELINE_ID_TEMPLATE_URL = PIPELINE_ID_URL + \"/template\";\n+    private static final String PIPELINE_ID_TEMPLATE_PROPERTIES_URL = PIPELINE_ID_TEMPLATE_URL + \"/properties\";\n+    private static final String PIPELINE_ID_TEMPLATE_PROPERTIES_NAME_URL = PIPELINE_ID_TEMPLATE_PROPERTIES_URL + \"/%s\";\n+    private static final String PIPELINE_TEMPLATE_PROPERTIES_URL = PIPELINE_URL + \"/template\" + \"/properties\";\n+    private static final String PIPELINE_FIND_BY_URL_URL = PIPELINE_URL + \"/findByUrl\";\n+    private static final String PIPELINE_ID_ADD_HOOK_URL = PIPELINE_ID_URL + \"/addHook\";\n+    private static final String PIPELINE_ID_REPOSITORY_URL = PIPELINE_ID_URL + \"/repository\";\n+    private static final String PIPELINE_ID_COPY_URL = PIPELINE_ID_URL + \"/copy\";\n+\n+    private static final String LOAD_VERSION = \"loadVersion\";\n+    private static final String PAGE_NUM = \"pageNum\";\n+    private static final String PAGE_SIZE = \"pageSize\";\n+    private static final String STRING_ID = \"id\";\n+    private static final String KEEP_REPOSITORY = \"keepRepository\";\n+    private static final String VERSION = \"version\";\n+    private static final String DURATION = \"duration\";\n+    private static final String CONFIG = \"config\";\n+    private static final String PATH = \"path\";\n+    private static final String RECURSIVE = \"recursive\";\n+    private static final String URL = \"url\";\n+    private static final String PARENT_ID = \"parentId\";\n+    private static final String NAME = \"name\";\n+    private static final String FILE_SIZE = \"0 Kb\";\n+    private static final String BYTE_LIMIT = \"byteLimit\";\n+\n+    private final Pipeline pipeline = PipelineCreatorUtils.getPipeline();\n+    private final PipelineVO pipelineVO = PipelineCreatorUtils.getPipelineVO();\n+    private final CheckRepositoryVO repositoryVO = PipelineCreatorUtils.getCheckRepositoryVO();\n+    private final PipelinesWithPermissionsVO pipelinesWithPermissionsVO =\n+            PipelineCreatorUtils.getPipelinesWithPermissionsVO();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun();\n+    private final Revision revision = PipelineCreatorUtils.getRevision();\n+    private final GitTagEntry gitTagEntry = GitCreatorUtils.getGitTagEntry();\n+    private final GitCredentials gitCredentials = GitCreatorUtils.getGitCredentials();\n+    private final InstancePrice instancePrice = PipelineCreatorUtils.getInstancePrice();\n+    private final InstanceOfferParametersVO instance = PipelineCreatorUtils.getInstanceOfferParametersVO();\n+    private final TaskGraphVO taskGraphVO = PipelineCreatorUtils.getTaskGraphVO();\n+    private final GitRepositoryEntry gitRepositoryEntry = GitCreatorUtils.getGitRepositoryEntry();\n+    private final PipelineSourceItemVO sourceItemVO = PipelineCreatorUtils.getPipelineSourceItemVO();\n+    private final PipelineSourceItemsVO sourceItemsVO = PipelineCreatorUtils.getPipelineSourceItemsVO();\n+    private final GitCommitEntry gitCommitEntry = GitCreatorUtils.getGitCommitEntry();\n+    private final UploadFileMetadata fileMetadata = PipelineCreatorUtils.getUploadFileMetadata();\n+    private final GenerateFileVO generateFileVO = PipelineCreatorUtils.getGenerateFileVO();\n+    private final RegisterPipelineVersionVO pipelineVersionVO = PipelineCreatorUtils.getRegisterPipelineVersionVO();\n+    private final DocumentGenerationProperty documentGenerationProperty =\n+            PipelineCreatorUtils.getDocumentGenerationProperty();\n+\n+    private final List<Pipeline> pipelineList = Collections.singletonList(pipeline);\n+    private final List<PipelineRun> pipelineRunList = Collections.singletonList(pipelineRun);\n+    private final List<Revision> revisionList = Collections.singletonList(revision);\n+    private final List<GitRepositoryEntry> gitRepositoryEntries = Collections.singletonList(gitRepositoryEntry);\n+    private final List<UploadFileMetadata> fileMetadataList = Collections.singletonList(fileMetadata);\n+    private final List<DocumentGenerationProperty> generationProperties =\n+            Collections.singletonList(documentGenerationProperty);\n+\n+    @Autowired\n+    private PipelineApiService mockPipelineApiService;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRegisterPipeline() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(pipelineVO);\n+        doReturn(pipeline).when(mockPipelineApiService).create(pipelineVO);\n+\n+        final MvcResult mvcResult = performRequest(post(PIPELINE_REGISTER_URL).content(content));\n+\n+        verify(mockPipelineApiService).create(pipelineVO);\n+        assertResponse(mvcResult, pipeline, PipelineCreatorUtils.PIPELINE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailRegisterPipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(PIPELINE_REGISTER_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCheckPipelineRepository() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(repositoryVO);\n+        doReturn(repositoryVO).when(mockPipelineApiService).check(repositoryVO);\n+\n+        final MvcResult mvcResult = performRequest(post(PIPELINE_CHECK_URL).content(content));\n+\n+        verify(mockPipelineApiService).check(repositoryVO);\n+        assertResponse(mvcResult, repositoryVO, PipelineCreatorUtils.CHECK_REPOSITORY_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailCheckPipelineRepositoryForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(PIPELINE_CHECK_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdatePipeline() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(pipelineVO);\n+        doReturn(pipeline).when(mockPipelineApiService).update(pipelineVO);\n+\n+        final MvcResult mvcResult = performRequest(post(PIPELINE_UPDATE_URL).content(content));\n+\n+        verify(mockPipelineApiService).update(pipelineVO);\n+        assertResponse(mvcResult, pipeline, PipelineCreatorUtils.PIPELINE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdatePipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(PIPELINE_UPDATE_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdatePipelineToken() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(pipelineVO);\n+        doReturn(pipeline).when(mockPipelineApiService).updateToken(pipelineVO);\n+\n+        final MvcResult mvcResult = performRequest(post(PIPELINE_UPDATE_TOKEN_URL).content(content));\n+\n+        verify(mockPipelineApiService).updateToken(pipelineVO);\n+        assertResponse(mvcResult, pipeline, PipelineCreatorUtils.PIPELINE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdatePipelineTokenForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(PIPELINE_UPDATE_TOKEN_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAllPipelines() {\n+        doReturn(pipelineList).when(mockPipelineApiService).loadAllPipelines(true);\n+\n+        final MvcResult mvcResult = performRequest(get(PIPELINE_LOAD_ALL_URL)\n+                .params(multiValueMapOf(LOAD_VERSION, true)));\n+\n+        verify(mockPipelineApiService).loadAllPipelines(true);\n+        assertResponse(mvcResult, pipelineList, PipelineCreatorUtils.PIPELINE_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllPipelinesForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(PIPELINE_LOAD_ALL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAllPipelinesWithPermissions() {\n+        doReturn(pipelinesWithPermissionsVO).when(mockPipelineApiService)\n+                .loadAllPipelinesWithPermissions(TEST_INT, TEST_INT);\n+\n+        final MvcResult mvcResult = performRequest(get(PIPELINE_LOAD_ALL_PERMISSIONS_URL)\n+                .params(multiValueMapOf(PAGE_NUM, TEST_INT,\n+                                        PAGE_SIZE, TEST_INT)));\n+\n+        verify(mockPipelineApiService).loadAllPipelinesWithPermissions(TEST_INT, TEST_INT);\n+        assertResponse(mvcResult, pipelinesWithPermissionsVO, PipelineCreatorUtils.PIPELINE_WITH_PERMISSIONS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllPipelinesWithPermissionsForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(PIPELINE_LOAD_ALL_PERMISSIONS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadPipeline() {\n+        doReturn(pipeline).when(mockPipelineApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_LOAD_URL, ID)));\n+\n+        verify(mockPipelineApiService).load(ID);\n+        assertResponse(mvcResult, pipeline, PipelineCreatorUtils.PIPELINE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadPipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_LOAD_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindPipeline() {\n+        doReturn(pipeline).when(mockPipelineApiService).loadPipelineByIdOrName(TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(PIPELINE_FIND_URL)\n+                .params(multiValueMapOf(STRING_ID, TEST_STRING)));\n+\n+        verify(mockPipelineApiService).loadPipelineByIdOrName(TEST_STRING);\n+        assertResponse(mvcResult, pipeline, PipelineCreatorUtils.PIPELINE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindPipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(PIPELINE_FIND_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeletePipeline() {\n+        doReturn(pipeline).when(mockPipelineApiService).delete(ID, false);\n+\n+        final MvcResult mvcResult = performRequest(delete(String.format(PIPELINE_ID_DELETE_URL, ID))\n+                .params(multiValueMapOf(KEEP_REPOSITORY, false)));\n+\n+        verify(mockPipelineApiService).delete(ID, false);\n+        assertResponse(mvcResult, pipeline, PipelineCreatorUtils.PIPELINE_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeletePipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(delete(String.format(PIPELINE_ID_DELETE_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadRunsByPipeline() {\n+        doReturn(pipelineRunList).when(mockPipelineApiService).loadAllRunsByPipeline(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_RUNS_URL, ID)));\n+\n+        verify(mockPipelineApiService).loadAllRunsByPipeline(ID);\n+        assertResponse(mvcResult, pipelineRunList, PipelineCreatorUtils.PIPELINE_RUN_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadRunsByPipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_RUNS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadVersionsByPipeline() throws Exception {\n+        doReturn(revisionList).when(mockPipelineApiService).loadAllVersionFromGit(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_VERSIONS_URL, ID)));\n+\n+        verify(mockPipelineApiService).loadAllVersionFromGit(ID);\n+        assertResponse(mvcResult, revisionList, PipelineCreatorUtils.REVISION_LIST_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadVersionsByPipelineForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_VERSIONS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadPipelineVersion() throws Exception {\n+        doReturn(gitTagEntry).when(mockPipelineApiService).loadRevision(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_VERSION_URL, ID))\n+                .params(multiValueMapOf(VERSION, TEST_STRING)));\n+\n+        verify(mockPipelineApiService).loadRevision(ID, TEST_STRING);\n+        assertResponse(mvcResult, gitTagEntry, GitCreatorUtils.GIT_TAG_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadPipelineVersionForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_VERSION_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPipelineCloneURL() {\n+        doReturn(TEST_STRING).when(mockPipelineApiService).getPipelineCloneUrl(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_CLONE_URL, ID)));\n+\n+        verify(mockPipelineApiService).getPipelineCloneUrl(ID);\n+        assertResponse(mvcResult, TEST_STRING, CommonCreatorConstants.STRING_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetPipelineCloneURLForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_CLONE_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPipelineCredentials() {\n+        doReturn(gitCredentials).when(mockPipelineApiService).getPipelineCredentials(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(PIPELINE_GIT_CREDENTIALS_URL)\n+                .params(multiValueMapOf(DURATION, ID)));\n+\n+        verify(mockPipelineApiService).getPipelineCredentials(ID);\n+        assertResponse(mvcResult, gitCredentials, GitCreatorUtils.GIT_CREDENTIALS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetPipelineCredentialsForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(PIPELINE_GIT_CREDENTIALS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPipelineEstimatedPrice() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(instance);\n+        doReturn(instancePrice).when(mockPipelineApiService)\n+                .getInstanceEstimatedPrice(ID, TEST_STRING, TEST_STRING, TEST_STRING, TEST_INT, true, ID);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(PIPELINE_ID_PRICE_URL, ID)).content(content)\n+                .params(multiValueMapOf(VERSION, TEST_STRING,\n+                                        CONFIG, TEST_STRING)));\n+\n+        verify(mockPipelineApiService)\n+                .getInstanceEstimatedPrice(ID, TEST_STRING, TEST_STRING, TEST_STRING, TEST_INT, true, ID);\n+        assertResponse(mvcResult, instancePrice, PipelineCreatorUtils.INSTANCE_PRICE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetPipelineEstimatedPriceForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_PRICE_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetEstimatedPrice() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(instance);\n+        doReturn(instancePrice).when(mockPipelineApiService)\n+                .getInstanceEstimatedPrice(TEST_STRING, TEST_INT, true, ID);\n+\n+        final MvcResult mvcResult = performRequest(post(PIPELINE_PRICE_URL).content(content));\n+\n+        verify(mockPipelineApiService).getInstanceEstimatedPrice(TEST_STRING, TEST_INT, true, ID);\n+        assertResponse(mvcResult, instancePrice, PipelineCreatorUtils.INSTANCE_PRICE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetEstimatedPriceForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(PIPELINE_PRICE_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetWorkflowGraph() {\n+        doReturn(taskGraphVO).when(mockPipelineApiService).getWorkflowGraph(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_GRAPH_URL, ID))\n+                .params(multiValueMapOf(VERSION, TEST_STRING)));\n+\n+        verify(mockPipelineApiService).getWorkflowGraph(ID, TEST_STRING);\n+        assertResponse(mvcResult, taskGraphVO, PipelineCreatorUtils.TASK_GRAPH_VO_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetWorkflowGraphForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_GRAPH_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPipelineSources() throws GitClientException {\n+        doReturn(gitRepositoryEntries).when(mockPipelineApiService)\n+                .getPipelineSources(ID, TEST_STRING, TEST_STRING, true, true);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_SOURCES_URL, ID))\n+                .params(multiValueMapOf(VERSION, TEST_STRING,\n+                                        PATH, TEST_STRING,\n+                                        RECURSIVE, true)));\n+\n+        verify(mockPipelineApiService).getPipelineSources(ID, TEST_STRING, TEST_STRING, true, true);\n+        assertResponse(mvcResult, gitRepositoryEntries, GitCreatorUtils.GIT_REPOSITORY_ENTRY_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetPipelineSourcesForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_SOURCES_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCreateOrRenamePipelineFolder() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(sourceItemVO);\n+        doReturn(gitCommitEntry).when(mockPipelineApiService).createOrRenameFolder(ID, sourceItemVO);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(PIPELINE_ID_FOLDER_URL, ID)).content(content));\n+\n+        verify(mockPipelineApiService).createOrRenameFolder(ID, sourceItemVO);\n+        assertResponse(mvcResult, gitCommitEntry, GitCreatorUtils.GIT_COMMIT_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailCreateOrRenamePipelineFolderForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(String.format(PIPELINE_ID_FOLDER_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRemovePipelineFolder() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(sourceItemVO);\n+        doReturn(gitCommitEntry).when(mockPipelineApiService).removeFolder(ID, TEST_STRING, TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(delete(String.format(PIPELINE_ID_FOLDER_URL, ID)).content(content));\n+\n+        verify(mockPipelineApiService).removeFolder(ID, TEST_STRING, TEST_STRING, TEST_STRING);\n+        assertResponse(mvcResult, gitCommitEntry, GitCreatorUtils.GIT_COMMIT_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailRemovePipelineFolderForUnauthorizedUser() {\n+        performUnauthorizedRequest(delete(String.format(PIPELINE_ID_FOLDER_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPipelineDocs() throws Exception {\n+        doReturn(gitRepositoryEntries).when(mockPipelineApiService).getPipelineDocs(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_DOCS_URL, ID))\n+                .params(multiValueMapOf(VERSION, TEST_STRING)));\n+\n+        verify(mockPipelineApiService).getPipelineDocs(ID, TEST_STRING);\n+        assertResponse(mvcResult, gitRepositoryEntries, GitCreatorUtils.GIT_REPOSITORY_ENTRY_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetPipelineDocsForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_DOCS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetPipelineFile() throws Exception {\n+        doReturn(TEST_ARRAY).when(mockPipelineApiService).getPipelineFileContents(ID, TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_FILE_URL, ID))\n+                .params(multiValueMapOf(VERSION, TEST_STRING,\n+                                        PATH, TEST_STRING)));\n+        final String contentAsString = mvcResult.getResponse().getContentAsString();\n+        final byte[] returnedEntityBody = objectMapper.readValue(contentAsString, byte[].class);\n+\n+        verify(mockPipelineApiService).getPipelineFileContents(ID, TEST_STRING, TEST_STRING);\n+        assertThat(returnedEntityBody).isEqualTo(TEST_ARRAY);\n+    }\n+\n+    @Test\n+    public void shouldFailGetPipelineFileForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_FILE_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetTruncatedPipelineFile() throws Exception {\n+        doReturn(TEST_ARRAY).when(mockPipelineApiService)\n+                .getTruncatedPipelineFileContent(ID, TEST_STRING, TEST_STRING, TEST_INT);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(PIPELINE_ID_FILE_TRUNCATE_URL, ID))\n+                .params(multiValueMapOf(VERSION, TEST_STRING,\n+                                        PATH, TEST_STRING,\n+                                        BYTE_LIMIT, TEST_INT)));\n+        final String contentAsString = mvcResult.getResponse().getContentAsString();\n+        final byte[] returnedEntityBody = objectMapper.readValue(contentAsString, byte[].class);\n+\n+        verify(mockPipelineApiService).getTruncatedPipelineFileContent(ID, TEST_STRING, TEST_STRING, TEST_INT);\n+        assertThat(returnedEntityBody).isEqualTo(TEST_ARRAY);\n+    }\n+\n+    @Test\n+    public void shouldFailGetTruncatedPipelineFileForUnauthorizedUser() {\n+        performUnauthorizedRequest(get(String.format(PIPELINE_ID_FILE_TRUNCATE_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldModifyPipelineFile() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(sourceItemVO);\n+        doReturn(gitCommitEntry).when(mockPipelineApiService).modifyFile(ID, sourceItemVO);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(PIPELINE_ID_FILE_URL, ID)).content(content));\n+\n+        verify(mockPipelineApiService).modifyFile(ID, sourceItemVO);\n+        assertResponse(mvcResult, gitCommitEntry, GitCreatorUtils.GIT_COMMIT_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailModifyPipelineFileForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(String.format(PIPELINE_ID_FILE_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldModifyPipelineFiles() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(sourceItemsVO);\n+        doReturn(gitCommitEntry).when(mockPipelineApiService).modifyFiles(ID, sourceItemsVO);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(PIPELINE_ID_FILES_URL, ID)).content(content));\n+\n+        verify(mockPipelineApiService).modifyFiles(ID, sourceItemsVO);\n+        assertResponse(mvcResult, gitCommitEntry, GitCreatorUtils.GIT_COMMIT_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailModifyPipelineFilesForUnauthorizedUser() {\n+        performUnauthorizedRequest(post(String.format(PIPELINE_ID_FILES_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadFile() throws Exception {\n+        doReturn(gitCommitEntry).when(mockPipelineApiService).uploadFiles(ID, TEST_STRING, fileMetadataList);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(PIPELINE_ID_FILE_UPLOAD_URL, ID))\n+                        .params(multiValueMapOf(PATH, TEST_STRING)).content(MULTIPART_CONTENT),\n+                MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n+\n+        verify(mockPipelineApiService).uploadFiles(eq(ID), eq(TEST_STRING), anyListOf(UploadFileMetadata.class));\n+        final String expectedResult = mvcResult.getResponse().getContentAsString();\n+        assertThat(expectedResult).contains(MULTIPART_CONTENT_FILE_NAME)\n+                .contains(FILE_SIZE)\n+                .contains(MediaType.APPLICATION_OCTET_STREAM_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaca842dcf8ae031a147285098de9042d1419d4f"}, "originalPosition": 608}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDE2OTgxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDoyODoyM1rOIIdZxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDo1MDozM1rOIIeHUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0MTI1NA==", "bodyText": "Could you please initiate a new instance of expected object? Something like the following:\nUploadFileMetadata expectedUploadFileMetadata = new ...;\nassertResponse(mvcResult, Collections.singletonList(expectedUploadFileMetadata));", "url": "https://github.com/epam/cloud-pipeline/pull/1650#discussion_r545741254", "createdAt": "2020-12-18T10:28:23Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "diffHunk": "@@ -600,12 +589,11 @@ public void shouldUploadFile() throws Exception {\n         final MvcResult mvcResult = performRequest(post(String.format(PIPELINE_ID_FILE_UPLOAD_URL, ID))\n                         .params(multiValueMapOf(PATH, TEST_STRING)).content(MULTIPART_CONTENT),\n                 MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n+        final ArgumentCaptor<UploadFileMetadata> captor = ArgumentCaptor.forClass(UploadFileMetadata.class);\n \n-        verify(mockPipelineApiService).uploadFiles(eq(ID), eq(TEST_STRING), anyListOf(UploadFileMetadata.class));\n-        final String expectedResult = mvcResult.getResponse().getContentAsString();\n-        assertThat(expectedResult).contains(MULTIPART_CONTENT_FILE_NAME)\n-                .contains(FILE_SIZE)\n-                .contains(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+        verify(mockPipelineApiService).uploadFiles(eq(ID), eq(TEST_STRING),\n+                Collections.singletonList(captor.capture()));\n+        assertResponse(mvcResult, \"[{fileName=file.txt, fileSize=0 Kb, fileType=application/octet-stream}]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9ff3826104ae607c35e43fe991e40e82e36c57"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1MjkxNQ==", "bodyText": "In this case we can also get rid of new assertResponse(MvcResult, String) method.", "url": "https://github.com/epam/cloud-pipeline/pull/1650#discussion_r545752915", "createdAt": "2020-12-18T10:50:33Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "diffHunk": "@@ -600,12 +589,11 @@ public void shouldUploadFile() throws Exception {\n         final MvcResult mvcResult = performRequest(post(String.format(PIPELINE_ID_FILE_UPLOAD_URL, ID))\n                         .params(multiValueMapOf(PATH, TEST_STRING)).content(MULTIPART_CONTENT),\n                 MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n+        final ArgumentCaptor<UploadFileMetadata> captor = ArgumentCaptor.forClass(UploadFileMetadata.class);\n \n-        verify(mockPipelineApiService).uploadFiles(eq(ID), eq(TEST_STRING), anyListOf(UploadFileMetadata.class));\n-        final String expectedResult = mvcResult.getResponse().getContentAsString();\n-        assertThat(expectedResult).contains(MULTIPART_CONTENT_FILE_NAME)\n-                .contains(FILE_SIZE)\n-                .contains(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+        verify(mockPipelineApiService).uploadFiles(eq(ID), eq(TEST_STRING),\n+                Collections.singletonList(captor.capture()));\n+        assertResponse(mvcResult, \"[{fileName=file.txt, fileSize=0 Kb, fileType=application/octet-stream}]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0MTI1NA=="}, "originalCommit": {"oid": "ff9ff3826104ae607c35e43fe991e40e82e36c57"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDE3ODk2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDozMToxMFrOIIdfZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDozMToxMFrOIIdfZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0MjY5NA==", "bodyText": "Usually it is a good idea to put chained calls to separate lines:\n// BAD\na.b().c()\n\n// GOOD\na.b()\n .c()", "url": "https://github.com/epam/cloud-pipeline/pull/1650#discussion_r545742694", "createdAt": "2020-12-18T10:31:10Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "diffHunk": "@@ -392,13 +387,12 @@ public void shouldFailGetPipelineCredentialsForUnauthorizedUser() {\n     @Test\n     @WithMockUser\n     public void shouldGetPipelineEstimatedPrice() throws Exception {\n-        final String content = getObjectMapper().writeValueAsString(instance);\n         doReturn(instancePrice).when(mockPipelineApiService)\n                 .getInstanceEstimatedPrice(ID, TEST_STRING, TEST_STRING, TEST_STRING, TEST_INT, true, ID);\n \n-        final MvcResult mvcResult = performRequest(post(String.format(PIPELINE_ID_PRICE_URL, ID)).content(content)\n-                .params(multiValueMapOf(VERSION, TEST_STRING,\n-                                        CONFIG, TEST_STRING)));\n+        final MvcResult mvcResult = performRequest(post(String.format(PIPELINE_ID_PRICE_URL, ID))\n+                .content(stringOf(instance)).params(multiValueMapOf(VERSION, TEST_STRING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9ff3826104ae607c35e43fe991e40e82e36c57"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTIxMjc0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToxMDowNlrOIIm8kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToxMDowNlrOIIm8kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5NzYxNw==", "bodyText": "There is no need to convert List<UploadFileMetadata> -> String -> List<UploadFileMetadata>. Additionally it would be nice to extract fileMetadataList to a method parameter and name the method something like assertUnwrappedResponse.", "url": "https://github.com/epam/cloud-pipeline/pull/1650#discussion_r545897617", "createdAt": "2020-12-18T15:10:06Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "diffHunk": "@@ -819,12 +821,11 @@ private void assertResponseAsBytes(MvcResult mvcResult, byte[] bytes) throws Exc\n         assertThat(returnedEntityBody).isEqualTo(bytes);\n     }\n \n-\n-    private void assertResponse(MvcResult mvcResult, String expected) throws Exception {\n+    private void assertResponseAsList(MvcResult mvcResult) throws Exception{\n         final String expectedResult = mvcResult.getResponse().getContentAsString();\n+        final List<UploadFileMetadata> expectedList = getObjectMapper().readValue(expectedResult, List.class);\n+        final List<UploadFileMetadata> actualList = getObjectMapper().readValue(stringOf(fileMetadataList), List.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4bfb82b5df58f3a9c43ec15714709a1b50d0907"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTI0OTc0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToxOToxNVrOIInSHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToxOToxNVrOIInSHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwMzEzMg==", "bodyText": "Missing space after Exception.", "url": "https://github.com/epam/cloud-pipeline/pull/1650#discussion_r545903132", "createdAt": "2020-12-18T15:19:15Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "diffHunk": "@@ -819,12 +821,11 @@ private void assertResponseAsBytes(MvcResult mvcResult, byte[] bytes) throws Exc\n         assertThat(returnedEntityBody).isEqualTo(bytes);\n     }\n \n-\n-    private void assertResponse(MvcResult mvcResult, String expected) throws Exception {\n+    private void assertResponseAsList(MvcResult mvcResult) throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4bfb82b5df58f3a9c43ec15714709a1b50d0907"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTMxMDAzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTozMzoxOVrOIIn1qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTozMzoxOVrOIIn1qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxMjIzNQ==", "bodyText": "It's better to use a type reference like we always did otherwise the assignment is unchecked.", "url": "https://github.com/epam/cloud-pipeline/pull/1650#discussion_r545912235", "createdAt": "2020-12-18T15:33:19Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "diffHunk": "@@ -819,12 +821,11 @@ private void assertResponseAsBytes(MvcResult mvcResult, byte[] bytes) throws Exc\n         assertThat(returnedEntityBody).isEqualTo(bytes);\n     }\n \n-\n-    private void assertResponse(MvcResult mvcResult, String expected) throws Exception {\n+    private void assertResponseAsList(MvcResult mvcResult) throws Exception{\n         final String expectedResult = mvcResult.getResponse().getContentAsString();\n+        final List<UploadFileMetadata> expectedList = getObjectMapper().readValue(expectedResult, List.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4bfb82b5df58f3a9c43ec15714709a1b50d0907"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjE1NjIyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODowMDowMlrOIJPVqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODowMDowMlrOIJPVqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU1OTQwMw==", "bodyText": "Let's pass these values via the method parameters.", "url": "https://github.com/epam/cloud-pipeline/pull/1650#discussion_r546559403", "createdAt": "2020-12-21T08:00:02Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java", "diffHunk": "@@ -150,7 +150,11 @@ public static PipelineSourceItemsVO getPipelineSourceItemsVO() {\n     }\n \n     public static UploadFileMetadata getUploadFileMetadata() {\n-        return new UploadFileMetadata();\n+        final UploadFileMetadata uploadFileMetadata = new UploadFileMetadata();\n+        uploadFileMetadata.setFileName(\"file.txt\");\n+        uploadFileMetadata.setFileSize(\"0 Kb\");\n+        uploadFileMetadata.setFileType(\"application/octet-stream\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4bfb82b5df58f3a9c43ec15714709a1b50d0907"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDA5NTk5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwODo0Mjo1NFrOIJy_xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwODo0Mjo1NFrOIJy_xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE0MzYyMw==", "bodyText": "It's not the expected result but it's the actual one.", "url": "https://github.com/epam/cloud-pipeline/pull/1650#discussion_r547143623", "createdAt": "2020-12-22T08:42:54Z", "author": {"login": "tcibinan"}, "path": "api/src/test/java/com/epam/pipeline/controller/pipeline/PipelineControllerTest.java", "diffHunk": "@@ -814,18 +817,19 @@ public void shouldFailCopyPipelineForUnauthorizedUser() {\n         performUnauthorizedRequest(post(String.format(PIPELINE_ID_COPY_URL, ID)));\n     }\n \n-    private void assertResponseAsBytes(MvcResult mvcResult, byte[] bytes) throws Exception {\n+    private void assertResponseAsBytes(final MvcResult mvcResult, final byte[] bytes) throws Exception {\n         final String contentAsString = mvcResult.getResponse().getContentAsString();\n         final byte[] returnedEntityBody = getObjectMapper().readValue(contentAsString, byte[].class);\n \n         assertThat(returnedEntityBody).isEqualTo(bytes);\n     }\n \n-    private void assertResponseAsList(MvcResult mvcResult) throws Exception{\n+    private void assertUnwrappedResponse(final MvcResult mvcResult, final List<UploadFileMetadata> list)\n+                                                                                      throws Exception {\n         final String expectedResult = mvcResult.getResponse().getContentAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187e6dac9a9e9c41f0ba33679a194513b457e07f"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 220, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}