{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MzAxMzk3", "number": 1479, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo0ODo0NFrOEriLaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo0ODo0NFrOEriLaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDg0MjAzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/TemporaryCredentialsManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo0ODo0NFrOHeWnXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMToxNTowNlrOHeZp6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4OTg1Mg==", "bodyText": "Could you please move all error messages (in Assert methods to message constants)", "url": "https://github.com/epam/cloud-pipeline/pull/1479#discussion_r501589852", "createdAt": "2020-10-08T09:48:44Z", "author": {"login": "mzueva"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/TemporaryCredentialsManagerImpl.java", "diffHunk": "@@ -56,32 +59,48 @@ public TemporaryCredentialsManagerImpl(final List<TemporaryCredentialsGenerator>\n     @SensitiveStorageOperation\n     @Override\n     public TemporaryCredentials generate(final List<DataStorageAction> actions) {\n-        final AbstractDataStorage dataStorage = ListUtils.emptyIfNull(actions)\n-                .stream()\n-                .findFirst()\n-                .map(action -> dataStorageManager.load(action.getId()))\n-                .orElseThrow(() -> new IllegalArgumentException(\"Actions are not provided\"));\n-        final TemporaryCredentialsGenerator credentialsGenerator = getCredentialsGenerator(dataStorage);\n+        final List<AbstractDataStorage> storages = actions.stream()\n+                .filter(this::storageIdNotNull)\n+                .map(DataStorageAction::getId)\n+                .distinct()\n+                .map(dataStorageManager::load)\n+                .collect(Collectors.toList());\n+        Assert.state(CollectionUtils.isNotEmpty(storages), \"No storages were specified\");\n+        final TemporaryCredentialsGenerator credentialsGenerator = getCredentialsGenerator(storages);\n \n-        final AbstractCloudRegion region = credentialsGenerator.getRegion(dataStorage);\n+        final Map<Long, AbstractDataStorage> storagesById = storages.stream()\n+                .collect(Collectors.toMap(AbstractDataStorage::getId, Function.identity()));\n+        actions.forEach(action -> prepareAction(action, storagesById));\n \n-        actions.forEach(action -> {\n-            AbstractDataStorage loadedDataStorage =\n-                    action.getId().equals(dataStorage.getId()) ? dataStorage : dataStorageManager.load(action.getId());\n-            action.setBucketName(loadedDataStorage.getRoot());\n-            action.setPath(loadedDataStorage.getPath());\n-            AbstractCloudRegion loadedRegion = credentialsGenerator.getRegion(loadedDataStorage);\n-            Assert.isTrue(Objects.equals(region.getId(), loadedRegion.getId()),\n-                    \"Actions shall be requested for buckets from the same region\");\n-        });\n-\n-        return credentialsGenerator.generate(actions, dataStorage);\n+        return credentialsGenerator.generate(actions, storages);\n     }\n \n-    private TemporaryCredentialsGenerator getCredentialsGenerator(final AbstractDataStorage dataStorage) {\n-        return Optional.ofNullable(MapUtils.emptyIfNull(credentialsGenerators).get(dataStorage.getType()))\n+    private TemporaryCredentialsGenerator getCredentialsGenerator(final List<AbstractDataStorage> storages) {\n+        final AbstractDataStorage storage = verifyAllTypesAreSameAngGetStorage(storages);\n+        return Optional.ofNullable(MapUtils.emptyIfNull(credentialsGenerators).get(storage.getType()))\n                 .orElseThrow(() -> new IllegalArgumentException(\n                         messageHelper.getMessage(MessageConstants.ERROR_DATASTORAGE_NOT_SUPPORTED,\n-                                dataStorage.getName(), dataStorage.getType())));\n+                                storage.getName(), storage.getType())));\n+    }\n+\n+    private void prepareAction(final DataStorageAction action, final Map<Long, AbstractDataStorage> storagesById) {\n+        final AbstractDataStorage loadedDataStorage = storagesById.get(action.getId());\n+        action.setBucketName(loadedDataStorage.getRoot());\n+        action.setPath(loadedDataStorage.getPath());\n+    }\n+\n+    private AbstractDataStorage verifyAllTypesAreSameAngGetStorage(final List<AbstractDataStorage> storages) {\n+        Assert.state(storages.stream()\n+                .map(AbstractDataStorage::getType)\n+                .distinct()\n+                .count() <= 1, \"Storage types shall be the same\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da130c979f36c960fe845a6b41a2957cb56dc62c"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzOTY1Nw==", "bodyText": "done", "url": "https://github.com/epam/cloud-pipeline/pull/1479#discussion_r501639657", "createdAt": "2020-10-08T11:15:06Z", "author": {"login": "ekazachkova"}, "path": "api/src/main/java/com/epam/pipeline/manager/cloud/TemporaryCredentialsManagerImpl.java", "diffHunk": "@@ -56,32 +59,48 @@ public TemporaryCredentialsManagerImpl(final List<TemporaryCredentialsGenerator>\n     @SensitiveStorageOperation\n     @Override\n     public TemporaryCredentials generate(final List<DataStorageAction> actions) {\n-        final AbstractDataStorage dataStorage = ListUtils.emptyIfNull(actions)\n-                .stream()\n-                .findFirst()\n-                .map(action -> dataStorageManager.load(action.getId()))\n-                .orElseThrow(() -> new IllegalArgumentException(\"Actions are not provided\"));\n-        final TemporaryCredentialsGenerator credentialsGenerator = getCredentialsGenerator(dataStorage);\n+        final List<AbstractDataStorage> storages = actions.stream()\n+                .filter(this::storageIdNotNull)\n+                .map(DataStorageAction::getId)\n+                .distinct()\n+                .map(dataStorageManager::load)\n+                .collect(Collectors.toList());\n+        Assert.state(CollectionUtils.isNotEmpty(storages), \"No storages were specified\");\n+        final TemporaryCredentialsGenerator credentialsGenerator = getCredentialsGenerator(storages);\n \n-        final AbstractCloudRegion region = credentialsGenerator.getRegion(dataStorage);\n+        final Map<Long, AbstractDataStorage> storagesById = storages.stream()\n+                .collect(Collectors.toMap(AbstractDataStorage::getId, Function.identity()));\n+        actions.forEach(action -> prepareAction(action, storagesById));\n \n-        actions.forEach(action -> {\n-            AbstractDataStorage loadedDataStorage =\n-                    action.getId().equals(dataStorage.getId()) ? dataStorage : dataStorageManager.load(action.getId());\n-            action.setBucketName(loadedDataStorage.getRoot());\n-            action.setPath(loadedDataStorage.getPath());\n-            AbstractCloudRegion loadedRegion = credentialsGenerator.getRegion(loadedDataStorage);\n-            Assert.isTrue(Objects.equals(region.getId(), loadedRegion.getId()),\n-                    \"Actions shall be requested for buckets from the same region\");\n-        });\n-\n-        return credentialsGenerator.generate(actions, dataStorage);\n+        return credentialsGenerator.generate(actions, storages);\n     }\n \n-    private TemporaryCredentialsGenerator getCredentialsGenerator(final AbstractDataStorage dataStorage) {\n-        return Optional.ofNullable(MapUtils.emptyIfNull(credentialsGenerators).get(dataStorage.getType()))\n+    private TemporaryCredentialsGenerator getCredentialsGenerator(final List<AbstractDataStorage> storages) {\n+        final AbstractDataStorage storage = verifyAllTypesAreSameAngGetStorage(storages);\n+        return Optional.ofNullable(MapUtils.emptyIfNull(credentialsGenerators).get(storage.getType()))\n                 .orElseThrow(() -> new IllegalArgumentException(\n                         messageHelper.getMessage(MessageConstants.ERROR_DATASTORAGE_NOT_SUPPORTED,\n-                                dataStorage.getName(), dataStorage.getType())));\n+                                storage.getName(), storage.getType())));\n+    }\n+\n+    private void prepareAction(final DataStorageAction action, final Map<Long, AbstractDataStorage> storagesById) {\n+        final AbstractDataStorage loadedDataStorage = storagesById.get(action.getId());\n+        action.setBucketName(loadedDataStorage.getRoot());\n+        action.setPath(loadedDataStorage.getPath());\n+    }\n+\n+    private AbstractDataStorage verifyAllTypesAreSameAngGetStorage(final List<AbstractDataStorage> storages) {\n+        Assert.state(storages.stream()\n+                .map(AbstractDataStorage::getType)\n+                .distinct()\n+                .count() <= 1, \"Storage types shall be the same\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4OTg1Mg=="}, "originalCommit": {"oid": "da130c979f36c960fe845a6b41a2957cb56dc62c"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 273, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}