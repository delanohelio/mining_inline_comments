{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MDA4MDk0", "number": 1651, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyMjo1MFrOFHvTEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyNDozNFrOFHvVNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjU5MjgwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/run/RunApiServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyMjo1MFrOIJTUxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyMjo1MFrOIJTUxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNDcxMA==", "bodyText": "Could you please double check if the test logic correct?", "url": "https://github.com/epam/cloud-pipeline/pull/1651#discussion_r546624710", "createdAt": "2020-12-21T10:22:50Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/run/RunApiServiceTest.java", "diffHunk": "@@ -96,181 +77,182 @@\n     @Autowired\n     private EntityManager mockEntityManager;\n \n-    private RunAclFactory runAclFactory;\n-    private PipelineAclFactory pipelineAclFactory;\n-    private ToolAclFactory toolAclFactory;\n-\n     @Autowired\n-    public void setRunAclFactory(final AuthManager authManager,\n-                                 final PipelineRunManager mockRunManager) {\n-        this.runAclFactory = new RunAclFactory(authManager, mockRunManager);\n-    }\n-\n-    @Autowired\n-    public void setPipelineAclFactory(final AuthManager authManager,\n-                                      final GrantPermissionManager grantPermissionManager,\n-                                      final JdbcMutableAclServiceImpl aclService,\n-                                      final UserManager mockUserManager,\n-                                      final PipelineManager mockPipelineManager,\n-                                      final EntityManager mockEntityManager) {\n-        this.pipelineAclFactory = new PipelineAclFactory(authManager,\n-                grantPermissionManager, aclService, mockUserManager,\n-                mockPipelineManager, mockEntityManager);\n-    }\n+    private ToolManager mockToolManager;\n \n-    @Autowired\n-    public void setToolAclFactory(final AuthManager authManager, final ToolManager mockToolManager) {\n-        this.toolAclFactory = new ToolAclFactory(authManager, mockToolManager);\n-    }\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadToolRunForOwner() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n+        mockAuthUser(ANOTHER_SIMPLE_USER);\n \n-    @After\n-    public void tearDown() {\n-        aclCache.clearCache();\n+        assertThat(runApiService.loadPipelineRun(ID)).isEqualTo(pipelineRun);\n     }\n \n     @Test\n-    @WithMockUser(username = TEST_OWNER)\n-    public void loadToolRunShouldBeAllowedForOwner() {\n-        runAclFactory.initToolPipelineRunForCurrentUser();\n-        assertThat(runApiService.loadPipelineRun(TEST_RUN_ID).getId(), equalTo(TEST_RUN_ID));\n-    }\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyLoadToolRunForNonOwner() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = TEST_USER1)\n-    public void loadToolRunShouldBeDeniedForNonOwner() {\n-        runAclFactory.initToolPipelineRunForOwner(TEST_OWNER);\n-        runApiService.loadPipelineRun(TEST_RUN_ID);\n+        assertThrows(AccessDeniedException.class, () -> runApiService.loadPipelineRun(ID));\n     }\n \n     @Test\n-    @WithMockUser(username = TEST_ADMIN_NAME, roles = {TEST_ADMIN_ROLE})\n-    public void loadToolRunShouldBeAllowedForAdmin() {\n-        runAclFactory.initToolPipelineRunForOwner(TEST_OWNER);\n-        assertThat(runApiService.loadPipelineRun(TEST_RUN_ID).getId(), equalTo(TEST_RUN_ID));\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadToolRunForAdmin() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n+\n+        assertThat(runApiService.loadPipelineRun(ID)).isEqualTo(pipelineRun);\n     }\n \n     @Test\n-    @WithMockUser(username = TEST_USER1)\n-    public void loadPipelineRunShouldBeAllowedForOwner() {\n-        final Pipeline pipeline = pipelineAclFactory.initPipelineForCurrentUser();\n-        runAclFactory.initPipelineRunForCurrentUser(pipeline);\n-        assertThat(runApiService.loadPipelineRun(TEST_RUN_ID).getId(), equalTo(TEST_RUN_ID));\n+    @WithMockUser\n+    public void shouldLoadPipelineRunForOwner() {\n+        final PipelineRun pipelineRun = getPipelineRun(ID, SIMPLE_USER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dcdee5d0c4bccb7b9827dbd05ba6d8f8641a14d"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjU5ODMwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/epam/pipeline/acl/run/RunApiServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyNDozNFrOIJTYHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyNDozNFrOIJTYHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNTU2NQ==", "bodyText": "Add space please.", "url": "https://github.com/epam/cloud-pipeline/pull/1651#discussion_r546625565", "createdAt": "2020-12-21T10:24:34Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/run/RunApiServiceTest.java", "diffHunk": "@@ -96,181 +77,182 @@\n     @Autowired\n     private EntityManager mockEntityManager;\n \n-    private RunAclFactory runAclFactory;\n-    private PipelineAclFactory pipelineAclFactory;\n-    private ToolAclFactory toolAclFactory;\n-\n     @Autowired\n-    public void setRunAclFactory(final AuthManager authManager,\n-                                 final PipelineRunManager mockRunManager) {\n-        this.runAclFactory = new RunAclFactory(authManager, mockRunManager);\n-    }\n-\n-    @Autowired\n-    public void setPipelineAclFactory(final AuthManager authManager,\n-                                      final GrantPermissionManager grantPermissionManager,\n-                                      final JdbcMutableAclServiceImpl aclService,\n-                                      final UserManager mockUserManager,\n-                                      final PipelineManager mockPipelineManager,\n-                                      final EntityManager mockEntityManager) {\n-        this.pipelineAclFactory = new PipelineAclFactory(authManager,\n-                grantPermissionManager, aclService, mockUserManager,\n-                mockPipelineManager, mockEntityManager);\n-    }\n+    private ToolManager mockToolManager;\n \n-    @Autowired\n-    public void setToolAclFactory(final AuthManager authManager, final ToolManager mockToolManager) {\n-        this.toolAclFactory = new ToolAclFactory(authManager, mockToolManager);\n-    }\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadToolRunForOwner() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n+        mockAuthUser(ANOTHER_SIMPLE_USER);\n \n-    @After\n-    public void tearDown() {\n-        aclCache.clearCache();\n+        assertThat(runApiService.loadPipelineRun(ID)).isEqualTo(pipelineRun);\n     }\n \n     @Test\n-    @WithMockUser(username = TEST_OWNER)\n-    public void loadToolRunShouldBeAllowedForOwner() {\n-        runAclFactory.initToolPipelineRunForCurrentUser();\n-        assertThat(runApiService.loadPipelineRun(TEST_RUN_ID).getId(), equalTo(TEST_RUN_ID));\n-    }\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyLoadToolRunForNonOwner() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = TEST_USER1)\n-    public void loadToolRunShouldBeDeniedForNonOwner() {\n-        runAclFactory.initToolPipelineRunForOwner(TEST_OWNER);\n-        runApiService.loadPipelineRun(TEST_RUN_ID);\n+        assertThrows(AccessDeniedException.class, () -> runApiService.loadPipelineRun(ID));\n     }\n \n     @Test\n-    @WithMockUser(username = TEST_ADMIN_NAME, roles = {TEST_ADMIN_ROLE})\n-    public void loadToolRunShouldBeAllowedForAdmin() {\n-        runAclFactory.initToolPipelineRunForOwner(TEST_OWNER);\n-        assertThat(runApiService.loadPipelineRun(TEST_RUN_ID).getId(), equalTo(TEST_RUN_ID));\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadToolRunForAdmin() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n+\n+        assertThat(runApiService.loadPipelineRun(ID)).isEqualTo(pipelineRun);\n     }\n \n     @Test\n-    @WithMockUser(username = TEST_USER1)\n-    public void loadPipelineRunShouldBeAllowedForOwner() {\n-        final Pipeline pipeline = pipelineAclFactory.initPipelineForCurrentUser();\n-        runAclFactory.initPipelineRunForCurrentUser(pipeline);\n-        assertThat(runApiService.loadPipelineRun(TEST_RUN_ID).getId(), equalTo(TEST_RUN_ID));\n+    @WithMockUser\n+    public void shouldLoadPipelineRunForOwner() {\n+        final PipelineRun pipelineRun = getPipelineRun(ID, SIMPLE_USER);\n+        pipelineRun.setPipelineId(pipelineRun.getId());\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n+        mockAuthUser(SIMPLE_USER);\n+\n+        assertThat(runApiService.loadPipelineRun(ID).getId()).isEqualTo(pipeline.getId());\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = TEST_USER1)\n-    public void loadPipelineRunShouldBeDeniedForNonOwner() {\n-        final Pipeline pipeline = pipelineAclFactory.initPipelineForOwner(TEST_OWNER);\n-        runAclFactory.initPipelineRunForOwner(pipeline, TEST_OWNER);\n-        runApiService.loadPipelineRun(TEST_RUN_ID);\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyLoadPipelineRunForNonOwner() {\n+        doReturn(pipelineRun).when(mockRunManager).loadPipelineRun(ID);\n+        doReturn(pipeline).when(mockRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(pipeline);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () ->runApiService.loadPipelineRun(ID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dcdee5d0c4bccb7b9827dbd05ba6d8f8641a14d"}, "originalPosition": 183}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 223, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}