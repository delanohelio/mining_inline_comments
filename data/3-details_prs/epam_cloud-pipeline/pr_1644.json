{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1ODA5MDQy", "number": 1644, "title": "Issue 1404: Implement tests for FolderApiService", "bodyText": "This PR is related to issue #1404 and contains tests implementation for FolderApiService", "createdAt": "2020-12-10T09:58:57Z", "url": "https://github.com/epam/cloud-pipeline/pull/1644", "merged": true, "mergeCommit": {"oid": "e8473136642110f5366d10008796338250c9349d"}, "closed": true, "closedAt": "2020-12-21T11:38:52Z", "author": {"login": "cryteq"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkwc-YABqjQwOTQyNDQ0NzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoUAudABqjQxMzU1MTMzMTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d68fb1313dfbbdcc3e153f1311227237b6581e37", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/d68fb1313dfbbdcc3e153f1311227237b6581e37", "committedDate": "2020-12-10T09:54:18Z", "message": "Issue #1404: Deleted existing FolderApiServiceTest"}, "afterCommit": {"oid": "674a6c6ad64e8ad2af4969a08c6af2e23c9c0c76", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/674a6c6ad64e8ad2af4969a08c6af2e23c9c0c76", "committedDate": "2020-12-10T10:02:02Z", "message": "Issue #1404: Deleted existing FolderApiServiceTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MzQ4NTE4", "url": "https://github.com/epam/cloud-pipeline/pull/1644#pullrequestreview-549348518", "createdAt": "2020-12-10T16:01:04Z", "commit": {"oid": "674a6c6ad64e8ad2af4969a08c6af2e23c9c0c76"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjowMTowNFrOIDQlQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODozMTowNFrOIDuN7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4ODMyMw==", "bodyText": "I would prefer to add parentId to method arguments.", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r540288323", "createdAt": "2020-12-10T16:01:04Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/test/creator/folder/FolderCreatorUtils.java", "diffHunk": "@@ -28,6 +31,14 @@ public static Folder getFolder(final Long id, final String owner) {\n         Folder folder = new Folder();\n         folder.setId(id);\n         folder.setOwner(owner);\n+        folder.setParentId(ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674a6c6ad64e8ad2af4969a08c6af2e23c9c0c76"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI5MDQ3NQ==", "bodyText": "This logic a bit confusing: folder ID and parent ID are identical. Also, it leads to unexpected situation: granting write permission to folder before it's creation. Let's use a various values.", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r540290475", "createdAt": "2020-12-10T16:03:46Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,620 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674a6c6ad64e8ad2af4969a08c6af2e23c9c0c76"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0NDIzMg==", "bodyText": "Remove redundant empty line please.", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r540344232", "createdAt": "2020-12-10T17:08:26Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,620 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead2 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission1 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission2 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead1 = getS3bucketDataStorage(ID_3, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead2 = getS3bucketDataStorage(ID_3, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission1 = getS3bucketDataStorage(ID_4, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission2 = getS3bucketDataStorage(ID_4, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead1 = getRunConfiguration(ID_5, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead2 = getRunConfiguration(ID_5, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission1 = getRunConfiguration(ID_6, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission2 = getRunConfiguration(ID_6, ANOTHER_SIMPLE_USER);\n+    private final List<AbstractSecuredEntity> entitiesWithPermission = Arrays.asList(pipelineRead2,\n+                                                                                     storageRead2,\n+                                                                                     runConfigRead2);\n+    private final List<AbstractSecuredEntity> allEntities = Arrays.asList(pipelineRead1, pipelineWithoutPermission1,\n+                                                                          storageRead1, storageWithoutPermission1,\n+                                                                          runConfigRead1, runConfigWithoutPermission2);\n+\n+    @Autowired\n+    private FolderManager mockFolderManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private FolderApiService folderApiService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setParentId(null);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateFromTemplateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateFromTemplateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setParentId(null);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyUpdateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.update(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetProjectForAdmin() {\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWhenPermissionIsGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata, AclPermission.READ);\n+        mockSecurityContext();\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyGetProjectWhenPermissionIsNotGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.getProject(ID, AclClass.FOLDER));\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWithHierarchyWhenPermissionIsGranted() {\n+        final FolderWithMetadata childFolderWithPermission = initFolderWithReadPermission();\n+        final FolderWithMetadata childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission,\n+                childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final FolderWithMetadata parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(parentFolder).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initAclEntity(parentFolder, AclPermission.READ);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final FolderWithMetadata returnedFolder = folderApiService.getProject(ID, AclClass.FOLDER);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertThat(childrenById.get(childFolderWithPermission.getId())).isEqualTo(childFolderWithPermission);\n+        assertThat(childrenById.get(childFolderWithPermission.getId()).getLeaves()).isEqualTo(allEntities);\n+        assertThat(childrenById.get(childFolderWithoutPermission.getId())).isEqualTo(childFolderWithoutPermission);\n+        assertThat(childrenById.get(childFolderWithoutPermission.getId()).getLeaves()).isEqualTo(allEntities);\n+        assertThat(childrenById.get(emptyChildFolderWithoutPermission.getId()))\n+                .isEqualTo(emptyChildFolderWithoutPermission);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadTree() {\n+        doReturn(folder).when(mockFolderManager).loadTree();\n+\n+        assertThat(folderApiService.loadTree()).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadTreeWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).loadTree();\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674a6c6ad64e8ad2af4969a08c6af2e23c9c0c76"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0NDY5OA==", "bodyText": "Remove redundant empty line please.", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r540344698", "createdAt": "2020-12-10T17:09:00Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,620 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead2 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission1 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission2 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead1 = getS3bucketDataStorage(ID_3, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead2 = getS3bucketDataStorage(ID_3, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission1 = getS3bucketDataStorage(ID_4, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission2 = getS3bucketDataStorage(ID_4, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead1 = getRunConfiguration(ID_5, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead2 = getRunConfiguration(ID_5, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission1 = getRunConfiguration(ID_6, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission2 = getRunConfiguration(ID_6, ANOTHER_SIMPLE_USER);\n+    private final List<AbstractSecuredEntity> entitiesWithPermission = Arrays.asList(pipelineRead2,\n+                                                                                     storageRead2,\n+                                                                                     runConfigRead2);\n+    private final List<AbstractSecuredEntity> allEntities = Arrays.asList(pipelineRead1, pipelineWithoutPermission1,\n+                                                                          storageRead1, storageWithoutPermission1,\n+                                                                          runConfigRead1, runConfigWithoutPermission2);\n+\n+    @Autowired\n+    private FolderManager mockFolderManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private FolderApiService folderApiService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setParentId(null);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateFromTemplateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateFromTemplateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setParentId(null);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyUpdateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.update(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetProjectForAdmin() {\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWhenPermissionIsGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata, AclPermission.READ);\n+        mockSecurityContext();\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyGetProjectWhenPermissionIsNotGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.getProject(ID, AclClass.FOLDER));\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWithHierarchyWhenPermissionIsGranted() {\n+        final FolderWithMetadata childFolderWithPermission = initFolderWithReadPermission();\n+        final FolderWithMetadata childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission,\n+                childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final FolderWithMetadata parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(parentFolder).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initAclEntity(parentFolder, AclPermission.READ);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final FolderWithMetadata returnedFolder = folderApiService.getProject(ID, AclClass.FOLDER);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertThat(childrenById.get(childFolderWithPermission.getId())).isEqualTo(childFolderWithPermission);\n+        assertThat(childrenById.get(childFolderWithPermission.getId()).getLeaves()).isEqualTo(allEntities);\n+        assertThat(childrenById.get(childFolderWithoutPermission.getId())).isEqualTo(childFolderWithoutPermission);\n+        assertThat(childrenById.get(childFolderWithoutPermission.getId()).getLeaves()).isEqualTo(allEntities);\n+        assertThat(childrenById.get(emptyChildFolderWithoutPermission.getId()))\n+                .isEqualTo(emptyChildFolderWithoutPermission);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadTree() {\n+        doReturn(folder).when(mockFolderManager).loadTree();\n+\n+        assertThat(folderApiService.loadTree()).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadTreeWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).loadTree();\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+\n+        final Folder returnedFolder = folderApiService.loadTree();\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertTreeForFolderWithoutPermission(childrenById.get(childFolderWithoutPermission.getId()));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadProjects() {\n+        doReturn(folder).when(mockFolderManager).loadAllProjects();\n+\n+        assertThat(folderApiService.loadProjects()).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadProjectsWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                                                   emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).loadAllProjects();\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        doReturn(parentFolder).when(mockFolderManager).loadAllProjects();\n+\n+        final Folder returnedFolder = folderApiService.loadProjects();\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertTreeForFolderWithoutPermission(childrenById.get(childFolderWithoutPermission.getId()));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoad() {\n+        doReturn(folder).when(mockFolderManager).load(ID);\n+\n+        assertThat(folderApiService.load(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                                                   emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).load(ID);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674a6c6ad64e8ad2af4969a08c6af2e23c9c0c76"}, "originalPosition": 345}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NDAwMw==", "bodyText": "it seems that this line does not affect anything", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r540354003", "createdAt": "2020-12-10T17:22:05Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,620 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead2 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission1 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission2 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead1 = getS3bucketDataStorage(ID_3, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead2 = getS3bucketDataStorage(ID_3, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission1 = getS3bucketDataStorage(ID_4, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission2 = getS3bucketDataStorage(ID_4, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead1 = getRunConfiguration(ID_5, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead2 = getRunConfiguration(ID_5, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission1 = getRunConfiguration(ID_6, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission2 = getRunConfiguration(ID_6, ANOTHER_SIMPLE_USER);\n+    private final List<AbstractSecuredEntity> entitiesWithPermission = Arrays.asList(pipelineRead2,\n+                                                                                     storageRead2,\n+                                                                                     runConfigRead2);\n+    private final List<AbstractSecuredEntity> allEntities = Arrays.asList(pipelineRead1, pipelineWithoutPermission1,\n+                                                                          storageRead1, storageWithoutPermission1,\n+                                                                          runConfigRead1, runConfigWithoutPermission2);\n+\n+    @Autowired\n+    private FolderManager mockFolderManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private FolderApiService folderApiService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setParentId(null);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateFromTemplateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateFromTemplateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setParentId(null);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyUpdateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.update(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetProjectForAdmin() {\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWhenPermissionIsGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata, AclPermission.READ);\n+        mockSecurityContext();\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyGetProjectWhenPermissionIsNotGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.getProject(ID, AclClass.FOLDER));\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWithHierarchyWhenPermissionIsGranted() {\n+        final FolderWithMetadata childFolderWithPermission = initFolderWithReadPermission();\n+        final FolderWithMetadata childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission,\n+                childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final FolderWithMetadata parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(parentFolder).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initAclEntity(parentFolder, AclPermission.READ);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final FolderWithMetadata returnedFolder = folderApiService.getProject(ID, AclClass.FOLDER);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertThat(childrenById.get(childFolderWithPermission.getId())).isEqualTo(childFolderWithPermission);\n+        assertThat(childrenById.get(childFolderWithPermission.getId()).getLeaves()).isEqualTo(allEntities);\n+        assertThat(childrenById.get(childFolderWithoutPermission.getId())).isEqualTo(childFolderWithoutPermission);\n+        assertThat(childrenById.get(childFolderWithoutPermission.getId()).getLeaves()).isEqualTo(allEntities);\n+        assertThat(childrenById.get(emptyChildFolderWithoutPermission.getId()))\n+                .isEqualTo(emptyChildFolderWithoutPermission);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadTree() {\n+        doReturn(folder).when(mockFolderManager).loadTree();\n+\n+        assertThat(folderApiService.loadTree()).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadTreeWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).loadTree();\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+\n+        final Folder returnedFolder = folderApiService.loadTree();\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertTreeForFolderWithoutPermission(childrenById.get(childFolderWithoutPermission.getId()));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadProjects() {\n+        doReturn(folder).when(mockFolderManager).loadAllProjects();\n+\n+        assertThat(folderApiService.loadProjects()).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadProjectsWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                                                   emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).loadAllProjects();\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        doReturn(parentFolder).when(mockFolderManager).loadAllProjects();\n+\n+        final Folder returnedFolder = folderApiService.loadProjects();\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertTreeForFolderWithoutPermission(childrenById.get(childFolderWithoutPermission.getId()));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoad() {\n+        doReturn(folder).when(mockFolderManager).load(ID);\n+\n+        assertThat(folderApiService.load(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                                                   emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).load(ID);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+\n+        final Folder returnedFolder = folderApiService.load(ID);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertTreeForFolderWithoutPermission(childrenById.get(childFolderWithoutPermission.getId()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadByIdOrPathForAdmin() {\n+        doReturn(folder).when(mockFolderManager).loadByNameOrId(TEST_STRING);\n+\n+        assertThat(folderApiService.loadByIdOrPath(TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadByIdOrPathWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).loadByNameOrId(TEST_STRING);\n+        initAclEntity(folder, AclPermission.READ);\n+\n+        final Folder returnedFolder = folderApiService.loadByIdOrPath(TEST_STRING);\n+\n+        assertThat(returnedFolder).isEqualTo(folder);\n+        assertThat(returnedFolder.getMask()).isEqualTo(READ_PERMISSION);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyLoadByIdOrPathWhenPermissionIsNotGranted() {\n+        doReturn(folder).when(mockFolderManager).loadByNameOrId(TEST_STRING);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.loadByIdOrPath(TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteForAdmin() {\n+        doReturn(folder).when(mockFolderManager).delete(ID);\n+\n+        assertThat(folderApiService.delete(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDeleteForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).delete(ID);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.delete(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyDeleteWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.delete(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyDeleteWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.delete(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteForceForAdmin() {\n+        doReturn(folder).when(mockFolderManager).deleteForce(ID);\n+\n+        assertThat(folderApiService.deleteForce(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDeleteForceForManagerWhenPermissionForChildIsGranted() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        final Folder childFolder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setChildFolders(Collections.singletonList(childFolder));\n+        doReturn(childFolder).when(mockFolderManager).load(ID);\n+        doReturn(folder).when(mockFolderManager).deleteForce(ID);\n+        initAclEntity(folder, AclPermission.WRITE);\n+        initAclEntity(childFolder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.deleteForce(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyDeleteForceWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.deleteForce(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyDeleteForceWhenPermissionForChildIsNotGranted() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        final Folder childFolder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setChildFolders(Collections.singletonList(childFolder));\n+        doReturn(childFolder).when(mockFolderManager).load(ID);\n+        doReturn(folder).when(mockFolderManager).deleteForce(ID);\n+        initAclEntity(folder, AclPermission.WRITE);\n+        initAclEntity(childFolder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.deleteForce(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCloneFolderForAdmin() {\n+        doReturn(folder).when(mockFolderManager).cloneFolder(ID, ID_2, TEST_STRING);\n+\n+        assertThat(folderApiService.cloneFolder(ID, ID_2, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCloneFolderForManagerWhenPermissionIsGranted() {\n+        final Folder destinationFolder = getFolder(ID_2, ANOTHER_SIMPLE_USER);\n+        doReturn(folder).when(mockFolderManager).cloneFolder(ID, ID_2, TEST_STRING);\n+        initAclEntity(folder, AclPermission.READ);\n+        initAclEntity(destinationFolder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.cloneFolder(ID, ID_2, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCloneFolderWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.cloneFolder(ID, ID_2, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCloneFolderForManagerWhenDestinationFolderPermissionIsNotGranted() {\n+        final Folder destinationFolder = getFolder(ID_2, ANOTHER_SIMPLE_USER);\n+        doReturn(folder).when(mockFolderManager).cloneFolder(ID, ID_2, TEST_STRING);\n+        initAclEntity(folder, AclPermission.READ);\n+        initAclEntity(destinationFolder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.cloneFolder(ID, ID_2, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCloneFolderForManagerWhenTargetFolderPermissionIsNotGranted() {\n+        final Folder destinationFolder = getFolder(ID_2, ANOTHER_SIMPLE_USER);\n+        doReturn(folder).when(mockFolderManager).cloneFolder(ID, ID_2, TEST_STRING);\n+        initAclEntity(folder);\n+        initAclEntity(destinationFolder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.cloneFolder(ID, ID_2, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLockFolderForAdmin() {\n+        doReturn(folder).when(mockFolderManager).lockFolder(ID);\n+\n+        assertThat(folderApiService.lockFolder(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = ANOTHER_SIMPLE_USER)\n+    public void shouldLockFolderForOwner() {\n+        doReturn(folder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folder).when(mockFolderManager).lockFolder(ID);\n+        doReturn(ANOTHER_SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+\n+        final Folder returnedFolder = folderApiService.lockFolder(ID);\n+\n+        assertThat(returnedFolder).isEqualTo(folder);\n+        assertThat(returnedFolder.getMask()).isEqualTo(ALL_PERMISSIONS);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLockFolderForNotOwner() {\n+        doReturn(folder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.lockFolder(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUnlockFolderForAdmin() {\n+        doReturn(folder).when(mockFolderManager).unlockFolder(ID);\n+\n+        assertThat(folderApiService.unlockFolder(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = ANOTHER_SIMPLE_USER)\n+    public void shouldUnlockFolderForOwner() {\n+        doReturn(folder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folder).when(mockFolderManager).unlockFolder(ID);\n+        doReturn(ANOTHER_SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+\n+        final Folder returnedFolder = folderApiService.unlockFolder(ID);\n+\n+        assertThat(returnedFolder).isEqualTo(folder);\n+        assertThat(returnedFolder.getMask()).isEqualTo(ALL_PERMISSIONS);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUnlockFolderForNotOwner() {\n+        doReturn(folder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.unlockFolder(ID));\n+    }\n+\n+    private void assertTreeForFolderWithReadPermission(final AbstractHierarchicalEntity folderWithPermission) {\n+        final List<? extends AbstractSecuredEntity> leaves = folderWithPermission.getLeaves();\n+\n+        assertThat(folderWithPermission.getMask()).isEqualTo(READ_PERMISSION);\n+        assertThat(leaves).isEqualTo(allEntities);\n+        assertAclMaskForLeaves(leaves);\n+    }\n+\n+    private void assertTreeForFolderWithoutPermission(final AbstractHierarchicalEntity folderWithoutPermission) {\n+        final List<? extends AbstractSecuredEntity> leaves = folderWithoutPermission.getLeaves();\n+\n+        assertThat(leaves).isEqualTo(entitiesWithPermission);\n+        assertAclMaskForLeaves(leaves);\n+    }\n+\n+    private void assertAclMaskForLeaves(final List<? extends AbstractSecuredEntity> leaves) {\n+        leaves.forEach(entity -> assertThat(entity.getMask()).isEqualTo(READ_PERMISSION));\n+    }\n+\n+    private FolderWithMetadata initFolderWithReadPermission() {\n+        final FolderWithMetadata childFolderWithPermission = getFolderWithMetadata(ID, ANOTHER_SIMPLE_USER);\n+        childFolderWithPermission.setConfigurations(Arrays.asList(runConfigRead1, runConfigWithoutPermission1));\n+        childFolderWithPermission.setStorages(Arrays.asList(storageRead1, storageWithoutPermission1));\n+        childFolderWithPermission.setPipelines(Arrays.asList(pipelineRead1, pipelineWithoutPermission1));\n+        initAclEntity(childFolderWithPermission, AclPermission.READ);\n+        return childFolderWithPermission;\n+    }\n+\n+    private FolderWithMetadata initFolderWithoutReadPermission() {\n+        final FolderWithMetadata childFolderWithoutPermission = getFolderWithMetadata(ID_2, ANOTHER_SIMPLE_USER);\n+        childFolderWithoutPermission.setConfigurations(Arrays.asList(runConfigRead2, runConfigWithoutPermission2));\n+        childFolderWithoutPermission.setStorages(Arrays.asList(storageRead2, storageWithoutPermission2));\n+        childFolderWithoutPermission.setPipelines(Arrays.asList(pipelineRead2, pipelineWithoutPermission2));\n+        initAclEntity(childFolderWithoutPermission);\n+        return childFolderWithoutPermission;\n+    }\n+\n+    private FolderWithMetadata initParentFolder(final List<Folder> folders) {\n+        final FolderWithMetadata parentFolder = getFolderWithMetadata(ID_3, ANOTHER_SIMPLE_USER);\n+        parentFolder.setChildFolders(folders);\n+        initAclEntity(parentFolder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674a6c6ad64e8ad2af4969a08c6af2e23c9c0c76"}, "originalPosition": 602}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2MTk4Mw==", "bodyText": "Could we use here assertTreeForFolderWithReadPermission method? Also, lets add permissions checks for entities below.", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r540361983", "createdAt": "2020-12-10T17:33:25Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,620 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead2 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission1 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission2 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead1 = getS3bucketDataStorage(ID_3, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead2 = getS3bucketDataStorage(ID_3, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission1 = getS3bucketDataStorage(ID_4, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission2 = getS3bucketDataStorage(ID_4, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead1 = getRunConfiguration(ID_5, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead2 = getRunConfiguration(ID_5, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission1 = getRunConfiguration(ID_6, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission2 = getRunConfiguration(ID_6, ANOTHER_SIMPLE_USER);\n+    private final List<AbstractSecuredEntity> entitiesWithPermission = Arrays.asList(pipelineRead2,\n+                                                                                     storageRead2,\n+                                                                                     runConfigRead2);\n+    private final List<AbstractSecuredEntity> allEntities = Arrays.asList(pipelineRead1, pipelineWithoutPermission1,\n+                                                                          storageRead1, storageWithoutPermission1,\n+                                                                          runConfigRead1, runConfigWithoutPermission2);\n+\n+    @Autowired\n+    private FolderManager mockFolderManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private FolderApiService folderApiService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setParentId(null);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateFromTemplateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateFromTemplateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setParentId(null);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyUpdateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.update(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetProjectForAdmin() {\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWhenPermissionIsGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata, AclPermission.READ);\n+        mockSecurityContext();\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyGetProjectWhenPermissionIsNotGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.getProject(ID, AclClass.FOLDER));\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWithHierarchyWhenPermissionIsGranted() {\n+        final FolderWithMetadata childFolderWithPermission = initFolderWithReadPermission();\n+        final FolderWithMetadata childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission,\n+                childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final FolderWithMetadata parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(parentFolder).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initAclEntity(parentFolder, AclPermission.READ);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final FolderWithMetadata returnedFolder = folderApiService.getProject(ID, AclClass.FOLDER);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertThat(childrenById.get(childFolderWithPermission.getId())).isEqualTo(childFolderWithPermission);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674a6c6ad64e8ad2af4969a08c6af2e23c9c0c76"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NjQ1Mw==", "bodyText": "Let's check permissions mask here.", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r540366453", "createdAt": "2020-12-10T17:39:19Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,620 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead2 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission1 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission2 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead1 = getS3bucketDataStorage(ID_3, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead2 = getS3bucketDataStorage(ID_3, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission1 = getS3bucketDataStorage(ID_4, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission2 = getS3bucketDataStorage(ID_4, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead1 = getRunConfiguration(ID_5, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead2 = getRunConfiguration(ID_5, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission1 = getRunConfiguration(ID_6, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission2 = getRunConfiguration(ID_6, ANOTHER_SIMPLE_USER);\n+    private final List<AbstractSecuredEntity> entitiesWithPermission = Arrays.asList(pipelineRead2,\n+                                                                                     storageRead2,\n+                                                                                     runConfigRead2);\n+    private final List<AbstractSecuredEntity> allEntities = Arrays.asList(pipelineRead1, pipelineWithoutPermission1,\n+                                                                          storageRead1, storageWithoutPermission1,\n+                                                                          runConfigRead1, runConfigWithoutPermission2);\n+\n+    @Autowired\n+    private FolderManager mockFolderManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private FolderApiService folderApiService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setParentId(null);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateFromTemplateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateFromTemplateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setParentId(null);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyUpdateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.update(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetProjectForAdmin() {\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWhenPermissionIsGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata, AclPermission.READ);\n+        mockSecurityContext();\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyGetProjectWhenPermissionIsNotGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.getProject(ID, AclClass.FOLDER));\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWithHierarchyWhenPermissionIsGranted() {\n+        final FolderWithMetadata childFolderWithPermission = initFolderWithReadPermission();\n+        final FolderWithMetadata childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission,\n+                childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final FolderWithMetadata parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(parentFolder).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initAclEntity(parentFolder, AclPermission.READ);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final FolderWithMetadata returnedFolder = folderApiService.getProject(ID, AclClass.FOLDER);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertThat(childrenById.get(childFolderWithPermission.getId())).isEqualTo(childFolderWithPermission);\n+        assertThat(childrenById.get(childFolderWithPermission.getId()).getLeaves()).isEqualTo(allEntities);\n+        assertThat(childrenById.get(childFolderWithoutPermission.getId())).isEqualTo(childFolderWithoutPermission);\n+        assertThat(childrenById.get(childFolderWithoutPermission.getId()).getLeaves()).isEqualTo(allEntities);\n+        assertThat(childrenById.get(emptyChildFolderWithoutPermission.getId()))\n+                .isEqualTo(emptyChildFolderWithoutPermission);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadTree() {\n+        doReturn(folder).when(mockFolderManager).loadTree();\n+\n+        assertThat(folderApiService.loadTree()).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadTreeWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).loadTree();\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+\n+        final Folder returnedFolder = folderApiService.loadTree();\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertTreeForFolderWithoutPermission(childrenById.get(childFolderWithoutPermission.getId()));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadProjects() {\n+        doReturn(folder).when(mockFolderManager).loadAllProjects();\n+\n+        assertThat(folderApiService.loadProjects()).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadProjectsWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                                                   emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).loadAllProjects();\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        doReturn(parentFolder).when(mockFolderManager).loadAllProjects();\n+\n+        final Folder returnedFolder = folderApiService.loadProjects();\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertTreeForFolderWithoutPermission(childrenById.get(childFolderWithoutPermission.getId()));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoad() {\n+        doReturn(folder).when(mockFolderManager).load(ID);\n+\n+        assertThat(folderApiService.load(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                                                   emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).load(ID);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+\n+        final Folder returnedFolder = folderApiService.load(ID);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertTreeForFolderWithoutPermission(childrenById.get(childFolderWithoutPermission.getId()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadByIdOrPathForAdmin() {\n+        doReturn(folder).when(mockFolderManager).loadByNameOrId(TEST_STRING);\n+\n+        assertThat(folderApiService.loadByIdOrPath(TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadByIdOrPathWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).loadByNameOrId(TEST_STRING);\n+        initAclEntity(folder, AclPermission.READ);\n+\n+        final Folder returnedFolder = folderApiService.loadByIdOrPath(TEST_STRING);\n+\n+        assertThat(returnedFolder).isEqualTo(folder);\n+        assertThat(returnedFolder.getMask()).isEqualTo(READ_PERMISSION);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyLoadByIdOrPathWhenPermissionIsNotGranted() {\n+        doReturn(folder).when(mockFolderManager).loadByNameOrId(TEST_STRING);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.loadByIdOrPath(TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteForAdmin() {\n+        doReturn(folder).when(mockFolderManager).delete(ID);\n+\n+        assertThat(folderApiService.delete(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDeleteForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).delete(ID);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.delete(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyDeleteWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.delete(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyDeleteWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.delete(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteForceForAdmin() {\n+        doReturn(folder).when(mockFolderManager).deleteForce(ID);\n+\n+        assertThat(folderApiService.deleteForce(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDeleteForceForManagerWhenPermissionForChildIsGranted() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        final Folder childFolder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setChildFolders(Collections.singletonList(childFolder));\n+        doReturn(childFolder).when(mockFolderManager).load(ID);\n+        doReturn(folder).when(mockFolderManager).deleteForce(ID);\n+        initAclEntity(folder, AclPermission.WRITE);\n+        initAclEntity(childFolder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.deleteForce(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyDeleteForceWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.deleteForce(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyDeleteForceWhenPermissionForChildIsNotGranted() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        final Folder childFolder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setChildFolders(Collections.singletonList(childFolder));\n+        doReturn(childFolder).when(mockFolderManager).load(ID);\n+        doReturn(folder).when(mockFolderManager).deleteForce(ID);\n+        initAclEntity(folder, AclPermission.WRITE);\n+        initAclEntity(childFolder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.deleteForce(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCloneFolderForAdmin() {\n+        doReturn(folder).when(mockFolderManager).cloneFolder(ID, ID_2, TEST_STRING);\n+\n+        assertThat(folderApiService.cloneFolder(ID, ID_2, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCloneFolderForManagerWhenPermissionIsGranted() {\n+        final Folder destinationFolder = getFolder(ID_2, ANOTHER_SIMPLE_USER);\n+        doReturn(folder).when(mockFolderManager).cloneFolder(ID, ID_2, TEST_STRING);\n+        initAclEntity(folder, AclPermission.READ);\n+        initAclEntity(destinationFolder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.cloneFolder(ID, ID_2, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCloneFolderWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.cloneFolder(ID, ID_2, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCloneFolderForManagerWhenDestinationFolderPermissionIsNotGranted() {\n+        final Folder destinationFolder = getFolder(ID_2, ANOTHER_SIMPLE_USER);\n+        doReturn(folder).when(mockFolderManager).cloneFolder(ID, ID_2, TEST_STRING);\n+        initAclEntity(folder, AclPermission.READ);\n+        initAclEntity(destinationFolder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.cloneFolder(ID, ID_2, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCloneFolderForManagerWhenTargetFolderPermissionIsNotGranted() {\n+        final Folder destinationFolder = getFolder(ID_2, ANOTHER_SIMPLE_USER);\n+        doReturn(folder).when(mockFolderManager).cloneFolder(ID, ID_2, TEST_STRING);\n+        initAclEntity(folder);\n+        initAclEntity(destinationFolder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.cloneFolder(ID, ID_2, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLockFolderForAdmin() {\n+        doReturn(folder).when(mockFolderManager).lockFolder(ID);\n+\n+        assertThat(folderApiService.lockFolder(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = ANOTHER_SIMPLE_USER)\n+    public void shouldLockFolderForOwner() {\n+        doReturn(folder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folder).when(mockFolderManager).lockFolder(ID);\n+        doReturn(ANOTHER_SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+\n+        final Folder returnedFolder = folderApiService.lockFolder(ID);\n+\n+        assertThat(returnedFolder).isEqualTo(folder);\n+        assertThat(returnedFolder.getMask()).isEqualTo(ALL_PERMISSIONS);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLockFolderForNotOwner() {\n+        doReturn(folder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.lockFolder(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUnlockFolderForAdmin() {\n+        doReturn(folder).when(mockFolderManager).unlockFolder(ID);\n+\n+        assertThat(folderApiService.unlockFolder(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = ANOTHER_SIMPLE_USER)\n+    public void shouldUnlockFolderForOwner() {\n+        doReturn(folder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folder).when(mockFolderManager).unlockFolder(ID);\n+        doReturn(ANOTHER_SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+\n+        final Folder returnedFolder = folderApiService.unlockFolder(ID);\n+\n+        assertThat(returnedFolder).isEqualTo(folder);\n+        assertThat(returnedFolder.getMask()).isEqualTo(ALL_PERMISSIONS);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUnlockFolderForNotOwner() {\n+        doReturn(folder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.unlockFolder(ID));\n+    }\n+\n+    private void assertTreeForFolderWithReadPermission(final AbstractHierarchicalEntity folderWithPermission) {\n+        final List<? extends AbstractSecuredEntity> leaves = folderWithPermission.getLeaves();\n+\n+        assertThat(folderWithPermission.getMask()).isEqualTo(READ_PERMISSION);\n+        assertThat(leaves).isEqualTo(allEntities);\n+        assertAclMaskForLeaves(leaves);\n+    }\n+\n+    private void assertTreeForFolderWithoutPermission(final AbstractHierarchicalEntity folderWithoutPermission) {\n+        final List<? extends AbstractSecuredEntity> leaves = folderWithoutPermission.getLeaves();\n+\n+        assertThat(leaves).isEqualTo(entitiesWithPermission);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674a6c6ad64e8ad2af4969a08c6af2e23c9c0c76"}, "originalPosition": 573}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc3Mzg3MA==", "bodyText": "Let's use different IDs for different entities", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r540773870", "createdAt": "2020-12-11T08:31:04Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,620 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead2 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission1 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission2 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674a6c6ad64e8ad2af4969a08c6af2e23c9c0c76"}, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "285c174617a3ac4f978f59702181d88ed57e866a", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/285c174617a3ac4f978f59702181d88ed57e866a", "committedDate": "2020-12-14T10:25:34Z", "message": "Issue #1645: Changed getFolder method; different IDs used for each entity"}, "afterCommit": {"oid": "2185e62ffca39e424f9b5149e3802458dac30f7a", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/2185e62ffca39e424f9b5149e3802458dac30f7a", "committedDate": "2020-12-14T10:27:07Z", "message": "Issue #1404: Changed getFolder method; different IDs used for each entity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMjkxMDk0", "url": "https://github.com/epam/cloud-pipeline/pull/1644#pullrequestreview-552291094", "createdAt": "2020-12-15T10:07:07Z", "commit": {"oid": "2185e62ffca39e424f9b5149e3802458dac30f7a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDowNzowN1rOIGC55Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoyMjo0MVrOIGDkkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwOTk1Nw==", "bodyText": "As I can see, it would be enough to observe ID's uniqueness within one ACL class. For example, the ID's for DataStorage can be ID, ID_2, ID_3, ID_4. The way we don't need to create to many ID variables. Could you please check and correct if my observation is correct?", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r543209957", "createdAt": "2020-12-15T10:07:07Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,632 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final long ID_7 = 7L;\n+    private static final long ID_8 = 8L;\n+    private static final long ID_9 = 9L;\n+    private static final long ID_10 = 10L;\n+    private static final long ID_11 = 11L;\n+    private static final long ID_12 = 12L;\n+    private static final long ID_100 = 100L;\n+    private static final long ID_110 = 110L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ID_100, ANOTHER_SIMPLE_USER);\n+    final Folder folder10 = getFolder(ID_100, ID_110, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ID_110, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2185e62ffca39e424f9b5149e3802458dac30f7a"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMDU2MA==", "bodyText": "Let's add permissions mask check", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r543210560", "createdAt": "2020-12-15T10:07:53Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,632 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final long ID_7 = 7L;\n+    private static final long ID_8 = 8L;\n+    private static final long ID_9 = 9L;\n+    private static final long ID_10 = 10L;\n+    private static final long ID_11 = 11L;\n+    private static final long ID_12 = 12L;\n+    private static final long ID_100 = 100L;\n+    private static final long ID_110 = 110L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ID_100, ANOTHER_SIMPLE_USER);\n+    final Folder folder10 = getFolder(ID_100, ID_110, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ID_110, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead2 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission1 = getPipeline(ID_3, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission2 = getPipeline(ID_4, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead1 = getS3bucketDataStorage(ID_5, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead2 = getS3bucketDataStorage(ID_6, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission1 = getS3bucketDataStorage(ID_7, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission2 = getS3bucketDataStorage(ID_8, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead1 = getRunConfiguration(ID_9, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead2 = getRunConfiguration(ID_10, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission1 = getRunConfiguration(ID_11, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission2 = getRunConfiguration(ID_12, ANOTHER_SIMPLE_USER);\n+    private final List<AbstractSecuredEntity> entitiesWithPermission = Arrays.asList(pipelineRead2,\n+                                                                                     storageRead2,\n+                                                                                     runConfigRead2);\n+    private final List<AbstractSecuredEntity> allEntities = Arrays.asList(pipelineRead1, pipelineWithoutPermission1,\n+                                                                          storageRead1, storageWithoutPermission1,\n+                                                                          runConfigRead1, runConfigWithoutPermission1);\n+    private final List<AbstractSecuredEntity> allEntities2 = Arrays.asList(pipelineRead2, pipelineWithoutPermission2,\n+                                                                           storageRead2, storageWithoutPermission2,\n+                                                                           runConfigRead2, runConfigWithoutPermission2);\n+\n+    @Autowired\n+    private FolderManager mockFolderManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private FolderApiService folderApiService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+        initAclEntity(folder10, AclPermission.WRITE);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder10);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, null, ANOTHER_SIMPLE_USER);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateFromTemplateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateFromTemplateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+        initAclEntity(folder10, AclPermission.WRITE);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder10);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, null, ANOTHER_SIMPLE_USER);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyUpdateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.update(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetProjectForAdmin() {\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWhenPermissionIsGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata, AclPermission.READ);\n+        mockSecurityContext();\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyGetProjectWhenPermissionIsNotGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.getProject(ID, AclClass.FOLDER));\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWithHierarchyWhenPermissionIsGranted() {\n+        final FolderWithMetadata childFolderWithPermission = initFolderWithReadPermission();\n+        final FolderWithMetadata childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission,\n+                childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final FolderWithMetadata parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(parentFolder).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initAclEntity(parentFolder, AclPermission.READ);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final FolderWithMetadata returnedFolder = folderApiService.getProject(ID, AclClass.FOLDER);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+        final List<? extends AbstractSecuredEntity> withoutPermissionLeaves =\n+                childrenById.get(childFolderWithoutPermission.getId()).getLeaves();\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2185e62ffca39e424f9b5149e3802458dac30f7a"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMjA1NA==", "bodyText": "Also, let's add check for children list size. (Just to make sure that nothing extra has come in to result)", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r543212054", "createdAt": "2020-12-15T10:10:05Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,632 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final long ID_7 = 7L;\n+    private static final long ID_8 = 8L;\n+    private static final long ID_9 = 9L;\n+    private static final long ID_10 = 10L;\n+    private static final long ID_11 = 11L;\n+    private static final long ID_12 = 12L;\n+    private static final long ID_100 = 100L;\n+    private static final long ID_110 = 110L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ID_100, ANOTHER_SIMPLE_USER);\n+    final Folder folder10 = getFolder(ID_100, ID_110, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ID_110, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead2 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission1 = getPipeline(ID_3, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission2 = getPipeline(ID_4, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead1 = getS3bucketDataStorage(ID_5, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead2 = getS3bucketDataStorage(ID_6, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission1 = getS3bucketDataStorage(ID_7, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission2 = getS3bucketDataStorage(ID_8, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead1 = getRunConfiguration(ID_9, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead2 = getRunConfiguration(ID_10, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission1 = getRunConfiguration(ID_11, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission2 = getRunConfiguration(ID_12, ANOTHER_SIMPLE_USER);\n+    private final List<AbstractSecuredEntity> entitiesWithPermission = Arrays.asList(pipelineRead2,\n+                                                                                     storageRead2,\n+                                                                                     runConfigRead2);\n+    private final List<AbstractSecuredEntity> allEntities = Arrays.asList(pipelineRead1, pipelineWithoutPermission1,\n+                                                                          storageRead1, storageWithoutPermission1,\n+                                                                          runConfigRead1, runConfigWithoutPermission1);\n+    private final List<AbstractSecuredEntity> allEntities2 = Arrays.asList(pipelineRead2, pipelineWithoutPermission2,\n+                                                                           storageRead2, storageWithoutPermission2,\n+                                                                           runConfigRead2, runConfigWithoutPermission2);\n+\n+    @Autowired\n+    private FolderManager mockFolderManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private FolderApiService folderApiService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+        initAclEntity(folder10, AclPermission.WRITE);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder10);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, null, ANOTHER_SIMPLE_USER);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateFromTemplateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateFromTemplateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+        initAclEntity(folder10, AclPermission.WRITE);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder10);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, null, ANOTHER_SIMPLE_USER);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyUpdateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.update(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetProjectForAdmin() {\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWhenPermissionIsGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata, AclPermission.READ);\n+        mockSecurityContext();\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyGetProjectWhenPermissionIsNotGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.getProject(ID, AclClass.FOLDER));\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWithHierarchyWhenPermissionIsGranted() {\n+        final FolderWithMetadata childFolderWithPermission = initFolderWithReadPermission();\n+        final FolderWithMetadata childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission,\n+                childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final FolderWithMetadata parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(parentFolder).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initAclEntity(parentFolder, AclPermission.READ);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final FolderWithMetadata returnedFolder = folderApiService.getProject(ID, AclClass.FOLDER);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+        final List<? extends AbstractSecuredEntity> withoutPermissionLeaves =\n+                childrenById.get(childFolderWithoutPermission.getId()).getLeaves();\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMDU2MA=="}, "originalCommit": {"oid": "2185e62ffca39e424f9b5149e3802458dac30f7a"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMjc2Mw==", "bodyText": "Let's add check for permissions mask", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r543212763", "createdAt": "2020-12-15T10:11:05Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,632 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final long ID_7 = 7L;\n+    private static final long ID_8 = 8L;\n+    private static final long ID_9 = 9L;\n+    private static final long ID_10 = 10L;\n+    private static final long ID_11 = 11L;\n+    private static final long ID_12 = 12L;\n+    private static final long ID_100 = 100L;\n+    private static final long ID_110 = 110L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ID_100, ANOTHER_SIMPLE_USER);\n+    final Folder folder10 = getFolder(ID_100, ID_110, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ID_110, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead2 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission1 = getPipeline(ID_3, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission2 = getPipeline(ID_4, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead1 = getS3bucketDataStorage(ID_5, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead2 = getS3bucketDataStorage(ID_6, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission1 = getS3bucketDataStorage(ID_7, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission2 = getS3bucketDataStorage(ID_8, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead1 = getRunConfiguration(ID_9, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead2 = getRunConfiguration(ID_10, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission1 = getRunConfiguration(ID_11, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission2 = getRunConfiguration(ID_12, ANOTHER_SIMPLE_USER);\n+    private final List<AbstractSecuredEntity> entitiesWithPermission = Arrays.asList(pipelineRead2,\n+                                                                                     storageRead2,\n+                                                                                     runConfigRead2);\n+    private final List<AbstractSecuredEntity> allEntities = Arrays.asList(pipelineRead1, pipelineWithoutPermission1,\n+                                                                          storageRead1, storageWithoutPermission1,\n+                                                                          runConfigRead1, runConfigWithoutPermission1);\n+    private final List<AbstractSecuredEntity> allEntities2 = Arrays.asList(pipelineRead2, pipelineWithoutPermission2,\n+                                                                           storageRead2, storageWithoutPermission2,\n+                                                                           runConfigRead2, runConfigWithoutPermission2);\n+\n+    @Autowired\n+    private FolderManager mockFolderManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private FolderApiService folderApiService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+        initAclEntity(folder10, AclPermission.WRITE);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder10);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, null, ANOTHER_SIMPLE_USER);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateFromTemplateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateFromTemplateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+        initAclEntity(folder10, AclPermission.WRITE);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder10);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, null, ANOTHER_SIMPLE_USER);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyUpdateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.update(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetProjectForAdmin() {\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWhenPermissionIsGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata, AclPermission.READ);\n+        mockSecurityContext();\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyGetProjectWhenPermissionIsNotGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.getProject(ID, AclClass.FOLDER));\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWithHierarchyWhenPermissionIsGranted() {\n+        final FolderWithMetadata childFolderWithPermission = initFolderWithReadPermission();\n+        final FolderWithMetadata childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission,\n+                childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final FolderWithMetadata parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(parentFolder).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initAclEntity(parentFolder, AclPermission.READ);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final FolderWithMetadata returnedFolder = folderApiService.getProject(ID, AclClass.FOLDER);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+        final List<? extends AbstractSecuredEntity> withoutPermissionLeaves =\n+                childrenById.get(childFolderWithoutPermission.getId()).getLeaves();\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertThat(withoutPermissionLeaves).isEqualTo(allEntities2);\n+        assertAclMaskForLeaves(withoutPermissionLeaves);\n+        assertThat(childrenById.get(emptyChildFolderWithoutPermission.getId()))\n+                .isEqualTo(emptyChildFolderWithoutPermission);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2185e62ffca39e424f9b5149e3802458dac30f7a"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMzgwOQ==", "bodyText": "Could you apply comments above here?", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r543213809", "createdAt": "2020-12-15T10:12:30Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,632 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final long ID_7 = 7L;\n+    private static final long ID_8 = 8L;\n+    private static final long ID_9 = 9L;\n+    private static final long ID_10 = 10L;\n+    private static final long ID_11 = 11L;\n+    private static final long ID_12 = 12L;\n+    private static final long ID_100 = 100L;\n+    private static final long ID_110 = 110L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ID_100, ANOTHER_SIMPLE_USER);\n+    final Folder folder10 = getFolder(ID_100, ID_110, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ID_110, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead2 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission1 = getPipeline(ID_3, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission2 = getPipeline(ID_4, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead1 = getS3bucketDataStorage(ID_5, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead2 = getS3bucketDataStorage(ID_6, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission1 = getS3bucketDataStorage(ID_7, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission2 = getS3bucketDataStorage(ID_8, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead1 = getRunConfiguration(ID_9, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead2 = getRunConfiguration(ID_10, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission1 = getRunConfiguration(ID_11, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission2 = getRunConfiguration(ID_12, ANOTHER_SIMPLE_USER);\n+    private final List<AbstractSecuredEntity> entitiesWithPermission = Arrays.asList(pipelineRead2,\n+                                                                                     storageRead2,\n+                                                                                     runConfigRead2);\n+    private final List<AbstractSecuredEntity> allEntities = Arrays.asList(pipelineRead1, pipelineWithoutPermission1,\n+                                                                          storageRead1, storageWithoutPermission1,\n+                                                                          runConfigRead1, runConfigWithoutPermission1);\n+    private final List<AbstractSecuredEntity> allEntities2 = Arrays.asList(pipelineRead2, pipelineWithoutPermission2,\n+                                                                           storageRead2, storageWithoutPermission2,\n+                                                                           runConfigRead2, runConfigWithoutPermission2);\n+\n+    @Autowired\n+    private FolderManager mockFolderManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private FolderApiService folderApiService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+        initAclEntity(folder10, AclPermission.WRITE);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder10);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, null, ANOTHER_SIMPLE_USER);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateFromTemplateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateFromTemplateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+        initAclEntity(folder10, AclPermission.WRITE);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder10);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, null, ANOTHER_SIMPLE_USER);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyUpdateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.update(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetProjectForAdmin() {\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWhenPermissionIsGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata, AclPermission.READ);\n+        mockSecurityContext();\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyGetProjectWhenPermissionIsNotGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.getProject(ID, AclClass.FOLDER));\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWithHierarchyWhenPermissionIsGranted() {\n+        final FolderWithMetadata childFolderWithPermission = initFolderWithReadPermission();\n+        final FolderWithMetadata childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission,\n+                childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final FolderWithMetadata parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(parentFolder).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initAclEntity(parentFolder, AclPermission.READ);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final FolderWithMetadata returnedFolder = folderApiService.getProject(ID, AclClass.FOLDER);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+        final List<? extends AbstractSecuredEntity> withoutPermissionLeaves =\n+                childrenById.get(childFolderWithoutPermission.getId()).getLeaves();\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertThat(withoutPermissionLeaves).isEqualTo(allEntities2);\n+        assertAclMaskForLeaves(withoutPermissionLeaves);\n+        assertThat(childrenById.get(emptyChildFolderWithoutPermission.getId()))\n+                .isEqualTo(emptyChildFolderWithoutPermission);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadTree() {\n+        doReturn(folder).when(mockFolderManager).loadTree();\n+\n+        assertThat(folderApiService.loadTree()).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadTreeWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).loadTree();\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final Folder returnedFolder = folderApiService.loadTree();\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertTreeForFolderWithoutPermission(childrenById.get(childFolderWithoutPermission.getId()));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadProjects() {\n+        doReturn(folder).when(mockFolderManager).loadAllProjects();\n+\n+        assertThat(folderApiService.loadProjects()).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadProjectsWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                                                   emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).loadAllProjects();\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        doReturn(parentFolder).when(mockFolderManager).loadAllProjects();\n+\n+        final Folder returnedFolder = folderApiService.loadProjects();\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2185e62ffca39e424f9b5149e3802458dac30f7a"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxNTEzOQ==", "bodyText": "Let's introduce a new field int NO_PERMISSION = 0 and check that permission mask for folderWithoutPermission is equal to NO_PERMISSION here.", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r543215139", "createdAt": "2020-12-15T10:14:36Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,620 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead2 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission1 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission2 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead1 = getS3bucketDataStorage(ID_3, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead2 = getS3bucketDataStorage(ID_3, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission1 = getS3bucketDataStorage(ID_4, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission2 = getS3bucketDataStorage(ID_4, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead1 = getRunConfiguration(ID_5, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead2 = getRunConfiguration(ID_5, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission1 = getRunConfiguration(ID_6, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission2 = getRunConfiguration(ID_6, ANOTHER_SIMPLE_USER);\n+    private final List<AbstractSecuredEntity> entitiesWithPermission = Arrays.asList(pipelineRead2,\n+                                                                                     storageRead2,\n+                                                                                     runConfigRead2);\n+    private final List<AbstractSecuredEntity> allEntities = Arrays.asList(pipelineRead1, pipelineWithoutPermission1,\n+                                                                          storageRead1, storageWithoutPermission1,\n+                                                                          runConfigRead1, runConfigWithoutPermission2);\n+\n+    @Autowired\n+    private FolderManager mockFolderManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private FolderApiService folderApiService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setParentId(null);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateFromTemplateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateFromTemplateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setParentId(null);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyUpdateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.update(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetProjectForAdmin() {\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWhenPermissionIsGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata, AclPermission.READ);\n+        mockSecurityContext();\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyGetProjectWhenPermissionIsNotGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.getProject(ID, AclClass.FOLDER));\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWithHierarchyWhenPermissionIsGranted() {\n+        final FolderWithMetadata childFolderWithPermission = initFolderWithReadPermission();\n+        final FolderWithMetadata childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission,\n+                childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final FolderWithMetadata parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(parentFolder).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initAclEntity(parentFolder, AclPermission.READ);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final FolderWithMetadata returnedFolder = folderApiService.getProject(ID, AclClass.FOLDER);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertThat(childrenById.get(childFolderWithPermission.getId())).isEqualTo(childFolderWithPermission);\n+        assertThat(childrenById.get(childFolderWithPermission.getId()).getLeaves()).isEqualTo(allEntities);\n+        assertThat(childrenById.get(childFolderWithoutPermission.getId())).isEqualTo(childFolderWithoutPermission);\n+        assertThat(childrenById.get(childFolderWithoutPermission.getId()).getLeaves()).isEqualTo(allEntities);\n+        assertThat(childrenById.get(emptyChildFolderWithoutPermission.getId()))\n+                .isEqualTo(emptyChildFolderWithoutPermission);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadTree() {\n+        doReturn(folder).when(mockFolderManager).loadTree();\n+\n+        assertThat(folderApiService.loadTree()).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadTreeWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).loadTree();\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+\n+        final Folder returnedFolder = folderApiService.loadTree();\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertTreeForFolderWithoutPermission(childrenById.get(childFolderWithoutPermission.getId()));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadProjects() {\n+        doReturn(folder).when(mockFolderManager).loadAllProjects();\n+\n+        assertThat(folderApiService.loadProjects()).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadProjectsWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                                                   emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).loadAllProjects();\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        doReturn(parentFolder).when(mockFolderManager).loadAllProjects();\n+\n+        final Folder returnedFolder = folderApiService.loadProjects();\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertTreeForFolderWithoutPermission(childrenById.get(childFolderWithoutPermission.getId()));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoad() {\n+        doReturn(folder).when(mockFolderManager).load(ID);\n+\n+        assertThat(folderApiService.load(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                                                   emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).load(ID);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+\n+        final Folder returnedFolder = folderApiService.load(ID);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertTreeForFolderWithoutPermission(childrenById.get(childFolderWithoutPermission.getId()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadByIdOrPathForAdmin() {\n+        doReturn(folder).when(mockFolderManager).loadByNameOrId(TEST_STRING);\n+\n+        assertThat(folderApiService.loadByIdOrPath(TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadByIdOrPathWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).loadByNameOrId(TEST_STRING);\n+        initAclEntity(folder, AclPermission.READ);\n+\n+        final Folder returnedFolder = folderApiService.loadByIdOrPath(TEST_STRING);\n+\n+        assertThat(returnedFolder).isEqualTo(folder);\n+        assertThat(returnedFolder.getMask()).isEqualTo(READ_PERMISSION);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyLoadByIdOrPathWhenPermissionIsNotGranted() {\n+        doReturn(folder).when(mockFolderManager).loadByNameOrId(TEST_STRING);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.loadByIdOrPath(TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteForAdmin() {\n+        doReturn(folder).when(mockFolderManager).delete(ID);\n+\n+        assertThat(folderApiService.delete(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDeleteForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).delete(ID);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.delete(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyDeleteWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.delete(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyDeleteWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.delete(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteForceForAdmin() {\n+        doReturn(folder).when(mockFolderManager).deleteForce(ID);\n+\n+        assertThat(folderApiService.deleteForce(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDeleteForceForManagerWhenPermissionForChildIsGranted() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        final Folder childFolder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setChildFolders(Collections.singletonList(childFolder));\n+        doReturn(childFolder).when(mockFolderManager).load(ID);\n+        doReturn(folder).when(mockFolderManager).deleteForce(ID);\n+        initAclEntity(folder, AclPermission.WRITE);\n+        initAclEntity(childFolder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.deleteForce(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyDeleteForceWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.deleteForce(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyDeleteForceWhenPermissionForChildIsNotGranted() {\n+        final Folder folder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        final Folder childFolder = getFolder(ID, ANOTHER_SIMPLE_USER);\n+        folder.setChildFolders(Collections.singletonList(childFolder));\n+        doReturn(childFolder).when(mockFolderManager).load(ID);\n+        doReturn(folder).when(mockFolderManager).deleteForce(ID);\n+        initAclEntity(folder, AclPermission.WRITE);\n+        initAclEntity(childFolder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.deleteForce(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCloneFolderForAdmin() {\n+        doReturn(folder).when(mockFolderManager).cloneFolder(ID, ID_2, TEST_STRING);\n+\n+        assertThat(folderApiService.cloneFolder(ID, ID_2, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCloneFolderForManagerWhenPermissionIsGranted() {\n+        final Folder destinationFolder = getFolder(ID_2, ANOTHER_SIMPLE_USER);\n+        doReturn(folder).when(mockFolderManager).cloneFolder(ID, ID_2, TEST_STRING);\n+        initAclEntity(folder, AclPermission.READ);\n+        initAclEntity(destinationFolder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.cloneFolder(ID, ID_2, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCloneFolderWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.cloneFolder(ID, ID_2, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCloneFolderForManagerWhenDestinationFolderPermissionIsNotGranted() {\n+        final Folder destinationFolder = getFolder(ID_2, ANOTHER_SIMPLE_USER);\n+        doReturn(folder).when(mockFolderManager).cloneFolder(ID, ID_2, TEST_STRING);\n+        initAclEntity(folder, AclPermission.READ);\n+        initAclEntity(destinationFolder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.cloneFolder(ID, ID_2, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCloneFolderForManagerWhenTargetFolderPermissionIsNotGranted() {\n+        final Folder destinationFolder = getFolder(ID_2, ANOTHER_SIMPLE_USER);\n+        doReturn(folder).when(mockFolderManager).cloneFolder(ID, ID_2, TEST_STRING);\n+        initAclEntity(folder);\n+        initAclEntity(destinationFolder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.cloneFolder(ID, ID_2, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLockFolderForAdmin() {\n+        doReturn(folder).when(mockFolderManager).lockFolder(ID);\n+\n+        assertThat(folderApiService.lockFolder(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = ANOTHER_SIMPLE_USER)\n+    public void shouldLockFolderForOwner() {\n+        doReturn(folder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folder).when(mockFolderManager).lockFolder(ID);\n+        doReturn(ANOTHER_SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+\n+        final Folder returnedFolder = folderApiService.lockFolder(ID);\n+\n+        assertThat(returnedFolder).isEqualTo(folder);\n+        assertThat(returnedFolder.getMask()).isEqualTo(ALL_PERMISSIONS);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLockFolderForNotOwner() {\n+        doReturn(folder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.lockFolder(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUnlockFolderForAdmin() {\n+        doReturn(folder).when(mockFolderManager).unlockFolder(ID);\n+\n+        assertThat(folderApiService.unlockFolder(ID)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = ANOTHER_SIMPLE_USER)\n+    public void shouldUnlockFolderForOwner() {\n+        doReturn(folder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folder).when(mockFolderManager).unlockFolder(ID);\n+        doReturn(ANOTHER_SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+\n+        final Folder returnedFolder = folderApiService.unlockFolder(ID);\n+\n+        assertThat(returnedFolder).isEqualTo(folder);\n+        assertThat(returnedFolder.getMask()).isEqualTo(ALL_PERMISSIONS);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUnlockFolderForNotOwner() {\n+        doReturn(folder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.unlockFolder(ID));\n+    }\n+\n+    private void assertTreeForFolderWithReadPermission(final AbstractHierarchicalEntity folderWithPermission) {\n+        final List<? extends AbstractSecuredEntity> leaves = folderWithPermission.getLeaves();\n+\n+        assertThat(folderWithPermission.getMask()).isEqualTo(READ_PERMISSION);\n+        assertThat(leaves).isEqualTo(allEntities);\n+        assertAclMaskForLeaves(leaves);\n+    }\n+\n+    private void assertTreeForFolderWithoutPermission(final AbstractHierarchicalEntity folderWithoutPermission) {\n+        final List<? extends AbstractSecuredEntity> leaves = folderWithoutPermission.getLeaves();\n+\n+        assertThat(leaves).isEqualTo(entitiesWithPermission);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NjQ1Mw=="}, "originalCommit": {"oid": "674a6c6ad64e8ad2af4969a08c6af2e23c9c0c76"}, "originalPosition": 573}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxNzc4Mg==", "bodyText": "Let's add final here", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r543217782", "createdAt": "2020-12-15T10:18:24Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/test/creator/folder/FolderCreatorUtils.java", "diffHunk": "@@ -24,10 +25,19 @@ private FolderCreatorUtils() {\n \n     }\n \n-    public static Folder getFolder(final Long id, final String owner) {\n+    public static Folder getFolder(final Long id, final Long parentId, final String owner) {\n         Folder folder = new Folder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2185e62ffca39e424f9b5149e3802458dac30f7a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMDg4Mg==", "bodyText": "Could you apply comments above here?", "url": "https://github.com/epam/cloud-pipeline/pull/1644#discussion_r543220882", "createdAt": "2020-12-15T10:22:41Z", "author": {"login": "ekazachkova"}, "path": "api/src/test/java/com/epam/pipeline/acl/folder/FolderApiServiceTest.java", "diffHunk": "@@ -0,0 +1,632 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.folder;\n+\n+import com.epam.pipeline.entity.AbstractHierarchicalEntity;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.configuration.RunConfiguration;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.metadata.FolderWithMetadata;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.pipeline.FolderManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ALL_PERMISSIONS;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_3;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.READ_PERMISSION;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.configuration.ConfigurationCreatorUtils.getRunConfiguration;\n+import static com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils.getS3bucketDataStorage;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolder;\n+import static com.epam.pipeline.test.creator.folder.FolderCreatorUtils.getFolderWithMetadata;\n+import static com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils.getPipeline;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class FolderApiServiceTest extends AbstractAclTest {\n+\n+    private static final long ID_4 = 4L;\n+    private static final long ID_5 = 5L;\n+    private static final long ID_6 = 6L;\n+    private static final long ID_7 = 7L;\n+    private static final long ID_8 = 8L;\n+    private static final long ID_9 = 9L;\n+    private static final long ID_10 = 10L;\n+    private static final long ID_11 = 11L;\n+    private static final long ID_12 = 12L;\n+    private static final long ID_100 = 100L;\n+    private static final long ID_110 = 110L;\n+    private static final String FOLDER_MANAGER = \"FOLDER_MANAGER\";\n+    private final Folder folder = getFolder(ID, ID_100, ANOTHER_SIMPLE_USER);\n+    final Folder folder10 = getFolder(ID_100, ID_110, ANOTHER_SIMPLE_USER);\n+    private final FolderWithMetadata folderWithMetadata = getFolderWithMetadata(ID, ID_110, ANOTHER_SIMPLE_USER);\n+    private final Folder emptyChildFolderWithoutPermission = getFolder(ID_3, ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead1 = getPipeline(ID, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineRead2 = getPipeline(ID_2, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission1 = getPipeline(ID_3, ANOTHER_SIMPLE_USER);\n+    private final Pipeline pipelineWithoutPermission2 = getPipeline(ID_4, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead1 = getS3bucketDataStorage(ID_5, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageRead2 = getS3bucketDataStorage(ID_6, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission1 = getS3bucketDataStorage(ID_7, ANOTHER_SIMPLE_USER);\n+    private final S3bucketDataStorage storageWithoutPermission2 = getS3bucketDataStorage(ID_8, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead1 = getRunConfiguration(ID_9, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigRead2 = getRunConfiguration(ID_10, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission1 = getRunConfiguration(ID_11, ANOTHER_SIMPLE_USER);\n+    private final RunConfiguration runConfigWithoutPermission2 = getRunConfiguration(ID_12, ANOTHER_SIMPLE_USER);\n+    private final List<AbstractSecuredEntity> entitiesWithPermission = Arrays.asList(pipelineRead2,\n+                                                                                     storageRead2,\n+                                                                                     runConfigRead2);\n+    private final List<AbstractSecuredEntity> allEntities = Arrays.asList(pipelineRead1, pipelineWithoutPermission1,\n+                                                                          storageRead1, storageWithoutPermission1,\n+                                                                          runConfigRead1, runConfigWithoutPermission1);\n+    private final List<AbstractSecuredEntity> allEntities2 = Arrays.asList(pipelineRead2, pipelineWithoutPermission2,\n+                                                                           storageRead2, storageWithoutPermission2,\n+                                                                           runConfigRead2, runConfigWithoutPermission2);\n+\n+    @Autowired\n+    private FolderManager mockFolderManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private FolderApiService folderApiService;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).create(folder);\n+        initAclEntity(folder10, AclPermission.WRITE);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.create(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder10);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, null, ANOTHER_SIMPLE_USER);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.create(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateFromTemplateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldCreateFromTemplateForManagerWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).createFromTemplate(folder, TEST_STRING);\n+        initAclEntity(folder10, AclPermission.WRITE);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.createFromTemplate(folder, TEST_STRING)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWithInvalidRole() {\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder10);\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = FOLDER_MANAGER, username = SIMPLE_USER)\n+    public void shouldDenyCreateFromTemplateWhenParentIdIsNull() {\n+        final Folder folder = getFolder(ID, null, ANOTHER_SIMPLE_USER);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.createFromTemplate(folder, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateForAdmin() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateWhenPermissionIsGranted() {\n+        doReturn(folder).when(mockFolderManager).update(folder);\n+        initAclEntity(folder, AclPermission.WRITE);\n+\n+        assertThat(folderApiService.update(folder)).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyUpdateWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.update(folder));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetProjectForAdmin() {\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWhenPermissionIsGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata, AclPermission.READ);\n+        mockSecurityContext();\n+\n+        assertThat(folderApiService.getProject(ID, AclClass.FOLDER)).isEqualTo(folderWithMetadata);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyGetProjectWhenPermissionIsNotGranted() {\n+        doReturn(folderWithMetadata).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(folderWithMetadata).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(folderWithMetadata);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> folderApiService.getProject(ID, AclClass.FOLDER));\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetProjectWithHierarchyWhenPermissionIsGranted() {\n+        final FolderWithMetadata childFolderWithPermission = initFolderWithReadPermission();\n+        final FolderWithMetadata childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission,\n+                childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final FolderWithMetadata parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockEntityManager).load(AclClass.FOLDER, ID);\n+        doReturn(parentFolder).when(mockFolderManager).getProject(ID, AclClass.FOLDER);\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initAclEntity(parentFolder, AclPermission.READ);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final FolderWithMetadata returnedFolder = folderApiService.getProject(ID, AclClass.FOLDER);\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+        final List<? extends AbstractSecuredEntity> withoutPermissionLeaves =\n+                childrenById.get(childFolderWithoutPermission.getId()).getLeaves();\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);\n+        assertTreeForFolderWithReadPermission(childrenById.get(childFolderWithPermission.getId()));\n+        assertThat(withoutPermissionLeaves).isEqualTo(allEntities2);\n+        assertAclMaskForLeaves(withoutPermissionLeaves);\n+        assertThat(childrenById.get(emptyChildFolderWithoutPermission.getId()))\n+                .isEqualTo(emptyChildFolderWithoutPermission);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadTree() {\n+        doReturn(folder).when(mockFolderManager).loadTree();\n+\n+        assertThat(folderApiService.loadTree()).isEqualTo(folder);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadTreeWithHierarchy() {\n+        final Folder childFolderWithPermission = initFolderWithReadPermission();\n+        final Folder childFolderWithoutPermission = initFolderWithoutReadPermission();\n+        final List<Folder> folders = Arrays.asList(childFolderWithPermission, childFolderWithoutPermission,\n+                emptyChildFolderWithoutPermission);\n+        final Folder parentFolder = initParentFolder(folders);\n+        doReturn(parentFolder).when(mockFolderManager).loadTree();\n+        initAclEntity(emptyChildFolderWithoutPermission);\n+        initEntities();\n+        mockSecurityContext();\n+\n+        final Folder returnedFolder = folderApiService.loadTree();\n+        final Map<Long, AbstractHierarchicalEntity> childrenById = returnedFolder.getChildren().stream()\n+                .collect(Collectors.toMap(AbstractSecuredEntity::getId, Function.identity()));\n+\n+        assertThat(returnedFolder).isEqualTo(parentFolder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2185e62ffca39e424f9b5149e3802458dac30f7a"}, "originalPosition": 301}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTAxMzc4", "url": "https://github.com/epam/cloud-pipeline/pull/1644#pullrequestreview-553501378", "createdAt": "2020-12-16T09:29:59Z", "commit": {"oid": "96b637147df00b7d57c79323d0a6aeb0ec66bb68"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cb1888427fb82f05f307112df841b2a1a74134b", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/3cb1888427fb82f05f307112df841b2a1a74134b", "committedDate": "2020-12-21T11:03:08Z", "message": "Issue #1404: Implemented tests FolderApiService (wip)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19fc0470a2491368e0a8624f760ba9f0b6f4c640", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/19fc0470a2491368e0a8624f760ba9f0b6f4c640", "committedDate": "2020-12-21T11:03:53Z", "message": "Issue #1404: Added AclTree tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0bbd2bf4b9766d0bee1eaec30b771a7f5e6a44d", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/c0bbd2bf4b9766d0bee1eaec30b771a7f5e6a44d", "committedDate": "2020-12-21T11:03:56Z", "message": "Issue #1404: AclTree tests refactoring (wip)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e94f94abfc602f16a637d4cee392ef8e1f02b268", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/e94f94abfc602f16a637d4cee392ef8e1f02b268", "committedDate": "2020-12-21T11:04:16Z", "message": "Issue #1404: AclTree tests refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe484033a670110188747f72446f5c56f7a9f875", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/fe484033a670110188747f72446f5c56f7a9f875", "committedDate": "2020-12-21T11:04:20Z", "message": "Issue #1404: Deleted existing FolderApiServiceTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be8787fe8f824c7330bada33801a18afcc956703", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/be8787fe8f824c7330bada33801a18afcc956703", "committedDate": "2020-12-21T11:04:36Z", "message": "Issue #1404: Changed getFolder method; different IDs used for each entity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "430518ee354af1544d44827e5f6ed9dca15b8fc9", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/430518ee354af1544d44827e5f6ed9dca15b8fc9", "committedDate": "2020-12-21T11:04:56Z", "message": "Issue #1404: Added more assertions for AclMask, removed redundant ID constant fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35574a4efe60b2f7209109b18b292a8e1ae7cfbb", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/35574a4efe60b2f7209109b18b292a8e1ae7cfbb", "committedDate": "2020-12-21T11:04:59Z", "message": "Issue #1404: Folder field renamed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3bcd5d6f1baf14b7ab43b39c2d57f1531793401", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/c3bcd5d6f1baf14b7ab43b39c2d57f1531793401", "committedDate": "2020-12-21T11:12:39Z", "message": "Issue #1404: changed import"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96b637147df00b7d57c79323d0a6aeb0ec66bb68", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/96b637147df00b7d57c79323d0a6aeb0ec66bb68", "committedDate": "2020-12-15T11:41:57Z", "message": "Issue #1404: Folder field renamed"}, "afterCommit": {"oid": "c3bcd5d6f1baf14b7ab43b39c2d57f1531793401", "author": {"user": {"login": "cryteq", "name": "Mikhail Iniakin"}}, "url": "https://github.com/epam/cloud-pipeline/commit/c3bcd5d6f1baf14b7ab43b39c2d57f1531793401", "committedDate": "2020-12-21T11:12:39Z", "message": "Issue #1404: changed import"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3605, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}