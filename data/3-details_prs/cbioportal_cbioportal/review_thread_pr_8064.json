{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNzg1ODI2", "number": 8064, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMjoyNzo0MlrOE9CXCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMjoyNzo0MlrOE9CXCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDM3MjU2OnYy", "diffSide": "RIGHT", "path": "core/src/test/scripts/unit_tests_validate_data.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMjoyNzo0MlrOH5gvvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTozMzo0MFrOH6S_zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2NzM5MA==", "bodyText": "Should we assert that there is no error logged for the first record? If some logic flaw in the scripts package caused flagging every record as too long I'm sure we would notice, so maybe we don't have to worry about it - but since there are two records in the test set, it would feel more complete to test the code behavior for both cases. I'm not sure how you assert an absence of error .. maybe self.assertNotEqual(record.levelno, logging.ERROR)?\nHowever, I think this PR can be merged without this added test.", "url": "https://github.com/cBioPortal/cbioportal/pull/8064#discussion_r530067390", "createdAt": "2020-11-25T02:27:42Z", "author": {"login": "sheridancbio"}, "path": "core/src/test/scripts/unit_tests_validate_data.py", "diffHunk": "@@ -1365,6 +1365,22 @@ def test_isValidAminoAcidChange(self):\n         self.assertIn('HGVSp_Short', record.getMessage())\n         self.assertEqual(record.line_number, 8)\n \n+    def throw_error_if_hgvsp_short_is_too_long(self):\n+        \"\"\"Test that an error is thrown if HGVSp_Short value is too long.\"\"\"\n+        # set level according to this test case:\n+        self.logger.setLevel(logging.WARNING)\n+        record_list = self.validate(\n+                'mutations/data_mutations_too_long_hgvsp_short.maf',\n+                validateData.MutationsExtendedValidator,\n+                extra_meta_fields={'swissprot_identifier': 'accession'})\n+        self.assertEqual(len(record_list), 2)\n+        record_iterator = iter(record_list)\n+        # expect an error for the second entry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4183c29310be289b93d16303d2eb881584ca259c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5MDcwMA==", "bodyText": "Good catch! I've fixed the test", "url": "https://github.com/cBioPortal/cbioportal/pull/8064#discussion_r530890700", "createdAt": "2020-11-26T09:33:40Z", "author": {"login": "oplantalech"}, "path": "core/src/test/scripts/unit_tests_validate_data.py", "diffHunk": "@@ -1365,6 +1365,22 @@ def test_isValidAminoAcidChange(self):\n         self.assertIn('HGVSp_Short', record.getMessage())\n         self.assertEqual(record.line_number, 8)\n \n+    def throw_error_if_hgvsp_short_is_too_long(self):\n+        \"\"\"Test that an error is thrown if HGVSp_Short value is too long.\"\"\"\n+        # set level according to this test case:\n+        self.logger.setLevel(logging.WARNING)\n+        record_list = self.validate(\n+                'mutations/data_mutations_too_long_hgvsp_short.maf',\n+                validateData.MutationsExtendedValidator,\n+                extra_meta_fields={'swissprot_identifier': 'accession'})\n+        self.assertEqual(len(record_list), 2)\n+        record_iterator = iter(record_list)\n+        # expect an error for the second entry", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2NzM5MA=="}, "originalCommit": {"oid": "4183c29310be289b93d16303d2eb881584ca259c"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3472, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}