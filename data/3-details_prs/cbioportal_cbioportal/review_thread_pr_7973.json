{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MjU4Nzcy", "number": 7973, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzozNTozMVrOEx5zdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzo0MToxN1rOEx59rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzYyNzQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scripts/importer/validateData.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzozNTozMVrOHoPwQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo1Njo1MlrOHoWdWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MzIwMw==", "bodyText": "Just a small question. Are the binary values fixed?", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r511963203", "createdAt": "2020-10-26T13:35:31Z", "author": {"login": "rmadupuri"}, "path": "core/src/main/scripts/importer/validateData.py", "diffHunk": "@@ -4361,56 +4358,113 @@ class GenericAssayValidator(GenericAssayWiseFileValidator):\n     # (1) Cell contains a value without decimals and is not prefixed by \">\"; value appears to be truncated but lacks \">\" truncation indicator\n     def checkValue(self, value, col_index):\n         \"\"\"Check a value in a sample column.\"\"\"\n+        stripped_value = value.strip()\n+        # if the value is prefixed with '>' or '<' remove this prefix\n+        # prior to evaluation of the numeric value\n+        hasTruncSymbol = re.match(\"^[><]\", stripped_value)\n+        stripped_value = re.sub(r\"^[><]\\s*\",\"\", stripped_value)\n+\n+        # do not check null values\n+        # 'NA' is an allowed value. No further validations apply.\n+        if stripped_value in self.NULL_VALUES:\n+            return\n \n         # value is not defined (empty cell)\n-        stripped_value = value.strip()\n-        if stripped_value == \"\":\n-            self.logger.error(\"Cell is empty. A response value value is expected. Use 'NA' to indicate missing values.\",\n+        if len(stripped_value) == 0:\n+            self.logger.error(\"Cell is empty. A value is expected. Use 'NA' to indicate missing values.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n-        # 'NA' is an allowed value. No further validations apply.\n-        if stripped_value == 'NA':\n-            return\n-\n-        # if the value is prefixed with '>' or '<' remove this prefix\n-        # prior to evaluation of the numeric value\n-        hasTruncSymbol = re.match(\"^[><]\", stripped_value)\n-        stripped_value = re.sub(r\"^[><]\\s*\",\"\", stripped_value)\n-\n         try:\n             numeric_value = float(stripped_value)\n         except ValueError:\n-            self.logger.error(\"Value cannot be interpreted as a floating point number and is not valid response value.\",\n+            self.logger.error(\"Value cannot be interpreted as a floating point number and is not valid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n         if math.isnan(numeric_value):\n-            self.logger.error(\"Value is NaN, therefore, not a valid response value.\",\n+            self.logger.error(\"Value is NaN, therefore, not a valid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n         if math.isinf(numeric_value):\n-            self.logger.error(\"Value is infinite and, therefore, not a valid response value.\",\n+            self.logger.error(\"Value is infinite and, therefore, not a valid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n         if numeric_value % 1 == 0 and not hasTruncSymbol:\n-            self.logger.warning(\"Value has no decimals and may represent an invalid response value.\",\n+            self.logger.warning(\"Value has no decimals and may represent an invalid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n \n         return\n \n+class GenericAssayCategoricalValidator(GenericAssayWiseFileValidator):\n+\n+    \"\"\" Validator for files containing generic assay categorical values.\n+    \"\"\"\n+    def __init__(self, *args, **kwargs):\n+        \"\"\"Initialize the instance attributes of the data file validator.\"\"\"\n+        super(GenericAssayCategoricalValidator, self).__init__(*args, **kwargs)\n+\n+    # (1) non-empty string\n+    # (2) NA cell value is allowed; means value was not tested on a sample\n+\n+    def checkValue(self, value, col_index):\n+        \"\"\"Check a value in a sample column.\"\"\"\n+        stripped_value = value.strip()\n+        # do not check null values\n+        # 'NA' is an allowed value. No further validations apply.\n+        if stripped_value in self.NULL_VALUES:\n+            return\n+        # non-empty string\n+        if len(stripped_value) == 0:\n+            self.logger.error(\"Cell is empty. A categorical value is expected. Use 'NA' to indicate missing values.\",\n+                extra={'line_number': self.line_number,\n+                'column_number': col_index + 1,\n+                'cause': value})\n+\n+        return\n+\n+class GenericAssayBinaryValidator(GenericAssayWiseFileValidator):\n+\n+    \"\"\" Validator for files containing generic assay binary values.\n+    \"\"\"\n+    def __init__(self, *args, **kwargs):\n+        \"\"\"Initialize the instance attributes of the data file validator.\"\"\"\n+        super(GenericAssayBinaryValidator, self).__init__(*args, **kwargs)\n+\n+    # (1) values defined in ALLOWED_VALUES\n+    # (2) NA cell value is allowed; means value was not tested on a sample\n+\n+    ALLOWED_VALUES = ['yes', 'no', 'true', 'false'] + GenericAssayWiseFileValidator.NULL_VALUES", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e7045d4268606e252bed1f8e68e01738138937"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2NDI2NQ==", "bodyText": "Yes, in the RFC, we planned to have a controlled vocabulary for binary type: https://docs.google.com/document/d/1-6O16_j5b5LeHA5SnChnlEKQTYhcwNh4AEwCxB8FwC8/edit?disco=AAAAHCuNjcs.", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r512064265", "createdAt": "2020-10-26T15:45:54Z", "author": {"login": "dippindots"}, "path": "core/src/main/scripts/importer/validateData.py", "diffHunk": "@@ -4361,56 +4358,113 @@ class GenericAssayValidator(GenericAssayWiseFileValidator):\n     # (1) Cell contains a value without decimals and is not prefixed by \">\"; value appears to be truncated but lacks \">\" truncation indicator\n     def checkValue(self, value, col_index):\n         \"\"\"Check a value in a sample column.\"\"\"\n+        stripped_value = value.strip()\n+        # if the value is prefixed with '>' or '<' remove this prefix\n+        # prior to evaluation of the numeric value\n+        hasTruncSymbol = re.match(\"^[><]\", stripped_value)\n+        stripped_value = re.sub(r\"^[><]\\s*\",\"\", stripped_value)\n+\n+        # do not check null values\n+        # 'NA' is an allowed value. No further validations apply.\n+        if stripped_value in self.NULL_VALUES:\n+            return\n \n         # value is not defined (empty cell)\n-        stripped_value = value.strip()\n-        if stripped_value == \"\":\n-            self.logger.error(\"Cell is empty. A response value value is expected. Use 'NA' to indicate missing values.\",\n+        if len(stripped_value) == 0:\n+            self.logger.error(\"Cell is empty. A value is expected. Use 'NA' to indicate missing values.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n-        # 'NA' is an allowed value. No further validations apply.\n-        if stripped_value == 'NA':\n-            return\n-\n-        # if the value is prefixed with '>' or '<' remove this prefix\n-        # prior to evaluation of the numeric value\n-        hasTruncSymbol = re.match(\"^[><]\", stripped_value)\n-        stripped_value = re.sub(r\"^[><]\\s*\",\"\", stripped_value)\n-\n         try:\n             numeric_value = float(stripped_value)\n         except ValueError:\n-            self.logger.error(\"Value cannot be interpreted as a floating point number and is not valid response value.\",\n+            self.logger.error(\"Value cannot be interpreted as a floating point number and is not valid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n         if math.isnan(numeric_value):\n-            self.logger.error(\"Value is NaN, therefore, not a valid response value.\",\n+            self.logger.error(\"Value is NaN, therefore, not a valid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n         if math.isinf(numeric_value):\n-            self.logger.error(\"Value is infinite and, therefore, not a valid response value.\",\n+            self.logger.error(\"Value is infinite and, therefore, not a valid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n         if numeric_value % 1 == 0 and not hasTruncSymbol:\n-            self.logger.warning(\"Value has no decimals and may represent an invalid response value.\",\n+            self.logger.warning(\"Value has no decimals and may represent an invalid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n \n         return\n \n+class GenericAssayCategoricalValidator(GenericAssayWiseFileValidator):\n+\n+    \"\"\" Validator for files containing generic assay categorical values.\n+    \"\"\"\n+    def __init__(self, *args, **kwargs):\n+        \"\"\"Initialize the instance attributes of the data file validator.\"\"\"\n+        super(GenericAssayCategoricalValidator, self).__init__(*args, **kwargs)\n+\n+    # (1) non-empty string\n+    # (2) NA cell value is allowed; means value was not tested on a sample\n+\n+    def checkValue(self, value, col_index):\n+        \"\"\"Check a value in a sample column.\"\"\"\n+        stripped_value = value.strip()\n+        # do not check null values\n+        # 'NA' is an allowed value. No further validations apply.\n+        if stripped_value in self.NULL_VALUES:\n+            return\n+        # non-empty string\n+        if len(stripped_value) == 0:\n+            self.logger.error(\"Cell is empty. A categorical value is expected. Use 'NA' to indicate missing values.\",\n+                extra={'line_number': self.line_number,\n+                'column_number': col_index + 1,\n+                'cause': value})\n+\n+        return\n+\n+class GenericAssayBinaryValidator(GenericAssayWiseFileValidator):\n+\n+    \"\"\" Validator for files containing generic assay binary values.\n+    \"\"\"\n+    def __init__(self, *args, **kwargs):\n+        \"\"\"Initialize the instance attributes of the data file validator.\"\"\"\n+        super(GenericAssayBinaryValidator, self).__init__(*args, **kwargs)\n+\n+    # (1) values defined in ALLOWED_VALUES\n+    # (2) NA cell value is allowed; means value was not tested on a sample\n+\n+    ALLOWED_VALUES = ['yes', 'no', 'true', 'false'] + GenericAssayWiseFileValidator.NULL_VALUES", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MzIwMw=="}, "originalCommit": {"oid": "09e7045d4268606e252bed1f8e68e01738138937"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MzA1MQ==", "bodyText": "Right. We can extend the list if we have to introduce other binary values.", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r512073051", "createdAt": "2020-10-26T15:56:52Z", "author": {"login": "rmadupuri"}, "path": "core/src/main/scripts/importer/validateData.py", "diffHunk": "@@ -4361,56 +4358,113 @@ class GenericAssayValidator(GenericAssayWiseFileValidator):\n     # (1) Cell contains a value without decimals and is not prefixed by \">\"; value appears to be truncated but lacks \">\" truncation indicator\n     def checkValue(self, value, col_index):\n         \"\"\"Check a value in a sample column.\"\"\"\n+        stripped_value = value.strip()\n+        # if the value is prefixed with '>' or '<' remove this prefix\n+        # prior to evaluation of the numeric value\n+        hasTruncSymbol = re.match(\"^[><]\", stripped_value)\n+        stripped_value = re.sub(r\"^[><]\\s*\",\"\", stripped_value)\n+\n+        # do not check null values\n+        # 'NA' is an allowed value. No further validations apply.\n+        if stripped_value in self.NULL_VALUES:\n+            return\n \n         # value is not defined (empty cell)\n-        stripped_value = value.strip()\n-        if stripped_value == \"\":\n-            self.logger.error(\"Cell is empty. A response value value is expected. Use 'NA' to indicate missing values.\",\n+        if len(stripped_value) == 0:\n+            self.logger.error(\"Cell is empty. A value is expected. Use 'NA' to indicate missing values.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n-        # 'NA' is an allowed value. No further validations apply.\n-        if stripped_value == 'NA':\n-            return\n-\n-        # if the value is prefixed with '>' or '<' remove this prefix\n-        # prior to evaluation of the numeric value\n-        hasTruncSymbol = re.match(\"^[><]\", stripped_value)\n-        stripped_value = re.sub(r\"^[><]\\s*\",\"\", stripped_value)\n-\n         try:\n             numeric_value = float(stripped_value)\n         except ValueError:\n-            self.logger.error(\"Value cannot be interpreted as a floating point number and is not valid response value.\",\n+            self.logger.error(\"Value cannot be interpreted as a floating point number and is not valid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n         if math.isnan(numeric_value):\n-            self.logger.error(\"Value is NaN, therefore, not a valid response value.\",\n+            self.logger.error(\"Value is NaN, therefore, not a valid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n         if math.isinf(numeric_value):\n-            self.logger.error(\"Value is infinite and, therefore, not a valid response value.\",\n+            self.logger.error(\"Value is infinite and, therefore, not a valid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n         if numeric_value % 1 == 0 and not hasTruncSymbol:\n-            self.logger.warning(\"Value has no decimals and may represent an invalid response value.\",\n+            self.logger.warning(\"Value has no decimals and may represent an invalid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n \n         return\n \n+class GenericAssayCategoricalValidator(GenericAssayWiseFileValidator):\n+\n+    \"\"\" Validator for files containing generic assay categorical values.\n+    \"\"\"\n+    def __init__(self, *args, **kwargs):\n+        \"\"\"Initialize the instance attributes of the data file validator.\"\"\"\n+        super(GenericAssayCategoricalValidator, self).__init__(*args, **kwargs)\n+\n+    # (1) non-empty string\n+    # (2) NA cell value is allowed; means value was not tested on a sample\n+\n+    def checkValue(self, value, col_index):\n+        \"\"\"Check a value in a sample column.\"\"\"\n+        stripped_value = value.strip()\n+        # do not check null values\n+        # 'NA' is an allowed value. No further validations apply.\n+        if stripped_value in self.NULL_VALUES:\n+            return\n+        # non-empty string\n+        if len(stripped_value) == 0:\n+            self.logger.error(\"Cell is empty. A categorical value is expected. Use 'NA' to indicate missing values.\",\n+                extra={'line_number': self.line_number,\n+                'column_number': col_index + 1,\n+                'cause': value})\n+\n+        return\n+\n+class GenericAssayBinaryValidator(GenericAssayWiseFileValidator):\n+\n+    \"\"\" Validator for files containing generic assay binary values.\n+    \"\"\"\n+    def __init__(self, *args, **kwargs):\n+        \"\"\"Initialize the instance attributes of the data file validator.\"\"\"\n+        super(GenericAssayBinaryValidator, self).__init__(*args, **kwargs)\n+\n+    # (1) values defined in ALLOWED_VALUES\n+    # (2) NA cell value is allowed; means value was not tested on a sample\n+\n+    ALLOWED_VALUES = ['yes', 'no', 'true', 'false'] + GenericAssayWiseFileValidator.NULL_VALUES", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MzIwMw=="}, "originalCommit": {"oid": "09e7045d4268606e252bed1f8e68e01738138937"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzY1MzU2OnYy", "diffSide": "RIGHT", "path": "docs/File-Formats.md", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzo0MToxN1rOHoQARA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjowMTo1N1rOHoWspw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2NzMwMA==", "bodyText": "Just to be consistent with how we define datatype in other profiles, can we update the line to datatype: LIMIT-VALUE, CATEGORICAL or BINARY?", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r511967300", "createdAt": "2020-10-26T13:41:17Z", "author": {"login": "rmadupuri"}, "path": "docs/File-Formats.md", "diffHunk": "@@ -1298,15 +1298,15 @@ The cells contain the p-value for the GSVA score: A real number, between 0.0 and\n YAML or JSON file which contains extra information about the cancer study. No compulsory fields are required for this file (free-form). To enable this feature, you need to add a line in the cancer study meta file with `tags_file:` followed the YAML/JSON file name. The information on the YAML or JSON file will be displayed in a table when mousing over a tag logo in the studies on the query page.\n \n ## Generic Assay\n-Generic Assay is a two dimensional matrix generalized to capture non-genetic measurements per sample. Instead of a gene per row and a sample per column, a Generic Assay file contains a generic entity per row and a sample per column. A generic entity is defined by the data curator and generally means something other than a gene. Some examples include, treatment response or mutational signatures. For each generic entity - sample pair, a real number represents a captured measurement.\n+Generic Assay is a two dimensional matrix generalized to capture non-genetic measurements per sample. Instead of a gene per row and a sample per column, a Generic Assay file contains a generic entity per row and a sample per column. A generic entity is defined by the data curator and generally means something other than a gene. Some examples include, treatment response or mutational signatures. For each generic entity - sample pair, a (real number / text / binary value) represents a captured measurement.\n \n ### Generic Assay meta file\n The generic assay metadata file should contain the following fields:\n ```\n cancer_study_identifier: Same value as specified in meta file of the study\n genetic_alteration_type: GENERIC_ASSAY\n generic_assay_type: <GENERIC_ASSAY_TYPE>, e.g., \"TREATMENT_RESPONSE\" or \"MUTATIONAL_SIGNATURE\"\n-datatype: LIMIT-VALUE\n+datatype: value from LIMIT-VALUE / CATEGORICAL / BINARY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e7045d4268606e252bed1f8e68e01738138937"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2NzcxMA==", "bodyText": "Sure, updated!", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r512067710", "createdAt": "2020-10-26T15:50:10Z", "author": {"login": "dippindots"}, "path": "docs/File-Formats.md", "diffHunk": "@@ -1298,15 +1298,15 @@ The cells contain the p-value for the GSVA score: A real number, between 0.0 and\n YAML or JSON file which contains extra information about the cancer study. No compulsory fields are required for this file (free-form). To enable this feature, you need to add a line in the cancer study meta file with `tags_file:` followed the YAML/JSON file name. The information on the YAML or JSON file will be displayed in a table when mousing over a tag logo in the studies on the query page.\n \n ## Generic Assay\n-Generic Assay is a two dimensional matrix generalized to capture non-genetic measurements per sample. Instead of a gene per row and a sample per column, a Generic Assay file contains a generic entity per row and a sample per column. A generic entity is defined by the data curator and generally means something other than a gene. Some examples include, treatment response or mutational signatures. For each generic entity - sample pair, a real number represents a captured measurement.\n+Generic Assay is a two dimensional matrix generalized to capture non-genetic measurements per sample. Instead of a gene per row and a sample per column, a Generic Assay file contains a generic entity per row and a sample per column. A generic entity is defined by the data curator and generally means something other than a gene. Some examples include, treatment response or mutational signatures. For each generic entity - sample pair, a (real number / text / binary value) represents a captured measurement.\n \n ### Generic Assay meta file\n The generic assay metadata file should contain the following fields:\n ```\n cancer_study_identifier: Same value as specified in meta file of the study\n genetic_alteration_type: GENERIC_ASSAY\n generic_assay_type: <GENERIC_ASSAY_TYPE>, e.g., \"TREATMENT_RESPONSE\" or \"MUTATIONAL_SIGNATURE\"\n-datatype: LIMIT-VALUE\n+datatype: value from LIMIT-VALUE / CATEGORICAL / BINARY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2NzMwMA=="}, "originalCommit": {"oid": "09e7045d4268606e252bed1f8e68e01738138937"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MzI3OQ==", "bodyText": "Thanks!", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r512073279", "createdAt": "2020-10-26T15:57:11Z", "author": {"login": "rmadupuri"}, "path": "docs/File-Formats.md", "diffHunk": "@@ -1298,15 +1298,15 @@ The cells contain the p-value for the GSVA score: A real number, between 0.0 and\n YAML or JSON file which contains extra information about the cancer study. No compulsory fields are required for this file (free-form). To enable this feature, you need to add a line in the cancer study meta file with `tags_file:` followed the YAML/JSON file name. The information on the YAML or JSON file will be displayed in a table when mousing over a tag logo in the studies on the query page.\n \n ## Generic Assay\n-Generic Assay is a two dimensional matrix generalized to capture non-genetic measurements per sample. Instead of a gene per row and a sample per column, a Generic Assay file contains a generic entity per row and a sample per column. A generic entity is defined by the data curator and generally means something other than a gene. Some examples include, treatment response or mutational signatures. For each generic entity - sample pair, a real number represents a captured measurement.\n+Generic Assay is a two dimensional matrix generalized to capture non-genetic measurements per sample. Instead of a gene per row and a sample per column, a Generic Assay file contains a generic entity per row and a sample per column. A generic entity is defined by the data curator and generally means something other than a gene. Some examples include, treatment response or mutational signatures. For each generic entity - sample pair, a (real number / text / binary value) represents a captured measurement.\n \n ### Generic Assay meta file\n The generic assay metadata file should contain the following fields:\n ```\n cancer_study_identifier: Same value as specified in meta file of the study\n genetic_alteration_type: GENERIC_ASSAY\n generic_assay_type: <GENERIC_ASSAY_TYPE>, e.g., \"TREATMENT_RESPONSE\" or \"MUTATIONAL_SIGNATURE\"\n-datatype: LIMIT-VALUE\n+datatype: value from LIMIT-VALUE / CATEGORICAL / BINARY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2NzMwMA=="}, "originalCommit": {"oid": "09e7045d4268606e252bed1f8e68e01738138937"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3NTM5MQ==", "bodyText": "The failed tests seems to be not related to the changes in this PR. Can we merge?", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r512075391", "createdAt": "2020-10-26T15:59:53Z", "author": {"login": "rmadupuri"}, "path": "docs/File-Formats.md", "diffHunk": "@@ -1298,15 +1298,15 @@ The cells contain the p-value for the GSVA score: A real number, between 0.0 and\n YAML or JSON file which contains extra information about the cancer study. No compulsory fields are required for this file (free-form). To enable this feature, you need to add a line in the cancer study meta file with `tags_file:` followed the YAML/JSON file name. The information on the YAML or JSON file will be displayed in a table when mousing over a tag logo in the studies on the query page.\n \n ## Generic Assay\n-Generic Assay is a two dimensional matrix generalized to capture non-genetic measurements per sample. Instead of a gene per row and a sample per column, a Generic Assay file contains a generic entity per row and a sample per column. A generic entity is defined by the data curator and generally means something other than a gene. Some examples include, treatment response or mutational signatures. For each generic entity - sample pair, a real number represents a captured measurement.\n+Generic Assay is a two dimensional matrix generalized to capture non-genetic measurements per sample. Instead of a gene per row and a sample per column, a Generic Assay file contains a generic entity per row and a sample per column. A generic entity is defined by the data curator and generally means something other than a gene. Some examples include, treatment response or mutational signatures. For each generic entity - sample pair, a (real number / text / binary value) represents a captured measurement.\n \n ### Generic Assay meta file\n The generic assay metadata file should contain the following fields:\n ```\n cancer_study_identifier: Same value as specified in meta file of the study\n genetic_alteration_type: GENERIC_ASSAY\n generic_assay_type: <GENERIC_ASSAY_TYPE>, e.g., \"TREATMENT_RESPONSE\" or \"MUTATIONAL_SIGNATURE\"\n-datatype: LIMIT-VALUE\n+datatype: value from LIMIT-VALUE / CATEGORICAL / BINARY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2NzMwMA=="}, "originalCommit": {"oid": "09e7045d4268606e252bed1f8e68e01738138937"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3Njk2Nw==", "bodyText": "Yes, I think we can merge!", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r512076967", "createdAt": "2020-10-26T16:01:57Z", "author": {"login": "dippindots"}, "path": "docs/File-Formats.md", "diffHunk": "@@ -1298,15 +1298,15 @@ The cells contain the p-value for the GSVA score: A real number, between 0.0 and\n YAML or JSON file which contains extra information about the cancer study. No compulsory fields are required for this file (free-form). To enable this feature, you need to add a line in the cancer study meta file with `tags_file:` followed the YAML/JSON file name. The information on the YAML or JSON file will be displayed in a table when mousing over a tag logo in the studies on the query page.\n \n ## Generic Assay\n-Generic Assay is a two dimensional matrix generalized to capture non-genetic measurements per sample. Instead of a gene per row and a sample per column, a Generic Assay file contains a generic entity per row and a sample per column. A generic entity is defined by the data curator and generally means something other than a gene. Some examples include, treatment response or mutational signatures. For each generic entity - sample pair, a real number represents a captured measurement.\n+Generic Assay is a two dimensional matrix generalized to capture non-genetic measurements per sample. Instead of a gene per row and a sample per column, a Generic Assay file contains a generic entity per row and a sample per column. A generic entity is defined by the data curator and generally means something other than a gene. Some examples include, treatment response or mutational signatures. For each generic entity - sample pair, a (real number / text / binary value) represents a captured measurement.\n \n ### Generic Assay meta file\n The generic assay metadata file should contain the following fields:\n ```\n cancer_study_identifier: Same value as specified in meta file of the study\n genetic_alteration_type: GENERIC_ASSAY\n generic_assay_type: <GENERIC_ASSAY_TYPE>, e.g., \"TREATMENT_RESPONSE\" or \"MUTATIONAL_SIGNATURE\"\n-datatype: LIMIT-VALUE\n+datatype: value from LIMIT-VALUE / CATEGORICAL / BINARY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2NzMwMA=="}, "originalCommit": {"oid": "09e7045d4268606e252bed1f8e68e01738138937"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3464, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}