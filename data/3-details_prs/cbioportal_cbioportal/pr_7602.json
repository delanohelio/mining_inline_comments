{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNDQ3NzYy", "number": 7602, "title": "Fix error while querying for structural variants", "bodyText": "Fix #7545", "createdAt": "2020-06-10T13:15:29Z", "url": "https://github.com/cBioPortal/cbioportal/pull/7602", "merged": true, "mergeCommit": {"oid": "8a3806a205a3c9724cd2c21d0fd12706a4faebd9"}, "closed": true, "closedAt": "2020-06-16T15:18:22Z", "author": {"login": "kalletlak"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp6nn4gH2gAyNDMyNDQ3NzYyOmJjODRhOTZhMjBmMThkYTE4NjQyODNmNWQyYjhhY2NhMWJhMjRlMzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr11QjAFqTQzMTUxNDczMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bc84a96a20f18da1864283f5d2b8acca1ba24e32", "author": {"user": {"login": "kalletlak", "name": "Karthik K"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/bc84a96a20f18da1864283f5d2b8acca1ba24e32", "committedDate": "2020-06-10T14:34:45Z", "message": "Fix error while querying for structural variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88eb2cc0f074a3cc9749d3f3856e0bb02c322e07", "author": {"user": {"login": "kalletlak", "name": "Karthik K"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/88eb2cc0f074a3cc9749d3f3856e0bb02c322e07", "committedDate": "2020-06-10T13:00:56Z", "message": "Fix error while querying for structural variants"}, "afterCommit": {"oid": "bc84a96a20f18da1864283f5d2b8acca1ba24e32", "author": {"user": {"login": "kalletlak", "name": "Karthik K"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/bc84a96a20f18da1864283f5d2b8acca1ba24e32", "committedDate": "2020-06-10T14:34:45Z", "message": "Fix error while querying for structural variants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNDI1NjU5", "url": "https://github.com/cBioPortal/cbioportal/pull/7602#pullrequestreview-431425659", "createdAt": "2020-06-16T11:53:35Z", "commit": {"oid": "9aa17592475617f2255f8c17ab49168c81dbdf8d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMTo1MzozNlrOGkXyog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo0MDo0MFrOGkZXog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc5MTcxNA==", "bodyText": "I noticed that UniqueKeyBase implements Serializable, probably don't have to reimplement here.", "url": "https://github.com/cBioPortal/cbioportal/pull/7602#discussion_r440791714", "createdAt": "2020-06-16T11:53:36Z", "author": {"login": "n1zea144"}, "path": "model/src/main/java/org/cbioportal/model/StructuralVariant.java", "diffHunk": "@@ -29,8 +29,6 @@\n public class StructuralVariant extends UniqueKeyBase implements Serializable{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa17592475617f2255f8c17ab49168c81dbdf8d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc5MjMyNg==", "bodyText": "Check for valid entrezGeneIds before reference (should this be done upstream?).", "url": "https://github.com/cBioPortal/cbioportal/pull/7602#discussion_r440792326", "createdAt": "2020-06-16T11:54:38Z", "author": {"login": "n1zea144"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/StructuralVariantMapper.xml", "diffHunk": "@@ -112,15 +110,17 @@\n             <foreach item=\"item\" collection=\"molecularProfileIds\" open=\"(\" separator=\",\" close=\")\">\n                 #{item}\n             </foreach>\n-            AND (structural_variant.SITE1_ENTREZ_GENE_ID in \n-            <foreach item=\"item\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n-                #{item}\n-            </foreach>\n-            OR structural_variant.SITE2_ENTREZ_GENE_ID IN\n-            <foreach item=\"item\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n-                #{item}\n-            </foreach>\n-            )\n+            <if test=\"entrezGeneIds != null and !entrezGeneIds.isEmpty()\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa17592475617f2255f8c17ab49168c81dbdf8d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNTU2Nw==", "bodyText": "When a fusion is carried within a mutation record, the protein change contains the SV event.", "url": "https://github.com/cBioPortal/cbioportal/pull/7602#discussion_r440805567", "createdAt": "2020-06-16T12:19:22Z", "author": {"login": "n1zea144"}, "path": "service/src/main/java/org/cbioportal/service/util/MutationMapperUtils.java", "diffHunk": "@@ -31,7 +47,60 @@\n             structuralVariant.setSite1Position(fusion.getStartPosition().intValue());\n             structuralVariant.setComments(fusion.getKeyword());\n             structuralVariant.setNcbiBuild(fusion.getNcbiBuild());\n+            structuralVariant.setVariantClass(fusion.getMutationType());\n+            structuralVariant.setEventInfo(fusion.getProteinChange());\n+            if (fusion.getProteinChange() != null) {\n+                String proteinChange = fusion.getProteinChange();\n+                // only parse proteinChange when its not Fusion or SV\n+                if (!(proteinChange.equalsIgnoreCase(\"Fusion\") || proteinChange.equalsIgnoreCase(\"SV\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa17592475617f2255f8c17ab49168c81dbdf8d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxNzU3MA==", "bodyText": "Is this when a gene symbol is not found?  Should we note that site2 is not being set here?", "url": "https://github.com/cBioPortal/cbioportal/pull/7602#discussion_r440817570", "createdAt": "2020-06-16T12:40:40Z", "author": {"login": "n1zea144"}, "path": "service/src/main/java/org/cbioportal/service/util/MutationMapperUtils.java", "diffHunk": "@@ -31,7 +47,60 @@\n             structuralVariant.setSite1Position(fusion.getStartPosition().intValue());\n             structuralVariant.setComments(fusion.getKeyword());\n             structuralVariant.setNcbiBuild(fusion.getNcbiBuild());\n+            structuralVariant.setVariantClass(fusion.getMutationType());\n+            structuralVariant.setEventInfo(fusion.getProteinChange());\n+            if (fusion.getProteinChange() != null) {\n+                String proteinChange = fusion.getProteinChange();\n+                // only parse proteinChange when its not Fusion or SV\n+                if (!(proteinChange.equalsIgnoreCase(\"Fusion\") || proteinChange.equalsIgnoreCase(\"SV\"))) {\n+\n+                    Matcher matcher = r.matcher(proteinChange);\n+                    String site1GeneSymbol = null;\n+                    String site2GeneSymbol = null;\n+                    VariantType variantType = null;\n+\n+                    if (matcher.find()) {\n+                        if (EnumUtils.isValidEnum(VariantType.class, matcher.group(1).toUpperCase())) {\n+                            // if protein change contains only variant type. ex: INTRAGENIC\n+                            variantType = EnumUtils.getEnum(VariantType.class, matcher.group(1).toUpperCase());\n+\n+                        } else if (EnumUtils.isValidEnum(VariantType.class, matcher.group(2).toUpperCase())) {\n+                            // this is in format of <gene>-<variant-type>. ex: TUFT1-intragenic\n+                            site1GeneSymbol = matcher.group(1);\n+                            variantType = EnumUtils.getEnum(VariantType.class, matcher.group(2).toUpperCase());\n+                        } else {\n+                            // this is in format of <gene1>-<gene2>-<optional variant-type>. ex.\n+                            // ZSWIM4-SLC1A6 or ZNF595-TERT fusion\n+                            site1GeneSymbol = matcher.group(1);\n+                            site2GeneSymbol = matcher.group(2);\n+                            if (EnumUtils.isValidEnum(VariantType.class, matcher.group(3).toUpperCase())) {\n+                                variantType = EnumUtils.getEnum(VariantType.class, matcher.group(3).toUpperCase());\n+                            }\n+                        }\n+\n+                        // only set site2Gene if its not null\n+                        if (site2GeneSymbol != null) {\n+                            if (site1GeneSymbol != null && site1GeneSymbol.equalsIgnoreCase(site2GeneSymbol)) {\n+                                structuralVariant.setSite2EntrezGeneId(fusion.getEntrezGeneId());\n+                                structuralVariant.setSite2HugoSymbol(fusion.getGene().getHugoGeneSymbol());\n+                            } else {\n+                                try {\n+                                    Gene site2Gene = geneService.getGene(site2GeneSymbol);\n+                                    if (site2Gene != null) {\n+                                        structuralVariant.setSite2EntrezGeneId(site2Gene.getGeneticEntityId());\n+                                        structuralVariant.setSite2HugoSymbol(site2Gene.getHugoGeneSymbol());\n+                                    }\n+                                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa17592475617f2255f8c17ab49168c81dbdf8d"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa185ad0ac946910b5a185f2f67121ee1f6ebc4d", "author": {"user": {"login": "kalletlak", "name": "Karthik K"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/aa185ad0ac946910b5a185f2f67121ee1f6ebc4d", "committedDate": "2020-06-16T13:33:39Z", "message": "Add logic to parse fusion protein change"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9aa17592475617f2255f8c17ab49168c81dbdf8d", "author": {"user": {"login": "kalletlak", "name": "Karthik K"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/9aa17592475617f2255f8c17ab49168c81dbdf8d", "committedDate": "2020-06-11T00:58:02Z", "message": "Add logic to parse fusion protein change"}, "afterCommit": {"oid": "aa185ad0ac946910b5a185f2f67121ee1f6ebc4d", "author": {"user": {"login": "kalletlak", "name": "Karthik K"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/aa185ad0ac946910b5a185f2f67121ee1f6ebc4d", "committedDate": "2020-06-16T13:33:39Z", "message": "Add logic to parse fusion protein change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTE0NzMx", "url": "https://github.com/cBioPortal/cbioportal/pull/7602#pullrequestreview-431514731", "createdAt": "2020-06-16T13:42:04Z", "commit": {"oid": "aa185ad0ac946910b5a185f2f67121ee1f6ebc4d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo0MjowNFrOGkb6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDowNzo1M1rOGkdJoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1OTE0Nw==", "bodyText": "I checked, its over here ImportFusionData", "url": "https://github.com/cBioPortal/cbioportal/pull/7602#discussion_r440859147", "createdAt": "2020-06-16T13:42:04Z", "author": {"login": "n1zea144"}, "path": "service/src/main/java/org/cbioportal/service/util/MutationMapperUtils.java", "diffHunk": "@@ -31,7 +47,60 @@\n             structuralVariant.setSite1Position(fusion.getStartPosition().intValue());\n             structuralVariant.setComments(fusion.getKeyword());\n             structuralVariant.setNcbiBuild(fusion.getNcbiBuild());\n+            structuralVariant.setVariantClass(fusion.getMutationType());\n+            structuralVariant.setEventInfo(fusion.getProteinChange());\n+            if (fusion.getProteinChange() != null) {\n+                String proteinChange = fusion.getProteinChange();\n+                // only parse proteinChange when its not Fusion or SV\n+                if (!(proteinChange.equalsIgnoreCase(\"Fusion\") || proteinChange.equalsIgnoreCase(\"SV\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNTU2Nw=="}, "originalCommit": {"oid": "9aa17592475617f2255f8c17ab49168c81dbdf8d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3OTUyMA==", "bodyText": "This will go away once we move to a more structured SV format.", "url": "https://github.com/cBioPortal/cbioportal/pull/7602#discussion_r440879520", "createdAt": "2020-06-16T14:07:53Z", "author": {"login": "n1zea144"}, "path": "service/src/main/java/org/cbioportal/service/util/MutationMapperUtils.java", "diffHunk": "@@ -31,7 +47,60 @@\n             structuralVariant.setSite1Position(fusion.getStartPosition().intValue());\n             structuralVariant.setComments(fusion.getKeyword());\n             structuralVariant.setNcbiBuild(fusion.getNcbiBuild());\n+            structuralVariant.setVariantClass(fusion.getMutationType());\n+            structuralVariant.setEventInfo(fusion.getProteinChange());\n+            if (fusion.getProteinChange() != null) {\n+                String proteinChange = fusion.getProteinChange();\n+                // only parse proteinChange when its not Fusion or SV\n+                if (!(proteinChange.equalsIgnoreCase(\"Fusion\") || proteinChange.equalsIgnoreCase(\"SV\"))) {\n+\n+                    Matcher matcher = r.matcher(proteinChange);\n+                    String site1GeneSymbol = null;\n+                    String site2GeneSymbol = null;\n+                    VariantType variantType = null;\n+\n+                    if (matcher.find()) {\n+                        if (EnumUtils.isValidEnum(VariantType.class, matcher.group(1).toUpperCase())) {\n+                            // if protein change contains only variant type. ex: INTRAGENIC\n+                            variantType = EnumUtils.getEnum(VariantType.class, matcher.group(1).toUpperCase());\n+\n+                        } else if (EnumUtils.isValidEnum(VariantType.class, matcher.group(2).toUpperCase())) {\n+                            // this is in format of <gene>-<variant-type>. ex: TUFT1-intragenic\n+                            site1GeneSymbol = matcher.group(1);\n+                            variantType = EnumUtils.getEnum(VariantType.class, matcher.group(2).toUpperCase());\n+                        } else {\n+                            // this is in format of <gene1>-<gene2>-<optional variant-type>. ex.\n+                            // ZSWIM4-SLC1A6 or ZNF595-TERT fusion\n+                            site1GeneSymbol = matcher.group(1);\n+                            site2GeneSymbol = matcher.group(2);\n+                            if (EnumUtils.isValidEnum(VariantType.class, matcher.group(3).toUpperCase())) {\n+                                variantType = EnumUtils.getEnum(VariantType.class, matcher.group(3).toUpperCase());\n+                            }\n+                        }\n+\n+                        // only set site2Gene if its not null\n+                        if (site2GeneSymbol != null) {\n+                            if (site1GeneSymbol != null && site1GeneSymbol.equalsIgnoreCase(site2GeneSymbol)) {\n+                                structuralVariant.setSite2EntrezGeneId(fusion.getEntrezGeneId());\n+                                structuralVariant.setSite2HugoSymbol(fusion.getGene().getHugoGeneSymbol());\n+                            } else {\n+                                try {\n+                                    Gene site2Gene = geneService.getGene(site2GeneSymbol);\n+                                    if (site2Gene != null) {\n+                                        structuralVariant.setSite2EntrezGeneId(site2Gene.getGeneticEntityId());\n+                                        structuralVariant.setSite2HugoSymbol(site2Gene.getHugoGeneSymbol());\n+                                    }\n+                                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxNzU3MA=="}, "originalCommit": {"oid": "9aa17592475617f2255f8c17ab49168c81dbdf8d"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1616, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}