{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjgzMTkw", "number": 6999, "title": "Impl. of OpenID Connect token-based API access (a.k.a. DAT access with Keycloak)", "bodyText": "Background\ncBioPortal provides tokens, also referred to as Data Access Tokens or DATs, that allow programmatic access the cBioPortal API. These tokens, as well as user permissions, are managed by the cBioPortal instance.\nProblem\ncBioPortal can be configured to use an external Identity Provider (IDP), such as Keycloak, that handles user authentication and user authorization. This setup is not supported by current DAT implementation.\nSolution\nWe have extended the backend and frontend so that cBioPortal can:\n\nProvide an OpenID Connect offline token (=OAuth2 refresh token with scope offline_access) to the user. For more information see OpenID Connect docs.\nProvide programmatic access to the API with the offline token.\n\nNote: this PR to the backend requires changes to the cbioportal-frontend in PR #2982.\nDetails\n\nThe implementation from the viewpoint of the user is identical to the existing DAT implementation; no changes to the user experience.\nAlthough the offline token has a near infinite lifespan, the user permissions are fetched from the OpenID Connect client upon each request to the cBioPortal API. Changes in user permissions at the side of the IDP are instantaneous and do not require invalidation of the token. Offline tokens can be revoked at the level of the IDP at any time; removal of the token is effective immediately.\nResponsibility for triggering the download of the token has been moved to the cBioPortal backend (is handled by the frontend at present).\nIntegration test have been added that validate expected responses of the API endpoints when accessed with valid, invalid or no tokens (SAML/OAuth2 only).\nDocumentation has been updated to include instructions on the configuration of the OpenID Connect client in Keycloak.", "createdAt": "2020-01-14T15:05:36Z", "url": "https://github.com/cBioPortal/cbioportal/pull/6999", "merged": true, "mergeCommit": {"oid": "f78095942e3779485b4f2fb20e05470f7096aa83"}, "closed": true, "closedAt": "2020-08-10T15:37:17Z", "author": {"login": "pvannierop"}, "timelineItems": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMabtJAFqTM3MjMzNjY4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc71JP2gH2gAyMzYyNjgzMTkwOjc4MzI3OTIzZmNlNzYxOGJhMGFhNjY5OWU4YmNiY2QxZWZhYzMxZGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzM2Njgy", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#pullrequestreview-372336682", "createdAt": "2020-03-10T21:31:33Z", "commit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTozMTozM1rOF0hxTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjozODo0OVrOF0jgJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMzU2NA==", "bodyText": "I see this was removed from GlobalProperties.java above.  If I'm not mistaken, this makes the deployment less flexible in traditional environments where multiple web apps, with multiple authentication methods are running within a single tomcat instance.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r390623564", "createdAt": "2020-03-10T21:31:33Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-Users-via-Tokens.md", "diffHunk": "@@ -27,20 +28,27 @@ mysql> describe data_access_tokens;\n ```\n In addition to storing the token (the unique number), its creation and expiration dates along with the associated username is also stored prior to presenting it to the user.  When the data access token is presented in a subsequent web service request, the cBioPortal compares the token presented in the request against this table for validity.  If the token exists in the table and has not yet expired, the request will be satisfied.  The creation date is used by the cBioPortal when a user requests a new data access token.  Based on the server configuration, if the number of outstanding data access tokens together with this new one exceeds the number of allowable data access tokens per user, the cBioPortal may refuse to present a new one or it may invalidate the oldest one before presenting the new one to the user.\n \n+A third implementation makes use an external OAuth2-authentication provider and can integrate with single-sign on (SSO) solutions. The OAuth2 provider provides users with an __offline token__ that does not allow for direct access to protected cBioPortal resources. Instead, the offline token is passed to the OAuth2 authorization server that returns an __access token__, a short-lived permission to access cBioPortal resources. The access token contains up-to-date user permissions (the studies that the user is permitted to view). This implemetation ensures that any changes of user permissions registered at the authentication provider are effective immediately and do not relie on the expiration date of the token of the user. At any moment OAuth2 offline tokens can be revoked by the Authentication provider on a per-user basis. \n+\n+A step-by-step guide to configure KeyCloak to provide OAuth2 client functionality can be found in [Authenticating and Authorizing Users via keycloak](Authenticating-and-Authorizing-Users-via-keycloak.md#Add-client-for-OAuth2-token-based-data-access).\n+\n ### Modifying Configuration\n-The following properties must be present in portal.properties in order to allow direct access to the cBioPortal web service when login is required:\n+The token access implementation can be specified with the `dat.method` Java parameter at startup of cBioPortal. Allowed values are `jwt`, `uuid`, `oauth2` and `none`. When no parameter is specified, `none` will be used as default value and access using tokens is not possible. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNDA4Ng==", "bodyText": "I think it should read:\n\"A third implementation makes use of an external...\"\ns/relie/rely/", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r390624086", "createdAt": "2020-03-10T21:32:51Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-Users-via-Tokens.md", "diffHunk": "@@ -27,20 +28,27 @@ mysql> describe data_access_tokens;\n ```\n In addition to storing the token (the unique number), its creation and expiration dates along with the associated username is also stored prior to presenting it to the user.  When the data access token is presented in a subsequent web service request, the cBioPortal compares the token presented in the request against this table for validity.  If the token exists in the table and has not yet expired, the request will be satisfied.  The creation date is used by the cBioPortal when a user requests a new data access token.  Based on the server configuration, if the number of outstanding data access tokens together with this new one exceeds the number of allowable data access tokens per user, the cBioPortal may refuse to present a new one or it may invalidate the oldest one before presenting the new one to the user.\n \n+A third implementation makes use an external OAuth2-authentication provider and can integrate with single-sign on (SSO) solutions. The OAuth2 provider provides users with an __offline token__ that does not allow for direct access to protected cBioPortal resources. Instead, the offline token is passed to the OAuth2 authorization server that returns an __access token__, a short-lived permission to access cBioPortal resources. The access token contains up-to-date user permissions (the studies that the user is permitted to view). This implemetation ensures that any changes of user permissions registered at the authentication provider are effective immediately and do not relie on the expiration date of the token of the user. At any moment OAuth2 offline tokens can be revoked by the Authentication provider on a per-user basis. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNDkxMQ==", "bodyText": "Suggest rewording -\n\"For instance, to enable...\"", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r390624911", "createdAt": "2020-03-10T21:34:46Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-Users-via-Tokens.md", "diffHunk": "@@ -27,20 +28,27 @@ mysql> describe data_access_tokens;\n ```\n In addition to storing the token (the unique number), its creation and expiration dates along with the associated username is also stored prior to presenting it to the user.  When the data access token is presented in a subsequent web service request, the cBioPortal compares the token presented in the request against this table for validity.  If the token exists in the table and has not yet expired, the request will be satisfied.  The creation date is used by the cBioPortal when a user requests a new data access token.  Based on the server configuration, if the number of outstanding data access tokens together with this new one exceeds the number of allowable data access tokens per user, the cBioPortal may refuse to present a new one or it may invalidate the oldest one before presenting the new one to the user.\n \n+A third implementation makes use an external OAuth2-authentication provider and can integrate with single-sign on (SSO) solutions. The OAuth2 provider provides users with an __offline token__ that does not allow for direct access to protected cBioPortal resources. Instead, the offline token is passed to the OAuth2 authorization server that returns an __access token__, a short-lived permission to access cBioPortal resources. The access token contains up-to-date user permissions (the studies that the user is permitted to view). This implemetation ensures that any changes of user permissions registered at the authentication provider are effective immediately and do not relie on the expiration date of the token of the user. At any moment OAuth2 offline tokens can be revoked by the Authentication provider on a per-user basis. \n+\n+A step-by-step guide to configure KeyCloak to provide OAuth2 client functionality can be found in [Authenticating and Authorizing Users via keycloak](Authenticating-and-Authorizing-Users-via-keycloak.md#Add-client-for-OAuth2-token-based-data-access).\n+\n ### Modifying Configuration\n-The following properties must be present in portal.properties in order to allow direct access to the cBioPortal web service when login is required:\n+The token access implementation can be specified with the `dat.method` Java parameter at startup of cBioPortal. Allowed values are `jwt`, `uuid`, `oauth2` and `none`. When no parameter is specified, `none` will be used as default value and access using tokens is not possible. \n \n-**Property**: dat.method (required)\n-- **Description**: The desired data access token implementation.\n-- **Permissible Values**: jwt, uuid, none\n-- **Default Value**: none\n+To for instance enable the JWT token implementation (at `...` other startup parameters are omitted for clarity):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNzMxNg==", "bodyText": "Is this suppose to have a default value? Maybe we should move \"This value is specified by the authentication provider\" from the description to the Default Value field.  Same comment for ouath2 properties below.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r390627316", "createdAt": "2020-03-10T21:39:53Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-Users-via-Tokens.md", "diffHunk": "@@ -60,6 +68,36 @@ The following properties must be present in portal.properties in order to allow\n - **Permissible Values**: true or false\n - **Default Value**: true\n \n+**Property**: dat.oauth2.clientId (required only when dat.method = oauth2)\n+- **Description**: Identifier of the OAuth2 client of the authentication provider. This value is specified by the authentication provider.\n+- **Permissible Values**: string\n+- **Default Value**: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyOTc1NA==", "bodyText": "if this is only true when the method = jwt or uuid, we should say that.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r390629754", "createdAt": "2020-03-10T21:45:17Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-Users-via-Tokens.md", "diffHunk": "@@ -69,15 +107,15 @@ This will bring you to a section of the Web API page where you can download your\n \n ![](images/previews/download-dat-button.png)\n \n-The downloaded data access token file will contain the token, a creation date, and an expiration date:\n+The downloaded data access token file will contain the token, and, depending on the implementation, a creation and expiration date:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzNDM5Ng==", "bodyText": "Nice link back to Keycloak docs.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r390634396", "createdAt": "2020-03-10T21:55:35Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-Users-via-Tokens.md", "diffHunk": "@@ -27,20 +28,27 @@ mysql> describe data_access_tokens;\n ```\n In addition to storing the token (the unique number), its creation and expiration dates along with the associated username is also stored prior to presenting it to the user.  When the data access token is presented in a subsequent web service request, the cBioPortal compares the token presented in the request against this table for validity.  If the token exists in the table and has not yet expired, the request will be satisfied.  The creation date is used by the cBioPortal when a user requests a new data access token.  Based on the server configuration, if the number of outstanding data access tokens together with this new one exceeds the number of allowable data access tokens per user, the cBioPortal may refuse to present a new one or it may invalidate the oldest one before presenting the new one to the user.\n \n+A third implementation makes use an external OAuth2-authentication provider and can integrate with single-sign on (SSO) solutions. The OAuth2 provider provides users with an __offline token__ that does not allow for direct access to protected cBioPortal resources. Instead, the offline token is passed to the OAuth2 authorization server that returns an __access token__, a short-lived permission to access cBioPortal resources. The access token contains up-to-date user permissions (the studies that the user is permitted to view). This implemetation ensures that any changes of user permissions registered at the authentication provider are effective immediately and do not relie on the expiration date of the token of the user. At any moment OAuth2 offline tokens can be revoked by the Authentication provider on a per-user basis. \n+\n+A step-by-step guide to configure KeyCloak to provide OAuth2 client functionality can be found in [Authenticating and Authorizing Users via keycloak](Authenticating-and-Authorizing-Users-via-keycloak.md#Add-client-for-OAuth2-token-based-data-access).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzOTExMg==", "bodyText": "Suggest rewording  in first sentence - s/tokens/token/\nSuggest rewording in second sentence - \"Keycloak can be configured as an OAuth2...\"", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r390639112", "createdAt": "2020-03-10T22:07:27Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-and-Authorizing-Users-via-keycloak.md", "diffHunk": "@@ -252,6 +253,85 @@ If all goes well, the following should happen:\n \n If this does not happen, see the Troubleshooting Tips  below.\n \n+### Add client for OAuth2 token-based data access\n+With cBioPortal instances that require user authentication the API can be queried when including a data access tokens in the request header (see [Authenticating Users via Tokens](Authenticating-Users-via-Tokens.md)). When using the `oauth2` implementation, KeyCloak can be configured as OAuth2 authentication provider that distributes data access tokens to users and validates these tokens when used while querying the API. This feature is enabled by creating a `cbioportal_api` OpenID Connect client that has access to the user roles defined in the `cbioportal` SAML client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0MjQwOA==", "bodyText": "Nice summary", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r390642408", "createdAt": "2020-03-10T22:13:34Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-and-Authorizing-Users-via-keycloak.md", "diffHunk": "@@ -252,6 +253,85 @@ If all goes well, the following should happen:\n \n If this does not happen, see the Troubleshooting Tips  below.\n \n+### Add client for OAuth2 token-based data access\n+With cBioPortal instances that require user authentication the API can be queried when including a data access tokens in the request header (see [Authenticating Users via Tokens](Authenticating-Users-via-Tokens.md)). When using the `oauth2` implementation, KeyCloak can be configured as OAuth2 authentication provider that distributes data access tokens to users and validates these tokens when used while querying the API. This feature is enabled by creating a `cbioportal_api` OpenID Connect client that has access to the user roles defined in the `cbioportal` SAML client.\n+\n+1. Create a client with name `cbioportal_api`. Set _Client Protocol_ to `openid-connect`.\n+\n+![](images/previews/oauth2_client_1.png)\n+\n+2. On the configuration page of `cbioportal_api` client apply the following settings:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0ODIyOA==", "bodyText": "This may be version specific - running keycloak 9, I don't see this tab", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r390648228", "createdAt": "2020-03-10T22:28:38Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-and-Authorizing-Users-via-keycloak.md", "diffHunk": "@@ -252,6 +253,85 @@ If all goes well, the following should happen:\n \n If this does not happen, see the Troubleshooting Tips  below.\n \n+### Add client for OAuth2 token-based data access\n+With cBioPortal instances that require user authentication the API can be queried when including a data access tokens in the request header (see [Authenticating Users via Tokens](Authenticating-Users-via-Tokens.md)). When using the `oauth2` implementation, KeyCloak can be configured as OAuth2 authentication provider that distributes data access tokens to users and validates these tokens when used while querying the API. This feature is enabled by creating a `cbioportal_api` OpenID Connect client that has access to the user roles defined in the `cbioportal` SAML client.\n+\n+1. Create a client with name `cbioportal_api`. Set _Client Protocol_ to `openid-connect`.\n+\n+![](images/previews/oauth2_client_1.png)\n+\n+2. On the configuration page of `cbioportal_api` client apply the following settings:\n+\n+#### Settings tab\n+\n+| parameter        | value  | comment  |\n+| ------------- |:-------------:| -----:|\n+| Access Type      | confidential |  |\n+| Standard Flow Enabled      | ON      |   (default value) |\n+| Enabled      | ON      |   (default value) |\n+| Consent Required      | OFF        |   (default value) |\n+| Client Protocol      | openid-connect   |   (default value) |\n+| Access Type | confidential      |     (default value) |\n+| Standard Flow Enabled | ON      |     (default value) |\n+| Implicit Flow Enabled | OFF      |     (default value) |\n+| Direct Access Grants Enabled | OFF      |    |\n+| Service Accounts Enabled | OFF      |  (default value)   |\n+| Authorization Enabled | OFF      |  (default value)  |\n+| Valid Redirect URIs | _url_/api/data-access-token/oauth2  |  _url_ refers to base url of cBioPortal instance |\n+\n+![](images/previews/oauth2_client_3.png)\n+\n+#### Credentials tab", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1MTk0Mw==", "bodyText": "In this case isn't cbio is the name of the realm you created? I think the docs use cbioportal, but maybe you should use realm-name or something along those lines.  Relevant for some values below...", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r390651943", "createdAt": "2020-03-10T22:38:49Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-and-Authorizing-Users-via-keycloak.md", "diffHunk": "@@ -252,6 +253,85 @@ If all goes well, the following should happen:\n \n If this does not happen, see the Troubleshooting Tips  below.\n \n+### Add client for OAuth2 token-based data access\n+With cBioPortal instances that require user authentication the API can be queried when including a data access tokens in the request header (see [Authenticating Users via Tokens](Authenticating-Users-via-Tokens.md)). When using the `oauth2` implementation, KeyCloak can be configured as OAuth2 authentication provider that distributes data access tokens to users and validates these tokens when used while querying the API. This feature is enabled by creating a `cbioportal_api` OpenID Connect client that has access to the user roles defined in the `cbioportal` SAML client.\n+\n+1. Create a client with name `cbioportal_api`. Set _Client Protocol_ to `openid-connect`.\n+\n+![](images/previews/oauth2_client_1.png)\n+\n+2. On the configuration page of `cbioportal_api` client apply the following settings:\n+\n+#### Settings tab\n+\n+| parameter        | value  | comment  |\n+| ------------- |:-------------:| -----:|\n+| Access Type      | confidential |  |\n+| Standard Flow Enabled      | ON      |   (default value) |\n+| Enabled      | ON      |   (default value) |\n+| Consent Required      | OFF        |   (default value) |\n+| Client Protocol      | openid-connect   |   (default value) |\n+| Access Type | confidential      |     (default value) |\n+| Standard Flow Enabled | ON      |     (default value) |\n+| Implicit Flow Enabled | OFF      |     (default value) |\n+| Direct Access Grants Enabled | OFF      |    |\n+| Service Accounts Enabled | OFF      |  (default value)   |\n+| Authorization Enabled | OFF      |  (default value)  |\n+| Valid Redirect URIs | _url_/api/data-access-token/oauth2  |  _url_ refers to base url of cBioPortal instance |\n+\n+![](images/previews/oauth2_client_3.png)\n+\n+#### Credentials tab\n+Select `Client Id and Secret`. Take notice of the value of _Secret_ the secret field. This secret should be added to `portal.properties` file of the cBioPortal backend.\n+\n+| parameter        | value  | comment  |\n+| ------------- |:-------------:| -----:|\n+| Client Authenticator     | Client Id and Secret |   (default value) |\n+\n+![](images/previews/oauth2_client_6.png)\n+\n+#### Client Scopes tab\n+Keep only scopes `roles` and `offline_access` (remove all others).\n+\n+![](images/previews/oauth2_client_2.png)\n+\n+#### Mapper tab\n+Create a new _Audience_ mapper with name `cbioportal_api_audience`. This value will be used by the cBioPortal backend during validation of access tokens.\n+\n+| parameter        | value  | comment  |\n+| ------------- |:-------------:| -----:|\n+| Name       | cbioportal_api_audience |  |\n+| Mapper Type     | Audience      |   |\n+| Included Client Audience      | cbioportal_api      |    |\n+| Add to ID token      | OFF        |  (default value)  |\n+| Add to access token  | ON      |   (default value)  |\n+\n+![](images/previews/oauth2_client_4.png)\n+\n+#### Scope tab\n+Enable _Full Scope_. This setting will include the user roles defined in the `cbioportal` SAML client in access tokens distributed by the `cbioportal_api` client.\n+\n+| parameter        | value  | comment  |\n+| ------------- |:-------------:| -----:|\n+| Full Scope Allowed       | ON | (default value) |\n+\n+![](images/previews/oauth2_client_5.png)\n+\n+3. Add these parameters to `portal.properties` of the cBioPortal backend .\n+\n+| parameter        | value  | comment  |\n+| ------------- |:-------------:| -----:|\n+| dat.oauth2.clientId       | cbioportal_api |  |\n+| dat.oauth2.clientSecret    | ?      | see _Secret_ field in the _Credentials_ tab  |\n+| dat.oauth2.accessTokenUri     | _url_/auth/realms/cbio/protocol/openid-connect/token      |   _url_ refers to base url of the KeyCloak server |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzM4MTI2", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#pullrequestreview-374738126", "createdAt": "2020-03-14T16:33:56Z", "commit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNjozMzo1N1rOF2admQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxODo0Nzo0OFrOF2bBlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMDk4NQ==", "bodyText": "Ok, wanted to confirm that we didn't miss the following:\nSET storage_engine=INNODB\nSET SESSION sql_mode = 'ANSI_QUOTES'", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392600985", "createdAt": "2020-03-14T16:33:57Z", "author": {"login": "n1zea144"}, "path": "portal/pom.xml", "diffHunk": "@@ -210,6 +210,40 @@\n           </execution>\n         </executions>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-invoker-plugin</artifactId>\n+        <version>3.2.1</version>\n+        <configuration>\n+          <streamLogs>true</streamLogs>\n+          <projectsDirectory>src/integration-tests</projectsDirectory>\n+          <pomIncludes>\n+            <pomInclude>*/pom.xml</pomInclude>\n+          </pomIncludes>\n+          <cloneProjectsTo>${project.build.directory}/integration-tests</cloneProjectsTo>\n+          <skipInstallation>${skipTests}</skipInstallation>\n+          <skipInvocation>${skipTests}</skipInvocation>\n+          <goals>clean verify</goals>\n+          <environmentVariables>\n+              <CBIO_WAR_LOCATION>${project.build.directory}/cbioportal.war</CBIO_WAR_LOCATION>\n+              <!-- We neither create nor populate the database here. Instead we rely on DB created for the integration tests in the core module. -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMTQwOQ==", "bodyText": "s/cioportal/cbioportal/", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392601409", "createdAt": "2020-03-14T16:38:37Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/README.md", "diffHunk": "@@ -0,0 +1,22 @@\n+# saml-oauth2-setup\n+\n+Tests oauth2 security workflow of the API with SAML authentication method for the UI.\n+\n+- `OfflineTokenDownloadIntegrationTests` tests downloading an offline token to gain access to cioportal API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMTUxNQ==", "bodyText": "As you are the author of the PR, I'll give you the authorised and authorised :-)", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392601515", "createdAt": "2020-03-14T16:40:03Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/README.md", "diffHunk": "@@ -0,0 +1,22 @@\n+# saml-oauth2-setup\n+\n+Tests oauth2 security workflow of the API with SAML authentication method for the UI.\n+\n+- `OfflineTokenDownloadIntegrationTests` tests downloading an offline token to gain access to cioportal API.\n+- `Oauth2ResourceServerIntegrationTests` tests API access by different type of users (anonymous, non authorised and authorised).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMjQyNA==", "bodyText": "I'm not familiar with cargo, but it looks ilke unspecified it runs a Jetty 7.x container.  I think we should change it (if possible) to run the same container that webapp-runner runs:\nwebapp-runner config\ncc: @inodb", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392602424", "createdAt": "2020-03-14T16:53:39Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/README.md", "diffHunk": "@@ -0,0 +1,22 @@\n+# saml-oauth2-setup\n+\n+Tests oauth2 security workflow of the API with SAML authentication method for the UI.\n+\n+- `OfflineTokenDownloadIntegrationTests` tests downloading an offline token to gain access to cioportal API.\n+- `Oauth2ResourceServerIntegrationTests` tests API access by different type of users (anonymous, non authorised and authorised).\n+\n+## Start web container with cbioportal and saml IDP\n+\n+You can start tomcat to play with the setup with the following command (replace with your values):\n+\n+```$bash\n+ CBIO_TEST_DB_USR=<user> CBIO_TEST_DB_PSW=<psw> CBIO_TEST_DB_HOST=127.0.0.1:3306 CBIO_TEST_DB_NAME=cgds_test CBIO_TEST_DB_CONNECTION_STRING=jdbc:mysql://127.0.0.1:3306/cgds_test?sessionVariables=default_storage_engine=InnoDB CBIO_WAR_LOCATION=../../../target/cbioportal.war mvn org.codehaus.cargo:cargo-maven2-plugin:run --non-recursive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMzI0Mw==", "bodyText": "Add newline.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392603243", "createdAt": "2020-03-14T17:05:19Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/pom.xml", "diffHunk": "@@ -0,0 +1,171 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.mskcc.cbio</groupId>\n+    <artifactId>saml-oauth2-setup</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <packaging>pom</packaging>\n+\n+    <modules>\n+        <module>saml-idp</module>\n+    </modules>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.12</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.mock-server</groupId>\n+            <artifactId>mockserver-netty</artifactId>\n+            <version>5.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.mock-server</groupId>\n+            <artifactId>mockserver-client-java</artifactId>\n+            <version>5.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.5.1</version>\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                    <compilerArgs>\n+                        <arg>-parameters</arg>\n+                    </compilerArgs>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.cargo</groupId>\n+                <artifactId>cargo-maven2-plugin</artifactId>\n+                <version>1.7.8</version>\n+                <configuration>\n+                    <container>\n+                        <containerId>tomcat8x</containerId>\n+                        <type>embedded</type>\n+                        <systemProperties>\n+                            <authenticate>saml</authenticate>\n+                            <dat.method>oauth2</dat.method>\n+                            <!-- DB settings -->\n+                            <db.user>${env.CBIO_TEST_DB_USR}</db.user>\n+                            <db.password>${env.CBIO_TEST_DB_PSW}</db.password>\n+                            <db.host>${env.CBIO_TEST_DB_HOST}</db.host>\n+                            <db.portal_db_name>${env.CBIO_TEST_DB_NAME}</db.portal_db_name>\n+                            <db.connection_string>${env.CBIO_TEST_DB_CONNECTION_STRING}</db.connection_string>\n+                            <!-- SAML settings -->\n+                            <saml.keystore.location>file://${project.basedir}/testSamlKeystore.jks\n+                            </saml.keystore.location>\n+                            <saml.keystore.password>123456</saml.keystore.password>\n+                            <saml.keystore.private-key.key>secure-key</saml.keystore.private-key.key>\n+                            <saml.keystore.private-key.password>654321</saml.keystore.private-key.password>\n+                            <saml.keystore.default-key>secure-key</saml.keystore.default-key>\n+\n+                            <saml.idp.metadata.location>file://${project.basedir}/saml-idp-metadata.xml\n+                            </saml.idp.metadata.location>\n+                            <!--I had to use specificBinding because of this bug https://github.com/spring-projects/spring-security-saml/issues/460 -->\n+                            <saml.idp.comm.binding.settings>specificBinding</saml.idp.comm.binding.settings>\n+                            <saml.idp.comm.binding.type>bindings:HTTP-Redirect</saml.idp.comm.binding.type>\n+                            <saml.sp.metadata.entityid>cbioportal</saml.sp.metadata.entityid>\n+                            <saml.idp.metadata.entityid>spring.security.saml.idp.id</saml.idp.metadata.entityid>\n+                            <saml.idp.metadata.attribute.email>User.email</saml.idp.metadata.attribute.email>\n+                            <saml.custom.userservice.class>\n+                                org.cbioportal.security.spring.authentication.saml.SAMLUserDetailsServiceImpl\n+                            </saml.custom.userservice.class>\n+                            l\n+                            <saml.logout.local>false</saml.logout.local>\n+                            <!--FIXME Our test saml idp does not sing assertions for some reason-->\n+                            <saml.sp.metadata.wantAssertionSigned>false</saml.sp.metadata.wantAssertionSigned>\n+                            <saml.logout.url>/</saml.logout.url>\n+                            <!-- OAuth2 settings -->\n+                            <dat.oauth2.clientId>client_id</dat.oauth2.clientId>\n+                            <dat.oauth2.clientSecret>client_secret</dat.oauth2.clientSecret>\n+                            <dat.oauth2.issuer>token_issuer</dat.oauth2.issuer>\n+                            <dat.oauth2.accessTokenUri>http://localhost:8443/auth/realms/cbio/token\n+                            </dat.oauth2.accessTokenUri>\n+                            <dat.oauth2.userAuthorizationUri>http://localhost:8443/auth/realms/cbio/auth\n+                            </dat.oauth2.userAuthorizationUri>\n+                            <dat.oauth2.jwkUrl>http://localhost:8443/auth/realms/cbio/jwkUrl</dat.oauth2.jwkUrl>\n+                        </systemProperties>\n+                    </container>\n+                    <configuration>\n+                        <properties>\n+                            <cargo.servlet.port>8080</cargo.servlet.port>\n+                            <cargo.jvmargs>\n+                                -Xms2g\n+                                -Xmx4g\n+                            </cargo.jvmargs>\n+                        </properties>\n+                    </configuration>\n+                    <wait>false</wait>\n+                    <deployables>\n+                        <deployable>\n+                            <groupId>org.mskcc.cbio</groupId>\n+                            <artifactId>cbioportal</artifactId>\n+                            <type>war</type>\n+                            <location>${env.CBIO_WAR_LOCATION}</location>\n+                        </deployable>\n+                        <deployable>\n+                            <groupId>org.mskcc.cbio</groupId>\n+                            <artifactId>saml-idp</artifactId>\n+                            <type>war</type>\n+                            <location>${project.basedir}/saml-idp/target/saml-idp.war</location>\n+                        </deployable>\n+                    </deployables>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <id>start-server</id>\n+                        <phase>pre-integration-test</phase>\n+                        <goals>\n+                            <goal>start</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>stop-server</id>\n+                        <phase>post-integration-test</phase>\n+                        <goals>\n+                            <goal>stop</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>3.0.0-M4</version>\n+                <configuration>\n+                    <includes>\n+                        <include>**/*IntegrationTests</include>\n+                    </includes>\n+                    <trimStackTrace>false</trimStackTrace>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>integration-test</goal>\n+                            <goal>verify</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMzUyOA==", "bodyText": "The realm is hardcoded here, perhaps thats ok, but maybe we should agree on cbioportal which is used in the documentation?  Also, maybe I'll see below, but I haven't see where a default/test keycloak configuration is created.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392603528", "createdAt": "2020-03-14T17:09:13Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/pom.xml", "diffHunk": "@@ -0,0 +1,171 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.mskcc.cbio</groupId>\n+    <artifactId>saml-oauth2-setup</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <packaging>pom</packaging>\n+\n+    <modules>\n+        <module>saml-idp</module>\n+    </modules>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>4.12</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.mock-server</groupId>\n+            <artifactId>mockserver-netty</artifactId>\n+            <version>5.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.mock-server</groupId>\n+            <artifactId>mockserver-client-java</artifactId>\n+            <version>5.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.5.1</version>\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                    <compilerArgs>\n+                        <arg>-parameters</arg>\n+                    </compilerArgs>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.cargo</groupId>\n+                <artifactId>cargo-maven2-plugin</artifactId>\n+                <version>1.7.8</version>\n+                <configuration>\n+                    <container>\n+                        <containerId>tomcat8x</containerId>\n+                        <type>embedded</type>\n+                        <systemProperties>\n+                            <authenticate>saml</authenticate>\n+                            <dat.method>oauth2</dat.method>\n+                            <!-- DB settings -->\n+                            <db.user>${env.CBIO_TEST_DB_USR}</db.user>\n+                            <db.password>${env.CBIO_TEST_DB_PSW}</db.password>\n+                            <db.host>${env.CBIO_TEST_DB_HOST}</db.host>\n+                            <db.portal_db_name>${env.CBIO_TEST_DB_NAME}</db.portal_db_name>\n+                            <db.connection_string>${env.CBIO_TEST_DB_CONNECTION_STRING}</db.connection_string>\n+                            <!-- SAML settings -->\n+                            <saml.keystore.location>file://${project.basedir}/testSamlKeystore.jks\n+                            </saml.keystore.location>\n+                            <saml.keystore.password>123456</saml.keystore.password>\n+                            <saml.keystore.private-key.key>secure-key</saml.keystore.private-key.key>\n+                            <saml.keystore.private-key.password>654321</saml.keystore.private-key.password>\n+                            <saml.keystore.default-key>secure-key</saml.keystore.default-key>\n+\n+                            <saml.idp.metadata.location>file://${project.basedir}/saml-idp-metadata.xml\n+                            </saml.idp.metadata.location>\n+                            <!--I had to use specificBinding because of this bug https://github.com/spring-projects/spring-security-saml/issues/460 -->\n+                            <saml.idp.comm.binding.settings>specificBinding</saml.idp.comm.binding.settings>\n+                            <saml.idp.comm.binding.type>bindings:HTTP-Redirect</saml.idp.comm.binding.type>\n+                            <saml.sp.metadata.entityid>cbioportal</saml.sp.metadata.entityid>\n+                            <saml.idp.metadata.entityid>spring.security.saml.idp.id</saml.idp.metadata.entityid>\n+                            <saml.idp.metadata.attribute.email>User.email</saml.idp.metadata.attribute.email>\n+                            <saml.custom.userservice.class>\n+                                org.cbioportal.security.spring.authentication.saml.SAMLUserDetailsServiceImpl\n+                            </saml.custom.userservice.class>\n+                            l\n+                            <saml.logout.local>false</saml.logout.local>\n+                            <!--FIXME Our test saml idp does not sing assertions for some reason-->\n+                            <saml.sp.metadata.wantAssertionSigned>false</saml.sp.metadata.wantAssertionSigned>\n+                            <saml.logout.url>/</saml.logout.url>\n+                            <!-- OAuth2 settings -->\n+                            <dat.oauth2.clientId>client_id</dat.oauth2.clientId>\n+                            <dat.oauth2.clientSecret>client_secret</dat.oauth2.clientSecret>\n+                            <dat.oauth2.issuer>token_issuer</dat.oauth2.issuer>\n+                            <dat.oauth2.accessTokenUri>http://localhost:8443/auth/realms/cbio/token", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMzczMw==", "bodyText": "s/sing/sign/", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392603733", "createdAt": "2020-03-14T17:12:04Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/saml-idp/README.md", "diffHunk": "@@ -0,0 +1,18 @@\n+# saml-idp\n+\n+A test SAML Identity Provider. It is used by cbioportal integration tests.\n+It's modified version of [a saml IDP sample code](https://github.com/spring-projects/spring-security-saml/tree/develop/samples/boot/simple-identity-provider) of the spring security.\n+`application.yml` specify a test user email that is added to assertions.\n+\n+## License\n+\n+The sample code is distributed under Apache License, Version 2.0.\n+\n+## Known limitations\n+\n+- The IDP does not sign assertions. That's why we had to set the following flag for the test cbioportal application: \n+\n+```$xml\n+    <!--FIXME Our test saml idp does not sing assertions for some reason-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwMzc4NQ==", "bodyText": "I think there is an extra ' ' space between security. and application", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392603785", "createdAt": "2020-03-14T17:13:06Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/saml-idp/README.md", "diffHunk": "@@ -0,0 +1,18 @@\n+# saml-idp\n+\n+A test SAML Identity Provider. It is used by cbioportal integration tests.\n+It's modified version of [a saml IDP sample code](https://github.com/spring-projects/spring-security-saml/tree/develop/samples/boot/simple-identity-provider) of the spring security.\n+`application.yml` specify a test user email that is added to assertions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNDAxNA==", "bodyText": "More stylistic - but I think if there is more that one import from the same package, we should just use a wildcard.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392604014", "createdAt": "2020-03-14T17:16:24Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/saml-idp/src/main/java/sample/config/BeanConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package sample.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.core.userdetails.User;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNDEzOA==", "bodyText": "Should we use a real domain here?", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392604138", "createdAt": "2020-03-14T17:18:05Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/saml-idp/src/main/resources/application.yml", "diffHunk": "@@ -0,0 +1,78 @@\n+server:\n+  port: 8081\n+  servlet:\n+    context-path: /sample-idp\n+\n+logging:\n+  level:\n+    root: INFO\n+    org.springframework.web: INFO\n+    org.springframework.security: INFO\n+    org.springframework.security.saml: INFO\n+\n+user.email: jami@gmail.com", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNDcxOQ==", "bodyText": "Agrees with saml-oauth2-setup/pom.xml", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392604719", "createdAt": "2020-03-14T17:26:26Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2019 The Hyve B.V.\n+ * This code is licensed under the GNU Affero General Public License (AGPL),\n+ * version 3, or (at your option) any later version.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.mskcc.cbio.portal;\n+\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockserver.client.MockServerClient;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+import static org.mockserver.model.HttpRequest.request;\n+import static org.mockserver.model.HttpResponse.response;\n+import static org.mockserver.model.StringBody.subString;\n+import static org.mskcc.cbio.portal.TokenHelper.encodeWithoutSigning;\n+\n+\n+/**\n+ * Tests protection of API endpoints\n+ */\n+public class Oauth2ResourceServerIntegrationTests {\n+\n+    private static final String HOST = \"http://localhost:8080/cbioportal\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNDk5MQ==", "bodyText": "We're not actually connecting to Keycloak here, but maybe we should use cbioportal as the name here since it is used in the docs?", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392604991", "createdAt": "2020-03-14T17:30:36Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2019 The Hyve B.V.\n+ * This code is licensed under the GNU Affero General Public License (AGPL),\n+ * version 3, or (at your option) any later version.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.mskcc.cbio.portal;\n+\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockserver.client.MockServerClient;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+import static org.mockserver.model.HttpRequest.request;\n+import static org.mockserver.model.HttpResponse.response;\n+import static org.mockserver.model.StringBody.subString;\n+import static org.mskcc.cbio.portal.TokenHelper.encodeWithoutSigning;\n+\n+\n+/**\n+ * Tests protection of API endpoints\n+ */\n+public class Oauth2ResourceServerIntegrationTests {\n+\n+    private static final String HOST = \"http://localhost:8080/cbioportal\";\n+    private static final int IDP_PORT = 8443;\n+\n+    @Test\n+    public void testAccessForbiddenForAnonymousUser() throws IOException {\n+        HttpHelper.HttpResponse response = HttpHelper.sendGetRequest(HOST + \"/api/studies\", null, null);\n+        assertEquals(401, response.code);\n+    }\n+\n+    @Test\n+    public void testAccessForbiddenForFakeBearerToken() throws IOException {\n+        String offlineToken = \"{\\\"sub\\\": \\\"0000000000\\\"}\";\n+        String encodedOfflineToken = encodeWithoutSigning(offlineToken);\n+        new MockServerClient(\"localhost\", IDP_PORT).when(\n+            request()\n+                .withMethod(\"POST\")\n+                .withPath(\"/auth/realms/cbio/token\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNTA1Ng==", "bodyText": "Same comment as above - we're not actually connecting to Keycloak here, but maybe we should use cbioportal as the name here since it is used in the docs?", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392605056", "createdAt": "2020-03-14T17:31:20Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2019 The Hyve B.V.\n+ * This code is licensed under the GNU Affero General Public License (AGPL),\n+ * version 3, or (at your option) any later version.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.mskcc.cbio.portal;\n+\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockserver.client.MockServerClient;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+import static org.mockserver.model.HttpRequest.request;\n+import static org.mockserver.model.HttpResponse.response;\n+import static org.mockserver.model.StringBody.subString;\n+import static org.mskcc.cbio.portal.TokenHelper.encodeWithoutSigning;\n+\n+\n+/**\n+ * Tests protection of API endpoints\n+ */\n+public class Oauth2ResourceServerIntegrationTests {\n+\n+    private static final String HOST = \"http://localhost:8080/cbioportal\";\n+    private static final int IDP_PORT = 8443;\n+\n+    @Test\n+    public void testAccessForbiddenForAnonymousUser() throws IOException {\n+        HttpHelper.HttpResponse response = HttpHelper.sendGetRequest(HOST + \"/api/studies\", null, null);\n+        assertEquals(401, response.code);\n+    }\n+\n+    @Test\n+    public void testAccessForbiddenForFakeBearerToken() throws IOException {\n+        String offlineToken = \"{\\\"sub\\\": \\\"0000000000\\\"}\";\n+        String encodedOfflineToken = encodeWithoutSigning(offlineToken);\n+        new MockServerClient(\"localhost\", IDP_PORT).when(\n+            request()\n+                .withMethod(\"POST\")\n+                .withPath(\"/auth/realms/cbio/token\")\n+                .withHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n+                .withBody(subString(\"refresh_token=\" + URLEncoder.encode(encodedOfflineToken, \"UTF-8\"))))\n+            .respond(response().withStatusCode(401));\n+\n+        HttpHelper.HttpResponse response = HttpHelper.sendGetRequest(HOST + \"/api/studies\", encodedOfflineToken, null);\n+\n+        assertEquals(401, response.code);\n+    }\n+\n+    @Test\n+    public void testAccessForValidBearerToken() throws IOException, JSONException {\n+        String offlineTokenClaims = \"{\\\"sub\\\": \\\"1234567890\\\"}\";\n+        String encodedOfflineToken = encodeWithoutSigning(offlineTokenClaims);\n+        String accessTokenClaims = \"{\" +\n+            \"\\\"sub\\\": \\\"1234567890\\\",\" +\n+            \"\\\"name\\\": \\\"John Doe\\\",\" +\n+            \"\\\"resource_access\\\": {\\\"cbioportal\\\": {\\\"roles\\\": [\\\"cbioportal:study_tcga_pub\\\"]}}\" +\n+            \"}\";\n+        new MockServerClient(\"localhost\", IDP_PORT).when(\n+            request()\n+                .withMethod(\"POST\")\n+                .withPath(\"/auth/realms/cbio/token\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNTI3NQ==", "bodyText": "This has also been defined in Oauth2ResourceServerIntegrationTests.java\nOk to leave since this test will be static once complete, just a thought that maybe they should be place in common location.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392605275", "createdAt": "2020-03-14T17:34:49Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2019 The Hyve B.V.\n+ * This code is licensed under the GNU Affero General Public License (AGPL),\n+ * version 3, or (at your option) any later version.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.mskcc.cbio.portal;\n+\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.mockserver.client.MockServerClient;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.*;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+import static org.mockserver.model.HttpRequest.request;\n+import static org.mockserver.model.HttpResponse.response;\n+import static org.mockserver.model.StringBody.subString;\n+import static org.mskcc.cbio.portal.TokenHelper.encodeWithoutSigning;\n+\n+\n+/**\n+ * Tests SAML authentication and offline token download\n+ */\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class OfflineTokenDownloadIntegrationTests {\n+\n+    private static final String HOST = \"http://localhost:8080\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNTg5OQ==", "bodyText": "Nice piece of work here - I would say you have become an expert in SAML login flow ;-).  Just so I understand.  A user goes through an interactive login session to get the offline token for use in the future - correct?", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392605899", "createdAt": "2020-03-14T17:44:59Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2019 The Hyve B.V.\n+ * This code is licensed under the GNU Affero General Public License (AGPL),\n+ * version 3, or (at your option) any later version.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.mskcc.cbio.portal;\n+\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.mockserver.client.MockServerClient;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.*;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+import static org.mockserver.model.HttpRequest.request;\n+import static org.mockserver.model.HttpResponse.response;\n+import static org.mockserver.model.StringBody.subString;\n+import static org.mskcc.cbio.portal.TokenHelper.encodeWithoutSigning;\n+\n+\n+/**\n+ * Tests SAML authentication and offline token download\n+ */\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class OfflineTokenDownloadIntegrationTests {\n+\n+    private static final String HOST = \"http://localhost:8080\";\n+    private static final String CBIO_URL = HOST + \"/cbioportal\";\n+    private static final String IDP_URL = HOST + \"/saml-idp\";\n+\n+    private static final int IDP_PORT = 8443;\n+\n+    private static String cbioCookie;\n+    //FIXME Endpoints to download offline token do not initiate login with saml, their simply return 401 http code. Should it be this way? Add tests\n+\n+    @Test\n+    public void A_testReachHomePageOnlyAfterLogInWithSamlIdp() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNTkzNg==", "bodyText": "Same concern with realm here - should we use cbioportal and is it clear this realm setup is prerequisite to run test.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392605936", "createdAt": "2020-03-14T17:45:28Z", "author": {"login": "n1zea144"}, "path": "portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2019 The Hyve B.V.\n+ * This code is licensed under the GNU Affero General Public License (AGPL),\n+ * version 3, or (at your option) any later version.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.mskcc.cbio.portal;\n+\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.mockserver.client.MockServerClient;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.*;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+import static org.mockserver.model.HttpRequest.request;\n+import static org.mockserver.model.HttpResponse.response;\n+import static org.mockserver.model.StringBody.subString;\n+import static org.mskcc.cbio.portal.TokenHelper.encodeWithoutSigning;\n+\n+\n+/**\n+ * Tests SAML authentication and offline token download\n+ */\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class OfflineTokenDownloadIntegrationTests {\n+\n+    private static final String HOST = \"http://localhost:8080\";\n+    private static final String CBIO_URL = HOST + \"/cbioportal\";\n+    private static final String IDP_URL = HOST + \"/saml-idp\";\n+\n+    private static final int IDP_PORT = 8443;\n+\n+    private static String cbioCookie;\n+    //FIXME Endpoints to download offline token do not initiate login with saml, their simply return 401 http code. Should it be this way? Add tests\n+\n+    @Test\n+    public void A_testReachHomePageOnlyAfterLogInWithSamlIdp() throws IOException {\n+        //1. When we try to reach cbioportal\n+        String cbioPageUrl = CBIO_URL + \"/\";\n+        HttpHelper.HttpResponse discoveryEndpointRedirect = HttpHelper.sendGetRequest(cbioPageUrl, null, null);\n+        //1. Then we get redirect to the discovery page\n+        assertEquals(302, discoveryEndpointRedirect.code);\n+        String discoveryEndpointLocation = discoveryEndpointRedirect.headers.get(\"Location\").get(0);\n+        assertEquals(CBIO_URL + \"/saml/discovery?entityID=cbioportal&returnIDParam=idp\", discoveryEndpointLocation);\n+        //1. And we set the session cookie\n+        String cbioSetCookie = discoveryEndpointRedirect.headers.get(\"Set-Cookie\").get(0);\n+        assertTrue(cbioSetCookie.startsWith(\"JSESSIONID=\"));\n+        cbioCookie = cbioSetCookie.split(\";\")[0];\n+\n+        //2. When we make a request to the discovery endpoint\n+        HttpHelper.HttpResponse cbioIdpLoginRedirect = HttpHelper.sendGetRequest(discoveryEndpointLocation, null, cbioCookie);\n+        //2. Then it redirects us to the saml idp login screen of the cbioportal\n+        assertEquals(302, cbioIdpLoginRedirect.code);\n+        String cbioIdpLoginLocation = cbioIdpLoginRedirect.headers.get(\"Location\").get(0);\n+        assertEquals(CBIO_URL + \"/saml/login?disco=true&idp=spring.security.saml.idp.id\", cbioIdpLoginLocation);\n+\n+        //3. When we make a request to the cbio login page\n+        HttpHelper.HttpResponse idpRedirect = HttpHelper.sendGetRequest(cbioIdpLoginLocation, null, cbioCookie);\n+        //3. Then we get redirected to the saml idp site\n+        assertEquals(302, idpRedirect.code);\n+        String idpLocation = idpRedirect.headers.get(\"Location\").get(0);\n+        assertTrue(idpLocation.startsWith(IDP_URL + \"/saml/idp/SSO/alias/boot-sample-idp?\"));\n+\n+        //4. When we make a request to the idp page\n+        HttpHelper.HttpResponse idpLoginRedirect = HttpHelper.sendGetRequest(idpLocation, null, null);\n+        //4. Then we get redirected to the saml idp login page\n+        assertEquals(302, idpLoginRedirect.code);\n+        String idpLoginLocation = idpLoginRedirect.headers.get(\"Location\").get(0);\n+        assertTrue(idpLoginLocation.startsWith(IDP_URL + \"/login\"));\n+        //4. And we set the idp session cookie\n+        String idpSetCookie = idpLoginRedirect.headers.get(\"Set-Cookie\").get(0);\n+        assertTrue(idpSetCookie.startsWith(\"JSESSIONID=\"));\n+        String idpCookie = idpSetCookie.split(\";\")[0];\n+\n+        // We skipped requesting the login page for the brevity\n+\n+        //5. When we submit the login form\n+        HttpHelper.HttpResponse idpLoginRepsonse = HttpHelper.sendPostRequest(idpLoginLocation, null, idpCookie, \"username=user&password=password\");\n+        //5. Then we get redirected to the saml idp site\n+        assertEquals(302, idpLoginRepsonse.code);\n+        String jumpToServiceProviderPageLocation = idpLoginRepsonse.headers.get(\"Location\").get(0);\n+        assertTrue(jumpToServiceProviderPageLocation.startsWith(IDP_URL + \"/saml/idp/SSO/alias/boot-sample-idp?\"));\n+        //5. And we set the idp session cookie\n+        idpSetCookie = idpLoginRepsonse.headers.get(\"Set-Cookie\").get(0);\n+        assertTrue(idpSetCookie.startsWith(\"JSESSIONID=\"));\n+        idpCookie = idpSetCookie.split(\";\")[0];\n+\n+        //6. When we reach the jump page\n+        HttpHelper.HttpResponse jumpToServiceProviderPageRepsonse = HttpHelper.sendGetRequest(jumpToServiceProviderPageLocation, null, idpCookie);\n+        //6. Then we get html page with javascript that redirects us to the service provider\n+        assertEquals(200, jumpToServiceProviderPageRepsonse.code);\n+        String jumpPage = jumpToServiceProviderPageRepsonse.body;\n+        assertTrue(jumpPage.contains(\"form action=\\\"\" + CBIO_URL + \"/saml/SSO\\\"\"));\n+        String samlResponseValueStart = \"name=\\\"SAMLResponse\\\" value=\\\"\";\n+        assertTrue(jumpPage.contains(samlResponseValueStart));\n+        int start = jumpPage.indexOf(samlResponseValueStart);\n+        int end = jumpPage.indexOf(\"\\\"\", start + samlResponseValueStart.length());\n+        String samlResponse = jumpPage.substring(start + samlResponseValueStart.length(), end);\n+\n+        //7. When we submit the assertions to the consumer\n+        HttpHelper.HttpResponse requestAssertionsConsumerRepsonse = HttpHelper\n+            .sendPostRequest(CBIO_URL + \"/saml/SSO\", null, cbioCookie,\n+                \"SAMLResponse=\" + URLEncoder.encode(samlResponse, \"UTF-8\"));\n+        //7. Then we get redirected to originally requested page\n+        assertEquals(302, requestAssertionsConsumerRepsonse.code);\n+        String dataAccessTokenLocation = requestAssertionsConsumerRepsonse.headers.get(\"Location\").get(0);\n+        assertEquals(cbioPageUrl, dataAccessTokenLocation);\n+\n+        //8. Finally we can reach the home page\n+        HttpHelper.HttpResponse homePageResponse = HttpHelper.sendGetRequest(cbioPageUrl, null, cbioCookie);\n+        assertEquals(200, homePageResponse.code);\n+        assertFalse(homePageResponse.body.isEmpty());\n+\n+    }\n+\n+    @Test\n+    public void B_testDownloadOfflineToken() throws IOException {\n+        String offlineTokenClaims = \"{\\\"sub\\\": \\\"1234567890\\\"}\";\n+        String encodedOfflineTokenClaims = encodeWithoutSigning(offlineTokenClaims);\n+        new MockServerClient(\"localhost\", IDP_PORT).when(\n+            request()\n+                .withMethod(\"POST\")\n+                .withPath(\"/auth/realms/cbio/token\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjM4NA==", "bodyText": "Yes, removed from GlobalProperties.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392606384", "createdAt": "2020-03-14T17:51:50Z", "author": {"login": "n1zea144"}, "path": "portal/src/main/webapp/WEB-INF/web.xml", "diffHunk": "@@ -23,7 +23,7 @@\n     <!-- dbcp profile is defined here to prevent exceptions during war deployment -->\n     <context-param>\n         <param-name>spring.profiles.active</param-name>\n-        <param-value>${dbconnector:dbcp},${authenticate},${google.analytics.tracking:ga-api-tracking-disabled}</param-value>\n+        <param-value>${dbconnector:dbcp},${authenticate},${google.analytics.tracking:ga-api-tracking-disabled},dat.${dat.method:none}</param-value>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjQ4MA==", "bodyText": "Whats the reasoning behind removing this?", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392606480", "createdAt": "2020-03-14T17:53:28Z", "author": {"login": "n1zea144"}, "path": "portal/src/main/webapp/config_service.jsp", "diffHunk": "@@ -31,7 +31,6 @@\n         String[] propNameArray = {\n             \"app.version\",\n             \"app.name\",\n-            \"dat.uuid.revoke_other_tokens\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjkwMg==", "bodyText": "Have you confirmed that previous modes of token access still work?", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392606902", "createdAt": "2020-03-14T17:58:55Z", "author": {"login": "n1zea144"}, "path": "security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/TokenAuthenticationFilter.java", "diffHunk": "@@ -65,23 +58,8 @@\n @Component\n public class TokenAuthenticationFilter extends AbstractAuthenticationProcessingFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNzExMQ==", "bodyText": "Looks to be related to code removed from TokenAuthenticationFilter?", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392607111", "createdAt": "2020-03-14T18:01:59Z", "author": {"login": "n1zea144"}, "path": "security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/TokenUserDetailsAuthenticationProvider.java", "diffHunk": "@@ -46,18 +46,22 @@\n  */\n public class TokenUserDetailsAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {\n \n+    private static final Log LOG = LogFactory.getLog(TokenUserDetailsAuthenticationProvider.class);\n+\n     private PortalUserDetailsService userDetailsService;\n \n     public TokenUserDetailsAuthenticationProvider(PortalUserDetailsService userDetailsService) {\n         this.userDetailsService = userDetailsService;\n     }\n \n-    private static final Log LOG = LogFactory.getLog(TokenUserDetailsAuthenticationProvider.class);\n+    @Override\n+    public boolean supports(Class<?> authentication) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNzYzNw==", "bodyText": "I don't think we should hardcode the client id here.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392607637", "createdAt": "2020-03-14T18:10:45Z", "author": {"login": "n1zea144"}, "path": "security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2TokenAuthenticationProvider.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright (c) 2020 The Hyve B.V.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.cbioportal.security.spring.authentication.token.oauth2;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.AuthenticationProvider;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.jwt.Jwt;\n+import org.springframework.security.jwt.JwtHelper;\n+import org.springframework.stereotype.Component;\n+\n+@Component(\"oauth2TokenAuthenticationProvider\")\n+public class OAuth2TokenAuthenticationProvider implements AuthenticationProvider {\n+\n+    @Autowired\n+    OAuth2TokenRefreshRestTemplate tokenRefreshRestTemplate;\n+\n+    @Override\n+    public boolean supports(Class<?> authentication) {\n+        return authentication.isAssignableFrom(OAuth2BearerAuthenticationToken.class);\n+    }\n+\n+    @Override\n+    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n+\n+        String offlineToken = (String) ((OAuth2BearerAuthenticationToken) authentication).getCredentials();\n+        \n+        // Note: validity of the offline token is not checked in cBioPortal \n+        // backend, is handeled by the OAuth2 authentication server.\n+\n+        // request an access token from the OAuth2 identity provider\n+        final String accessToken = tokenRefreshRestTemplate.getAccessToken(offlineToken);\n+        \n+        Set<GrantedAuthority> authorities = extractAuthorities(accessToken);\n+\n+        return new OAuth2BearerAuthenticationToken(authentication.getPrincipal(), authorities);\n+    }\n+\n+    private Set<GrantedAuthority> extractAuthorities(final String token) throws BadCredentialsException {\n+        final Jwt tokenDecoded = JwtHelper.decode(token);\n+        final String claims = tokenDecoded.getClaims();\n+        final Set<GrantedAuthority> authorities;\n+        try {\n+            JsonNode claimsMap = new ObjectMapper().readTree(claims);\n+\n+            // Read roles/authorities from cbioportal client (not cbioportal_api client!).\n+            // Note: For this to work \"Full scope allowed\" must be enabled for\n+            //       the cbioportal_api client in the KeyCloak configuration.\n+            //       This ensures that the cbioportal_api client can add\n+            //       cbioportal studies/roles to the JWT token.\n+            String cbioportalClientId = \"cbioportal\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwODIwMQ==", "bodyText": "Reviewing under the assumption that all previous token access implementations continue to work after this and all others changes to existing codebase.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392608201", "createdAt": "2020-03-14T18:19:07Z", "author": {"login": "n1zea144"}, "path": "security/security-spring/src/main/resources/applicationContext-security.xml", "diffHunk": "@@ -28,35 +28,49 @@\n     -->\n \n     <!-- Data Access Tokens beans -->\n+\n+        <!-- Data access token (dat) profiles\n+            Spring profiles determine the active implementation of data access tokens. Profiles are selected through the java\n+            system property \"dat.method\" (e.g. java -Dauthenticate=jwt). The default dat method is \"none\"; this means that the\n+            portal instance does not distribute tokens to users or accept tokens for data access.\n+            The following profiles are available:\n+                \"none\"      - dat is not supported by cBioPortal instance (default)\n+                \"jwt\"       - JSON Web Token implementation\n+                \"uuid\"      - Universally Unique IDentifier implementation\n+                \"oauth2\"    - OAuth2 protocol implementation. Requires an external OAuth2/OpenID Connect Authentication provider.\n+        -->\n+\n+    <!-- make sure externally defined beans are added to the spring context -->\n+    <context:component-scan base-package=\"org.cbioportal.security.spring.authentication.token.oauth2\"/>\n+\n     <b:bean id=\"tokenAuthenticationFilter\" class=\"org.cbioportal.security.spring.authentication.token.TokenAuthenticationFilter\">\n         <b:property name=\"authenticationManager\" ref=\"tokenAuthenticationManager\" />\n         <b:property name=\"authenticationSuccessHandler\" ref=\"tokenSuccessRedirectHandler\"/>\n     </b:bean>\n \n-    <!-- Choose a supported Data Access Token method implementation [uuid, jwt, none (default)] by setting value of dat.method in portal.properties.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwOTAzMQ==", "bodyText": "Not much code duplication and should not be modified going forward, but pointing out this is same implementation as in JwtDataAccessTokenServiceImpl.java", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392609031", "createdAt": "2020-03-14T18:31:13Z", "author": {"login": "n1zea144"}, "path": "service/src/main/java/org/cbioportal/service/impl/UuidDataAccessTokenServiceImpl.java", "diffHunk": "@@ -173,4 +182,20 @@ private void revokeOldestDataAccessTokenForUsername(String username) {\n         DataAccessToken oldestDataAccessToken = allDataAccessTokens.get(0);\n         dataAccessTokenRepository.removeDataAccessToken(oldestDataAccessToken.getToken());\n     }\n+\n+    @Override\n+    public Authentication createAuthenticationRequest(String token) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwOTE4NA==", "bodyText": "Agrees with Authenticating-Users-via-Tokens.md", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392609184", "createdAt": "2020-03-14T18:33:45Z", "author": {"login": "n1zea144"}, "path": "src/main/resources/portal.properties.EXAMPLE", "diffHunk": "@@ -133,12 +134,19 @@ ldap.attributes.email=mail\n \n # data access token settings\n dat.unauth_users=\n-dat.method=none\n dat.ttl_seconds=2592000\n dat.uuid.max_number_per_user=1\n dat.uuid.revoke_other_tokens=true\n dat.jwt.secret_key=\n \n+# OAuth2 token data access settings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwOTgyMw==", "bodyText": "I imagine there is a corresponding frontend change to support these endpoints?", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392609823", "createdAt": "2020-03-14T18:42:48Z", "author": {"login": "n1zea144"}, "path": "web/src/main/java/org/cbioportal/web/OAuth2DataAccessTokenController.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright (c) 2020 The Hyve B.V.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.cbioportal.web;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.cbioportal.model.DataAccessToken;\n+import org.cbioportal.service.DataAccessTokenService;\n+import org.cbioportal.service.exception.DataAccessTokenProhibitedUserException;\n+import org.cbioportal.web.config.annotation.InternalApi;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.validation.annotation.Validated;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.HttpClientErrorException;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiParam;\n+\n+@InternalApi\n+@RestController\n+@Validated\n+@Api(tags = \"Data Access Tokens\", description = \" \")\n+@Profile(\"dat.oauth2\")\n+public class OAuth2DataAccessTokenController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMDE5Ng==", "bodyText": "I wonder if we should put \"offline\" somewhere in this url to make it clear in the swagger (or use @ApiOperation annotations?)", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392610196", "createdAt": "2020-03-14T18:47:48Z", "author": {"login": "n1zea144"}, "path": "web/src/main/java/org/cbioportal/web/OAuth2DataAccessTokenController.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright (c) 2020 The Hyve B.V.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.cbioportal.web;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.cbioportal.model.DataAccessToken;\n+import org.cbioportal.service.DataAccessTokenService;\n+import org.cbioportal.service.exception.DataAccessTokenProhibitedUserException;\n+import org.cbioportal.web.config.annotation.InternalApi;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.validation.annotation.Validated;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.HttpClientErrorException;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiParam;\n+\n+@InternalApi\n+@RestController\n+@Validated\n+@Api(tags = \"Data Access Tokens\", description = \" \")\n+@Profile(\"dat.oauth2\")\n+public class OAuth2DataAccessTokenController {\n+\n+    @Value(\"${dat.oauth2.userAuthorizationUri}\")\n+    private String userAuthorizationUri;\n+\n+    @Value(\"${dat.oauth2.redirectUri}\")\n+    private String redirectUri;\n+\n+    @Value(\"${dat.oauth2.clientId}\")\n+    private String clientId;\n+\n+    @Autowired\n+    private DataAccessTokenService tokenService;\n+    private String authorizationUrl;\n+    private String fileName = \"cbioportal_data_access_token.txt\";\n+\n+    @PostConstruct\n+    public void postConstruct() throws UnsupportedEncodingException {\n+        \n+        String scopeEncoded = URLEncoder.encode(\"openid offline_access\", StandardCharsets.UTF_8.toString());\n+        String clientIdEncoded = URLEncoder.encode(clientId, StandardCharsets.UTF_8.toString());\n+        String redirUriEncode = URLEncoder.encode(redirectUri, StandardCharsets.UTF_8.toString());\n+\n+        authorizationUrl = String.format(\"%s?response_type=%s&scope=%s&client_id=%s&redirect_uri=%s\", userAuthorizationUri, \"code\", scopeEncoded, clientIdEncoded, redirUriEncode);\n+    }\n+\n+    // this is the entrypoint for the cBioPortal frontend to download a single user token\n+    @RequestMapping(\"/data-access-token\")\n+    public ResponseEntity<String> downloadDataAccessToken(Authentication authentication, \n+        HttpServletRequest request, HttpServletResponse response) throws IOException {\n+\n+        // redirect to authentication endpoint\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.add(\"Location\", authorizationUrl);\n+        return new ResponseEntity<>(headers, HttpStatus.FOUND);\n+\n+    }\n+\n+    // retrieve and trigger download OAuth2 offline token\n+    @RequestMapping(\"/data-access-token/oauth2\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 112}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/e377c2c665c6fc02949ae6dcba10722272f8c12e", "committedDate": "2020-01-14T14:13:49Z", "message": "Add copyright statements"}, "afterCommit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/fd3f6e5111ffed07d6eba8975910bdc52743d9e2", "committedDate": "2020-03-17T14:05:40Z", "message": "Create token beans from portal.properties\n\nControlled by env.var before"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NTQ2OTgx", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#pullrequestreview-378546981", "createdAt": "2020-03-20T14:47:08Z", "commit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDo0NzowOFrOF5Wu7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDo1NDozMVrOF5XDaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4NTYxNA==", "bodyText": "@pvannierop Am I misunderstanding something here?", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r395685614", "createdAt": "2020-03-20T14:47:08Z", "author": {"login": "n1zea144"}, "path": "security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2TokenAuthenticationProvider.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright (c) 2020 The Hyve B.V.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.cbioportal.security.spring.authentication.token.oauth2;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.AuthenticationProvider;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.jwt.Jwt;\n+import org.springframework.security.jwt.JwtHelper;\n+import org.springframework.stereotype.Component;\n+\n+@Component(\"oauth2TokenAuthenticationProvider\")\n+public class OAuth2TokenAuthenticationProvider implements AuthenticationProvider {\n+\n+    @Autowired\n+    OAuth2TokenRefreshRestTemplate tokenRefreshRestTemplate;\n+\n+    @Override\n+    public boolean supports(Class<?> authentication) {\n+        return authentication.isAssignableFrom(OAuth2BearerAuthenticationToken.class);\n+    }\n+\n+    @Override\n+    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n+\n+        String offlineToken = (String) ((OAuth2BearerAuthenticationToken) authentication).getCredentials();\n+        \n+        // Note: validity of the offline token is not checked in cBioPortal \n+        // backend, is handeled by the OAuth2 authentication server.\n+\n+        // request an access token from the OAuth2 identity provider\n+        final String accessToken = tokenRefreshRestTemplate.getAccessToken(offlineToken);\n+        \n+        Set<GrantedAuthority> authorities = extractAuthorities(accessToken);\n+\n+        return new OAuth2BearerAuthenticationToken(authentication.getPrincipal(), authorities);\n+    }\n+\n+    private Set<GrantedAuthority> extractAuthorities(final String token) throws BadCredentialsException {\n+        final Jwt tokenDecoded = JwtHelper.decode(token);\n+        final String claims = tokenDecoded.getClaims();\n+        final Set<GrantedAuthority> authorities;\n+        try {\n+            JsonNode claimsMap = new ObjectMapper().readTree(claims);\n+\n+            // Read roles/authorities from cbioportal client (not cbioportal_api client!).\n+            // Note: For this to work \"Full scope allowed\" must be enabled for\n+            //       the cbioportal_api client in the KeyCloak configuration.\n+            //       This ensures that the cbioportal_api client can add\n+            //       cbioportal studies/roles to the JWT token.\n+            String cbioportalClientId = \"cbioportal\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNzYzNw=="}, "originalCommit": {"oid": "e377c2c665c6fc02949ae6dcba10722272f8c12e"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4NjI5OA==", "bodyText": "Can we add a newline here?", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r395686298", "createdAt": "2020-03-20T14:48:08Z", "author": {"login": "n1zea144"}, "path": "security/security-spring/src/test/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2DataAccessTokenServiceImplTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright (c) 2020 The Hyve B.V.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.cbioportal.security.spring.authentication.token.oauth2;\n+\n+import static org.cbioportal.security.spring.authentication.token.oauth2.OAuth2TokenTestUtils.createJwt;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import org.cbioportal.model.DataAccessToken;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+\n+@TestPropertySource(\n+    properties = {\n+        \"dat.method = oauth2\",\n+        \"dat.oauth2.issuer = my_issuer\",\n+        \"dat.oauth2.clientId = my_client_id\"\n+    }\n+)\n+@ContextConfiguration(classes=OAuth2DataAccessTokenServiceImplTestConfiguration.class)\n+@RunWith(SpringRunner.class)\n+public class OAuth2DataAccessTokenServiceImplTest {\n+\n+    static final String ACCESS_CODE_VALID = \"dummy_valid_access_code\";\n+    static final String ACCESS_CODE_INVALID = \"dummy_invalid_access_code\";\n+    static final String ACCESS_TOKEN = \"dummy_access_token\";\n+\n+    @Value(\"${dat.oauth2.issuer:}\")\n+    private String issuer;\n+\n+    @Value(\"${dat.oauth2.clientId:}\")\n+    private String clientId;\n+\n+    @Autowired\n+    OAuth2DataAccessTokenServiceImpl service;\n+\n+    @Test\n+    public void testCreateDataAccessTokenSuccess() {\n+        DataAccessToken accessToken = service.createDataAccessToken(ACCESS_CODE_VALID);\n+        assertEquals(accessToken.getToken(), ACCESS_TOKEN);\n+    }\n+\n+    @Test(expected = BadCredentialsException.class)\n+    public void testCreateDataAccessTokenFailure() {\n+        service.createDataAccessToken(ACCESS_CODE_INVALID);\n+    }\n+\n+    @Test\n+    public void testGetUsernameSuccess() {\n+        String token = createJwt(\"{\\\"sub\\\":\\\"me\\\"}\");\n+        assertEquals(service.getUsername(token), \"me\");\n+    }\n+\n+    @Test(expected = BadCredentialsException.class)\n+    public void testGetUsernameFailure() {\n+        String token = createJwt(\"{}\");\n+        service.getUsername(token);\n+    }\n+\n+    @Test\n+    public void testCreateAuthenticationRequestSuccess() {\n+        String token = createJwt(\"{\\\"sub\\\":\\\"me\\\"}\");\n+        Authentication auth = service.createAuthenticationRequest(token);\n+        assertEquals(auth.getPrincipal(), \"me\");\n+        assertEquals(auth.getCredentials(), token);\n+    }\n+\n+    @Test(expected = BadCredentialsException.class)\n+    public void testCreateAuthenticationRequestFailure() {\n+        String token = createJwt(\"{}\");\n+        service.createAuthenticationRequest(token);\n+    }\n+\n+    @Test\n+    public void testGetExpirtaionReturnsNull() {\n+        assertNull(service.getExpiration(\"dummy_token\"));\n+    }\n+\n+    @Test\n+    public void testIsValidSuccess() {\n+        String json = new StringBuilder()\n+            .append(\"{\")\n+                .append(\"\\\"aud\\\":\\\"\").append(clientId).append(\"\\\",\")\n+                .append(\"\\\"iss\\\":\\\"\").append(issuer).append(\"\\\"\")\n+            .append(\"}\")\n+            .toString();\n+\n+        String token = createJwt(json);\n+\n+        assert(service.isValid(token));\n+    }\n+\n+    @Test(expected = BadCredentialsException.class)\n+    public void testIsValidFailureAud() {\n+        String json = new StringBuilder()\n+            .append(\"{\")\n+                .append(\"\\\"aud\\\":\\\"\").append(\"invalid_client_id\").append(\"\\\",\")\n+                .append(\"\\\"iss\\\":\\\"\").append(issuer).append(\"\\\"\")\n+            .append(\"}\")\n+            .toString();\n+\n+        String token = createJwt(json);\n+\n+        service.isValid(token);\n+    }\n+\n+    @Test(expected = BadCredentialsException.class)\n+    public void testIsValidFailureIss() {\n+        String json = new StringBuilder()\n+            .append(\"{\")\n+                .append(\"\\\"aud\\\":\\\"\").append(clientId).append(\"\\\",\")\n+                .append(\"\\\"iss\\\":\\\"\").append(\"invalid_issuer\").append(\"\\\"\")\n+            .append(\"}\")\n+            .toString();\n+\n+        String token = createJwt(json);\n+\n+        service.isValid(token);\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4ODY4NQ==", "bodyText": "Interesting!", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r395688685", "createdAt": "2020-03-20T14:51:31Z", "author": {"login": "n1zea144"}, "path": "web/src/main/java/org/cbioportal/web/DataAccessTokenController.java", "diffHunk": "@@ -1,98 +1,97 @@\n /*\n- * This file is part of cBioPortal.\n- *\n- * cBioPortal is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as\n- * published by the Free Software Foundation, either version 3 of the\n- * License.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+* This file is part of cBioPortal.\n+*\n+* cBioPortal is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU Affero General Public License as\n+* published by the Free Software Foundation, either version 3 of the\n+* License.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU Affero General Public License for more details.\n+*\n+* You should have received a copy of the GNU Affero General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n \n package org.cbioportal.web;\n \n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n import org.cbioportal.model.DataAccessToken;\n import org.cbioportal.service.DataAccessTokenService;\n-import org.cbioportal.service.DataAccessTokenServiceFactory;\n import org.cbioportal.service.exception.DataAccessTokenNoUserIdentityException;\n import org.cbioportal.service.exception.DataAccessTokenProhibitedUserException;\n-import org.cbioportal.service.impl.UnauthDataAccessTokenServiceImpl;\n import org.cbioportal.web.config.annotation.InternalApi;\n-\n-import io.swagger.annotations.*;\n-import java.util.*;\n-import javax.annotation.PostConstruct;\n-import org.springframework.beans.factory.annotation.*;\n-import org.springframework.http.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n import org.springframework.security.core.Authentication;\n import org.springframework.validation.annotation.Validated;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.client.HttpClientErrorException;\n \n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiParam;\n+\n @InternalApi\n-@RestController\n+@RequestMapping // replaces @RestController; controller is created conditionally in DataAccessTokenControllerConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5MDg1OQ==", "bodyText": "I'm not questioning the implementation, I find it curious that its the condition classes that make the decision but that the property sources are loaded in...in any event, interesting Spring \"spell\".", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r395690859", "createdAt": "2020-03-20T14:54:31Z", "author": {"login": "n1zea144"}, "path": "web/src/main/java/org/cbioportal/web/config/DataAccessTokenControllerConfig.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+* Copyright (c) 2020 The Hyve B.V.\n+*\n+* This library is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+* FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+* is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+* obligations to provide maintenance, support, updates, enhancements or\n+* modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+* liable to any party for direct, indirect, special, incidental or\n+* consequential damages, including lost profits, arising out of the use of this\n+* software and its documentation, even if Memorial Sloan-Kettering Cancer\n+* Center has been advised of the possibility of such damage.\n+*/\n+\n+/*\n+* This file is part of cBioPortal.\n+*\n+* cBioPortal is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU Affero General Public License as\n+* published by the Free Software Foundation, either version 3 of the\n+* License.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU Affero General Public License for more details.\n+*\n+* You should have received a copy of the GNU Affero General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+package org.cbioportal.web.config;\n+\n+import org.cbioportal.web.DataAccessTokenController;\n+import org.cbioportal.web.OAuth2DataAccessTokenController;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.context.annotation.PropertySources;\n+\n+@Configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NjI1NzU1", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#pullrequestreview-378625755", "createdAt": "2020-03-20T16:18:08Z", "commit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoxODowOFrOF5aaBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoxODowOFrOF5aaBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0NTc5OA==", "bodyText": "Is this duplication of line 272?", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r395745798", "createdAt": "2020-03-20T16:18:08Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-and-Authorizing-Users-via-keycloak.md", "diffHunk": "@@ -252,11 +253,98 @@ If all goes well, the following should happen:\n \n If this does not happen, see the Troubleshooting Tips  below.\n \n+### Add client for OAuth2 token-based data access\n+\n+With cBioPortal instances that require user authentication the API can be queried when including a data access token in the request header (see [Authenticating Users via Tokens](Authenticating-Users-via-Tokens.md)). KeyCloak can be configured as an OAuth2 authentication provider that distributes data access tokens to users and validates these tokens when used while querying the API. This feature is enabled by creating a `cbioportal_api` OpenID Connect client that has access to the user roles defined in the `cbioportal` SAML client.\n+\n+The step below were verified to work with Keycloak versions 4.8.3.Final and 8.0.2.\n+\n+1. Create a client with name `cbioportal_api`. Set _Client Protocol_ to `openid-connect`.\n+\n+![](images/previews/oauth2_client_1.png)\n+\n+2. On the configuration page of `cbioportal_api` client apply the following settings:\n+\n+#### Settings tab\n+\n+| parameter        | value  | comment  |\n+| ------------- |:-------------:| -----:|\n+| Access Type      | confidential |  |\n+| Standard Flow Enabled      | ON      |   (default value) |\n+| Enabled      | ON      |   (default value) |\n+| Consent Required      | OFF        |   (default value) |\n+| Client Protocol      | openid-connect   |   (default value) |\n+| Access Type | confidential      |     (default value) |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NjM0MjY5", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#pullrequestreview-378634269", "createdAt": "2020-03-20T16:28:41Z", "commit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoyODo0MlrOF5a0pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoyODo0MlrOF5a0pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1MjYxNA==", "bodyText": "It would be helpful to add a link to line 74 of Authenticating-Users-via-Tokens.md", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r395752614", "createdAt": "2020-03-20T16:28:42Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-and-Authorizing-Users-via-keycloak.md", "diffHunk": "@@ -252,11 +253,98 @@ If all goes well, the following should happen:\n \n If this does not happen, see the Troubleshooting Tips  below.\n \n+### Add client for OAuth2 token-based data access\n+\n+With cBioPortal instances that require user authentication the API can be queried when including a data access token in the request header (see [Authenticating Users via Tokens](Authenticating-Users-via-Tokens.md)). KeyCloak can be configured as an OAuth2 authentication provider that distributes data access tokens to users and validates these tokens when used while querying the API. This feature is enabled by creating a `cbioportal_api` OpenID Connect client that has access to the user roles defined in the `cbioportal` SAML client.\n+\n+The step below were verified to work with Keycloak versions 4.8.3.Final and 8.0.2.\n+\n+1. Create a client with name `cbioportal_api`. Set _Client Protocol_ to `openid-connect`.\n+\n+![](images/previews/oauth2_client_1.png)\n+\n+2. On the configuration page of `cbioportal_api` client apply the following settings:\n+\n+#### Settings tab\n+\n+| parameter        | value  | comment  |\n+| ------------- |:-------------:| -----:|\n+| Access Type      | confidential |  |\n+| Standard Flow Enabled      | ON      |   (default value) |\n+| Enabled      | ON      |   (default value) |\n+| Consent Required      | OFF        |   (default value) |\n+| Client Protocol      | openid-connect   |   (default value) |\n+| Access Type | confidential      |     (default value) |\n+| Standard Flow Enabled | ON      |     (default value) |\n+| Implicit Flow Enabled | OFF      |     (default value) |\n+| Direct Access Grants Enabled | OFF      |    |\n+| Service Accounts Enabled | OFF      |  (default value)   |\n+| Authorization Enabled | OFF      |  (default value)  |\n+| Valid Redirect URIs | _url_/api/data-access-token/oauth2  |  _url_ refers to base url of cBioPortal instance |\n+\n+![](images/previews/oauth2_client_3.png)\n+\n+#### Credentials tab\n+\n+Select `Client Id and Secret`. Take notice of the value of _Secret_ the secret field. This secret should be added to `portal.properties` file of the cBioPortal backend.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODgxMDgz", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#pullrequestreview-378881083", "createdAt": "2020-03-21T01:39:44Z", "commit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMTozOTo0NVrOF5m0ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMTozOTo0NVrOF5m0ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0OTE3OQ==", "bodyText": "I think this needs some tweaking.  Since I deploy war with portal.properties rolled in, to avoid a FileNotFoundException, I had to do the following:\n\n@propertysource(value=\"file:///${portal_home}/portal.properties\", ignoreResourceNotFound=true)\n\nI imagine you want to look in war first and if not found, then environment?  Maybe you need to place ignoreResourceNotFound on both @propertysource and then do something smart in the condition class?", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r395949179", "createdAt": "2020-03-21T01:39:45Z", "author": {"login": "n1zea144"}, "path": "web/src/main/java/org/cbioportal/web/config/DataAccessTokenControllerConfig.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+* Copyright (c) 2020 The Hyve B.V.\n+*\n+* This library is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+* FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+* is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+* obligations to provide maintenance, support, updates, enhancements or\n+* modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+* liable to any party for direct, indirect, special, incidental or\n+* consequential damages, including lost profits, arising out of the use of this\n+* software and its documentation, even if Memorial Sloan-Kettering Cancer\n+* Center has been advised of the possibility of such damage.\n+*/\n+\n+/*\n+* This file is part of cBioPortal.\n+*\n+* cBioPortal is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU Affero General Public License as\n+* published by the Free Software Foundation, either version 3 of the\n+* License.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU Affero General Public License for more details.\n+*\n+* You should have received a copy of the GNU Affero General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+package org.cbioportal.web.config;\n+\n+import org.cbioportal.web.DataAccessTokenController;\n+import org.cbioportal.web.OAuth2DataAccessTokenController;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.context.annotation.PropertySources;\n+\n+@Configuration\n+@PropertySources({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzQyNTM3", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#pullrequestreview-380742537", "createdAt": "2020-03-24T22:29:17Z", "commit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoyOToxN1rOF7FgPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoyOToxN1rOF7FgPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMDQ3Nw==", "bodyText": "Setting this is missing from the documents.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r397500477", "createdAt": "2020-03-24T22:29:17Z", "author": {"login": "n1zea144"}, "path": "security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2DataAccessTokenServiceImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020 The Hyve B.V.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.cbioportal.security.spring.authentication.token.oauth2;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.cbioportal.model.DataAccessToken;\n+import org.cbioportal.service.DataAccessTokenService;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.jwt.Jwt;\n+import org.springframework.security.jwt.JwtHelper;\n+import org.springframework.stereotype.Component;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.client.RestTemplate;\n+\n+\n+@Service\n+@Component(\"oauth2\")\n+public class OAuth2DataAccessTokenServiceImpl implements DataAccessTokenService {\n+\n+    @Value(\"${dat.oauth2.issuer:}\")\n+    private String issuer;\n+\n+    @Value(\"${dat.oauth2.clientId:}\")\n+    private String clientId;\n+\n+    @Value(\"${dat.oauth2.clientSecret:}\")\n+    private String clientSecret;\n+\n+    @Value(\"${dat.oauth2.accessTokenUri:}\")\n+    private String accessTokenUri;\n+\n+    @Value(\"${dat.oauth2.userAuthorizationUri:}\")\n+    private String userAuthorizationUri;\n+\n+    @Value(\"${dat.oauth2.redirectUri:}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2"}, "originalPosition": 78}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6a0911de3ea263d928871738dbb09925e1a12b2", "author": {"user": null}, "url": "https://github.com/cBioPortal/cbioportal/commit/a6a0911de3ea263d928871738dbb09925e1a12b2", "committedDate": "2020-03-26T10:13:55Z", "message": "Add jwtRolesPath to OAuth2 Provider"}, "afterCommit": {"oid": "4fb7fbc67ab3f3a1eb9e45683a2e01c2e0b7c8a4", "author": {"user": null}, "url": "https://github.com/cBioPortal/cbioportal/commit/4fb7fbc67ab3f3a1eb9e45683a2e01c2e0b7c8a4", "committedDate": "2020-03-26T15:05:50Z", "message": "Add jwtRolesPath to OAuth2 Provider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDc2MzU4", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#pullrequestreview-382476358", "createdAt": "2020-03-26T22:55:48Z", "commit": {"oid": "4fb7fbc67ab3f3a1eb9e45683a2e01c2e0b7c8a4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo1NTo0OFrOF8dZRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo1NTo0OFrOF8dZRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDQ4Nw==", "bodyText": "I think you are missing dat.oauth2.redirectUri", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r398940487", "createdAt": "2020-03-26T22:55:48Z", "author": {"login": "n1zea144"}, "path": "docs/Authenticating-Users-via-Tokens.md", "diffHunk": "@@ -60,7 +66,43 @@ The following properties must be present in portal.properties in order to allow\n - **Permissible Values**: true or false\n - **Default Value**: true\n \n+**Property**: dat.oauth2.clientId (required only when dat.method = oauth2)\n+- **Description**: Identifier of the OAuth2 client of the authentication provider.\n+- **Permissible Values**: string\n+- **Default Value**: This value is specified by the authentication provider.\n+\n+**Property**: dat.oauth2.clientSecret (required only when dat.method = oauth2)\n+- **Description**: Secret of the OAuth2 client of the authentication provider used for back channel communication between cBioPortal and the provider. This value is specified by the authentication provider.\n+- **Permissible Values**: string\n+- **Default Value**: This value is specified by the authentication provider.\n+\n+**Property**: dat.oauth2.issuer (required only when dat.method = oauth2)\n+- **Description**: Name of the issuer of the tokens. It is used to assert the correct origin of the token. This value is specified by the authentication provider.\n+- **Permissible Values**: string\n+- **Default Value**: This value is specified by the authentication provider.\n+\n+**Property**: dat.oauth2.userAuthorizationUri (required only when dat.method = oauth2)\n+- **Description**: Url of the user login page of the OAuth2 authorization provider. According to OAuth2 specification this endpoint must end with `/auth`.\n+- **Permissible Values**: url\n+- **Default Value**: This value is specified by the authentication provider.\n+\n+**Property**: dat.oauth2.accessTokenUri (required only when dat.method = oauth2)\n+- **Description**: Url for retrieval of tokens from the OAuth2 authorization provider. According to OAuth2 specification this endpoint must end with `/token`.\n+- **Permissible Values**: url\n+- **Default Value**: This value is specified by the authentication provider.\n+\n+**Property**: dat.oauth2.jwkUrl (required only when dat.method = oauth2)\n+- **Description**: Url for retrieval of the public key used by the OAuth2 authorization provider to sign tokens. According to OAuth2 specification this endpoint must end with `/certs`.\n+- **Permissible Values**: url\n+- **Default Value**: This value is specified by the authentication provider.\n+\n+**Property**: dat.oauth2.jwtRolesPath (required only when dat.method = oauth2)\n+- **Description**: `::`-separated path to array with user roles in JWT token returned by Keycloak.\n+- **Permissible Values**: `::`-separated strings\n+- **Default Value**: resource_access::cbioportal::roles\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb7fbc67ab3f3a1eb9e45683a2e01c2e0b7c8a4"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0ODk5ODgy", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#pullrequestreview-384899882", "createdAt": "2020-03-31T16:23:08Z", "commit": {"oid": "4fb7fbc67ab3f3a1eb9e45683a2e01c2e0b7c8a4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyMzowOFrOF-d65w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyMzowOFrOF-d65w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0NjI0Nw==", "bodyText": "It looks like the removal of @RestController causes the following DataAccessTokenControllerTest.revokeAllTokensForUserTest() failure:\nRunning org.cbioportal.web.DataAccessTokenControllerTest Tests run: 7, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 17.534 sec <<< FAILURE! revokeAllTokensForUserTest(org.cbioportal.web.DataAccessTokenControllerTest)  Time elapsed: 0.772 sec  <<< ERROR! javax.servlet.ServletException: Circular view path [data-access-tokens]: would dispatch back to the current handler URL [/data-access-tokens] again. Check your ViewResolver setup ! (Hint: This may be the result of an unspecified view, due to default view name generation.)      \nAfter some digging, I think its because @RestController included @responsebody which is required to properly unmarshal into JSON.  Adding @responsebody after @RequestMapping should solve this issue.", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r401046247", "createdAt": "2020-03-31T16:23:08Z", "author": {"login": "n1zea144"}, "path": "web/src/main/java/org/cbioportal/web/DataAccessTokenController.java", "diffHunk": "@@ -1,98 +1,97 @@\n /*\n- * This file is part of cBioPortal.\n- *\n- * cBioPortal is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as\n- * published by the Free Software Foundation, either version 3 of the\n- * License.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+* This file is part of cBioPortal.\n+*\n+* cBioPortal is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU Affero General Public License as\n+* published by the Free Software Foundation, either version 3 of the\n+* License.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU Affero General Public License for more details.\n+*\n+* You should have received a copy of the GNU Affero General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n \n package org.cbioportal.web;\n \n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n import org.cbioportal.model.DataAccessToken;\n import org.cbioportal.service.DataAccessTokenService;\n-import org.cbioportal.service.DataAccessTokenServiceFactory;\n import org.cbioportal.service.exception.DataAccessTokenNoUserIdentityException;\n import org.cbioportal.service.exception.DataAccessTokenProhibitedUserException;\n-import org.cbioportal.service.impl.UnauthDataAccessTokenServiceImpl;\n import org.cbioportal.web.config.annotation.InternalApi;\n-\n-import io.swagger.annotations.*;\n-import java.util.*;\n-import javax.annotation.PostConstruct;\n-import org.springframework.beans.factory.annotation.*;\n-import org.springframework.http.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n import org.springframework.security.core.Authentication;\n import org.springframework.validation.annotation.Validated;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.client.HttpClientErrorException;\n \n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiParam;\n+\n @InternalApi\n-@RestController\n+@RequestMapping // replaces @RestController; controller is created conditionally in DataAccessTokenControllerConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb7fbc67ab3f3a1eb9e45683a2e01c2e0b7c8a4"}, "originalPosition": 75}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9585605999038f4e10589125b66159824f02a68b", "author": {"user": null}, "url": "https://github.com/cBioPortal/cbioportal/commit/9585605999038f4e10589125b66159824f02a68b", "committedDate": "2020-04-02T07:01:23Z", "message": "Add responsebody annotation to DAT controllers"}, "afterCommit": {"oid": "a32eb56973c17f390694e40b27226b6b551ee246", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/a32eb56973c17f390694e40b27226b6b551ee246", "committedDate": "2020-05-12T09:09:12Z", "message": "Fix oauth2 integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7d7f1bafb613a197043638f3b70f0f2a72f7f47", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/d7d7f1bafb613a197043638f3b70f0f2a72f7f47", "committedDate": "2020-05-15T07:53:45Z", "message": "Fix wantAssertionSigned sp metadata field"}, "afterCommit": {"oid": "1ac9c1257ad2a0b4c477295c15a16502118bb8a1", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/1ac9c1257ad2a0b4c477295c15a16502118bb8a1", "committedDate": "2020-05-15T12:27:48Z", "message": "Fix wantAssertionSigned sp metadata field"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "079aaaf1c36636141a4b92e08922ca440cf40461", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/079aaaf1c36636141a4b92e08922ca440cf40461", "committedDate": "2020-05-16T08:45:48Z", "message": "Fix SAML integration test"}, "afterCommit": {"oid": "9f6a4cceafa56779793beeb98f21f8859ad2ee3f", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/9f6a4cceafa56779793beeb98f21f8859ad2ee3f", "committedDate": "2020-05-26T15:49:59Z", "message": "Adapt to new Mockito API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11639b4bd0540654862b59779f940982a25b7c6b", "author": {"user": {"login": "forus", "name": "Ruslan Forostianov"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/11639b4bd0540654862b59779f940982a25b7c6b", "committedDate": "2020-06-05T15:28:10Z", "message": "Move all jackson dependencies to parent project"}, "afterCommit": {"oid": "7078270218b795bd7f745d9b09649f652b30657e", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/7078270218b795bd7f745d9b09649f652b30657e", "committedDate": "2020-06-06T07:29:30Z", "message": "Reinstate test config for dat controller"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3cb482de55ffffe9666ccefdef881032c1936ece", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/3cb482de55ffffe9666ccefdef881032c1936ece", "committedDate": "2020-06-06T07:37:32Z", "message": "Fix typo in study_es_0 ('G   RCh37')"}, "afterCommit": {"oid": "5c70e5a38c123ae24bd21c92dfbd7063b2fecbc8", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/5c70e5a38c123ae24bd21c92dfbd7063b2fecbc8", "committedDate": "2020-06-06T08:55:28Z", "message": "Fix typo in study_es_0 ('G   RCh37')"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c70e5a38c123ae24bd21c92dfbd7063b2fecbc8", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/5c70e5a38c123ae24bd21c92dfbd7063b2fecbc8", "committedDate": "2020-06-06T08:55:28Z", "message": "Fix typo in study_es_0 ('G   RCh37')"}, "afterCommit": {"oid": "8f41ebea3f9efa6f9ffb45606412dc3a248629e7", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/8f41ebea3f9efa6f9ffb45606412dc3a248629e7", "committedDate": "2020-06-06T08:59:14Z", "message": "Fix typo in study_es_0"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f41ebea3f9efa6f9ffb45606412dc3a248629e7", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/8f41ebea3f9efa6f9ffb45606412dc3a248629e7", "committedDate": "2020-06-06T08:59:14Z", "message": "Fix typo in study_es_0"}, "afterCommit": {"oid": "07be3d5c920e45887afda35dd27417dc8d93020b", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/07be3d5c920e45887afda35dd27417dc8d93020b", "committedDate": "2020-06-13T11:20:15Z", "message": "Fix study_es_0"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07be3d5c920e45887afda35dd27417dc8d93020b", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/07be3d5c920e45887afda35dd27417dc8d93020b", "committedDate": "2020-06-13T11:20:15Z", "message": "Fix study_es_0"}, "afterCommit": {"oid": "fa721bcf95da7c89ba1b04b3e573a41858faa8df", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/fa721bcf95da7c89ba1b04b3e573a41858faa8df", "committedDate": "2020-07-02T11:44:21Z", "message": "Fix study_es_0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzUzMTY5", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#pullrequestreview-441753169", "createdAt": "2020-07-02T14:49:40Z", "commit": {"oid": "fa721bcf95da7c89ba1b04b3e573a41858faa8df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ee37c9e9be31d73ef4244b2c4b5df5dd6a93d0f", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/4ee37c9e9be31d73ef4244b2c4b5df5dd6a93d0f", "committedDate": "2020-08-04T07:28:59Z", "message": "Impl. OAuth2-token based API access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dd6696d1cff5ec604dacc1c0d44fd36ab67e1de", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/2dd6696d1cff5ec604dacc1c0d44fd36ab67e1de", "committedDate": "2020-08-04T07:28:59Z", "message": "Impl. unit tests for OAuth2 token service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "611eb3d32aac42f238a106e20614e87f5c546790", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/611eb3d32aac42f238a106e20614e87f5c546790", "committedDate": "2020-08-04T07:28:59Z", "message": "Impl. unit tests for OAuth2 token refresh template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc39431a9965e703818331fc45126cb9a4f48e39", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/fc39431a9965e703818331fc45126cb9a4f48e39", "committedDate": "2020-08-04T07:28:59Z", "message": "Impl. unit tests for OAuth2 token authentication provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b71046cb6a52b42707d6dc3d42c75d3978ddb1ac", "author": {"user": {"login": "forus", "name": "Ruslan Forostianov"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/b71046cb6a52b42707d6dc3d42c75d3978ddb1ac", "committedDate": "2020-08-04T07:28:59Z", "message": "Impl. SAML/OAuth2-token data access security integration tests\n\nIt introduces new infrastructure to run integration tests as\nseparate maven projects."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "594790a6164c58dc8706163f610244c32121cb79", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/594790a6164c58dc8706163f610244c32121cb79", "committedDate": "2020-08-04T07:28:59Z", "message": "Add copyright statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cc12140a0f439650412e0c775dc857427af8f42", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/4cc12140a0f439650412e0c775dc857427af8f42", "committedDate": "2020-08-04T07:28:59Z", "message": "Update PR\n\nFeedback from Ben"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db6e4167ba5afffe33b0ed29b13e3f1c0e5163d8", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/db6e4167ba5afffe33b0ed29b13e3f1c0e5163d8", "committedDate": "2020-08-04T07:28:59Z", "message": "Update docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e92a224a33056daa9619c56427d3dc22c62d9ea", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/3e92a224a33056daa9619c56427d3dc22c62d9ea", "committedDate": "2020-08-04T07:28:59Z", "message": "Add info on keycloak version to docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d95f84c89d46acc5f91765423e7b9f7b017e4e8f", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/d95f84c89d46acc5f91765423e7b9f7b017e4e8f", "committedDate": "2020-08-04T07:28:59Z", "message": "Create token beans from portal.properties\n\nControlled by env.var before"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f41c2e65280a523a2094f745bc4ec34521fd36fe", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/f41c2e65280a523a2094f745bc4ec34521fd36fe", "committedDate": "2020-08-04T07:28:59Z", "message": "Add redirectURI to docs and portal.properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bf4a56ff15267c533e1b0073f0574ac55a0b799", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/8bf4a56ff15267c533e1b0073f0574ac55a0b799", "committedDate": "2020-08-04T07:28:59Z", "message": "Fix reference to tokenAuthenticationProvider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2444098cec5f1818210122b89db1d9b4c7aaebf3", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/2444098cec5f1818210122b89db1d9b4c7aaebf3", "committedDate": "2020-08-04T07:28:59Z", "message": "Fix error thrown missing portal.properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9332c372c6f514de63f3cc8c4e6a084f88f5e60", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/d9332c372c6f514de63f3cc8c4e6a084f88f5e60", "committedDate": "2020-08-04T07:28:59Z", "message": "Refactor bean instantiation for token services and auth providers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc78069f9cdde86f3017b4bdf1bb0eac07d1a2c7", "author": {"user": null}, "url": "https://github.com/cBioPortal/cbioportal/commit/dc78069f9cdde86f3017b4bdf1bb0eac07d1a2c7", "committedDate": "2020-08-04T07:28:59Z", "message": "Add jwtRolesPath to OAuth2 Provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a44838e010f83431372dafad1540ec8e554ecb9", "author": {"user": null}, "url": "https://github.com/cBioPortal/cbioportal/commit/6a44838e010f83431372dafad1540ec8e554ecb9", "committedDate": "2020-08-04T07:28:59Z", "message": "Add responsebody annotation to DAT controllers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "622eb8f07fa90c0e2e9a58f3ad9f57f8a8dec670", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/622eb8f07fa90c0e2e9a58f3ad9f57f8a8dec670", "committedDate": "2020-08-04T07:28:59Z", "message": "Fix oauth2 integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7d0bcf7b54ca67a8129451516ab2f51924ed85e", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/d7d0bcf7b54ca67a8129451516ab2f51924ed85e", "committedDate": "2020-08-04T07:28:59Z", "message": "Small fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f970a5c09aa956d0d6da8735fa6bc554e6adaa", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/18f970a5c09aa956d0d6da8735fa6bc554e6adaa", "committedDate": "2020-08-04T07:28:59Z", "message": "Fix wantAssertionSigned sp metadata field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e05709d2d483bc8cbc4a824a0939a86552bca24f", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/e05709d2d483bc8cbc4a824a0939a86552bca24f", "committedDate": "2020-08-04T07:28:59Z", "message": "Remove -Dauthenticate=false from travis integration-test command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d454f190240f457be74be69eea6b3dfde064818d", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/d454f190240f457be74be69eea6b3dfde064818d", "committedDate": "2020-08-04T07:28:59Z", "message": "Fix SAML integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99338665c26f00d84cd0ab315d5292ef3d604d90", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/99338665c26f00d84cd0ab315d5292ef3d604d90", "committedDate": "2020-08-04T07:28:59Z", "message": "Adapt to new Mockito API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84c54bc2ba9689bb310642dc3b045a205cc5c2a6", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/84c54bc2ba9689bb310642dc3b045a205cc5c2a6", "committedDate": "2020-08-04T07:28:59Z", "message": "Rework conditional creation of dat access beans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98d962d7692d935ee8e40ae2d385d54d190c7db6", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/98d962d7692d935ee8e40ae2d385d54d190c7db6", "committedDate": "2020-08-04T07:28:59Z", "message": "Remove obsolete config class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3edfd094c3414a236a72a9ddd8a3dc8148c3a347", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/3edfd094c3414a236a72a9ddd8a3dc8148c3a347", "committedDate": "2020-08-04T07:28:59Z", "message": "Remove obsolete bean definitions for token service factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a42a920d1aaf384c9cfae73c7d836419e995054c", "author": {"user": {"login": "forus", "name": "Ruslan Forostianov"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/a42a920d1aaf384c9cfae73c7d836419e995054c", "committedDate": "2020-08-04T07:28:59Z", "message": "Add jackson dep to security project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b98e7924b269c1b19d91a42dda0b697a5eac443b", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/b98e7924b269c1b19d91a42dda0b697a5eac443b", "committedDate": "2020-08-04T07:28:59Z", "message": "Add jackson dependency to security pom.xml (correct indentation)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e827d0aadac900ed16c51a90b7ea72d62f1d33f5", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/e827d0aadac900ed16c51a90b7ea72d62f1d33f5", "committedDate": "2020-08-04T07:28:59Z", "message": "Correct typo in method name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf2f3aa1e731f01ed38c598503d4b6027ce40f3", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/5cf2f3aa1e731f01ed38c598503d4b6027ce40f3", "committedDate": "2020-08-04T07:28:59Z", "message": "Update jackson dependencies from codehouse to fasterxml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b40ab4d0869afe6d63e4a858c308e8cc5b53ed22", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/b40ab4d0869afe6d63e4a858c308e8cc5b53ed22", "committedDate": "2020-08-04T07:28:59Z", "message": "Fix unit test failing for missing key id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f2118382d71a10e1f7e98a1991612078abe1773", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/2f2118382d71a10e1f7e98a1991612078abe1773", "committedDate": "2020-08-04T07:28:59Z", "message": "Fix conditional creation for DAT security beans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "532476b94e475319c5b1cc5360192a8be3edc210", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/532476b94e475319c5b1cc5360192a8be3edc210", "committedDate": "2020-08-04T07:29:21Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "154d90ccac758b0f21a98b2146ab597050d217f9", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/154d90ccac758b0f21a98b2146ab597050d217f9", "committedDate": "2020-08-04T07:29:21Z", "message": "Rework DAT controller instantiation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf9552b65f5cd7c030e4168999d748731e751522", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/bf9552b65f5cd7c030e4168999d748731e751522", "committedDate": "2020-08-04T07:29:21Z", "message": "Fix oauth2 integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0347d5d87c2b9d43e6796dbb6cb7c2700e341b2c", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/0347d5d87c2b9d43e6796dbb6cb7c2700e341b2c", "committedDate": "2020-08-04T07:29:21Z", "message": "Fix study_es_0"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa721bcf95da7c89ba1b04b3e573a41858faa8df", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/fa721bcf95da7c89ba1b04b3e573a41858faa8df", "committedDate": "2020-07-02T11:44:21Z", "message": "Fix study_es_0"}, "afterCommit": {"oid": "0347d5d87c2b9d43e6796dbb6cb7c2700e341b2c", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/0347d5d87c2b9d43e6796dbb6cb7c2700e341b2c", "committedDate": "2020-08-04T07:29:21Z", "message": "Fix study_es_0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78327923fce7618ba0aa6699e8bcbcd1efac31de", "author": {"user": {"login": "pvannierop", "name": "Pim van Nierop"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/78327923fce7618ba0aa6699e8bcbcd1efac31de", "committedDate": "2020-08-05T06:22:41Z", "message": "Add -q flag to Travis core maven install command\n\nMitigates job termination due to exceeding the max\nlog length."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1508, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}