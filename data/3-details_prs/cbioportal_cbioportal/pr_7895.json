{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMTM1ODYw", "number": 7895, "title": "Optimize mutation count by keyword calculation", "bodyText": "Fix # (see https://help.github.com/en/articles/closing-issues-using-keywords)\nImproves runtime for calculation of mutation count by keyword during import.\nCurrent implementation of this calculation is extremely time consuming\nfor studies with large and/or multiple MAFs.\nWith the changes in this PR the runtime for the calculation is reduced\nfrom greater than 60 minutes to approximately 18 minutes for the\nmskimpact study.\nIn short the changes in this PR implement the use of the bulk loader as\nwell as a step that pre-calculates the gene counts and mutation keyword\ncounts for the current study being imported before creating the insert\nstatements with the bulk loader and executing the import.\nSigned-off-by: Angelica Ochoa 15623749+ao508@users.noreply.github.com\nChecks\n\n Runs on heroku\n Has tests or has a separate issue that describes the types of test that should be created. If no test is included it should explicitly be mentioned in the PR why there is no test.\n The commit log is comprehensible. It follows 7 rules of great commit messages. For most PRs a single commit should suffice, in some cases multiple topical commits can be useful. During review it is ok to see tiny commits (e.g. Fix reviewer comments), but right before the code gets merged to master or rc branch, any such commits should be squashed since they are useless to the other developers. Definitely avoid merge commits, use rebase instead.\n\nNotify reviewers\nRead our Pull request merging\npolicy. It can help to figure out who worked on the\nfile before you. Please use git blame <filename> to determine that\nand notify them either through slack or by assigning them as a reviewer on the PR", "createdAt": "2020-09-22T19:03:05Z", "url": "https://github.com/cBioPortal/cbioportal/pull/7895", "merged": true, "mergeCommit": {"oid": "ab9245b5324d2a803bcd28f93c0c9287aa307a1c"}, "closed": true, "closedAt": "2020-09-25T23:53:18Z", "author": {"login": "ao508"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLxmxbABqjM3OTk2Nzg0MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNtY97gFqTQ5ODgxMzY3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd2931f9341e941eba328f3ea87230062eecdc01", "author": {"user": {"login": "ao508", "name": "ao508"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/bd2931f9341e941eba328f3ea87230062eecdc01", "committedDate": "2020-09-22T18:44:35Z", "message": "Optimize mutation count by keyword calculation\n\nCurrent implementation of this calculation is extremely time consuming\nfor studies with large and/or multiple MAFs.\n\nWith the changes in this PR the runtime for the calculation is reduced\nfrom greater than 60 minutes to approximately 18 minutes for the\nmskimpact study.\n\nIn short the changes in this PR implement the use of the bulk loader as\nwell as a step that pre-calculates the gene counts and mutation keyword\ncounts for the current study being imported before creating the insert\nstatements with the bulk loader and executing the import.\n\nSigned-off-by: Angelica Ochoa <15623749+ao508@users.noreply.github.com>"}, "afterCommit": {"oid": "7bedc81f2266df6f76afbcda17e608606d59f6b5", "author": {"user": {"login": "ao508", "name": "ao508"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/7bedc81f2266df6f76afbcda17e608606d59f6b5", "committedDate": "2020-09-23T19:17:53Z", "message": "Optimize mutation count by keyword calculation\n\nCurrent implementation of this calculation is extremely time consuming\nfor studies with large and/or multiple MAFs.\n\nWith the changes in this PR the runtime for the calculation is reduced\nfrom greater than 60 minutes to approximately 18 minutes for the\nmskimpact study.\n\nIn short the changes in this PR implement the use of the bulk loader as\nwell as a step that pre-calculates the gene counts and mutation keyword\ncounts for the current study being imported before creating the insert\nstatements with the bulk loader and executing the import.\n\nSigned-off-by: Angelica Ochoa <15623749+ao508@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NzI2NzUx", "url": "https://github.com/cBioPortal/cbioportal/pull/7895#pullrequestreview-496726751", "createdAt": "2020-09-25T19:16:06Z", "commit": {"oid": "7bedc81f2266df6f76afbcda17e608606d59f6b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOToxNjowNlrOHYPo5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOToxNjowNlrOHYPo5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NDEwMQ==", "bodyText": "Add a space between 'while' and '('?", "url": "https://github.com/cBioPortal/cbioportal/pull/7895#discussion_r495184101", "createdAt": "2020-09-25T19:16:06Z", "author": {"login": "divyamadala30"}, "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoMutation.java", "diffHunk": "@@ -186,27 +189,74 @@ public static void createMutationCountClinicalData(GeneticProfile geneticProfile\n         }\n     }\n \n-    public static int calculateMutationCountByKeyword(int profileId) throws DaoException {\n+    public static void calculateMutationCountByKeyword(int geneticProfileId) throws DaoException {\n+        if (!MySQLbulkLoader.isBulkLoad()) {\n+            throw new DaoException(\"You have to turn on MySQLbulkLoader in order to update mutation counts by keyword\");\n+        } else {\n+            MultiKeyMap mutationEventKeywordCountMap = getMutationEventKeywordCountByGeneticProfileId(geneticProfileId); // mutation event keyword -> entrez id -> keyword count\n+            Map<Long, Integer> geneCountMap = getGeneCountByGeneticProfileId(geneticProfileId); // entrez id -> gene count\n+            MapIterator it = mutationEventKeywordCountMap.mapIterator();\n+            while (it.hasNext()) {\n+                it.next();\n+                MultiKey mk = (MultiKey) it.getKey();\n+                String mutationEventKeyword = String.valueOf(mk.getKey(0));\n+                Long entrezGeneId = Long.valueOf(mk.getKey(1).toString());\n+                String keywordCount = it.getValue().toString();\n+                Integer geneCount = geneCountMap.get(entrezGeneId);\n+                MySQLbulkLoader.getMySQLbulkLoader(\"mutation_count_by_keyword\").insertRecord(\n+                        Integer.toString(geneticProfileId),\n+                        mutationEventKeyword,\n+                        Long.toString(entrezGeneId),\n+                        keywordCount,\n+                        Integer.toString(geneCount)\n+                );\n+            }\n+        }\n+    }\n+\n+    public static MultiKeyMap getMutationEventKeywordCountByGeneticProfileId(int geneticProfileId) throws DaoException {\n+        MultiKeyMap mutationEventKeywordCountByGeneticProfileId = new MultiKeyMap();\n         Connection con = null;\n         PreparedStatement pstmt = null;\n         ResultSet rs = null;\n         try {\n             con = JdbcUtil.getDbConnection(DaoMutation.class);\n             pstmt = con.prepareStatement(\n-                \"INSERT INTO mutation_count_by_keyword \" +\n-                    \"SELECT g2.`GENETIC_PROFILE_ID`, mutation_event.`KEYWORD`, m2.`ENTREZ_GENE_ID`, \" +\n-                    \"IF(mutation_event.`KEYWORD` IS NULL, 0, COUNT(DISTINCT(m2.SAMPLE_ID))) AS KEYWORD_COUNT, \" +\n-                    \"(SELECT COUNT(DISTINCT(m1.SAMPLE_ID)) FROM `mutation` AS m1 , `genetic_profile` AS g1 \" +\n-                    \"WHERE m1.`GENETIC_PROFILE_ID` = g1.`GENETIC_PROFILE_ID` \" +\n-                    \"AND g1.`GENETIC_PROFILE_ID`= g2.`GENETIC_PROFILE_ID` AND m1.`ENTREZ_GENE_ID` = m2.`ENTREZ_GENE_ID` \" +\n-                    \"GROUP BY g1.`GENETIC_PROFILE_ID` , m1.`ENTREZ_GENE_ID`) AS GENE_COUNT \" +\n-                    \"FROM `mutation` AS m2 , `genetic_profile` AS g2 , `mutation_event` \" +\n-                    \"WHERE m2.`GENETIC_PROFILE_ID` = g2.`GENETIC_PROFILE_ID` \" +\n-                    \"AND m2.`MUTATION_EVENT_ID` = mutation_event.`MUTATION_EVENT_ID` \" +\n-                    \"AND g2.`GENETIC_PROFILE_ID`=? \" +\n-                    \"GROUP BY g2.`GENETIC_PROFILE_ID` , mutation_event.`KEYWORD` , m2.`ENTREZ_GENE_ID`;\");\n-            pstmt.setInt(1, profileId);\n-            return pstmt.executeUpdate();\n+                    \"SELECT mutation_event.`KEYWORD`, mutation_event.`ENTREZ_GENE_ID`,  IF(mutation_event.`KEYWORD` IS NULL, 0, COUNT(DISTINCT(mutation.SAMPLE_ID))) AS KEYWORD_COUNT \" +\n+                            \"FROM mutation_event JOIN mutation on mutation.`MUTATION_EVENT_ID` = mutation_event.`MUTATION_EVENT_ID` \" +\n+                            \"WHERE mutation.`GENETIC_PROFILE_ID` = ? \" +\n+                            \"GROUP BY mutation_event.`KEYWORD`, mutation_event.`ENTREZ_GENE_ID`;\"\n+            );\n+            pstmt.setInt(1, geneticProfileId);\n+            rs = pstmt.executeQuery();\n+            while (rs.next()) {\n+                mutationEventKeywordCountByGeneticProfileId.put(rs.getString(1), rs.getLong(2), rs.getInt(3));\n+            }\n+            return mutationEventKeywordCountByGeneticProfileId;\n+        } catch (SQLException e) {\n+            throw new DaoException(e);\n+        } finally {\n+            JdbcUtil.closeAll(DaoMutation.class, con, pstmt, rs);\n+        }\n+    }\n+\n+    public static Map<Long, Integer> getGeneCountByGeneticProfileId(int geneticProfileId) throws DaoException {\n+        Map<Long, Integer> geneCountByGeneticProfileId = new HashMap<>();\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+        try {\n+            con = JdbcUtil.getDbConnection(DaoMutation.class);\n+            pstmt = con.prepareStatement(\n+                \"SELECT ENTREZ_GENE_ID AS `ENTREZ_GENE_ID`, COUNT(DISTINCT(SAMPLE_ID)) AS `GENE_COUNT`\" +\n+                    \" FROM mutation WHERE GENETIC_PROFILE_ID = ? \" +\n+                    \"GROUP BY ENTREZ_GENE_ID;\");\n+            pstmt.setInt(1, geneticProfileId);\n+            rs = pstmt.executeQuery();\n+            while(rs.next()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bedc81f2266df6f76afbcda17e608606d59f6b5"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NzI2OTE2", "url": "https://github.com/cBioPortal/cbioportal/pull/7895#pullrequestreview-496726916", "createdAt": "2020-09-25T19:16:11Z", "commit": {"oid": "7bedc81f2266df6f76afbcda17e608606d59f6b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1f41f7d8e32d32b51721c4692a7f8bcb22a5e22", "author": {"user": {"login": "ao508", "name": "ao508"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/c1f41f7d8e32d32b51721c4692a7f8bcb22a5e22", "committedDate": "2020-09-25T20:50:50Z", "message": "update"}, "afterCommit": {"oid": "7bedc81f2266df6f76afbcda17e608606d59f6b5", "author": {"user": {"login": "ao508", "name": "ao508"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/7bedc81f2266df6f76afbcda17e608606d59f6b5", "committedDate": "2020-09-23T19:17:53Z", "message": "Optimize mutation count by keyword calculation\n\nCurrent implementation of this calculation is extremely time consuming\nfor studies with large and/or multiple MAFs.\n\nWith the changes in this PR the runtime for the calculation is reduced\nfrom greater than 60 minutes to approximately 18 minutes for the\nmskimpact study.\n\nIn short the changes in this PR implement the use of the bulk loader as\nwell as a step that pre-calculates the gene counts and mutation keyword\ncounts for the current study being imported before creating the insert\nstatements with the bulk loader and executing the import.\n\nSigned-off-by: Angelica Ochoa <15623749+ao508@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f7f5ae829f379015a04ef034acce39754009eec", "author": {"user": {"login": "ao508", "name": "ao508"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/5f7f5ae829f379015a04ef034acce39754009eec", "committedDate": "2020-09-25T20:59:00Z", "message": "Optimize mutation count by keyword calculation\n\nCurrent implementation of this calculation is extremely time consuming\nfor studies with large and/or multiple MAFs.\n\nWith the changes in this PR the runtime for the calculation is reduced\nfrom greater than 60 minutes to approximately 18 minutes for the\nmskimpact study.\n\nIn short the changes in this PR implement the use of the bulk loader as\nwell as a step that pre-calculates the gene counts and mutation keyword\ncounts for the current study being imported before creating the insert\nstatements with the bulk loader and executing the import.\n\nSigned-off-by: Angelica Ochoa <15623749+ao508@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7bedc81f2266df6f76afbcda17e608606d59f6b5", "author": {"user": {"login": "ao508", "name": "ao508"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/7bedc81f2266df6f76afbcda17e608606d59f6b5", "committedDate": "2020-09-23T19:17:53Z", "message": "Optimize mutation count by keyword calculation\n\nCurrent implementation of this calculation is extremely time consuming\nfor studies with large and/or multiple MAFs.\n\nWith the changes in this PR the runtime for the calculation is reduced\nfrom greater than 60 minutes to approximately 18 minutes for the\nmskimpact study.\n\nIn short the changes in this PR implement the use of the bulk loader as\nwell as a step that pre-calculates the gene counts and mutation keyword\ncounts for the current study being imported before creating the insert\nstatements with the bulk loader and executing the import.\n\nSigned-off-by: Angelica Ochoa <15623749+ao508@users.noreply.github.com>"}, "afterCommit": {"oid": "5f7f5ae829f379015a04ef034acce39754009eec", "author": {"user": {"login": "ao508", "name": "ao508"}}, "url": "https://github.com/cBioPortal/cbioportal/commit/5f7f5ae829f379015a04ef034acce39754009eec", "committedDate": "2020-09-25T20:59:00Z", "message": "Optimize mutation count by keyword calculation\n\nCurrent implementation of this calculation is extremely time consuming\nfor studies with large and/or multiple MAFs.\n\nWith the changes in this PR the runtime for the calculation is reduced\nfrom greater than 60 minutes to approximately 18 minutes for the\nmskimpact study.\n\nIn short the changes in this PR implement the use of the bulk loader as\nwell as a step that pre-calculates the gene counts and mutation keyword\ncounts for the current study being imported before creating the insert\nstatements with the bulk loader and executing the import.\n\nSigned-off-by: Angelica Ochoa <15623749+ao508@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4ODEzNjcx", "url": "https://github.com/cBioPortal/cbioportal/pull/7895#pullrequestreview-498813671", "createdAt": "2020-09-29T19:30:14Z", "commit": {"oid": "5f7f5ae829f379015a04ef034acce39754009eec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozMDoxNFrOHZ9-HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozMDoxNFrOHZ9-HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5MTc3Mg==", "bodyText": "yes ... here we can simply filter mutation table by genetic_profile_id ... rather than joining to genetic_profile first and then selecting records which match by genetic profile id (as before)", "url": "https://github.com/cBioPortal/cbioportal/pull/7895#discussion_r496991772", "createdAt": "2020-09-29T19:30:14Z", "author": {"login": "sheridancbio"}, "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoMutation.java", "diffHunk": "@@ -186,27 +189,74 @@ public static void createMutationCountClinicalData(GeneticProfile geneticProfile\n         }\n     }\n \n-    public static int calculateMutationCountByKeyword(int profileId) throws DaoException {\n+    public static void calculateMutationCountByKeyword(int geneticProfileId) throws DaoException {\n+        if (!MySQLbulkLoader.isBulkLoad()) {\n+            throw new DaoException(\"You have to turn on MySQLbulkLoader in order to update mutation counts by keyword\");\n+        } else {\n+            MultiKeyMap mutationEventKeywordCountMap = getMutationEventKeywordCountByGeneticProfileId(geneticProfileId); // mutation event keyword -> entrez id -> keyword count\n+            Map<Long, Integer> geneCountMap = getGeneCountByGeneticProfileId(geneticProfileId); // entrez id -> gene count\n+            MapIterator it = mutationEventKeywordCountMap.mapIterator();\n+            while (it.hasNext()) {\n+                it.next();\n+                MultiKey mk = (MultiKey) it.getKey();\n+                String mutationEventKeyword = String.valueOf(mk.getKey(0));\n+                Long entrezGeneId = Long.valueOf(mk.getKey(1).toString());\n+                String keywordCount = it.getValue().toString();\n+                Integer geneCount = geneCountMap.get(entrezGeneId);\n+                MySQLbulkLoader.getMySQLbulkLoader(\"mutation_count_by_keyword\").insertRecord(\n+                        Integer.toString(geneticProfileId),\n+                        mutationEventKeyword,\n+                        Long.toString(entrezGeneId),\n+                        keywordCount,\n+                        Integer.toString(geneCount)\n+                );\n+            }\n+        }\n+    }\n+\n+    public static MultiKeyMap getMutationEventKeywordCountByGeneticProfileId(int geneticProfileId) throws DaoException {\n+        MultiKeyMap mutationEventKeywordCountByGeneticProfileId = new MultiKeyMap();\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+        try {\n+            con = JdbcUtil.getDbConnection(DaoMutation.class);\n+            pstmt = con.prepareStatement(\n+                    \"SELECT mutation_event.`KEYWORD`, mutation_event.`ENTREZ_GENE_ID`,  IF(mutation_event.`KEYWORD` IS NULL, 0, COUNT(DISTINCT(mutation.SAMPLE_ID))) AS KEYWORD_COUNT \" +\n+                            \"FROM mutation_event JOIN mutation on mutation.`MUTATION_EVENT_ID` = mutation_event.`MUTATION_EVENT_ID` \" +\n+                            \"WHERE mutation.`GENETIC_PROFILE_ID` = ? \" +\n+                            \"GROUP BY mutation_event.`KEYWORD`, mutation_event.`ENTREZ_GENE_ID`;\"\n+            );\n+            pstmt.setInt(1, geneticProfileId);\n+            rs = pstmt.executeQuery();\n+            while (rs.next()) {\n+                mutationEventKeywordCountByGeneticProfileId.put(rs.getString(1), rs.getLong(2), rs.getInt(3));\n+            }\n+            return mutationEventKeywordCountByGeneticProfileId;\n+        } catch (SQLException e) {\n+            throw new DaoException(e);\n+        } finally {\n+            JdbcUtil.closeAll(DaoMutation.class, con, pstmt, rs);\n+        }\n+    }\n+\n+    public static Map<Long, Integer> getGeneCountByGeneticProfileId(int geneticProfileId) throws DaoException {\n+        Map<Long, Integer> geneCountByGeneticProfileId = new HashMap<>();\n         Connection con = null;\n         PreparedStatement pstmt = null;\n         ResultSet rs = null;\n         try {\n             con = JdbcUtil.getDbConnection(DaoMutation.class);\n             pstmt = con.prepareStatement(\n-                \"INSERT INTO mutation_count_by_keyword \" +\n-                    \"SELECT g2.`GENETIC_PROFILE_ID`, mutation_event.`KEYWORD`, m2.`ENTREZ_GENE_ID`, \" +\n-                    \"IF(mutation_event.`KEYWORD` IS NULL, 0, COUNT(DISTINCT(m2.SAMPLE_ID))) AS KEYWORD_COUNT, \" +\n-                    \"(SELECT COUNT(DISTINCT(m1.SAMPLE_ID)) FROM `mutation` AS m1 , `genetic_profile` AS g1 \" +\n-                    \"WHERE m1.`GENETIC_PROFILE_ID` = g1.`GENETIC_PROFILE_ID` \" +\n-                    \"AND g1.`GENETIC_PROFILE_ID`= g2.`GENETIC_PROFILE_ID` AND m1.`ENTREZ_GENE_ID` = m2.`ENTREZ_GENE_ID` \" +\n-                    \"GROUP BY g1.`GENETIC_PROFILE_ID` , m1.`ENTREZ_GENE_ID`) AS GENE_COUNT \" +\n-                    \"FROM `mutation` AS m2 , `genetic_profile` AS g2 , `mutation_event` \" +\n-                    \"WHERE m2.`GENETIC_PROFILE_ID` = g2.`GENETIC_PROFILE_ID` \" +\n-                    \"AND m2.`MUTATION_EVENT_ID` = mutation_event.`MUTATION_EVENT_ID` \" +\n-                    \"AND g2.`GENETIC_PROFILE_ID`=? \" +\n-                    \"GROUP BY g2.`GENETIC_PROFILE_ID` , mutation_event.`KEYWORD` , m2.`ENTREZ_GENE_ID`;\");\n-            pstmt.setInt(1, profileId);\n-            return pstmt.executeUpdate();\n+                \"SELECT ENTREZ_GENE_ID AS `ENTREZ_GENE_ID`, COUNT(DISTINCT(SAMPLE_ID)) AS `GENE_COUNT`\" +\n+                    \" FROM mutation WHERE GENETIC_PROFILE_ID = ? \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f7f5ae829f379015a04ef034acce39754009eec"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1698, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}