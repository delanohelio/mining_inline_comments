{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NjU0MTkw", "number": 7569, "title": "Disconnect gene panel code (importer) from business module.", "bodyText": "The first of a few PRs to disconnect and ultimately remove the business module.  This PR focuses on disconnecting the gene panel importer from the business layer.", "createdAt": "2020-06-02T15:18:40Z", "url": "https://github.com/cBioPortal/cbioportal/pull/7569", "merged": true, "mergeCommit": {"oid": "330e4f08d76713756845256c332af974d876d74c"}, "closed": true, "closedAt": "2020-06-03T17:47:19Z", "author": {"login": "n1zea144"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnX-jOAFqTQyMjgzODc0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnsvWMAFqTQyMzc2NzU0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyODM4NzQ0", "url": "https://github.com/cBioPortal/cbioportal/pull/7569#pullrequestreview-422838744", "createdAt": "2020-06-02T16:10:56Z", "commit": {"oid": "cf92ea92e35d1fbc5f11cb349bd10b0c8b400e38"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoxMDo1N1rOGd5WDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzowNDozM1rOGd7ZQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMTQyMA==", "bodyText": "rs is declared to null but never set again", "url": "https://github.com/cBioPortal/cbioportal/pull/7569#discussion_r434001420", "createdAt": "2020-06-02T16:10:57Z", "author": {"login": "kalletlak"}, "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -57,28 +53,132 @@ public static GenePanel getGenePanelByStableId(String stableId) {\n         PreparedStatement pstmt = null;\n         ResultSet rs = null;\n         try {\n-            con = JdbcUtil.getDbConnection(DaoCancerStudy.class);\n+            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n             pstmt = con.prepareStatement(\"SELECT * FROM gene_panel\");\n             rs = pstmt.executeQuery();\n             genePanelMap = extractGenePanelMap(rs);\n         } catch (SQLException e) {\n             e.printStackTrace();\n+        } catch (DaoException e) {\n+            e.printStackTrace();\n         } finally {\n-            JdbcUtil.closeAll(DaoCancerStudy.class, con, pstmt, rs);\n+            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n         }\n         return genePanelMap;\n     }\n \n-    private static Map<String, GenePanel> extractGenePanelMap(ResultSet rs) throws SQLException {\n+    private static Map<String, GenePanel> extractGenePanelMap(ResultSet rs) throws DaoException {\n         Map<String, GenePanel> genePanelMap = new HashMap<>();\n-        while(rs.next()) {\n-            GenePanel gp = new GenePanel();\n-            gp.setInternalId(rs.getInt(\"INTERNAL_ID\"));\n-            gp.setStableId(rs.getString(\"STABLE_ID\"));\n-            gp.setDescription(rs.getString(\"DESCRIPTION\"));\n-            genePanelMap.put(gp.getStableId(), gp);\n+        try {\n+            while(rs.next()) {\n+                GenePanel gp = new GenePanel();\n+                gp.setInternalId(rs.getInt(\"INTERNAL_ID\"));\n+                gp.setStableId(rs.getString(\"STABLE_ID\"));\n+                gp.setDescription(rs.getString(\"DESCRIPTION\"));\n+                gp.setGenes(extractGenePanelGenes(gp.getInternalId()));\n+                genePanelMap.put(gp.getStableId(), gp);\n+            }\n+        }\n+        catch (SQLException e) {\n+            throw new DaoException(e);\n         }\n         return genePanelMap;\n     }\n \n+    private static Set<CanonicalGene> extractGenePanelGenes(Integer genePanelId) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+        HashSet<CanonicalGene> toReturn = new HashSet<CanonicalGene>();\n+        try {\n+            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n+            pstmt = con.prepareStatement(\"SELECT * FROM gene_panel_list where INTERNAL_ID = ?\");\n+            pstmt.setInt(1, genePanelId);\n+            pstmt.executeUpdate();\n+            DaoGeneOptimized daoGeneOpt = DaoGeneOptimized.getInstance();\n+            while (rs.next()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf92ea92e35d1fbc5f11cb349bd10b0c8b400e38"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMjI3Mg==", "bodyText": "may be rs = pstmt.executeQuery() at line 97", "url": "https://github.com/cBioPortal/cbioportal/pull/7569#discussion_r434002272", "createdAt": "2020-06-02T16:12:14Z", "author": {"login": "kalletlak"}, "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -57,28 +53,132 @@ public static GenePanel getGenePanelByStableId(String stableId) {\n         PreparedStatement pstmt = null;\n         ResultSet rs = null;\n         try {\n-            con = JdbcUtil.getDbConnection(DaoCancerStudy.class);\n+            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n             pstmt = con.prepareStatement(\"SELECT * FROM gene_panel\");\n             rs = pstmt.executeQuery();\n             genePanelMap = extractGenePanelMap(rs);\n         } catch (SQLException e) {\n             e.printStackTrace();\n+        } catch (DaoException e) {\n+            e.printStackTrace();\n         } finally {\n-            JdbcUtil.closeAll(DaoCancerStudy.class, con, pstmt, rs);\n+            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n         }\n         return genePanelMap;\n     }\n \n-    private static Map<String, GenePanel> extractGenePanelMap(ResultSet rs) throws SQLException {\n+    private static Map<String, GenePanel> extractGenePanelMap(ResultSet rs) throws DaoException {\n         Map<String, GenePanel> genePanelMap = new HashMap<>();\n-        while(rs.next()) {\n-            GenePanel gp = new GenePanel();\n-            gp.setInternalId(rs.getInt(\"INTERNAL_ID\"));\n-            gp.setStableId(rs.getString(\"STABLE_ID\"));\n-            gp.setDescription(rs.getString(\"DESCRIPTION\"));\n-            genePanelMap.put(gp.getStableId(), gp);\n+        try {\n+            while(rs.next()) {\n+                GenePanel gp = new GenePanel();\n+                gp.setInternalId(rs.getInt(\"INTERNAL_ID\"));\n+                gp.setStableId(rs.getString(\"STABLE_ID\"));\n+                gp.setDescription(rs.getString(\"DESCRIPTION\"));\n+                gp.setGenes(extractGenePanelGenes(gp.getInternalId()));\n+                genePanelMap.put(gp.getStableId(), gp);\n+            }\n+        }\n+        catch (SQLException e) {\n+            throw new DaoException(e);\n         }\n         return genePanelMap;\n     }\n \n+    private static Set<CanonicalGene> extractGenePanelGenes(Integer genePanelId) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+        HashSet<CanonicalGene> toReturn = new HashSet<CanonicalGene>();\n+        try {\n+            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n+            pstmt = con.prepareStatement(\"SELECT * FROM gene_panel_list where INTERNAL_ID = ?\");\n+            pstmt.setInt(1, genePanelId);\n+            pstmt.executeUpdate();\n+            DaoGeneOptimized daoGeneOpt = DaoGeneOptimized.getInstance();\n+            while (rs.next()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMTQyMA=="}, "originalCommit": {"oid": "cf92ea92e35d1fbc5f11cb349bd10b0c8b400e38"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxNjA4Nw==", "bodyText": "I think we can remove daoGeneOptimized parameter and declared it inside getGenes method", "url": "https://github.com/cBioPortal/cbioportal/pull/7569#discussion_r434016087", "createdAt": "2020-06-02T16:34:10Z", "author": {"login": "kalletlak"}, "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/ImportGenePanel.java", "diffHunk": "@@ -92,39 +90,31 @@ public void importData() throws Exception {\n         Properties properties = new Properties();\n         properties.load(new FileInputStream(genePanelFile));\n \n-        GenePanelRepositoryLegacy genePanelRepositoryLegacy = (GenePanelRepositoryLegacy)SpringUtil.getApplicationContext().getBean(\"genePanelRepositoryLegacy\");\n+        DaoGeneOptimized daoGeneOptimized = DaoGeneOptimized.getInstance();\n \n         String stableId = getPropertyValue(\"stable_id\", properties, true);\n         String description = getPropertyValue(\"description\", properties, false);\n-        Set<Integer> genes = getGenes(\"gene_list\", properties, genePanelRepositoryLegacy);\n+        Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties, daoGeneOptimized);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf92ea92e35d1fbc5f11cb349bd10b0c8b400e38"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyMTYwMg==", "bodyText": "may be a comment explaining why just one gene is added to canonicalGenes", "url": "https://github.com/cBioPortal/cbioportal/pull/7569#discussion_r434021602", "createdAt": "2020-06-02T16:42:40Z", "author": {"login": "kalletlak"}, "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/ImportGenePanel.java", "diffHunk": "@@ -143,39 +133,37 @@ private static String getPropertyValue(String propertyName, Properties propertie\n         return propertyValue;\n     }\n \n-    private static Set<Integer> getGenes(String propertyName, Properties properties, GenePanelRepositoryLegacy genePanelRepositoryLegacy) {\n+    private static Set<CanonicalGene> getGenes(String propertyName, Properties properties, DaoGeneOptimized daoGeneOptimized) {\n         String propertyValue = properties.getProperty(propertyName).trim();\n         if (propertyValue == null || propertyValue.length() == 0) {\n             throw new IllegalArgumentException(propertyName + \" is not specified.\");\n         }\n \n-        Set<Integer> geneIds = new HashSet<>();\n+        Set<CanonicalGene> canonicalGenes = new HashSet<CanonicalGene>();\n         String[] genes = propertyValue.split(\"\\t\");\n         for (String panelGene : genes) {\n-            Gene gene = null;\n             try {\n-                Integer geneId = Integer.parseInt(panelGene);\n-                gene = genePanelRepositoryLegacy.getGeneByEntrezGeneId(geneId);\n-                if (gene != null) {\n-                    geneIds.add(geneId);\n+                Long geneId = Long.parseLong(panelGene);\n+                CanonicalGene canonicalGene = daoGeneOptimized.getGene(geneId);\n+                if (canonicalGene != null) {\n+                    canonicalGenes.add(canonicalGene);\n                 }\n                 else {\n-                    throw new RuntimeException(\"Could not find gene in the database: \" + String.valueOf(geneId));\n+                    ProgressMonitor.logWarning(\"Could not find gene in the database: \" + String.valueOf(geneId));\n                 }\n             }\n             catch (NumberFormatException e) {\n-                gene = genePanelRepositoryLegacy.getGeneByHugoSymbol(panelGene);\n-                if (gene == null) {\n-                    gene = genePanelRepositoryLegacy.getGeneByAlias(panelGene);\n+                List<CanonicalGene> canonicalGenesList = daoGeneOptimized.getGene(panelGene, true);\n+                if (canonicalGenesList != null && !canonicalGenesList.isEmpty()) {\n+                    canonicalGenes.add(canonicalGenesList.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf92ea92e35d1fbc5f11cb349bd10b0c8b400e38"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyMjQzMA==", "bodyText": "any reason to return empty set when condition fails?", "url": "https://github.com/cBioPortal/cbioportal/pull/7569#discussion_r434022430", "createdAt": "2020-06-02T16:44:04Z", "author": {"login": "kalletlak"}, "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/ImportGenePanel.java", "diffHunk": "@@ -143,39 +133,37 @@ private static String getPropertyValue(String propertyName, Properties propertie\n         return propertyValue;\n     }\n \n-    private static Set<Integer> getGenes(String propertyName, Properties properties, GenePanelRepositoryLegacy genePanelRepositoryLegacy) {\n+    private static Set<CanonicalGene> getGenes(String propertyName, Properties properties, DaoGeneOptimized daoGeneOptimized) {\n         String propertyValue = properties.getProperty(propertyName).trim();\n         if (propertyValue == null || propertyValue.length() == 0) {\n             throw new IllegalArgumentException(propertyName + \" is not specified.\");\n         }\n \n-        Set<Integer> geneIds = new HashSet<>();\n+        Set<CanonicalGene> canonicalGenes = new HashSet<CanonicalGene>();\n         String[] genes = propertyValue.split(\"\\t\");\n         for (String panelGene : genes) {\n-            Gene gene = null;\n             try {\n-                Integer geneId = Integer.parseInt(panelGene);\n-                gene = genePanelRepositoryLegacy.getGeneByEntrezGeneId(geneId);\n-                if (gene != null) {\n-                    geneIds.add(geneId);\n+                Long geneId = Long.parseLong(panelGene);\n+                CanonicalGene canonicalGene = daoGeneOptimized.getGene(geneId);\n+                if (canonicalGene != null) {\n+                    canonicalGenes.add(canonicalGene);\n                 }\n                 else {\n-                    throw new RuntimeException(\"Could not find gene in the database: \" + String.valueOf(geneId));\n+                    ProgressMonitor.logWarning(\"Could not find gene in the database: \" + String.valueOf(geneId));\n                 }\n             }\n             catch (NumberFormatException e) {\n-                gene = genePanelRepositoryLegacy.getGeneByHugoSymbol(panelGene);\n-                if (gene == null) {\n-                    gene = genePanelRepositoryLegacy.getGeneByAlias(panelGene);\n+                List<CanonicalGene> canonicalGenesList = daoGeneOptimized.getGene(panelGene, true);\n+                if (canonicalGenesList != null && !canonicalGenesList.isEmpty()) {\n+                    canonicalGenes.add(canonicalGenesList.get(0));\n                 }\n-\n-                if (gene != null) {\n-                    geneIds.add(gene.getEntrezGeneId());\n+                else {\n+                    ProgressMonitor.logWarning(\"Could not find gene in the database: \" + panelGene);\n                 }\n             }\n         }\n \n-        return geneIds;\n+        return (canonicalGenes.size() == genes.length) ? canonicalGenes : Collections.emptySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf92ea92e35d1fbc5f11cb349bd10b0c8b400e38"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzNDYzOQ==", "bodyText": "missing indentation 67-69", "url": "https://github.com/cBioPortal/cbioportal/pull/7569#discussion_r434034639", "createdAt": "2020-06-02T17:03:50Z", "author": {"login": "kalletlak"}, "path": "core/src/test/java/org/mskcc/cbio/portal/dao/TestDaoGenePanel.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2020 Memorial Sloan-Kettering Cancer Center.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.mskcc.cbio.portal.dao;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.model.*;\n+\n+import org.springframework.test.annotation.Rollback;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import static org.junit.Assert.*;\n+\n+import java.util.*;\n+\n+/**\n+ * JUnit Tests for DaoGenePanel.\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = { \"classpath:/applicationContext-dao.xml\" })\n+@Rollback\n+@Transactional\n+public class TestDaoGenePanel {\n+\n+    /**\n+     * Tests DaoGenePanel.addGenePanel().\n+     * @throws DaoException Database Error.\n+     */\n+\t@Test\n+    public void testAddGenePanel() throws DaoException {\n+\n+\t\tCanonicalGene brca1 = DaoGeneOptimized.getInstance().getGene(\"BRCA1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf92ea92e35d1fbc5f11cb349bd10b0c8b400e38"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzNTAxMA==", "bodyText": "missing indentation. even at line 65-68", "url": "https://github.com/cBioPortal/cbioportal/pull/7569#discussion_r434035010", "createdAt": "2020-06-02T17:04:33Z", "author": {"login": "kalletlak"}, "path": "core/src/test/java/org/mskcc/cbio/portal/dao/TestDaoSampleProfile.java", "diffHunk": "@@ -55,18 +56,29 @@\n public class TestDaoSampleProfile {\n \n \tCancerStudy study;\n+    GenePanel genePanel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf92ea92e35d1fbc5f11cb349bd10b0c8b400e38"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf92ea92e35d1fbc5f11cb349bd10b0c8b400e38", "author": {"user": {"login": "n1zea144", "name": null}}, "url": "https://github.com/cBioPortal/cbioportal/commit/cf92ea92e35d1fbc5f11cb349bd10b0c8b400e38", "committedDate": "2020-06-02T15:15:08Z", "message": "Disconnect gene panel code from business module."}, "afterCommit": {"oid": "c41a4c170973f7f0d55c3054b57708dab342d25b", "author": {"user": {"login": "n1zea144", "name": null}}, "url": "https://github.com/cBioPortal/cbioportal/commit/c41a4c170973f7f0d55c3054b57708dab342d25b", "committedDate": "2020-06-02T18:37:41Z", "message": "Disconnect gene panel code from business module."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c41a4c170973f7f0d55c3054b57708dab342d25b", "author": {"user": {"login": "n1zea144", "name": null}}, "url": "https://github.com/cBioPortal/cbioportal/commit/c41a4c170973f7f0d55c3054b57708dab342d25b", "committedDate": "2020-06-02T18:37:41Z", "message": "Disconnect gene panel code from business module."}, "afterCommit": {"oid": "2e0994c88086af906fb1c2b8ae67bab2f2a91137", "author": {"user": {"login": "n1zea144", "name": null}}, "url": "https://github.com/cBioPortal/cbioportal/commit/2e0994c88086af906fb1c2b8ae67bab2f2a91137", "committedDate": "2020-06-02T18:43:07Z", "message": "Disconnect gene panel code from business module."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyOTgzMDc3", "url": "https://github.com/cBioPortal/cbioportal/pull/7569#pullrequestreview-422983077", "createdAt": "2020-06-02T19:14:04Z", "commit": {"oid": "2e0994c88086af906fb1c2b8ae67bab2f2a91137"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNzMyNzQ5", "url": "https://github.com/cBioPortal/cbioportal/pull/7569#pullrequestreview-423732749", "createdAt": "2020-06-03T16:32:03Z", "commit": {"oid": "2e0994c88086af906fb1c2b8ae67bab2f2a91137"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a17267d1e0f0c3a50d31335c46ae5589c16390ff", "author": {"user": {"login": "n1zea144", "name": null}}, "url": "https://github.com/cBioPortal/cbioportal/commit/a17267d1e0f0c3a50d31335c46ae5589c16390ff", "committedDate": "2020-06-03T17:07:03Z", "message": "Disconnect gene panel code from business module."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e0994c88086af906fb1c2b8ae67bab2f2a91137", "author": {"user": {"login": "n1zea144", "name": null}}, "url": "https://github.com/cBioPortal/cbioportal/commit/2e0994c88086af906fb1c2b8ae67bab2f2a91137", "committedDate": "2020-06-02T18:43:07Z", "message": "Disconnect gene panel code from business module."}, "afterCommit": {"oid": "a17267d1e0f0c3a50d31335c46ae5589c16390ff", "author": {"user": {"login": "n1zea144", "name": null}}, "url": "https://github.com/cBioPortal/cbioportal/commit/a17267d1e0f0c3a50d31335c46ae5589c16390ff", "committedDate": "2020-06-03T17:07:03Z", "message": "Disconnect gene panel code from business module."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNzY3NTQ1", "url": "https://github.com/cBioPortal/cbioportal/pull/7569#pullrequestreview-423767545", "createdAt": "2020-06-03T17:16:40Z", "commit": {"oid": "2e0994c88086af906fb1c2b8ae67bab2f2a91137"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1607, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}