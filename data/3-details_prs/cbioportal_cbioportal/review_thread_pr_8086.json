{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MzM3MjQ0", "number": 8086, "reviewThreads": {"totalCount": 54, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTozMDozMFrOFA8omA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNTo0MToxNlrOFR8d7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTM3NzUyOnYy", "diffSide": "RIGHT", "path": "db-scripts/src/main/resources/migration.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTozMDozMFrOH_fD1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDowNzo1MFrOIIkMcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMTIyMQ==", "bodyText": "this won't work as migration if your already running 2.12.7 - maybe best to create a 2.12.8 migration and add indices to the existing table", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r536331221", "createdAt": "2020-12-04T19:30:30Z", "author": {"login": "inodb"}, "path": "db-scripts/src/main/resources/migration.sql", "diffHunk": "@@ -904,7 +904,8 @@ CREATE TABLE `alteration_driver_annotation` (\n   `DRIVER_TIERS_FILTER_ANNOTATION` VARCHAR(80),\n   PRIMARY KEY (`ALTERATION_EVENT_ID`, `GENETIC_PROFILE_ID`, `SAMPLE_ID`),\n   FOREIGN KEY (`GENETIC_PROFILE_ID`) REFERENCES `genetic_profile` (`GENETIC_PROFILE_ID`) ON DELETE CASCADE,\n-  FOREIGN KEY (`SAMPLE_ID`) REFERENCES `sample` (`INTERNAL_ID`) ON DELETE CASCADE\n+  FOREIGN KEY (`SAMPLE_ID`) REFERENCES `sample` (`INTERNAL_ID`) ON DELETE CASCADE,\n+  INDEX (`DRIVER_FILTER`)\n ) COMMENT='Alteration driver annotation';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "514a0f10ca818f899f21c4473e364b40986d2260"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1MjUyOA==", "bodyText": "Ah yes, moved this to a new version section.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r545852528", "createdAt": "2020-12-18T14:07:50Z", "author": {"login": "pvannierop"}, "path": "db-scripts/src/main/resources/migration.sql", "diffHunk": "@@ -904,7 +904,8 @@ CREATE TABLE `alteration_driver_annotation` (\n   `DRIVER_TIERS_FILTER_ANNOTATION` VARCHAR(80),\n   PRIMARY KEY (`ALTERATION_EVENT_ID`, `GENETIC_PROFILE_ID`, `SAMPLE_ID`),\n   FOREIGN KEY (`GENETIC_PROFILE_ID`) REFERENCES `genetic_profile` (`GENETIC_PROFILE_ID`) ON DELETE CASCADE,\n-  FOREIGN KEY (`SAMPLE_ID`) REFERENCES `sample` (`INTERNAL_ID`) ON DELETE CASCADE\n+  FOREIGN KEY (`SAMPLE_ID`) REFERENCES `sample` (`INTERNAL_ID`) ON DELETE CASCADE,\n+  INDEX (`DRIVER_FILTER`)\n ) COMMENT='Alteration driver annotation';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMTIyMQ=="}, "originalCommit": {"oid": "514a0f10ca818f899f21c4473e364b40986d2260"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDgxMTc2OnYy", "diffSide": "RIGHT", "path": "db-scripts/src/main/resources/migration.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODozNjoxNFrOIN8eJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxOToyOTo1OFrOIWd8Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5MzE1Nw==", "bodyText": "with this update in the migration.sql file, a corresponding change should be made to the final line in cgds.sql. Also I am not clear on why two index additions are made within the section for 2.12.7 ... shouldn't all the new changes be in the section which introduces schema 2.12.8?", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r551493157", "createdAt": "2021-01-04T18:36:14Z", "author": {"login": "sheridancbio"}, "path": "db-scripts/src/main/resources/migration.sql", "diffHunk": "@@ -928,4 +928,10 @@ drop column `DRIVER_FILTER`,\n drop column `DRIVER_FILTER_ANNOTATION`,\n drop column `DRIVER_TIERS_FILTER`,\n drop column `DRIVER_TIERS_FILTER_ANNOTATION`;\n-UPDATE `info` SET `DB_SCHEMA_VERSION`=\"2.12.7\";\n\\ No newline at end of file\n+CREATE INDEX idx_mutation_type ON mutation_event (`MUTATION_TYPE`);\n+CREATE INDEX idx_cna_type ON cna_event (`ALTERATION`);\n+UPDATE `info` SET `DB_SCHEMA_VERSION`=\"2.12.7\";\n+\n+##version: 2.12.8\n+CREATE INDEX idx_driver_filter ON alteration_driver_annotation (`DRIVER_FILTER`);\n+UPDATE `info` SET `DB_SCHEMA_VERSION`=\"2.12.8\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQzMDE1MQ==", "bodyText": "this was done", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560430151", "createdAt": "2021-01-19T19:29:58Z", "author": {"login": "sheridancbio"}, "path": "db-scripts/src/main/resources/migration.sql", "diffHunk": "@@ -928,4 +928,10 @@ drop column `DRIVER_FILTER`,\n drop column `DRIVER_FILTER_ANNOTATION`,\n drop column `DRIVER_TIERS_FILTER`,\n drop column `DRIVER_TIERS_FILTER_ANNOTATION`;\n-UPDATE `info` SET `DB_SCHEMA_VERSION`=\"2.12.7\";\n\\ No newline at end of file\n+CREATE INDEX idx_mutation_type ON mutation_event (`MUTATION_TYPE`);\n+CREATE INDEX idx_cna_type ON cna_event (`ALTERATION`);\n+UPDATE `info` SET `DB_SCHEMA_VERSION`=\"2.12.7\";\n+\n+##version: 2.12.8\n+CREATE INDEX idx_driver_filter ON alteration_driver_annotation (`DRIVER_FILTER`);\n+UPDATE `info` SET `DB_SCHEMA_VERSION`=\"2.12.8\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5MzE1Nw=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTE1NzQ4OnYy", "diffSide": "RIGHT", "path": "model/src/main/java/org/cbioportal/model/CopyNumberAlterationEventType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDoxOTowMFrOIN_smg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwOTo0NjoxNlrOIR5gDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0NjAxMA==", "bodyText": "is model/src/main/java/org/cbioportal/model/CNA.java not appropriate? I guess this is a subset of that.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r551546010", "createdAt": "2021-01-04T20:19:00Z", "author": {"login": "sheridancbio"}, "path": "model/src/main/java/org/cbioportal/model/CopyNumberAlterationEventType.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.cbioportal.model;\n+\n+public enum CopyNumberAlterationEventType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMTczNA==", "bodyText": "ah ha .. I see that this class came down from the web layer. So it used to specify the web layer argument options to the outside user. Like I said elsewhere in this PR, there is tension because of using the model module to represent types both for the persistence layer interface and also the web layer interface. It seems redundant to have both enums (the full set plus the subset) in the model class. If we wanted to avoid that, I guess we could use the full set as the input type to the API but validate arguments passed in to the API endpoint to make sure no illegal argument arrives. I'm not positive that this is actually an accepted parameter anymore though. If not, then I really recommend we drop the subset enum.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r552201734", "createdAt": "2021-01-05T21:21:39Z", "author": {"login": "sheridancbio"}, "path": "model/src/main/java/org/cbioportal/model/CopyNumberAlterationEventType.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.cbioportal.model;\n+\n+public enum CopyNumberAlterationEventType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0NjAxMA=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTYzODc5Nw==", "bodyText": "Ah good catch, I replaced replaced CopyNumberAlterationEventType.java for CNA.java.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555638797", "createdAt": "2021-01-12T09:46:16Z", "author": {"login": "pvannierop"}, "path": "model/src/main/java/org/cbioportal/model/CopyNumberAlterationEventType.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.cbioportal.model;\n+\n+public enum CopyNumberAlterationEventType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0NjAxMA=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTIwNzY5OnYy", "diffSide": "RIGHT", "path": "model/src/main/java/org/cbioportal/model/util/QueryElement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDozNDo0MlrOIOAK0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwOTo0ODowOVrOIR5ljw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1Mzc0Ng==", "bodyText": "I'm unsure about creating this new util package in model. For this enum at least, it seems like it could moved up one level (to model)", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r551553746", "createdAt": "2021-01-04T20:34:42Z", "author": {"login": "sheridancbio"}, "path": "model/src/main/java/org/cbioportal/model/util/QueryElement.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.cbioportal.model.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY0MDIwNw==", "bodyText": "I moved QueryElement.java to org.cbioportal.model package.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555640207", "createdAt": "2021-01-12T09:48:09Z", "author": {"login": "pvannierop"}, "path": "model/src/main/java/org/cbioportal/model/util/QueryElement.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.cbioportal.model.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1Mzc0Ng=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTI3NjM2OnYy", "diffSide": "RIGHT", "path": "model/src/main/java/org/cbioportal/model/util/Select.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDo1Njo1NlrOIOAz_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNjo1MToxN1rOIYABWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NDI4Nw==", "bodyText": "This is a type passed in to service layer and persistence layer calls. It is not received by API endpoints.\nMy opinion (open for discussion) is that the model package should be mainly populated with POJO-like classes which are simple structure definitions without business logic. Plus enums. This class has semantics and functional implementation, which makes me want to suggest moving it out of the model module (perhaps to org.cbioportal.persistence.util) However, it is an argument type which can be passed in to calls to the persistence layer (although not the web layer.)\nEver since we introduced the model module, there has been some ambiguity about what belongs in it ... because it captures models used at both the persistence interface and the web interface. (There are additional web models for the api in the web module (org.cbioportal.web.parameter), but they are not visible to the lower packages in the stack). Perhaps this model module primarily captures the persistence interface parameter data types, many of which are used verbatim in the service and web layers. So ok .. I guess I have talked myself into thinking that this is an appropriate type for the model module. But if it is a datatype (a \"Select\") then I guess it should be in the model package rather than the util package and we should live with it as a non-pojo model.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r551564287", "createdAt": "2021-01-04T20:56:56Z", "author": {"login": "sheridancbio"}, "path": "model/src/main/java/org/cbioportal/model/util/Select.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.cbioportal.model.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY0MTUwMg==", "bodyText": "I think what I am struggling with here is that the Select class should be used in presistence, service and web modules. Is there a more appropriate location that is a common dependency for these modules?", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555641502", "createdAt": "2021-01-12T09:49:57Z", "author": {"login": "pvannierop"}, "path": "model/src/main/java/org/cbioportal/model/util/Select.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.cbioportal.model.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NDI4Nw=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ0NjYwNw==", "bodyText": "A while back, I tried to capture our module dependencies here : https://docs.google.com/document/d/1r3fJYmtzTj5qCC_xI9SkgI6k8N5TQuHnobmx75WAHa0/edit\nNote .. out of date .. there is no more business module for instance.\nAny class needed for the persistence layer must reside either in the persistence-api module or in the model module. If this is an argument type accepted by the persistence layer api, then it is correct to place it in the model module with the other classes which define the types accepted/delivered by the persistence-api. If we refactored our code base to be more clean, I think I would not share model classes up and down the persistence / service / web layers, but that is a separate discussion. My concern about this class is that it is not a plain/pojo data structure, but it has attached semantics. That is not the case with the bulk of the model module classes. Classes which have semantic functionality probably should be unit tested .. and I see that there is a SelectTest.java class in the core package. We don't need unit tests for the pojo classes in model, but for this class a test makes sense. I just would locate the test class in the same module as the tested class - so I request the test class be relocated to the model module.\nAlso, if this is an argument type accepted by the persistence layer api then I don't consider it a util (which I think of as helper classes which are only used within the module). So I would relocate it into package org.cbioportal.model and out of org.cbioportal.model.util", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560446607", "createdAt": "2021-01-19T19:57:11Z", "author": {"login": "sheridancbio"}, "path": "model/src/main/java/org/cbioportal/model/util/Select.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.cbioportal.model.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NDI4Nw=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDcxODcxNA==", "bodyText": "I do not know what to do here.\nYou proposed solution of moving the SelectTest does not work because unit tests placed in the model module do not run. That is the reason for me putting the SelectTest in the core module.\nWhen following your explanation I understand that the model module is for plain POJO models for the persistence layer. In that case I agree that Select class should not be placed there. But what to do with classes that are shared by basically all modules in the project? The Select class basically is used like java.util.List. Would this justify a new module that is used by all other modules?\nI am open to any alternative solution.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560718714", "createdAt": "2021-01-20T06:59:11Z", "author": {"login": "pvannierop"}, "path": "model/src/main/java/org/cbioportal/model/util/Select.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.cbioportal.model.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NDI4Nw=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk3NjA4MQ==", "bodyText": "Let's reach out to someone else to give input on this question. I wonder if @kalletlak or @Luke-Sikina have an opinion on the question of where it would be best to locate a class such as Select. (which module, and which package) This is a kind of wrapper class with some utility functions and semantics --- it is a type which is accepted as an argument by functions in the persistence-api interface. It has unit tests, but those are currently (in this PR) located in the core module because the model module currently is not configured to run unit tests. Any ideas on properly locating this class (and its tests)? I've expressed a mixed opinion in this PR but I'm uncertain.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560976081", "createdAt": "2021-01-20T13:54:33Z", "author": {"login": "sheridancbio"}, "path": "model/src/main/java/org/cbioportal/model/util/Select.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.cbioportal.model.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NDI4Nw=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAxOTEyMA==", "bodyText": "Since this a utility used across different module, may be it should be in its own module. which also makes testing easy. I would prefer to have it in a new module(something like utility/utils).", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r562019120", "createdAt": "2021-01-21T16:28:03Z", "author": {"login": "kalletlak"}, "path": "model/src/main/java/org/cbioportal/model/util/Select.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.cbioportal.model.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NDI4Nw=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAzMDAzMQ==", "bodyText": "Thank you for the comment @kalletlak. If this were in a separate module, it would need to be added as one of the dependencies for the persistence-api module (in pom.xml)\nAny thoughts on whether it is \"ok\" to be creating a new module to hold classes which have semantics which need testing and also are used in the persistence layer API interface? This is the first such class ... perhaps there will be others to come?", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r562030031", "createdAt": "2021-01-21T16:42:08Z", "author": {"login": "sheridancbio"}, "path": "model/src/main/java/org/cbioportal/model/util/Select.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.cbioportal.model.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NDI4Nw=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAzMTMxMw==", "bodyText": "Also note : this relocation may be done after the merge of this PR (as a post-merge refactoring task)", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r562031313", "createdAt": "2021-01-21T16:43:51Z", "author": {"login": "sheridancbio"}, "path": "model/src/main/java/org/cbioportal/model/util/Select.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.cbioportal.model.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NDI4Nw=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAzNzA4MQ==", "bodyText": "@sheridancbio I think it should be ok to create new module. Also we could move any existing utilities to this new module", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r562037081", "createdAt": "2021-01-21T16:51:17Z", "author": {"login": "kalletlak"}, "path": "model/src/main/java/org/cbioportal/model/util/Select.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.cbioportal.model.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NDI4Nw=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTM1NDIxOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/cbioportal/web/StudyViewController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMToyMzoxMFrOIOBjhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxOTo1OTowNFrOIWfCRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3NjQ1Mw==", "bodyText": "what happens if there are multiple CNA profiles? We only scan the first one? (or maybe this means the first profile connected per sample?)", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r551576453", "createdAt": "2021-01-04T21:23:10Z", "author": {"login": "sheridancbio"}, "path": "web/src/main/java/org/cbioportal/web/StudyViewController.java", "diffHunk": "@@ -276,13 +275,22 @@\n         @Valid @RequestAttribute(required = false, value = \"interceptedStudyViewFilter\") StudyViewFilter interceptedStudyViewFilter) throws StudyNotFoundException {\n \n         List<SampleIdentifier> filteredSampleIdentifiers = studyViewFilterApplier.apply(interceptedStudyViewFilter);\n-        List<MutationCountByGene> result = new ArrayList<>();\n+        List<AlterationCountByGene> result = new ArrayList<>();\n         if (!filteredSampleIdentifiers.isEmpty()) {\n             List<String> studyIds = new ArrayList<>();\n             List<String> sampleIds = new ArrayList<>();\n             studyViewFilterUtil.extractStudyAndSampleIds(filteredSampleIdentifiers, studyIds, sampleIds);\n-            result = mutationService.getSampleCountInMultipleMolecularProfiles(molecularProfileService\n-                .getFirstMutationProfileIds(studyIds, sampleIds), sampleIds, null, true, false);\n+            List<String> profileIdPerSample = molecularProfileService.getFirstDiscreteCNAProfileIds(studyIds, sampleIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY0NDY2MA==", "bodyText": "To be honest I do not know. I just followed the logic that was there in the original code:\n           result = mutationService.getSampleCountInMultipleMolecularProfiles(molecularProfileService\n                .getFirstMutationProfileIds(studyIds, sampleIds), sampleIds, null, true, false);", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555644660", "createdAt": "2021-01-12T09:54:22Z", "author": {"login": "pvannierop"}, "path": "web/src/main/java/org/cbioportal/web/StudyViewController.java", "diffHunk": "@@ -276,13 +275,22 @@\n         @Valid @RequestAttribute(required = false, value = \"interceptedStudyViewFilter\") StudyViewFilter interceptedStudyViewFilter) throws StudyNotFoundException {\n \n         List<SampleIdentifier> filteredSampleIdentifiers = studyViewFilterApplier.apply(interceptedStudyViewFilter);\n-        List<MutationCountByGene> result = new ArrayList<>();\n+        List<AlterationCountByGene> result = new ArrayList<>();\n         if (!filteredSampleIdentifiers.isEmpty()) {\n             List<String> studyIds = new ArrayList<>();\n             List<String> sampleIds = new ArrayList<>();\n             studyViewFilterUtil.extractStudyAndSampleIds(filteredSampleIdentifiers, studyIds, sampleIds);\n-            result = mutationService.getSampleCountInMultipleMolecularProfiles(molecularProfileService\n-                .getFirstMutationProfileIds(studyIds, sampleIds), sampleIds, null, true, false);\n+            List<String> profileIdPerSample = molecularProfileService.getFirstDiscreteCNAProfileIds(studyIds, sampleIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3NjQ1Mw=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ0ODA2OA==", "bodyText": "Ok .. if the business logic is not changed, we don't need to answer the question here. But I hope someone asked this question when the original logic was adopted.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560448068", "createdAt": "2021-01-19T19:59:04Z", "author": {"login": "sheridancbio"}, "path": "web/src/main/java/org/cbioportal/web/StudyViewController.java", "diffHunk": "@@ -276,13 +275,22 @@\n         @Valid @RequestAttribute(required = false, value = \"interceptedStudyViewFilter\") StudyViewFilter interceptedStudyViewFilter) throws StudyNotFoundException {\n \n         List<SampleIdentifier> filteredSampleIdentifiers = studyViewFilterApplier.apply(interceptedStudyViewFilter);\n-        List<MutationCountByGene> result = new ArrayList<>();\n+        List<AlterationCountByGene> result = new ArrayList<>();\n         if (!filteredSampleIdentifiers.isEmpty()) {\n             List<String> studyIds = new ArrayList<>();\n             List<String> sampleIds = new ArrayList<>();\n             studyViewFilterUtil.extractStudyAndSampleIds(filteredSampleIdentifiers, studyIds, sampleIds);\n-            result = mutationService.getSampleCountInMultipleMolecularProfiles(molecularProfileService\n-                .getFirstMutationProfileIds(studyIds, sampleIds), sampleIds, null, true, false);\n+            List<String> profileIdPerSample = molecularProfileService.getFirstDiscreteCNAProfileIds(studyIds, sampleIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3NjQ1Mw=="}, "originalCommit": {"oid": "b1959f181ebadee1367efcbe8218e34a7e92f71d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTAwMzAwOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/cbioportal/web/AlterationEnrichmentController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTowMTo0NVrOIOjdlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTowMTo0NVrOIOjdlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEzMTk4OQ==", "bodyText": "nice optimization for a common case", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r552131989", "createdAt": "2021-01-05T19:01:45Z", "author": {"login": "sheridancbio"}, "path": "web/src/main/java/org/cbioportal/web/AlterationEnrichmentController.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.cbioportal.web;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationEnrichmentService;\n+import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n+import org.cbioportal.web.config.annotation.InternalApi;\n+import org.cbioportal.web.parameter.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.validation.annotation.Validated;\n+import org.springframework.web.bind.annotation.*;\n+import springfox.documentation.annotations.ApiIgnore;\n+\n+import javax.validation.Valid;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+@InternalApi\n+@RestController\n+@Validated\n+@Api(tags = \"Alteration Enrichments\", description = \" \")\n+public class AlterationEnrichmentController {\n+\n+    @Autowired\n+    private AlterationEnrichmentService alterationEnrichmentService;\n+\n+    @PreAuthorize(\"hasPermission(#involvedCancerStudies, 'Collection<CancerStudyId>', 'read')\")\n+    @PostMapping(value = \"/alteration-enrichments/fetch\",\n+        consumes = MediaType.APPLICATION_JSON_VALUE,\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiOperation(\"Fetch alteration enrichments in molecular profiles\")\n+    public ResponseEntity<List<AlterationEnrichment>> fetchAlterationEnrichments(\n+        @ApiIgnore // prevent reference to this attribute in the swagger-ui interface\n+        @RequestAttribute(required = false, value = \"involvedCancerStudies\") Collection<String> involvedCancerStudies,\n+        @ApiIgnore\n+        // prevent reference to this attribute in the swagger-ui interface. this attribute is needed for the @PreAuthorize tag above.\n+        @Valid @RequestAttribute(required = false, value = \"interceptedMolecularProfileCasesGroupFilters\") List<MolecularProfileCasesGroupFilter> interceptedMolecularProfileCasesGroupFilters,\n+        @ApiIgnore\n+        @Valid @RequestAttribute(required = false, value = \"alterationEventTypes\") AlterationEventTypeFilter alterationEventTypes,\n+        @ApiParam(\"Type of the enrichment e.g. SAMPLE or PATIENT\")\n+        @RequestParam(defaultValue = \"SAMPLE\") EnrichmentType enrichmentType,\n+        @ApiParam(required = true, value = \"List of groups containing sample identifiers and list of Alteration Types\")\n+        @Valid @RequestBody(required = false) MolecularProfileCasesGroupAndAlterationTypeFilter groupsAndAlterationTypes) throws MolecularProfileNotFoundException {\n+\n+        Map<String, List<MolecularProfileCaseIdentifier>> groupCaseIdentifierSet = interceptedMolecularProfileCasesGroupFilters.stream()\n+            .collect(Collectors.toMap(MolecularProfileCasesGroupFilter::getName,\n+                MolecularProfileCasesGroupFilter::getMolecularProfileCaseIdentifiers));\n+\n+        Stream<MutationEventType> selectedMutations = alterationEventTypes.getMutationEventTypes().entrySet().stream()\n+            .filter(e -> e.getValue())\n+            .map(e -> e.getKey());\n+        Select<MutationEventType> mutationEventTypes = allOptionsSelected(alterationEventTypes.getMutationEventTypes()) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551cd2474c778fd2d4884cc3c4445e5646cae73"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTI1MzA0OnYy", "diffSide": "LEFT", "path": "web/src/main/java/org/cbioportal/web/ExpressionEnrichmentController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDoxODowNFrOIOl2XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDoxODowNFrOIOl2XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE3MTEwMA==", "bodyText": "I see .. this argument type is moving down to be used in the persistence layer", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r552171100", "createdAt": "2021-01-05T20:18:04Z", "author": {"login": "sheridancbio"}, "path": "web/src/main/java/org/cbioportal/web/ExpressionEnrichmentController.java", "diffHunk": "@@ -13,7 +13,7 @@\n import org.cbioportal.service.exception.GenericAssayNotFoundException;\n import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n import org.cbioportal.web.config.annotation.InternalApi;\n-import org.cbioportal.web.parameter.EnrichmentType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551cd2474c778fd2d4884cc3c4445e5646cae73"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTMxNDgwOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/cbioportal/web/StudyViewController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDozODo0M1rOIOmcDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMDoxMzozMlrOIR6nfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4MDc1MQ==", "bodyText": "minor optimization: perhaps the list containing AMP and HOMDEL could be constructed once only as a constant static data member\ne.g. private static final List CNA_TYPES_AMP_AND_HOMDEL=\nCollections.unmodifiableList(Arrays.asList(CopyNumberAlterationEventType.AMP, CopyNumberAlterationEventType.HOMDEL))\nThen it could be reused here each call:\nSelect cnaTypes = Select.byValues(CNA_TYPES_AMP_AND_HOMDEL);\nThis saves the (minor) cost of constructing and passing (and garbage collecting) the list each call to the api.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r552180751", "createdAt": "2021-01-05T20:38:43Z", "author": {"login": "sheridancbio"}, "path": "web/src/main/java/org/cbioportal/web/StudyViewController.java", "diffHunk": "@@ -349,14 +366,25 @@\n         @ApiIgnore // prevent reference to this attribute in the swagger-ui interface. this attribute is needed for the @PreAuthorize tag above.\n         @Valid @RequestAttribute(required = false, value = \"interceptedStudyViewFilter\") StudyViewFilter interceptedStudyViewFilter) throws StudyNotFoundException {\n \n+        // TODO refactor resolution of sampleids to List<MolecularProfileCaseIdentifier> and share between methods\n         List<SampleIdentifier> filteredSampleIdentifiers = studyViewFilterApplier.apply(interceptedStudyViewFilter);\n         List<CopyNumberCountByGene> result = new ArrayList<>();\n         if (!filteredSampleIdentifiers.isEmpty()) {\n             List<String> studyIds = new ArrayList<>();\n             List<String> sampleIds = new ArrayList<>();\n             studyViewFilterUtil.extractStudyAndSampleIds(filteredSampleIdentifiers, studyIds, sampleIds);\n-            result = discreteCopyNumberService.getSampleCountInMultipleMolecularProfiles(molecularProfileService\n-                .getFirstDiscreteCNAProfileIds(studyIds, sampleIds), sampleIds, null, Arrays.asList(-2, 2), true, false);\n+            List<String> profileIdPerSample = molecularProfileService.getFirstDiscreteCNAProfileIds(studyIds, sampleIds);\n+            List<MolecularProfileCaseIdentifier> caseIdentifiers = new ArrayList<>();\n+            for (int i = 0; i < profileIdPerSample.size(); i++) {\n+                caseIdentifiers.add(new MolecularProfileCaseIdentifier(sampleIds.get(i), profileIdPerSample.get(i)));\n+            }\n+            Select<CopyNumberAlterationEventType> cnaTypes = Select.byValues(Arrays.asList(CopyNumberAlterationEventType.AMP, CopyNumberAlterationEventType.HOMDEL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551cd2474c778fd2d4884cc3c4445e5646cae73"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY1NzA4Ng==", "bodyText": "Done!", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555657086", "createdAt": "2021-01-12T10:13:32Z", "author": {"login": "pvannierop"}, "path": "web/src/main/java/org/cbioportal/web/StudyViewController.java", "diffHunk": "@@ -349,14 +366,25 @@\n         @ApiIgnore // prevent reference to this attribute in the swagger-ui interface. this attribute is needed for the @PreAuthorize tag above.\n         @Valid @RequestAttribute(required = false, value = \"interceptedStudyViewFilter\") StudyViewFilter interceptedStudyViewFilter) throws StudyNotFoundException {\n \n+        // TODO refactor resolution of sampleids to List<MolecularProfileCaseIdentifier> and share between methods\n         List<SampleIdentifier> filteredSampleIdentifiers = studyViewFilterApplier.apply(interceptedStudyViewFilter);\n         List<CopyNumberCountByGene> result = new ArrayList<>();\n         if (!filteredSampleIdentifiers.isEmpty()) {\n             List<String> studyIds = new ArrayList<>();\n             List<String> sampleIds = new ArrayList<>();\n             studyViewFilterUtil.extractStudyAndSampleIds(filteredSampleIdentifiers, studyIds, sampleIds);\n-            result = discreteCopyNumberService.getSampleCountInMultipleMolecularProfiles(molecularProfileService\n-                .getFirstDiscreteCNAProfileIds(studyIds, sampleIds), sampleIds, null, Arrays.asList(-2, 2), true, false);\n+            List<String> profileIdPerSample = molecularProfileService.getFirstDiscreteCNAProfileIds(studyIds, sampleIds);\n+            List<MolecularProfileCaseIdentifier> caseIdentifiers = new ArrayList<>();\n+            for (int i = 0; i < profileIdPerSample.size(); i++) {\n+                caseIdentifiers.add(new MolecularProfileCaseIdentifier(sampleIds.get(i), profileIdPerSample.get(i)));\n+            }\n+            Select<CopyNumberAlterationEventType> cnaTypes = Select.byValues(Arrays.asList(CopyNumberAlterationEventType.AMP, CopyNumberAlterationEventType.HOMDEL));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4MDc1MQ=="}, "originalCommit": {"oid": "a551cd2474c778fd2d4884cc3c4445e5646cae73"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTQ1Njk1OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/cbioportal/web/parameter/AlterationEventTypeFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMToyMzoxMFrOIOnygg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMDoxNDoyNVrOIR6p2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMjg4Mg==", "bodyText": "Are there any lists in this class?", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r552202882", "createdAt": "2021-01-05T21:23:10Z", "author": {"login": "sheridancbio"}, "path": "web/src/main/java/org/cbioportal/web/parameter/AlterationEventTypeFilter.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.cbioportal.web.parameter;\n+\n+import org.cbioportal.model.CopyNumberAlterationEventType;\n+import org.cbioportal.model.MutationEventType;\n+\n+import java.util.List;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551cd2474c778fd2d4884cc3c4445e5646cae73"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY1NzY5MA==", "bodyText": "No, I removed obsolete imports.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555657690", "createdAt": "2021-01-12T10:14:25Z", "author": {"login": "pvannierop"}, "path": "web/src/main/java/org/cbioportal/web/parameter/AlterationEventTypeFilter.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.cbioportal.web.parameter;\n+\n+import org.cbioportal.model.CopyNumberAlterationEventType;\n+import org.cbioportal.model.MutationEventType;\n+\n+import java.util.List;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMjg4Mg=="}, "originalCommit": {"oid": "a551cd2474c778fd2d4884cc3c4445e5646cae73"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTU1NDkxOnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/cbioportal/web/AlterationEnrichmentControllerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTo0ODo1MVrOIOoz2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMDo1MTozNlrOIWhcrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIxOTYxMA==", "bodyText": "The name of this test says \"AllTypes\", but doesn't this mean that we are testing without CNA amplifications and without missense mutations?", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r552219610", "createdAt": "2021-01-05T21:48:51Z", "author": {"login": "sheridancbio"}, "path": "web/src/test/java/org/cbioportal/web/AlterationEnrichmentControllerTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+package org.cbioportal.web;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationEnrichmentService;\n+import org.cbioportal.web.parameter.AlterationEventTypeFilter;\n+import org.cbioportal.web.parameter.MolecularProfileCasesGroupAndAlterationTypeFilter;\n+import org.cbioportal.web.parameter.MolecularProfileCasesGroupFilter;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@WebAppConfiguration\n+@ContextConfiguration(\"/applicationContext-web-test.xml\")\n+@Configuration\n+public class AlterationEnrichmentControllerTest {\n+\n+    private static final int TEST_ENTREZ_GENE_ID_1 = 1;\n+    private static final String TEST_HUGO_GENE_SYMBOL_1 = \"test_hugo_gene_symbol_1\";\n+    private static final String TEST_CYTOBAND_1 = \"test_cytoband_1\";\n+    private static final int TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_1 = 1;\n+    private static final int TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_1 = 1;\n+    private static final BigDecimal TEST_P_VALUE_1 = new BigDecimal(1.1);\n+    private static final int TEST_ENTREZ_GENE_ID_2 = 2;\n+    private static final String TEST_HUGO_GENE_SYMBOL_2 = \"test_hugo_gene_symbol_2\";\n+    private static final String TEST_CYTOBAND_2 = \"test_cytoband_2\";\n+    private static final int TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_2 = 2;\n+    private static final int TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_2 = 2;\n+    private static final BigDecimal TEST_P_VALUE_2 = new BigDecimal(2.1);\n+    private static final int TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1 = 1;\n+    private static final int TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2 = 1;\n+\n+    @Autowired\n+    private WebApplicationContext wac;\n+\n+    @Autowired\n+    private AlterationEnrichmentService alterationEnrichmentService;\n+\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private MockMvc mockMvc;\n+    private ArrayList<AlterationEnrichment> alterationEnrichments;\n+    private AlterationEventTypeFilter eventTypes;\n+\n+    @Bean\n+    public AlterationEnrichmentService alterationEnrichmentService() {\n+        return Mockito.mock(AlterationEnrichmentService.class);\n+    }\n+\n+    private MolecularProfileCasesGroupAndAlterationTypeFilter filter;\n+        \n+    @Before\n+    public void setUp() throws Exception {\n+        Mockito.reset(alterationEnrichmentService);\n+\n+        alterationEnrichments = new ArrayList<>();\n+        AlterationEnrichment alterationEnrichment1 = new AlterationEnrichment();\n+        CountSummary alterationEnrichment1Set1Count = new CountSummary();\n+        CountSummary alterationEnrichment1Set2Count = new CountSummary();\n+        alterationEnrichment1.setEntrezGeneId(TEST_ENTREZ_GENE_ID_1);\n+        alterationEnrichment1.setHugoGeneSymbol(TEST_HUGO_GENE_SYMBOL_1);\n+        alterationEnrichment1.setCytoband(TEST_CYTOBAND_1);\n+        alterationEnrichment1.setpValue(TEST_P_VALUE_1);\n+        alterationEnrichment1Set1Count.setAlteredCount(TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_1);\n+        alterationEnrichment1Set1Count.setProfiledCount(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1);\n+        alterationEnrichment1Set2Count.setAlteredCount(TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_1);\n+        alterationEnrichment1Set2Count.setProfiledCount(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2);\n+        alterationEnrichment1.setCounts(Arrays.asList(alterationEnrichment1Set1Count,alterationEnrichment1Set2Count));\n+        alterationEnrichments.add(alterationEnrichment1);\n+\n+        AlterationEnrichment alterationEnrichment2 = new AlterationEnrichment();\n+        CountSummary alterationEnrichment2Set1Count = new CountSummary();\n+        CountSummary alterationEnrichment2Set2Count = new CountSummary();\n+        alterationEnrichment2.setEntrezGeneId(TEST_ENTREZ_GENE_ID_2);\n+        alterationEnrichment2.setHugoGeneSymbol(TEST_HUGO_GENE_SYMBOL_2);\n+        alterationEnrichment2.setCytoband(TEST_CYTOBAND_2);\n+        alterationEnrichment2.setpValue(TEST_P_VALUE_2);\n+        alterationEnrichment2Set1Count.setAlteredCount(TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_2);\n+        alterationEnrichment2Set1Count.setProfiledCount(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1);\n+        alterationEnrichment2Set2Count.setAlteredCount(TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_2);\n+        alterationEnrichment2Set2Count.setProfiledCount(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2);\n+        alterationEnrichment2.setCounts(Arrays.asList(alterationEnrichment2Set1Count,alterationEnrichment2Set2Count));\n+        alterationEnrichments.add(alterationEnrichment2);\n+\n+        MolecularProfileCaseIdentifier entity1 = new MolecularProfileCaseIdentifier();\n+        entity1.setCaseId(\"test_sample_id_1\");\n+        entity1.setMolecularProfileId(\"test_1_mutations\");\n+        MolecularProfileCaseIdentifier entity2 = new MolecularProfileCaseIdentifier();\n+        entity2.setCaseId(\"test_sample_id_2\");\n+        entity2.setMolecularProfileId(\"test_2_mutations\");\n+\n+        MolecularProfileCasesGroupFilter casesGroup1 = new MolecularProfileCasesGroupFilter();\n+        casesGroup1.setName(\"altered group\");\n+        casesGroup1.setMolecularProfileCaseIdentifiers(Arrays.asList(entity1));\n+\n+        MolecularProfileCasesGroupFilter casesGroup2 = new MolecularProfileCasesGroupFilter();\n+        casesGroup2.setName(\"unaltered group\");\n+        casesGroup2.setMolecularProfileCaseIdentifiers(Arrays.asList(entity2));\n+\n+        filter = new MolecularProfileCasesGroupAndAlterationTypeFilter();\n+        filter.setMolecularProfileCasesGroupFilter(Arrays.asList(casesGroup1,casesGroup2));\n+\n+        eventTypes = new AlterationEventTypeFilter();\n+        Map<MutationEventType, Boolean> mutationEventTypeMap = new HashMap();\n+        mutationEventTypeMap.put(MutationEventType.missense_mutation, true);\n+        Map<CopyNumberAlterationEventType, Boolean> cnaEventTypeMap = new HashMap();\n+        cnaEventTypeMap.put(CopyNumberAlterationEventType.AMP, true);\n+        eventTypes.setMutationEventTypes(mutationEventTypeMap);\n+        eventTypes.setCopyNumberAlterationEventTypes(cnaEventTypeMap);\n+        filter.setAlterationEventTypes(eventTypes);\n+        \n+        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();\n+        \n+    }\n+\n+    @Test\n+    public void fetchAlterationEnrichments() throws Exception {\n+\n+        when(alterationEnrichmentService.getAlterationEnrichments(\n+            anyMap(),\n+            any(Select.class),\n+            any(Select.class),\n+            any()))\n+            .thenReturn(alterationEnrichments);\n+        \n+        mockMvc.perform(MockMvcRequestBuilders.post(\n+            \"/alteration-enrichments/fetch\")\n+            .accept(MediaType.APPLICATION_JSON)\n+            .contentType(MediaType.APPLICATION_JSON)\n+            .content(objectMapper.writeValueAsString(filter)))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andExpect(MockMvcResultMatchers.content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$\", Matchers.hasSize(2)))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].entrezGeneId\").value(TEST_ENTREZ_GENE_ID_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].hugoGeneSymbol\").value(TEST_HUGO_GENE_SYMBOL_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].cytoband\").value(TEST_CYTOBAND_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].counts[0].alteredCount\").value(TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].counts[1].alteredCount\").value(TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].pValue\").value(TEST_P_VALUE_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].counts[0].profiledCount\").value(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].counts[1].profiledCount\").value(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].entrezGeneId\").value(TEST_ENTREZ_GENE_ID_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].hugoGeneSymbol\").value(TEST_HUGO_GENE_SYMBOL_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].cytoband\").value(TEST_CYTOBAND_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].counts[0].alteredCount\").value(TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].counts[1].alteredCount\").value(TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].pValue\").value(TEST_P_VALUE_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].counts[0].profiledCount\").value(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].counts[1].profiledCount\").value(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2));\n+    }\n+\n+    @Test\n+    public void fetchAlterationEnrichmentsAllTypes() throws Exception {\n+\n+        when(alterationEnrichmentService.getAlterationEnrichments(\n+            anyMap(),\n+            any(Select.class),\n+            any(Select.class),\n+            any()))\n+            .thenReturn(alterationEnrichments);\n+        \n+        filter.getAlterationEventTypes().getMutationEventTypes().put(MutationEventType.missense_mutation, false);\n+        filter.getAlterationEventTypes().getCopyNumberAlterationEventTypes().put(CopyNumberAlterationEventType.AMP, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551cd2474c778fd2d4884cc3c4445e5646cae73"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY4OTg3Nw==", "bodyText": "Ah man, these tests made no sense after I refactored the code long ago. I have updated the test logic so that it tests the passing of the alteration types and the correct for mation of the caseId structure. Can you please re-review this test file?\nAnd to answer your question: indeed the name was incorrect. The new test names and implementations now correctly match up.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555689877", "createdAt": "2021-01-12T11:06:10Z", "author": {"login": "pvannierop"}, "path": "web/src/test/java/org/cbioportal/web/AlterationEnrichmentControllerTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+package org.cbioportal.web;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationEnrichmentService;\n+import org.cbioportal.web.parameter.AlterationEventTypeFilter;\n+import org.cbioportal.web.parameter.MolecularProfileCasesGroupAndAlterationTypeFilter;\n+import org.cbioportal.web.parameter.MolecularProfileCasesGroupFilter;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@WebAppConfiguration\n+@ContextConfiguration(\"/applicationContext-web-test.xml\")\n+@Configuration\n+public class AlterationEnrichmentControllerTest {\n+\n+    private static final int TEST_ENTREZ_GENE_ID_1 = 1;\n+    private static final String TEST_HUGO_GENE_SYMBOL_1 = \"test_hugo_gene_symbol_1\";\n+    private static final String TEST_CYTOBAND_1 = \"test_cytoband_1\";\n+    private static final int TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_1 = 1;\n+    private static final int TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_1 = 1;\n+    private static final BigDecimal TEST_P_VALUE_1 = new BigDecimal(1.1);\n+    private static final int TEST_ENTREZ_GENE_ID_2 = 2;\n+    private static final String TEST_HUGO_GENE_SYMBOL_2 = \"test_hugo_gene_symbol_2\";\n+    private static final String TEST_CYTOBAND_2 = \"test_cytoband_2\";\n+    private static final int TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_2 = 2;\n+    private static final int TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_2 = 2;\n+    private static final BigDecimal TEST_P_VALUE_2 = new BigDecimal(2.1);\n+    private static final int TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1 = 1;\n+    private static final int TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2 = 1;\n+\n+    @Autowired\n+    private WebApplicationContext wac;\n+\n+    @Autowired\n+    private AlterationEnrichmentService alterationEnrichmentService;\n+\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private MockMvc mockMvc;\n+    private ArrayList<AlterationEnrichment> alterationEnrichments;\n+    private AlterationEventTypeFilter eventTypes;\n+\n+    @Bean\n+    public AlterationEnrichmentService alterationEnrichmentService() {\n+        return Mockito.mock(AlterationEnrichmentService.class);\n+    }\n+\n+    private MolecularProfileCasesGroupAndAlterationTypeFilter filter;\n+        \n+    @Before\n+    public void setUp() throws Exception {\n+        Mockito.reset(alterationEnrichmentService);\n+\n+        alterationEnrichments = new ArrayList<>();\n+        AlterationEnrichment alterationEnrichment1 = new AlterationEnrichment();\n+        CountSummary alterationEnrichment1Set1Count = new CountSummary();\n+        CountSummary alterationEnrichment1Set2Count = new CountSummary();\n+        alterationEnrichment1.setEntrezGeneId(TEST_ENTREZ_GENE_ID_1);\n+        alterationEnrichment1.setHugoGeneSymbol(TEST_HUGO_GENE_SYMBOL_1);\n+        alterationEnrichment1.setCytoband(TEST_CYTOBAND_1);\n+        alterationEnrichment1.setpValue(TEST_P_VALUE_1);\n+        alterationEnrichment1Set1Count.setAlteredCount(TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_1);\n+        alterationEnrichment1Set1Count.setProfiledCount(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1);\n+        alterationEnrichment1Set2Count.setAlteredCount(TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_1);\n+        alterationEnrichment1Set2Count.setProfiledCount(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2);\n+        alterationEnrichment1.setCounts(Arrays.asList(alterationEnrichment1Set1Count,alterationEnrichment1Set2Count));\n+        alterationEnrichments.add(alterationEnrichment1);\n+\n+        AlterationEnrichment alterationEnrichment2 = new AlterationEnrichment();\n+        CountSummary alterationEnrichment2Set1Count = new CountSummary();\n+        CountSummary alterationEnrichment2Set2Count = new CountSummary();\n+        alterationEnrichment2.setEntrezGeneId(TEST_ENTREZ_GENE_ID_2);\n+        alterationEnrichment2.setHugoGeneSymbol(TEST_HUGO_GENE_SYMBOL_2);\n+        alterationEnrichment2.setCytoband(TEST_CYTOBAND_2);\n+        alterationEnrichment2.setpValue(TEST_P_VALUE_2);\n+        alterationEnrichment2Set1Count.setAlteredCount(TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_2);\n+        alterationEnrichment2Set1Count.setProfiledCount(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1);\n+        alterationEnrichment2Set2Count.setAlteredCount(TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_2);\n+        alterationEnrichment2Set2Count.setProfiledCount(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2);\n+        alterationEnrichment2.setCounts(Arrays.asList(alterationEnrichment2Set1Count,alterationEnrichment2Set2Count));\n+        alterationEnrichments.add(alterationEnrichment2);\n+\n+        MolecularProfileCaseIdentifier entity1 = new MolecularProfileCaseIdentifier();\n+        entity1.setCaseId(\"test_sample_id_1\");\n+        entity1.setMolecularProfileId(\"test_1_mutations\");\n+        MolecularProfileCaseIdentifier entity2 = new MolecularProfileCaseIdentifier();\n+        entity2.setCaseId(\"test_sample_id_2\");\n+        entity2.setMolecularProfileId(\"test_2_mutations\");\n+\n+        MolecularProfileCasesGroupFilter casesGroup1 = new MolecularProfileCasesGroupFilter();\n+        casesGroup1.setName(\"altered group\");\n+        casesGroup1.setMolecularProfileCaseIdentifiers(Arrays.asList(entity1));\n+\n+        MolecularProfileCasesGroupFilter casesGroup2 = new MolecularProfileCasesGroupFilter();\n+        casesGroup2.setName(\"unaltered group\");\n+        casesGroup2.setMolecularProfileCaseIdentifiers(Arrays.asList(entity2));\n+\n+        filter = new MolecularProfileCasesGroupAndAlterationTypeFilter();\n+        filter.setMolecularProfileCasesGroupFilter(Arrays.asList(casesGroup1,casesGroup2));\n+\n+        eventTypes = new AlterationEventTypeFilter();\n+        Map<MutationEventType, Boolean> mutationEventTypeMap = new HashMap();\n+        mutationEventTypeMap.put(MutationEventType.missense_mutation, true);\n+        Map<CopyNumberAlterationEventType, Boolean> cnaEventTypeMap = new HashMap();\n+        cnaEventTypeMap.put(CopyNumberAlterationEventType.AMP, true);\n+        eventTypes.setMutationEventTypes(mutationEventTypeMap);\n+        eventTypes.setCopyNumberAlterationEventTypes(cnaEventTypeMap);\n+        filter.setAlterationEventTypes(eventTypes);\n+        \n+        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();\n+        \n+    }\n+\n+    @Test\n+    public void fetchAlterationEnrichments() throws Exception {\n+\n+        when(alterationEnrichmentService.getAlterationEnrichments(\n+            anyMap(),\n+            any(Select.class),\n+            any(Select.class),\n+            any()))\n+            .thenReturn(alterationEnrichments);\n+        \n+        mockMvc.perform(MockMvcRequestBuilders.post(\n+            \"/alteration-enrichments/fetch\")\n+            .accept(MediaType.APPLICATION_JSON)\n+            .contentType(MediaType.APPLICATION_JSON)\n+            .content(objectMapper.writeValueAsString(filter)))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andExpect(MockMvcResultMatchers.content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$\", Matchers.hasSize(2)))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].entrezGeneId\").value(TEST_ENTREZ_GENE_ID_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].hugoGeneSymbol\").value(TEST_HUGO_GENE_SYMBOL_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].cytoband\").value(TEST_CYTOBAND_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].counts[0].alteredCount\").value(TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].counts[1].alteredCount\").value(TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].pValue\").value(TEST_P_VALUE_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].counts[0].profiledCount\").value(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].counts[1].profiledCount\").value(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].entrezGeneId\").value(TEST_ENTREZ_GENE_ID_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].hugoGeneSymbol\").value(TEST_HUGO_GENE_SYMBOL_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].cytoband\").value(TEST_CYTOBAND_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].counts[0].alteredCount\").value(TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].counts[1].alteredCount\").value(TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].pValue\").value(TEST_P_VALUE_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].counts[0].profiledCount\").value(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].counts[1].profiledCount\").value(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2));\n+    }\n+\n+    @Test\n+    public void fetchAlterationEnrichmentsAllTypes() throws Exception {\n+\n+        when(alterationEnrichmentService.getAlterationEnrichments(\n+            anyMap(),\n+            any(Select.class),\n+            any(Select.class),\n+            any()))\n+            .thenReturn(alterationEnrichments);\n+        \n+        filter.getAlterationEventTypes().getMutationEventTypes().put(MutationEventType.missense_mutation, false);\n+        filter.getAlterationEventTypes().getCopyNumberAlterationEventTypes().put(CopyNumberAlterationEventType.AMP, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIxOTYxMA=="}, "originalCommit": {"oid": "a551cd2474c778fd2d4884cc3c4445e5646cae73"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ4NzU5Ng==", "bodyText": "Ok, looks good. I see the test which filters out missense mutations and HOMDEL alterations (partial filters). \ud83d\udc4d", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560487596", "createdAt": "2021-01-19T20:51:36Z", "author": {"login": "sheridancbio"}, "path": "web/src/test/java/org/cbioportal/web/AlterationEnrichmentControllerTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+package org.cbioportal.web;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationEnrichmentService;\n+import org.cbioportal.web.parameter.AlterationEventTypeFilter;\n+import org.cbioportal.web.parameter.MolecularProfileCasesGroupAndAlterationTypeFilter;\n+import org.cbioportal.web.parameter.MolecularProfileCasesGroupFilter;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@WebAppConfiguration\n+@ContextConfiguration(\"/applicationContext-web-test.xml\")\n+@Configuration\n+public class AlterationEnrichmentControllerTest {\n+\n+    private static final int TEST_ENTREZ_GENE_ID_1 = 1;\n+    private static final String TEST_HUGO_GENE_SYMBOL_1 = \"test_hugo_gene_symbol_1\";\n+    private static final String TEST_CYTOBAND_1 = \"test_cytoband_1\";\n+    private static final int TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_1 = 1;\n+    private static final int TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_1 = 1;\n+    private static final BigDecimal TEST_P_VALUE_1 = new BigDecimal(1.1);\n+    private static final int TEST_ENTREZ_GENE_ID_2 = 2;\n+    private static final String TEST_HUGO_GENE_SYMBOL_2 = \"test_hugo_gene_symbol_2\";\n+    private static final String TEST_CYTOBAND_2 = \"test_cytoband_2\";\n+    private static final int TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_2 = 2;\n+    private static final int TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_2 = 2;\n+    private static final BigDecimal TEST_P_VALUE_2 = new BigDecimal(2.1);\n+    private static final int TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1 = 1;\n+    private static final int TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2 = 1;\n+\n+    @Autowired\n+    private WebApplicationContext wac;\n+\n+    @Autowired\n+    private AlterationEnrichmentService alterationEnrichmentService;\n+\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private MockMvc mockMvc;\n+    private ArrayList<AlterationEnrichment> alterationEnrichments;\n+    private AlterationEventTypeFilter eventTypes;\n+\n+    @Bean\n+    public AlterationEnrichmentService alterationEnrichmentService() {\n+        return Mockito.mock(AlterationEnrichmentService.class);\n+    }\n+\n+    private MolecularProfileCasesGroupAndAlterationTypeFilter filter;\n+        \n+    @Before\n+    public void setUp() throws Exception {\n+        Mockito.reset(alterationEnrichmentService);\n+\n+        alterationEnrichments = new ArrayList<>();\n+        AlterationEnrichment alterationEnrichment1 = new AlterationEnrichment();\n+        CountSummary alterationEnrichment1Set1Count = new CountSummary();\n+        CountSummary alterationEnrichment1Set2Count = new CountSummary();\n+        alterationEnrichment1.setEntrezGeneId(TEST_ENTREZ_GENE_ID_1);\n+        alterationEnrichment1.setHugoGeneSymbol(TEST_HUGO_GENE_SYMBOL_1);\n+        alterationEnrichment1.setCytoband(TEST_CYTOBAND_1);\n+        alterationEnrichment1.setpValue(TEST_P_VALUE_1);\n+        alterationEnrichment1Set1Count.setAlteredCount(TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_1);\n+        alterationEnrichment1Set1Count.setProfiledCount(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1);\n+        alterationEnrichment1Set2Count.setAlteredCount(TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_1);\n+        alterationEnrichment1Set2Count.setProfiledCount(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2);\n+        alterationEnrichment1.setCounts(Arrays.asList(alterationEnrichment1Set1Count,alterationEnrichment1Set2Count));\n+        alterationEnrichments.add(alterationEnrichment1);\n+\n+        AlterationEnrichment alterationEnrichment2 = new AlterationEnrichment();\n+        CountSummary alterationEnrichment2Set1Count = new CountSummary();\n+        CountSummary alterationEnrichment2Set2Count = new CountSummary();\n+        alterationEnrichment2.setEntrezGeneId(TEST_ENTREZ_GENE_ID_2);\n+        alterationEnrichment2.setHugoGeneSymbol(TEST_HUGO_GENE_SYMBOL_2);\n+        alterationEnrichment2.setCytoband(TEST_CYTOBAND_2);\n+        alterationEnrichment2.setpValue(TEST_P_VALUE_2);\n+        alterationEnrichment2Set1Count.setAlteredCount(TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_2);\n+        alterationEnrichment2Set1Count.setProfiledCount(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1);\n+        alterationEnrichment2Set2Count.setAlteredCount(TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_2);\n+        alterationEnrichment2Set2Count.setProfiledCount(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2);\n+        alterationEnrichment2.setCounts(Arrays.asList(alterationEnrichment2Set1Count,alterationEnrichment2Set2Count));\n+        alterationEnrichments.add(alterationEnrichment2);\n+\n+        MolecularProfileCaseIdentifier entity1 = new MolecularProfileCaseIdentifier();\n+        entity1.setCaseId(\"test_sample_id_1\");\n+        entity1.setMolecularProfileId(\"test_1_mutations\");\n+        MolecularProfileCaseIdentifier entity2 = new MolecularProfileCaseIdentifier();\n+        entity2.setCaseId(\"test_sample_id_2\");\n+        entity2.setMolecularProfileId(\"test_2_mutations\");\n+\n+        MolecularProfileCasesGroupFilter casesGroup1 = new MolecularProfileCasesGroupFilter();\n+        casesGroup1.setName(\"altered group\");\n+        casesGroup1.setMolecularProfileCaseIdentifiers(Arrays.asList(entity1));\n+\n+        MolecularProfileCasesGroupFilter casesGroup2 = new MolecularProfileCasesGroupFilter();\n+        casesGroup2.setName(\"unaltered group\");\n+        casesGroup2.setMolecularProfileCaseIdentifiers(Arrays.asList(entity2));\n+\n+        filter = new MolecularProfileCasesGroupAndAlterationTypeFilter();\n+        filter.setMolecularProfileCasesGroupFilter(Arrays.asList(casesGroup1,casesGroup2));\n+\n+        eventTypes = new AlterationEventTypeFilter();\n+        Map<MutationEventType, Boolean> mutationEventTypeMap = new HashMap();\n+        mutationEventTypeMap.put(MutationEventType.missense_mutation, true);\n+        Map<CopyNumberAlterationEventType, Boolean> cnaEventTypeMap = new HashMap();\n+        cnaEventTypeMap.put(CopyNumberAlterationEventType.AMP, true);\n+        eventTypes.setMutationEventTypes(mutationEventTypeMap);\n+        eventTypes.setCopyNumberAlterationEventTypes(cnaEventTypeMap);\n+        filter.setAlterationEventTypes(eventTypes);\n+        \n+        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();\n+        \n+    }\n+\n+    @Test\n+    public void fetchAlterationEnrichments() throws Exception {\n+\n+        when(alterationEnrichmentService.getAlterationEnrichments(\n+            anyMap(),\n+            any(Select.class),\n+            any(Select.class),\n+            any()))\n+            .thenReturn(alterationEnrichments);\n+        \n+        mockMvc.perform(MockMvcRequestBuilders.post(\n+            \"/alteration-enrichments/fetch\")\n+            .accept(MediaType.APPLICATION_JSON)\n+            .contentType(MediaType.APPLICATION_JSON)\n+            .content(objectMapper.writeValueAsString(filter)))\n+            .andExpect(MockMvcResultMatchers.status().isOk())\n+            .andExpect(MockMvcResultMatchers.content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$\", Matchers.hasSize(2)))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].entrezGeneId\").value(TEST_ENTREZ_GENE_ID_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].hugoGeneSymbol\").value(TEST_HUGO_GENE_SYMBOL_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].cytoband\").value(TEST_CYTOBAND_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].counts[0].alteredCount\").value(TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].counts[1].alteredCount\").value(TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].pValue\").value(TEST_P_VALUE_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].counts[0].profiledCount\").value(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].counts[1].profiledCount\").value(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].entrezGeneId\").value(TEST_ENTREZ_GENE_ID_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].hugoGeneSymbol\").value(TEST_HUGO_GENE_SYMBOL_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].cytoband\").value(TEST_CYTOBAND_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].counts[0].alteredCount\").value(TEST_NUMBER_OF_SAMPLES_ALTERED_IN_SET_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].counts[1].alteredCount\").value(TEST_NUMBER_OF_SAMPLES_UNALTERED_IN_SET_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].pValue\").value(TEST_P_VALUE_2))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].counts[0].profiledCount\").value(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_1))\n+            .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].counts[1].profiledCount\").value(TEST_NUMBER_OF_SAMPLES_PROFILED_IN_SET_2));\n+    }\n+\n+    @Test\n+    public void fetchAlterationEnrichmentsAllTypes() throws Exception {\n+\n+        when(alterationEnrichmentService.getAlterationEnrichments(\n+            anyMap(),\n+            any(Select.class),\n+            any(Select.class),\n+            any()))\n+            .thenReturn(alterationEnrichments);\n+        \n+        filter.getAlterationEventTypes().getMutationEventTypes().put(MutationEventType.missense_mutation, false);\n+        filter.getAlterationEventTypes().getCopyNumberAlterationEventTypes().put(CopyNumberAlterationEventType.AMP, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIxOTYxMA=="}, "originalCommit": {"oid": "a551cd2474c778fd2d4884cc3c4445e5646cae73"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3ODMwNDk5OnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/cbioportal/web/StudyViewControllerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNDowNzo1NlrOIPCuSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMToyMTo0NVrOIWieDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY0NDE2OQ==", "bodyText": "I think we adopted the google java style guidelines, which forbid wildcards with import statements.\n(https://google.github.io/styleguide/javaguide.html#s3.3-import-statements)\nThat's overly restricted .. and I think use of them with built in packages, such as import java.util.* is fine ... but maybe for our own defined classes (which sometimes do have naming clashes across packages) we should be more explicit, showing the individual classes imported. It also can be helpful in terms of documentation ... to see what is connected to the current class. I think there was a similar collapse of web.parameter.* up higher in the code. I think I would prefer if we keep these details for our own packages (even if it is verbose)", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r552644169", "createdAt": "2021-01-06T14:07:56Z", "author": {"login": "sheridancbio"}, "path": "web/src/test/java/org/cbioportal/web/StudyViewControllerTest.java", "diffHunk": "@@ -5,24 +5,10 @@\n import java.util.Collections;\n import java.util.List;\n \n-import org.cbioportal.model.ClinicalAttribute;\n-import org.cbioportal.model.ClinicalData;\n-import org.cbioportal.model.ClinicalDataCount;\n-import org.cbioportal.model.ClinicalDataCountItem;\n-import org.cbioportal.model.CopyNumberCountByGene;\n-import org.cbioportal.model.GenePanelData;\n-import org.cbioportal.model.MolecularProfile;\n-import org.cbioportal.model.MutationCountByGene;\n-import org.cbioportal.model.Sample;\n-import org.cbioportal.service.ClinicalAttributeService;\n-import org.cbioportal.service.ClinicalDataService;\n-import org.cbioportal.service.DiscreteCopyNumberService;\n-import org.cbioportal.service.GenePanelService;\n-import org.cbioportal.service.MolecularProfileService;\n-import org.cbioportal.service.MutationService;\n-import org.cbioportal.service.PatientService;\n-import org.cbioportal.service.SampleService;\n-import org.cbioportal.service.TreatmentService;\n+import org.cbioportal.model.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY5NTIzMQ==", "bodyText": "Ah ok, this just happens when I automatically organize imports with IntelliJ. I have removed all wildcards from imports.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555695231", "createdAt": "2021-01-12T11:15:37Z", "author": {"login": "pvannierop"}, "path": "web/src/test/java/org/cbioportal/web/StudyViewControllerTest.java", "diffHunk": "@@ -5,24 +5,10 @@\n import java.util.Collections;\n import java.util.List;\n \n-import org.cbioportal.model.ClinicalAttribute;\n-import org.cbioportal.model.ClinicalData;\n-import org.cbioportal.model.ClinicalDataCount;\n-import org.cbioportal.model.ClinicalDataCountItem;\n-import org.cbioportal.model.CopyNumberCountByGene;\n-import org.cbioportal.model.GenePanelData;\n-import org.cbioportal.model.MolecularProfile;\n-import org.cbioportal.model.MutationCountByGene;\n-import org.cbioportal.model.Sample;\n-import org.cbioportal.service.ClinicalAttributeService;\n-import org.cbioportal.service.ClinicalDataService;\n-import org.cbioportal.service.DiscreteCopyNumberService;\n-import org.cbioportal.service.GenePanelService;\n-import org.cbioportal.service.MolecularProfileService;\n-import org.cbioportal.service.MutationService;\n-import org.cbioportal.service.PatientService;\n-import org.cbioportal.service.SampleService;\n-import org.cbioportal.service.TreatmentService;\n+import org.cbioportal.model.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY0NDE2OQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwNDMzNA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560504334", "createdAt": "2021-01-19T21:21:45Z", "author": {"login": "sheridancbio"}, "path": "web/src/test/java/org/cbioportal/web/StudyViewControllerTest.java", "diffHunk": "@@ -5,24 +5,10 @@\n import java.util.Collections;\n import java.util.List;\n \n-import org.cbioportal.model.ClinicalAttribute;\n-import org.cbioportal.model.ClinicalData;\n-import org.cbioportal.model.ClinicalDataCount;\n-import org.cbioportal.model.ClinicalDataCountItem;\n-import org.cbioportal.model.CopyNumberCountByGene;\n-import org.cbioportal.model.GenePanelData;\n-import org.cbioportal.model.MolecularProfile;\n-import org.cbioportal.model.MutationCountByGene;\n-import org.cbioportal.model.Sample;\n-import org.cbioportal.service.ClinicalAttributeService;\n-import org.cbioportal.service.ClinicalDataService;\n-import org.cbioportal.service.DiscreteCopyNumberService;\n-import org.cbioportal.service.GenePanelService;\n-import org.cbioportal.service.MolecularProfileService;\n-import org.cbioportal.service.MutationService;\n-import org.cbioportal.service.PatientService;\n-import org.cbioportal.service.SampleService;\n-import org.cbioportal.service.TreatmentService;\n+import org.cbioportal.model.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY0NDE2OQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTQ2MDM3OnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/CopyNumberEnrichmentService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwNTo1MjowN1rOIQGjCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMDo1NjowNFrOIWhncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc1NTQwMg==", "bodyText": "rather than accepting any Integer, the event types are now constrained to CopyNumberAlterationEventType, and enrichmentType went from arbitrary string to an enum as well.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r553755402", "createdAt": "2021-01-08T05:52:07Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/CopyNumberEnrichmentService.java", "diffHunk": "@@ -1,16 +1,14 @@\n package org.cbioportal.service;\n \n-import org.cbioportal.model.AlterationEnrichment;\n+import org.cbioportal.model.*;\n import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n \n import java.util.List;\n import java.util.Map;\n \n-import org.cbioportal.model.MolecularProfileCaseIdentifier;\n-\n public interface CopyNumberEnrichmentService {\n \n-    List<AlterationEnrichment> getCopyNumberEnrichments(\n-            Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets, List<Integer> alterationTypes,\n-            String enrichmentType) throws MolecularProfileNotFoundException;\n+    List<AlterationEnrichment> getCopyNumberEnrichments(Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+                                                        CopyNumberAlterationEventType copyNumberEventType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY5OTU2NQ==", "bodyText": "But that is a good thing, or not?", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555699565", "createdAt": "2021-01-12T11:23:34Z", "author": {"login": "pvannierop"}, "path": "service/src/main/java/org/cbioportal/service/CopyNumberEnrichmentService.java", "diffHunk": "@@ -1,16 +1,14 @@\n package org.cbioportal.service;\n \n-import org.cbioportal.model.AlterationEnrichment;\n+import org.cbioportal.model.*;\n import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n \n import java.util.List;\n import java.util.Map;\n \n-import org.cbioportal.model.MolecularProfileCaseIdentifier;\n-\n public interface CopyNumberEnrichmentService {\n \n-    List<AlterationEnrichment> getCopyNumberEnrichments(\n-            Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets, List<Integer> alterationTypes,\n-            String enrichmentType) throws MolecularProfileNotFoundException;\n+    List<AlterationEnrichment> getCopyNumberEnrichments(Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+                                                        CopyNumberAlterationEventType copyNumberEventType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc1NTQwMg=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ5MDM1NA==", "bodyText": "Yes, this is an improvement. \ud83d\udc4d\n[Some of my comments in PR reviews are only there to document my understanding of the changes while doing the review or going over it again later]", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560490354", "createdAt": "2021-01-19T20:56:04Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/CopyNumberEnrichmentService.java", "diffHunk": "@@ -1,16 +1,14 @@\n package org.cbioportal.service;\n \n-import org.cbioportal.model.AlterationEnrichment;\n+import org.cbioportal.model.*;\n import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n \n import java.util.List;\n import java.util.Map;\n \n-import org.cbioportal.model.MolecularProfileCaseIdentifier;\n-\n public interface CopyNumberEnrichmentService {\n \n-    List<AlterationEnrichment> getCopyNumberEnrichments(\n-            Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets, List<Integer> alterationTypes,\n-            String enrichmentType) throws MolecularProfileNotFoundException;\n+    List<AlterationEnrichment> getCopyNumberEnrichments(Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+                                                        CopyNumberAlterationEventType copyNumberEventType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc1NTQwMg=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTUxNDQ3OnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/MutationEnrichmentService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwNjoyMTo0MlrOIQHBvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMDo1NjoyOFrOIWhoNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc2MzI2MA==", "bodyText": "EnrichmentType now chosen from enum", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r553763260", "createdAt": "2021-01-08T06:21:42Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/MutationEnrichmentService.java", "diffHunk": "@@ -1,15 +1,17 @@\n package org.cbioportal.service;\n \n-import java.util.List;\n-import java.util.Map;\n-\n import org.cbioportal.model.AlterationEnrichment;\n+import org.cbioportal.model.EnrichmentType;\n import org.cbioportal.model.MolecularProfileCaseIdentifier;\n import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n \n+import java.util.List;\n+import java.util.Map;\n+\n public interface MutationEnrichmentService {\n \n     List<AlterationEnrichment> getMutationEnrichments(\n-            Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets, String enrichmentType)\n-            throws MolecularProfileNotFoundException;\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        EnrichmentType enrichmentType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY5OTc1MQ==", "bodyText": "Again, but that is a good thing, isn't it?", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555699751", "createdAt": "2021-01-12T11:23:56Z", "author": {"login": "pvannierop"}, "path": "service/src/main/java/org/cbioportal/service/MutationEnrichmentService.java", "diffHunk": "@@ -1,15 +1,17 @@\n package org.cbioportal.service;\n \n-import java.util.List;\n-import java.util.Map;\n-\n import org.cbioportal.model.AlterationEnrichment;\n+import org.cbioportal.model.EnrichmentType;\n import org.cbioportal.model.MolecularProfileCaseIdentifier;\n import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n \n+import java.util.List;\n+import java.util.Map;\n+\n public interface MutationEnrichmentService {\n \n     List<AlterationEnrichment> getMutationEnrichments(\n-            Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets, String enrichmentType)\n-            throws MolecularProfileNotFoundException;\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        EnrichmentType enrichmentType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc2MzI2MA=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ5MDU1MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560490550", "createdAt": "2021-01-19T20:56:28Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/MutationEnrichmentService.java", "diffHunk": "@@ -1,15 +1,17 @@\n package org.cbioportal.service;\n \n-import java.util.List;\n-import java.util.Map;\n-\n import org.cbioportal.model.AlterationEnrichment;\n+import org.cbioportal.model.EnrichmentType;\n import org.cbioportal.model.MolecularProfileCaseIdentifier;\n import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n \n+import java.util.List;\n+import java.util.Map;\n+\n public interface MutationEnrichmentService {\n \n     List<AlterationEnrichment> getMutationEnrichments(\n-            Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets, String enrichmentType)\n-            throws MolecularProfileNotFoundException;\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        EnrichmentType enrichmentType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc2MzI2MA=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NjY1NzQ1OnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/impl/AlterationCountServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzoxMzoyOFrOIQRjyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMToyNTozOVrOIR9RyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNTgxOQ==", "bodyText": "replace tab character with 4 space indent", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r553935819", "createdAt": "2021-01-08T13:13:28Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/impl/AlterationCountServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.cbioportal.service.AlterationCountService;\n+import org.cbioportal.service.util.AlterationEnrichmentUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Service\n+public class AlterationCountServiceImpl implements AlterationCountService {\n+\n+    @Autowired\n+    private AlterationRepository alterationRepository;\n+    @Autowired\n+    private AlterationEnrichmentUtil<AlterationCountByGene> alterationEnrichmentUtil;\n+    @Autowired\n+    private AlterationEnrichmentUtil<CopyNumberCountByGene> alterationEnrichmentUtilCna;\n+\n+    @Override\n+\tpublic List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwMDY4MQ==", "bodyText": "Done!", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555700681", "createdAt": "2021-01-12T11:25:39Z", "author": {"login": "pvannierop"}, "path": "service/src/main/java/org/cbioportal/service/impl/AlterationCountServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.cbioportal.service.AlterationCountService;\n+import org.cbioportal.service.util.AlterationEnrichmentUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Service\n+public class AlterationCountServiceImpl implements AlterationCountService {\n+\n+    @Autowired\n+    private AlterationRepository alterationRepository;\n+    @Autowired\n+    private AlterationEnrichmentUtil<AlterationCountByGene> alterationEnrichmentUtil;\n+    @Autowired\n+    private AlterationEnrichmentUtil<CopyNumberCountByGene> alterationEnrichmentUtilCna;\n+\n+    @Override\n+\tpublic List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNTgxOQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NjcxMDMyOnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/impl/AlterationCountServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzozMDowMVrOIQSDPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMDo1NzozMVrOIWhqlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0Mzg3MQ==", "bodyText": "If we were willing to add a {PATIENT/SAMPLE} argument to these functions (and pass it to the persistence layer calls to the repositories and alterationEnrichmentUtils), we could reduce the 8 functions present here to 4. But in this case  maybe the logic duplication is ok because there is not much here other than the two function calls to the lower level anyway, and there are already a large number of arguments.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r553943871", "createdAt": "2021-01-08T13:30:01Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/impl/AlterationCountServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.cbioportal.service.AlterationCountService;\n+import org.cbioportal.service.util.AlterationEnrichmentUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Service\n+public class AlterationCountServiceImpl implements AlterationCountService {\n+\n+    @Autowired\n+    private AlterationRepository alterationRepository;\n+    @Autowired\n+    private AlterationEnrichmentUtil<AlterationCountByGene> alterationEnrichmentUtil;\n+    @Autowired\n+    private AlterationEnrichmentUtil<CopyNumberCountByGene> alterationEnrichmentUtilCna;\n+\n+    @Override\n+\tpublic List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 boolean includeFrequency,\n+                                                                 boolean includeMissingAlterationsFromGenePanel,\n+                                                                 Select<MutationEventType> mutationEventTypes,\n+                                                                 Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+        \n+        List<AlterationCountByGene> alterationCountByGenes;\n+        if (molecularProfileCaseIdentifiers.isEmpty()) {\n+            alterationCountByGenes = Collections.emptyList();\n+        } else {\n+            alterationCountByGenes = alterationRepository.getSampleAlterationCounts(\n+                molecularProfileCaseIdentifiers,\n+                entrezGeneIds,\n+                mutationEventTypes,\n+                cnaEventTypes,\n+                searchFusions);\n+            if (includeFrequency) {\n+                alterationEnrichmentUtil.includeFrequencyForSamples(molecularProfileCaseIdentifiers,\n+                    alterationCountByGenes,\n+                    includeMissingAlterationsFromGenePanel);\n+            }\n+        }\n+\n+        return alterationCountByGenes;\n+    }\n+    \n+    @Override\n+    public List<AlterationCountByGene> getPatientAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                  List<Integer> entrezGeneIds,\n+                                                                  boolean includeFrequency,\n+                                                                  boolean includeMissingAlterationsFromGenePanel,\n+                                                                  Select<MutationEventType> mutationEventTypes,\n+                                                                  Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                  QueryElement searchFusions) {\n+        \n+        List<AlterationCountByGene> alterationCountByGenes;\n+        if (molecularProfileCaseIdentifiers.isEmpty()) {\n+            alterationCountByGenes = Collections.emptyList();\n+        } else {\n+            alterationCountByGenes = alterationRepository.getPatientAlterationCounts(\n+                molecularProfileCaseIdentifiers,\n+                entrezGeneIds,\n+                mutationEventTypes,\n+                cnaEventTypes,\n+                searchFusions);\n+            if (includeFrequency) {\n+                alterationEnrichmentUtil.includeFrequencyForPatients(molecularProfileCaseIdentifiers, alterationCountByGenes, includeMissingAlterationsFromGenePanel);\n+            }\n+        }\n+\n+        return alterationCountByGenes;\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleMutationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                               List<Integer> entrezGeneIds,\n+                                                               boolean includeFrequency,\n+                                                               boolean includeMissingAlterationsFromGenePanel,\n+                                                               Select<MutationEventType> mutationEventTypes) {\n+        return getSampleAlterationCounts(molecularProfileCaseIdentifiers,\n+            entrezGeneIds,\n+            includeFrequency,\n+            includeMissingAlterationsFromGenePanel,\n+            mutationEventTypes,\n+            Select.none(),\n+            QueryElement.INACTIVE\n+        );\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getPatientMutationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                List<Integer> entrezGeneIds,\n+                                                                boolean includeFrequency,\n+                                                                boolean includeMissingAlterationsFromGenePanel,\n+                                                                Select<MutationEventType> mutationEventTypes) {\n+        return getPatientAlterationCounts(molecularProfileCaseIdentifiers,\n+            entrezGeneIds,\n+            includeFrequency,\n+            includeMissingAlterationsFromGenePanel,\n+            mutationEventTypes,\n+            Select.none(),\n+            QueryElement.INACTIVE\n+        );\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleFusionCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                             List<Integer> entrezGeneIds,\n+                                                             boolean includeFrequency,\n+                                                             boolean includeMissingAlterationsFromGenePanel,\n+                                                             Select<MutationEventType> mutationEventTypes) {\n+        return getSampleAlterationCounts(molecularProfileCaseIdentifiers,\n+            entrezGeneIds,\n+            includeFrequency,\n+            includeMissingAlterationsFromGenePanel,\n+            mutationEventTypes,\n+            Select.none(),\n+            QueryElement.ACTIVE\n+        );\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getPatientFusionCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                              List<Integer> entrezGeneIds,\n+                                                              boolean includeFrequency,\n+                                                              boolean includeMissingAlterationsFromGenePanel,\n+                                                              Select<MutationEventType> mutationEventTypes) {\n+        return getPatientAlterationCounts(molecularProfileCaseIdentifiers,\n+            entrezGeneIds,\n+            includeFrequency,\n+            includeMissingAlterationsFromGenePanel,\n+            mutationEventTypes,\n+            Select.none(),\n+            QueryElement.ACTIVE\n+            );    \n+        }\n+            \n+// -- Should be reinstated when the legacy CNA count endpoint retires            \n+//    @Override\n+//    public List<AlterationCountByGene> getSampleCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+//                                                          List<Integer> entrezGeneIds,\n+//                                                          boolean includeFrequency,\n+//                                                          boolean includeMissingAlterationsFromGenePanel,\n+//                                                          List<CopyNumberAlterationEventType> cnaEventTypes) {\n+//        return getSampleAlterationCounts(molecularProfileCaseIdentifiers,\n+//            entrezGeneIds,\n+//            includeFrequency,\n+//            includeMissingAlterationsFromGenePanel,\n+//            new ArrayList<>(),\n+//            cnaEventTypes,\n+//            false);\n+//    }\n+//\n+//    @Override\n+//    public List<AlterationCountByGene> getPatientCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+//                                                           List<Integer> entrezGeneIds,\n+//                                                           boolean includeFrequency,\n+//                                                           boolean includeMissingAlterationsFromGenePanel,\n+//                                                           List<CopyNumberAlterationEventType> cnaEventTypes) {\n+//        return getPatientAlterationCounts(molecularProfileCaseIdentifiers,\n+//            entrezGeneIds,\n+//            includeFrequency,\n+//            includeMissingAlterationsFromGenePanel,\n+//            new ArrayList<>(),\n+//            cnaEventTypes,\n+//            false);\n+//    }\n+    \n+    @Override\n+    public List<CopyNumberCountByGene> getSampleCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                          List<Integer> entrezGeneIds,\n+                                                          boolean includeFrequency,\n+                                                          boolean includeMissingAlterationsFromGenePanel,\n+                                                          Select<CopyNumberAlterationEventType> cnaEventTypes) {\n+        List<CopyNumberCountByGene> alterationCountByGenes;\n+        if (molecularProfileCaseIdentifiers.isEmpty()) {\n+            alterationCountByGenes = Collections.emptyList();\n+        } else {\n+            alterationCountByGenes = alterationRepository.getSampleCnaCounts(\n+                molecularProfileCaseIdentifiers,\n+                entrezGeneIds,\n+                cnaEventTypes);\n+            if (includeFrequency) {\n+                alterationEnrichmentUtilCna.includeFrequencyForSamples(molecularProfileCaseIdentifiers, alterationCountByGenes, includeMissingAlterationsFromGenePanel);\n+            }\n+        }\n+\n+        return alterationCountByGenes;\n+    }\n+\n+    @Override\n+    public List<CopyNumberCountByGene> getPatientCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwMTM3OA==", "bodyText": "Yes, but what I did here was follow the pattern in the existing code. I propose to leave this for this PR as is and discuss further refactoring for a later time.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555701378", "createdAt": "2021-01-12T11:26:53Z", "author": {"login": "pvannierop"}, "path": "service/src/main/java/org/cbioportal/service/impl/AlterationCountServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.cbioportal.service.AlterationCountService;\n+import org.cbioportal.service.util.AlterationEnrichmentUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Service\n+public class AlterationCountServiceImpl implements AlterationCountService {\n+\n+    @Autowired\n+    private AlterationRepository alterationRepository;\n+    @Autowired\n+    private AlterationEnrichmentUtil<AlterationCountByGene> alterationEnrichmentUtil;\n+    @Autowired\n+    private AlterationEnrichmentUtil<CopyNumberCountByGene> alterationEnrichmentUtilCna;\n+\n+    @Override\n+\tpublic List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 boolean includeFrequency,\n+                                                                 boolean includeMissingAlterationsFromGenePanel,\n+                                                                 Select<MutationEventType> mutationEventTypes,\n+                                                                 Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+        \n+        List<AlterationCountByGene> alterationCountByGenes;\n+        if (molecularProfileCaseIdentifiers.isEmpty()) {\n+            alterationCountByGenes = Collections.emptyList();\n+        } else {\n+            alterationCountByGenes = alterationRepository.getSampleAlterationCounts(\n+                molecularProfileCaseIdentifiers,\n+                entrezGeneIds,\n+                mutationEventTypes,\n+                cnaEventTypes,\n+                searchFusions);\n+            if (includeFrequency) {\n+                alterationEnrichmentUtil.includeFrequencyForSamples(molecularProfileCaseIdentifiers,\n+                    alterationCountByGenes,\n+                    includeMissingAlterationsFromGenePanel);\n+            }\n+        }\n+\n+        return alterationCountByGenes;\n+    }\n+    \n+    @Override\n+    public List<AlterationCountByGene> getPatientAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                  List<Integer> entrezGeneIds,\n+                                                                  boolean includeFrequency,\n+                                                                  boolean includeMissingAlterationsFromGenePanel,\n+                                                                  Select<MutationEventType> mutationEventTypes,\n+                                                                  Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                  QueryElement searchFusions) {\n+        \n+        List<AlterationCountByGene> alterationCountByGenes;\n+        if (molecularProfileCaseIdentifiers.isEmpty()) {\n+            alterationCountByGenes = Collections.emptyList();\n+        } else {\n+            alterationCountByGenes = alterationRepository.getPatientAlterationCounts(\n+                molecularProfileCaseIdentifiers,\n+                entrezGeneIds,\n+                mutationEventTypes,\n+                cnaEventTypes,\n+                searchFusions);\n+            if (includeFrequency) {\n+                alterationEnrichmentUtil.includeFrequencyForPatients(molecularProfileCaseIdentifiers, alterationCountByGenes, includeMissingAlterationsFromGenePanel);\n+            }\n+        }\n+\n+        return alterationCountByGenes;\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleMutationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                               List<Integer> entrezGeneIds,\n+                                                               boolean includeFrequency,\n+                                                               boolean includeMissingAlterationsFromGenePanel,\n+                                                               Select<MutationEventType> mutationEventTypes) {\n+        return getSampleAlterationCounts(molecularProfileCaseIdentifiers,\n+            entrezGeneIds,\n+            includeFrequency,\n+            includeMissingAlterationsFromGenePanel,\n+            mutationEventTypes,\n+            Select.none(),\n+            QueryElement.INACTIVE\n+        );\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getPatientMutationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                List<Integer> entrezGeneIds,\n+                                                                boolean includeFrequency,\n+                                                                boolean includeMissingAlterationsFromGenePanel,\n+                                                                Select<MutationEventType> mutationEventTypes) {\n+        return getPatientAlterationCounts(molecularProfileCaseIdentifiers,\n+            entrezGeneIds,\n+            includeFrequency,\n+            includeMissingAlterationsFromGenePanel,\n+            mutationEventTypes,\n+            Select.none(),\n+            QueryElement.INACTIVE\n+        );\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleFusionCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                             List<Integer> entrezGeneIds,\n+                                                             boolean includeFrequency,\n+                                                             boolean includeMissingAlterationsFromGenePanel,\n+                                                             Select<MutationEventType> mutationEventTypes) {\n+        return getSampleAlterationCounts(molecularProfileCaseIdentifiers,\n+            entrezGeneIds,\n+            includeFrequency,\n+            includeMissingAlterationsFromGenePanel,\n+            mutationEventTypes,\n+            Select.none(),\n+            QueryElement.ACTIVE\n+        );\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getPatientFusionCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                              List<Integer> entrezGeneIds,\n+                                                              boolean includeFrequency,\n+                                                              boolean includeMissingAlterationsFromGenePanel,\n+                                                              Select<MutationEventType> mutationEventTypes) {\n+        return getPatientAlterationCounts(molecularProfileCaseIdentifiers,\n+            entrezGeneIds,\n+            includeFrequency,\n+            includeMissingAlterationsFromGenePanel,\n+            mutationEventTypes,\n+            Select.none(),\n+            QueryElement.ACTIVE\n+            );    \n+        }\n+            \n+// -- Should be reinstated when the legacy CNA count endpoint retires            \n+//    @Override\n+//    public List<AlterationCountByGene> getSampleCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+//                                                          List<Integer> entrezGeneIds,\n+//                                                          boolean includeFrequency,\n+//                                                          boolean includeMissingAlterationsFromGenePanel,\n+//                                                          List<CopyNumberAlterationEventType> cnaEventTypes) {\n+//        return getSampleAlterationCounts(molecularProfileCaseIdentifiers,\n+//            entrezGeneIds,\n+//            includeFrequency,\n+//            includeMissingAlterationsFromGenePanel,\n+//            new ArrayList<>(),\n+//            cnaEventTypes,\n+//            false);\n+//    }\n+//\n+//    @Override\n+//    public List<AlterationCountByGene> getPatientCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+//                                                           List<Integer> entrezGeneIds,\n+//                                                           boolean includeFrequency,\n+//                                                           boolean includeMissingAlterationsFromGenePanel,\n+//                                                           List<CopyNumberAlterationEventType> cnaEventTypes) {\n+//        return getPatientAlterationCounts(molecularProfileCaseIdentifiers,\n+//            entrezGeneIds,\n+//            includeFrequency,\n+//            includeMissingAlterationsFromGenePanel,\n+//            new ArrayList<>(),\n+//            cnaEventTypes,\n+//            false);\n+//    }\n+    \n+    @Override\n+    public List<CopyNumberCountByGene> getSampleCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                          List<Integer> entrezGeneIds,\n+                                                          boolean includeFrequency,\n+                                                          boolean includeMissingAlterationsFromGenePanel,\n+                                                          Select<CopyNumberAlterationEventType> cnaEventTypes) {\n+        List<CopyNumberCountByGene> alterationCountByGenes;\n+        if (molecularProfileCaseIdentifiers.isEmpty()) {\n+            alterationCountByGenes = Collections.emptyList();\n+        } else {\n+            alterationCountByGenes = alterationRepository.getSampleCnaCounts(\n+                molecularProfileCaseIdentifiers,\n+                entrezGeneIds,\n+                cnaEventTypes);\n+            if (includeFrequency) {\n+                alterationEnrichmentUtilCna.includeFrequencyForSamples(molecularProfileCaseIdentifiers, alterationCountByGenes, includeMissingAlterationsFromGenePanel);\n+            }\n+        }\n+\n+        return alterationCountByGenes;\n+    }\n+\n+    @Override\n+    public List<CopyNumberCountByGene> getPatientCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0Mzg3MQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ5MTE1Nw==", "bodyText": "sounds good", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560491157", "createdAt": "2021-01-19T20:57:31Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/impl/AlterationCountServiceImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.cbioportal.service.AlterationCountService;\n+import org.cbioportal.service.util.AlterationEnrichmentUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Service\n+public class AlterationCountServiceImpl implements AlterationCountService {\n+\n+    @Autowired\n+    private AlterationRepository alterationRepository;\n+    @Autowired\n+    private AlterationEnrichmentUtil<AlterationCountByGene> alterationEnrichmentUtil;\n+    @Autowired\n+    private AlterationEnrichmentUtil<CopyNumberCountByGene> alterationEnrichmentUtilCna;\n+\n+    @Override\n+\tpublic List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 boolean includeFrequency,\n+                                                                 boolean includeMissingAlterationsFromGenePanel,\n+                                                                 Select<MutationEventType> mutationEventTypes,\n+                                                                 Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+        \n+        List<AlterationCountByGene> alterationCountByGenes;\n+        if (molecularProfileCaseIdentifiers.isEmpty()) {\n+            alterationCountByGenes = Collections.emptyList();\n+        } else {\n+            alterationCountByGenes = alterationRepository.getSampleAlterationCounts(\n+                molecularProfileCaseIdentifiers,\n+                entrezGeneIds,\n+                mutationEventTypes,\n+                cnaEventTypes,\n+                searchFusions);\n+            if (includeFrequency) {\n+                alterationEnrichmentUtil.includeFrequencyForSamples(molecularProfileCaseIdentifiers,\n+                    alterationCountByGenes,\n+                    includeMissingAlterationsFromGenePanel);\n+            }\n+        }\n+\n+        return alterationCountByGenes;\n+    }\n+    \n+    @Override\n+    public List<AlterationCountByGene> getPatientAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                  List<Integer> entrezGeneIds,\n+                                                                  boolean includeFrequency,\n+                                                                  boolean includeMissingAlterationsFromGenePanel,\n+                                                                  Select<MutationEventType> mutationEventTypes,\n+                                                                  Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                  QueryElement searchFusions) {\n+        \n+        List<AlterationCountByGene> alterationCountByGenes;\n+        if (molecularProfileCaseIdentifiers.isEmpty()) {\n+            alterationCountByGenes = Collections.emptyList();\n+        } else {\n+            alterationCountByGenes = alterationRepository.getPatientAlterationCounts(\n+                molecularProfileCaseIdentifiers,\n+                entrezGeneIds,\n+                mutationEventTypes,\n+                cnaEventTypes,\n+                searchFusions);\n+            if (includeFrequency) {\n+                alterationEnrichmentUtil.includeFrequencyForPatients(molecularProfileCaseIdentifiers, alterationCountByGenes, includeMissingAlterationsFromGenePanel);\n+            }\n+        }\n+\n+        return alterationCountByGenes;\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleMutationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                               List<Integer> entrezGeneIds,\n+                                                               boolean includeFrequency,\n+                                                               boolean includeMissingAlterationsFromGenePanel,\n+                                                               Select<MutationEventType> mutationEventTypes) {\n+        return getSampleAlterationCounts(molecularProfileCaseIdentifiers,\n+            entrezGeneIds,\n+            includeFrequency,\n+            includeMissingAlterationsFromGenePanel,\n+            mutationEventTypes,\n+            Select.none(),\n+            QueryElement.INACTIVE\n+        );\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getPatientMutationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                List<Integer> entrezGeneIds,\n+                                                                boolean includeFrequency,\n+                                                                boolean includeMissingAlterationsFromGenePanel,\n+                                                                Select<MutationEventType> mutationEventTypes) {\n+        return getPatientAlterationCounts(molecularProfileCaseIdentifiers,\n+            entrezGeneIds,\n+            includeFrequency,\n+            includeMissingAlterationsFromGenePanel,\n+            mutationEventTypes,\n+            Select.none(),\n+            QueryElement.INACTIVE\n+        );\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleFusionCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                             List<Integer> entrezGeneIds,\n+                                                             boolean includeFrequency,\n+                                                             boolean includeMissingAlterationsFromGenePanel,\n+                                                             Select<MutationEventType> mutationEventTypes) {\n+        return getSampleAlterationCounts(molecularProfileCaseIdentifiers,\n+            entrezGeneIds,\n+            includeFrequency,\n+            includeMissingAlterationsFromGenePanel,\n+            mutationEventTypes,\n+            Select.none(),\n+            QueryElement.ACTIVE\n+        );\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getPatientFusionCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                              List<Integer> entrezGeneIds,\n+                                                              boolean includeFrequency,\n+                                                              boolean includeMissingAlterationsFromGenePanel,\n+                                                              Select<MutationEventType> mutationEventTypes) {\n+        return getPatientAlterationCounts(molecularProfileCaseIdentifiers,\n+            entrezGeneIds,\n+            includeFrequency,\n+            includeMissingAlterationsFromGenePanel,\n+            mutationEventTypes,\n+            Select.none(),\n+            QueryElement.ACTIVE\n+            );    \n+        }\n+            \n+// -- Should be reinstated when the legacy CNA count endpoint retires            \n+//    @Override\n+//    public List<AlterationCountByGene> getSampleCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+//                                                          List<Integer> entrezGeneIds,\n+//                                                          boolean includeFrequency,\n+//                                                          boolean includeMissingAlterationsFromGenePanel,\n+//                                                          List<CopyNumberAlterationEventType> cnaEventTypes) {\n+//        return getSampleAlterationCounts(molecularProfileCaseIdentifiers,\n+//            entrezGeneIds,\n+//            includeFrequency,\n+//            includeMissingAlterationsFromGenePanel,\n+//            new ArrayList<>(),\n+//            cnaEventTypes,\n+//            false);\n+//    }\n+//\n+//    @Override\n+//    public List<AlterationCountByGene> getPatientCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+//                                                           List<Integer> entrezGeneIds,\n+//                                                           boolean includeFrequency,\n+//                                                           boolean includeMissingAlterationsFromGenePanel,\n+//                                                           List<CopyNumberAlterationEventType> cnaEventTypes) {\n+//        return getPatientAlterationCounts(molecularProfileCaseIdentifiers,\n+//            entrezGeneIds,\n+//            includeFrequency,\n+//            includeMissingAlterationsFromGenePanel,\n+//            new ArrayList<>(),\n+//            cnaEventTypes,\n+//            false);\n+//    }\n+    \n+    @Override\n+    public List<CopyNumberCountByGene> getSampleCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                          List<Integer> entrezGeneIds,\n+                                                          boolean includeFrequency,\n+                                                          boolean includeMissingAlterationsFromGenePanel,\n+                                                          Select<CopyNumberAlterationEventType> cnaEventTypes) {\n+        List<CopyNumberCountByGene> alterationCountByGenes;\n+        if (molecularProfileCaseIdentifiers.isEmpty()) {\n+            alterationCountByGenes = Collections.emptyList();\n+        } else {\n+            alterationCountByGenes = alterationRepository.getSampleCnaCounts(\n+                molecularProfileCaseIdentifiers,\n+                entrezGeneIds,\n+                cnaEventTypes);\n+            if (includeFrequency) {\n+                alterationEnrichmentUtilCna.includeFrequencyForSamples(molecularProfileCaseIdentifiers, alterationCountByGenes, includeMissingAlterationsFromGenePanel);\n+            }\n+        }\n+\n+        return alterationCountByGenes;\n+    }\n+\n+    @Override\n+    public List<CopyNumberCountByGene> getPatientCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0Mzg3MQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Njg0ODc5OnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/impl/AlterationEnrichmentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNDoxMTozOFrOIQTWCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMTowMDo0MlrOIWhxTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk2NTA2NQ==", "bodyText": "this is an iteration over samples at the service layer so the results are not cached (only the retrievals of individual samples will be cached.) There is potentially a performance issue here on studies / virtual cohorts with large sample counts. Have the involved endpoints been tested on studies with ~100000 samples?", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r553965065", "createdAt": "2021-01-08T14:11:38Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/impl/AlterationEnrichmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationEnrichmentService;\n+import org.cbioportal.service.AlterationCountService;\n+import org.cbioportal.service.util.AlterationEnrichmentUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class AlterationEnrichmentServiceImpl implements AlterationEnrichmentService {\n+\n+    @Autowired\n+    private AlterationCountService alterationCountService;\n+    @Autowired\n+    private AlterationEnrichmentUtil<AlterationCountByGene> alterationEnrichmentUtil;\n+\n+    @Override\n+    public List<AlterationEnrichment> getAlterationEnrichments(\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets, final Select<MutationEventType> mutationEventTypes,\n+        final Select<CopyNumberAlterationEventType> cnaEventTypes, EnrichmentType enrichmentType) {\n+\n+        Map<String, List<AlterationCountByGene>> alterationCountsbyEntrezGeneIdAndGroup = getAlterationCountsbyEntrezGeneIdAndGroup(\n+            molecularProfileCaseSets, mutationEventTypes, cnaEventTypes, enrichmentType);\n+\n+        return alterationEnrichmentUtil.createAlterationEnrichments(alterationCountsbyEntrezGeneIdAndGroup,\n+                molecularProfileCaseSets);\n+    }\n+\n+    public Map<String, List<AlterationCountByGene>> getAlterationCountsbyEntrezGeneIdAndGroup(\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        Select<MutationEventType> mutationEventTypes,\n+        Select<CopyNumberAlterationEventType> cnaEventTypes,\n+        EnrichmentType enrichmentType) {\n+        return molecularProfileCaseSets\n+            .entrySet()\n+            .stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwMjg2NQ==", "bodyText": "I have copied this logic from the existing code such as f.i. in MutationEnrichmentServiceImpl.java. I also propose to leave this discussion out of the context of this PR.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555702865", "createdAt": "2021-01-12T11:29:49Z", "author": {"login": "pvannierop"}, "path": "service/src/main/java/org/cbioportal/service/impl/AlterationEnrichmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationEnrichmentService;\n+import org.cbioportal.service.AlterationCountService;\n+import org.cbioportal.service.util.AlterationEnrichmentUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class AlterationEnrichmentServiceImpl implements AlterationEnrichmentService {\n+\n+    @Autowired\n+    private AlterationCountService alterationCountService;\n+    @Autowired\n+    private AlterationEnrichmentUtil<AlterationCountByGene> alterationEnrichmentUtil;\n+\n+    @Override\n+    public List<AlterationEnrichment> getAlterationEnrichments(\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets, final Select<MutationEventType> mutationEventTypes,\n+        final Select<CopyNumberAlterationEventType> cnaEventTypes, EnrichmentType enrichmentType) {\n+\n+        Map<String, List<AlterationCountByGene>> alterationCountsbyEntrezGeneIdAndGroup = getAlterationCountsbyEntrezGeneIdAndGroup(\n+            molecularProfileCaseSets, mutationEventTypes, cnaEventTypes, enrichmentType);\n+\n+        return alterationEnrichmentUtil.createAlterationEnrichments(alterationCountsbyEntrezGeneIdAndGroup,\n+                molecularProfileCaseSets);\n+    }\n+\n+    public Map<String, List<AlterationCountByGene>> getAlterationCountsbyEntrezGeneIdAndGroup(\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        Select<MutationEventType> mutationEventTypes,\n+        Select<CopyNumberAlterationEventType> cnaEventTypes,\n+        EnrichmentType enrichmentType) {\n+        return molecularProfileCaseSets\n+            .entrySet()\n+            .stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk2NTA2NQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ5Mjg3Ng==", "bodyText": "yes, if this was the previous business logic [or based on it] it should not be refactored in this PR. We will be doing a survey of performance bottlenecks in the backend soon ... it will be better to test and improve this pattern at that time if we need to.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560492876", "createdAt": "2021-01-19T21:00:42Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/impl/AlterationEnrichmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationEnrichmentService;\n+import org.cbioportal.service.AlterationCountService;\n+import org.cbioportal.service.util.AlterationEnrichmentUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class AlterationEnrichmentServiceImpl implements AlterationEnrichmentService {\n+\n+    @Autowired\n+    private AlterationCountService alterationCountService;\n+    @Autowired\n+    private AlterationEnrichmentUtil<AlterationCountByGene> alterationEnrichmentUtil;\n+\n+    @Override\n+    public List<AlterationEnrichment> getAlterationEnrichments(\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets, final Select<MutationEventType> mutationEventTypes,\n+        final Select<CopyNumberAlterationEventType> cnaEventTypes, EnrichmentType enrichmentType) {\n+\n+        Map<String, List<AlterationCountByGene>> alterationCountsbyEntrezGeneIdAndGroup = getAlterationCountsbyEntrezGeneIdAndGroup(\n+            molecularProfileCaseSets, mutationEventTypes, cnaEventTypes, enrichmentType);\n+\n+        return alterationEnrichmentUtil.createAlterationEnrichments(alterationCountsbyEntrezGeneIdAndGroup,\n+                molecularProfileCaseSets);\n+    }\n+\n+    public Map<String, List<AlterationCountByGene>> getAlterationCountsbyEntrezGeneIdAndGroup(\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        Select<MutationEventType> mutationEventTypes,\n+        Select<CopyNumberAlterationEventType> cnaEventTypes,\n+        EnrichmentType enrichmentType) {\n+        return molecularProfileCaseSets\n+            .entrySet()\n+            .stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk2NTA2NQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzM4MTUyOnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/impl/CopyNumberEnrichmentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNjoyNzozMlrOIQYc_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMTozMToyOVrOIR9dQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA0ODc2Ng==", "bodyText": "this service layer iteration was already present previously - so long as the computational complexity of alterationCountService is equivalent or better than that of discreteCopyNumberService, we should be ok.\nThe performance test github action is only testing the study view endpoints ... if this endpoint is not included there, we should soon expand the performance test github action workflow to include related endpoints.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r554048766", "createdAt": "2021-01-08T16:27:32Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/impl/CopyNumberEnrichmentServiceImpl.java", "diffHunk": "@@ -1,73 +1,80 @@\n package org.cbioportal.service.impl;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.cbioportal.model.AlterationEnrichment;\n-import org.cbioportal.model.CopyNumberCountByGene;\n-import org.cbioportal.model.MolecularProfileCaseIdentifier;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationCountService;\n import org.cbioportal.service.CopyNumberEnrichmentService;\n-import org.cbioportal.service.DiscreteCopyNumberService;\n import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n import org.cbioportal.service.util.AlterationEnrichmentUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n @Service\n public class CopyNumberEnrichmentServiceImpl implements CopyNumberEnrichmentService {\n \n     @Autowired\n-    private DiscreteCopyNumberService discreteCopyNumberService;\n+    private AlterationCountService alterationCountService;\n     @Autowired\n     private AlterationEnrichmentUtil<CopyNumberCountByGene> alterationEnrichmentUtil;\n \n     @Override\n     public List<AlterationEnrichment> getCopyNumberEnrichments(\n-            Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n-            List<Integer> alterationTypes,\n-            String enrichmentType) throws MolecularProfileNotFoundException {\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        CopyNumberAlterationEventType copyNumberEventType,\n+        EnrichmentType enrichmentType) throws MolecularProfileNotFoundException {\n \n-        Map<String, List<CopyNumberCountByGene>> copyNumberCountByGeneAndGroup =\n-                molecularProfileCaseSets\n-                .entrySet()\n-                .stream()\n-                .collect(Collectors.toMap(\n-                        entry -> entry.getKey(),\n-                        entry -> { //set value of each group to list of CopyNumberCountByGene\n-                            \n-                            List<String> molecularProfileIds = new ArrayList<>();\n-                            List<String> sampleIds = new ArrayList<>();\n-    \n-                            entry.getValue().forEach(molecularProfileCase -> {\n-                                molecularProfileIds.add(molecularProfileCase.getMolecularProfileId());\n-                                sampleIds.add(molecularProfileCase.getCaseId());\n-                            });\n-                            \n-                            if (enrichmentType.equals(\"SAMPLE\")) {\n-                                return discreteCopyNumberService\n-                                        .getSampleCountInMultipleMolecularProfiles(molecularProfileIds,\n-                                                sampleIds,\n-                                                null,\n-                                                alterationTypes,\n-                                                true,\n-                                                true);\n-                            } else {\n-                                return discreteCopyNumberService\n-                                        .getPatientCountInMultipleMolecularProfiles(molecularProfileIds,\n-                                                sampleIds,\n-                                                null,\n-                                                alterationTypes,\n-                                                true, \n-                                                true);\n-                            }\n-                        }));\n+        Map<String, List<CopyNumberCountByGene>> copyNumberCountByGeneAndGroup = getCopyNumberCountByGeneAndGroup(\n+            molecularProfileCaseSets,\n+            copyNumberEventType,\n+            enrichmentType);\n \n         return alterationEnrichmentUtil\n-                .createAlterationEnrichments(\n-                        copyNumberCountByGeneAndGroup,\n-                        molecularProfileCaseSets,\n-                        enrichmentType);\n+            .createAlterationEnrichments(\n+                copyNumberCountByGeneAndGroup,\n+                molecularProfileCaseSets);\n+    }\n+\n+    public Map<String, List<CopyNumberCountByGene>> getCopyNumberCountByGeneAndGroup(\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        CopyNumberAlterationEventType copyNumberEventType,\n+        EnrichmentType enrichmentType) {\n+        return molecularProfileCaseSets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwMzYxNw==", "bodyText": "Ah indeed, see my answer above.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555703617", "createdAt": "2021-01-12T11:31:29Z", "author": {"login": "pvannierop"}, "path": "service/src/main/java/org/cbioportal/service/impl/CopyNumberEnrichmentServiceImpl.java", "diffHunk": "@@ -1,73 +1,80 @@\n package org.cbioportal.service.impl;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.cbioportal.model.AlterationEnrichment;\n-import org.cbioportal.model.CopyNumberCountByGene;\n-import org.cbioportal.model.MolecularProfileCaseIdentifier;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationCountService;\n import org.cbioportal.service.CopyNumberEnrichmentService;\n-import org.cbioportal.service.DiscreteCopyNumberService;\n import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n import org.cbioportal.service.util.AlterationEnrichmentUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n @Service\n public class CopyNumberEnrichmentServiceImpl implements CopyNumberEnrichmentService {\n \n     @Autowired\n-    private DiscreteCopyNumberService discreteCopyNumberService;\n+    private AlterationCountService alterationCountService;\n     @Autowired\n     private AlterationEnrichmentUtil<CopyNumberCountByGene> alterationEnrichmentUtil;\n \n     @Override\n     public List<AlterationEnrichment> getCopyNumberEnrichments(\n-            Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n-            List<Integer> alterationTypes,\n-            String enrichmentType) throws MolecularProfileNotFoundException {\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        CopyNumberAlterationEventType copyNumberEventType,\n+        EnrichmentType enrichmentType) throws MolecularProfileNotFoundException {\n \n-        Map<String, List<CopyNumberCountByGene>> copyNumberCountByGeneAndGroup =\n-                molecularProfileCaseSets\n-                .entrySet()\n-                .stream()\n-                .collect(Collectors.toMap(\n-                        entry -> entry.getKey(),\n-                        entry -> { //set value of each group to list of CopyNumberCountByGene\n-                            \n-                            List<String> molecularProfileIds = new ArrayList<>();\n-                            List<String> sampleIds = new ArrayList<>();\n-    \n-                            entry.getValue().forEach(molecularProfileCase -> {\n-                                molecularProfileIds.add(molecularProfileCase.getMolecularProfileId());\n-                                sampleIds.add(molecularProfileCase.getCaseId());\n-                            });\n-                            \n-                            if (enrichmentType.equals(\"SAMPLE\")) {\n-                                return discreteCopyNumberService\n-                                        .getSampleCountInMultipleMolecularProfiles(molecularProfileIds,\n-                                                sampleIds,\n-                                                null,\n-                                                alterationTypes,\n-                                                true,\n-                                                true);\n-                            } else {\n-                                return discreteCopyNumberService\n-                                        .getPatientCountInMultipleMolecularProfiles(molecularProfileIds,\n-                                                sampleIds,\n-                                                null,\n-                                                alterationTypes,\n-                                                true, \n-                                                true);\n-                            }\n-                        }));\n+        Map<String, List<CopyNumberCountByGene>> copyNumberCountByGeneAndGroup = getCopyNumberCountByGeneAndGroup(\n+            molecularProfileCaseSets,\n+            copyNumberEventType,\n+            enrichmentType);\n \n         return alterationEnrichmentUtil\n-                .createAlterationEnrichments(\n-                        copyNumberCountByGeneAndGroup,\n-                        molecularProfileCaseSets,\n-                        enrichmentType);\n+            .createAlterationEnrichments(\n+                copyNumberCountByGeneAndGroup,\n+                molecularProfileCaseSets);\n+    }\n+\n+    public Map<String, List<CopyNumberCountByGene>> getCopyNumberCountByGeneAndGroup(\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        CopyNumberAlterationEventType copyNumberEventType,\n+        EnrichmentType enrichmentType) {\n+        return molecularProfileCaseSets", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA0ODc2Ng=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzQyMDY1OnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/impl/DiscreteCopyNumberServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNjozODozMFrOIQY1VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMTowNzowN1rOIWh9aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA1NDk5Nw==", "bodyText": "here is a place where I think it is perfectly ok to be using the wildcard import form \ud83d\ude03", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r554054997", "createdAt": "2021-01-08T16:38:30Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/impl/DiscreteCopyNumberServiceImpl.java", "diffHunk": "@@ -3,13 +3,16 @@\n import org.cbioportal.model.*;\n import org.cbioportal.model.meta.BaseMeta;\n import org.cbioportal.persistence.DiscreteCopyNumberRepository;\n-import org.cbioportal.service.*;\n+import org.cbioportal.service.DiscreteCopyNumberService;\n+import org.cbioportal.service.MolecularDataService;\n+import org.cbioportal.service.MolecularProfileService;\n import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n-import org.cbioportal.service.util.AlterationEnrichmentUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import java.util.*;\n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwMzc1OA==", "bodyText": "I removed all wildcard imports.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555703758", "createdAt": "2021-01-12T11:31:49Z", "author": {"login": "pvannierop"}, "path": "service/src/main/java/org/cbioportal/service/impl/DiscreteCopyNumberServiceImpl.java", "diffHunk": "@@ -3,13 +3,16 @@\n import org.cbioportal.model.*;\n import org.cbioportal.model.meta.BaseMeta;\n import org.cbioportal.persistence.DiscreteCopyNumberRepository;\n-import org.cbioportal.service.*;\n+import org.cbioportal.service.DiscreteCopyNumberService;\n+import org.cbioportal.service.MolecularDataService;\n+import org.cbioportal.service.MolecularProfileService;\n import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n-import org.cbioportal.service.util.AlterationEnrichmentUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import java.util.*;\n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA1NDk5Nw=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ5NTk3OQ==", "bodyText": "Ok, thank you. Maybe this is is a topic which is not worth making an issue over, but I appreciate consistent style ... and this also helps us know which package or library is being used for unfamiliar classes (for those of us not using an IDE to link out automatically to source code)", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560495979", "createdAt": "2021-01-19T21:07:07Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/impl/DiscreteCopyNumberServiceImpl.java", "diffHunk": "@@ -3,13 +3,16 @@\n import org.cbioportal.model.*;\n import org.cbioportal.model.meta.BaseMeta;\n import org.cbioportal.persistence.DiscreteCopyNumberRepository;\n-import org.cbioportal.service.*;\n+import org.cbioportal.service.DiscreteCopyNumberService;\n+import org.cbioportal.service.MolecularDataService;\n+import org.cbioportal.service.MolecularProfileService;\n import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n-import org.cbioportal.service.util.AlterationEnrichmentUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import java.util.*;\n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA1NDk5Nw=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzQzMTg3OnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/impl/MutationEnrichmentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNjo0MTo0NFrOIQY8QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMTowNzo0M1rOIWh-9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA1Njc2OA==", "bodyText": "here too (import java.util.* would be fine)\nThe collapsing of our model class imports into a wildcard is something I feel loses some documentation power and could (for very general class names) lead to namespace ambiguities. For example, the \"Select\" class should probably never be imported via wildcard (I think I suggested moving it into the model class perhaps?)", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r554056768", "createdAt": "2021-01-08T16:41:44Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/impl/MutationEnrichmentServiceImpl.java", "diffHunk": "@@ -1,67 +1,71 @@\n package org.cbioportal.service.impl;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.cbioportal.model.AlterationEnrichment;\n-import org.cbioportal.model.MolecularProfileCaseIdentifier;\n-import org.cbioportal.model.MutationCountByGene;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationCountService;\n import org.cbioportal.service.MutationEnrichmentService;\n-import org.cbioportal.service.MutationService;\n-import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n import org.cbioportal.service.util.AlterationEnrichmentUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwMzg3NA==", "bodyText": "I removed all wildcard imports.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555703874", "createdAt": "2021-01-12T11:32:02Z", "author": {"login": "pvannierop"}, "path": "service/src/main/java/org/cbioportal/service/impl/MutationEnrichmentServiceImpl.java", "diffHunk": "@@ -1,67 +1,71 @@\n package org.cbioportal.service.impl;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.cbioportal.model.AlterationEnrichment;\n-import org.cbioportal.model.MolecularProfileCaseIdentifier;\n-import org.cbioportal.model.MutationCountByGene;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationCountService;\n import org.cbioportal.service.MutationEnrichmentService;\n-import org.cbioportal.service.MutationService;\n-import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n import org.cbioportal.service.util.AlterationEnrichmentUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA1Njc2OA=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQ5NjM3NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560496375", "createdAt": "2021-01-19T21:07:43Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/impl/MutationEnrichmentServiceImpl.java", "diffHunk": "@@ -1,67 +1,71 @@\n package org.cbioportal.service.impl;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.cbioportal.model.AlterationEnrichment;\n-import org.cbioportal.model.MolecularProfileCaseIdentifier;\n-import org.cbioportal.model.MutationCountByGene;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationCountService;\n import org.cbioportal.service.MutationEnrichmentService;\n-import org.cbioportal.service.MutationService;\n-import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n import org.cbioportal.service.util.AlterationEnrichmentUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA1Njc2OA=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzQ3Mzc4OnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/impl/MutationEnrichmentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNjo1MDoyNFrOIQZWxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMTozMjoyN1rOIR9fGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA2MzU1Nw==", "bodyText": "similar to earlier comment -- this is a pre-existing iteration through sample data in the service layer", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r554063557", "createdAt": "2021-01-08T16:50:24Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/impl/MutationEnrichmentServiceImpl.java", "diffHunk": "@@ -1,67 +1,71 @@\n package org.cbioportal.service.impl;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.cbioportal.model.AlterationEnrichment;\n-import org.cbioportal.model.MolecularProfileCaseIdentifier;\n-import org.cbioportal.model.MutationCountByGene;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationCountService;\n import org.cbioportal.service.MutationEnrichmentService;\n-import org.cbioportal.service.MutationService;\n-import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n import org.cbioportal.service.util.AlterationEnrichmentUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n @Service\n public class MutationEnrichmentServiceImpl implements MutationEnrichmentService {\n \n     @Autowired\n-    private MutationService mutationService;\n+    private AlterationCountService alterationCountService;\n     @Autowired\n-    private AlterationEnrichmentUtil<MutationCountByGene> alterationEnrichmentUtil;\n+    private AlterationEnrichmentUtil<AlterationCountByGene> alterationEnrichmentUtil;\n \n     @Override\n     public List<AlterationEnrichment> getMutationEnrichments(\n-            Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n-            String enrichmentType)\n-            throws MolecularProfileNotFoundException {\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        EnrichmentType enrichmentType) {\n \n-        Map<String, List<MutationCountByGene>> mutationCountsbyEntrezGeneIdAndGroup =\n-                molecularProfileCaseSets\n-                .entrySet()\n-                .stream()\n-                .collect(Collectors.toMap(\n-                        entry -> entry.getKey(),\n-                        entry -> { //set value of each group to list of MutationCountByGene\n-                            List<String> molecularProfileIds = new ArrayList<>();\n-                            List<String> sampleIds = new ArrayList<>();\n-    \n-                            entry.getValue().forEach(molecularProfileCase -> {\n-                                molecularProfileIds.add(molecularProfileCase.getMolecularProfileId());\n-                                sampleIds.add(molecularProfileCase.getCaseId());\n-                            });\n-    \n-                            if (enrichmentType.equals(\"SAMPLE\")) {\n-                                return mutationService\n-                                        .getSampleCountInMultipleMolecularProfiles(molecularProfileIds,\n-                                                sampleIds,\n-                                                null,\n-                                                true,\n-                                                true);\n-                            } else {\n-                                return mutationService\n-                                        .getPatientCountInMultipleMolecularProfiles(molecularProfileIds,\n-                                                sampleIds,\n-                                                null,\n-                                                true,\n-                                                true);\n-                            }\n-                        }));\n+        Map<String, List<AlterationCountByGene>> mutationCountsbyEntrezGeneIdAndGroup = getMutationCountsbyEntrezGeneIdAndGroup(\n+            molecularProfileCaseSets, enrichmentType);\n \n         return alterationEnrichmentUtil.createAlterationEnrichments(mutationCountsbyEntrezGeneIdAndGroup,\n-                molecularProfileCaseSets, enrichmentType);\n+            molecularProfileCaseSets);\n+    }\n+\n+    public Map<String, List<AlterationCountByGene>> getMutationCountsbyEntrezGeneIdAndGroup(\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        EnrichmentType enrichmentType) {\n+        return molecularProfileCaseSets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwNDA5MA==", "bodyText": "Indeed.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555704090", "createdAt": "2021-01-12T11:32:27Z", "author": {"login": "pvannierop"}, "path": "service/src/main/java/org/cbioportal/service/impl/MutationEnrichmentServiceImpl.java", "diffHunk": "@@ -1,67 +1,71 @@\n package org.cbioportal.service.impl;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.cbioportal.model.AlterationEnrichment;\n-import org.cbioportal.model.MolecularProfileCaseIdentifier;\n-import org.cbioportal.model.MutationCountByGene;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.service.AlterationCountService;\n import org.cbioportal.service.MutationEnrichmentService;\n-import org.cbioportal.service.MutationService;\n-import org.cbioportal.service.exception.MolecularProfileNotFoundException;\n import org.cbioportal.service.util.AlterationEnrichmentUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n @Service\n public class MutationEnrichmentServiceImpl implements MutationEnrichmentService {\n \n     @Autowired\n-    private MutationService mutationService;\n+    private AlterationCountService alterationCountService;\n     @Autowired\n-    private AlterationEnrichmentUtil<MutationCountByGene> alterationEnrichmentUtil;\n+    private AlterationEnrichmentUtil<AlterationCountByGene> alterationEnrichmentUtil;\n \n     @Override\n     public List<AlterationEnrichment> getMutationEnrichments(\n-            Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n-            String enrichmentType)\n-            throws MolecularProfileNotFoundException {\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        EnrichmentType enrichmentType) {\n \n-        Map<String, List<MutationCountByGene>> mutationCountsbyEntrezGeneIdAndGroup =\n-                molecularProfileCaseSets\n-                .entrySet()\n-                .stream()\n-                .collect(Collectors.toMap(\n-                        entry -> entry.getKey(),\n-                        entry -> { //set value of each group to list of MutationCountByGene\n-                            List<String> molecularProfileIds = new ArrayList<>();\n-                            List<String> sampleIds = new ArrayList<>();\n-    \n-                            entry.getValue().forEach(molecularProfileCase -> {\n-                                molecularProfileIds.add(molecularProfileCase.getMolecularProfileId());\n-                                sampleIds.add(molecularProfileCase.getCaseId());\n-                            });\n-    \n-                            if (enrichmentType.equals(\"SAMPLE\")) {\n-                                return mutationService\n-                                        .getSampleCountInMultipleMolecularProfiles(molecularProfileIds,\n-                                                sampleIds,\n-                                                null,\n-                                                true,\n-                                                true);\n-                            } else {\n-                                return mutationService\n-                                        .getPatientCountInMultipleMolecularProfiles(molecularProfileIds,\n-                                                sampleIds,\n-                                                null,\n-                                                true,\n-                                                true);\n-                            }\n-                        }));\n+        Map<String, List<AlterationCountByGene>> mutationCountsbyEntrezGeneIdAndGroup = getMutationCountsbyEntrezGeneIdAndGroup(\n+            molecularProfileCaseSets, enrichmentType);\n \n         return alterationEnrichmentUtil.createAlterationEnrichments(mutationCountsbyEntrezGeneIdAndGroup,\n-                molecularProfileCaseSets, enrichmentType);\n+            molecularProfileCaseSets);\n+    }\n+\n+    public Map<String, List<AlterationCountByGene>> getMutationCountsbyEntrezGeneIdAndGroup(\n+        Map<String, List<MolecularProfileCaseIdentifier>> molecularProfileCaseSets,\n+        EnrichmentType enrichmentType) {\n+        return molecularProfileCaseSets", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA2MzU1Nw=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzUxMzMzOnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/util/AlterationEnrichmentUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNjo1NzoxOVrOIQZxcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMTozNDowM1rOIR9iiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA3MDM4NQ==", "bodyText": "I don't see a reference to the Pair class within this code.\nMaybe it is implicit in the molecularProfileCaseIdentifiers?", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r554070385", "createdAt": "2021-01-08T16:57:19Z", "author": {"login": "sheridancbio"}, "path": "service/src/main/java/org/cbioportal/service/util/AlterationEnrichmentUtil.java", "diffHunk": "@@ -5,6 +5,7 @@\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.tuple.Pair;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwNDk3MQ==", "bodyText": "Removed!", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555704971", "createdAt": "2021-01-12T11:34:03Z", "author": {"login": "pvannierop"}, "path": "service/src/main/java/org/cbioportal/service/util/AlterationEnrichmentUtil.java", "diffHunk": "@@ -5,6 +5,7 @@\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.tuple.Pair;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA3MDM4NQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTQ5NTUzOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-api/src/main/java/org/cbioportal/persistence/AlterationRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxODoyMToyMlrOIRhvmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzo0MjozMlrOIW-w3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0OTU2Mw==", "bodyText": "There is a new style for these @Cacheable annotations, introduced with the recent merge of the redis caching option PR #8252\nWe can help with converting these cacheable annotations to the new style.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555249563", "createdAt": "2021-01-11T18:21:22Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-api/src/main/java/org/cbioportal/persistence/AlterationRepository.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.cbioportal.persistence;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.springframework.cache.annotation.Cacheable;\n+\n+import java.util.List;\n+\n+public interface AlterationRepository {\n+\n+    @Cacheable(cacheNames = \"GeneralRepositoryCache\", condition = \"@cacheEnabledConfig.getEnabled()\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwNTI0OQ==", "bodyText": "Ok, let's discuss this in a call.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555705249", "createdAt": "2021-01-12T11:34:33Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-api/src/main/java/org/cbioportal/persistence/AlterationRepository.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.cbioportal.persistence;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.springframework.cache.annotation.Cacheable;\n+\n+import java.util.List;\n+\n+public interface AlterationRepository {\n+\n+    @Cacheable(cacheNames = \"GeneralRepositoryCache\", condition = \"@cacheEnabledConfig.getEnabled()\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0OTU2Mw=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2NzkwMg==", "bodyText": "I have examined the master branch head, and I think the replacement rule would be very straightforward:\npersistence-api class member functions can be annotated with:\n@Cacheable(cacheResolver = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")\nin place of\n@Cacheable(cacheNames = \"GeneralRepositoryCache\", condition = \"@cacheEnabledConfig.getEnabled()\")\nThis should cover all cases in this PR. There is also a special purpose static repository cache which we are using for holding a small number of items (mainly genes and gene aliases) ... for these functions, the old annotation with cacheNames = \"staticRepositoryCacheOne\" could be adjusted to use cacheResolver = \"staticRepositoryCacheOneResolver\" instead ... but I don't think this static cache is relevant to this PR. In fact, the only change that seems to be needed would be in the current file (AlterationRepository.java). The other changes to the API module simply remove functions.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560967902", "createdAt": "2021-01-20T13:42:32Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-api/src/main/java/org/cbioportal/persistence/AlterationRepository.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.cbioportal.persistence;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.springframework.cache.annotation.Cacheable;\n+\n+import java.util.List;\n+\n+public interface AlterationRepository {\n+\n+    @Cacheable(cacheNames = \"GeneralRepositoryCache\", condition = \"@cacheEnabledConfig.getEnabled()\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0OTU2Mw=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTUyMzU0OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxODoyOTowMVrOIRiAmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMzo1MTo0MlrOISCVwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI1MzkxNA==", "bodyText": "having \"mutationTypes = null\" mean include all, and having \"mutationTypes = new Select()\" mean include none seems non-obvious to me. Ah ... hold on. I see that there is already Static instances of Select<> in the Select template class called ALL and NONE ... so I now think that this comment (and the following line too) is simply out of date.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555253914", "createdAt": "2021-01-11T18:29:01Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.AlterationCountByGene;\n+import org.cbioportal.model.CopyNumberCountByGene;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+\n+import java.util.List;\n+\n+public interface AlterationCountsMapper {\n+\n+    /**\n+     * Calculate sample-level counts of mutation and discrete CNA alteration events.\n+     * @param internalSampleIds List of internal id's of samples to include in alteration counts.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI1Njk5MQ==", "bodyText": "I see the same issue occurs in other functions in this interface ... so please review/refine the javadoc comments in this file.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555256991", "createdAt": "2021-01-11T18:34:32Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.AlterationCountByGene;\n+import org.cbioportal.model.CopyNumberCountByGene;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+\n+import java.util.List;\n+\n+public interface AlterationCountsMapper {\n+\n+    /**\n+     * Calculate sample-level counts of mutation and discrete CNA alteration events.\n+     * @param internalSampleIds List of internal id's of samples to include in alteration counts.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI1MzkxNA=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc4MzYxNw==", "bodyText": "All javadoc was updated.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555783617", "createdAt": "2021-01-12T13:51:42Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.AlterationCountByGene;\n+import org.cbioportal.model.CopyNumberCountByGene;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+\n+import java.util.List;\n+\n+public interface AlterationCountsMapper {\n+\n+    /**\n+     * Calculate sample-level counts of mutation and discrete CNA alteration events.\n+     * @param internalSampleIds List of internal id's of samples to include in alteration counts.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI1MzkxNA=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTU0NjA4OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxODozNToyNVrOIRiOmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMzo1MjoyNlrOISCXmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI1NzQ5OA==", "bodyText": "missing description of return value", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555257498", "createdAt": "2021-01-11T18:35:25Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.AlterationCountByGene;\n+import org.cbioportal.model.CopyNumberCountByGene;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+\n+import java.util.List;\n+\n+public interface AlterationCountsMapper {\n+\n+    /**\n+     * Calculate sample-level counts of mutation and discrete CNA alteration events.\n+     * @param internalSampleIds List of internal id's of samples to include in alteration counts.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. \n+     * @param cnaTypes  Types of discrete copy number alteration types to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts.\n+     * @param searchFusions  'ACTIVE': counts are limited to fusion type. 'INACTIVE': counts are limited to non-fusion alterations.'PASS': no filtering on mutation vs fusions (mutation types and cnaTypes are used) \n+     * @return Gene-level counts of (1) the total number of alterations and (2) the number of altered samples.\n+     */\n+    List<AlterationCountByGene> getSampleAlterationCounts(List<Integer> internalSampleIds,\n+                                                          List<Integer> entrezGeneIds,\n+                                                          Select<String> mutationTypes,\n+                                                          Select<Integer> cnaTypes,\n+                                                          QueryElement searchFusions);\n+\n+    /**\n+     * Gets internal sample ids for samples that match (molecularProfileId, sampleId) pair\n+     * Note: Molecular profile id in molecularProfileIds.get(N) corresponds with sample id in sampleIds.get(N)\n+     * @param molecularProfileIds  List of stable id's of molecular profiles to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param sampleIds List of stable id's of samples to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc4NDA5MQ==", "bodyText": "Added", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555784091", "createdAt": "2021-01-12T13:52:26Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.AlterationCountByGene;\n+import org.cbioportal.model.CopyNumberCountByGene;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+\n+import java.util.List;\n+\n+public interface AlterationCountsMapper {\n+\n+    /**\n+     * Calculate sample-level counts of mutation and discrete CNA alteration events.\n+     * @param internalSampleIds List of internal id's of samples to include in alteration counts.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. \n+     * @param cnaTypes  Types of discrete copy number alteration types to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts.\n+     * @param searchFusions  'ACTIVE': counts are limited to fusion type. 'INACTIVE': counts are limited to non-fusion alterations.'PASS': no filtering on mutation vs fusions (mutation types and cnaTypes are used) \n+     * @return Gene-level counts of (1) the total number of alterations and (2) the number of altered samples.\n+     */\n+    List<AlterationCountByGene> getSampleAlterationCounts(List<Integer> internalSampleIds,\n+                                                          List<Integer> entrezGeneIds,\n+                                                          Select<String> mutationTypes,\n+                                                          Select<Integer> cnaTypes,\n+                                                          QueryElement searchFusions);\n+\n+    /**\n+     * Gets internal sample ids for samples that match (molecularProfileId, sampleId) pair\n+     * Note: Molecular profile id in molecularProfileIds.get(N) corresponds with sample id in sampleIds.get(N)\n+     * @param molecularProfileIds  List of stable id's of molecular profiles to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param sampleIds List of stable id's of samples to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI1NzQ5OA=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTU1NTAxOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxODozNzo1OFrOIRiULQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMzo1Mjo0MFrOISCYIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI1ODkyNQ==", "bodyText": "missing return value description", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555258925", "createdAt": "2021-01-11T18:37:58Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.AlterationCountByGene;\n+import org.cbioportal.model.CopyNumberCountByGene;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+\n+import java.util.List;\n+\n+public interface AlterationCountsMapper {\n+\n+    /**\n+     * Calculate sample-level counts of mutation and discrete CNA alteration events.\n+     * @param internalSampleIds List of internal id's of samples to include in alteration counts.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. \n+     * @param cnaTypes  Types of discrete copy number alteration types to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts.\n+     * @param searchFusions  'ACTIVE': counts are limited to fusion type. 'INACTIVE': counts are limited to non-fusion alterations.'PASS': no filtering on mutation vs fusions (mutation types and cnaTypes are used) \n+     * @return Gene-level counts of (1) the total number of alterations and (2) the number of altered samples.\n+     */\n+    List<AlterationCountByGene> getSampleAlterationCounts(List<Integer> internalSampleIds,\n+                                                          List<Integer> entrezGeneIds,\n+                                                          Select<String> mutationTypes,\n+                                                          Select<Integer> cnaTypes,\n+                                                          QueryElement searchFusions);\n+\n+    /**\n+     * Gets internal sample ids for samples that match (molecularProfileId, sampleId) pair\n+     * Note: Molecular profile id in molecularProfileIds.get(N) corresponds with sample id in sampleIds.get(N)\n+     * @param molecularProfileIds  List of stable id's of molecular profiles to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param sampleIds List of stable id's of samples to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @return\n+     */\n+    List<Integer> getSampleInternalIds(List<String> molecularProfileIds,\n+                                       List<String> sampleIds);\n+\n+    /**\n+     * Calculate patient-level counts of mutation and discrete CNA alteration events.\n+     * @param internalPatientIds List of internal id's of patients to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. \n+     * @param cnaTypes  Types of discrete copy number alteration types to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts.\n+     * @param searchFusions  'ACTIVE': counts are limited to fusion type. 'INACTIVE': counts are limited to non-fusion alterations.'PASS': no filtering on mutation vs fusions (mutation types and cnaTypes are used) \n+     * @return Gene-level counts of (1) the total number of alterations and (2) the number of altered patients.\n+     */\n+    List<AlterationCountByGene> getPatientAlterationCounts(List<Integer> internalPatientIds,\n+                                                           List<Integer> entrezGeneIds,\n+                                                           Select<String> mutationTypes,\n+                                                           Select<Integer> cnaTypes,\n+                                                           QueryElement searchFusions);\n+\n+    /**\n+     * Gets internal sample ids for samples that match (molecularProfileId, sampleId) pair\n+     * Note: Molecular profile id in molecularProfileIds.get(N) corresponds with sample id in sampleIds.get(N)\n+     * @param molecularProfileIds  List of stable id's of molecular profiles to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param patientIds List of stable id's of patients to include in alteration counts. Forms pairs with patientIds based on array index.\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc4NDIyNA==", "bodyText": "Added", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555784224", "createdAt": "2021-01-12T13:52:40Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.AlterationCountByGene;\n+import org.cbioportal.model.CopyNumberCountByGene;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+\n+import java.util.List;\n+\n+public interface AlterationCountsMapper {\n+\n+    /**\n+     * Calculate sample-level counts of mutation and discrete CNA alteration events.\n+     * @param internalSampleIds List of internal id's of samples to include in alteration counts.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. \n+     * @param cnaTypes  Types of discrete copy number alteration types to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts.\n+     * @param searchFusions  'ACTIVE': counts are limited to fusion type. 'INACTIVE': counts are limited to non-fusion alterations.'PASS': no filtering on mutation vs fusions (mutation types and cnaTypes are used) \n+     * @return Gene-level counts of (1) the total number of alterations and (2) the number of altered samples.\n+     */\n+    List<AlterationCountByGene> getSampleAlterationCounts(List<Integer> internalSampleIds,\n+                                                          List<Integer> entrezGeneIds,\n+                                                          Select<String> mutationTypes,\n+                                                          Select<Integer> cnaTypes,\n+                                                          QueryElement searchFusions);\n+\n+    /**\n+     * Gets internal sample ids for samples that match (molecularProfileId, sampleId) pair\n+     * Note: Molecular profile id in molecularProfileIds.get(N) corresponds with sample id in sampleIds.get(N)\n+     * @param molecularProfileIds  List of stable id's of molecular profiles to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param sampleIds List of stable id's of samples to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @return\n+     */\n+    List<Integer> getSampleInternalIds(List<String> molecularProfileIds,\n+                                       List<String> sampleIds);\n+\n+    /**\n+     * Calculate patient-level counts of mutation and discrete CNA alteration events.\n+     * @param internalPatientIds List of internal id's of patients to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. \n+     * @param cnaTypes  Types of discrete copy number alteration types to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts.\n+     * @param searchFusions  'ACTIVE': counts are limited to fusion type. 'INACTIVE': counts are limited to non-fusion alterations.'PASS': no filtering on mutation vs fusions (mutation types and cnaTypes are used) \n+     * @return Gene-level counts of (1) the total number of alterations and (2) the number of altered patients.\n+     */\n+    List<AlterationCountByGene> getPatientAlterationCounts(List<Integer> internalPatientIds,\n+                                                           List<Integer> entrezGeneIds,\n+                                                           Select<String> mutationTypes,\n+                                                           Select<Integer> cnaTypes,\n+                                                           QueryElement searchFusions);\n+\n+    /**\n+     * Gets internal sample ids for samples that match (molecularProfileId, sampleId) pair\n+     * Note: Molecular profile id in molecularProfileIds.get(N) corresponds with sample id in sampleIds.get(N)\n+     * @param molecularProfileIds  List of stable id's of molecular profiles to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param patientIds List of stable id's of patients to include in alteration counts. Forms pairs with patientIds based on array index.\n+     * @return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI1ODkyNQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTU2OTM0OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxODo0MjoxNFrOIRidLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMToxOTo1MlrOIWiZpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI2MTIyOQ==", "bodyText": "The name of this function sounds (to me) like it is returning internal patient ids (we pass in patients stable ids). Is that true? The comment above says that the function returns internal sample ids for a list of patients. The input is a string, so I am guessing we get patient stable ids (which is why we must pair them with the profile ids)\nI guess we either need to correct the comment above this function, or should consider a function name such as getInternalSampleIdsForPatients()", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555261229", "createdAt": "2021-01-11T18:42:14Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.AlterationCountByGene;\n+import org.cbioportal.model.CopyNumberCountByGene;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+\n+import java.util.List;\n+\n+public interface AlterationCountsMapper {\n+\n+    /**\n+     * Calculate sample-level counts of mutation and discrete CNA alteration events.\n+     * @param internalSampleIds List of internal id's of samples to include in alteration counts.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. \n+     * @param cnaTypes  Types of discrete copy number alteration types to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts.\n+     * @param searchFusions  'ACTIVE': counts are limited to fusion type. 'INACTIVE': counts are limited to non-fusion alterations.'PASS': no filtering on mutation vs fusions (mutation types and cnaTypes are used) \n+     * @return Gene-level counts of (1) the total number of alterations and (2) the number of altered samples.\n+     */\n+    List<AlterationCountByGene> getSampleAlterationCounts(List<Integer> internalSampleIds,\n+                                                          List<Integer> entrezGeneIds,\n+                                                          Select<String> mutationTypes,\n+                                                          Select<Integer> cnaTypes,\n+                                                          QueryElement searchFusions);\n+\n+    /**\n+     * Gets internal sample ids for samples that match (molecularProfileId, sampleId) pair\n+     * Note: Molecular profile id in molecularProfileIds.get(N) corresponds with sample id in sampleIds.get(N)\n+     * @param molecularProfileIds  List of stable id's of molecular profiles to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param sampleIds List of stable id's of samples to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @return\n+     */\n+    List<Integer> getSampleInternalIds(List<String> molecularProfileIds,\n+                                       List<String> sampleIds);\n+\n+    /**\n+     * Calculate patient-level counts of mutation and discrete CNA alteration events.\n+     * @param internalPatientIds List of internal id's of patients to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. \n+     * @param cnaTypes  Types of discrete copy number alteration types to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts.\n+     * @param searchFusions  'ACTIVE': counts are limited to fusion type. 'INACTIVE': counts are limited to non-fusion alterations.'PASS': no filtering on mutation vs fusions (mutation types and cnaTypes are used) \n+     * @return Gene-level counts of (1) the total number of alterations and (2) the number of altered patients.\n+     */\n+    List<AlterationCountByGene> getPatientAlterationCounts(List<Integer> internalPatientIds,\n+                                                           List<Integer> entrezGeneIds,\n+                                                           Select<String> mutationTypes,\n+                                                           Select<Integer> cnaTypes,\n+                                                           QueryElement searchFusions);\n+\n+    /**\n+     * Gets internal sample ids for samples that match (molecularProfileId, sampleId) pair\n+     * Note: Molecular profile id in molecularProfileIds.get(N) corresponds with sample id in sampleIds.get(N)\n+     * @param molecularProfileIds  List of stable id's of molecular profiles to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param patientIds List of stable id's of patients to include in alteration counts. Forms pairs with patientIds based on array index.\n+     * @return\n+     */\n+    List<Integer> getPatientInternalIds(List<String> molecularProfileIds,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc4OTI0Ng==", "bodyText": "Yse, this is true. Comment has been corrected.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555789246", "createdAt": "2021-01-12T14:00:07Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.AlterationCountByGene;\n+import org.cbioportal.model.CopyNumberCountByGene;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+\n+import java.util.List;\n+\n+public interface AlterationCountsMapper {\n+\n+    /**\n+     * Calculate sample-level counts of mutation and discrete CNA alteration events.\n+     * @param internalSampleIds List of internal id's of samples to include in alteration counts.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. \n+     * @param cnaTypes  Types of discrete copy number alteration types to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts.\n+     * @param searchFusions  'ACTIVE': counts are limited to fusion type. 'INACTIVE': counts are limited to non-fusion alterations.'PASS': no filtering on mutation vs fusions (mutation types and cnaTypes are used) \n+     * @return Gene-level counts of (1) the total number of alterations and (2) the number of altered samples.\n+     */\n+    List<AlterationCountByGene> getSampleAlterationCounts(List<Integer> internalSampleIds,\n+                                                          List<Integer> entrezGeneIds,\n+                                                          Select<String> mutationTypes,\n+                                                          Select<Integer> cnaTypes,\n+                                                          QueryElement searchFusions);\n+\n+    /**\n+     * Gets internal sample ids for samples that match (molecularProfileId, sampleId) pair\n+     * Note: Molecular profile id in molecularProfileIds.get(N) corresponds with sample id in sampleIds.get(N)\n+     * @param molecularProfileIds  List of stable id's of molecular profiles to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param sampleIds List of stable id's of samples to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @return\n+     */\n+    List<Integer> getSampleInternalIds(List<String> molecularProfileIds,\n+                                       List<String> sampleIds);\n+\n+    /**\n+     * Calculate patient-level counts of mutation and discrete CNA alteration events.\n+     * @param internalPatientIds List of internal id's of patients to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. \n+     * @param cnaTypes  Types of discrete copy number alteration types to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts.\n+     * @param searchFusions  'ACTIVE': counts are limited to fusion type. 'INACTIVE': counts are limited to non-fusion alterations.'PASS': no filtering on mutation vs fusions (mutation types and cnaTypes are used) \n+     * @return Gene-level counts of (1) the total number of alterations and (2) the number of altered patients.\n+     */\n+    List<AlterationCountByGene> getPatientAlterationCounts(List<Integer> internalPatientIds,\n+                                                           List<Integer> entrezGeneIds,\n+                                                           Select<String> mutationTypes,\n+                                                           Select<Integer> cnaTypes,\n+                                                           QueryElement searchFusions);\n+\n+    /**\n+     * Gets internal sample ids for samples that match (molecularProfileId, sampleId) pair\n+     * Note: Molecular profile id in molecularProfileIds.get(N) corresponds with sample id in sampleIds.get(N)\n+     * @param molecularProfileIds  List of stable id's of molecular profiles to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param patientIds List of stable id's of patients to include in alteration counts. Forms pairs with patientIds based on array index.\n+     * @return\n+     */\n+    List<Integer> getPatientInternalIds(List<String> molecularProfileIds,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI2MTIyOQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwMzIwNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560503205", "createdAt": "2021-01-19T21:19:52Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationCountsMapper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.AlterationCountByGene;\n+import org.cbioportal.model.CopyNumberCountByGene;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+\n+import java.util.List;\n+\n+public interface AlterationCountsMapper {\n+\n+    /**\n+     * Calculate sample-level counts of mutation and discrete CNA alteration events.\n+     * @param internalSampleIds List of internal id's of samples to include in alteration counts.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. \n+     * @param cnaTypes  Types of discrete copy number alteration types to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts.\n+     * @param searchFusions  'ACTIVE': counts are limited to fusion type. 'INACTIVE': counts are limited to non-fusion alterations.'PASS': no filtering on mutation vs fusions (mutation types and cnaTypes are used) \n+     * @return Gene-level counts of (1) the total number of alterations and (2) the number of altered samples.\n+     */\n+    List<AlterationCountByGene> getSampleAlterationCounts(List<Integer> internalSampleIds,\n+                                                          List<Integer> entrezGeneIds,\n+                                                          Select<String> mutationTypes,\n+                                                          Select<Integer> cnaTypes,\n+                                                          QueryElement searchFusions);\n+\n+    /**\n+     * Gets internal sample ids for samples that match (molecularProfileId, sampleId) pair\n+     * Note: Molecular profile id in molecularProfileIds.get(N) corresponds with sample id in sampleIds.get(N)\n+     * @param molecularProfileIds  List of stable id's of molecular profiles to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param sampleIds List of stable id's of samples to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @return\n+     */\n+    List<Integer> getSampleInternalIds(List<String> molecularProfileIds,\n+                                       List<String> sampleIds);\n+\n+    /**\n+     * Calculate patient-level counts of mutation and discrete CNA alteration events.\n+     * @param internalPatientIds List of internal id's of patients to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param entrezGeneIds  List of gene ids to get counts for.\n+     * @param mutationTypes  Types of mutations to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts. \n+     * @param cnaTypes  Types of discrete copy number alteration types to include in alteration counts. When 'null' all types will be included. When empty list mutations will be excluded from counts.\n+     * @param searchFusions  'ACTIVE': counts are limited to fusion type. 'INACTIVE': counts are limited to non-fusion alterations.'PASS': no filtering on mutation vs fusions (mutation types and cnaTypes are used) \n+     * @return Gene-level counts of (1) the total number of alterations and (2) the number of altered patients.\n+     */\n+    List<AlterationCountByGene> getPatientAlterationCounts(List<Integer> internalPatientIds,\n+                                                           List<Integer> entrezGeneIds,\n+                                                           Select<String> mutationTypes,\n+                                                           Select<Integer> cnaTypes,\n+                                                           QueryElement searchFusions);\n+\n+    /**\n+     * Gets internal sample ids for samples that match (molecularProfileId, sampleId) pair\n+     * Note: Molecular profile id in molecularProfileIds.get(N) corresponds with sample id in sampleIds.get(N)\n+     * @param molecularProfileIds  List of stable id's of molecular profiles to include in alteration counts. Forms pairs with sampleIds based on array index.\n+     * @param patientIds List of stable id's of patients to include in alteration counts. Forms pairs with patientIds based on array index.\n+     * @return\n+     */\n+    List<Integer> getPatientInternalIds(List<String> molecularProfileIds,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI2MTIyOQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTU4MzAwOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxODo0NjoxM1rOIRilbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNDowMDozOFrOISCs5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI2MzM0MA==", "bodyText": "Reiteration of previous comments : I'm generally supportive of using \"import java.util.*\" and yet I also have hesitancy towards collapsing our own class packages into wildcard includes.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555263340", "createdAt": "2021-01-11T18:46:13Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc4OTU0MQ==", "bodyText": "Wildcards in imports were all removed.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555789541", "createdAt": "2021-01-12T14:00:38Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI2MzM0MA=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTcwOTk5OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOToyMzowOVrOIRj0DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNDowMjoxMlrOISCwfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI4MzQ2OQ==", "bodyText": "This is kind of a nonsense query case, but it is good to short-circuit it", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555283469", "createdAt": "2021-01-11T19:23:09Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Repository\n+public class AlterationMyBatisRepository implements AlterationRepository {\n+\n+    @Autowired\n+    private AlterationCountsMapper alterationCountsMapper;\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 final Select<MutationEventType> mutationEventTypes,\n+                                                                 final Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+\n+        // TODO add test\n+        if (!mutationEventTypes.hasAll() && searchFusions != QueryElement.PASS)\n+            throw new IllegalArgumentException(\"Filtering for mutations vs. fusions and specifying mutation types\" +\n+                \"simultaneously is not permitted.\");\n+\n+        if ((mutationEventTypes.hasNone() && cnaEventTypes.hasNone())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc5MDQ2MQ==", "bodyText": "Yes, this should never occur, but the API permits it, so a short-circuit is justified in my opinion.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555790461", "createdAt": "2021-01-12T14:02:12Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Repository\n+public class AlterationMyBatisRepository implements AlterationRepository {\n+\n+    @Autowired\n+    private AlterationCountsMapper alterationCountsMapper;\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 final Select<MutationEventType> mutationEventTypes,\n+                                                                 final Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+\n+        // TODO add test\n+        if (!mutationEventTypes.hasAll() && searchFusions != QueryElement.PASS)\n+            throw new IllegalArgumentException(\"Filtering for mutations vs. fusions and specifying mutation types\" +\n+                \"simultaneously is not permitted.\");\n+\n+        if ((mutationEventTypes.hasNone() && cnaEventTypes.hasNone())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI4MzQ2OQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTcyMDA5OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOToyNTo1MlrOIRj6XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMTozODo1NFrOIWjCvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI4NTA4NA==", "bodyText": "molecularProfileCaseIdentifiers inherently indicate the associated profileid; this function call simply unpacks the structures for processing below.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555285084", "createdAt": "2021-01-11T19:25:52Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Repository\n+public class AlterationMyBatisRepository implements AlterationRepository {\n+\n+    @Autowired\n+    private AlterationCountsMapper alterationCountsMapper;\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 final Select<MutationEventType> mutationEventTypes,\n+                                                                 final Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+\n+        // TODO add test\n+        if (!mutationEventTypes.hasAll() && searchFusions != QueryElement.PASS)\n+            throw new IllegalArgumentException(\"Filtering for mutations vs. fusions and specifying mutation types\" +\n+                \"simultaneously is not permitted.\");\n+\n+        if ((mutationEventTypes.hasNone() && cnaEventTypes.hasNone())\n+            || molecularProfileCaseIdentifiers.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc5Mzg5MQ==", "bodyText": "After reading your comment I chose to pass List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers directly to the getInternalPatientIds() and getInternalSampleIds() methods.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555793891", "createdAt": "2021-01-12T14:07:09Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Repository\n+public class AlterationMyBatisRepository implements AlterationRepository {\n+\n+    @Autowired\n+    private AlterationCountsMapper alterationCountsMapper;\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 final Select<MutationEventType> mutationEventTypes,\n+                                                                 final Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+\n+        // TODO add test\n+        if (!mutationEventTypes.hasAll() && searchFusions != QueryElement.PASS)\n+            throw new IllegalArgumentException(\"Filtering for mutations vs. fusions and specifying mutation types\" +\n+                \"simultaneously is not permitted.\");\n+\n+        if ((mutationEventTypes.hasNone() && cnaEventTypes.hasNone())\n+            || molecularProfileCaseIdentifiers.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI4NTA4NA=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUxMzcyNQ==", "bodyText": "ok, if this was unnecessary code then that is good.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560513725", "createdAt": "2021-01-19T21:38:54Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Repository\n+public class AlterationMyBatisRepository implements AlterationRepository {\n+\n+    @Autowired\n+    private AlterationCountsMapper alterationCountsMapper;\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 final Select<MutationEventType> mutationEventTypes,\n+                                                                 final Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+\n+        // TODO add test\n+        if (!mutationEventTypes.hasAll() && searchFusions != QueryElement.PASS)\n+            throw new IllegalArgumentException(\"Filtering for mutations vs. fusions and specifying mutation types\" +\n+                \"simultaneously is not permitted.\");\n+\n+        if ((mutationEventTypes.hasNone() && cnaEventTypes.hasNone())\n+            || molecularProfileCaseIdentifiers.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI4NTA4NA=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTczMzEyOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOToyOTozNVrOIRkCZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMTo0Nzo1NlrOIWjVMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI4NzE0Mw==", "bodyText": "I made a comment elsewhere about the name of function getPatientInternalIds .. but now I see there actually is a method for getSampleInternalIds() ... so perhaps the call to getPatientInternalIds() was what was intended in the other place and the comment above that code simply needs to be updated?", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555287143", "createdAt": "2021-01-11T19:29:35Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Repository\n+public class AlterationMyBatisRepository implements AlterationRepository {\n+\n+    @Autowired\n+    private AlterationCountsMapper alterationCountsMapper;\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 final Select<MutationEventType> mutationEventTypes,\n+                                                                 final Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+\n+        // TODO add test\n+        if (!mutationEventTypes.hasAll() && searchFusions != QueryElement.PASS)\n+            throw new IllegalArgumentException(\"Filtering for mutations vs. fusions and specifying mutation types\" +\n+                \"simultaneously is not permitted.\");\n+\n+        if ((mutationEventTypes.hasNone() && cnaEventTypes.hasNone())\n+            || molecularProfileCaseIdentifiers.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);\n+\n+        List<Integer> internalSampleIds = alterationCountsMapper.getSampleInternalIds(caseIdToProfileIdArrays.getLeft(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgwNzk3MQ==", "bodyText": "Yes, it was a matter of simply updating the commens.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555807971", "createdAt": "2021-01-12T14:23:39Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Repository\n+public class AlterationMyBatisRepository implements AlterationRepository {\n+\n+    @Autowired\n+    private AlterationCountsMapper alterationCountsMapper;\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 final Select<MutationEventType> mutationEventTypes,\n+                                                                 final Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+\n+        // TODO add test\n+        if (!mutationEventTypes.hasAll() && searchFusions != QueryElement.PASS)\n+            throw new IllegalArgumentException(\"Filtering for mutations vs. fusions and specifying mutation types\" +\n+                \"simultaneously is not permitted.\");\n+\n+        if ((mutationEventTypes.hasNone() && cnaEventTypes.hasNone())\n+            || molecularProfileCaseIdentifiers.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);\n+\n+        List<Integer> internalSampleIds = alterationCountsMapper.getSampleInternalIds(caseIdToProfileIdArrays.getLeft(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI4NzE0Mw=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUxODQ0OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560518449", "createdAt": "2021-01-19T21:47:56Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Repository\n+public class AlterationMyBatisRepository implements AlterationRepository {\n+\n+    @Autowired\n+    private AlterationCountsMapper alterationCountsMapper;\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 final Select<MutationEventType> mutationEventTypes,\n+                                                                 final Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+\n+        // TODO add test\n+        if (!mutationEventTypes.hasAll() && searchFusions != QueryElement.PASS)\n+            throw new IllegalArgumentException(\"Filtering for mutations vs. fusions and specifying mutation types\" +\n+                \"simultaneously is not permitted.\");\n+\n+        if ((mutationEventTypes.hasNone() && cnaEventTypes.hasNone())\n+            || molecularProfileCaseIdentifiers.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);\n+\n+        List<Integer> internalSampleIds = alterationCountsMapper.getSampleInternalIds(caseIdToProfileIdArrays.getLeft(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI4NzE0Mw=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTc3NTQwOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTo0MjowM1rOIRkcMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNDozMDoxNlrOISEImQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5Mzc0Nw==", "bodyText": "Most of our source files end with a newline. I guess it would only have an effect if we concatenated source files for some purpose, but maybe it is cleaner to stay consistent.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555293747", "createdAt": "2021-01-11T19:42:03Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Repository\n+public class AlterationMyBatisRepository implements AlterationRepository {\n+\n+    @Autowired\n+    private AlterationCountsMapper alterationCountsMapper;\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 final Select<MutationEventType> mutationEventTypes,\n+                                                                 final Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+\n+        // TODO add test\n+        if (!mutationEventTypes.hasAll() && searchFusions != QueryElement.PASS)\n+            throw new IllegalArgumentException(\"Filtering for mutations vs. fusions and specifying mutation types\" +\n+                \"simultaneously is not permitted.\");\n+\n+        if ((mutationEventTypes.hasNone() && cnaEventTypes.hasNone())\n+            || molecularProfileCaseIdentifiers.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);\n+\n+        List<Integer> internalSampleIds = alterationCountsMapper.getSampleInternalIds(caseIdToProfileIdArrays.getLeft(),\n+            caseIdToProfileIdArrays.getRight());\n+        if (internalSampleIds.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        return alterationCountsMapper.getSampleAlterationCounts(\n+            internalSampleIds,\n+            entrezGeneIds,\n+            createMutationTypeList(mutationEventTypes),\n+            createCnaTypeList(cnaEventTypes),\n+            searchFusions);\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getPatientAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                  List<Integer> entrezGeneIds,\n+                                                                  Select<MutationEventType> mutationEventTypes,\n+                                                                  Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                  QueryElement searchFusions) {\n+\n+        if (!mutationEventTypes.hasAll() && searchFusions != QueryElement.PASS)\n+            throw new IllegalArgumentException(\"Filtering for mutations vs. fusions and specifying mutation types\" +\n+                \"simultaneously is not permitted.\");\n+        \n+        if ((mutationEventTypes.hasNone() && cnaEventTypes.hasNone())\n+            || molecularProfileCaseIdentifiers.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);\n+\n+        List<Integer> internalPatientIds = alterationCountsMapper.getPatientInternalIds(caseIdToProfileIdArrays.getLeft(),\n+            caseIdToProfileIdArrays.getRight());\n+        if (internalPatientIds.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        return alterationCountsMapper.getPatientAlterationCounts(\n+            internalPatientIds,\n+            entrezGeneIds,\n+            createMutationTypeList(mutationEventTypes),\n+            createCnaTypeList(cnaEventTypes),\n+            searchFusions);\n+    }\n+\n+    @Override\n+    public List<CopyNumberCountByGene> getSampleCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                          List<Integer> entrezGeneIds,\n+                                                          Select<CopyNumberAlterationEventType> cnaEventTypes) {\n+\n+        if (cnaEventTypes.hasNone()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);\n+\n+        List<Integer> internalSampleIds = alterationCountsMapper.getSampleInternalIds(caseIdToProfileIdArrays.getLeft(),\n+            caseIdToProfileIdArrays.getRight());\n+        if (internalSampleIds.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        return alterationCountsMapper.getSampleCnaCounts(\n+            internalSampleIds,\n+            entrezGeneIds,\n+            createCnaTypeList(cnaEventTypes));\n+    }\n+\n+    @Override\n+    public List<CopyNumberCountByGene> getPatientCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                           List<Integer> entrezGeneIds,\n+                                                           Select<CopyNumberAlterationEventType> cnaEventTypes) {\n+\n+        if (cnaEventTypes.hasNone()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);\n+\n+        return alterationCountsMapper.getPatientCnaCounts(\n+            caseIdToProfileIdArrays.getLeft(),\n+            caseIdToProfileIdArrays.getRight(),\n+            entrezGeneIds,\n+            createCnaTypeList(cnaEventTypes));\n+    }\n+\n+\n+    /**\n+     * Collect profile id and sample id arrays.\n+     *\n+     * @param ids List of MolecularProfileCaseIdentifiers\n+     * @return Pair of profile id/sample id arrays where every index\n+     * represents a profile id/sample id-combination\n+     */\n+    private Pair<List<String>, List<String>> createCaseIdToProfileIdArrays(List<MolecularProfileCaseIdentifier> ids) {\n+        List<String> caseIds = new ArrayList<>();\n+        List<String> profileIds = new ArrayList<>();\n+        ids.forEach(pair -> {\n+            caseIds.add(pair.getCaseId());\n+            profileIds.add(pair.getMolecularProfileId());\n+        });\n+        return Pair.of(profileIds, caseIds);\n+    }\n+\n+    private Select<Integer> createCnaTypeList(final Select<CopyNumberAlterationEventType> cnaEventTypes) {\n+        return cnaEventTypes.map(CopyNumberAlterationEventType::getAlterationType);\n+    }\n+\n+    private Select<String> createMutationTypeList(final Select<MutationEventType> mutationEventTypes) {\n+        return mutationEventTypes.map(MutationEventType::getMutationType);\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgxMzAxNw==", "bodyText": "Added. It would be great to implement some form of code formatting checking.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555813017", "createdAt": "2021-01-12T14:30:16Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.cbioportal.persistence.AlterationRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Repository\n+public class AlterationMyBatisRepository implements AlterationRepository {\n+\n+    @Autowired\n+    private AlterationCountsMapper alterationCountsMapper;\n+\n+    @Override\n+    public List<AlterationCountByGene> getSampleAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                 List<Integer> entrezGeneIds,\n+                                                                 final Select<MutationEventType> mutationEventTypes,\n+                                                                 final Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                 QueryElement searchFusions) {\n+\n+        // TODO add test\n+        if (!mutationEventTypes.hasAll() && searchFusions != QueryElement.PASS)\n+            throw new IllegalArgumentException(\"Filtering for mutations vs. fusions and specifying mutation types\" +\n+                \"simultaneously is not permitted.\");\n+\n+        if ((mutationEventTypes.hasNone() && cnaEventTypes.hasNone())\n+            || molecularProfileCaseIdentifiers.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);\n+\n+        List<Integer> internalSampleIds = alterationCountsMapper.getSampleInternalIds(caseIdToProfileIdArrays.getLeft(),\n+            caseIdToProfileIdArrays.getRight());\n+        if (internalSampleIds.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        return alterationCountsMapper.getSampleAlterationCounts(\n+            internalSampleIds,\n+            entrezGeneIds,\n+            createMutationTypeList(mutationEventTypes),\n+            createCnaTypeList(cnaEventTypes),\n+            searchFusions);\n+    }\n+\n+    @Override\n+    public List<AlterationCountByGene> getPatientAlterationCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                                  List<Integer> entrezGeneIds,\n+                                                                  Select<MutationEventType> mutationEventTypes,\n+                                                                  Select<CopyNumberAlterationEventType> cnaEventTypes,\n+                                                                  QueryElement searchFusions) {\n+\n+        if (!mutationEventTypes.hasAll() && searchFusions != QueryElement.PASS)\n+            throw new IllegalArgumentException(\"Filtering for mutations vs. fusions and specifying mutation types\" +\n+                \"simultaneously is not permitted.\");\n+        \n+        if ((mutationEventTypes.hasNone() && cnaEventTypes.hasNone())\n+            || molecularProfileCaseIdentifiers.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);\n+\n+        List<Integer> internalPatientIds = alterationCountsMapper.getPatientInternalIds(caseIdToProfileIdArrays.getLeft(),\n+            caseIdToProfileIdArrays.getRight());\n+        if (internalPatientIds.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        return alterationCountsMapper.getPatientAlterationCounts(\n+            internalPatientIds,\n+            entrezGeneIds,\n+            createMutationTypeList(mutationEventTypes),\n+            createCnaTypeList(cnaEventTypes),\n+            searchFusions);\n+    }\n+\n+    @Override\n+    public List<CopyNumberCountByGene> getSampleCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                          List<Integer> entrezGeneIds,\n+                                                          Select<CopyNumberAlterationEventType> cnaEventTypes) {\n+\n+        if (cnaEventTypes.hasNone()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);\n+\n+        List<Integer> internalSampleIds = alterationCountsMapper.getSampleInternalIds(caseIdToProfileIdArrays.getLeft(),\n+            caseIdToProfileIdArrays.getRight());\n+        if (internalSampleIds.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        return alterationCountsMapper.getSampleCnaCounts(\n+            internalSampleIds,\n+            entrezGeneIds,\n+            createCnaTypeList(cnaEventTypes));\n+    }\n+\n+    @Override\n+    public List<CopyNumberCountByGene> getPatientCnaCounts(List<MolecularProfileCaseIdentifier> molecularProfileCaseIdentifiers,\n+                                                           List<Integer> entrezGeneIds,\n+                                                           Select<CopyNumberAlterationEventType> cnaEventTypes) {\n+\n+        if (cnaEventTypes.hasNone()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Pair<List<String>, List<String>> caseIdToProfileIdArrays = createCaseIdToProfileIdArrays(molecularProfileCaseIdentifiers);\n+\n+        return alterationCountsMapper.getPatientCnaCounts(\n+            caseIdToProfileIdArrays.getLeft(),\n+            caseIdToProfileIdArrays.getRight(),\n+            entrezGeneIds,\n+            createCnaTypeList(cnaEventTypes));\n+    }\n+\n+\n+    /**\n+     * Collect profile id and sample id arrays.\n+     *\n+     * @param ids List of MolecularProfileCaseIdentifiers\n+     * @return Pair of profile id/sample id arrays where every index\n+     * represents a profile id/sample id-combination\n+     */\n+    private Pair<List<String>, List<String>> createCaseIdToProfileIdArrays(List<MolecularProfileCaseIdentifier> ids) {\n+        List<String> caseIds = new ArrayList<>();\n+        List<String> profileIds = new ArrayList<>();\n+        ids.forEach(pair -> {\n+            caseIds.add(pair.getCaseId());\n+            profileIds.add(pair.getMolecularProfileId());\n+        });\n+        return Pair.of(profileIds, caseIds);\n+    }\n+\n+    private Select<Integer> createCnaTypeList(final Select<CopyNumberAlterationEventType> cnaEventTypes) {\n+        return cnaEventTypes.map(CopyNumberAlterationEventType::getAlterationType);\n+    }\n+\n+    private Select<String> createMutationTypeList(final Select<MutationEventType> mutationEventTypes) {\n+        return mutationEventTypes.map(MutationEventType::getMutationType);\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5Mzc0Nw=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTgwNzQ2OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTo1MTo0NFrOIRkwTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMjoyMTo1MlrOIWkYVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5ODg5Mw==", "bodyText": "One possible distortion here is that sometimes the same physical sample gets imported several times in different studies (such as when a full study and a subset of that study are both imported into the same database). When this happens, the same physical sample will be in the database twice - with two different internal sample ids. I am not sure if this code avoid that kind of double counting -- because the two samples will have distinct sample identifiers. Perhaps this was a known distortion which was previously included, with the understanding that analysis which includes several studies related in such a way should be expected to have skewed statistics.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555298893", "createdAt": "2021-01-11T19:51:44Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgxNjEyNw==", "bodyText": "But the retrieval of the internal sample id is done in STABLE_ID and MOLECULAR_PROFILE_ID combinations. When the same STABLE_ID occurs in different studies the MOLECULAR_PROFILE_ID would be different not? I do not see how your scenario will cause problems.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555816127", "createdAt": "2021-01-12T14:34:29Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5ODg5Mw=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUzNDkzNg==", "bodyText": "I've read it through again. I'm still not sure I fully understand the constructed SQL, but now I think I see what I misunderstood when I made the comment above. At this point, the selection of samples is being done by internal sample ids via the comma separated list attached to the query through the include \"whereInternalSampleIdsMutation\" or the include \"whereInternalSampleIdsCna\" ... so the ambiguity between profiles has already been resolved before calling this mapper code and executing the query. I am guessing that my flagging of the line with DISTINCT(SAMPLE_ID) was connected to a thought that we were collapsing duplicated samples with distinct internal ids into a single count increment based on a shared stable id ... but now I think it is the UNION combination of results which necessitated this DISTINCT function in the SQL .. in order to not double count a sample which had both mutation events and also CNA events.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560534936", "createdAt": "2021-01-19T22:20:24Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5ODg5Mw=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUzNTYzOQ==", "bodyText": "I'll mark this conversation resolved ... but feel free to follow up if I still am not understanding things correctly", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560535639", "createdAt": "2021-01-19T22:21:52Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5ODg5Mw=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTg0OTEyOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDowNDowMlrOIRlJTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMjozMDoxOVrOIWkwBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMwNTI5NQ==", "bodyText": "selecting from the results of a previous select may introduce large temporaries. I think this nesting was from previous code however.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555305295", "createdAt": "2021-01-11T20:04:02Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0MzI3MA==", "bodyText": "Well, sort of. I understand that the use of the UNION ALL creates a temp table and that this is slow. We have tried several approaches and balanced readability, performance and convenient application of dynamic queries depending on the arguments. I suspect that in the future we may look at this again to optimize performance. However, I am a little bit out of my expertise here. So, any direct instructions and discussion would be appreciated greatly.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555843270", "createdAt": "2021-01-12T15:09:21Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMwNTI5NQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDU0MTcwMA==", "bodyText": "I'm also not a good expert on this ... but we are planning to do a round of performance bottleneck analysis very soon, so  I am sure we will be testing and considering this during that analysis. I'm tagging @mandawilson here, as a reminder that this is a section of code which needs some expert examination soon.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560541700", "createdAt": "2021-01-19T22:30:19Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMwNTI5NQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTg5MjY2OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDoxNjo0M1rOIRljFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMjoyNjowN1rOIWkgRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMxMTg5Mg==", "bodyText": "the mutation event table does not have an plain index on field \"MUTATION_TYPE\" .. this \"in\" clause (when used) translates into an iteration through all results, checking for match against all types in the list. This may become a performance bottleneck. [and may be pre-existing logic ?]", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555311892", "createdAt": "2021-01-11T20:16:43Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0NjAyMw==", "bodyText": "No, but since 2.12.7 the mutation_event table has an index on this field.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555846023", "createdAt": "2021-01-12T15:13:05Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMxMTg5Mg=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUzNzY3MA==", "bodyText": "\ud83d\udc4d  I see it now - I must have looked in the production database when checking for this. Oops.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560537670", "createdAt": "2021-01-19T22:26:07Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMxMTg5Mg=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTg5ODkwOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDoxODo0NVrOIRlm9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDoxODo0NVrOIRlm9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMxMjg4Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555312887", "createdAt": "2021-01-11T20:18:45Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTkwNDU0OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDoyMDoyNFrOIRlqXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMjozMjo0OFrOIWk4JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMxMzc1Ng==", "bodyText": "this is pre-existing code ... but we really have to refactor this soon : it is a known performance problem to use these (large and growing) sample lists like this", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555313756", "createdAt": "2021-01-11T20:20:24Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg0Nzg2OQ==", "bodyText": "Ok, I would be very interested in hearing from you why and how to better do this.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555847869", "createdAt": "2021-01-12T15:15:25Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMxMzc1Ng=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDU0Mzc4MQ==", "bodyText": "I'm eager to have an answer to give you \ud83d\ude05", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560543781", "createdAt": "2021-01-19T22:32:48Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMxMzc1Ng=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTkxMjAxOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDoyMjo0OFrOIRlvFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDoyMjo0OFrOIRlvFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMxNDk2Nw==", "bodyText": "This line is the essence of the new code --- we now are combining CNA and Mutation events", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555314967", "createdAt": "2021-01-11T20:22:48Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTkxNTA2OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDoyMzo0MFrOIRlw3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDoyMzo0MFrOIRlw3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMxNTQyMQ==", "bodyText": "this is the alias for the outer select statement (via the whereGene include)", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555315421", "createdAt": "2021-01-11T20:23:40Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                sample_cna_event.SAMPLE_ID,\n+                cna_event.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                sample_cna_event.GENETIC_PROFILE_ID,\n+                CAST(cna_event.ALTERATION AS CHAR(3))\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND sample_cna_event.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTkyNjcxOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDoyNjo0N1rOIRl3wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDoyNjo0N1rOIRl3wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMxNzE4NQ==", "bodyText": "see earlier bottleneck comments", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555317185", "createdAt": "2021-01-11T20:26:47Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                sample_cna_event.SAMPLE_ID,\n+                cna_event.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                sample_cna_event.GENETIC_PROFILE_ID,\n+                CAST(cna_event.ALTERATION AS CHAR(3))\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND sample_cna_event.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getPatientAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT\n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(PATIENT_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation_event.MUTATION_TYPE as alteration,\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN sample_profile ON sample_profile.SAMPLE_ID = mutation.SAMPLE_ID\n+            AND sample_profile.GENETIC_PROFILE_ID = mutation.GENETIC_PROFILE_ID\n+            INNER JOIN genetic_profile on sample_profile.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_profile.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTkzMjIzOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDoyODoxOVrOIRl7CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDoyODoxOVrOIRl7CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMxODAyNA==", "bodyText": "lots of joining here (just observing)", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555318024", "createdAt": "2021-01-11T20:28:19Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                sample_cna_event.SAMPLE_ID,\n+                cna_event.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                sample_cna_event.GENETIC_PROFILE_ID,\n+                CAST(cna_event.ALTERATION AS CHAR(3))\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND sample_cna_event.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getPatientAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT\n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(PATIENT_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation_event.MUTATION_TYPE as alteration,\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN sample_profile ON sample_profile.SAMPLE_ID = mutation.SAMPLE_ID\n+            AND sample_profile.GENETIC_PROFILE_ID = mutation.GENETIC_PROFILE_ID\n+            INNER JOIN genetic_profile on sample_profile.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_profile.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                cna_event.ENTREZ_GENE_ID , gene.HUGO_GENE_SYMBOL,\n+                CAST(cna_event.ALTERATION AS CHAR(3)),\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN genetic_profile on sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_cna_event.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjA2NjY3OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTowNDozMlrOIRnL0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTowNDozMlrOIRnL0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzODcwNg==", "bodyText": "aha .. so yes, this function actually does look up patient internal ids based on stable_id strings. (related to later comment about sample ids over a call to getPatientInternalIds)", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555338706", "createdAt": "2021-01-11T21:04:32Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                sample_cna_event.SAMPLE_ID,\n+                cna_event.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                sample_cna_event.GENETIC_PROFILE_ID,\n+                CAST(cna_event.ALTERATION AS CHAR(3))\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND sample_cna_event.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getPatientAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT\n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(PATIENT_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation_event.MUTATION_TYPE as alteration,\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN sample_profile ON sample_profile.SAMPLE_ID = mutation.SAMPLE_ID\n+            AND sample_profile.GENETIC_PROFILE_ID = mutation.GENETIC_PROFILE_ID\n+            INNER JOIN genetic_profile on sample_profile.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_profile.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                cna_event.ENTREZ_GENE_ID , gene.HUGO_GENE_SYMBOL,\n+                CAST(cna_event.ALTERATION AS CHAR(3)),\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN genetic_profile on sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_cna_event.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getSampleInternalIds\" resultType=\"Integer\">\n+        SELECT sample.INTERNAL_ID\n+        from sample\n+        INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+        INNER JOIN genetic_profile ON patient.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        <where>\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]} AND\n+                sample.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (sample.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{sampleIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+            </if>\n+        </where>\n+    </select>\n+\n+    <select id=\"getPatientInternalIds\" resultType=\"Integer\">\n+        SELECT patient.INTERNAL_ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjA3MjM3OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTowNTo1NFrOIRnPIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTowNTo1NFrOIRnPIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzOTU1Mg==", "bodyText": "I guess we cover the case of 0 genetic profiles by the short circuit in the repository class.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555339552", "createdAt": "2021-01-11T21:05:54Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                sample_cna_event.SAMPLE_ID,\n+                cna_event.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                sample_cna_event.GENETIC_PROFILE_ID,\n+                CAST(cna_event.ALTERATION AS CHAR(3))\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND sample_cna_event.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getPatientAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT\n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(PATIENT_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation_event.MUTATION_TYPE as alteration,\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN sample_profile ON sample_profile.SAMPLE_ID = mutation.SAMPLE_ID\n+            AND sample_profile.GENETIC_PROFILE_ID = mutation.GENETIC_PROFILE_ID\n+            INNER JOIN genetic_profile on sample_profile.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_profile.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                cna_event.ENTREZ_GENE_ID , gene.HUGO_GENE_SYMBOL,\n+                CAST(cna_event.ALTERATION AS CHAR(3)),\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN genetic_profile on sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_cna_event.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getSampleInternalIds\" resultType=\"Integer\">\n+        SELECT sample.INTERNAL_ID\n+        from sample\n+        INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+        INNER JOIN genetic_profile ON patient.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        <where>\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]} AND\n+                sample.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (sample.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{sampleIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+            </if>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjA4Mzg1OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTowOToxNlrOIRnVzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzo1ODoxMFrOIW_bGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM0MTI2Mg==", "bodyText": "doesn't this starting \"AND\" asssume that the previous test succeeded? Perhaps we need an else clause on the previous test which inserts a trivially \"TRUE\" value which will be there before the \"AND\" operator is inserted?\nThis same observation applies to prior and following constructions. For instance, above there are choose constructs without a default option ... if it is possible that no choice from the choose could be taken, then we need a default \"TRUE\" value so that it can be followed with the \"AND\" operator.\nIf it is logically impossible to go through the prior conditionals without any of them being inserted, maybe a brief comment would be a good idea at that point before the \"AND\" operator (e.g. \"one of the two choices above will always be chosen\")", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555341262", "createdAt": "2021-01-11T21:09:16Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                sample_cna_event.SAMPLE_ID,\n+                cna_event.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                sample_cna_event.GENETIC_PROFILE_ID,\n+                CAST(cna_event.ALTERATION AS CHAR(3))\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND sample_cna_event.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getPatientAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT\n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(PATIENT_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation_event.MUTATION_TYPE as alteration,\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN sample_profile ON sample_profile.SAMPLE_ID = mutation.SAMPLE_ID\n+            AND sample_profile.GENETIC_PROFILE_ID = mutation.GENETIC_PROFILE_ID\n+            INNER JOIN genetic_profile on sample_profile.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_profile.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                cna_event.ENTREZ_GENE_ID , gene.HUGO_GENE_SYMBOL,\n+                CAST(cna_event.ALTERATION AS CHAR(3)),\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN genetic_profile on sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_cna_event.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getSampleInternalIds\" resultType=\"Integer\">\n+        SELECT sample.INTERNAL_ID\n+        from sample\n+        INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+        INNER JOIN genetic_profile ON patient.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        <where>\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]} AND\n+                sample.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (sample.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{sampleIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+            </if>\n+        </where>\n+    </select>\n+\n+    <select id=\"getPatientInternalIds\" resultType=\"Integer\">\n+        SELECT patient.INTERNAL_ID\n+        from patient\n+        INNER JOIN genetic_profile ON patient.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        <where>\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]} AND\n+                patient.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (patient.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{patientIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+            </if>\n+        </where>\n+    </select>\n+\n+    <select id=\"getSampleCnaCounts\" resultType=\"org.cbioportal.model.CopyNumberCountByGene\">\n+        SELECT\n+            cna_event.ENTREZ_GENE_ID AS entrezGeneId,\n+            gene.HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            reference_genome_gene.CYTOBAND as cytoband,\n+            cna_event.ALTERATION AS alteration,\n+            COUNT(DISTINCT(sample_cna_event.SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM cna_event\n+        INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+        INNER JOIN genetic_profile ON sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+        INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+        INNER JOIN cancer_study ON cancer_study.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        INNER JOIN reference_genome_gene ON reference_genome_gene.ENTREZ_GENE_ID = cna_event.ENTREZ_GENE_ID\n+        AND reference_genome_gene.reference_genome_id = cancer_study.reference_genome_id\n+        WHERE\n+        <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+            sample_cna_event.SAMPLE_ID IN\n+            <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{internalSampleId}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds != null and cnaTypes.hasValues()\">\n+            AND (cna_event.ENTREZ_GENE_ID, cna_event.ALTERATION) IN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk3ODcxNA==", "bodyText": "I'll leave these two conversations unresolved (relating to the potential risk of a \"dangling AND clause\"), but I don't think these prevent merging the PR.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560978714", "createdAt": "2021-01-20T13:58:10Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                sample_cna_event.SAMPLE_ID,\n+                cna_event.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                sample_cna_event.GENETIC_PROFILE_ID,\n+                CAST(cna_event.ALTERATION AS CHAR(3))\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND sample_cna_event.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getPatientAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT\n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(PATIENT_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation_event.MUTATION_TYPE as alteration,\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN sample_profile ON sample_profile.SAMPLE_ID = mutation.SAMPLE_ID\n+            AND sample_profile.GENETIC_PROFILE_ID = mutation.GENETIC_PROFILE_ID\n+            INNER JOIN genetic_profile on sample_profile.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_profile.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                cna_event.ENTREZ_GENE_ID , gene.HUGO_GENE_SYMBOL,\n+                CAST(cna_event.ALTERATION AS CHAR(3)),\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN genetic_profile on sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_cna_event.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getSampleInternalIds\" resultType=\"Integer\">\n+        SELECT sample.INTERNAL_ID\n+        from sample\n+        INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+        INNER JOIN genetic_profile ON patient.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        <where>\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]} AND\n+                sample.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (sample.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{sampleIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+            </if>\n+        </where>\n+    </select>\n+\n+    <select id=\"getPatientInternalIds\" resultType=\"Integer\">\n+        SELECT patient.INTERNAL_ID\n+        from patient\n+        INNER JOIN genetic_profile ON patient.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        <where>\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]} AND\n+                patient.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (patient.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{patientIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+            </if>\n+        </where>\n+    </select>\n+\n+    <select id=\"getSampleCnaCounts\" resultType=\"org.cbioportal.model.CopyNumberCountByGene\">\n+        SELECT\n+            cna_event.ENTREZ_GENE_ID AS entrezGeneId,\n+            gene.HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            reference_genome_gene.CYTOBAND as cytoband,\n+            cna_event.ALTERATION AS alteration,\n+            COUNT(DISTINCT(sample_cna_event.SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM cna_event\n+        INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+        INNER JOIN genetic_profile ON sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+        INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+        INNER JOIN cancer_study ON cancer_study.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        INNER JOIN reference_genome_gene ON reference_genome_gene.ENTREZ_GENE_ID = cna_event.ENTREZ_GENE_ID\n+        AND reference_genome_gene.reference_genome_id = cancer_study.reference_genome_id\n+        WHERE\n+        <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+            sample_cna_event.SAMPLE_ID IN\n+            <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{internalSampleId}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds != null and cnaTypes.hasValues()\">\n+            AND (cna_event.ENTREZ_GENE_ID, cna_event.ALTERATION) IN", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM0MTI2Mg=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjEyMDcyOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMToyMDo0N1rOIRnsFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMzozOToyNlrOIWmwCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM0Njk2NQ==", "bodyText": "There are many IN (. , . , .) clauses here. This probably does not scale very well when large lists get passed in. When we examine runtime limits and do performance optimizations we may need to set and enforce limits on queries. [ queries are not allowed when the number of passed in entrez gene ids multiplied by the number of samples involved is greater than X ] Long term we need specifiers which are not exhaustive lists of every explicit case desired - we need semantic groups.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555346965", "createdAt": "2021-01-11T21:20:47Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                sample_cna_event.SAMPLE_ID,\n+                cna_event.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                sample_cna_event.GENETIC_PROFILE_ID,\n+                CAST(cna_event.ALTERATION AS CHAR(3))\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND sample_cna_event.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getPatientAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT\n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(PATIENT_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation_event.MUTATION_TYPE as alteration,\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN sample_profile ON sample_profile.SAMPLE_ID = mutation.SAMPLE_ID\n+            AND sample_profile.GENETIC_PROFILE_ID = mutation.GENETIC_PROFILE_ID\n+            INNER JOIN genetic_profile on sample_profile.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_profile.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                cna_event.ENTREZ_GENE_ID , gene.HUGO_GENE_SYMBOL,\n+                CAST(cna_event.ALTERATION AS CHAR(3)),\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN genetic_profile on sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_cna_event.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getSampleInternalIds\" resultType=\"Integer\">\n+        SELECT sample.INTERNAL_ID\n+        from sample\n+        INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+        INNER JOIN genetic_profile ON patient.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        <where>\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]} AND\n+                sample.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (sample.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{sampleIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+            </if>\n+        </where>\n+    </select>\n+\n+    <select id=\"getPatientInternalIds\" resultType=\"Integer\">\n+        SELECT patient.INTERNAL_ID\n+        from patient\n+        INNER JOIN genetic_profile ON patient.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        <where>\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]} AND\n+                patient.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (patient.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{patientIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+            </if>\n+        </where>\n+    </select>\n+\n+    <select id=\"getSampleCnaCounts\" resultType=\"org.cbioportal.model.CopyNumberCountByGene\">\n+        SELECT\n+            cna_event.ENTREZ_GENE_ID AS entrezGeneId,\n+            gene.HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            reference_genome_gene.CYTOBAND as cytoband,\n+            cna_event.ALTERATION AS alteration,\n+            COUNT(DISTINCT(sample_cna_event.SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM cna_event\n+        INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+        INNER JOIN genetic_profile ON sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+        INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+        INNER JOIN cancer_study ON cancer_study.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        INNER JOIN reference_genome_gene ON reference_genome_gene.ENTREZ_GENE_ID = cna_event.ENTREZ_GENE_ID\n+        AND reference_genome_gene.reference_genome_id = cancer_study.reference_genome_id\n+        WHERE\n+        <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+            sample_cna_event.SAMPLE_ID IN\n+            <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{internalSampleId}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds != null and cnaTypes.hasValues()\">\n+            AND (cna_event.ENTREZ_GENE_ID, cna_event.ALTERATION) IN\n+            <foreach index=\"i\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n+                (#{entrezGeneIds[${i}]}, #{cnaTypes[${i}]})\n+            </foreach>\n+        </if>\n+        <!--TODO If cnaTypes.hasNone() we need to force to produce empty set despite entrezGeneIds is specified?-->\n+        <if test=\"entrezGeneIds != null and !cnaTypes.hasValues()\">\n+            AND cna_event.ENTREZ_GENE_ID IN\n+            <foreach item=\"entrezGeneId\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{entrezGeneId}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds == null and cnaTypes.hasValues()\">\n+            AND cna_event.ALTERATION IN\n+            <foreach item=\"cnaType\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                #{cnaType}\n+            </foreach>\n+        </if>\n+        GROUP BY cna_event.ENTREZ_GENE_ID, cna_event.ALTERATION, reference_genome_gene.CYTOBAND, gene.HUGO_GENE_SYMBOL\n+    </select>\n+\n+    <select id=\"getPatientCnaCounts\" resultType=\"org.cbioportal.model.CopyNumberCountByGene\">\n+        SELECT\n+            cna_event.ENTREZ_GENE_ID AS entrezGeneId,\n+            gene.HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            cna_event.ALTERATION AS alteration,\n+            COUNT(DISTINCT(patient.INTERNAL_ID)) AS numberOfAlteredCases\n+        FROM cna_event\n+        INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+        INNER JOIN genetic_profile ON sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+        INNER JOIN sample ON sample_cna_event.SAMPLE_ID = sample.INTERNAL_ID\n+        INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+        INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+        WHERE\n+        <if test=\"patientIds != null and !patientIds.isEmpty()\">\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]}\n+                AND patient.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (patient.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{patientIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+                AND genetic_profile.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"molecularProfileIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+        </if>\n+        <if test=\"patientIds == null\">\n+            genetic_profile.STABLE_ID IN\n+            <foreach item=\"item\" collection=\"molecularProfileIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{item}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds != null and cnaTypes.hasValues()\">\n+            AND (cna_event.ENTREZ_GENE_ID, cna_event.ALTERATION) IN\n+            <foreach index=\"i\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n+                (#{entrezGeneIds[${i}]}, #{cnaTypes[${i}]})\n+            </foreach>\n+        </if>\n+        <!--TODO If cnaTypes.hasNone() we need to force to produce empty set despite entrezGeneIds is specified?-->\n+        <if test=\"entrezGeneIds != null and !cnaTypes.hasValues()\">\n+            AND cna_event.ENTREZ_GENE_ID IN\n+            <foreach item=\"entrezGeneId\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{entrezGeneId}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds == null and cnaTypes.hasValues()\">\n+            AND cna_event.ALTERATION IN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDU3NDQ3Mw==", "bodyText": "resolving conversation for now", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560574473", "createdAt": "2021-01-19T23:39:26Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                sample_cna_event.SAMPLE_ID,\n+                cna_event.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                sample_cna_event.GENETIC_PROFILE_ID,\n+                CAST(cna_event.ALTERATION AS CHAR(3))\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND sample_cna_event.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getPatientAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT\n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(PATIENT_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation_event.MUTATION_TYPE as alteration,\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN sample_profile ON sample_profile.SAMPLE_ID = mutation.SAMPLE_ID\n+            AND sample_profile.GENETIC_PROFILE_ID = mutation.GENETIC_PROFILE_ID\n+            INNER JOIN genetic_profile on sample_profile.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_profile.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                cna_event.ENTREZ_GENE_ID , gene.HUGO_GENE_SYMBOL,\n+                CAST(cna_event.ALTERATION AS CHAR(3)),\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN genetic_profile on sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_cna_event.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getSampleInternalIds\" resultType=\"Integer\">\n+        SELECT sample.INTERNAL_ID\n+        from sample\n+        INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+        INNER JOIN genetic_profile ON patient.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        <where>\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]} AND\n+                sample.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (sample.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{sampleIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+            </if>\n+        </where>\n+    </select>\n+\n+    <select id=\"getPatientInternalIds\" resultType=\"Integer\">\n+        SELECT patient.INTERNAL_ID\n+        from patient\n+        INNER JOIN genetic_profile ON patient.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        <where>\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]} AND\n+                patient.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (patient.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{patientIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+            </if>\n+        </where>\n+    </select>\n+\n+    <select id=\"getSampleCnaCounts\" resultType=\"org.cbioportal.model.CopyNumberCountByGene\">\n+        SELECT\n+            cna_event.ENTREZ_GENE_ID AS entrezGeneId,\n+            gene.HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            reference_genome_gene.CYTOBAND as cytoband,\n+            cna_event.ALTERATION AS alteration,\n+            COUNT(DISTINCT(sample_cna_event.SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM cna_event\n+        INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+        INNER JOIN genetic_profile ON sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+        INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+        INNER JOIN cancer_study ON cancer_study.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        INNER JOIN reference_genome_gene ON reference_genome_gene.ENTREZ_GENE_ID = cna_event.ENTREZ_GENE_ID\n+        AND reference_genome_gene.reference_genome_id = cancer_study.reference_genome_id\n+        WHERE\n+        <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+            sample_cna_event.SAMPLE_ID IN\n+            <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{internalSampleId}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds != null and cnaTypes.hasValues()\">\n+            AND (cna_event.ENTREZ_GENE_ID, cna_event.ALTERATION) IN\n+            <foreach index=\"i\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n+                (#{entrezGeneIds[${i}]}, #{cnaTypes[${i}]})\n+            </foreach>\n+        </if>\n+        <!--TODO If cnaTypes.hasNone() we need to force to produce empty set despite entrezGeneIds is specified?-->\n+        <if test=\"entrezGeneIds != null and !cnaTypes.hasValues()\">\n+            AND cna_event.ENTREZ_GENE_ID IN\n+            <foreach item=\"entrezGeneId\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{entrezGeneId}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds == null and cnaTypes.hasValues()\">\n+            AND cna_event.ALTERATION IN\n+            <foreach item=\"cnaType\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                #{cnaType}\n+            </foreach>\n+        </if>\n+        GROUP BY cna_event.ENTREZ_GENE_ID, cna_event.ALTERATION, reference_genome_gene.CYTOBAND, gene.HUGO_GENE_SYMBOL\n+    </select>\n+\n+    <select id=\"getPatientCnaCounts\" resultType=\"org.cbioportal.model.CopyNumberCountByGene\">\n+        SELECT\n+            cna_event.ENTREZ_GENE_ID AS entrezGeneId,\n+            gene.HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            cna_event.ALTERATION AS alteration,\n+            COUNT(DISTINCT(patient.INTERNAL_ID)) AS numberOfAlteredCases\n+        FROM cna_event\n+        INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+        INNER JOIN genetic_profile ON sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+        INNER JOIN sample ON sample_cna_event.SAMPLE_ID = sample.INTERNAL_ID\n+        INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+        INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+        WHERE\n+        <if test=\"patientIds != null and !patientIds.isEmpty()\">\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]}\n+                AND patient.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (patient.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{patientIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+                AND genetic_profile.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"molecularProfileIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+        </if>\n+        <if test=\"patientIds == null\">\n+            genetic_profile.STABLE_ID IN\n+            <foreach item=\"item\" collection=\"molecularProfileIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{item}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds != null and cnaTypes.hasValues()\">\n+            AND (cna_event.ENTREZ_GENE_ID, cna_event.ALTERATION) IN\n+            <foreach index=\"i\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n+                (#{entrezGeneIds[${i}]}, #{cnaTypes[${i}]})\n+            </foreach>\n+        </if>\n+        <!--TODO If cnaTypes.hasNone() we need to force to produce empty set despite entrezGeneIds is specified?-->\n+        <if test=\"entrezGeneIds != null and !cnaTypes.hasValues()\">\n+            AND cna_event.ENTREZ_GENE_ID IN\n+            <foreach item=\"entrezGeneId\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{entrezGeneId}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds == null and cnaTypes.hasValues()\">\n+            AND cna_event.ALTERATION IN", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM0Njk2NQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjEzNjQ5OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMToyNTozM1rOIRn1lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMToyNTozM1rOIRn1lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM0OTM5Ng==", "bodyText": "every clause which begins with \"AND\" should be sure that a previous clause inserted some value in order to have a left hand operand. Also, it would be good if the unit tests explore all combinations of the argument space relevant to these selections (to make sure this missing operand error is not possible in an untested case)", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555349396", "createdAt": "2021-01-11T21:25:33Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/AlterationCountsMapper.xml", "diffHunk": "@@ -0,0 +1,337 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+\n+<mapper namespace=\"org.cbioportal.persistence.mybatis.AlterationCountsMapper\">\n+\n+    <select id=\"getSampleAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT \n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                mutation.SAMPLE_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation.GENETIC_PROFILE_ID,\n+                mutation_event.MUTATION_TYPE\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND mutation.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                sample_cna_event.SAMPLE_ID,\n+                cna_event.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                sample_cna_event.GENETIC_PROFILE_ID,\n+                CAST(cna_event.ALTERATION AS CHAR(3))\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+                    AND sample_cna_event.SAMPLE_ID IN\n+                    <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalSampleId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getPatientAlterationCounts\" resultType=\"org.cbioportal.model.AlterationCountByGene\">\n+        SELECT\n+            ENTREZ_GENE_ID AS entrezGeneId,\n+            HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            COUNT(*) AS totalCount,\n+            COUNT(DISTINCT(PATIENT_ID)) AS numberOfAlteredCases\n+        FROM\n+        (\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                mutation.ENTREZ_GENE_ID,\n+                gene.HUGO_GENE_SYMBOL,\n+                mutation_event.MUTATION_TYPE as alteration,\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM mutation_event\n+            INNER JOIN mutation ON mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID\n+            INNER JOIN gene ON mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN sample_profile ON sample_profile.SAMPLE_ID = mutation.SAMPLE_ID\n+            AND sample_profile.GENETIC_PROFILE_ID = mutation.GENETIC_PROFILE_ID\n+            INNER JOIN genetic_profile on sample_profile.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_profile.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"mutationTypes.hasNone()\">NULL</when>\n+                    <when test=\"!mutationTypes.hasAll()\">\n+                        LOWER(mutation_event.MUTATION_TYPE) IN\n+                        <foreach item=\"type\" collection=\"mutationTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            LOWER(#{type})\n+                        </foreach>\n+                    </when>\n+                    <!--\n+                    BEWARE: at the moment fusions are in the mutations table with MUTATION_TYPE 'Fusion'\n+                    this results in undesired interaction of fusion vs mutation queries and the ability to \n+                    pass a list of mutation types (that can include fusion events).\n+                    Now, fusions can be only filtered out when there is no limit on the mutation types\n+                    ('mutationTypes.hasAll()'). This code should be changed when fusions move\n+                    to the strucural variants table.\n+                    -->\n+                    <when test=\"mutationTypes.hasAll()\">\n+                        <include refid=\"whereSearchFusions\"/>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+            UNION ALL\n+            SELECT\n+                patient.STABLE_ID as PATIENT_ID,\n+                cna_event.ENTREZ_GENE_ID , gene.HUGO_GENE_SYMBOL,\n+                CAST(cna_event.ALTERATION AS CHAR(3)),\n+                genetic_profile.STABLE_ID as GENETIC_PROFILE_STABLE_ID\n+            FROM cna_event\n+            INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+            INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+            INNER JOIN genetic_profile on sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+            INNER JOIN sample ON sample_cna_event.SAMPLE_ID = sample.INTERNAL_ID\n+            INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+            <where>\n+                <choose>\n+                    <when test=\"cnaTypes.hasNone()\">NULL</when>\n+                    <when test=\"!cnaTypes.hasAll()\">\n+                        cna_event.ALTERATION IN\n+                        <foreach item=\"type\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                            #{type}\n+                        </foreach>\n+                    </when>\n+                </choose>\n+                <if test=\"internalPatientIds != null and !internalPatientIds.isEmpty()\">\n+                    AND patient.INTERNAL_ID IN\n+                    <foreach item=\"internalPatientId\" collection=\"internalPatientIds\" open=\"(\" separator=\",\" close=\")\">\n+                        #{internalPatientId}\n+                    </foreach>\n+                </if>\n+            </where>\n+        ) as JoinedTable\n+        <where>\n+            <include refid=\"whereGene\"/>\n+        </where>\n+        GROUP BY ENTREZ_GENE_ID, HUGO_GENE_SYMBOL;\n+    </select>\n+\n+    <select id=\"getSampleInternalIds\" resultType=\"Integer\">\n+        SELECT sample.INTERNAL_ID\n+        from sample\n+        INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+        INNER JOIN genetic_profile ON patient.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        <where>\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]} AND\n+                sample.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (sample.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"sampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{sampleIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+            </if>\n+        </where>\n+    </select>\n+\n+    <select id=\"getPatientInternalIds\" resultType=\"Integer\">\n+        SELECT patient.INTERNAL_ID\n+        from patient\n+        INNER JOIN genetic_profile ON patient.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        <where>\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]} AND\n+                patient.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (patient.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{patientIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+            </if>\n+        </where>\n+    </select>\n+\n+    <select id=\"getSampleCnaCounts\" resultType=\"org.cbioportal.model.CopyNumberCountByGene\">\n+        SELECT\n+            cna_event.ENTREZ_GENE_ID AS entrezGeneId,\n+            gene.HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            reference_genome_gene.CYTOBAND as cytoband,\n+            cna_event.ALTERATION AS alteration,\n+            COUNT(DISTINCT(sample_cna_event.SAMPLE_ID)) AS numberOfAlteredCases\n+        FROM cna_event\n+        INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+        INNER JOIN genetic_profile ON sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+        INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+        INNER JOIN cancer_study ON cancer_study.CANCER_STUDY_ID = genetic_profile.CANCER_STUDY_ID\n+        INNER JOIN reference_genome_gene ON reference_genome_gene.ENTREZ_GENE_ID = cna_event.ENTREZ_GENE_ID\n+        AND reference_genome_gene.reference_genome_id = cancer_study.reference_genome_id\n+        WHERE\n+        <if test=\"internalSampleIds != null and !internalSampleIds.isEmpty()\">\n+            sample_cna_event.SAMPLE_ID IN\n+            <foreach item=\"internalSampleId\" collection=\"internalSampleIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{internalSampleId}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds != null and cnaTypes.hasValues()\">\n+            AND (cna_event.ENTREZ_GENE_ID, cna_event.ALTERATION) IN\n+            <foreach index=\"i\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n+                (#{entrezGeneIds[${i}]}, #{cnaTypes[${i}]})\n+            </foreach>\n+        </if>\n+        <!--TODO If cnaTypes.hasNone() we need to force to produce empty set despite entrezGeneIds is specified?-->\n+        <if test=\"entrezGeneIds != null and !cnaTypes.hasValues()\">\n+            AND cna_event.ENTREZ_GENE_ID IN\n+            <foreach item=\"entrezGeneId\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{entrezGeneId}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds == null and cnaTypes.hasValues()\">\n+            AND cna_event.ALTERATION IN\n+            <foreach item=\"cnaType\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                #{cnaType}\n+            </foreach>\n+        </if>\n+        GROUP BY cna_event.ENTREZ_GENE_ID, cna_event.ALTERATION, reference_genome_gene.CYTOBAND, gene.HUGO_GENE_SYMBOL\n+    </select>\n+\n+    <select id=\"getPatientCnaCounts\" resultType=\"org.cbioportal.model.CopyNumberCountByGene\">\n+        SELECT\n+            cna_event.ENTREZ_GENE_ID AS entrezGeneId,\n+            gene.HUGO_GENE_SYMBOL AS hugoGeneSymbol,\n+            cna_event.ALTERATION AS alteration,\n+            COUNT(DISTINCT(patient.INTERNAL_ID)) AS numberOfAlteredCases\n+        FROM cna_event\n+        INNER JOIN sample_cna_event ON cna_event.CNA_EVENT_ID = sample_cna_event.CNA_EVENT_ID\n+        INNER JOIN genetic_profile ON sample_cna_event.GENETIC_PROFILE_ID = genetic_profile.GENETIC_PROFILE_ID\n+        INNER JOIN sample ON sample_cna_event.SAMPLE_ID = sample.INTERNAL_ID\n+        INNER JOIN patient ON sample.PATIENT_ID = patient.INTERNAL_ID\n+        INNER JOIN gene ON cna_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID\n+        WHERE\n+        <if test=\"patientIds != null and !patientIds.isEmpty()\">\n+            <if test=\"molecularProfileIds.stream().distinct().count() == 1\">\n+                genetic_profile.STABLE_ID = #{molecularProfileIds[0]}\n+                AND patient.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+            <if test=\"molecularProfileIds.stream().distinct().count() > 1\">\n+                (patient.STABLE_ID, genetic_profile.STABLE_ID) IN\n+                <foreach index=\"i\" collection=\"patientIds\" open=\"(\" separator=\",\" close=\")\">\n+                    (#{patientIds[${i}]}, #{molecularProfileIds[${i}]})\n+                </foreach>\n+                AND genetic_profile.STABLE_ID IN\n+                <foreach item=\"item\" collection=\"molecularProfileIds\" open=\"(\" separator=\",\" close=\")\">\n+                    #{item}\n+                </foreach>\n+            </if>\n+        </if>\n+        <if test=\"patientIds == null\">\n+            genetic_profile.STABLE_ID IN\n+            <foreach item=\"item\" collection=\"molecularProfileIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{item}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds != null and cnaTypes.hasValues()\">\n+            AND (cna_event.ENTREZ_GENE_ID, cna_event.ALTERATION) IN\n+            <foreach index=\"i\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n+                (#{entrezGeneIds[${i}]}, #{cnaTypes[${i}]})\n+            </foreach>\n+        </if>\n+        <!--TODO If cnaTypes.hasNone() we need to force to produce empty set despite entrezGeneIds is specified?-->\n+        <if test=\"entrezGeneIds != null and !cnaTypes.hasValues()\">\n+            AND cna_event.ENTREZ_GENE_ID IN\n+            <foreach item=\"entrezGeneId\" collection=\"entrezGeneIds\" open=\"(\" separator=\",\" close=\")\">\n+                #{entrezGeneId}\n+            </foreach>\n+        </if>\n+        <if test=\"entrezGeneIds == null and cnaTypes.hasValues()\">\n+            AND cna_event.ALTERATION IN\n+            <foreach item=\"cnaType\" collection=\"cnaTypes\" open=\"(\" separator=\",\" close=\")\">\n+                #{cnaType}\n+            </foreach>\n+        </if>\n+        GROUP BY cna_event.ENTREZ_GENE_ID, cna_event.ALTERATION, gene.HUGO_GENE_SYMBOL\n+    </select>\n+\n+    <sql id=\"whereSearchFusions\">\n+        <if test=\"searchFusions.name() == 'ACTIVE'\">\n+            AND", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 319}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjMyNDczOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjoyMzoyNVrOIRpnGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjoyMzoyNVrOIRpnGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM3ODQ1Ng==", "bodyText": "import wildcards mentioned previously", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555378456", "createdAt": "2021-01-11T22:23:25Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjM2MzQ0OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjozNjoyNlrOIRp-Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQyMzo0MToyM1rOIWmyzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4NDM2Ng==", "bodyText": "The comment should be clarified. If the implementing code is not expected to be deleted soon perhaps a comment in the implementation should describe what combination of arguments must be avoided (non null entrezGeneId list?)", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555384366", "createdAt": "2021-01-11T22:36:26Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/testContextDatabase.xml\")\n+@Configurable\n+public class AlterationMyBatisRepositoryTest {\n+\n+//    mutation and cna events in testSql.sql\n+//        SAMPLE_ID, ENTREZ_GENE_ID, HUGO_GENE_SYMBOL, GENETIC_PROFILE_ID, MUTATION_TYPE, DRIVER_FILTER, DRIVER_TIERS_FILTER, PATIENT_ID\n+//        1\t    207\tAKT1\t2\t-2\t                Putative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t2\t2\t                Putative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    207\tAKT1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    208\tAKT2\t2\t2\t\t            <null>              <null>  TCGA-A1-A0SB\n+//        3\t    208\tAKT2\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SE\n+//        6\t    672\tBRCA1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SH\n+//        6\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SH\n+//        7\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 2  TCGA-A1-A0SI\n+//        12\t672\tBRCA1\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SO\n+//        13\t672\tBRCA1\t6\tSplice_Site\t        Putative_Driver\t    Tier 1  TCGA-A1-A0SP\n+\n+    @Autowired\n+    private AlterationMyBatisRepository alterationMyBatisRepository;\n+\n+    Select<MutationEventType> mutationEventTypes = Select.byValues(Arrays.asList(\n+        MutationEventType.splice_site,\n+        MutationEventType.nonsense_mutation,\n+        MutationEventType.missense_mutation\n+    ));\n+    Select<CopyNumberAlterationEventType> cnaEventTypes = Select.byValues(Arrays.asList(\n+        CopyNumberAlterationEventType.AMP,\n+        CopyNumberAlterationEventType.HOMDEL\n+    ));\n+    List<MolecularProfileCaseIdentifier> sampleIdToProfileId = new ArrayList<>();\n+    List<MolecularProfileCaseIdentifier> patientIdToProfileId = new ArrayList<>();\n+    List<Integer> entrezGeneIds = new ArrayList<>();\n+\n+    @Before\n+    public void setup() {\n+        \n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_gistic\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_gistic\"));\n+\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_gistic\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_gistic\"));\n+        \n+        entrezGeneIds.add(207);\n+        entrezGeneIds.add(208);\n+        entrezGeneIds.add(672);\n+    }\n+\n+    @Test\n+    public void getSampleMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDU3NTE4Mw==", "bodyText": "this was done", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560575183", "createdAt": "2021-01-19T23:41:23Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/testContextDatabase.xml\")\n+@Configurable\n+public class AlterationMyBatisRepositoryTest {\n+\n+//    mutation and cna events in testSql.sql\n+//        SAMPLE_ID, ENTREZ_GENE_ID, HUGO_GENE_SYMBOL, GENETIC_PROFILE_ID, MUTATION_TYPE, DRIVER_FILTER, DRIVER_TIERS_FILTER, PATIENT_ID\n+//        1\t    207\tAKT1\t2\t-2\t                Putative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t2\t2\t                Putative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    207\tAKT1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    208\tAKT2\t2\t2\t\t            <null>              <null>  TCGA-A1-A0SB\n+//        3\t    208\tAKT2\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SE\n+//        6\t    672\tBRCA1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SH\n+//        6\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SH\n+//        7\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 2  TCGA-A1-A0SI\n+//        12\t672\tBRCA1\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SO\n+//        13\t672\tBRCA1\t6\tSplice_Site\t        Putative_Driver\t    Tier 1  TCGA-A1-A0SP\n+\n+    @Autowired\n+    private AlterationMyBatisRepository alterationMyBatisRepository;\n+\n+    Select<MutationEventType> mutationEventTypes = Select.byValues(Arrays.asList(\n+        MutationEventType.splice_site,\n+        MutationEventType.nonsense_mutation,\n+        MutationEventType.missense_mutation\n+    ));\n+    Select<CopyNumberAlterationEventType> cnaEventTypes = Select.byValues(Arrays.asList(\n+        CopyNumberAlterationEventType.AMP,\n+        CopyNumberAlterationEventType.HOMDEL\n+    ));\n+    List<MolecularProfileCaseIdentifier> sampleIdToProfileId = new ArrayList<>();\n+    List<MolecularProfileCaseIdentifier> patientIdToProfileId = new ArrayList<>();\n+    List<Integer> entrezGeneIds = new ArrayList<>();\n+\n+    @Before\n+    public void setup() {\n+        \n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_gistic\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_gistic\"));\n+\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_gistic\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_gistic\"));\n+        \n+        entrezGeneIds.add(207);\n+        entrezGeneIds.add(208);\n+        entrezGeneIds.add(672);\n+    }\n+\n+    @Test\n+    public void getSampleMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4NDM2Ng=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjM4NjE0OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjo0NDoyN1rOIRqLnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNToyMDo0NVrOISGgnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4NzgwNw==", "bodyText": "It might be worthwhile to add a case with 2 samples belonging to the same sample in the mock test data ... it would give a chance here to put a test in place showing correct behavior for the logic / call chains distinguishing sample counts from patient counts.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555387807", "createdAt": "2021-01-11T22:44:27Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/testContextDatabase.xml\")\n+@Configurable\n+public class AlterationMyBatisRepositoryTest {\n+\n+//    mutation and cna events in testSql.sql\n+//        SAMPLE_ID, ENTREZ_GENE_ID, HUGO_GENE_SYMBOL, GENETIC_PROFILE_ID, MUTATION_TYPE, DRIVER_FILTER, DRIVER_TIERS_FILTER, PATIENT_ID\n+//        1\t    207\tAKT1\t2\t-2\t                Putative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t2\t2\t                Putative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    207\tAKT1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    208\tAKT2\t2\t2\t\t            <null>              <null>  TCGA-A1-A0SB\n+//        3\t    208\tAKT2\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SE\n+//        6\t    672\tBRCA1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SH\n+//        6\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SH\n+//        7\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 2  TCGA-A1-A0SI\n+//        12\t672\tBRCA1\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SO\n+//        13\t672\tBRCA1\t6\tSplice_Site\t        Putative_Driver\t    Tier 1  TCGA-A1-A0SP\n+\n+    @Autowired\n+    private AlterationMyBatisRepository alterationMyBatisRepository;\n+\n+    Select<MutationEventType> mutationEventTypes = Select.byValues(Arrays.asList(\n+        MutationEventType.splice_site,\n+        MutationEventType.nonsense_mutation,\n+        MutationEventType.missense_mutation\n+    ));\n+    Select<CopyNumberAlterationEventType> cnaEventTypes = Select.byValues(Arrays.asList(\n+        CopyNumberAlterationEventType.AMP,\n+        CopyNumberAlterationEventType.HOMDEL\n+    ));\n+    List<MolecularProfileCaseIdentifier> sampleIdToProfileId = new ArrayList<>();\n+    List<MolecularProfileCaseIdentifier> patientIdToProfileId = new ArrayList<>();\n+    List<Integer> entrezGeneIds = new ArrayList<>();\n+\n+    @Before\n+    public void setup() {\n+        \n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_gistic\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_gistic\"));\n+\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_gistic\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_gistic\"));\n+        \n+        entrezGeneIds.add(207);\n+        entrezGeneIds.add(208);\n+        entrezGeneIds.add(672);\n+    }\n+\n+    @Test\n+    public void getSampleMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with\n+        List<CopyNumberCountByGene> result = alterationMyBatisRepository.getSampleCnaCounts(\n+            sampleIdToProfileId, entrezGeneIds, cnaEventTypes);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result207up = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == 2).findFirst().get();\n+        AlterationCountByGene result207down = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == -2).findFirst().get();\n+        AlterationCountByGene result208up = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 1, result207up.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result207down.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208up.getNumberOfAlteredCases());\n+    }\n+    \n+    @Test\n+    public void getPatientCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with\n+        List<CopyNumberCountByGene> result = alterationMyBatisRepository.getPatientCnaCounts(\n+            patientIdToProfileId, entrezGeneIds, cnaEventTypes);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg1MTkzMw==", "bodyText": "Ok, I made it:\n       // FIXME: the CnaCountLegacy endpoint is different from the AlterationCount endpoint\n        // because it returns a single additional value 'cytoband'. It would make sense to \n        // harmonize these endpoints (both or none return 'cytoband') and use the AlterationCount\n        // endpoint for all counts. Discuss...", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555851933", "createdAt": "2021-01-12T15:20:45Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/testContextDatabase.xml\")\n+@Configurable\n+public class AlterationMyBatisRepositoryTest {\n+\n+//    mutation and cna events in testSql.sql\n+//        SAMPLE_ID, ENTREZ_GENE_ID, HUGO_GENE_SYMBOL, GENETIC_PROFILE_ID, MUTATION_TYPE, DRIVER_FILTER, DRIVER_TIERS_FILTER, PATIENT_ID\n+//        1\t    207\tAKT1\t2\t-2\t                Putative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t2\t2\t                Putative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    207\tAKT1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    208\tAKT2\t2\t2\t\t            <null>              <null>  TCGA-A1-A0SB\n+//        3\t    208\tAKT2\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SE\n+//        6\t    672\tBRCA1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SH\n+//        6\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SH\n+//        7\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 2  TCGA-A1-A0SI\n+//        12\t672\tBRCA1\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SO\n+//        13\t672\tBRCA1\t6\tSplice_Site\t        Putative_Driver\t    Tier 1  TCGA-A1-A0SP\n+\n+    @Autowired\n+    private AlterationMyBatisRepository alterationMyBatisRepository;\n+\n+    Select<MutationEventType> mutationEventTypes = Select.byValues(Arrays.asList(\n+        MutationEventType.splice_site,\n+        MutationEventType.nonsense_mutation,\n+        MutationEventType.missense_mutation\n+    ));\n+    Select<CopyNumberAlterationEventType> cnaEventTypes = Select.byValues(Arrays.asList(\n+        CopyNumberAlterationEventType.AMP,\n+        CopyNumberAlterationEventType.HOMDEL\n+    ));\n+    List<MolecularProfileCaseIdentifier> sampleIdToProfileId = new ArrayList<>();\n+    List<MolecularProfileCaseIdentifier> patientIdToProfileId = new ArrayList<>();\n+    List<Integer> entrezGeneIds = new ArrayList<>();\n+\n+    @Before\n+    public void setup() {\n+        \n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_gistic\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_gistic\"));\n+\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_gistic\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_gistic\"));\n+        \n+        entrezGeneIds.add(207);\n+        entrezGeneIds.add(208);\n+        entrezGeneIds.add(672);\n+    }\n+\n+    @Test\n+    public void getSampleMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with\n+        List<CopyNumberCountByGene> result = alterationMyBatisRepository.getSampleCnaCounts(\n+            sampleIdToProfileId, entrezGeneIds, cnaEventTypes);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result207up = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == 2).findFirst().get();\n+        AlterationCountByGene result207down = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == -2).findFirst().get();\n+        AlterationCountByGene result208up = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 1, result207up.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result207down.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208up.getNumberOfAlteredCases());\n+    }\n+    \n+    @Test\n+    public void getPatientCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with\n+        List<CopyNumberCountByGene> result = alterationMyBatisRepository.getPatientCnaCounts(\n+            patientIdToProfileId, entrezGeneIds, cnaEventTypes);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4NzgwNw=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjM5NTYyOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjo0Nzo0NlrOIRqRGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxOTowOFrOIW92pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTIwOQ==", "bodyText": "these tests are good for covering the query argument space. If there are other combinations of arguments which might present an edge case to the mapper logic for including / excluding / selecting terms for the SQL where clause, consider expanding to other permutations.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555389209", "createdAt": "2021-01-11T22:47:46Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/testContextDatabase.xml\")\n+@Configurable\n+public class AlterationMyBatisRepositoryTest {\n+\n+//    mutation and cna events in testSql.sql\n+//        SAMPLE_ID, ENTREZ_GENE_ID, HUGO_GENE_SYMBOL, GENETIC_PROFILE_ID, MUTATION_TYPE, DRIVER_FILTER, DRIVER_TIERS_FILTER, PATIENT_ID\n+//        1\t    207\tAKT1\t2\t-2\t                Putative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t2\t2\t                Putative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    207\tAKT1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    208\tAKT2\t2\t2\t\t            <null>              <null>  TCGA-A1-A0SB\n+//        3\t    208\tAKT2\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SE\n+//        6\t    672\tBRCA1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SH\n+//        6\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SH\n+//        7\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 2  TCGA-A1-A0SI\n+//        12\t672\tBRCA1\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SO\n+//        13\t672\tBRCA1\t6\tSplice_Site\t        Putative_Driver\t    Tier 1  TCGA-A1-A0SP\n+\n+    @Autowired\n+    private AlterationMyBatisRepository alterationMyBatisRepository;\n+\n+    Select<MutationEventType> mutationEventTypes = Select.byValues(Arrays.asList(\n+        MutationEventType.splice_site,\n+        MutationEventType.nonsense_mutation,\n+        MutationEventType.missense_mutation\n+    ));\n+    Select<CopyNumberAlterationEventType> cnaEventTypes = Select.byValues(Arrays.asList(\n+        CopyNumberAlterationEventType.AMP,\n+        CopyNumberAlterationEventType.HOMDEL\n+    ));\n+    List<MolecularProfileCaseIdentifier> sampleIdToProfileId = new ArrayList<>();\n+    List<MolecularProfileCaseIdentifier> patientIdToProfileId = new ArrayList<>();\n+    List<Integer> entrezGeneIds = new ArrayList<>();\n+\n+    @Before\n+    public void setup() {\n+        \n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_gistic\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_gistic\"));\n+\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_gistic\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_gistic\"));\n+        \n+        entrezGeneIds.add(207);\n+        entrezGeneIds.add(208);\n+        entrezGeneIds.add(672);\n+    }\n+\n+    @Test\n+    public void getSampleMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with\n+        List<CopyNumberCountByGene> result = alterationMyBatisRepository.getSampleCnaCounts(\n+            sampleIdToProfileId, entrezGeneIds, cnaEventTypes);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result207up = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == 2).findFirst().get();\n+        AlterationCountByGene result207down = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == -2).findFirst().get();\n+        AlterationCountByGene result208up = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 1, result207up.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result207down.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208up.getNumberOfAlteredCases());\n+    }\n+    \n+    @Test\n+    public void getPatientCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with\n+        List<CopyNumberCountByGene> result = alterationMyBatisRepository.getPatientCnaCounts(\n+            patientIdToProfileId, entrezGeneIds, cnaEventTypes);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result207up = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == 2).findFirst().get();\n+        AlterationCountByGene result207down = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == -2).findFirst().get();\n+        AlterationCountByGene result208up = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 1, result207up.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result207down.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208up.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleAlterationCountsReturnsZeroForMutationsAndCnaSelectorsInNone() {\n+\n+        mutationEventTypes = Select.none();\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(0, result.size());\n+    }\n+\n+    @Test\n+    public void getSampleAlterationCountsReturnsAllForMutationsAndCnaSelectorsInAll() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMwNjg5Nw==", "bodyText": "I have added new tests that mainly test behavior for null arguments. I also implemented the Select.java pattern for entrezGeneIds.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r556306897", "createdAt": "2021-01-13T07:17:37Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/testContextDatabase.xml\")\n+@Configurable\n+public class AlterationMyBatisRepositoryTest {\n+\n+//    mutation and cna events in testSql.sql\n+//        SAMPLE_ID, ENTREZ_GENE_ID, HUGO_GENE_SYMBOL, GENETIC_PROFILE_ID, MUTATION_TYPE, DRIVER_FILTER, DRIVER_TIERS_FILTER, PATIENT_ID\n+//        1\t    207\tAKT1\t2\t-2\t                Putative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t2\t2\t                Putative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    207\tAKT1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    208\tAKT2\t2\t2\t\t            <null>              <null>  TCGA-A1-A0SB\n+//        3\t    208\tAKT2\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SE\n+//        6\t    672\tBRCA1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SH\n+//        6\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SH\n+//        7\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 2  TCGA-A1-A0SI\n+//        12\t672\tBRCA1\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SO\n+//        13\t672\tBRCA1\t6\tSplice_Site\t        Putative_Driver\t    Tier 1  TCGA-A1-A0SP\n+\n+    @Autowired\n+    private AlterationMyBatisRepository alterationMyBatisRepository;\n+\n+    Select<MutationEventType> mutationEventTypes = Select.byValues(Arrays.asList(\n+        MutationEventType.splice_site,\n+        MutationEventType.nonsense_mutation,\n+        MutationEventType.missense_mutation\n+    ));\n+    Select<CopyNumberAlterationEventType> cnaEventTypes = Select.byValues(Arrays.asList(\n+        CopyNumberAlterationEventType.AMP,\n+        CopyNumberAlterationEventType.HOMDEL\n+    ));\n+    List<MolecularProfileCaseIdentifier> sampleIdToProfileId = new ArrayList<>();\n+    List<MolecularProfileCaseIdentifier> patientIdToProfileId = new ArrayList<>();\n+    List<Integer> entrezGeneIds = new ArrayList<>();\n+\n+    @Before\n+    public void setup() {\n+        \n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_gistic\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_gistic\"));\n+\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_gistic\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_gistic\"));\n+        \n+        entrezGeneIds.add(207);\n+        entrezGeneIds.add(208);\n+        entrezGeneIds.add(672);\n+    }\n+\n+    @Test\n+    public void getSampleMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with\n+        List<CopyNumberCountByGene> result = alterationMyBatisRepository.getSampleCnaCounts(\n+            sampleIdToProfileId, entrezGeneIds, cnaEventTypes);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result207up = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == 2).findFirst().get();\n+        AlterationCountByGene result207down = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == -2).findFirst().get();\n+        AlterationCountByGene result208up = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 1, result207up.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result207down.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208up.getNumberOfAlteredCases());\n+    }\n+    \n+    @Test\n+    public void getPatientCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with\n+        List<CopyNumberCountByGene> result = alterationMyBatisRepository.getPatientCnaCounts(\n+            patientIdToProfileId, entrezGeneIds, cnaEventTypes);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result207up = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == 2).findFirst().get();\n+        AlterationCountByGene result207down = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == -2).findFirst().get();\n+        AlterationCountByGene result208up = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 1, result207up.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result207down.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208up.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleAlterationCountsReturnsZeroForMutationsAndCnaSelectorsInNone() {\n+\n+        mutationEventTypes = Select.none();\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(0, result.size());\n+    }\n+\n+    @Test\n+    public void getSampleAlterationCountsReturnsAllForMutationsAndCnaSelectorsInAll() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTIwOQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk1Mjk5Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r560952997", "createdAt": "2021-01-20T13:19:08Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/testContextDatabase.xml\")\n+@Configurable\n+public class AlterationMyBatisRepositoryTest {\n+\n+//    mutation and cna events in testSql.sql\n+//        SAMPLE_ID, ENTREZ_GENE_ID, HUGO_GENE_SYMBOL, GENETIC_PROFILE_ID, MUTATION_TYPE, DRIVER_FILTER, DRIVER_TIERS_FILTER, PATIENT_ID\n+//        1\t    207\tAKT1\t2\t-2\t                Putative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t2\t2\t                Putative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    207\tAKT1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    208\tAKT2\t2\t2\t\t            <null>              <null>  TCGA-A1-A0SB\n+//        3\t    208\tAKT2\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SE\n+//        6\t    672\tBRCA1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SH\n+//        6\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SH\n+//        7\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 2  TCGA-A1-A0SI\n+//        12\t672\tBRCA1\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SO\n+//        13\t672\tBRCA1\t6\tSplice_Site\t        Putative_Driver\t    Tier 1  TCGA-A1-A0SP\n+\n+    @Autowired\n+    private AlterationMyBatisRepository alterationMyBatisRepository;\n+\n+    Select<MutationEventType> mutationEventTypes = Select.byValues(Arrays.asList(\n+        MutationEventType.splice_site,\n+        MutationEventType.nonsense_mutation,\n+        MutationEventType.missense_mutation\n+    ));\n+    Select<CopyNumberAlterationEventType> cnaEventTypes = Select.byValues(Arrays.asList(\n+        CopyNumberAlterationEventType.AMP,\n+        CopyNumberAlterationEventType.HOMDEL\n+    ));\n+    List<MolecularProfileCaseIdentifier> sampleIdToProfileId = new ArrayList<>();\n+    List<MolecularProfileCaseIdentifier> patientIdToProfileId = new ArrayList<>();\n+    List<Integer> entrezGeneIds = new ArrayList<>();\n+\n+    @Before\n+    public void setup() {\n+        \n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_gistic\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_gistic\"));\n+\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_gistic\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_gistic\"));\n+        \n+        entrezGeneIds.add(207);\n+        entrezGeneIds.add(208);\n+        entrezGeneIds.add(672);\n+    }\n+\n+    @Test\n+    public void getSampleMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with\n+        List<CopyNumberCountByGene> result = alterationMyBatisRepository.getSampleCnaCounts(\n+            sampleIdToProfileId, entrezGeneIds, cnaEventTypes);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result207up = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == 2).findFirst().get();\n+        AlterationCountByGene result207down = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == -2).findFirst().get();\n+        AlterationCountByGene result208up = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 1, result207up.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result207down.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208up.getNumberOfAlteredCases());\n+    }\n+    \n+    @Test\n+    public void getPatientCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with\n+        List<CopyNumberCountByGene> result = alterationMyBatisRepository.getPatientCnaCounts(\n+            patientIdToProfileId, entrezGeneIds, cnaEventTypes);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result207up = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == 2).findFirst().get();\n+        AlterationCountByGene result207down = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == -2).findFirst().get();\n+        AlterationCountByGene result208up = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 1, result207up.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result207down.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208up.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleAlterationCountsReturnsZeroForMutationsAndCnaSelectorsInNone() {\n+\n+        mutationEventTypes = Select.none();\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(0, result.size());\n+    }\n+\n+    @Test\n+    public void getSampleAlterationCountsReturnsAllForMutationsAndCnaSelectorsInAll() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTIwOQ=="}, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjM5OTE3OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjo0OTowMVrOIRqTKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjo0OTowMVrOIRqTKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTczOA==", "bodyText": "these 4 tests of illegal argument combinations are great \ud83d\udc4d", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r555389738", "createdAt": "2021-01-11T22:49:01Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-mybatis/src/test/java/org/cbioportal/persistence/mybatis/AlterationMyBatisRepositoryTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.util.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(\"/testContextDatabase.xml\")\n+@Configurable\n+public class AlterationMyBatisRepositoryTest {\n+\n+//    mutation and cna events in testSql.sql\n+//        SAMPLE_ID, ENTREZ_GENE_ID, HUGO_GENE_SYMBOL, GENETIC_PROFILE_ID, MUTATION_TYPE, DRIVER_FILTER, DRIVER_TIERS_FILTER, PATIENT_ID\n+//        1\t    207\tAKT1\t2\t-2\t                Putative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t2\t2\t                Putative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    207\tAKT1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SB\n+//        2\t    207\tAKT1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SD\n+//        1\t    208\tAKT2\t2\t2\t\t            <null>              <null>  TCGA-A1-A0SB\n+//        3\t    208\tAKT2\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SE\n+//        6\t    672\tBRCA1\t6\tMissense_Mutation\tPutative_Passenger\tTier 2  TCGA-A1-A0SH\n+//        6\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 1  TCGA-A1-A0SH\n+//        7\t    672\tBRCA1\t6\tNonsense_Mutation\tPutative_Driver\t    Tier 2  TCGA-A1-A0SI\n+//        12\t672\tBRCA1\t6\tSplice_Site\t        Putative_Passenger\tTier 1  TCGA-A1-A0SO\n+//        13\t672\tBRCA1\t6\tSplice_Site\t        Putative_Driver\t    Tier 1  TCGA-A1-A0SP\n+\n+    @Autowired\n+    private AlterationMyBatisRepository alterationMyBatisRepository;\n+\n+    Select<MutationEventType> mutationEventTypes = Select.byValues(Arrays.asList(\n+        MutationEventType.splice_site,\n+        MutationEventType.nonsense_mutation,\n+        MutationEventType.missense_mutation\n+    ));\n+    Select<CopyNumberAlterationEventType> cnaEventTypes = Select.byValues(Arrays.asList(\n+        CopyNumberAlterationEventType.AMP,\n+        CopyNumberAlterationEventType.HOMDEL\n+    ));\n+    List<MolecularProfileCaseIdentifier> sampleIdToProfileId = new ArrayList<>();\n+    List<MolecularProfileCaseIdentifier> patientIdToProfileId = new ArrayList<>();\n+    List<Integer> entrezGeneIds = new ArrayList<>();\n+\n+    @Before\n+    public void setup() {\n+        \n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_mutations\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB-01\", \"study_tcga_pub_gistic\"));\n+        sampleIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD-01\", \"study_tcga_pub_gistic\"));\n+\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SE\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SH\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SI\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SO\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SP\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_mutations\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SB\", \"study_tcga_pub_gistic\"));\n+        patientIdToProfileId.add(new MolecularProfileCaseIdentifier(\"TCGA-A1-A0SD\", \"study_tcga_pub_gistic\"));\n+        \n+        entrezGeneIds.add(207);\n+        entrezGeneIds.add(208);\n+        entrezGeneIds.add(672);\n+    }\n+\n+    @Test\n+    public void getSampleMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationCount() throws Exception {\n+\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientCnaCount() throws Exception {\n+\n+        mutationEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(2, result.size());\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 2, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 1, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getPatientMutationAndCnaCount() throws Exception {\n+\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getPatientAlterationCounts(\n+            patientIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result672 = result.stream().filter(r -> r.getEntrezGeneId() == 672).findFirst().get();\n+        AlterationCountByGene result207 = result.stream().filter(r -> r.getEntrezGeneId() == 207).findFirst().get();\n+        AlterationCountByGene result208 = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 5, result672.getTotalCount());\n+        Assert.assertEquals((Integer) 4, result672.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 4, result207.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result207.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 2, result208.getTotalCount());\n+        Assert.assertEquals((Integer) 2, result208.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with\n+        List<CopyNumberCountByGene> result = alterationMyBatisRepository.getSampleCnaCounts(\n+            sampleIdToProfileId, entrezGeneIds, cnaEventTypes);\n+\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result207up = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == 2).findFirst().get();\n+        AlterationCountByGene result207down = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == -2).findFirst().get();\n+        AlterationCountByGene result208up = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 1, result207up.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result207down.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208up.getNumberOfAlteredCases());\n+    }\n+    \n+    @Test\n+    public void getPatientCnaCountLegacy() throws Exception {\n+\n+        // FIXME: whole CNA dedicated endpoint should be removed\n+        entrezGeneIds = null; // only way it works; otherwise it tries to pair up geneids with alteration types with\n+        List<CopyNumberCountByGene> result = alterationMyBatisRepository.getPatientCnaCounts(\n+            patientIdToProfileId, entrezGeneIds, cnaEventTypes);\n+\n+        // For testSql.sql there are no more samples per patient for the investigated genes.\n+        // Therefore, patient level counts are the same as the sample level counts.\n+        Assert.assertEquals(3, result.size());\n+        AlterationCountByGene result207up = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == 2).findFirst().get();\n+        AlterationCountByGene result207down = result.stream().filter(r -> r.getEntrezGeneId() == 207 && r.getAlteration() == -2).findFirst().get();\n+        AlterationCountByGene result208up = result.stream().filter(r -> r.getEntrezGeneId() == 208).findFirst().get();\n+        Assert.assertEquals((Integer) 1, result207up.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result207down.getNumberOfAlteredCases());\n+        Assert.assertEquals((Integer) 1, result208up.getNumberOfAlteredCases());\n+    }\n+\n+    @Test\n+    public void getSampleAlterationCountsReturnsZeroForMutationsAndCnaSelectorsInNone() {\n+\n+        mutationEventTypes = Select.none();\n+        cnaEventTypes = Select.none();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(0, result.size());\n+    }\n+\n+    @Test\n+    public void getSampleAlterationCountsReturnsAllForMutationsAndCnaSelectorsInAll() {\n+\n+        mutationEventTypes = Select.all();\n+        cnaEventTypes = Select.all();\n+        List<AlterationCountByGene> result = alterationMyBatisRepository.getSampleAlterationCounts(\n+            sampleIdToProfileId, entrezGeneIds, mutationEventTypes, cnaEventTypes, QueryElement.PASS);\n+\n+        Assert.assertEquals(3, result.size());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed23abb39d061e48f4259b4d44e92aa6d39df8"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzOTM3NTEzOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-api/src/main/java/org/cbioportal/persistence/MutationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzozOToyM1rOIYCMDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNzozODoyOFrOIYYmQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA3MjU5MQ==", "bodyText": "I just noticed this in the latest squash of the code. I think this was the attempt to address the previous comment I made, but this is in the wrong place. This should remain as cacheResover = \"generalRepositoryCacheResolver\". Up above in class AlterationRepository, the annotation there should change to match this. (Use cacheResolver = \"generalRepositoryCacheResolver\").  We should no longer be using explicit cacheNames.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r562072591", "createdAt": "2021-01-21T17:39:23Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-api/src/main/java/org/cbioportal/persistence/MutationRepository.java", "diffHunk": "@@ -42,27 +42,7 @@ MutationMeta getMetaMutationsInMultipleMolecularProfiles(List<String> molecularP\n     MutationMeta fetchMetaMutationsInMolecularProfile(String molecularProfileId, List<String> sampleIds,\n                                                       List<Integer> entrezGeneIds);\n \n-    @Cacheable(cacheResolver = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")\n-    List<MutationCountByGene> getSampleCountByEntrezGeneIdsAndSampleIds(String molecularProfileId,\n-                                                                        List<String> sampleIds,\n-                                                                        List<Integer> entrezGeneIds);\n-\n-    @Cacheable(cacheResolver = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")\n-    List<MutationCountByGene> getSampleCountInMultipleMolecularProfiles(List<String> molecularProfileIds,\n-                                                                        List<String> sampleIds,\n-                                                                        List<Integer> entrezGeneIds);\n-    \n-    @Cacheable(cacheResolver = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")\n-    List<MutationCountByGene> getSampleCountInMultipleMolecularProfilesForFusions(List<String> molecularProfileIds,\n-                                                                        List<String> sampleIds,\n-                                                                        List<Integer> entrezGeneIds);\n-\n-    @Cacheable(cacheResolver = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")\n-    List<MutationCountByGene> getPatientCountInMultipleMolecularProfiles(List<String> molecularProfileIds,\n-                                                                         List<String> patientIds,\n-                                                                         List<Integer> entrezGeneIds);\n-\n-    @Cacheable(cacheResolver = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")\n+    @Cacheable(cacheNames = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3d3cea1270bb3d6343851480e04ab9997d848b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQzOTc0NA==", "bodyText": "Ah, I missed the different name for the parameter. Ok, corrected and squashed.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r562439744", "createdAt": "2021-01-22T07:38:28Z", "author": {"login": "pvannierop"}, "path": "persistence/persistence-api/src/main/java/org/cbioportal/persistence/MutationRepository.java", "diffHunk": "@@ -42,27 +42,7 @@ MutationMeta getMetaMutationsInMultipleMolecularProfiles(List<String> molecularP\n     MutationMeta fetchMetaMutationsInMolecularProfile(String molecularProfileId, List<String> sampleIds,\n                                                       List<Integer> entrezGeneIds);\n \n-    @Cacheable(cacheResolver = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")\n-    List<MutationCountByGene> getSampleCountByEntrezGeneIdsAndSampleIds(String molecularProfileId,\n-                                                                        List<String> sampleIds,\n-                                                                        List<Integer> entrezGeneIds);\n-\n-    @Cacheable(cacheResolver = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")\n-    List<MutationCountByGene> getSampleCountInMultipleMolecularProfiles(List<String> molecularProfileIds,\n-                                                                        List<String> sampleIds,\n-                                                                        List<Integer> entrezGeneIds);\n-    \n-    @Cacheable(cacheResolver = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")\n-    List<MutationCountByGene> getSampleCountInMultipleMolecularProfilesForFusions(List<String> molecularProfileIds,\n-                                                                        List<String> sampleIds,\n-                                                                        List<Integer> entrezGeneIds);\n-\n-    @Cacheable(cacheResolver = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")\n-    List<MutationCountByGene> getPatientCountInMultipleMolecularProfiles(List<String> molecularProfileIds,\n-                                                                         List<String> patientIds,\n-                                                                         List<Integer> entrezGeneIds);\n-\n-    @Cacheable(cacheResolver = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")\n+    @Cacheable(cacheNames = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA3MjU5MQ=="}, "originalCommit": {"oid": "7e3d3cea1270bb3d6343851480e04ab9997d848b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MzUyMjY1OnYy", "diffSide": "RIGHT", "path": "db-scripts/src/main/resources/migration.sql", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNToyMjowOFrOIYozHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxODo0ODo1NFrOIYw5tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjcwNTE4MA==", "bodyText": "would be better to move these two statements to 2.12.8, the migrations should be immutable but i can change it post merge", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r562705180", "createdAt": "2021-01-22T15:22:08Z", "author": {"login": "inodb"}, "path": "db-scripts/src/main/resources/migration.sql", "diffHunk": "@@ -928,4 +928,11 @@ drop column `DRIVER_FILTER`,\n drop column `DRIVER_FILTER_ANNOTATION`,\n drop column `DRIVER_TIERS_FILTER`,\n drop column `DRIVER_TIERS_FILTER_ANNOTATION`;\n-UPDATE `info` SET `DB_SCHEMA_VERSION`=\"2.12.7\";\n\\ No newline at end of file\n+CREATE INDEX idx_mutation_type ON mutation_event (`MUTATION_TYPE`);\n+CREATE INDEX idx_cna_type ON cna_event (`ALTERATION`);\n+UPDATE `info` SET `DB_SCHEMA_VERSION`=\"2.12.7\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b48291fd8442d2fdb60e955e8f54ababee0da2e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjgyODU3Mg==", "bodyText": "@inodb the merge has been performed .. we can now push the changes to the db schema into a new version. I made a previous comment in this PR about the need to also update cgds.sql with the new db schema version (as a reminder). I didn't notice that 2.12.8 was dropped in the changes.", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r562828572", "createdAt": "2021-01-22T18:31:42Z", "author": {"login": "sheridancbio"}, "path": "db-scripts/src/main/resources/migration.sql", "diffHunk": "@@ -928,4 +928,11 @@ drop column `DRIVER_FILTER`,\n drop column `DRIVER_FILTER_ANNOTATION`,\n drop column `DRIVER_TIERS_FILTER`,\n drop column `DRIVER_TIERS_FILTER_ANNOTATION`;\n-UPDATE `info` SET `DB_SCHEMA_VERSION`=\"2.12.7\";\n\\ No newline at end of file\n+CREATE INDEX idx_mutation_type ON mutation_event (`MUTATION_TYPE`);\n+CREATE INDEX idx_cna_type ON cna_event (`ALTERATION`);\n+UPDATE `info` SET `DB_SCHEMA_VERSION`=\"2.12.7\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjcwNTE4MA=="}, "originalCommit": {"oid": "1b48291fd8442d2fdb60e955e8f54ababee0da2e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjgzNzk0MA==", "bodyText": "fyi i just fixed this here: 6934a58", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r562837940", "createdAt": "2021-01-22T18:48:54Z", "author": {"login": "inodb"}, "path": "db-scripts/src/main/resources/migration.sql", "diffHunk": "@@ -928,4 +928,11 @@ drop column `DRIVER_FILTER`,\n drop column `DRIVER_FILTER_ANNOTATION`,\n drop column `DRIVER_TIERS_FILTER`,\n drop column `DRIVER_TIERS_FILTER_ANNOTATION`;\n-UPDATE `info` SET `DB_SCHEMA_VERSION`=\"2.12.7\";\n\\ No newline at end of file\n+CREATE INDEX idx_mutation_type ON mutation_event (`MUTATION_TYPE`);\n+CREATE INDEX idx_cna_type ON cna_event (`ALTERATION`);\n+UPDATE `info` SET `DB_SCHEMA_VERSION`=\"2.12.7\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjcwNTE4MA=="}, "originalCommit": {"oid": "1b48291fd8442d2fdb60e955e8f54ababee0da2e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MzYwODEzOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-api/src/main/java/org/cbioportal/persistence/AlterationRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNTo0MToxNlrOIYpnrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNTo0MToxNlrOIYpnrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjcxODYzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Cacheable(cacheNames = \"GeneralRepositoryCache\", condition = \"@cacheEnabledConfig.getEnabled()\")\n          \n          \n            \n                @Cacheable(cacheResolver = \"generalRepositoryCacheResolver\", condition = \"@cacheEnabledConfig.getEnabled()\")", "url": "https://github.com/cBioPortal/cbioportal/pull/8086#discussion_r562718636", "createdAt": "2021-01-22T15:41:16Z", "author": {"login": "sheridancbio"}, "path": "persistence/persistence-api/src/main/java/org/cbioportal/persistence/AlterationRepository.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.cbioportal.persistence;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.model.QueryElement;\n+import org.cbioportal.model.util.Select;\n+import org.springframework.cache.annotation.Cacheable;\n+\n+import java.util.List;\n+\n+public interface AlterationRepository {\n+\n+    @Cacheable(cacheNames = \"GeneralRepositoryCache\", condition = \"@cacheEnabledConfig.getEnabled()\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b48291fd8442d2fdb60e955e8f54ababee0da2e"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3487, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}