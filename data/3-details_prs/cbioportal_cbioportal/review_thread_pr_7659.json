{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTk3NTk1", "number": 7659, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoyMjowNlrOEaAFWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyMzoxOFrOEap3QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Njk5ODAwOnYy", "diffSide": "RIGHT", "path": "model/src/main/java/org/cbioportal/model/ClinicalEventSample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoyMjowNlrOHDJxrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMzoyNTo0NFrOHEtDzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Nzk1MA==", "bodyText": "Any specific reason for including Sample in the name? If not, I would prefer just ClinicalEvent", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473067950", "createdAt": "2020-08-19T14:22:06Z", "author": {"login": "kalletlak"}, "path": "model/src/main/java/org/cbioportal/model/ClinicalEventSample.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.cbioportal.model;\n+\n+import java.util.Objects;\n+\n+public class ClinicalEventSample {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a627416c6e04fb7aee666ac36265ae4ad6cc62f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY5NDYwNg==", "bodyText": "There is already a ClinicalEvent object. It had a lot more stuff in it than I needed, so I opted to use my own object. I named my object ClinicalEventSample because I am using it to represent a sample, as stored in the clinical events table.", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474694606", "createdAt": "2020-08-21T13:25:44Z", "author": {"login": "Luke-Sikina"}, "path": "model/src/main/java/org/cbioportal/model/ClinicalEventSample.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.cbioportal.model;\n+\n+import java.util.Objects;\n+\n+public class ClinicalEventSample {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Nzk1MA=="}, "originalCommit": {"oid": "8a627416c6e04fb7aee666ac36265ae4ad6cc62f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODczNjYxOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/cbioportal/web/TreatmentController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo0MDoxN1rOHDa9Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo0MDoxN1rOHDa9Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0OTQ1OQ==", "bodyText": "Maybe change to \"Get all patient level treatments\"", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473349459", "createdAt": "2020-08-19T21:40:17Z", "author": {"login": "dippindots"}, "path": "web/src/main/java/org/cbioportal/web/TreatmentController.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package org.cbioportal.web;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import org.cbioportal.model.PatientTreatmentRow;\n+import org.cbioportal.model.SampleTreatmentRow;\n+import org.cbioportal.service.TreatmentService;\n+import org.cbioportal.web.config.annotation.PublicApi;\n+import org.cbioportal.web.parameter.*;\n+import org.cbioportal.web.util.StudyViewFilterApplier;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.validation.annotation.Validated;\n+import org.springframework.web.bind.annotation.*;\n+import springfox.documentation.annotations.ApiIgnore;\n+\n+import javax.validation.Valid;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@PublicApi\n+@RestController\n+@Validated\n+@Api(tags = \"Treatments\", description = \" \")\n+public class TreatmentController {\n+\n+    @Autowired\n+    private TreatmentService treatmentService;\n+    \n+    @Autowired\n+    private StudyViewFilterApplier studyViewFilterApplier;\n+\n+    @PreAuthorize(\"hasPermission(#involvedCancerStudies, 'Collection<CancerStudyId>', 'read')\")\n+    @RequestMapping(value = \"/treatments/patient\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiOperation(\"Get all cancer types\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODg1Njk4OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/cbioportal/web/parameter/StudyViewFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjowNToyMVrOHDcNZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjowNToyMVrOHDcNZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM2OTk1OQ==", "bodyText": "should be consistent (all space).", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473369959", "createdAt": "2020-08-19T22:05:21Z", "author": {"login": "dippindots"}, "path": "web/src/main/java/org/cbioportal/web/parameter/StudyViewFilter.java", "diffHunk": "@@ -21,7 +22,9 @@\n     private List<String> studyIds;\n     private List<ClinicalDataFilter> clinicalDataFilters;\n     private List<GeneFilter> geneFilters;\n-    private List<List<String>> genomicProfiles;\n+    private AndedSampleTreatmentFilters sampleTreatmentFilters;\n+    private AndedPatientTreatmentFilters patientTreatmentFilters;\n+\tprivate List<List<String>> genomicProfiles;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODg5MDI5OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/cbioportal/web/parameter/filter/SampleTreatmentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxMjowNlrOHDcivg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxMjowNlrOHDcivg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3NTQyMg==", "bodyText": "Better to add the same comment * @param sampleId sample.STABLE_ID as PatientTreatmentFilter.java", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473375422", "createdAt": "2020-08-19T22:12:06Z", "author": {"login": "dippindots"}, "path": "web/src/main/java/org/cbioportal/web/parameter/filter/SampleTreatmentFilter.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.cbioportal.web.parameter.filter;\n+\n+import org.cbioportal.model.TemporalRelation;\n+import org.cbioportal.model.SampleTreatmentRow;\n+import org.cbioportal.web.parameter.SampleIdentifier;\n+\n+import java.util.Map;\n+\n+public class SampleTreatmentFilter {\n+    private String treatment;\n+    private TemporalRelation time;\n+\n+    /**\n+     * A sample should be included if the treatment row that corresponds\n+     * to the treatment and time in this filter contains that sample.\n+     * @param treatments key is SampleTreatmentRow::calculateKey", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODkxNDY2OnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/cbioportal/web/util/StudyViewFilterApplierTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxNzoxOFrOHDcyww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxNzoxOFrOHDcyww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3OTUyMw==", "bodyText": "Is this necessary? Will you create more test cases for StudyViewFilterApplierTest?", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473379523", "createdAt": "2020-08-19T22:17:18Z", "author": {"login": "dippindots"}, "path": "web/src/test/java/org/cbioportal/web/util/StudyViewFilterApplierTest.java", "diffHunk": "@@ -63,6 +63,8 @@\n     private SampleListService sampleListService;\n     @Mock\n     private GenericAssayService genericAssayService;\n+    @Mock\n+    private TreatmentService treatmentService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODk4NDE1OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/SampleListMapper.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozMjo1NVrOHDdg6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozMjo1NVrOHDdg6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5MTMzNw==", "bodyText": "Nice! We have lots of places are require non-empty study id list or non-empty sample/patient list, maybe we can do the same thing for those mapper methods.", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473391337", "createdAt": "2020-08-19T22:32:55Z", "author": {"login": "dippindots"}, "path": "persistence/persistence-mybatis/src/main/resources/org/cbioportal/persistence/mybatis/SampleListMapper.xml", "diffHunk": "@@ -32,11 +32,16 @@\n         INNER JOIN cancer_study ON sample_list.CANCER_STUDY_ID = cancer_study.CANCER_STUDY_ID\n         INNER JOIN reference_genome ON cancer_study.REFERENCE_GENOME_ID = reference_genome.REFERENCE_GENOME_ID\n         <if test=\"studyIds != null\">\n-\t\t\tWHERE cancer_study.CANCER_STUDY_IDENTIFIER IN\n-\t\t\t<foreach item=\"item\" collection=\"studyIds\" open=\"(\"\n-\t\t\t\tseparator=\",\" close=\")\">\n-\t\t\t\t#{item}\n-\t\t\t</foreach>\n+            <if test=\"studyIds.isEmpty()\">\n+                WHERE FALSE\n+            </if>\n+            <if test=\"!studyIds.isEmpty()\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjI0MTE4OnYy", "diffSide": "RIGHT", "path": "model/src/main/java/org/cbioportal/model/PatientTreatmentRow.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoxNzoxNVrOHD-IqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMzozMDo1N1rOHEtSGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyNTgwMQ==", "bodyText": "should this be patients?", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473925801", "createdAt": "2020-08-20T12:17:15Z", "author": {"login": "kalletlak"}, "path": "model/src/main/java/org/cbioportal/model/PatientTreatmentRow.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.cbioportal.model;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class PatientTreatmentRow {\n+    private String treatment;\n+    private int count;\n+    private Set<String> samples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY5ODI2NQ==", "bodyText": "No. Because everything in the study view is filtered by sample + study, I kept track of the samples included in the row, rather than the patients.", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474698265", "createdAt": "2020-08-21T13:30:57Z", "author": {"login": "Luke-Sikina"}, "path": "model/src/main/java/org/cbioportal/model/PatientTreatmentRow.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.cbioportal.model;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class PatientTreatmentRow {\n+    private String treatment;\n+    private int count;\n+    private Set<String> samples;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyNTgwMQ=="}, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjI2OTgwOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMyBatisRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNTowOVrOHD-ZqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMzozMTowOVrOHEtS8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMDE1Mw==", "bodyText": "Since it is a Map, any specific reason to sort?", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473930153", "createdAt": "2020-08-20T12:25:09Z", "author": {"login": "kalletlak"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.ClinicalEventSample;\n+import org.cbioportal.model.Treatment;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+\n+@Repository\n+public class TreatmentMyBatisRepository implements TreatmentRepository {\n+    @Autowired\n+    private TreatmentMapper treatmentMapper;\n+    \n+    @Override\n+    public Map<String, List<Treatment>> getTreatmentsByPatient(List<String> sampleIds, List<String> studyIds) {\n+        return treatmentMapper.getAllTreatments(sampleIds, studyIds)\n+            .stream()\n+            .sorted(Comparator.comparingInt(Treatment::getStart))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY5ODQ4MA==", "bodyText": "Good catch.", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474698480", "createdAt": "2020-08-21T13:31:09Z", "author": {"login": "Luke-Sikina"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.ClinicalEventSample;\n+import org.cbioportal.model.Treatment;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+\n+@Repository\n+public class TreatmentMyBatisRepository implements TreatmentRepository {\n+    @Autowired\n+    private TreatmentMapper treatmentMapper;\n+    \n+    @Override\n+    public Map<String, List<Treatment>> getTreatmentsByPatient(List<String> sampleIds, List<String> studyIds) {\n+        return treatmentMapper.getAllTreatments(sampleIds, studyIds)\n+            .stream()\n+            .sorted(Comparator.comparingInt(Treatment::getStart))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMDE1Mw=="}, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjI3ODE5OnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMyBatisRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNzoyMFrOHD-elQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNzoyMFrOHD-elQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzMTQxMw==", "bodyText": "May be getClinicalEventsByPatientId", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r473931413", "createdAt": "2020-08-20T12:27:20Z", "author": {"login": "kalletlak"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.ClinicalEventSample;\n+import org.cbioportal.model.Treatment;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+\n+@Repository\n+public class TreatmentMyBatisRepository implements TreatmentRepository {\n+    @Autowired\n+    private TreatmentMapper treatmentMapper;\n+    \n+    @Override\n+    public Map<String, List<Treatment>> getTreatmentsByPatient(List<String> sampleIds, List<String> studyIds) {\n+        return treatmentMapper.getAllTreatments(sampleIds, studyIds)\n+            .stream()\n+            .sorted(Comparator.comparingInt(Treatment::getStart))\n+            .collect(groupingBy(Treatment::getPatientId));\n+    }\n+\n+    @Override\n+    public Map<String, List<ClinicalEventSample>> getSamplesByPatient(List<String> sampleIds, List<String> studyIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzAwMDQxOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMyBatisRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDo1ODoxMFrOHEForw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDo1ODoxMFrOHEForw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA0ODY4Nw==", "bodyText": "may be getTreatmentsByPatientId", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474048687", "createdAt": "2020-08-20T14:58:10Z", "author": {"login": "kalletlak"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMyBatisRepository.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.ClinicalEventSample;\n+import org.cbioportal.model.Treatment;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+\n+@Repository\n+public class TreatmentMyBatisRepository implements TreatmentRepository {\n+    @Autowired\n+    private TreatmentMapper treatmentMapper;\n+    \n+    @Override\n+    public Map<String, List<Treatment>> getTreatmentsByPatient(List<String> sampleIds, List<String> studyIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMxODgwOnYy", "diffSide": "RIGHT", "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowODoyMFrOHEI0Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowODoyMFrOHEI0Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMDc3OA==", "bodyText": "Method name doesn't suggest anything about return type. May be rename it?", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474100778", "createdAt": "2020-08-20T16:08:20Z", "author": {"login": "kalletlak"}, "path": "persistence/persistence-mybatis/src/main/java/org/cbioportal/persistence/mybatis/TreatmentMapper.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.cbioportal.persistence.mybatis;\n+\n+import org.cbioportal.model.ClinicalEventSample;\n+import org.cbioportal.model.Treatment;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+public interface TreatmentMapper {\n+    List<Treatment> getAllTreatments(List<String> sampleIds, List<String> studyIds);\n+\n+    List<ClinicalEventSample> getAllSamples(List<String> sampleIds, List<String> studyIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzQwNDAyOnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoyOToxNlrOHEJohg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoyOToxNlrOHEJohg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExNDE4Mg==", "bodyText": "looks like samples are iterated 3 times, will there be any performance issue?", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474114182", "createdAt": "2020-08-20T16:29:16Z", "author": {"login": "kalletlak"}, "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);\n+\n+        Map<String, TreatmentRowTriplet> rows = new HashMap<>();\n+\n+        for (Treatment treatment : treatments) {\n+            TreatmentRowTriplet triplet;\n+            \n+            if (!rows.containsKey(treatment.getTreatment())) {\n+                triplet = new TreatmentRowTriplet(samples, treatment.getTreatment());\n+                rows.put(treatment.getTreatment(), triplet);\n+            } else {\n+                triplet = rows.get(treatment.getTreatment());\n+            }\n+            \n+            triplet.moveSamplesToPost(treatment);\n+        }\n+\n+        return rows.values().stream().flatMap(TreatmentRowTriplet::toRows);\n+    }\n+\n+    private List<SampleTreatmentRow> flattenAndSortRows(Stream<SampleTreatmentRow> rows) {\n+        Map<String, SampleTreatmentRow> uniqueRows = new HashMap<>();\n+        rows.forEach(rowToAdd -> {\n+            if (uniqueRows.containsKey(rowToAdd.getTreatment() + rowToAdd.getTime().name())) {\n+                uniqueRows.get(rowToAdd.toString()).add(rowToAdd);\n+            } else {\n+                uniqueRows.put(rowToAdd.getTreatment() + rowToAdd.getTime().name(), rowToAdd);\n+            }\n+        });\n+\n+        List<SampleTreatmentRow> flattenedRows = new ArrayList<>(uniqueRows.values());\n+        flattenedRows.sort(Comparator.comparing(a -> (a.getTreatment() + a.getTime().name())));\n+        return flattenedRows;\n+    }\n+\n+\n+    /**\n+     * For a given treatment, you can have samples that are taken\n+     * before (pre), after (post), or that don't have a date (unknown)\n+     * \n+     * This class accepts an initial list of samples and a treatment.\n+     * At the start, all samples are considered pre, as there hasn't been\n+     * any treatment start / stop times.\n+     * \n+     * You then call moveSamplesToPost on this with a series of matching\n+     * treatments. Each call will move samples taken \n+     */\n+    private static class TreatmentRowTriplet {\n+        private final Set<ClinicalEventSample> pre, post, unknown;\n+        private final String treatment;\n+        private final Set<String> studyIds;\n+\n+        TreatmentRowTriplet(List<ClinicalEventSample> samples, String treatment) {\n+            this.treatment = treatment;\n+            post = new HashSet<>();\n+            pre = samples.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzUyNzAyOnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjo1MTo0NlrOHEK3vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMzo0MDoyMlrOHEtpvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDQ2Mw==", "bodyText": "should this also be . getOrDefault?", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474134463", "createdAt": "2020-08-20T16:51:46Z", "author": {"login": "kalletlak"}, "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcwNDMxNg==", "bodyText": "It doesn't have to be, no. This function is called in getAllSampleTreatmentRows while iterating over the keys of samplesByPatient. patientId is a key from samplesByPatient, so you're guaranteed to get a match.", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474704316", "createdAt": "2020-08-21T13:40:22Z", "author": {"login": "Luke-Sikina"}, "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDQ2Mw=="}, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzY0NDE1OnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzoyNTozMlrOHEMBDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMzo0MTozOFrOHEtszw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1MzIzMQ==", "bodyText": "Looks like sorted list is not required at any place. this response is directly sent through api (I assume sorting will be done in front-end).", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474153231", "createdAt": "2020-08-20T17:25:32Z", "author": {"login": "kalletlak"}, "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);\n+\n+        Map<String, TreatmentRowTriplet> rows = new HashMap<>();\n+\n+        for (Treatment treatment : treatments) {\n+            TreatmentRowTriplet triplet;\n+            \n+            if (!rows.containsKey(treatment.getTreatment())) {\n+                triplet = new TreatmentRowTriplet(samples, treatment.getTreatment());\n+                rows.put(treatment.getTreatment(), triplet);\n+            } else {\n+                triplet = rows.get(treatment.getTreatment());\n+            }\n+            \n+            triplet.moveSamplesToPost(treatment);\n+        }\n+\n+        return rows.values().stream().flatMap(TreatmentRowTriplet::toRows);\n+    }\n+\n+    private List<SampleTreatmentRow> flattenAndSortRows(Stream<SampleTreatmentRow> rows) {\n+        Map<String, SampleTreatmentRow> uniqueRows = new HashMap<>();\n+        rows.forEach(rowToAdd -> {\n+            if (uniqueRows.containsKey(rowToAdd.getTreatment() + rowToAdd.getTime().name())) {\n+                uniqueRows.get(rowToAdd.toString()).add(rowToAdd);\n+            } else {\n+                uniqueRows.put(rowToAdd.getTreatment() + rowToAdd.getTime().name(), rowToAdd);\n+            }\n+        });\n+\n+        List<SampleTreatmentRow> flattenedRows = new ArrayList<>(uniqueRows.values());\n+        flattenedRows.sort(Comparator.comparing(a -> (a.getTreatment() + a.getTime().name())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcwNTEwMw==", "bodyText": "You're right. I probably wrote this before I realized sorting was going to be done entirely in the frontend.", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474705103", "createdAt": "2020-08-21T13:41:38Z", "author": {"login": "Luke-Sikina"}, "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);\n+\n+        Map<String, TreatmentRowTriplet> rows = new HashMap<>();\n+\n+        for (Treatment treatment : treatments) {\n+            TreatmentRowTriplet triplet;\n+            \n+            if (!rows.containsKey(treatment.getTreatment())) {\n+                triplet = new TreatmentRowTriplet(samples, treatment.getTreatment());\n+                rows.put(treatment.getTreatment(), triplet);\n+            } else {\n+                triplet = rows.get(treatment.getTreatment());\n+            }\n+            \n+            triplet.moveSamplesToPost(treatment);\n+        }\n+\n+        return rows.values().stream().flatMap(TreatmentRowTriplet::toRows);\n+    }\n+\n+    private List<SampleTreatmentRow> flattenAndSortRows(Stream<SampleTreatmentRow> rows) {\n+        Map<String, SampleTreatmentRow> uniqueRows = new HashMap<>();\n+        rows.forEach(rowToAdd -> {\n+            if (uniqueRows.containsKey(rowToAdd.getTreatment() + rowToAdd.getTime().name())) {\n+                uniqueRows.get(rowToAdd.toString()).add(rowToAdd);\n+            } else {\n+                uniqueRows.put(rowToAdd.getTreatment() + rowToAdd.getTime().name(), rowToAdd);\n+            }\n+        });\n+\n+        List<SampleTreatmentRow> flattenedRows = new ArrayList<>(uniqueRows.values());\n+        flattenedRows.sort(Comparator.comparing(a -> (a.getTreatment() + a.getTime().name())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1MzIzMQ=="}, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzY3MTAzOnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzozMzoxMFrOHEMR1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDo1OTowNFrOHEwmUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1NzUyNQ==", "bodyText": "looks like all treatments can be fetched from treatmentsByPatient(line 139). would it be different invoking treatmentRepository.getAllUniqueTreatments?", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474157525", "createdAt": "2020-08-20T17:33:10Z", "author": {"login": "kalletlak"}, "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);\n+\n+        Map<String, TreatmentRowTriplet> rows = new HashMap<>();\n+\n+        for (Treatment treatment : treatments) {\n+            TreatmentRowTriplet triplet;\n+            \n+            if (!rows.containsKey(treatment.getTreatment())) {\n+                triplet = new TreatmentRowTriplet(samples, treatment.getTreatment());\n+                rows.put(treatment.getTreatment(), triplet);\n+            } else {\n+                triplet = rows.get(treatment.getTreatment());\n+            }\n+            \n+            triplet.moveSamplesToPost(treatment);\n+        }\n+\n+        return rows.values().stream().flatMap(TreatmentRowTriplet::toRows);\n+    }\n+\n+    private List<SampleTreatmentRow> flattenAndSortRows(Stream<SampleTreatmentRow> rows) {\n+        Map<String, SampleTreatmentRow> uniqueRows = new HashMap<>();\n+        rows.forEach(rowToAdd -> {\n+            if (uniqueRows.containsKey(rowToAdd.getTreatment() + rowToAdd.getTime().name())) {\n+                uniqueRows.get(rowToAdd.toString()).add(rowToAdd);\n+            } else {\n+                uniqueRows.put(rowToAdd.getTreatment() + rowToAdd.getTime().name(), rowToAdd);\n+            }\n+        });\n+\n+        List<SampleTreatmentRow> flattenedRows = new ArrayList<>(uniqueRows.values());\n+        flattenedRows.sort(Comparator.comparing(a -> (a.getTreatment() + a.getTime().name())));\n+        return flattenedRows;\n+    }\n+\n+\n+    /**\n+     * For a given treatment, you can have samples that are taken\n+     * before (pre), after (post), or that don't have a date (unknown)\n+     * \n+     * This class accepts an initial list of samples and a treatment.\n+     * At the start, all samples are considered pre, as there hasn't been\n+     * any treatment start / stop times.\n+     * \n+     * You then call moveSamplesToPost on this with a series of matching\n+     * treatments. Each call will move samples taken \n+     */\n+    private static class TreatmentRowTriplet {\n+        private final Set<ClinicalEventSample> pre, post, unknown;\n+        private final String treatment;\n+        private final Set<String> studyIds;\n+\n+        TreatmentRowTriplet(List<ClinicalEventSample> samples, String treatment) {\n+            this.treatment = treatment;\n+            post = new HashSet<>();\n+            pre = samples.stream()\n+                .filter(s -> s.getTimeTaken() != null)\n+                .collect(Collectors.toSet());\n+            unknown = samples.stream()\n+                .filter(s -> s.getTimeTaken() == null)\n+                .collect(Collectors.toSet());\n+            studyIds = samples.stream()\n+                .map(ClinicalEventSample::getStudyId)\n+                .collect(Collectors.toSet());\n+        }\n+\n+        /**\n+         * Moves any samples marked as pre that were taken after the treatment\n+         * started to post.\n+         * \n+         * @param treatment a treatment with a start value. It is assumed that\n+         *                  the treatment matches the treatment stored in this triplet\n+         */\n+        void moveSamplesToPost(Treatment treatment) {\n+            for (Iterator<ClinicalEventSample> iterator = pre.iterator(); iterator.hasNext(); ) {\n+                ClinicalEventSample clinicalEventSample = iterator.next();\n+                // edge case: is a sample taken the same day a treatment starts pre or post?\n+                // We're saying pre here\n+                if (clinicalEventSample.getTimeTaken() > treatment.getStart()) {\n+                    iterator.remove();\n+                    post.add(clinicalEventSample);\n+                }\n+            }\n+        }\n+        \n+        Stream<SampleTreatmentRow> toRows() {\n+            return Stream.of(\n+                    new SampleTreatmentRow(TemporalRelation.Pre, treatment, pre.size(), toStrings(pre), studyIds),\n+                    new SampleTreatmentRow(TemporalRelation.Post, treatment, post.size(), toStrings(post), studyIds),\n+                    new SampleTreatmentRow(TemporalRelation.Unknown, treatment, unknown.size(), toStrings(unknown), studyIds)\n+            );\n+        }\n+        \n+        private Set<String> toStrings(Set<ClinicalEventSample> samples) {\n+            return samples.stream()\n+                    .map(ClinicalEventSample::getSampleId)\n+                    .collect(Collectors.toSet());\n+        }\n+    }\n+\n+    @Override\n+    public List<PatientTreatmentRow> getAllPatientTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository\n+            .getSamplesByPatient(sampleIds, studyIds)\n+            .entrySet()\n+            .stream()\n+            .filter(e -> treatmentsByPatient.containsKey(e.getKey()))\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        Set<String> treatments = treatmentRepository.getAllUniqueTreatments(sampleIds, studyIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1MjU5NA==", "bodyText": "You're right - you wouldn't get a different result. I guess I just did this because it is a bit simpler to read, and it translates into SQL pretty well. I think this service is complex enough without an extra hunk of logic to extract treatments from the patient treatment map.", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474752594", "createdAt": "2020-08-21T14:59:04Z", "author": {"login": "Luke-Sikina"}, "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);\n+\n+        Map<String, TreatmentRowTriplet> rows = new HashMap<>();\n+\n+        for (Treatment treatment : treatments) {\n+            TreatmentRowTriplet triplet;\n+            \n+            if (!rows.containsKey(treatment.getTreatment())) {\n+                triplet = new TreatmentRowTriplet(samples, treatment.getTreatment());\n+                rows.put(treatment.getTreatment(), triplet);\n+            } else {\n+                triplet = rows.get(treatment.getTreatment());\n+            }\n+            \n+            triplet.moveSamplesToPost(treatment);\n+        }\n+\n+        return rows.values().stream().flatMap(TreatmentRowTriplet::toRows);\n+    }\n+\n+    private List<SampleTreatmentRow> flattenAndSortRows(Stream<SampleTreatmentRow> rows) {\n+        Map<String, SampleTreatmentRow> uniqueRows = new HashMap<>();\n+        rows.forEach(rowToAdd -> {\n+            if (uniqueRows.containsKey(rowToAdd.getTreatment() + rowToAdd.getTime().name())) {\n+                uniqueRows.get(rowToAdd.toString()).add(rowToAdd);\n+            } else {\n+                uniqueRows.put(rowToAdd.getTreatment() + rowToAdd.getTime().name(), rowToAdd);\n+            }\n+        });\n+\n+        List<SampleTreatmentRow> flattenedRows = new ArrayList<>(uniqueRows.values());\n+        flattenedRows.sort(Comparator.comparing(a -> (a.getTreatment() + a.getTime().name())));\n+        return flattenedRows;\n+    }\n+\n+\n+    /**\n+     * For a given treatment, you can have samples that are taken\n+     * before (pre), after (post), or that don't have a date (unknown)\n+     * \n+     * This class accepts an initial list of samples and a treatment.\n+     * At the start, all samples are considered pre, as there hasn't been\n+     * any treatment start / stop times.\n+     * \n+     * You then call moveSamplesToPost on this with a series of matching\n+     * treatments. Each call will move samples taken \n+     */\n+    private static class TreatmentRowTriplet {\n+        private final Set<ClinicalEventSample> pre, post, unknown;\n+        private final String treatment;\n+        private final Set<String> studyIds;\n+\n+        TreatmentRowTriplet(List<ClinicalEventSample> samples, String treatment) {\n+            this.treatment = treatment;\n+            post = new HashSet<>();\n+            pre = samples.stream()\n+                .filter(s -> s.getTimeTaken() != null)\n+                .collect(Collectors.toSet());\n+            unknown = samples.stream()\n+                .filter(s -> s.getTimeTaken() == null)\n+                .collect(Collectors.toSet());\n+            studyIds = samples.stream()\n+                .map(ClinicalEventSample::getStudyId)\n+                .collect(Collectors.toSet());\n+        }\n+\n+        /**\n+         * Moves any samples marked as pre that were taken after the treatment\n+         * started to post.\n+         * \n+         * @param treatment a treatment with a start value. It is assumed that\n+         *                  the treatment matches the treatment stored in this triplet\n+         */\n+        void moveSamplesToPost(Treatment treatment) {\n+            for (Iterator<ClinicalEventSample> iterator = pre.iterator(); iterator.hasNext(); ) {\n+                ClinicalEventSample clinicalEventSample = iterator.next();\n+                // edge case: is a sample taken the same day a treatment starts pre or post?\n+                // We're saying pre here\n+                if (clinicalEventSample.getTimeTaken() > treatment.getStart()) {\n+                    iterator.remove();\n+                    post.add(clinicalEventSample);\n+                }\n+            }\n+        }\n+        \n+        Stream<SampleTreatmentRow> toRows() {\n+            return Stream.of(\n+                    new SampleTreatmentRow(TemporalRelation.Pre, treatment, pre.size(), toStrings(pre), studyIds),\n+                    new SampleTreatmentRow(TemporalRelation.Post, treatment, post.size(), toStrings(post), studyIds),\n+                    new SampleTreatmentRow(TemporalRelation.Unknown, treatment, unknown.size(), toStrings(unknown), studyIds)\n+            );\n+        }\n+        \n+        private Set<String> toStrings(Set<ClinicalEventSample> samples) {\n+            return samples.stream()\n+                    .map(ClinicalEventSample::getSampleId)\n+                    .collect(Collectors.toSet());\n+        }\n+    }\n+\n+    @Override\n+    public List<PatientTreatmentRow> getAllPatientTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository\n+            .getSamplesByPatient(sampleIds, studyIds)\n+            .entrySet()\n+            .stream()\n+            .filter(e -> treatmentsByPatient.containsKey(e.getKey()))\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        Set<String> treatments = treatmentRepository.getAllUniqueTreatments(sampleIds, studyIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1NzUyNQ=="}, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzcwMjgzOnYy", "diffSide": "RIGHT", "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzo0MjoyM1rOHEMllw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToxMTo0OFrOHExE7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2MjU4Mw==", "bodyText": "shouldn't this be uniqueRows.get(rowToAdd.getTreatment() + rowToAdd.getTime().name()).add(rowToAdd);?\nbtw could you create a separate method for generating the key?", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474162583", "createdAt": "2020-08-20T17:42:23Z", "author": {"login": "kalletlak"}, "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);\n+\n+        Map<String, TreatmentRowTriplet> rows = new HashMap<>();\n+\n+        for (Treatment treatment : treatments) {\n+            TreatmentRowTriplet triplet;\n+            \n+            if (!rows.containsKey(treatment.getTreatment())) {\n+                triplet = new TreatmentRowTriplet(samples, treatment.getTreatment());\n+                rows.put(treatment.getTreatment(), triplet);\n+            } else {\n+                triplet = rows.get(treatment.getTreatment());\n+            }\n+            \n+            triplet.moveSamplesToPost(treatment);\n+        }\n+\n+        return rows.values().stream().flatMap(TreatmentRowTriplet::toRows);\n+    }\n+\n+    private List<SampleTreatmentRow> flattenAndSortRows(Stream<SampleTreatmentRow> rows) {\n+        Map<String, SampleTreatmentRow> uniqueRows = new HashMap<>();\n+        rows.forEach(rowToAdd -> {\n+            if (uniqueRows.containsKey(rowToAdd.getTreatment() + rowToAdd.getTime().name())) {\n+                uniqueRows.get(rowToAdd.toString()).add(rowToAdd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2MDQyOQ==", "bodyText": "Good catch. Looks like the toString had the same function, so not a bug, but you're right, a key() method would be good here.", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474760429", "createdAt": "2020-08-21T15:11:48Z", "author": {"login": "Luke-Sikina"}, "path": "service/src/main/java/org/cbioportal/service/impl/TreatmentServiceImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.cbioportal.service.impl;\n+\n+import org.cbioportal.model.*;\n+import org.cbioportal.persistence.TreatmentRepository;\n+import org.cbioportal.service.TreatmentService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+@Service\n+public class TreatmentServiceImpl implements TreatmentService {\n+    @Autowired\n+    TreatmentRepository treatmentRepository;\n+    \n+    @Override\n+    public List<SampleTreatmentRow> getAllSampleTreatmentRows(List<String> sampleIds, List<String> studyIds) {\n+        Map<String, List<ClinicalEventSample>> samplesByPatient = treatmentRepository.getSamplesByPatient(sampleIds, studyIds);\n+        Map<String, List<Treatment>> treatmentsByPatient = treatmentRepository.getTreatmentsByPatient(sampleIds, studyIds);\n+\n+        Stream<SampleTreatmentRow> rows = samplesByPatient.keySet().stream()\n+            .flatMap(patientId -> getSampleTreatmentRowsForPatient(patientId, samplesByPatient, treatmentsByPatient))\n+            .filter(row -> row.getCount() != 0);\n+        return flattenAndSortRows(rows);\n+    }\n+    \n+    private Stream<SampleTreatmentRow> getSampleTreatmentRowsForPatient(\n+            String patientId,\n+            Map<String, List<ClinicalEventSample>> samplesByPatient,\n+            Map<String, List<Treatment>> treatmentsByPatient\n+    ) {\n+        List<Treatment> treatments = treatmentsByPatient.getOrDefault(patientId, new ArrayList<>());\n+        List<ClinicalEventSample> samples = samplesByPatient.get(patientId);\n+\n+        Map<String, TreatmentRowTriplet> rows = new HashMap<>();\n+\n+        for (Treatment treatment : treatments) {\n+            TreatmentRowTriplet triplet;\n+            \n+            if (!rows.containsKey(treatment.getTreatment())) {\n+                triplet = new TreatmentRowTriplet(samples, treatment.getTreatment());\n+                rows.put(treatment.getTreatment(), triplet);\n+            } else {\n+                triplet = rows.get(treatment.getTreatment());\n+            }\n+            \n+            triplet.moveSamplesToPost(treatment);\n+        }\n+\n+        return rows.values().stream().flatMap(TreatmentRowTriplet::toRows);\n+    }\n+\n+    private List<SampleTreatmentRow> flattenAndSortRows(Stream<SampleTreatmentRow> rows) {\n+        Map<String, SampleTreatmentRow> uniqueRows = new HashMap<>();\n+        rows.forEach(rowToAdd -> {\n+            if (uniqueRows.containsKey(rowToAdd.getTreatment() + rowToAdd.getTime().name())) {\n+                uniqueRows.get(rowToAdd.toString()).add(rowToAdd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2MjU4Mw=="}, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzg0MzIxOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/cbioportal/web/parameter/filter/PatientTreatmentFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyMzoxOFrOHEN8Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDo0Nzo0N1rOHE9Ebg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NDc5OA==", "bodyText": "I think check for sample in TreatmentRow samples list might be an expensive operation(if there are many samples and/or if there are many treatments in selection). And there can be same sample id for multiple studies. I think you need to check for both sampleId and studyId together.\nI propose to change replace sample and studies in both PatientTreatmentRow and SampleTreatmentRow to a Map<SampleIdentifier, Boolean> if not to a List -> to support duplicate sampleIds.\nThis goes same with SampleTreatmentFilter.java", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474184798", "createdAt": "2020-08-20T18:23:18Z", "author": {"login": "kalletlak"}, "path": "web/src/main/java/org/cbioportal/web/parameter/filter/PatientTreatmentFilter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.cbioportal.web.parameter.filter;\n+\n+import org.cbioportal.model.PatientTreatmentRow;\n+import org.cbioportal.web.parameter.SampleIdentifier;\n+\n+import java.util.Map;\n+\n+public class PatientTreatmentFilter {\n+    private String treatment;\n+\n+    /**\n+     * A sampleId should be included if the treatment row that corresponds\n+     * to the treatment and time in this filter contains that sampleId.\n+     * @param sampleId sample.STABLE_ID\n+     * @param treatments key is PatientTreatmentRow::calculateKey\n+     */\n+    public boolean filter(SampleIdentifier sampleId, Map<String, PatientTreatmentRow> treatments) {\n+        PatientTreatmentRow row = treatments.get(treatment);\n+        return row != null && row.getSamples().contains(sampleId.getSampleId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk1NjkxMA==", "bodyText": "This is a good idea, but I can't exactly do that, because SampleIdentifier isn't in the cbioportal package, and that package doesn't have a dependency on web. I use a string to boolean map with the same intent.", "url": "https://github.com/cBioPortal/cbioportal/pull/7659#discussion_r474956910", "createdAt": "2020-08-21T20:47:47Z", "author": {"login": "Luke-Sikina"}, "path": "web/src/main/java/org/cbioportal/web/parameter/filter/PatientTreatmentFilter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.cbioportal.web.parameter.filter;\n+\n+import org.cbioportal.model.PatientTreatmentRow;\n+import org.cbioportal.web.parameter.SampleIdentifier;\n+\n+import java.util.Map;\n+\n+public class PatientTreatmentFilter {\n+    private String treatment;\n+\n+    /**\n+     * A sampleId should be included if the treatment row that corresponds\n+     * to the treatment and time in this filter contains that sampleId.\n+     * @param sampleId sample.STABLE_ID\n+     * @param treatments key is PatientTreatmentRow::calculateKey\n+     */\n+    public boolean filter(SampleIdentifier sampleId, Map<String, PatientTreatmentRow> treatments) {\n+        PatientTreatmentRow row = treatments.get(treatment);\n+        return row != null && row.getSamples().contains(sampleId.getSampleId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NDc5OA=="}, "originalCommit": {"oid": "c8e958f930fb4e55a2ea6971109e261139b6e691"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3516, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}