{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMTgwOTc2", "number": 2123, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNToxNTo0OVrOE_7rUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNToxNTo0OVrOE_7rUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDczNDkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/execution/ConditionalNodes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNToxNTo0OVrOH958AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMToxNTowMFrOH-VEHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3NDQzMw==", "bodyText": "Move the logic of findDirectiveByName to NodeUtil, and replace all getXXByName with getNodeByName(List<NamedNode> list, String name) will be better.", "url": "https://github.com/graphql-java/graphql-java/pull/2123#discussion_r534674433", "createdAt": "2020-12-03T05:15:49Z", "author": {"login": "dugenkui03"}, "path": "src/main/java/graphql/execution/ConditionalNodes.java", "diffHunk": "@@ -28,19 +25,23 @@ public boolean shouldInclude(Map<String, Object> variables, List<Directive> dire\n     }\n \n     private boolean getDirectiveResult(Map<String, Object> variables, List<Directive> directives, String directiveName, boolean defaultValue) {\n-        List<Directive> foundDirectives = getDirectiveByName(directives, directiveName);\n-        if (!foundDirectives.isEmpty()) {\n-            Directive directive = foundDirectives.get(0);\n-            Map<String, Object> argumentValues = valuesResolver.getArgumentValues(SkipDirective.getArguments(), directive.getArguments(), variables);\n+        Directive foundDirective = findDirectiveByName(directives, directiveName);\n+        if (foundDirective != null) {\n+            Map<String, Object> argumentValues = valuesResolver.getArgumentValues(SkipDirective.getArguments(), foundDirective.getArguments(), variables);\n             Object flag = argumentValues.get(\"if\");\n             Assert.assertTrue(flag instanceof Boolean, () -> String.format(\"The '%s' directive MUST have a value for the 'if' argument\", directiveName));\n             return (Boolean) flag;\n         }\n         return defaultValue;\n     }\n \n-    private List<Directive> getDirectiveByName(List<Directive> directives, String name) {\n-        return NodeUtil.allDirectivesByName(directives).getOrDefault(name, emptyList());\n+    private Directive findDirectiveByName(List<Directive> directives, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b52548c00688ddf86ea84396f6242e3b761fd2d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExODg3Nw==", "bodyText": "done", "url": "https://github.com/graphql-java/graphql-java/pull/2123#discussion_r535118877", "createdAt": "2020-12-03T11:15:00Z", "author": {"login": "dfa1"}, "path": "src/main/java/graphql/execution/ConditionalNodes.java", "diffHunk": "@@ -28,19 +25,23 @@ public boolean shouldInclude(Map<String, Object> variables, List<Directive> dire\n     }\n \n     private boolean getDirectiveResult(Map<String, Object> variables, List<Directive> directives, String directiveName, boolean defaultValue) {\n-        List<Directive> foundDirectives = getDirectiveByName(directives, directiveName);\n-        if (!foundDirectives.isEmpty()) {\n-            Directive directive = foundDirectives.get(0);\n-            Map<String, Object> argumentValues = valuesResolver.getArgumentValues(SkipDirective.getArguments(), directive.getArguments(), variables);\n+        Directive foundDirective = findDirectiveByName(directives, directiveName);\n+        if (foundDirective != null) {\n+            Map<String, Object> argumentValues = valuesResolver.getArgumentValues(SkipDirective.getArguments(), foundDirective.getArguments(), variables);\n             Object flag = argumentValues.get(\"if\");\n             Assert.assertTrue(flag instanceof Boolean, () -> String.format(\"The '%s' directive MUST have a value for the 'if' argument\", directiveName));\n             return (Boolean) flag;\n         }\n         return defaultValue;\n     }\n \n-    private List<Directive> getDirectiveByName(List<Directive> directives, String name) {\n-        return NodeUtil.allDirectivesByName(directives).getOrDefault(name, emptyList());\n+    private Directive findDirectiveByName(List<Directive> directives, String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3NDQzMw=="}, "originalCommit": {"oid": "8b52548c00688ddf86ea84396f6242e3b761fd2d"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4515, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}