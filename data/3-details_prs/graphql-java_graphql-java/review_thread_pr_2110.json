{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MDg0NDE5", "number": 2110, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNjoyMjoyMFrOE8iOsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwODoxMjoyNlrOE-PVAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTEwODM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/language/AstPrinter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNjoyMjoyMFrOH4tidA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNjoyMjoyMFrOH4tidA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyODQwNA==", "bodyText": "Seems fair enough", "url": "https://github.com/graphql-java/graphql-java/pull/2110#discussion_r529228404", "createdAt": "2020-11-24T06:22:20Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/language/AstPrinter.java", "diffHunk": "@@ -4,9 +4,7 @@\n import graphql.PublicApi;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "299778c5edc12cb0210712ecc7410d8c1fb0d89e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjk4MzA0OnYy", "diffSide": "RIGHT", "path": "src/test/java/benchmark/AstPrinterBenchmark.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwODoxMjoyNlrOH7W8Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwODoxMjoyNlrOH7W8Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwMzkxOA==", "bodyText": "Nice test example!", "url": "https://github.com/graphql-java/graphql-java/pull/2110#discussion_r532003918", "createdAt": "2020-11-28T08:12:26Z", "author": {"login": "bbakerman"}, "path": "src/test/java/benchmark/AstPrinterBenchmark.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package benchmark;\n+\n+import graphql.language.AstPrinter;\n+import graphql.language.Document;\n+import graphql.parser.Parser;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * See http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/ for more samples\n+ * on what you can do with JMH\n+ * <p>\n+ * You MUST have the JMH plugin for IDEA in place for this to work :  https://github.com/artyushov/idea-jmh-plugin\n+ * <p>\n+ * Install it and then just hit \"Run\" on a certain benchmark method\n+ */\n+@Warmup(iterations = 2, time = 5, batchSize = 3)\n+@Measurement(iterations = 3, time = 10, batchSize = 4)\n+public class AstPrinterBenchmark {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "299778c5edc12cb0210712ecc7410d8c1fb0d89e"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4512, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}