{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NzE0NjE3", "number": 2079, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTo0Mjo0OVrOEvu_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMzozM1rOEvv6qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDg4MzIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/execution/ExecutionStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTo0Mjo0OVrOHk4LIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTo0Mjo0OVrOHk4LIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQzMTEzNg==", "bodyText": "All made as Supplier to ensure its super lazy - lets not pay any cost unless some one asks for this.", "url": "https://github.com/graphql-java/graphql-java/pull/2079#discussion_r508431136", "createdAt": "2020-10-20T11:42:49Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/execution/ExecutionStrategy.java", "diffHunk": "@@ -293,6 +297,11 @@ protected ExecutionStrategy(DataFetcherExceptionHandler dataFetcherExceptionHand\n                 .thenApply(result -> unboxPossibleDataFetcherResult(executionContext, parameters, result));\n     }\n \n+    protected Supplier<NormalizedField> getNormalizedField(ExecutionContext executionContext, ExecutionStrategyParameters parameters, Supplier<ExecutionStepInfo> executionStepInfo) {\n+        Supplier<NormalizedQueryTree> normalizedQuery = executionContext.getNormalizedQuery();\n+        return () -> normalizedQuery.get().getNormalizedField(parameters.getField(), executionStepInfo.get().getFieldContainer(), executionStepInfo.get().getPath());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7da953c19e46535a61428799ce754bfc3a458fab"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTAyMzMyOnYy", "diffSide": "LEFT", "path": "src/main/java/graphql/schema/DataFetchingFieldSelectionSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMDoyNVrOHk5gGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMDoyNVrOHk5gGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Mjg4OA==", "bodyText": "This is part of the breaking changes - these no longer make sense because we have multiple SelectedFields to a named path", "url": "https://github.com/graphql-java/graphql-java/pull/2079#discussion_r508452888", "createdAt": "2020-10-20T12:20:25Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/DataFetchingFieldSelectionSet.java", "diffHunk": "@@ -28,82 +26,120 @@\n  *  }\n  * }\n  * </pre>\n- *\n+ * <p>\n  * The selection set in the case above consists of the fields \"name, age, weight, friends and friends/name\".\n- *\n+ * <p>\n  * You can use this selection set perhaps to \"peek\" ahead and decide that field values you might need\n  * from the underlying data system.  Imagine a SQL system where this might represent the SQL 'projection'\n  * of columns say.\n+ * <p>\n+ * However composite types such as Interfaces and Unions add some complexity.  You cant know\n+ * ahead of time the exact field and object types involved.  There in fact be multiple possible `conditional` fields.\n+ * <p>\n+ * This class represents this by returning a list of fields and having two addressing mechanisms,\n+ * a simple `x/y` one and the more specific `Foo.x/Bar.y` mechanism.\n+ * <p>\n+ * For example imagine a `Pet` interface type that has `Cat` and `Dog` object type implementations.  The query might\n+ * be:\n+ *\n+ * <pre>\n+ * {@code\n+ *  {\n+ *      pet {\n+ *          name\n+ *      }\n+ *  }\n+ * }\n+ * </pre>\n+ * <p>\n+ * In the example above you have a `Cat.name`and `Dog.name` as possible sub selections of the `pet` field.  They are can be addressed by\n+ * either `name` or `Dog.name` or `Cat.name`\n+ *\n+ * <pre>\n+ * {@code\n+ *  selectionSet.contains(\"name\") == true\n+ *  selectionSet.contains(\"Dog.name\", \"Cat.name\") == true\n+ *\n+ *  List<SelectedField> petNames = selectionSet.getFields(\"name\")\n+ *  petNames.size() == 2\n+ *\n+ *  List<SelectedField> dogNames = selectionSet.getFields(\"Dog.name\")\n+ *  dogNames.size() == 1\n+ * }\n+ * </pre>\n+ * <p>\n+ * The simple naming is easier to work with but the type prefixed naming is more precise.\n+ * <p>\n+ * Another complication is any field aliasing that a client can specify.\n+ *\n+ * <pre>\n+ * {@code\n+ *  {\n+ *      pet {\n+ *          name(arg : \"foo\")\n+ *          ... on Dog {\n+ *             aliasedName : name(arg : \"bar\")\n+ *          }\n+ *     }\n+ *  }\n+ * }\n+ * </pre>\n+ * <p>\n+ * In the example above the `selectionSet.getFields(\"name\")` actually returns three {@link graphql.schema.SelectedField}s,\n+ * one for `Dog.name`, one for `Cat.name` and one for `Dog.name` with an alias of `aliasedName`.  The arguments can\n+ * differ on {@link graphql.schema.SelectedField}s that have different {@link SelectedField#getResultKey()}s, hence the multiple\n+ * selected fields returned.\n+ * <p>\n+ * To help you there is the {@link #getFieldsGroupedByResultKey()} that returns a {@code Map<String,List<SelectedField>>} keyed\n+ * by result key, that is by the field alias or by the field name.\n  */\n @PublicApi\n-public interface DataFetchingFieldSelectionSet extends Supplier<MergedSelectionSet> {\n-\n-    /**\n-     * @return a map of the fields that represent the selection set\n-     */\n-    @Override\n-    MergedSelectionSet get();\n-\n-    /**\n-     * @return a map of the arguments for each field in the selection set\n-     */\n-    Map<String, Map<String, Object>> getArguments();\n-\n-    /**\n-     * @return a map of the {@link graphql.schema.GraphQLFieldDefinition}s for each field in the selection set\n-     */\n-    Map<String, GraphQLFieldDefinition> getDefinitions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7da953c19e46535a61428799ce754bfc3a458fab"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTAzMjc4OnYy", "diffSide": "RIGHT", "path": "src/test/groovy/graphql/schema/DataFetchingFieldSelectionSetImplTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMjozN1rOHk5luw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMjozN1rOHk5luw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1NDMzMQ==", "bodyText": "This was actually illegal query text - now that we run the whole thing, it needed to be fixed", "url": "https://github.com/graphql-java/graphql-java/pull/2079#discussion_r508454331", "createdAt": "2020-10-20T12:22:37Z", "author": {"login": "bbakerman"}, "path": "src/test/groovy/graphql/schema/DataFetchingFieldSelectionSetImplTest.groovy", "diffHunk": "@@ -1,32 +1,26 @@\n package graphql.schema\n \n-import graphql.Scalars\n+import graphql.ExecutionInput\n+import graphql.GraphQL\n+import graphql.StarWarsData\n import graphql.TestUtil\n-import graphql.execution.ExecutionContextBuilder\n-import graphql.execution.ExecutionId\n-import graphql.language.Document\n-import graphql.language.Field\n-import graphql.language.FragmentDefinition\n-import graphql.language.NodeUtil\n-import graphql.language.OperationDefinition\n+import graphql.schema.idl.RuntimeWiring\n import spock.lang.Specification\n \n-import static graphql.TestUtil.mergedField\n+import static graphql.schema.idl.RuntimeWiring.newRuntimeWiring\n+import static graphql.schema.idl.TypeRuntimeWiring.newTypeWiring\n \n class DataFetchingFieldSelectionSetImplTest extends Specification {\n \n-    def starWarsSchema = TestUtil.schemaFile(\"starWarsSchemaWithArguments.graphqls\")\n-\n-\n-    def query = '''\n+    def starWarsQuery = '''\n             {\n                 human {\n                     name\n                     appearsIn\n-                    friends(separationCount : 2) {\n+                    friends {\n                         name\n                         appearsIn\n-                        friends(separationCount : 5) {\n+                        friends {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7da953c19e46535a61428799ce754bfc3a458fab"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTAzMzkxOnYy", "diffSide": "RIGHT", "path": "src/test/groovy/graphql/schema/DataFetchingFieldSelectionSetImplTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMjo1OFrOHk5mcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMjo1OFrOHk5mcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1NDUxMw==", "bodyText": "We use side effect to get the inner selection set.", "url": "https://github.com/graphql-java/graphql-java/pull/2079#discussion_r508454513", "createdAt": "2020-10-20T12:22:58Z", "author": {"login": "bbakerman"}, "path": "src/test/groovy/graphql/schema/DataFetchingFieldSelectionSetImplTest.groovy", "diffHunk": "@@ -45,30 +39,29 @@ class DataFetchingFieldSelectionSetImplTest extends Specification {\n             }\n         '''\n \n-    List<Field> firstFields(Document document) {\n-        (document.definitions[0] as OperationDefinition).selectionSet.selections\n-                .collect({ node -> (Field) node })\n+    DataFetchingFieldSelectionSet selectionSet = null\n+    DataFetcher humanDF = { DataFetchingEnvironment env ->\n+        selectionSet = env.getSelectionSet()\n+        return StarWarsData.humanDataFetcher.get(env)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7da953c19e46535a61428799ce754bfc3a458fab"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTAzNTkzOnYy", "diffSide": "LEFT", "path": "src/test/groovy/graphql/schema/DataFetchingFieldSelectionSetImplTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMzozM1rOHk5nvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMzozM1rOHk5nvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1NDg0NQ==", "bodyText": "These have been removed and hence so have the tests", "url": "https://github.com/graphql-java/graphql-java/pull/2079#discussion_r508454845", "createdAt": "2020-10-20T12:23:33Z", "author": {"login": "bbakerman"}, "path": "src/test/groovy/graphql/schema/DataFetchingFieldSelectionSetImplTest.groovy", "diffHunk": "@@ -124,77 +117,8 @@ class DataFetchingFieldSelectionSetImplTest extends Specification {\n         !selectionSet.containsAnyOf(\"notPresent\", \"alsoNotPresent\")\n     }\n \n-    def \"test field selection set capture works\"() {\n-\n-        def document = TestUtil.parseQuery(query)\n-\n-        List<Field> fields = firstFields(document)\n-\n-        def executionContext = ExecutionContextBuilder.newExecutionContextBuilder()\n-                .executionId(ExecutionId.generate())\n-                .fragmentsByName(getFragments(document))\n-                .graphQLSchema(starWarsSchema).build()\n-\n-        def selectionSet = DataFetchingFieldSelectionSetImpl.newCollector(executionContext, starWarsSchema.getType('Human'), mergedField(fields))\n-\n-        def fieldMap = selectionSet.get()\n-        expect:\n-        fieldMap.keySet() == [\n-                \"name\",\n-                \"appearsIn\",\n-                \"friends\",\n-                \"friends/name\",\n-                \"friends/appearsIn\",\n-                \"friends/friends\",\n-                \"friends/friends/name\",\n-                \"friends/friends/appearsIn\",\n-        ] as Set\n-\n-    }\n-\n-\n-    def \"test field argument capture works\"() {\n-\n-        def document = TestUtil.parseQuery(query)\n-\n-        List<Field> fields = firstFields(document)\n-\n-        def executionContext = ExecutionContextBuilder.newExecutionContextBuilder()\n-                .executionId(ExecutionId.generate())\n-                .fragmentsByName(getFragments(document))\n-                .graphQLSchema(starWarsSchema).build()\n-\n-        def selectionSet = DataFetchingFieldSelectionSetImpl.newCollector(executionContext, starWarsSchema.getType('Human'), mergedField(fields))\n-\n-        expect:\n-\n-        selectionSet.arguments['name'] == [:]\n-        selectionSet.arguments['friends'] == [separationCount: 2]\n-        selectionSet.arguments['friends/friends'] == [separationCount: 5]\n-\n-    }\n-\n-    def \"test field type capture works\"() {\n-\n-        def document = TestUtil.parseQuery(query)\n-\n-        List<Field> fields = firstFields(document)\n \n-        def executionContext = ExecutionContextBuilder.newExecutionContextBuilder()\n-                .executionId(ExecutionId.generate())\n-                .fragmentsByName(getFragments(document))\n-                .graphQLSchema(starWarsSchema).build()\n-\n-        def selectionSet = DataFetchingFieldSelectionSetImpl.newCollector(executionContext, starWarsSchema.getType('Human'), mergedField(fields))\n-\n-        expect:\n-\n-        (selectionSet.definitions['name'].getType() as GraphQLNonNull).getWrappedType() == Scalars.GraphQLString\n-        (selectionSet.definitions['friends'].getType() as GraphQLList).getWrappedType() == starWarsSchema.getType('Character')\n-        (selectionSet.definitions['friends/friends'].getType() as GraphQLList).getWrappedType() == starWarsSchema.getType('Character')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7da953c19e46535a61428799ce754bfc3a458fab"}, "originalPosition": 159}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4564, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}