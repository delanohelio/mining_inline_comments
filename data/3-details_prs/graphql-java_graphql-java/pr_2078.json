{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MzAyNzk3", "number": 2078, "title": "Schema transformer fix", "bodyText": "This changes the Schema transformer implementation in order to overcome some limitations/fixes some bugs:\nThe main change is that the order of elements zipped up (moved up) is not depended on the depth (distance from dummy root), but the elements are sorted topologically (based on the reverse dependency of the normal graph).\nIt also changes the implementation of GraphQLList and GraphQLNonNull to not implement equals/hashcode because when we treat the GraphQLSchema as graph we rely fundamentally on the fact that every Node is unique and Nodes are equal only when it is the same instance.", "createdAt": "2020-10-19T21:56:16Z", "url": "https://github.com/graphql-java/graphql-java/pull/2078", "merged": true, "mergeCommit": {"oid": "a39aec8e715d97510eab8ea4c89667e4d1786636"}, "closed": true, "closedAt": "2020-10-25T04:59:15Z", "author": {"login": "andimarek"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpMbmVgH2gAyNTA2MzAyNzk3OjlhOGNiN2IzNDc2M2Q1NTg4MTZjZDk2YWZkNDVkMGRlZjE1MTJhYjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdV4fQSAFqTUxMjI4MjYyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a8cb7b34763d558816cd96afd45d0def1512ab4", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/9a8cb7b34763d558816cd96afd45d0def1512ab4", "committedDate": "2020-06-08T08:45:59Z", "message": "Test showing the failure on schema transform"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71f63f87fada260690c992125c2fdf36cca686ff", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/71f63f87fada260690c992125c2fdf36cca686ff", "committedDate": "2020-10-17T22:19:52Z", "message": "Merge branch 'master' into 1928-npe-in-breadcrumb-code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9191303243201652a695aa1f422163914838c6ae", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/9191303243201652a695aa1f422163914838c6ae", "committedDate": "2020-10-19T20:03:25Z", "message": "refactor schematransformer to use top sort instead of depth for traversing the graph"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "359f0f5dbbd5bd5252ee66a64d6c79cddaf81dc8", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/359f0f5dbbd5bd5252ee66a64d6c79cddaf81dc8", "committedDate": "2020-10-19T21:23:53Z", "message": "remove equals/hashcode for GraphQLList and GraphQLNonNull"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b59cf7b32b8fd74c77a34319e7ef7ef74d7c82a3", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/b59cf7b32b8fd74c77a34319e7ef7ef74d7c82a3", "committedDate": "2020-10-19T21:55:32Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81e3aa2c527eae52fc8e689c86ff46036694df47", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/81e3aa2c527eae52fc8e689c86ff46036694df47", "committedDate": "2020-10-19T21:58:11Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d340cf0451ef53ed2b268cf6c152e3cf1346d58", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/0d340cf0451ef53ed2b268cf6c152e3cf1346d58", "committedDate": "2020-10-19T22:34:01Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d4ac24d7e5eedda43aac1a9e5a6b42de40a2ed8", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/4d4ac24d7e5eedda43aac1a9e5a6b42de40a2ed8", "committedDate": "2020-10-19T22:47:25Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b5b347af23cf73df43654506afdbd2b24f01cb0", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/6b5b347af23cf73df43654506afdbd2b24f01cb0", "committedDate": "2020-10-20T00:54:23Z", "message": "add comment regarding equals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0fd714089f9513f26e9a89b572ce54ab3e1dab0", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/c0fd714089f9513f26e9a89b572ce54ab3e1dab0", "committedDate": "2020-10-20T01:02:08Z", "message": "add additional test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f45300f9ca7fd0fc47536dc2f09bcde62d92dde", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/9f45300f9ca7fd0fc47536dc2f09bcde62d92dde", "committedDate": "2020-10-20T04:41:51Z", "message": "implement final equals/hashcode with super calls to make sure it will not be broken in the future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92b3559bd0a80f9af977e5ff9e523b2063c21a11", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/92b3559bd0a80f9af977e5ff9e523b2063c21a11", "committedDate": "2020-10-20T04:47:51Z", "message": "handle empty breadcrumb list"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjgyNjI2", "url": "https://github.com/graphql-java/graphql-java/pull/2078#pullrequestreview-512282626", "createdAt": "2020-10-20T02:17:52Z", "commit": {"oid": "c0fd714089f9513f26e9a89b572ce54ab3e1dab0"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjoxNzo1MlrOHkoG0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjo1NToxMlrOHkouGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2Nzg4OQ==", "bodyText": "Should also have hashCode() - HashSet relies on it not just equals", "url": "https://github.com/graphql-java/graphql-java/pull/2078#discussion_r508167889", "createdAt": "2020-10-20T02:17:52Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/GraphQLSchemaElement.java", "diffHunk": "@@ -29,4 +29,15 @@ default GraphQLSchemaElement withNewChildren(SchemaElementChildrenContainer newC\n     }\n \n     TraversalControl accept(TraverserContext<GraphQLSchemaElement> context, GraphQLTypeVisitor visitor);\n+\n+\n+    /**\n+     * No GraphQLSchemaElement implements `equals` because we need object identity\n+     * to treat a GraphQLSchema as an abstract graph.\n+     *\n+     * @param obj\n+     *\n+     * @return\n+     */\n+    boolean equals(Object obj);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0fd714089f9513f26e9a89b572ce54ab3e1dab0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3NzU2NA==", "bodyText": "We really have entered DAG academia havent we.  Glad we have you!", "url": "https://github.com/graphql-java/graphql-java/pull/2078#discussion_r508177564", "createdAt": "2020-10-20T02:53:45Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/SchemaTransformer.java", "diffHunk": "@@ -186,92 +198,125 @@ public TraversalControl backRef(TraverserContext<GraphQLSchemaElement> context)\n         return newSchema;\n     }\n \n-    private void toRootNode(List<NodeZipper<GraphQLSchemaElement>> zippers,\n-                            Map<NodeZipper<GraphQLSchemaElement>, List<List<Breadcrumb<GraphQLSchemaElement>>>> breadcrumbsByZipper,\n-                            Map<GraphQLSchemaElement, NodeZipper<GraphQLSchemaElement>> zipperByNodeAfterTraversing) {\n-        if (zippers.size() == 0) {\n-            return;\n+    private List<GraphQLSchemaElement> topologicalSort(Set<GraphQLSchemaElement> allNodes, Map<GraphQLSchemaElement, List<GraphQLSchemaElement>> reverseDependencies) {\n+        List<GraphQLSchemaElement> result = new ArrayList<>();\n+        Set<GraphQLSchemaElement> notPermMarked = new LinkedHashSet<>(allNodes);\n+        Set<GraphQLSchemaElement> tempMarked = new LinkedHashSet<>();\n+        Set<GraphQLSchemaElement> permMarked = new LinkedHashSet<>();\n+        /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0fd714089f9513f26e9a89b572ce54ab3e1dab0"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3Nzk0NA==", "bodyText": "This feels like it could be a generic utility.  A DagUtil kinda class", "url": "https://github.com/graphql-java/graphql-java/pull/2078#discussion_r508177944", "createdAt": "2020-10-20T02:55:12Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/SchemaTransformer.java", "diffHunk": "@@ -186,92 +198,125 @@ public TraversalControl backRef(TraverserContext<GraphQLSchemaElement> context)\n         return newSchema;\n     }\n \n-    private void toRootNode(List<NodeZipper<GraphQLSchemaElement>> zippers,\n-                            Map<NodeZipper<GraphQLSchemaElement>, List<List<Breadcrumb<GraphQLSchemaElement>>>> breadcrumbsByZipper,\n-                            Map<GraphQLSchemaElement, NodeZipper<GraphQLSchemaElement>> zipperByNodeAfterTraversing) {\n-        if (zippers.size() == 0) {\n-            return;\n+    private List<GraphQLSchemaElement> topologicalSort(Set<GraphQLSchemaElement> allNodes, Map<GraphQLSchemaElement, List<GraphQLSchemaElement>> reverseDependencies) {\n+        List<GraphQLSchemaElement> result = new ArrayList<>();\n+        Set<GraphQLSchemaElement> notPermMarked = new LinkedHashSet<>(allNodes);\n+        Set<GraphQLSchemaElement> tempMarked = new LinkedHashSet<>();\n+        Set<GraphQLSchemaElement> permMarked = new LinkedHashSet<>();\n+        /**\n+         * Taken from: https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search\n+         * while exists nodes without a permanent mark do\n+         *     select an unmarked node n\n+         *     visit(n)\n+         */\n+        while (true) {\n+            Iterator<GraphQLSchemaElement> iterator = notPermMarked.iterator();\n+            if (!iterator.hasNext()) {\n+                break;\n+            }\n+            GraphQLSchemaElement n = iterator.next();\n+            iterator.remove();\n+            visit(n, tempMarked, permMarked, notPermMarked, result, reverseDependencies);\n         }\n+        return result;\n+    }\n \n-        /*\n-         * Because every node can have multiple parents (not a tree, but a graph) we have a list of breadcrumbs per zipper.\n-         * Or to put it differently: there is not one path from a node to the dummyRoot, but multiple ones with a different length\n+    private void visit(GraphQLSchemaElement n,\n+                       Set<GraphQLSchemaElement> tempMarked,\n+                       Set<GraphQLSchemaElement> permMarked,\n+                       Set<GraphQLSchemaElement> notPermMarked,\n+                       List<GraphQLSchemaElement> result,\n+                       Map<GraphQLSchemaElement, List<GraphQLSchemaElement>> reverseDependencies) {\n+        /**\n+         * Taken from: https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search\n+         * if n has a permanent mark then\n+         *         return\n+         *     if n has a temporary mark then\n+         *         stop   (not a DAG)\n+         *\n+         *     mark n with a temporary mark\n+         *\n+         *     for each node m with an edge from n to m do\n+         *         visit(m)\n+         *\n+         *     remove temporary mark from n\n+         *     mark n with a permanent mark\n+         *     add n to head of L\n          */\n+        if (permMarked.contains(n)) {\n+            return;\n+        }\n+        if (tempMarked.contains(n)) {\n+            Assert.assertShouldNeverHappen(\"NOT A DAG: %s has temp mark\", n);\n+            return;\n+        }\n+        tempMarked.add(n);\n+        if (reverseDependencies.containsKey(n)) {\n+            for (GraphQLSchemaElement m : reverseDependencies.get(n)) {\n+                visit(m, tempMarked, permMarked, notPermMarked, result, reverseDependencies);\n+            }\n+        }\n+        tempMarked.remove(n);\n+        permMarked.add(n);\n+        notPermMarked.remove(n);\n+        result.add(n);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0fd714089f9513f26e9a89b572ce54ab3e1dab0"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4367, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}