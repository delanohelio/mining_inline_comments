{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMjMzMDUx", "number": 2085, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjo0NzowNlrOEyoLrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMTozNToxNFrOEzjAlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTIyNjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjo0NzowNlrOHpYBRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMTozODoxNVrOHq1R2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NzIwNQ==", "bodyText": "Performance of this statement can be improved by keeping a map of Object field's name and the field itself in ObjectValue class.", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r513147205", "createdAt": "2020-10-28T02:47:06Z", "author": {"login": "priyaaggarwal24"}, "path": "src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java", "diffHunk": "@@ -292,8 +293,13 @@ Object buildArrayValue(GraphQLType requiredType, ArrayValue arrayValue) {\n \n     Object buildObjectValue(ObjectValue defaultValue, GraphQLInputObjectType objectType) {\n         Map<String, Object> map = new LinkedHashMap<>();\n-        defaultValue.getObjectFields().forEach(of -> map.put(of.getName(),\n-                buildValue(of.getValue(), objectType.getField(of.getName()).getType())));\n+        objectType.getFieldDefinitions().forEach(\n+                f -> {\n+                    final Value<?> fieldValueFromDefaultObjectValue = defaultValue.getObjectFields().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a196f7c0fb8fc5c37c2f1fd868136e683cda0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzOTg2MA==", "bodyText": "fields of objects are typically < 10 say - iterating them is not  a real problem.  Also schema building is KN OWN to be a heavy thing they can be slower (where slower is not really slow) - So there are no perf savings to be had in schema generation as a rule\nThat is not to say it should be terrible - but that when people come to us about performance its NOT in the schema gen side of things", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r514639860", "createdAt": "2020-10-30T00:21:57Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java", "diffHunk": "@@ -292,8 +293,13 @@ Object buildArrayValue(GraphQLType requiredType, ArrayValue arrayValue) {\n \n     Object buildObjectValue(ObjectValue defaultValue, GraphQLInputObjectType objectType) {\n         Map<String, Object> map = new LinkedHashMap<>();\n-        defaultValue.getObjectFields().forEach(of -> map.put(of.getName(),\n-                buildValue(of.getValue(), objectType.getField(of.getName()).getType())));\n+        objectType.getFieldDefinitions().forEach(\n+                f -> {\n+                    final Value<?> fieldValueFromDefaultObjectValue = defaultValue.getObjectFields().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NzIwNQ=="}, "originalCommit": {"oid": "f71a196f7c0fb8fc5c37c2f1fd868136e683cda0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY3NTE2Mg==", "bodyText": "ok, thanks", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r514675162", "createdAt": "2020-10-30T01:38:15Z", "author": {"login": "priyaaggarwal24"}, "path": "src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java", "diffHunk": "@@ -292,8 +293,13 @@ Object buildArrayValue(GraphQLType requiredType, ArrayValue arrayValue) {\n \n     Object buildObjectValue(ObjectValue defaultValue, GraphQLInputObjectType objectType) {\n         Map<String, Object> map = new LinkedHashMap<>();\n-        defaultValue.getObjectFields().forEach(of -> map.put(of.getName(),\n-                buildValue(of.getValue(), objectType.getField(of.getName()).getType())));\n+        objectType.getFieldDefinitions().forEach(\n+                f -> {\n+                    final Value<?> fieldValueFromDefaultObjectValue = defaultValue.getObjectFields().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NzIwNQ=="}, "originalCommit": {"oid": "f71a196f7c0fb8fc5c37c2f1fd868136e683cda0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTIzMDE2OnYy", "diffSide": "RIGHT", "path": "src/test/groovy/graphql/introspection/IntrospectionResultToSchemaTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjo0OTozNlrOHpYDww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjo0OTozNlrOHpYDww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0Nzg0Mw==", "bodyText": "Introspection of schema now considers the default values defined in Input types.", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r513147843", "createdAt": "2020-10-28T02:49:36Z", "author": {"login": "priyaaggarwal24"}, "path": "src/test/groovy/graphql/introspection/IntrospectionResultToSchemaTest.groovy", "diffHunk": "@@ -590,7 +590,7 @@ input CharacterInput {\n }\n \n type Query {\n-  outputField(inputArg: InputType = {age : 666, name : \"nameViaArg\"}, inputBoolean: Boolean = true, inputInt: Int = 1, inputString: String = \"viaArgString\"): OutputType\n+  outputField(inputArg: InputType = {age : 666, complex : {boolean : true, int : 666, string : \"string\"}, name : \"nameViaArg\", rocks : true}, inputBoolean: Boolean = true, inputInt: Int = 1, inputString: String = \"viaArgString\"): OutputType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a196f7c0fb8fc5c37c2f1fd868136e683cda0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDcxMjIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDo0Nzo0MlrOHqzhtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMTo1OTozMVrOHq2flA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0NjQ1NA==", "bodyText": "final Value<?> fieldValueFromDefaultObjectValue = defaultValue.getObjectFields().stream().filter(dvf -> dvf.getName().equals(f.getName())).map(ObjectField::getValue).findFirst().orElse(null);\nends up really hard to read.  I like to put in simple methods to represent this\nfinal Value<?> fieldValueFromDefaultObjectValue = buildFieldDefaultValue(defaultValue,...)", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r514646454", "createdAt": "2020-10-30T00:47:42Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java", "diffHunk": "@@ -292,8 +293,13 @@ Object buildArrayValue(GraphQLType requiredType, ArrayValue arrayValue) {\n \n     Object buildObjectValue(ObjectValue defaultValue, GraphQLInputObjectType objectType) {\n         Map<String, Object> map = new LinkedHashMap<>();\n-        defaultValue.getObjectFields().forEach(of -> map.put(of.getName(),\n-                buildValue(of.getValue(), objectType.getField(of.getName()).getType())));\n+        objectType.getFieldDefinitions().forEach(\n+                f -> {\n+                    final Value<?> fieldValueFromDefaultObjectValue = defaultValue.getObjectFields().stream()\n+                            .filter(dvf -> dvf.getName().equals(f.getName())).map(ObjectField::getValue).findFirst().orElse(null);\n+                    map.put(f.getName(), fieldValueFromDefaultObjectValue != null ? buildValue(fieldValueFromDefaultObjectValue, f.getType()): f.getDefaultValue());\n+                }\n+        );\n         return map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a196f7c0fb8fc5c37c2f1fd868136e683cda0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY5NTA2MA==", "bodyText": "@bbakerman Done. Refactored the long statement into a method.", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r514695060", "createdAt": "2020-10-30T01:59:31Z", "author": {"login": "priyaaggarwal24"}, "path": "src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java", "diffHunk": "@@ -292,8 +293,13 @@ Object buildArrayValue(GraphQLType requiredType, ArrayValue arrayValue) {\n \n     Object buildObjectValue(ObjectValue defaultValue, GraphQLInputObjectType objectType) {\n         Map<String, Object> map = new LinkedHashMap<>();\n-        defaultValue.getObjectFields().forEach(of -> map.put(of.getName(),\n-                buildValue(of.getValue(), objectType.getField(of.getName()).getType())));\n+        objectType.getFieldDefinitions().forEach(\n+                f -> {\n+                    final Value<?> fieldValueFromDefaultObjectValue = defaultValue.getObjectFields().stream()\n+                            .filter(dvf -> dvf.getName().equals(f.getName())).map(ObjectField::getValue).findFirst().orElse(null);\n+                    map.put(f.getName(), fieldValueFromDefaultObjectValue != null ? buildValue(fieldValueFromDefaultObjectValue, f.getType()): f.getDefaultValue());\n+                }\n+        );\n         return map;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0NjQ1NA=="}, "originalCommit": {"oid": "f71a196f7c0fb8fc5c37c2f1fd868136e683cda0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDg2NDIzOnYy", "diffSide": "RIGHT", "path": "src/test/groovy/graphql/Issue1914.groovy", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMTozNToxNFrOHq1Gow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMTo1ODozMFrOHq2bbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY3MjI5MQ==", "bodyText": "Can we get another test in place for when the inner field is named BUT the value is null", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r514672291", "createdAt": "2020-10-30T01:35:14Z", "author": {"login": "bbakerman"}, "path": "src/test/groovy/graphql/Issue1914.groovy", "diffHunk": "@@ -0,0 +1,81 @@\n+package graphql\n+\n+import graphql.schema.DataFetcher\n+import spock.lang.Specification\n+\n+class Issue1914 extends Specification {\n+\n+    def \"default values in input objects are respected when variable is not provided\"() {\n+        given:\n+        def spec = \"\"\"type Query {\n+            sayHello(arg: Arg! = {}): String\n+        }\n+        input Arg {\n+            foo: String = \"bar\"\n+        }\n+        \"\"\"\n+        DataFetcher df = { dfe ->\n+            Map arg = dfe.getArgument(\"arg\")\n+            return arg.get(\"foo\")\n+        } as DataFetcher\n+        def graphQL = TestUtil.graphQL(spec, [\"Query\": [\"sayHello\": df]]).build()\n+\n+        when:\n+        def result = graphQL.execute('{sayHello}')\n+\n+        then:\n+        result.errors.isEmpty()\n+        result.data == [sayHello: \"bar\"]\n+\n+    }\n+\n+    def \"default values in input objects are overridden when variable is provided\"() {\n+        given:\n+        def spec = \"\"\"type Query {\n+            sayHello(arg: Arg! = {foo: \"brewery\"}): String\n+        }\n+        input Arg {\n+            foo: String = \"bar\"\n+        }\n+        \"\"\"\n+        DataFetcher df = { dfe ->\n+            Map arg = dfe.getArgument(\"arg\")\n+            return arg.get(\"foo\")\n+        } as DataFetcher\n+        def graphQL = TestUtil.graphQL(spec, [\"Query\": [\"sayHello\": df]]).build()\n+\n+        when:\n+        def result = graphQL.execute('{sayHello}')\n+\n+        then:\n+        result.errors.isEmpty()\n+        result.data == [sayHello: \"brewery\"]\n+\n+    }\n+\n+    def \"default values in input objects are overridden when variable is provided and otherwise are respected\"() {\n+        given:\n+        def spec = \"\"\"type Query {\n+            sayHello(arg: Arg! = {field1: \"F1ValOverride\"}): String\n+        }\n+        input Arg {\n+            field1: String = \"F1V\"\n+            field2: String = \"F2V\"\n+        }\n+        \"\"\"\n+        DataFetcher df = { dfe ->\n+            Map arg = dfe.getArgument(\"arg\")\n+            return arg.get(\"field1\") + \" & \" + arg.get(\"field2\")\n+        } as DataFetcher\n+        def graphQL = TestUtil.graphQL(spec, [\"Query\": [\"sayHello\": df]]).build()\n+\n+        when:\n+        def result = graphQL.execute('{sayHello}')\n+\n+        then:\n+        result.errors.isEmpty()\n+        result.data == [sayHello: \"F1ValOverride & F2V\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a196f7c0fb8fc5c37c2f1fd868136e683cda0"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY3Njk0OA==", "bodyText": "do you something like\n\"default values in input objects are overridden when null value is provided in input\"?\nor do you mean the default value provided for a field in input type is null?", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r514676948", "createdAt": "2020-10-30T01:40:07Z", "author": {"login": "priyaaggarwal24"}, "path": "src/test/groovy/graphql/Issue1914.groovy", "diffHunk": "@@ -0,0 +1,81 @@\n+package graphql\n+\n+import graphql.schema.DataFetcher\n+import spock.lang.Specification\n+\n+class Issue1914 extends Specification {\n+\n+    def \"default values in input objects are respected when variable is not provided\"() {\n+        given:\n+        def spec = \"\"\"type Query {\n+            sayHello(arg: Arg! = {}): String\n+        }\n+        input Arg {\n+            foo: String = \"bar\"\n+        }\n+        \"\"\"\n+        DataFetcher df = { dfe ->\n+            Map arg = dfe.getArgument(\"arg\")\n+            return arg.get(\"foo\")\n+        } as DataFetcher\n+        def graphQL = TestUtil.graphQL(spec, [\"Query\": [\"sayHello\": df]]).build()\n+\n+        when:\n+        def result = graphQL.execute('{sayHello}')\n+\n+        then:\n+        result.errors.isEmpty()\n+        result.data == [sayHello: \"bar\"]\n+\n+    }\n+\n+    def \"default values in input objects are overridden when variable is provided\"() {\n+        given:\n+        def spec = \"\"\"type Query {\n+            sayHello(arg: Arg! = {foo: \"brewery\"}): String\n+        }\n+        input Arg {\n+            foo: String = \"bar\"\n+        }\n+        \"\"\"\n+        DataFetcher df = { dfe ->\n+            Map arg = dfe.getArgument(\"arg\")\n+            return arg.get(\"foo\")\n+        } as DataFetcher\n+        def graphQL = TestUtil.graphQL(spec, [\"Query\": [\"sayHello\": df]]).build()\n+\n+        when:\n+        def result = graphQL.execute('{sayHello}')\n+\n+        then:\n+        result.errors.isEmpty()\n+        result.data == [sayHello: \"brewery\"]\n+\n+    }\n+\n+    def \"default values in input objects are overridden when variable is provided and otherwise are respected\"() {\n+        given:\n+        def spec = \"\"\"type Query {\n+            sayHello(arg: Arg! = {field1: \"F1ValOverride\"}): String\n+        }\n+        input Arg {\n+            field1: String = \"F1V\"\n+            field2: String = \"F2V\"\n+        }\n+        \"\"\"\n+        DataFetcher df = { dfe ->\n+            Map arg = dfe.getArgument(\"arg\")\n+            return arg.get(\"field1\") + \" & \" + arg.get(\"field2\")\n+        } as DataFetcher\n+        def graphQL = TestUtil.graphQL(spec, [\"Query\": [\"sayHello\": df]]).build()\n+\n+        when:\n+        def result = graphQL.execute('{sayHello}')\n+\n+        then:\n+        result.errors.isEmpty()\n+        result.data == [sayHello: \"F1ValOverride & F2V\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY3MjI5MQ=="}, "originalCommit": {"oid": "f71a196f7c0fb8fc5c37c2f1fd868136e683cda0"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY5Mzk5OA==", "bodyText": "@bbakerman Added a test where one of the fields in input type have null value (below this test)", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r514693998", "createdAt": "2020-10-30T01:58:30Z", "author": {"login": "priyaaggarwal24"}, "path": "src/test/groovy/graphql/Issue1914.groovy", "diffHunk": "@@ -0,0 +1,81 @@\n+package graphql\n+\n+import graphql.schema.DataFetcher\n+import spock.lang.Specification\n+\n+class Issue1914 extends Specification {\n+\n+    def \"default values in input objects are respected when variable is not provided\"() {\n+        given:\n+        def spec = \"\"\"type Query {\n+            sayHello(arg: Arg! = {}): String\n+        }\n+        input Arg {\n+            foo: String = \"bar\"\n+        }\n+        \"\"\"\n+        DataFetcher df = { dfe ->\n+            Map arg = dfe.getArgument(\"arg\")\n+            return arg.get(\"foo\")\n+        } as DataFetcher\n+        def graphQL = TestUtil.graphQL(spec, [\"Query\": [\"sayHello\": df]]).build()\n+\n+        when:\n+        def result = graphQL.execute('{sayHello}')\n+\n+        then:\n+        result.errors.isEmpty()\n+        result.data == [sayHello: \"bar\"]\n+\n+    }\n+\n+    def \"default values in input objects are overridden when variable is provided\"() {\n+        given:\n+        def spec = \"\"\"type Query {\n+            sayHello(arg: Arg! = {foo: \"brewery\"}): String\n+        }\n+        input Arg {\n+            foo: String = \"bar\"\n+        }\n+        \"\"\"\n+        DataFetcher df = { dfe ->\n+            Map arg = dfe.getArgument(\"arg\")\n+            return arg.get(\"foo\")\n+        } as DataFetcher\n+        def graphQL = TestUtil.graphQL(spec, [\"Query\": [\"sayHello\": df]]).build()\n+\n+        when:\n+        def result = graphQL.execute('{sayHello}')\n+\n+        then:\n+        result.errors.isEmpty()\n+        result.data == [sayHello: \"brewery\"]\n+\n+    }\n+\n+    def \"default values in input objects are overridden when variable is provided and otherwise are respected\"() {\n+        given:\n+        def spec = \"\"\"type Query {\n+            sayHello(arg: Arg! = {field1: \"F1ValOverride\"}): String\n+        }\n+        input Arg {\n+            field1: String = \"F1V\"\n+            field2: String = \"F2V\"\n+        }\n+        \"\"\"\n+        DataFetcher df = { dfe ->\n+            Map arg = dfe.getArgument(\"arg\")\n+            return arg.get(\"field1\") + \" & \" + arg.get(\"field2\")\n+        } as DataFetcher\n+        def graphQL = TestUtil.graphQL(spec, [\"Query\": [\"sayHello\": df]]).build()\n+\n+        when:\n+        def result = graphQL.execute('{sayHello}')\n+\n+        then:\n+        result.errors.isEmpty()\n+        result.data == [sayHello: \"F1ValOverride & F2V\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY3MjI5MQ=="}, "originalCommit": {"oid": "f71a196f7c0fb8fc5c37c2f1fd868136e683cda0"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4572, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}