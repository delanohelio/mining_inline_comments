{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MzAyNzk3", "number": 2078, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjoxNzo1MlrOEvklGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjo1NToxMlrOEvk-1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzE3ODQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/schema/GraphQLSchemaElement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjoxNzo1MlrOHkoG0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjoxNzo1MlrOHkoG0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2Nzg4OQ==", "bodyText": "Should also have hashCode() - HashSet relies on it not just equals", "url": "https://github.com/graphql-java/graphql-java/pull/2078#discussion_r508167889", "createdAt": "2020-10-20T02:17:52Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/GraphQLSchemaElement.java", "diffHunk": "@@ -29,4 +29,15 @@ default GraphQLSchemaElement withNewChildren(SchemaElementChildrenContainer newC\n     }\n \n     TraversalControl accept(TraverserContext<GraphQLSchemaElement> context, GraphQLTypeVisitor visitor);\n+\n+\n+    /**\n+     * No GraphQLSchemaElement implements `equals` because we need object identity\n+     * to treat a GraphQLSchema as an abstract graph.\n+     *\n+     * @param obj\n+     *\n+     * @return\n+     */\n+    boolean equals(Object obj);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0fd714089f9513f26e9a89b572ce54ab3e1dab0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzI0MTgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/schema/SchemaTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjo1Mzo0NVrOHkosnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjo1Mzo0NVrOHkosnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3NzU2NA==", "bodyText": "We really have entered DAG academia havent we.  Glad we have you!", "url": "https://github.com/graphql-java/graphql-java/pull/2078#discussion_r508177564", "createdAt": "2020-10-20T02:53:45Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/SchemaTransformer.java", "diffHunk": "@@ -186,92 +198,125 @@ public TraversalControl backRef(TraverserContext<GraphQLSchemaElement> context)\n         return newSchema;\n     }\n \n-    private void toRootNode(List<NodeZipper<GraphQLSchemaElement>> zippers,\n-                            Map<NodeZipper<GraphQLSchemaElement>, List<List<Breadcrumb<GraphQLSchemaElement>>>> breadcrumbsByZipper,\n-                            Map<GraphQLSchemaElement, NodeZipper<GraphQLSchemaElement>> zipperByNodeAfterTraversing) {\n-        if (zippers.size() == 0) {\n-            return;\n+    private List<GraphQLSchemaElement> topologicalSort(Set<GraphQLSchemaElement> allNodes, Map<GraphQLSchemaElement, List<GraphQLSchemaElement>> reverseDependencies) {\n+        List<GraphQLSchemaElement> result = new ArrayList<>();\n+        Set<GraphQLSchemaElement> notPermMarked = new LinkedHashSet<>(allNodes);\n+        Set<GraphQLSchemaElement> tempMarked = new LinkedHashSet<>();\n+        Set<GraphQLSchemaElement> permMarked = new LinkedHashSet<>();\n+        /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0fd714089f9513f26e9a89b572ce54ab3e1dab0"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzI0NDM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/schema/SchemaTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjo1NToxMlrOHkouGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjo1NToxMlrOHkouGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3Nzk0NA==", "bodyText": "This feels like it could be a generic utility.  A DagUtil kinda class", "url": "https://github.com/graphql-java/graphql-java/pull/2078#discussion_r508177944", "createdAt": "2020-10-20T02:55:12Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/SchemaTransformer.java", "diffHunk": "@@ -186,92 +198,125 @@ public TraversalControl backRef(TraverserContext<GraphQLSchemaElement> context)\n         return newSchema;\n     }\n \n-    private void toRootNode(List<NodeZipper<GraphQLSchemaElement>> zippers,\n-                            Map<NodeZipper<GraphQLSchemaElement>, List<List<Breadcrumb<GraphQLSchemaElement>>>> breadcrumbsByZipper,\n-                            Map<GraphQLSchemaElement, NodeZipper<GraphQLSchemaElement>> zipperByNodeAfterTraversing) {\n-        if (zippers.size() == 0) {\n-            return;\n+    private List<GraphQLSchemaElement> topologicalSort(Set<GraphQLSchemaElement> allNodes, Map<GraphQLSchemaElement, List<GraphQLSchemaElement>> reverseDependencies) {\n+        List<GraphQLSchemaElement> result = new ArrayList<>();\n+        Set<GraphQLSchemaElement> notPermMarked = new LinkedHashSet<>(allNodes);\n+        Set<GraphQLSchemaElement> tempMarked = new LinkedHashSet<>();\n+        Set<GraphQLSchemaElement> permMarked = new LinkedHashSet<>();\n+        /**\n+         * Taken from: https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search\n+         * while exists nodes without a permanent mark do\n+         *     select an unmarked node n\n+         *     visit(n)\n+         */\n+        while (true) {\n+            Iterator<GraphQLSchemaElement> iterator = notPermMarked.iterator();\n+            if (!iterator.hasNext()) {\n+                break;\n+            }\n+            GraphQLSchemaElement n = iterator.next();\n+            iterator.remove();\n+            visit(n, tempMarked, permMarked, notPermMarked, result, reverseDependencies);\n         }\n+        return result;\n+    }\n \n-        /*\n-         * Because every node can have multiple parents (not a tree, but a graph) we have a list of breadcrumbs per zipper.\n-         * Or to put it differently: there is not one path from a node to the dummyRoot, but multiple ones with a different length\n+    private void visit(GraphQLSchemaElement n,\n+                       Set<GraphQLSchemaElement> tempMarked,\n+                       Set<GraphQLSchemaElement> permMarked,\n+                       Set<GraphQLSchemaElement> notPermMarked,\n+                       List<GraphQLSchemaElement> result,\n+                       Map<GraphQLSchemaElement, List<GraphQLSchemaElement>> reverseDependencies) {\n+        /**\n+         * Taken from: https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search\n+         * if n has a permanent mark then\n+         *         return\n+         *     if n has a temporary mark then\n+         *         stop   (not a DAG)\n+         *\n+         *     mark n with a temporary mark\n+         *\n+         *     for each node m with an edge from n to m do\n+         *         visit(m)\n+         *\n+         *     remove temporary mark from n\n+         *     mark n with a permanent mark\n+         *     add n to head of L\n          */\n+        if (permMarked.contains(n)) {\n+            return;\n+        }\n+        if (tempMarked.contains(n)) {\n+            Assert.assertShouldNeverHappen(\"NOT A DAG: %s has temp mark\", n);\n+            return;\n+        }\n+        tempMarked.add(n);\n+        if (reverseDependencies.containsKey(n)) {\n+            for (GraphQLSchemaElement m : reverseDependencies.get(n)) {\n+                visit(m, tempMarked, permMarked, notPermMarked, result, reverseDependencies);\n+            }\n+        }\n+        tempMarked.remove(n);\n+        permMarked.add(n);\n+        notPermMarked.remove(n);\n+        result.add(n);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0fd714089f9513f26e9a89b572ce54ab3e1dab0"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4561, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}