{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNTAwNzI2", "number": 2019, "title": "Faster Property fetching with derived classes ", "bodyText": "I found a bug on the VERY important PropertyDataFetcher where methods on derived classes are not cached properly.\nThis leads to things running slower than they are intended.\nWe also invoke too much code when we DO have a cached method and this simplifies that, doing way less work on POJO method invocation\nI created a benchmark for this - on my Mac Pro -\nBaseline:\nBencnchmark                                                            Mode  Cnt        Score       Error  Units\nPropertyFetcherBenchMark.benchMarkThroughputDirectClassHierarchy    thrpt   15  1085518.250 \u00b1 19039.649  ops/s\nPropertyFetcherBenchMark.benchMarkThroughputInDirectClassHierarchy  thrpt   15    48904.567 \u00b1  2916.355  ops/s\n\nAfter Inprovements\nBenchmark                                                            Mode  Cnt        Score       Error  Units\nPropertyFetcherBenchMark.benchMarkThroughputDirectClassHierarchy    thrpt   15  1459934.015 \u00b1 29543.790  ops/s\nPropertyFetcherBenchMark.benchMarkThroughputInDirectClassHierarchy  thrpt   15  1441122.199 \u00b1 54806.438  ops/s", "createdAt": "2020-09-05T11:03:36Z", "url": "https://github.com/graphql-java/graphql-java/pull/2019", "merged": true, "mergeCommit": {"oid": "30e680b84b09e3465cb152bb25ebb3f06cb1b0f2"}, "closed": true, "closedAt": "2020-09-08T04:52:26Z", "author": {"login": "bbakerman"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdF3s_xgH2gAyNDgwNTAwNzI2OmFhMDRiODBkZDZmOTdhMzAwMDU4MjMwZTVlMTJmOTU5ODdlNDZjYWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGpjr4AFqTQ4MzcwOTI3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aa04b80dd6f97a300058230e5e12f95987e46caf", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/aa04b80dd6f97a300058230e5e12f95987e46caf", "committedDate": "2020-09-05T11:00:47Z", "message": "Faster Property fetching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f7217f9f7cb5315d15ef49d8841a7279b84fa0", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/18f7217f9f7cb5315d15ef49d8841a7279b84fa0", "committedDate": "2020-09-05T11:36:11Z", "message": "Slight change in heuristic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDUxMTc4", "url": "https://github.com/graphql-java/graphql-java/pull/2019#pullrequestreview-483051178", "createdAt": "2020-09-05T12:04:15Z", "commit": {"oid": "18f7217f9f7cb5315d15ef49d8841a7279b84fa0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxMjowNDoxNlrOHNho5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxMjowNDoxNlrOHNho5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0NDY3OA==", "bodyText": "I flipped the negative cache down in the order because I think the \"positive case\" is more likely - that is for any property X on a source object we have a method to get it.\nSo now if we DONT have a cached method we will try to see if its negatively cached (could not be found before) and the do the full search for it\nThis is a minor improvement because it avoids a map lookup in the case where we have methods, which I beleive is the best case to chase first", "url": "https://github.com/graphql-java/graphql-java/pull/2019#discussion_r483944678", "createdAt": "2020-09-05T12:04:16Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/PropertyDataFetcherHelper.java", "diffHunk": "@@ -42,49 +52,52 @@ public static Object getPropertyValue(String propertyName, Object object, GraphQ\n             return ((Map<?, ?>) object).get(propertyName);\n         }\n \n-        String key = mkKey(object, propertyName);\n-        //\n-        // if we have tried all strategies before and they have all failed then we negatively cache\n-        // the key and assume that its never going to turn up.  This shortcuts the property lookup\n-        // in systems where there was a `foo` graphql property but they never provided an POJO\n-        // version of `foo`.\n-        if (isNegativelyCached(key)) {\n-            return null;\n-        }\n-        // lets try positive cache mechanisms next.  If we have seen the method or field before\n+        String cacheKey = mkKey(object, propertyName);\n+        // lets try positive cache mechanisms first.  If we have seen the method or field before\n         // then we invoke it directly without burning any cycles doing reflection.\n-        Method cachedMethod = METHOD_CACHE.get(key);\n+        CachedMethod cachedMethod = METHOD_CACHE.get(cacheKey);\n         if (cachedMethod != null) {\n-            MethodFinder methodFinder = (aClass, methodName) -> cachedMethod;\n             try {\n-                return getPropertyViaGetterMethod(object, propertyName, graphQLType, methodFinder, environment);\n+                return invokeMethod(object, environment, cachedMethod.method, cachedMethod.takesDataFetcherEnvironmentAsOnlyArgument);\n             } catch (NoSuchMethodException ignored) {\n-                assertShouldNeverHappen(\"A method cached as '%s' is no longer available??\", key);\n+                assertShouldNeverHappen(\"A method cached as '%s' is no longer available??\", cacheKey);\n             }\n         }\n-        Field cachedField = FIELD_CACHE.get(key);\n+        Field cachedField = FIELD_CACHE.get(cacheKey);\n         if (cachedField != null) {\n-            try {\n-                return getPropertyViaFieldAccess(object, propertyName);\n-            } catch (FastNoSuchMethodException ignored) {\n-                assertShouldNeverHappen(\"A field cached as '%s' is no longer available??\", key);\n-            }\n+            return invokeField(object, cachedField);\n         }\n \n+        //\n+        // if we have tried all strategies before and they have all failed then we negatively cache\n+        // the cacheKey and assume that its never going to turn up.  This shortcuts the property lookup\n+        // in systems where there was a `foo` graphql property but they never provided an POJO\n+        // version of `foo`.\n+        //\n+        // we do this second because we believe in the positive cached version will mostly prevail\n+        // but if we then look it up and negatively cache it then lest do that look up next\n+        //\n+        if (isNegativelyCached(cacheKey)) {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18f7217f9f7cb5315d15ef49d8841a7279b84fa0"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDUxMTg1", "url": "https://github.com/graphql-java/graphql-java/pull/2019#pullrequestreview-483051185", "createdAt": "2020-09-05T12:04:31Z", "commit": {"oid": "18f7217f9f7cb5315d15ef49d8841a7279b84fa0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxMjowNDozMVrOHNho9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxMjowNDozMVrOHNho9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0NDY5Mw==", "bodyText": "We now do LESS work to invoke the property get", "url": "https://github.com/graphql-java/graphql-java/pull/2019#discussion_r483944693", "createdAt": "2020-09-05T12:04:31Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/PropertyDataFetcherHelper.java", "diffHunk": "@@ -42,49 +52,52 @@ public static Object getPropertyValue(String propertyName, Object object, GraphQ\n             return ((Map<?, ?>) object).get(propertyName);\n         }\n \n-        String key = mkKey(object, propertyName);\n-        //\n-        // if we have tried all strategies before and they have all failed then we negatively cache\n-        // the key and assume that its never going to turn up.  This shortcuts the property lookup\n-        // in systems where there was a `foo` graphql property but they never provided an POJO\n-        // version of `foo`.\n-        if (isNegativelyCached(key)) {\n-            return null;\n-        }\n-        // lets try positive cache mechanisms next.  If we have seen the method or field before\n+        String cacheKey = mkKey(object, propertyName);\n+        // lets try positive cache mechanisms first.  If we have seen the method or field before\n         // then we invoke it directly without burning any cycles doing reflection.\n-        Method cachedMethod = METHOD_CACHE.get(key);\n+        CachedMethod cachedMethod = METHOD_CACHE.get(cacheKey);\n         if (cachedMethod != null) {\n-            MethodFinder methodFinder = (aClass, methodName) -> cachedMethod;\n             try {\n-                return getPropertyViaGetterMethod(object, propertyName, graphQLType, methodFinder, environment);\n+                return invokeMethod(object, environment, cachedMethod.method, cachedMethod.takesDataFetcherEnvironmentAsOnlyArgument);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18f7217f9f7cb5315d15ef49d8841a7279b84fa0"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDUxMjI3", "url": "https://github.com/graphql-java/graphql-java/pull/2019#pullrequestreview-483051227", "createdAt": "2020-09-05T12:05:17Z", "commit": {"oid": "18f7217f9f7cb5315d15ef49d8841a7279b84fa0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxMjowNToxN1rOHNhpTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxMjowNToxN1rOHNhpTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0NDc4Mg==", "bodyText": "previously we always did this method call - now we cache this knowledge just like the method itself", "url": "https://github.com/graphql-java/graphql-java/pull/2019#discussion_r483944782", "createdAt": "2020-09-05T12:05:17Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/PropertyDataFetcherHelper.java", "diffHunk": "@@ -122,22 +135,10 @@ private static Object getPropertyViaGetterMethod(Object object, String propertyN\n \n     private static Object getPropertyViaGetterUsingPrefix(Object object, String propertyName, String prefix, MethodFinder methodFinder, DataFetchingEnvironment environment) throws NoSuchMethodException {\n         String getterName = prefix + propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1);\n-        try {\n-            Method method = methodFinder.apply(object.getClass(), getterName);\n-            if (takesDataFetcherEnvironmentAsOnlyArgument(method)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18f7217f9f7cb5315d15ef49d8841a7279b84fa0"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDUxMjc1", "url": "https://github.com/graphql-java/graphql-java/pull/2019#pullrequestreview-483051275", "createdAt": "2020-09-05T12:06:10Z", "commit": {"oid": "18f7217f9f7cb5315d15ef49d8841a7279b84fa0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxMjowNjoxMFrOHNhppg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxMjowNjoxMFrOHNhppg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk0NDg3MA==", "bodyText": "the tests all pass and I tweaked this one to ensure out caching works for Foo extends Bar case", "url": "https://github.com/graphql-java/graphql-java/pull/2019#discussion_r483944870", "createdAt": "2020-09-05T12:06:10Z", "author": {"login": "bbakerman"}, "path": "src/test/groovy/graphql/schema/PropertyDataFetcherTest.groovy", "diffHunk": "@@ -458,5 +458,12 @@ class PropertyDataFetcherTest extends Specification {\n \n         then:\n         result == \"bar\"\n+\n+        // repeat - should be cached\n+        when:\n+        result = propertyDataFetcher.get(dfe)\n+\n+        then:\n+        result == \"bar\"\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18f7217f9f7cb5315d15ef49d8841a7279b84fa0"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzA5Mjc3", "url": "https://github.com/graphql-java/graphql-java/pull/2019#pullrequestreview-483709277", "createdAt": "2020-09-07T21:05:52Z", "commit": {"oid": "18f7217f9f7cb5315d15ef49d8841a7279b84fa0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4346, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}