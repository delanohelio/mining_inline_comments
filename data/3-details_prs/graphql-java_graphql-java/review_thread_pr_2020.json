{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNTI4Mjg3", "number": 2020, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0NToyMVrOFFSqgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0NToyMVrOFFSqgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDkyOTk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/execution/AbstractAsyncExecutionStrategy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0NToyMVrOIFvamw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjoyOTozNlrOIF6_zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg5MDY1MQ==", "bodyText": "I know this PR has already been merged and closed, and the issue is perfectly ignorable, but wanted to point out that sizing a map to an exact number of elements is generally a bad idea. With the default load factor of 0.75, sizing a map like this guarantees a need for resizing.", "url": "https://github.com/graphql-java/graphql-java/pull/2020#discussion_r542890651", "createdAt": "2020-12-14T22:45:21Z", "author": {"login": "kaqqao"}, "path": "src/main/java/graphql/execution/AbstractAsyncExecutionStrategy.java", "diffHunk": "@@ -32,7 +32,7 @@ public AbstractAsyncExecutionStrategy(DataFetcherExceptionHandler dataFetcherExc\n                 handleNonNullException(executionContext, overallResult, exception);\n                 return;\n             }\n-            Map<String, Object> resolvedValuesByField = new LinkedHashMap<>();\n+            Map<String, Object> resolvedValuesByField = new LinkedHashMap<>(fieldNames.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7741fe87179d1820bf69aad1805c1d3a33f41fe7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3ODUyMw==", "bodyText": "feedback is always welcome @kaqqao  :)\nThe intent of the PR wasn't to avoid resizing at all costs but rather to avoid  wasting memory for ExecutionResult. If size is not provided, even for a single element map, LinkedHashMap will allocate a 16-elements array (because DEFAULT_INITIAL_CAPACITY=16).\nMaybe it is possible to further improve it by requesting loadFactor=1.0?", "url": "https://github.com/graphql-java/graphql-java/pull/2020#discussion_r543078523", "createdAt": "2020-12-15T06:24:59Z", "author": {"login": "dfa1"}, "path": "src/main/java/graphql/execution/AbstractAsyncExecutionStrategy.java", "diffHunk": "@@ -32,7 +32,7 @@ public AbstractAsyncExecutionStrategy(DataFetcherExceptionHandler dataFetcherExc\n                 handleNonNullException(executionContext, overallResult, exception);\n                 return;\n             }\n-            Map<String, Object> resolvedValuesByField = new LinkedHashMap<>();\n+            Map<String, Object> resolvedValuesByField = new LinkedHashMap<>(fieldNames.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg5MDY1MQ=="}, "originalCommit": {"oid": "7741fe87179d1820bf69aad1805c1d3a33f41fe7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA4MDM5OQ==", "bodyText": "NB: in my project I'm overriding this method to use a custom ImmutableArrayMap (no hashing, order is guaranteed by just appending and uniqueness of the keys is guaranteed by GQL).  Why? Because in my project we just send back the ExecutionResult as is to the client and in this way we are not wasting memory.", "url": "https://github.com/graphql-java/graphql-java/pull/2020#discussion_r543080399", "createdAt": "2020-12-15T06:29:36Z", "author": {"login": "dfa1"}, "path": "src/main/java/graphql/execution/AbstractAsyncExecutionStrategy.java", "diffHunk": "@@ -32,7 +32,7 @@ public AbstractAsyncExecutionStrategy(DataFetcherExceptionHandler dataFetcherExc\n                 handleNonNullException(executionContext, overallResult, exception);\n                 return;\n             }\n-            Map<String, Object> resolvedValuesByField = new LinkedHashMap<>();\n+            Map<String, Object> resolvedValuesByField = new LinkedHashMap<>(fieldNames.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg5MDY1MQ=="}, "originalCommit": {"oid": "7741fe87179d1820bf69aad1805c1d3a33f41fe7"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4542, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}