{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODIxNzYx", "number": 1901, "title": "Lazy data fetcher values support for arguments and execution step info", "bodyText": "Why do work when many (most) data fetchers such as PropertyDataFetcher never used the arguments not all of the execution step info.\nLike the DataSelectionSetimpl - this is a lazy pattern", "createdAt": "2020-05-19T01:20:51Z", "url": "https://github.com/graphql-java/graphql-java/pull/1901", "merged": true, "mergeCommit": {"oid": "000eb5274793b7b41f863d3d96afcbb4e05646f8"}, "closed": true, "closedAt": "2020-05-22T05:43:16Z", "author": {"login": "bbakerman"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciqA0igH2gAyNDE5ODIxNzYxOjkxY2FjMDYzMDk2OTQ2NTNjYjY2NTYwYTRlYzQ5YWZjYjhkMDA1YWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjrXDoAFqTQxNjY1NTE0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "91cac06309694653cb66560a4ec49afcb8d005ab", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/91cac06309694653cb66560a4ec49afcb8d005ab", "committedDate": "2020-05-19T01:16:25Z", "message": "Lazy data fetcher values support for arguments and execution step info"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MDM4NjE0", "url": "https://github.com/graphql-java/graphql-java/pull/1901#pullrequestreview-414038614", "createdAt": "2020-05-19T01:22:03Z", "commit": {"oid": "91cac06309694653cb66560a4ec49afcb8d005ab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyMjowNFrOGXMmoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyMjowNFrOGXMmoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjkyOA==", "bodyText": "This helper code is called by PropertyDataFetcher who already does a null check - I know its a simple IF statement but still", "url": "https://github.com/graphql-java/graphql-java/pull/1901#discussion_r426976928", "createdAt": "2020-05-19T01:22:04Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/PropertyDataFetcherHelper.java", "diffHunk": "@@ -37,9 +37,6 @@ public static Object getPropertyValue(String propertyName, Object object, GraphQ\n     }\n \n     public static Object getPropertyValue(String propertyName, Object object, GraphQLType graphQLType, DataFetchingEnvironment environment) {\n-        if (object == null) {\n-            return null;\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91cac06309694653cb66560a4ec49afcb8d005ab"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MDM5MzE2", "url": "https://github.com/graphql-java/graphql-java/pull/1901#pullrequestreview-414039316", "createdAt": "2020-05-19T01:24:22Z", "commit": {"oid": "91cac06309694653cb66560a4ec49afcb8d005ab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyNDoyM1rOGXMo8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyNDoyM1rOGXMo8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NzUyMg==", "bodyText": "@andimarek @felipe-gdr  - thoughts on this code pattern??\nMy aim is to not lock - so possible that IF a DataFetchingEnv some how crossed threads then its possible that 2 reads cause 2 supplier reads.  But its lock free and I think MOST cases will be read on the thread that has the DF\nTo be pathological, you would need to read it on thread A and then read it again on thread B.", "url": "https://github.com/graphql-java/graphql-java/pull/1901#discussion_r426977522", "createdAt": "2020-05-19T01:24:23Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/util/MemoizedSupplier.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package graphql.util;\n+\n+import java.util.function.Supplier;\n+\n+import static graphql.Assert.assertNotNull;\n+\n+class MemoizedSupplier<T> implements Supplier<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91cac06309694653cb66560a4ec49afcb8d005ab"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjU1MTQ5", "url": "https://github.com/graphql-java/graphql-java/pull/1901#pullrequestreview-416655149", "createdAt": "2020-05-22T05:24:32Z", "commit": {"oid": "91cac06309694653cb66560a4ec49afcb8d005ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4449, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}