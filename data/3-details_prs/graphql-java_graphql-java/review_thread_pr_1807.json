{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyODg3NzI5", "number": 1807, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNjowNzoyMlrOD-fCPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNjowNzoyMlrOD-fCPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODQ2NzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/ParseAndValidateResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNjowNzoyMlrOGYnTXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo0NjoyOVrOGYuZAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2Mjk0Mg==", "bodyText": "can we make it a regular builder Pattern here?", "url": "https://github.com/graphql-java/graphql-java/pull/1807#discussion_r428462942", "createdAt": "2020-05-21T06:07:22Z", "author": {"login": "andimarek"}, "path": "src/main/java/graphql/ParseAndValidateResult.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package graphql;\n+\n+import graphql.execution.instrumentation.DocumentAndVariables;\n+import graphql.language.Document;\n+import graphql.parser.InvalidSyntaxException;\n+import graphql.validation.ValidationError;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A result object used in {@link graphql.ParseAndValidate} helper that indicates the outcomes of a parse\n+ * and validate operation.\n+ */\n+@PublicApi\n+public class ParseAndValidateResult {\n+\n+    private final Document document;\n+    private final Map<String, Object> variables;\n+    private final InvalidSyntaxException syntaxException;\n+    private final List<ValidationError> validationErrors;\n+\n+    private ParseAndValidateResult(Document document, Map<String, Object> variables, InvalidSyntaxException syntaxException, List<ValidationError> validationErrors) {\n+        this.document = document;\n+        this.variables = variables == null ? Collections.emptyMap() : variables;\n+        this.syntaxException = syntaxException;\n+        this.validationErrors = validationErrors;\n+    }\n+\n+    /**\n+     * @return true if there was a parse exception or the validation failed\n+     */\n+    public boolean isFailure() {\n+        return syntaxException != null || !validationErrors.isEmpty();\n+    }\n+\n+    /**\n+     * @return the parsed document or null if its syntactically invalid.\n+     */\n+    public Document getDocument() {\n+        return document;\n+    }\n+\n+    /**\n+     * @return the document variables or null if its syntactically invalid.\n+     */\n+    public Map<String, Object> getVariables() {\n+        return variables;\n+    }\n+\n+    /**\n+     * @return the parsed document and variables or null if its syntactically invalid.\n+     */\n+    public DocumentAndVariables getDocumentAndVariables() {\n+        if (document != null) {\n+            return DocumentAndVariables.newDocumentAndVariables().document(document).variables(variables).build();\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * @return the syntax exception or null if its syntactically valid.\n+     */\n+    public InvalidSyntaxException getSyntaxException() {\n+        return syntaxException;\n+    }\n+\n+    /**\n+     * @return a list of validation errors, which might be empty if its syntactically invalid.\n+     */\n+    public List<ValidationError> getValidationErrors() {\n+        return validationErrors;\n+    }\n+\n+    /**\n+     * A list of all the errors (parse and validate) that have occurred\n+     *\n+     * @return the errors that have occurred or empty list if there are none\n+     */\n+    public List<GraphQLError> getErrors() {\n+        List<GraphQLError> errors = new ArrayList<>();\n+        if (syntaxException != null) {\n+            errors.add(syntaxException.toInvalidSyntaxError());\n+        }\n+        errors.addAll(validationErrors);\n+        return errors;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f546119088f15f7d836f25c19c0bc41142034f5f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3OTA3Mg==", "bodyText": "done", "url": "https://github.com/graphql-java/graphql-java/pull/1807#discussion_r428579072", "createdAt": "2020-05-21T10:46:29Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/ParseAndValidateResult.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package graphql;\n+\n+import graphql.execution.instrumentation.DocumentAndVariables;\n+import graphql.language.Document;\n+import graphql.parser.InvalidSyntaxException;\n+import graphql.validation.ValidationError;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A result object used in {@link graphql.ParseAndValidate} helper that indicates the outcomes of a parse\n+ * and validate operation.\n+ */\n+@PublicApi\n+public class ParseAndValidateResult {\n+\n+    private final Document document;\n+    private final Map<String, Object> variables;\n+    private final InvalidSyntaxException syntaxException;\n+    private final List<ValidationError> validationErrors;\n+\n+    private ParseAndValidateResult(Document document, Map<String, Object> variables, InvalidSyntaxException syntaxException, List<ValidationError> validationErrors) {\n+        this.document = document;\n+        this.variables = variables == null ? Collections.emptyMap() : variables;\n+        this.syntaxException = syntaxException;\n+        this.validationErrors = validationErrors;\n+    }\n+\n+    /**\n+     * @return true if there was a parse exception or the validation failed\n+     */\n+    public boolean isFailure() {\n+        return syntaxException != null || !validationErrors.isEmpty();\n+    }\n+\n+    /**\n+     * @return the parsed document or null if its syntactically invalid.\n+     */\n+    public Document getDocument() {\n+        return document;\n+    }\n+\n+    /**\n+     * @return the document variables or null if its syntactically invalid.\n+     */\n+    public Map<String, Object> getVariables() {\n+        return variables;\n+    }\n+\n+    /**\n+     * @return the parsed document and variables or null if its syntactically invalid.\n+     */\n+    public DocumentAndVariables getDocumentAndVariables() {\n+        if (document != null) {\n+            return DocumentAndVariables.newDocumentAndVariables().document(document).variables(variables).build();\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * @return the syntax exception or null if its syntactically valid.\n+     */\n+    public InvalidSyntaxException getSyntaxException() {\n+        return syntaxException;\n+    }\n+\n+    /**\n+     * @return a list of validation errors, which might be empty if its syntactically invalid.\n+     */\n+    public List<ValidationError> getValidationErrors() {\n+        return validationErrors;\n+    }\n+\n+    /**\n+     * A list of all the errors (parse and validate) that have occurred\n+     *\n+     * @return the errors that have occurred or empty list if there are none\n+     */\n+    public List<GraphQLError> getErrors() {\n+        List<GraphQLError> errors = new ArrayList<>();\n+        if (syntaxException != null) {\n+            errors.add(syntaxException.toInvalidSyntaxError());\n+        }\n+        errors.addAll(validationErrors);\n+        return errors;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2Mjk0Mg=="}, "originalCommit": {"oid": "f546119088f15f7d836f25c19c0bc41142034f5f"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4597, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}