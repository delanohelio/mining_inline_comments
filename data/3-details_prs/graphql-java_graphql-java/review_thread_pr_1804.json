{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjA4MDYw", "number": 1804, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTo0MToyMVrODj9cXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjozNDo1MFrODlTgmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDMzNDM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/GraphqlErrorBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTo0MToyMlrOFwDoPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMTo0MToyMlrOFwDoPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzNTQyMQ==", "bodyText": "helps with debugging", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r385935421", "createdAt": "2020-02-28T21:41:22Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/GraphqlErrorBuilder.java", "diffHunk": "@@ -135,6 +135,11 @@ public ErrorClassification getErrorType() {\n         public Map<String, Object> getExtensions() {\n             return extensions;\n         }\n+\n+        @Override\n+        public String toString() {\n+            return message;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a415bde36945a6ff75e2a5337eeb7d5ab0e92613"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDQ1ODkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/execution/ExecutionContextBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjozODoyM1rOFwE0Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjozODoyM1rOFwE0Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1NDgxOQ==", "bodyText": "we need this because in subscroptions we start a new execution per streamed event", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r385954819", "createdAt": "2020-02-28T22:38:23Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/execution/ExecutionContextBuilder.java", "diffHunk": "@@ -172,6 +172,11 @@ public ExecutionContextBuilder valueUnboxer(ValueUnboxer valueUnboxer) {\n         return this;\n     }\n \n+    public ExecutionContextBuilder resetErrors() {\n+        this.errors.clear();\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a415bde36945a6ff75e2a5337eeb7d5ab0e92613"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDQ1OTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/execution/SubscriptionExecutionStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjozODo1M1rOFwE0ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjozODo1M1rOFwE0ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1NDk3NA==", "bodyText": "We reset errors so that we have errors per streamed event BUT we use the same other execution context", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r385954974", "createdAt": "2020-02-28T22:38:53Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/execution/SubscriptionExecutionStrategy.java", "diffHunk": "@@ -92,15 +92,16 @@ public SubscriptionExecutionStrategy(DataFetcherExceptionHandler dataFetcherExce\n      */\n \n     private CompletableFuture<ExecutionResult> executeSubscriptionEvent(ExecutionContext executionContext, ExecutionStrategyParameters parameters, Object eventPayload) {\n-        ExecutionContext newExecutionContext = executionContext.transform(builder -> builder.root(eventPayload));\n+        ExecutionContext newExecutionContext = executionContext.transform(builder -> builder\n+                .root(eventPayload)\n+                .resetErrors()\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a415bde36945a6ff75e2a5337eeb7d5ab0e92613"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDQ2MDM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/execution/SubscriptionExecutionStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjozOToxNFrOFwE06w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjozOToxNFrOFwE06w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1NTA1MQ==", "bodyText": "The fix here was to called unboxPossibleDataFetcherResult", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r385955051", "createdAt": "2020-02-28T22:39:14Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/execution/SubscriptionExecutionStrategy.java", "diffHunk": "@@ -92,15 +92,16 @@ public SubscriptionExecutionStrategy(DataFetcherExceptionHandler dataFetcherExce\n      */\n \n     private CompletableFuture<ExecutionResult> executeSubscriptionEvent(ExecutionContext executionContext, ExecutionStrategyParameters parameters, Object eventPayload) {\n-        ExecutionContext newExecutionContext = executionContext.transform(builder -> builder.root(eventPayload));\n+        ExecutionContext newExecutionContext = executionContext.transform(builder -> builder\n+                .root(eventPayload)\n+                .resetErrors()\n+        );\n \n         ExecutionStrategyParameters newParameters = firstFieldOfSubscriptionSelection(parameters);\n-        FetchedValue fetchedValue = FetchedValue.newFetchedValue().fetchedValue(eventPayload)\n-                .rawFetchedValue(eventPayload)\n-                .localContext(parameters.getLocalContext())\n-                .build();\n-\n-        return completeField(newExecutionContext, newParameters, fetchedValue).getFieldValue()\n+        FetchedValue fetchedValue = unboxPossibleDataFetcherResult(newExecutionContext, parameters, eventPayload);\n+        FieldValueInfo fieldValueInfo = completeField(newExecutionContext, newParameters, fetchedValue);\n+        return fieldValueInfo\n+                .getFieldValue()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a415bde36945a6ff75e2a5337eeb7d5ab0e92613"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDQ2MTg4OnYy", "diffSide": "RIGHT", "path": "src/test/groovy/graphql/execution/SubscriptionExecutionStrategyTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjo0MDowOVrOFwE16g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjo0MDowOVrOFwE16g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1NTMwNg==", "bodyText": "A test of DataFectherResult + errors at the Publisher level and also at each streamed event level and also errors on sub levels", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r385955306", "createdAt": "2020-02-28T22:40:09Z", "author": {"login": "bbakerman"}, "path": "src/test/groovy/graphql/execution/SubscriptionExecutionStrategyTest.groovy", "diffHunk": "@@ -335,4 +351,85 @@ class SubscriptionExecutionStrategyTest extends Specification {\n             }\n         }\n     }\n+\n+    def \"subscriptions can return DataFetcher results with errors\"() {\n+\n+        //\n+        // this tests that we can wrap the Publisher in a DataFetcherResult AND that the return types of the Publisher\n+        // can themselves be DataFetcherResult objects - hence DataFetcherResult<Publisher<DataFetcherResult<Message>>>\n+        // in this case\n+        DataFetcher newMessageDF = new DataFetcher() {\n+            @Override\n+            Object get(DataFetchingEnvironment environment) {\n+                def objectMaker = { int index ->\n+                    def message = new Message(\"sender\" + index, \"text\" + index)\n+                    GraphQLError error = null\n+                    if (index == 1) {\n+                        error = mkError(\"1 is the loneliest number that you'll ever know\")\n+                    }\n+                    // wrap inner result in DataFetcherResult\n+                    def resultBuilder = DataFetcherResult.newResult().data(message).localContext(index)\n+                    if (error != null) {\n+                        resultBuilder.error(error)\n+                    }\n+                    return resultBuilder.build()\n+                }\n+                def publisher = new ReactiveStreamsObjectPublisher(10, objectMaker)\n+                // we also use DFR here to wrap the publisher to show it can work\n+                return DataFetcherResult.newResult().data(publisher).error(mkError(\"The top level field publisher can have errors\")).build()\n+            }\n+\n+        }\n+\n+        DataFetcher senderDF = new DataFetcher() {\n+            @Override\n+            Object get(DataFetchingEnvironment environment) throws Exception {\n+                Message msg = environment.getSource()\n+                if (msg.sender == \"sender1\") {\n+                    return DataFetcherResult.newResult().data(msg.sender).error(mkError(\"Sub level fields can have errors\")).build()\n+                }\n+                return msg.sender\n+            }\n+        }\n+\n+        GraphQL graphQL = buildSubscriptionQL(newMessageDF, senderDF, PropertyDataFetcher.fetching(\"text\"))\n+\n+        def executionInput = ExecutionInput.newExecutionInput().query(\"\"\"\n+            subscription NewMessages {\n+              newMessage(roomId: 123) {\n+                sender\n+                text\n+              }\n+            }\n+        \"\"\").build()\n+\n+        when:\n+\n+        def executionResult = graphQL.execute(executionInput)\n+\n+        Publisher<ExecutionResult> msgStream = executionResult.getData()\n+\n+        def capturingSubscriber = new CapturingSubscriber<ExecutionResult>()\n+        msgStream.subscribe(capturingSubscriber)\n+\n+        then:\n+        Awaitility.await().untilTrue(capturingSubscriber.isDone())\n+\n+        executionResult.errors.size() == 1\n+        executionResult.errors[0].message == \"The top level field publisher can have errors\"\n+\n+        def messages = capturingSubscriber.events\n+        messages.size() == 10\n+        for (int i = 0; i < messages.size(); i++) {\n+            def message = messages[i]\n+            // error handling on publisher events\n+            if (i == 1) {\n+                assert message.errors[0].message == \"1 is the loneliest number that you'll ever know\"\n+                assert message.errors[1].message == \"Sub level fields can have errors\"\n+            } else {\n+                assert message.errors.isEmpty(), \"There should be no errors present\"\n+            }\n+            assert message.data == [\"newMessage\": [sender: \"sender\" + i, text: \"text\" + i]]\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a415bde36945a6ff75e2a5337eeb7d5ab0e92613"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTI1MzcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/execution/Execution.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMjo1NDoxM1rOFwLUPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMjo1NDoxM1rOFwLUPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2MTM3Mw==", "bodyText": "We need this later in subscriptions and the instrumentDataFetcherResult calls.   Its nominally useful as well but execution context unpacks it any way", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r386061373", "createdAt": "2020-02-29T22:54:13Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/execution/Execution.java", "diffHunk": "@@ -96,6 +96,7 @@ public Execution(ExecutionStrategy queryStrategy, ExecutionStrategy mutationStra\n                 .cacheControl(executionInput.getCacheControl())\n                 .locale(executionInput.getLocale())\n                 .valueUnboxer(valueUnboxer)\n+                .executionInput(executionInput)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c180847177ae1c1df1e45fccd2fd4f9e2c9dbd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTI1MzgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/execution/ExecutionContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMjo1NDo0NlrOFwLUSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMjo1NDo0NlrOFwLUSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2MTM4Nw==", "bodyText": "After 18 parameters its time for this pattern", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r386061387", "createdAt": "2020-02-29T22:54:46Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/execution/ExecutionContext.java", "diffHunk": "@@ -46,33 +48,40 @@\n     private final Locale locale;\n     private final DeferSupport deferSupport = new DeferSupport();\n     private final ValueUnboxer valueUnboxer;\n-\n-    ExecutionContext(Instrumentation instrumentation, ExecutionId executionId, GraphQLSchema graphQLSchema, InstrumentationState instrumentationState, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, ExecutionStrategy subscriptionStrategy, Map<String, FragmentDefinition> fragmentsByName, Document document, OperationDefinition operationDefinition, Map<String, Object> variables, Object context, Object root, DataLoaderRegistry dataLoaderRegistry, CacheControl cacheControl, Locale locale, List<GraphQLError> startingErrors, ValueUnboxer valueUnboxer) {\n-        this.graphQLSchema = graphQLSchema;\n-        this.executionId = executionId;\n-        this.instrumentationState = instrumentationState;\n-        this.queryStrategy = queryStrategy;\n-        this.mutationStrategy = mutationStrategy;\n-        this.subscriptionStrategy = subscriptionStrategy;\n-        this.fragmentsByName = Collections.unmodifiableMap(fragmentsByName);\n-        this.variables = Collections.unmodifiableMap(variables);\n-        this.document = document;\n-        this.operationDefinition = operationDefinition;\n-        this.context = context;\n-        this.root = root;\n-        this.instrumentation = instrumentation;\n-        this.dataLoaderRegistry = dataLoaderRegistry;\n-        this.cacheControl = cacheControl;\n-        this.locale = locale;\n-        this.valueUnboxer = valueUnboxer;\n-        this.errors.addAll(startingErrors);\n+    private final ExecutionInput executionInput;\n+\n+    @Internal\n+    ExecutionContext(ExecutionContextBuilder builder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c180847177ae1c1df1e45fccd2fd4f9e2c9dbd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTI1NDg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/execution/SubscriptionExecutionStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMjo1Njo1MVrOFwLUww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMjo1Njo1MVrOFwLUww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2MTUwNw==", "bodyText": "Better instrumentation of subscription queries", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r386061507", "createdAt": "2020-02-29T22:56:51Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/execution/SubscriptionExecutionStrategy.java", "diffHunk": "@@ -34,22 +44,27 @@ public SubscriptionExecutionStrategy(DataFetcherExceptionHandler dataFetcherExce\n     @Override\n     public CompletableFuture<ExecutionResult> execute(ExecutionContext executionContext, ExecutionStrategyParameters parameters) throws NonNullableFieldWasNullException {\n \n+        Instrumentation instrumentation = executionContext.getInstrumentation();\n+        InstrumentationExecutionStrategyParameters instrumentationParameters = new InstrumentationExecutionStrategyParameters(executionContext, parameters);\n+        ExecutionStrategyInstrumentationContext executionStrategyCtx = instrumentation.beginExecutionStrategy(instrumentationParameters);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c180847177ae1c1df1e45fccd2fd4f9e2c9dbd"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTI1NTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/execution/SubscriptionExecutionStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMjo1ODoyNFrOFwLU_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMjo1ODoyNFrOFwLU_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2MTU2Ng==", "bodyText": "This is weird but needed.  We want a execution step info here for the instrumentation - the soon to be called completeValue call will do something similar soon but we need this to descrive the \"beginSubscribedFieldEvent\" in instrumentation terms", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r386061566", "createdAt": "2020-02-29T22:58:24Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/execution/SubscriptionExecutionStrategy.java", "diffHunk": "@@ -125,4 +158,10 @@ private ExecutionStrategyParameters firstFieldOfSubscriptionSelection(ExecutionS\n         return parameters.transform(builder -> builder.field(firstField).path(fieldPath));\n     }\n \n+    private ExecutionStepInfo createSubscribedFieldStepInfo(ExecutionContext executionContext, ExecutionStrategyParameters parameters) {\n+        Field field = parameters.getField().getSingleField();\n+        GraphQLObjectType parentType = (GraphQLObjectType) parameters.getExecutionStepInfo().getUnwrappedNonNullType();\n+        GraphQLFieldDefinition fieldDef = getFieldDef(executionContext.getGraphQLSchema(), parentType, field);\n+        return createExecutionStepInfo(executionContext, parameters, fieldDef, parentType);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c180847177ae1c1df1e45fccd2fd4f9e2c9dbd"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTI1NTYzOnYy", "diffSide": "RIGHT", "path": "src/test/groovy/graphql/execution/ExecutionStrategyTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMjo1OTowN1rOFwLVGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMjo1OTowN1rOFwLVGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2MTU5Mw==", "bodyText": "code fix up of change in constructor", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r386061593", "createdAt": "2020-02-29T22:59:07Z", "author": {"login": "bbakerman"}, "path": "src/test/groovy/graphql/execution/ExecutionStrategyTest.groovy", "diffHunk": "@@ -60,11 +60,21 @@ class ExecutionStrategyTest extends Specification {\n     def buildContext(GraphQLSchema schema = null) {\n         ExecutionId executionId = ExecutionId.from(\"executionId123\")\n         def variables = [arg1: \"value1\"]\n-        new ExecutionContext(SimpleInstrumentation.INSTANCE, executionId, schema ?: StarWarsSchema.starWarsSchema, null,\n-                executionStrategy, executionStrategy, executionStrategy,\n-                [:], null, null,\n-                variables, \"context\", \"root\", new DataLoaderRegistry(),\n-                null, Locale.getDefault(), Collections.emptyList(), ValueUnboxer.DEFAULT)\n+        def builder = ExecutionContextBuilder.newExecutionContextBuilder()\n+                .instrumentation(SimpleInstrumentation.INSTANCE)\n+                .executionId(executionId)\n+                .graphQLSchema(schema ?: StarWarsSchema.starWarsSchema)\n+                .queryStrategy(executionStrategy)\n+                .mutationStrategy(executionStrategy)\n+                .subscriptionStrategy(executionStrategy)\n+                .variables(variables)\n+                .context(\"context\")\n+                .root(\"root\")\n+                .dataLoaderRegistry(new DataLoaderRegistry())\n+                .locale(Locale.getDefault())\n+                .valueUnboxer(ValueUnboxer.DEFAULT)\n+\n+        new ExecutionContext(builder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c180847177ae1c1df1e45fccd2fd4f9e2c9dbd"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTI1NTgyOnYy", "diffSide": "RIGHT", "path": "src/test/groovy/graphql/execution/pubsub/ReactiveStreamsObjectPublisher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMjo1OTo0N1rOFwLVLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMjo1OTo0N1rOFwLVLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2MTYxNA==", "bodyText": "A reactive stream thats a little more generic", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r386061614", "createdAt": "2020-02-29T22:59:47Z", "author": {"login": "bbakerman"}, "path": "src/test/groovy/graphql/execution/pubsub/ReactiveStreamsObjectPublisher.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package graphql.execution.pubsub;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.example.unicast.AsyncIterablePublisher;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.function.Function;\n+\n+/**\n+ * This example publisher will create count \"objects\" and then terminate. Its\n+ * uses the reactive streams TCK as its implementation\n+ */\n+public class ReactiveStreamsObjectPublisher implements Publisher<Object> {\n+\n+    private final AsyncIterablePublisher<Object> iterablePublisher;\n+\n+    public ReactiveStreamsObjectPublisher(final int count, Function<Integer, Object> objectMaker) {\n+        Iterable<Object> iterable = mkIterable(count, objectMaker);\n+        iterablePublisher = new AsyncIterablePublisher<>(iterable, ForkJoinPool.commonPool());\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super Object> s) {\n+        iterablePublisher.subscribe(s);\n+    }\n+\n+    private static Iterable<Object> mkIterable(int count, Function<Integer, Object> objectMaker) {\n+        return () -> new Iterator<Object>() {\n+            private int at = 0;\n+\n+            @Override\n+            public boolean hasNext() {\n+                return at < count;\n+            }\n+\n+            @Override\n+            public Object next() {\n+                Object message = objectMaker.apply(at);\n+                at++;\n+                return message;\n+            }\n+        };\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c180847177ae1c1df1e45fccd2fd4f9e2c9dbd"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDQyOTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/execution/ExecutionContextBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjozMToxN1rOFyHwaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjozMToxN1rOFyHwaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEwMDIwMQ==", "bodyText": "nit: use this on other assignments for consistency", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r388100201", "createdAt": "2020-03-05T06:31:17Z", "author": {"login": "felipe-gdr"}, "path": "src/main/java/graphql/execution/ExecutionContextBuilder.java", "diffHunk": "@@ -84,6 +85,7 @@ public ExecutionContextBuilder() {\n         locale = other.getLocale();\n         errors = new ArrayList<>(other.getErrors());\n         valueUnboxer = other.getValueUnboxer();\n+        this.executionInput = other.getExecutionInput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e035734cda115a8c77e939a4fed91c893d0aa95"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDQzMzAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/execution/instrumentation/Instrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjozMzoyMFrOFyHyZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjozMzoyMFrOFyHyZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEwMDcxMA==", "bodyText": "nit: typo \"and its needs to be mapped\" should be \"and it needs to be mapped\"", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r388100710", "createdAt": "2020-03-05T06:33:20Z", "author": {"login": "felipe-gdr"}, "path": "src/main/java/graphql/execution/instrumentation/Instrumentation.java", "diffHunk": "@@ -114,6 +114,17 @@ default InstrumentationState createState(InstrumentationCreateStateParameters pa\n      */\n     DeferredFieldInstrumentationContext beginDeferredField(InstrumentationDeferredFieldParameters parameters);\n \n+    /**\n+     * This is called each time a subscription field produces a new reactive stream event value and its needs to be mapped over via the graphql field subselection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e035734cda115a8c77e939a4fed91c893d0aa95"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDQzNTQ1OnYy", "diffSide": "RIGHT", "path": "src/test/groovy/graphql/execution/pubsub/ReactiveStreamsObjectPublisher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjozNDo1MFrOFyHz8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjozNDo1MFrOFyHz8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEwMTEwNg==", "bodyText": "typo: \"Its uses\" should be \"It uses\"", "url": "https://github.com/graphql-java/graphql-java/pull/1804#discussion_r388101106", "createdAt": "2020-03-05T06:34:50Z", "author": {"login": "felipe-gdr"}, "path": "src/test/groovy/graphql/execution/pubsub/ReactiveStreamsObjectPublisher.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package graphql.execution.pubsub;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.example.unicast.AsyncIterablePublisher;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.function.Function;\n+\n+/**\n+ * This example publisher will create count \"objects\" and then terminate. Its", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e035734cda115a8c77e939a4fed91c893d0aa95"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4595, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}