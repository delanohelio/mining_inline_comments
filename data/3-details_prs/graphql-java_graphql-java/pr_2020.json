{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNTI4Mjg3", "number": 2020, "title": "pre-sizing internal data structures", "bodyText": "Helps to reduce garbage collector pressure and memory usage in general by avoiding some re-allocations of j.u.ArrayList and j.u.LinkedHashMap.\nFollowing discussion in https://spectrum.chat/graphql-java/general/does-there-exist-a-more-efficient-implemantion-of-asyncexecutionstrategy~93dad126-8b9f-45fc-aaec-9dc04ddae4bc looks like most of our results are between 1 and 6 fields. By default LinkedHashMap is allocating 16 elements. With this change I would like to cut some memory waste and reallocations.", "createdAt": "2020-09-05T14:32:05Z", "url": "https://github.com/graphql-java/graphql-java/pull/2020", "merged": true, "mergeCommit": {"oid": "5c5798e2683639d1faeaa365b97226924a3a9b1a"}, "closed": true, "closedAt": "2020-09-08T04:53:08Z", "author": {"login": "dfa1"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdF6nBDAH2gAyNDgwNTI4Mjg3OjQ2MmJiMWI4NjExZGQ3ZDI3ZWE4NjJmMjY5MmVjMjAxMTM5N2QxYzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmNvAaAFqTU1MTk1NzE0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "462bb1b8611dd7d27ea862f2692ec2011397d1c1", "author": {"user": {"login": "dfa1", "name": "Davide Angelocola"}}, "url": "https://github.com/graphql-java/graphql-java/commit/462bb1b8611dd7d27ea862f2692ec2011397d1c1", "committedDate": "2020-09-05T14:23:58Z", "message": "pre-sizing internal data structures\n\nHelps to reduce garbage collector pressure and memory usage in general by avoiding some re-allocations of j.u.ArrayList and j.u.LinkedHashMap."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7741fe87179d1820bf69aad1805c1d3a33f41fe7", "author": {"user": {"login": "dfa1", "name": "Davide Angelocola"}}, "url": "https://github.com/graphql-java/graphql-java/commit/7741fe87179d1820bf69aad1805c1d3a33f41fe7", "committedDate": "2020-09-05T18:33:01Z", "message": "redundant addAll()/putAll()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzA5MDMx", "url": "https://github.com/graphql-java/graphql-java/pull/2020#pullrequestreview-483709031", "createdAt": "2020-09-07T21:04:12Z", "commit": {"oid": "7741fe87179d1820bf69aad1805c1d3a33f41fe7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzkzNDkx", "url": "https://github.com/graphql-java/graphql-java/pull/2020#pullrequestreview-483793491", "createdAt": "2020-09-08T04:53:21Z", "commit": {"oid": "7741fe87179d1820bf69aad1805c1d3a33f41fe7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxOTU3MTQ0", "url": "https://github.com/graphql-java/graphql-java/pull/2020#pullrequestreview-551957144", "createdAt": "2020-12-14T22:45:21Z", "commit": {"oid": "7741fe87179d1820bf69aad1805c1d3a33f41fe7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0NToyMVrOIFvamw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjo0NToyMVrOIFvamw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg5MDY1MQ==", "bodyText": "I know this PR has already been merged and closed, and the issue is perfectly ignorable, but wanted to point out that sizing a map to an exact number of elements is generally a bad idea. With the default load factor of 0.75, sizing a map like this guarantees a need for resizing.", "url": "https://github.com/graphql-java/graphql-java/pull/2020#discussion_r542890651", "createdAt": "2020-12-14T22:45:21Z", "author": {"login": "kaqqao"}, "path": "src/main/java/graphql/execution/AbstractAsyncExecutionStrategy.java", "diffHunk": "@@ -32,7 +32,7 @@ public AbstractAsyncExecutionStrategy(DataFetcherExceptionHandler dataFetcherExc\n                 handleNonNullException(executionContext, overallResult, exception);\n                 return;\n             }\n-            Map<String, Object> resolvedValuesByField = new LinkedHashMap<>();\n+            Map<String, Object> resolvedValuesByField = new LinkedHashMap<>(fieldNames.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7741fe87179d1820bf69aad1805c1d3a33f41fe7"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4348, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}