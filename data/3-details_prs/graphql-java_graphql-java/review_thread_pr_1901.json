{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODIxNzYx", "number": 1901, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyMjowNFrOD9mrDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyNDoyM1rOD9mskw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTIzMzQxOnYy", "diffSide": "LEFT", "path": "src/main/java/graphql/schema/PropertyDataFetcherHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyMjowNFrOGXMmoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyMjowNFrOGXMmoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjkyOA==", "bodyText": "This helper code is called by PropertyDataFetcher who already does a null check - I know its a simple IF statement but still", "url": "https://github.com/graphql-java/graphql-java/pull/1901#discussion_r426976928", "createdAt": "2020-05-19T01:22:04Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/PropertyDataFetcherHelper.java", "diffHunk": "@@ -37,9 +37,6 @@ public static Object getPropertyValue(String propertyName, Object object, GraphQ\n     }\n \n     public static Object getPropertyValue(String propertyName, Object object, GraphQLType graphQLType, DataFetchingEnvironment environment) {\n-        if (object == null) {\n-            return null;\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91cac06309694653cb66560a4ec49afcb8d005ab"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTIzNzMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/util/MemoizedSupplier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyNDoyM1rOGXMo8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyNDoyM1rOGXMo8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NzUyMg==", "bodyText": "@andimarek @felipe-gdr  - thoughts on this code pattern??\nMy aim is to not lock - so possible that IF a DataFetchingEnv some how crossed threads then its possible that 2 reads cause 2 supplier reads.  But its lock free and I think MOST cases will be read on the thread that has the DF\nTo be pathological, you would need to read it on thread A and then read it again on thread B.", "url": "https://github.com/graphql-java/graphql-java/pull/1901#discussion_r426977522", "createdAt": "2020-05-19T01:24:23Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/util/MemoizedSupplier.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package graphql.util;\n+\n+import java.util.function.Supplier;\n+\n+import static graphql.Assert.assertNotNull;\n+\n+class MemoizedSupplier<T> implements Supplier<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91cac06309694653cb66560a4ec49afcb8d005ab"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4621, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}