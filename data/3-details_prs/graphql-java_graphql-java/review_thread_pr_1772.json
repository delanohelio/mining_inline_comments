{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NjI0NTk2", "number": 1772, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoyOTozMlrOD-gI2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzozMzoxMVrOD-gMsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODY0ODU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/Directives.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoyOTozMlrOGYpCdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoyOTozMlrOGYpCdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5MTM4Mg==", "bodyText": "spillin - Scalar (not Scala - never Scala)", "url": "https://github.com/graphql-java/graphql-java/pull/1772#discussion_r428491382", "createdAt": "2020-05-21T07:29:32Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/Directives.java", "diffHunk": "@@ -64,11 +65,23 @@\n             .description(\"Marks the field or enum value as deprecated\")\n             .argument(newArgument()\n                     .name(\"reason\")\n-                    .type(nonNull(GraphQLString))\n+                    .type(GraphQLString)\n                     .defaultValue(\"No longer supported\")\n                     .description(\"The reason for the deprecation\"))\n             .validLocations(FIELD_DEFINITION, ENUM_VALUE)\n             .build();\n \n+    /**\n+     * The \"specifiedBy\" directive allows to provide a specification URL for a Scala", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6dd4d0f34221dad88d647c1649e5db8e6cab66"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODY1Mjk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/schema/GraphQLScalarType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzozMTowNFrOGYpE7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzozMTowNFrOGYpE7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5MjAxNA==", "bodyText": "one version we need to remove the old constructors!", "url": "https://github.com/graphql-java/graphql-java/pull/1772#discussion_r428492014", "createdAt": "2020-05-21T07:31:04Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/GraphQLScalarType.java", "diffHunk": "@@ -73,10 +74,16 @@ public GraphQLScalarType(String name, String description, Coercing coercing) {\n     @Internal\n     @Deprecated\n     public GraphQLScalarType(String name, String description, Coercing coercing, List<GraphQLDirective> directives, ScalarTypeDefinition definition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6dd4d0f34221dad88d647c1649e5db8e6cab66"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODY1ODQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/schema/idl/SchemaGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzozMzoxMVrOGYpITA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODoyMzowOVrOGYqcYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5Mjg3Ng==", "bodyText": "Thought - Will it always be non null arg values?", "url": "https://github.com/graphql-java/graphql-java/pull/1772#discussion_r428492876", "createdAt": "2020-05-21T07:33:11Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/idl/SchemaGenerator.java", "diffHunk": "@@ -694,17 +697,32 @@ private GraphQLScalarType buildScalar(BuildContext buildCtx, ScalarTypeDefinitio\n             scalar = scalar.transform(builder -> builder\n                     .definition(typeDefinition)\n                     .comparatorRegistry(buildCtx.getComparatorRegistry())\n-                    .withDirectives(\n-                            buildDirectives(typeDefinition.getDirectives(),\n-                                    directivesOf(extensions), SCALAR, buildCtx.getDirectiveDefinitions(), buildCtx.getComparatorRegistry())\n+                    .specifiedByUrl(getSpecifiedByUrl(typeDefinition, extensions))\n+                    .withDirectives(buildDirectives(\n+                            typeDefinition.getDirectives(),\n+                            directivesOf(extensions),\n+                            SCALAR,\n+                            buildCtx.getDirectiveDefinitions(),\n+                            buildCtx.getComparatorRegistry())\n                     ));\n-            //\n-            // only allow modification of custom scalars\n             scalar = directiveBehaviour.onScalar(scalar, buildCtx.mkBehaviourParams());\n         }\n         return scalar;\n     }\n \n+    private String getSpecifiedByUrl(ScalarTypeDefinition scalarTypeDefinition, List<ScalarTypeExtensionDefinition> extensions) {\n+        List<Directive> allDirectives = new ArrayList<>(scalarTypeDefinition.getDirectives());\n+        extensions.forEach(extension -> allDirectives.addAll(extension.getDirectives()));\n+        Optional<Directive> specifiedByDirective = FpKit.findOne(allDirectives,\n+                directiveDefinition -> directiveDefinition.getName().equals(Directives.SpecifiedByDirective.getName()));\n+        if (!specifiedByDirective.isPresent()) {\n+            return null;\n+        }\n+        Argument urlArgument = specifiedByDirective.get().getArgument(\"url\");\n+        StringValue url = (StringValue) urlArgument.getValue();\n+        return url.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6dd4d0f34221dad88d647c1649e5db8e6cab66"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUxNDQwMQ==", "bodyText": "yes it is: url is required non null", "url": "https://github.com/graphql-java/graphql-java/pull/1772#discussion_r428514401", "createdAt": "2020-05-21T08:23:09Z", "author": {"login": "andimarek"}, "path": "src/main/java/graphql/schema/idl/SchemaGenerator.java", "diffHunk": "@@ -694,17 +697,32 @@ private GraphQLScalarType buildScalar(BuildContext buildCtx, ScalarTypeDefinitio\n             scalar = scalar.transform(builder -> builder\n                     .definition(typeDefinition)\n                     .comparatorRegistry(buildCtx.getComparatorRegistry())\n-                    .withDirectives(\n-                            buildDirectives(typeDefinition.getDirectives(),\n-                                    directivesOf(extensions), SCALAR, buildCtx.getDirectiveDefinitions(), buildCtx.getComparatorRegistry())\n+                    .specifiedByUrl(getSpecifiedByUrl(typeDefinition, extensions))\n+                    .withDirectives(buildDirectives(\n+                            typeDefinition.getDirectives(),\n+                            directivesOf(extensions),\n+                            SCALAR,\n+                            buildCtx.getDirectiveDefinitions(),\n+                            buildCtx.getComparatorRegistry())\n                     ));\n-            //\n-            // only allow modification of custom scalars\n             scalar = directiveBehaviour.onScalar(scalar, buildCtx.mkBehaviourParams());\n         }\n         return scalar;\n     }\n \n+    private String getSpecifiedByUrl(ScalarTypeDefinition scalarTypeDefinition, List<ScalarTypeExtensionDefinition> extensions) {\n+        List<Directive> allDirectives = new ArrayList<>(scalarTypeDefinition.getDirectives());\n+        extensions.forEach(extension -> allDirectives.addAll(extension.getDirectives()));\n+        Optional<Directive> specifiedByDirective = FpKit.findOne(allDirectives,\n+                directiveDefinition -> directiveDefinition.getName().equals(Directives.SpecifiedByDirective.getName()));\n+        if (!specifiedByDirective.isPresent()) {\n+            return null;\n+        }\n+        Argument urlArgument = specifiedByDirective.get().getArgument(\"url\");\n+        StringValue url = (StringValue) urlArgument.getValue();\n+        return url.getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5Mjg3Ng=="}, "originalCommit": {"oid": "6c6dd4d0f34221dad88d647c1649e5db8e6cab66"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4580, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}