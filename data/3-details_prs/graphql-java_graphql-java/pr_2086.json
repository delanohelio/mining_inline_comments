{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMjAyNTcz", "number": 2086, "title": "add shaded guava collections and use it", "bodyText": "This is an internal change only: we are using guava Immutable collections now in a lot places for more performance and more clarity.", "createdAt": "2020-10-29T11:21:02Z", "url": "https://github.com/graphql-java/graphql-java/pull/2086", "merged": true, "mergeCommit": {"oid": "f6f9baeb30e36042087a78170286a27c6ead9ee7"}, "closed": true, "closedAt": "2020-11-10T09:33:57Z", "author": {"login": "andimarek"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXQWnygH2gAyNTEyMjAyNTczOjdiMzlkOGYyZWQwZjZmODFjMmY0NGZhZGJlMzZmNTkzNGQxYWM5NmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbF7esgH2gAyNTEyMjAyNTczOmQ5ZTBmNDRkNzM5ZjdlMmJkNThlNzhjNGE0M2UwNzVkZTFhOTljZTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7b39d8f2ed0f6f81c2f44fadbe36f5934d1ac96d", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/7b39d8f2ed0f6f81c2f44fadbe36f5934d1ac96d", "committedDate": "2020-10-29T11:20:41Z", "message": "add shaded guava collections and use it in Field"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMDk3MTIx", "url": "https://github.com/graphql-java/graphql-java/pull/2086#pullrequestreview-520097121", "createdAt": "2020-10-29T21:21:34Z", "commit": {"oid": "7b39d8f2ed0f6f81c2f44fadbe36f5934d1ac96d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyMTozNFrOHqvLQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyMTozNFrOHqvLQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NTE2OQ==", "bodyText": "The next level would be for input methods to TAKE immutablke lists.  eg here we throw the responsibility back onto the caller to give us an immutable list.\nThoughts?\nIf we did this, then com.google.collect.ImmutableList becomes implicit API.", "url": "https://github.com/graphql-java/graphql-java/pull/2086#discussion_r514575169", "createdAt": "2020-10-29T21:21:34Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/language/Field.java", "diffHunk": "@@ -257,13 +257,13 @@ public Builder alias(String alias) {\n         }\n \n         public Builder arguments(List<Argument> arguments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b39d8f2ed0f6f81c2f44fadbe36f5934d1ac96d"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMDk3MjY1", "url": "https://github.com/graphql-java/graphql-java/pull/2086#pullrequestreview-520097265", "createdAt": "2020-10-29T21:21:49Z", "commit": {"oid": "7b39d8f2ed0f6f81c2f44fadbe36f5934d1ac96d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyMTo1MFrOHqvLuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyMTo1MFrOHqvLuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NTI4OQ==", "bodyText": "didnt need base??", "url": "https://github.com/graphql-java/graphql-java/pull/2086#discussion_r514575289", "createdAt": "2020-10-29T21:21:50Z", "author": {"login": "bbakerman"}, "path": "build.gradle", "diffHunk": "@@ -83,6 +88,26 @@ dependencies {\n     testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.21'\n }\n \n+shadowJar {\n+    minimize()\n+    archiveClassifier.set('')\n+    configurations = [project.configurations.compileClasspath]\n+    relocate('com.google.common', 'graphql.com.google.common') {\n+        include 'com.google.common.collect.*'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b39d8f2ed0f6f81c2f44fadbe36f5934d1ac96d"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0cd2bf32ac358b9a12b57f1f089e57ded04e79f", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/e0cd2bf32ac358b9a12b57f1f089e57ded04e79f", "committedDate": "2020-11-01T01:07:59Z", "message": "remove not needed guava files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cccba5640b0a63d4ceb8d83d8cba0b52ad47298c", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/cccba5640b0a63d4ceb8d83d8cba0b52ad47298c", "committedDate": "2020-11-01T08:39:07Z", "message": "use immutable collections more and add Util class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82f4c6dd4d0a65661de3ab622ed218efce0f0172", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/82f4c6dd4d0a65661de3ab622ed218efce0f0172", "committedDate": "2020-11-02T21:17:42Z", "message": "simplify build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a834b78163eec018da1d985f9ade5bb2b63bb771", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/a834b78163eec018da1d985f9ade5bb2b63bb771", "committedDate": "2020-11-02T21:28:15Z", "message": "add documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fda0f999c51567ead558a4f97ba7decaba341131", "author": {"user": {"login": "andimarek", "name": "Andreas Marek"}}, "url": "https://github.com/graphql-java/graphql-java/commit/fda0f999c51567ead558a4f97ba7decaba341131", "committedDate": "2020-11-02T22:08:37Z", "message": "add Immutable map which allows null values\nuse more immutable collections"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDgzMTA1", "url": "https://github.com/graphql-java/graphql-java/pull/2086#pullrequestreview-522083105", "createdAt": "2020-11-02T22:42:00Z", "commit": {"oid": "fda0f999c51567ead558a4f97ba7decaba341131"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0MjowMVrOHsYgvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjo0MjowMVrOHsYgvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwMDk4OA==", "bodyText": "Didnt want to put a of helper here\nImmutableMapWithNullValues.of(\"k1\", \"v1\")\nImmutableMapWithNullValues.of(\"k1\", \"v1\", \"k2\", \"v2\")", "url": "https://github.com/graphql-java/graphql-java/pull/2086#discussion_r516300988", "createdAt": "2020-11-02T22:42:01Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/collect/ImmutableMapWithNullValues.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package graphql.collect;\n+\n+import graphql.Internal;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+@Internal\n+public final class ImmutableMapWithNullValues<K, V> implements Map<K, V> {\n+\n+    private final Map<K, V> delegate;\n+\n+    private static final ImmutableMapWithNullValues emptyMap = copyOf(new LinkedHashMap<>());\n+\n+    private ImmutableMapWithNullValues(Map<K, V> values) {\n+        this.delegate = Collections.unmodifiableMap(new LinkedHashMap<>(values));\n+    }\n+\n+\n+    public static <K, V> ImmutableMapWithNullValues<K, V> empty() {\n+        return emptyMap;\n+    }\n+\n+    public static <K, V> ImmutableMapWithNullValues<K, V> copyOf(Map<K, V> values) {\n+        if (values instanceof ImmutableMapWithNullValues) {\n+            return (ImmutableMapWithNullValues<K, V>) values;\n+        }\n+        return new ImmutableMapWithNullValues<>(values);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda0f999c51567ead558a4f97ba7decaba341131"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTQzNDE3", "url": "https://github.com/graphql-java/graphql-java/pull/2086#pullrequestreview-522143417", "createdAt": "2020-11-03T01:33:19Z", "commit": {"oid": "fda0f999c51567ead558a4f97ba7decaba341131"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTozMzoxOVrOHsdnCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTozMzoxOVrOHsdnCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4NDUyMA==", "bodyText": "Maybe renamed ImmutableMapWithNullValues.empty() =to ImmutableMapWithNullValues.emptyMap() - this would be clearer in my book and also better on static import\nthis.variables = builder.variables == null ? emptyMap() : builder.variables;", "url": "https://github.com/graphql-java/graphql-java/pull/2086#discussion_r516384520", "createdAt": "2020-11-03T01:33:19Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/DataFetchingEnvironmentImpl.java", "diffHunk": "@@ -66,7 +69,7 @@ private DataFetchingEnvironmentImpl(Builder builder) {\n         this.locale = builder.locale;\n         this.operationDefinition = builder.operationDefinition;\n         this.document = builder.document;\n-        this.variables = builder.variables == null ? Collections.emptyMap() : builder.variables;\n+        this.variables = builder.variables == null ? ImmutableMapWithNullValues.empty() : builder.variables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda0f999c51567ead558a4f97ba7decaba341131"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTQzNTIx", "url": "https://github.com/graphql-java/graphql-java/pull/2086#pullrequestreview-522143521", "createdAt": "2020-11-03T01:33:50Z", "commit": {"oid": "fda0f999c51567ead558a4f97ba7decaba341131"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fff29f850c46b28de6edfc8449bd8c085c5662f", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/3fff29f850c46b28de6edfc8449bd8c085c5662f", "committedDate": "2020-11-03T10:06:01Z", "message": "More immutable support in more of the places"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dde43221a8cfe23b20ef248965fbee553458f3b8", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/dde43221a8cfe23b20ef248965fbee553458f3b8", "committedDate": "2020-11-03T10:33:32Z", "message": "More immutable support in more and more of the places"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59d2878030a032fb00b9346746b584dfd24f8491", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/59d2878030a032fb00b9346746b584dfd24f8491", "committedDate": "2020-11-04T05:05:42Z", "message": "More Immutable code in and around the schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b02716c90f34ac2d4e30ec252adf33724657cb", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/24b02716c90f34ac2d4e30ec252adf33724657cb", "committedDate": "2020-11-04T05:06:02Z", "message": "Optimised import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8d11c8da51a18da550914019282d299d993030a", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/d8d11c8da51a18da550914019282d299d993030a", "committedDate": "2020-11-04T06:21:02Z", "message": "Made the map of types in schema be immutable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5b76149a47a192fd21e6513305506eb85ec8ffd", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/f5b76149a47a192fd21e6513305506eb85ec8ffd", "committedDate": "2020-11-04T10:49:22Z", "message": "More Immutable things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c9039d3464fbb2c7d6d8db7bd52946d2daa9ad3", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/0c9039d3464fbb2c7d6d8db7bd52946d2daa9ad3", "committedDate": "2020-11-05T10:27:14Z", "message": "More Immutability and tweaked the ImmutableMapWithNullValues class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b31850bf60ea8f553fd0412c9c33106b8c2b623b", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/b31850bf60ea8f553fd0412c9c33106b8c2b623b", "committedDate": "2020-11-05T10:47:09Z", "message": "More Immutability on things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75f61ac2526a61a18837b83ffe3713cfa95cf45b", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/75f61ac2526a61a18837b83ffe3713cfa95cf45b", "committedDate": "2020-11-05T11:28:04Z", "message": "More Immutability on AST things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b020b68252cae43c1096f0c1f51b35eab76d2ac", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/8b020b68252cae43c1096f0c1f51b35eab76d2ac", "committedDate": "2020-11-05T12:29:52Z", "message": "More Immutability on AST things and a few other things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df5244482d90d830e970cd8a400281f458ba6c4a", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/df5244482d90d830e970cd8a400281f458ba6c4a", "committedDate": "2020-11-06T00:35:30Z", "message": "renamed listMap to just map and added more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bcc61882786cfc4df4475dd4e9c3ba48aed5465", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/0bcc61882786cfc4df4475dd4e9c3ba48aed5465", "committedDate": "2020-11-06T00:58:36Z", "message": "Renamed to ImmutableKit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de88d7a80efec23de8d58fccfdd5b3e46311c510", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/de88d7a80efec23de8d58fccfdd5b3e46311c510", "committedDate": "2020-11-08T23:01:23Z", "message": "Used ImmutableList collector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb7b6af61f9700b9b9e4f77a8498a394355efb27", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/fb7b6af61f9700b9b9e4f77a8498a394355efb27", "committedDate": "2020-11-08T23:10:51Z", "message": "Used ImmutableList collector - except for sort"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03df6106bfae8bb3bb4ea7b249202333f6a5e568", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/03df6106bfae8bb3bb4ea7b249202333f6a5e568", "committedDate": "2020-11-08T23:50:06Z", "message": "Merge remote-tracking branch 'origin/master' into immutable-collections-guava\n\n# Conflicts:\n#\tsrc/main/java/graphql/schema/DataFetchingFieldSelectionSetImpl.java\n#\tsrc/test/groovy/graphql/schema/DataFetchingFieldSelectionSetImplTest.groovy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2OTMzOTEz", "url": "https://github.com/graphql-java/graphql-java/pull/2086#pullrequestreview-526933913", "createdAt": "2020-11-10T07:51:54Z", "commit": {"oid": "03df6106bfae8bb3bb4ea7b249202333f6a5e568"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzo1MTo1NFrOHwP65A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzo1MTo1NFrOHwP65A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NDUzMg==", "bodyText": "why the format change here?", "url": "https://github.com/graphql-java/graphql-java/pull/2086#discussion_r520354532", "createdAt": "2020-11-10T07:51:54Z", "author": {"login": "andimarek"}, "path": "src/main/java/graphql/execution/instrumentation/ChainedInstrumentation.java", "diffHunk": "@@ -71,103 +71,83 @@ public InstrumentationState createState(InstrumentationCreateStateParameters par\n \n     @Override\n     public InstrumentationContext<ExecutionResult> beginExecution(final InstrumentationExecutionParameters parameters) {\n-        return new ChainedInstrumentationContext<>(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginExecution(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedInstrumentationContext<>(map(instrumentations, instrumentation -> {\n+            InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n+            return instrumentation.beginExecution(parameters.withNewState(state));\n+        }));\n     }\n \n     @Override\n     public InstrumentationContext<Document> beginParse(InstrumentationExecutionParameters parameters) {\n-        return new ChainedInstrumentationContext<>(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginParse(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedInstrumentationContext<>(map(instrumentations, instrumentation -> {\n+            InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n+            return instrumentation.beginParse(parameters.withNewState(state));\n+        }));\n     }\n \n     @Override\n     public InstrumentationContext<List<ValidationError>> beginValidation(InstrumentationValidationParameters parameters) {\n-        return new ChainedInstrumentationContext<>(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginValidation(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedInstrumentationContext<>(map(instrumentations, instrumentation -> {\n+            InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n+            return instrumentation.beginValidation(parameters.withNewState(state));\n+        }));\n     }\n \n     @Override\n     public InstrumentationContext<ExecutionResult> beginExecuteOperation(InstrumentationExecuteOperationParameters parameters) {\n-        return new ChainedInstrumentationContext<>(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginExecuteOperation(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedInstrumentationContext<>(map(instrumentations, instrumentation -> {\n+            InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n+            return instrumentation.beginExecuteOperation(parameters.withNewState(state));\n+        }));\n     }\n \n     @Override\n     public ExecutionStrategyInstrumentationContext beginExecutionStrategy(InstrumentationExecutionStrategyParameters parameters) {\n-        return new ChainedExecutionStrategyInstrumentationContext(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginExecutionStrategy(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedExecutionStrategyInstrumentationContext(map(instrumentations, instrumentation -> {\n+            InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n+            return instrumentation.beginExecutionStrategy(parameters.withNewState(state));\n+        }));\n     }\n \n \n     @Override\n     public InstrumentationContext<ExecutionResult> beginSubscribedFieldEvent(InstrumentationFieldParameters parameters) {\n-        return new ChainedInstrumentationContext<>(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginSubscribedFieldEvent(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedInstrumentationContext<>(map(instrumentations, instrumentation -> {\n+            InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n+            return instrumentation.beginSubscribedFieldEvent(parameters.withNewState(state));\n+        }));\n     }\n \n     @Override\n     public InstrumentationContext<ExecutionResult> beginField(InstrumentationFieldParameters parameters) {\n-        return new ChainedInstrumentationContext<>(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginField(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedInstrumentationContext<>(map(instrumentations, instrumentation -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03df6106bfae8bb3bb4ea7b249202333f6a5e568"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2OTM2OTM5", "url": "https://github.com/graphql-java/graphql-java/pull/2086#pullrequestreview-526936939", "createdAt": "2020-11-10T07:56:38Z", "commit": {"oid": "03df6106bfae8bb3bb4ea7b249202333f6a5e568"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzo1NjozOVrOHwQELQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzo1NjozOVrOHwQELQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NjkwOQ==", "bodyText": "doesn't nee to be a copy", "url": "https://github.com/graphql-java/graphql-java/pull/2086#discussion_r520356909", "createdAt": "2020-11-10T07:56:39Z", "author": {"login": "andimarek"}, "path": "src/main/java/graphql/schema/GraphQLSchema.java", "diffHunk": "@@ -169,7 +196,7 @@ public GraphQLObjectType getObjectType(String typeName) {\n     }\n \n     public Map<String, GraphQLNamedType> getTypeMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03df6106bfae8bb3bb4ea7b249202333f6a5e568"}, "originalPosition": 125}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9e0f44d739f7e2bd58e78c4a43e075de1a99ce1", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/d9e0f44d739f7e2bd58e78c4a43e075de1a99ce1", "committedDate": "2020-11-10T09:27:41Z", "message": "PR feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4381, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}