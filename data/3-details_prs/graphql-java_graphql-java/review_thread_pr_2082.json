{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NTQ4MTEx", "number": 2082, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyMzo1NlrOEzfPAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyODozMlrOEzfViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDI0NTc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/schema/idl/SchemaDirectiveWiringEnvironment.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyMzo1NlrOHqvPmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyMzo1NlrOHqvPmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NjI4Mg==", "bodyText": "prevent IDEA warnings on generics", "url": "https://github.com/graphql-java/graphql-java/pull/2082#discussion_r514576282", "createdAt": "2020-10-29T21:23:56Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/idl/SchemaDirectiveWiringEnvironment.java", "diffHunk": "@@ -129,6 +129,6 @@\n      *\n      * @throws graphql.AssertException if there is not field in context at the time of the directive wiring callback\n      */\n-    GraphQLFieldDefinition setFieldDataFetcher(DataFetcher newDataFetcher);\n+    GraphQLFieldDefinition setFieldDataFetcher(DataFetcher<?> newDataFetcher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be916493d00f09d810ce3f32045de580b858333b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDI1MTMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/schema/idl/SchemaDirectiveWiringSchemaGeneratorPostProcessing.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyNToyM1rOHqvSsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoxOTowMFrOHy9rOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NzA3Mg==", "bodyText": "the schema directive wiring code makes an assumption we have a SDL AST definition behind it - so it's SDL only", "url": "https://github.com/graphql-java/graphql-java/pull/2082#discussion_r514577072", "createdAt": "2020-10-29T21:25:23Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/idl/SchemaDirectiveWiringSchemaGeneratorPostProcessing.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package graphql.schema.idl;\n+\n+import graphql.Internal;\n+import graphql.language.NamedNode;\n+import graphql.schema.GraphQLCodeRegistry;\n+import graphql.schema.GraphQLEnumType;\n+import graphql.schema.GraphQLInputObjectType;\n+import graphql.schema.GraphQLInterfaceType;\n+import graphql.schema.GraphQLNamedType;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLScalarType;\n+import graphql.schema.GraphQLSchema;\n+import graphql.schema.GraphQLSchemaElement;\n+import graphql.schema.GraphQLTypeVisitorStub;\n+import graphql.schema.GraphQLUnionType;\n+import graphql.schema.SchemaTransformer;\n+import graphql.util.TraversalControl;\n+import graphql.util.TraverserContext;\n+import graphql.util.TreeTransformerUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static graphql.util.TraversalControl.CONTINUE;\n+\n+@Internal\n+class SchemaDirectiveWiringSchemaGeneratorPostProcessing implements SchemaGeneratorPostProcessing {\n+\n+    private final SchemaGeneratorDirectiveHelper generatorDirectiveHelper = new SchemaGeneratorDirectiveHelper();\n+    private final TypeDefinitionRegistry typeRegistry;\n+    private final RuntimeWiring runtimeWiring;\n+    private final GraphQLCodeRegistry.Builder codeRegistryBuilder;\n+    private final Map<String, Object> directiveBehaviourContext = new HashMap<>();\n+\n+\n+    public SchemaDirectiveWiringSchemaGeneratorPostProcessing(TypeDefinitionRegistry typeRegistry, RuntimeWiring runtimeWiring, GraphQLCodeRegistry.Builder codeRegistryBuilder) {\n+        this.typeRegistry = typeRegistry;\n+        this.runtimeWiring = runtimeWiring;\n+        this.codeRegistryBuilder = codeRegistryBuilder;\n+    }\n+\n+\n+    @Override\n+    public GraphQLSchema process(GraphQLSchema originalSchema) {\n+        GraphQLSchema newSchema = SchemaTransformer.transformSchema(originalSchema, new Visitor());\n+        return newSchema.transform(builder -> {\n+            // they could have changed the code registry so rebuild it\n+            GraphQLCodeRegistry codeRegistry = this.codeRegistryBuilder.build();\n+            builder.codeRegistry(codeRegistry);\n+        });\n+    }\n+\n+    public class Visitor extends GraphQLTypeVisitorStub {\n+\n+        private SchemaGeneratorDirectiveHelper.Parameters mkBehaviourParams() {\n+            return new SchemaGeneratorDirectiveHelper.Parameters(typeRegistry, runtimeWiring, directiveBehaviourContext, codeRegistryBuilder);\n+        }\n+\n+        private TraversalControl changOrContinue(GraphQLSchemaElement node, GraphQLSchemaElement newNode, TraverserContext<GraphQLSchemaElement> context) {\n+            if (node != newNode) {\n+                TreeTransformerUtil.changeNode(context, newNode);\n+            }\n+            return CONTINUE;\n+        }\n+\n+        private boolean isIntrospectionType(GraphQLNamedType type) {\n+            return type.getName().startsWith(\"__\");\n+        }\n+\n+        private <T extends GraphQLNamedType> boolean notSuitable(T node, Function<T, NamedNode<?>> suitableFunc) {\n+            if (isIntrospectionType(node)) {\n+                return true;\n+            }\n+            NamedNode<?> definition = suitableFunc.apply(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be916493d00f09d810ce3f32045de580b858333b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4MDUyMA==", "bodyText": "do we need to restrict it? Is it bad that we restrict it?", "url": "https://github.com/graphql-java/graphql-java/pull/2082#discussion_r514580520", "createdAt": "2020-10-29T21:32:12Z", "author": {"login": "andimarek"}, "path": "src/main/java/graphql/schema/idl/SchemaDirectiveWiringSchemaGeneratorPostProcessing.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package graphql.schema.idl;\n+\n+import graphql.Internal;\n+import graphql.language.NamedNode;\n+import graphql.schema.GraphQLCodeRegistry;\n+import graphql.schema.GraphQLEnumType;\n+import graphql.schema.GraphQLInputObjectType;\n+import graphql.schema.GraphQLInterfaceType;\n+import graphql.schema.GraphQLNamedType;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLScalarType;\n+import graphql.schema.GraphQLSchema;\n+import graphql.schema.GraphQLSchemaElement;\n+import graphql.schema.GraphQLTypeVisitorStub;\n+import graphql.schema.GraphQLUnionType;\n+import graphql.schema.SchemaTransformer;\n+import graphql.util.TraversalControl;\n+import graphql.util.TraverserContext;\n+import graphql.util.TreeTransformerUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static graphql.util.TraversalControl.CONTINUE;\n+\n+@Internal\n+class SchemaDirectiveWiringSchemaGeneratorPostProcessing implements SchemaGeneratorPostProcessing {\n+\n+    private final SchemaGeneratorDirectiveHelper generatorDirectiveHelper = new SchemaGeneratorDirectiveHelper();\n+    private final TypeDefinitionRegistry typeRegistry;\n+    private final RuntimeWiring runtimeWiring;\n+    private final GraphQLCodeRegistry.Builder codeRegistryBuilder;\n+    private final Map<String, Object> directiveBehaviourContext = new HashMap<>();\n+\n+\n+    public SchemaDirectiveWiringSchemaGeneratorPostProcessing(TypeDefinitionRegistry typeRegistry, RuntimeWiring runtimeWiring, GraphQLCodeRegistry.Builder codeRegistryBuilder) {\n+        this.typeRegistry = typeRegistry;\n+        this.runtimeWiring = runtimeWiring;\n+        this.codeRegistryBuilder = codeRegistryBuilder;\n+    }\n+\n+\n+    @Override\n+    public GraphQLSchema process(GraphQLSchema originalSchema) {\n+        GraphQLSchema newSchema = SchemaTransformer.transformSchema(originalSchema, new Visitor());\n+        return newSchema.transform(builder -> {\n+            // they could have changed the code registry so rebuild it\n+            GraphQLCodeRegistry codeRegistry = this.codeRegistryBuilder.build();\n+            builder.codeRegistry(codeRegistry);\n+        });\n+    }\n+\n+    public class Visitor extends GraphQLTypeVisitorStub {\n+\n+        private SchemaGeneratorDirectiveHelper.Parameters mkBehaviourParams() {\n+            return new SchemaGeneratorDirectiveHelper.Parameters(typeRegistry, runtimeWiring, directiveBehaviourContext, codeRegistryBuilder);\n+        }\n+\n+        private TraversalControl changOrContinue(GraphQLSchemaElement node, GraphQLSchemaElement newNode, TraverserContext<GraphQLSchemaElement> context) {\n+            if (node != newNode) {\n+                TreeTransformerUtil.changeNode(context, newNode);\n+            }\n+            return CONTINUE;\n+        }\n+\n+        private boolean isIntrospectionType(GraphQLNamedType type) {\n+            return type.getName().startsWith(\"__\");\n+        }\n+\n+        private <T extends GraphQLNamedType> boolean notSuitable(T node, Function<T, NamedNode<?>> suitableFunc) {\n+            if (isIntrospectionType(node)) {\n+                return true;\n+            }\n+            NamedNode<?> definition = suitableFunc.apply(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NzA3Mg=="}, "originalCommit": {"oid": "be916493d00f09d810ce3f32045de580b858333b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwMTMzNg==", "bodyText": "We don't want any one tweaking introspection types I think", "url": "https://github.com/graphql-java/graphql-java/pull/2082#discussion_r523201336", "createdAt": "2020-11-13T20:19:00Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/idl/SchemaDirectiveWiringSchemaGeneratorPostProcessing.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package graphql.schema.idl;\n+\n+import graphql.Internal;\n+import graphql.language.NamedNode;\n+import graphql.schema.GraphQLCodeRegistry;\n+import graphql.schema.GraphQLEnumType;\n+import graphql.schema.GraphQLInputObjectType;\n+import graphql.schema.GraphQLInterfaceType;\n+import graphql.schema.GraphQLNamedType;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLScalarType;\n+import graphql.schema.GraphQLSchema;\n+import graphql.schema.GraphQLSchemaElement;\n+import graphql.schema.GraphQLTypeVisitorStub;\n+import graphql.schema.GraphQLUnionType;\n+import graphql.schema.SchemaTransformer;\n+import graphql.util.TraversalControl;\n+import graphql.util.TraverserContext;\n+import graphql.util.TreeTransformerUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static graphql.util.TraversalControl.CONTINUE;\n+\n+@Internal\n+class SchemaDirectiveWiringSchemaGeneratorPostProcessing implements SchemaGeneratorPostProcessing {\n+\n+    private final SchemaGeneratorDirectiveHelper generatorDirectiveHelper = new SchemaGeneratorDirectiveHelper();\n+    private final TypeDefinitionRegistry typeRegistry;\n+    private final RuntimeWiring runtimeWiring;\n+    private final GraphQLCodeRegistry.Builder codeRegistryBuilder;\n+    private final Map<String, Object> directiveBehaviourContext = new HashMap<>();\n+\n+\n+    public SchemaDirectiveWiringSchemaGeneratorPostProcessing(TypeDefinitionRegistry typeRegistry, RuntimeWiring runtimeWiring, GraphQLCodeRegistry.Builder codeRegistryBuilder) {\n+        this.typeRegistry = typeRegistry;\n+        this.runtimeWiring = runtimeWiring;\n+        this.codeRegistryBuilder = codeRegistryBuilder;\n+    }\n+\n+\n+    @Override\n+    public GraphQLSchema process(GraphQLSchema originalSchema) {\n+        GraphQLSchema newSchema = SchemaTransformer.transformSchema(originalSchema, new Visitor());\n+        return newSchema.transform(builder -> {\n+            // they could have changed the code registry so rebuild it\n+            GraphQLCodeRegistry codeRegistry = this.codeRegistryBuilder.build();\n+            builder.codeRegistry(codeRegistry);\n+        });\n+    }\n+\n+    public class Visitor extends GraphQLTypeVisitorStub {\n+\n+        private SchemaGeneratorDirectiveHelper.Parameters mkBehaviourParams() {\n+            return new SchemaGeneratorDirectiveHelper.Parameters(typeRegistry, runtimeWiring, directiveBehaviourContext, codeRegistryBuilder);\n+        }\n+\n+        private TraversalControl changOrContinue(GraphQLSchemaElement node, GraphQLSchemaElement newNode, TraverserContext<GraphQLSchemaElement> context) {\n+            if (node != newNode) {\n+                TreeTransformerUtil.changeNode(context, newNode);\n+            }\n+            return CONTINUE;\n+        }\n+\n+        private boolean isIntrospectionType(GraphQLNamedType type) {\n+            return type.getName().startsWith(\"__\");\n+        }\n+\n+        private <T extends GraphQLNamedType> boolean notSuitable(T node, Function<T, NamedNode<?>> suitableFunc) {\n+            if (isIntrospectionType(node)) {\n+                return true;\n+            }\n+            NamedNode<?> definition = suitableFunc.apply(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NzA3Mg=="}, "originalCommit": {"oid": "be916493d00f09d810ce3f32045de580b858333b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDI2MjQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/graphql/schema/idl/SchemaGeneratorDirectiveHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyODozMlrOHqvZcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyODozMlrOHqvZcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3ODgwMA==", "bodyText": "I changed this so that IF the node did not change, we just return the old node - slight optimisation in tree building", "url": "https://github.com/graphql-java/graphql-java/pull/2082#discussion_r514578800", "createdAt": "2020-10-29T21:28:32Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/schema/idl/SchemaGeneratorDirectiveHelper.java", "diffHunk": "@@ -133,16 +134,19 @@ private GraphqlElementParentTree buildRuntimeTree(GraphQLSchemaElement... elemen\n         }).collect(toList());\n     }\n \n-    private List<GraphQLFieldDefinition> wireFields(GraphQLFieldsContainer fieldsContainer, NamedNode fieldsContainerNode, Parameters params) {\n+    private List<GraphQLFieldDefinition> wireFields(GraphQLFieldsContainer fieldsContainer, NamedNode<?> fieldsContainerNode, Parameters params) {\n         return fieldsContainer.getFieldDefinitions().stream().map(fieldDefinition -> {\n \n             // and for each argument in the fieldDefinition run the wiring for them - and note that they can change\n+            List<GraphQLArgument> startingArgs = fieldDefinition.getArguments();\n             List<GraphQLArgument> newArgs = wireArguments(fieldDefinition, fieldsContainer, fieldsContainerNode, params, fieldDefinition);\n \n-            // they may have changed the arguments to the fieldDefinition so reflect that\n-            fieldDefinition = fieldDefinition.transform(builder -> builder.clearArguments().arguments(newArgs));\n+            if (isNotTheSameObjects(startingArgs, newArgs)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be916493d00f09d810ce3f32045de580b858333b"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4566, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}