{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MzUwODgw", "number": 2013, "title": "Persisted query support in graphql-java", "bodyText": "This adds the basis for persisted query support in graphql-java.\nIn short consumers need to have their own cache implementation to be truly useful.  The InMemoryPersistedQueryCache one is too bare bones for production use at scale, as its not memory constrained.\nApolloPersistedQuerySupport has been provided which can read persistent query ids from the input extensions.\nSee #1972", "createdAt": "2020-08-28T11:27:20Z", "url": "https://github.com/graphql-java/graphql-java/pull/2013", "merged": true, "mergeCommit": {"oid": "4a893b0f55da36cd97397ceb76634644ad658e55"}, "closed": true, "closedAt": "2020-10-09T06:00:32Z", "author": {"login": "bbakerman"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDTPwigH2gAyNDc1MzUwODgwOjU5ZmJlNjg1ZTEyNGQwODc4ZWI1MzgwYjMzYzZmMGQxNGY3YjMxYjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdE-ibVgFqTQ4MDk5MjMyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "59fbe685e124d0878eb5380b33c6f0d14f7b31b3", "author": {"user": {"login": "bbakerman", "name": "Brad Baker"}}, "url": "https://github.com/graphql-java/graphql-java/commit/59fbe685e124d0878eb5380b33c6f0d14f7b31b3", "committedDate": "2020-08-28T11:24:25Z", "message": "Persisted query support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NjU4Nzg3", "url": "https://github.com/graphql-java/graphql-java/pull/2013#pullrequestreview-477658787", "createdAt": "2020-08-28T11:39:36Z", "commit": {"oid": "59fbe685e124d0878eb5380b33c6f0d14f7b31b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMTozOTozNlrOHI-ikg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMTozOTozNlrOHI-ikg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3NTMxNA==", "bodyText": "This is a much better name for the callback parameter because that's what it does", "url": "https://github.com/graphql-java/graphql-java/pull/2013#discussion_r479175314", "createdAt": "2020-08-28T11:39:36Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/execution/preparsed/PreparsedDocumentProvider.java", "diffHunk": "@@ -7,20 +7,23 @@\n import java.util.function.Function;\n \n /**\n- * Interface that allows clients to hook in Document caching and/or the whitelisting of queries\n+ * Interface that allows clients to hook in Document caching and/or the whitelisting of queries.\n  */\n @PublicSpi\n public interface PreparsedDocumentProvider {\n     /**\n-     * This is called to get a \"cached\" pre-parsed query and if its not present, then the computeFunction\n-     * can be called to parse and validate the query\n-     *\n-     * @param executionInput  The {@link graphql.ExecutionInput} containing the query\n-     * @param computeFunction If the query has not be pre-parsed, this function can be called to parse it\n+     * This is called to get a \"cached\" pre-parsed query and if its not present, then the \"parseAndValidateFunction\"\n+     * can be called to parse and validate the query.\n+     * <p>\n+     * Note - the \"parseAndValidateFunction\" MUST be called if you dont have a per parsed version of the query because it not only parses\n+     * and validates the query, it invokes {@link graphql.execution.instrumentation.Instrumentation} calls as well for parsing and validation.\n+     * if you dont make a call back on this then these wont happen.\n      *\n+     * @param executionInput           The {@link graphql.ExecutionInput} containing the query\n+     * @param parseAndValidateFunction If the query has not be pre-parsed, this function MUST be called to parse and validate it\n      * @return an instance of {@link PreparsedDocumentEntry}\n      */\n-    PreparsedDocumentEntry getDocument(ExecutionInput executionInput, Function<ExecutionInput, PreparsedDocumentEntry> computeFunction);\n+    PreparsedDocumentEntry getDocument(ExecutionInput executionInput, Function<ExecutionInput, PreparsedDocumentEntry> parseAndValidateFunction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59fbe685e124d0878eb5380b33c6f0d14f7b31b3"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NjU5MDg4", "url": "https://github.com/graphql-java/graphql-java/pull/2013#pullrequestreview-477659088", "createdAt": "2020-08-28T11:40:10Z", "commit": {"oid": "59fbe685e124d0878eb5380b33c6f0d14f7b31b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMTo0MDoxMVrOHI-lOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMTo0MDoxMVrOHI-lOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3NTk5Mg==", "bodyText": "Later if there is a V2, we can update this", "url": "https://github.com/graphql-java/graphql-java/pull/2013#discussion_r479175992", "createdAt": "2020-08-28T11:40:11Z", "author": {"login": "bbakerman"}, "path": "src/main/java/graphql/execution/preparsed/persisted/ApolloPersistedQuerySupport.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package graphql.execution.preparsed.persisted;\n+\n+import graphql.ExecutionInput;\n+import graphql.PublicApi;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * This persisted query support class supports the Apollo scheme where the persisted\n+ * query id is in {@link graphql.ExecutionInput#getExtensions()}.\n+ * <p>\n+ * You need to provide a {@link PersistedQueryCache} cache implementation\n+ * as the backing cache.\n+ * <p>\n+ * See <a href=\"https://www.apollographql.com/docs/apollo-server/performance/apq/\">Apollo Persisted Queries</a>\n+ * <p>\n+ * The Apollo client sends a hash of the persisted query in the input extensions in the following form\n+ * <p>\n+ * <pre>\n+ *     {\n+ *      \"extensions\":{\n+ *       \"persistedQuery\":{\n+ *        \"version\":1,\n+ *        \"sha256Hash\":\"fcf31818e50ac3e818ca4bdbc433d6ab73176f0b9d5f9d5ad17e200cdab6fba4\"\n+ *      }\n+ *    }\n+ *  }\n+ * </pre>\n+ *\n+ * @see graphql.ExecutionInput#getExtensions()\n+ */\n+@PublicApi\n+public class ApolloPersistedQuerySupport extends PersistedQuerySupport {\n+\n+    public ApolloPersistedQuerySupport(PersistedQueryCache persistedQueryCache) {\n+        super(persistedQueryCache);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected Optional<Object> getPersistedQueryId(ExecutionInput executionInput) {\n+        Map<String, Object> extensions = executionInput.getExtensions();\n+        Map<String, Object> persistedQuery = (Map<String, Object>) extensions.get(\"persistedQuery\");\n+        if (persistedQuery != null) {\n+            Object sha256Hash = persistedQuery.get(\"sha256Hash\");\n+            return Optional.ofNullable(sha256Hash);\n+        }\n+        return Optional.empty();\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59fbe685e124d0878eb5380b33c6f0d14f7b31b3"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwOTkyMzI4", "url": "https://github.com/graphql-java/graphql-java/pull/2013#pullrequestreview-480992328", "createdAt": "2020-09-02T16:24:40Z", "commit": {"oid": "59fbe685e124d0878eb5380b33c6f0d14f7b31b3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4341, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}