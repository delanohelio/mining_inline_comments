{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MjgzNzE4", "number": 2718, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoyMTowM1rODmLjlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxMTowMlrODovLRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzYxODE0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-lineage/asset-lineage-server/src/main/java/org/odpi/openmetadata/accessservices/assetlineage/listeners/AssetLineageOMRSTopicListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoyMTowM1rOFzc0nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo1Mzo0M1rOFz8A1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MzkxOQ==", "bodyText": "Just a question here, why don't you want to use directly the event type(e..g AssetLineageEventType.UPDATE_RELATIONSHIP_EVENT) for debugging? And use another string instead?", "url": "https://github.com/odpi/egeria/pull/2718#discussion_r389493919", "createdAt": "2020-03-09T07:21:03Z", "author": {"login": "popa-raluca"}, "path": "open-metadata-implementation/access-services/asset-lineage/asset-lineage-server/src/main/java/org/odpi/openmetadata/accessservices/assetlineage/listeners/AssetLineageOMRSTopicListener.java", "diffHunk": "@@ -167,39 +165,62 @@ private void processDeletedEntity(EntityDetail entityDetail) throws ConnectorChe\n     private void processClassifiedEntityEvent(EntityDetail entityDetail) throws OCFCheckedExceptionBase, JsonProcessingException {\n         if (!immutableValidLineageEntityEvents.contains(entityDetail.getType().getTypeDefName()))\n             return;\n-        log.debug(\"Asset Lineage OMAS is processing a Classified Entity event which contains the following entity {}: \", entityDetail.getGUID());\n+        log.debug(PROCESSING_ENTITYDETAIL_DEBUG_MESSAGE, \"classifiedEntity\", entityDetail.getGUID());\n         publisher.publishClassificationContext(entityDetail);\n     }\n \n-    private void processReclassifiedEntityEvent(EntityDetail entityDetail) {\n-        log.debug(\"Asset Lineage OMAS is processing a ReClassified Entity event which contains the following entity {}: \", entityDetail.getGUID());\n+    private void processReclassifiedEntityEvent(EntityDetail entityDetail) throws OCFCheckedExceptionBase, JsonProcessingException {\n+        if (!immutableValidLineageEntityEvents.contains(entityDetail.getType().getTypeDefName()))\n+            return;\n+        log.debug(PROCESSING_ENTITYDETAIL_DEBUG_MESSAGE, \"reclassifiedEntity\", entityDetail.getGUID());\n+        publisher.publishClassificationContext(entityDetail);\n     }\n \n-    private void processDeclassifiedEntityEvent(EntityDetail entityDetail) {\n-        log.debug(\"Asset Lineage OMAS is processing a DeClassified Entity event which contains the following entity {}: \", entityDetail.getGUID());\n+    private void processDeclassifiedEntityEvent(EntityDetail entityDetail) throws OCFCheckedExceptionBase, JsonProcessingException {\n+        if (!immutableValidLineageEntityEvents.contains(entityDetail.getType().getTypeDefName()))\n+            return;\n+        log.debug(PROCESSING_ENTITYDETAIL_DEBUG_MESSAGE, \"declassifiedEntity\", entityDetail.getGUID());\n+        if (anyValidClassificationsLeft(entityDetail)) {\n+            publisher.publishClassificationContext(entityDetail);\n+            return;\n+        }\n+        //The last relevant lineage classification has been removed from the entity\n+        LineageEvent event = new LineageEvent();\n+        event.setLineageEntity(converter.createLineageEntity(entityDetail));\n+        event.setAssetLineageEventType(AssetLineageEventType.DECLASSIFIED_ENTITY_EVENT);\n+        publisher.publishEvent(event);\n     }\n \n+\n     private void processNewRelationship(Relationship relationship) {\n-        log.debug(PROCESSING_RELATIONSHIP_DEBUG_MESSAGE, \"NewRelationship\", relationship.getGUID());\n+        log.debug(PROCESSING_RELATIONSHIP_DEBUG_MESSAGE, \"newRelationship\", relationship.getGUID());\n     }\n \n     private void processUpdatedRelationshipEvent(Relationship relationship) throws OCFCheckedExceptionBase, JsonProcessingException {\n-        log.debug(PROCESSING_RELATIONSHIP_DEBUG_MESSAGE, AssetLineageEventType.UPDATE_RELATIONSHIP_EVENT, relationship.getGUID());\n+        log.debug(PROCESSING_RELATIONSHIP_DEBUG_MESSAGE, \"updatedRelationship\", relationship.getGUID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfb8b6a64692c7b8a4c418131d60eff45301e82c"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDk0OA==", "bodyText": "AssetLineageEventType does not refer to the input events of the omas, but to its output events. Some input events, such as classify and reclassify, may lead to an event of the same AssetLineageEventType (CLASSIFICATION_CONTEXT). Therefore these constants are not intended for classifying the input events", "url": "https://github.com/odpi/egeria/pull/2718#discussion_r390004948", "createdAt": "2020-03-09T22:53:43Z", "author": {"login": "GuyAckermans"}, "path": "open-metadata-implementation/access-services/asset-lineage/asset-lineage-server/src/main/java/org/odpi/openmetadata/accessservices/assetlineage/listeners/AssetLineageOMRSTopicListener.java", "diffHunk": "@@ -167,39 +165,62 @@ private void processDeletedEntity(EntityDetail entityDetail) throws ConnectorChe\n     private void processClassifiedEntityEvent(EntityDetail entityDetail) throws OCFCheckedExceptionBase, JsonProcessingException {\n         if (!immutableValidLineageEntityEvents.contains(entityDetail.getType().getTypeDefName()))\n             return;\n-        log.debug(\"Asset Lineage OMAS is processing a Classified Entity event which contains the following entity {}: \", entityDetail.getGUID());\n+        log.debug(PROCESSING_ENTITYDETAIL_DEBUG_MESSAGE, \"classifiedEntity\", entityDetail.getGUID());\n         publisher.publishClassificationContext(entityDetail);\n     }\n \n-    private void processReclassifiedEntityEvent(EntityDetail entityDetail) {\n-        log.debug(\"Asset Lineage OMAS is processing a ReClassified Entity event which contains the following entity {}: \", entityDetail.getGUID());\n+    private void processReclassifiedEntityEvent(EntityDetail entityDetail) throws OCFCheckedExceptionBase, JsonProcessingException {\n+        if (!immutableValidLineageEntityEvents.contains(entityDetail.getType().getTypeDefName()))\n+            return;\n+        log.debug(PROCESSING_ENTITYDETAIL_DEBUG_MESSAGE, \"reclassifiedEntity\", entityDetail.getGUID());\n+        publisher.publishClassificationContext(entityDetail);\n     }\n \n-    private void processDeclassifiedEntityEvent(EntityDetail entityDetail) {\n-        log.debug(\"Asset Lineage OMAS is processing a DeClassified Entity event which contains the following entity {}: \", entityDetail.getGUID());\n+    private void processDeclassifiedEntityEvent(EntityDetail entityDetail) throws OCFCheckedExceptionBase, JsonProcessingException {\n+        if (!immutableValidLineageEntityEvents.contains(entityDetail.getType().getTypeDefName()))\n+            return;\n+        log.debug(PROCESSING_ENTITYDETAIL_DEBUG_MESSAGE, \"declassifiedEntity\", entityDetail.getGUID());\n+        if (anyValidClassificationsLeft(entityDetail)) {\n+            publisher.publishClassificationContext(entityDetail);\n+            return;\n+        }\n+        //The last relevant lineage classification has been removed from the entity\n+        LineageEvent event = new LineageEvent();\n+        event.setLineageEntity(converter.createLineageEntity(entityDetail));\n+        event.setAssetLineageEventType(AssetLineageEventType.DECLASSIFIED_ENTITY_EVENT);\n+        publisher.publishEvent(event);\n     }\n \n+\n     private void processNewRelationship(Relationship relationship) {\n-        log.debug(PROCESSING_RELATIONSHIP_DEBUG_MESSAGE, \"NewRelationship\", relationship.getGUID());\n+        log.debug(PROCESSING_RELATIONSHIP_DEBUG_MESSAGE, \"newRelationship\", relationship.getGUID());\n     }\n \n     private void processUpdatedRelationshipEvent(Relationship relationship) throws OCFCheckedExceptionBase, JsonProcessingException {\n-        log.debug(PROCESSING_RELATIONSHIP_DEBUG_MESSAGE, AssetLineageEventType.UPDATE_RELATIONSHIP_EVENT, relationship.getGUID());\n+        log.debug(PROCESSING_RELATIONSHIP_DEBUG_MESSAGE, \"updatedRelationship\", relationship.getGUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MzkxOQ=="}, "originalCommit": {"oid": "cfb8b6a64692c7b8a4c418131d60eff45301e82c"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDQyNTY1OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-lineage/asset-lineage-server/src/main/java/org/odpi/openmetadata/accessservices/assetlineage/admin/AssetLineageAdmin.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxMTowMlrOF3d_Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoxMDozOFrOF4ENOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNzI3NQ==", "bodyText": "My version of this method (not actually tested, but the result should be identical)\nprivate List<String> getLineageClassificationTypes(AccessServiceConfig accessServiceConfig) { if (accessServiceConfig.getAccessServiceOptions() != null) { return AssetLineageConstants.immutableDefaultLineageClassifications; } return accessServiceConfig.getAccessServiceOptions().get(AssetLineageConstants.LINEAGE_CLASSIFICATION_TYPES_KEY); }\nSteps taken to reach this code:\n\nnoticed else block is smaller than if block, therefore switched between themselves\nused a fast return in if block, making 1 less usage of returned list and making else block unnecessary, thus flattening landscape (aka decreasing identation) and increasing code readability\nsince the returned list/object is already initialized as null, the null check becomes unnecessary and therefore can be removed\nas a consequence, the assignment to returned list/object is also unnecessary and the result of get() method can be immediately returned\n\nI am only stating this is an improved version, not the best possible one, only by staying in the context of this method alone.\nAlso, my approach is to always use curly brackets/accolades, however they are called, when it comes to single line if statements. The web debates about this case, but in my opinion they provide code structure, thus increasing readability. Also, they help with spotting failed code merges, but if they are not used the bugs rising from these situations can turn into nightmares. The choice is ultimately the developers.", "url": "https://github.com/odpi/egeria/pull/2718#discussion_r393707275", "createdAt": "2020-03-17T14:11:02Z", "author": {"login": "lcpopa"}, "path": "open-metadata-implementation/access-services/asset-lineage/asset-lineage-server/src/main/java/org/odpi/openmetadata/accessservices/assetlineage/admin/AssetLineageAdmin.java", "diffHunk": "@@ -119,6 +126,18 @@ public void initialize(AccessServiceConfig accessServiceConfig,\n         }\n     }\n \n+    private List<String> getLineageClassificationTypes(AccessServiceConfig accessServiceConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c87ad28f74816ba5a4dcba148284416ec8b8c1b5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwOTM5Mg==", "bodyText": "How do I make GitHub properly indent code in comments ? :) Place the code in iDea to actually notice it\nThe above is only as a suggestion to improve ones code writing skills", "url": "https://github.com/odpi/egeria/pull/2718#discussion_r393709392", "createdAt": "2020-03-17T14:13:56Z", "author": {"login": "lcpopa"}, "path": "open-metadata-implementation/access-services/asset-lineage/asset-lineage-server/src/main/java/org/odpi/openmetadata/accessservices/assetlineage/admin/AssetLineageAdmin.java", "diffHunk": "@@ -119,6 +126,18 @@ public void initialize(AccessServiceConfig accessServiceConfig,\n         }\n     }\n \n+    private List<String> getLineageClassificationTypes(AccessServiceConfig accessServiceConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNzI3NQ=="}, "originalCommit": {"oid": "c87ad28f74816ba5a4dcba148284416ec8b8c1b5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMzQ5OQ==", "bodyText": "Thanks for the feedback! It made me realise there was a bug, the body of the else block should be run when either of the if statements are false. I refactored to:\nprivate List<String> getLineageClassificationTypes(AccessServiceConfig accessServiceConfig) {\n        Object lineageClassificationTypesProperty = null;\n        if (accessServiceConfig.getAccessServiceOptions() != null)\n            lineageClassificationTypesProperty = accessServiceConfig.getAccessServiceOptions().get(AssetLineageConstants.LINEAGE_CLASSIFICATION_TYPES_KEY);\n        if (lineageClassificationTypesProperty != null)\n            return (List<String>) lineageClassificationTypesProperty;\n        return AssetLineageConstants.immutableDefaultLineageClassifications;\n    }\n\nTo me code is more readable when minimising the number of lines, so using single line statements. I have never run into a failed code merge situation with this, but I can imagine it would be a big problem", "url": "https://github.com/odpi/egeria/pull/2718#discussion_r394333499", "createdAt": "2020-03-18T13:10:38Z", "author": {"login": "GuyAckermans"}, "path": "open-metadata-implementation/access-services/asset-lineage/asset-lineage-server/src/main/java/org/odpi/openmetadata/accessservices/assetlineage/admin/AssetLineageAdmin.java", "diffHunk": "@@ -119,6 +126,18 @@ public void initialize(AccessServiceConfig accessServiceConfig,\n         }\n     }\n \n+    private List<String> getLineageClassificationTypes(AccessServiceConfig accessServiceConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNzI3NQ=="}, "originalCommit": {"oid": "c87ad28f74816ba5a4dcba148284416ec8b8c1b5"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2420, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}