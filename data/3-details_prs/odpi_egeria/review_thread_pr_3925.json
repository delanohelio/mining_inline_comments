{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NTA5NDI2", "number": 3925, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1Mjo1OFrOEwQ2pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozOToyMVrOEw09JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDQzMjM3OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1Mjo1OFrOHltkMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1Mjo1OFrOHltkMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwNTkwNw==", "bodyText": "Remove please package org.odpi.openmetadata.commonservices.ffdc.exceptions.", "url": "https://github.com/odpi/egeria/pull/3925#discussion_r509305907", "createdAt": "2020-10-21T13:52:58Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaHandler.java", "diffHunk": "@@ -133,25 +141,102 @@ CategorySummary getCategorySummary(String restAPIName,\n                                                    Class<? extends INodeMapper<T>> mapperClass,\n                                                    String methodName) throws SubjectAreaCheckedException,\n                                                                              PropertyServerException,\n-                                                                             UserNotAuthorizedException\n-    {\n+                                                                             UserNotAuthorizedException, org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException {\n         List<EntityDetail> entityDetails = null;\n         List<T> foundEntities = null;\n+\n+        if (findRequest.getPageSize() == null) {\n+            findRequest.setPageSize(invalidParameterHandler.getMaxPagingSize());\n+        }\n+        invalidParameterHandler.validatePaging(findRequest.getStartingFrom(), findRequest.getPageSize(), methodName);\n         if (findRequest.getSearchCriteria() == null) {\n             entityDetails = oMRSAPIHelper.getEntitiesByType(methodName, userId, typeEntityName, findRequest);\n         } else {\n             entityDetails = oMRSAPIHelper.findEntitiesByPropertyValue(methodName, userId, typeEntityName, findRequest);\n         }\n         if (entityDetails != null) {\n-            INodeMapper<T> iNodeMapper = mappersFactory.get(mapperClass);\n-            foundEntities = new ArrayList<>();\n-            for (EntityDetail entityDetail : entityDetails) {\n-                foundEntities.add(iNodeMapper.map(entityDetail));\n-            }\n+            foundEntities = convertOmrsToOmas(entityDetails, mapperClass);\n         }\n         return foundEntities;\n     }\n \n+    /**\n+     * Get the related nodes from end 1 of a given type of relationship\n+     * @param methodName           name of the method being called.\n+     * @param userId               unique identifier for requesting user, under which the request is performed\n+     * @param guid                 guid\n+     * @param relationshipTypeName relationship type name\n+     * @param mapperClass          mapper class used to get the type name of the Node to return\n+     * @param startingFrom         retrieve items starting from this location\n+     * @param pageSize             maximum size of the returned items\n+     * @return response containing the the related Nodes if there are any\n+     */\n+    public <T extends Node> SubjectAreaOMASAPIResponse<T> getRelatedNodesForEnd1(String methodName,\n+                                                                                 String userId,\n+                                                                                 String guid,\n+                                                                                 String relationshipTypeName,\n+                                                                                 Class<? extends INodeMapper<T>> mapperClass,\n+                                                                                 Integer startingFrom,\n+                                                                                 Integer pageSize) {\n+        SubjectAreaOMASAPIResponse<T> response = new SubjectAreaOMASAPIResponse<>();\n+\n+        try {\n+            if (pageSize == null) {\n+               pageSize = maxPageSize;\n+            }\n+            invalidParameterHandler.validatePaging(startingFrom, pageSize, methodName);\n+            final INodeMapper<T> mapper = mappersFactory.get(mapperClass);\n+            List<EntityDetail> entityDetails= oMRSAPIHelper.callGetEntitiesForRelationshipEnd1(\n+                        methodName, userId, guid, mapper.getTypeName(), relationshipTypeName, startingFrom, pageSize);\n+            if (entityDetails != null) {\n+                for (EntityDetail entityDetail : entityDetails) {\n+                    response.addResult(mapper.map(entityDetail));\n+                }\n+            }\n+        } catch (UserNotAuthorizedException | SubjectAreaCheckedException | PropertyServerException | org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException e) {\n+            response.setExceptionInfo(e, className);\n+        }\n+        return response;\n+    }\n+    /**\n+     * Get the related nodes from end 2 of a given type of relationship\n+     * @param methodName           name of the method being called.\n+     * @param userId               unique identifier for requesting user, under which the request is performed\n+     * @param guid                 guid\n+     * @param relationshipTypeName relationship type name\n+     * @param mapperClass          mapper class used to get the type name of the Node to return\n+     * @param startingFrom         retrieve items starting from this location\n+     * @param pageSize             maximum size of the returned items\n+     * @return response containing the the related Nodes if there are any\n+     */\n+    public <T extends Node> SubjectAreaOMASAPIResponse<T> getRelatedNodesForEnd2(String methodName,\n+                                                                                 String userId,\n+                                                                                 String guid,\n+                                                                                 String relationshipTypeName,\n+                                                                                 Class<? extends INodeMapper<T>> mapperClass,\n+                                                                                 Integer startingFrom,\n+                                                                                 Integer pageSize) {\n+        SubjectAreaOMASAPIResponse<T> response = new SubjectAreaOMASAPIResponse<>();\n+\n+        try {\n+            if (pageSize == null) {\n+                pageSize = maxPageSize;\n+            }\n+            invalidParameterHandler.validatePaging(startingFrom, pageSize, methodName);\n+            final INodeMapper<T> mapper = mappersFactory.get(mapperClass);\n+            List<EntityDetail> entityDetails = oMRSAPIHelper.callGetEntitiesForRelationshipEnd2(\n+                   methodName, userId, guid, mapper.getTypeName(), relationshipTypeName, startingFrom, pageSize);\n+            if (entityDetails != null) {\n+                for (EntityDetail entityDetail : entityDetails) {\n+                    response.addResult(mapper.map(entityDetail));\n+                }\n+            }\n+        } catch (UserNotAuthorizedException | SubjectAreaCheckedException | PropertyServerException | org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c713bf6c6aaac145c6f52b93f17eeb511e2fc66c"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDQzMzk5OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1MzowOVrOHltlLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo0NTowMFrOHmHPNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwNjE1Ng==", "bodyText": "Remove please package org.odpi.openmetadata.commonservices.ffdc.exceptions.", "url": "https://github.com/odpi/egeria/pull/3925#discussion_r509306156", "createdAt": "2020-10-21T13:53:09Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaHandler.java", "diffHunk": "@@ -168,10 +253,15 @@ CategorySummary getCategorySummary(String restAPIName,\n     {\n         SubjectAreaOMASAPIResponse<Line> response = new SubjectAreaOMASAPIResponse<>();\n         try {\n+            if (findRequest.getPageSize() == null) {\n+                findRequest.setPageSize(invalidParameterHandler.getMaxPagingSize());\n+            }\n+            invalidParameterHandler.validatePaging(findRequest.getStartingFrom(), findRequest.getPageSize(), methodName);\n             response.addAllResults(getAllLineForEntity(methodName, userId, guid, findRequest));\n-        } catch (UserNotAuthorizedException | SubjectAreaCheckedException | PropertyServerException e) {\n+        } catch (UserNotAuthorizedException | SubjectAreaCheckedException | PropertyServerException | org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException  e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c713bf6c6aaac145c6f52b93f17eeb511e2fc66c"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyNjUxOQ==", "bodyText": "@immmus I was thinking about this, I think that I need to catch this error around the validatePaging and re throw / change the org.odpi.openmetadata.commonservices.ffdc.exception to a Subject area invalid parameter Exception. Do you agree?", "url": "https://github.com/odpi/egeria/pull/3925#discussion_r509726519", "createdAt": "2020-10-21T21:45:00Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaHandler.java", "diffHunk": "@@ -168,10 +253,15 @@ CategorySummary getCategorySummary(String restAPIName,\n     {\n         SubjectAreaOMASAPIResponse<Line> response = new SubjectAreaOMASAPIResponse<>();\n         try {\n+            if (findRequest.getPageSize() == null) {\n+                findRequest.setPageSize(invalidParameterHandler.getMaxPagingSize());\n+            }\n+            invalidParameterHandler.validatePaging(findRequest.getStartingFrom(), findRequest.getPageSize(), methodName);\n             response.addAllResults(getAllLineForEntity(methodName, userId, guid, findRequest));\n-        } catch (UserNotAuthorizedException | SubjectAreaCheckedException | PropertyServerException e) {\n+        } catch (UserNotAuthorizedException | SubjectAreaCheckedException | PropertyServerException | org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException  e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwNjE1Ng=="}, "originalCommit": {"oid": "c713bf6c6aaac145c6f52b93f17eeb511e2fc66c"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDQzNDk0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1MzoxNlrOHltlwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDo1NzoxOFrOHmcJPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwNjMwNA==", "bodyText": "Remove please package org.odpi.openmetadata.commonservices.ffdc.exceptions.", "url": "https://github.com/odpi/egeria/pull/3925#discussion_r509306304", "createdAt": "2020-10-21T13:53:16Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaHandler.java", "diffHunk": "@@ -193,7 +283,11 @@ CategorySummary getCategorySummary(String restAPIName,\n                                            String entityGuid,\n                                            FindRequest findRequest) throws SubjectAreaCheckedException,\n                                                                            PropertyServerException,\n-                                                                           UserNotAuthorizedException {\n+                                                                           UserNotAuthorizedException, org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c713bf6c6aaac145c6f52b93f17eeb511e2fc66c"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2OTA1Mw==", "bodyText": "I have raised issue #3929 to be more consistent with the use of InvalidParameterException(s) and only use the common one", "url": "https://github.com/odpi/egeria/pull/3925#discussion_r510069053", "createdAt": "2020-10-22T10:57:18Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaHandler.java", "diffHunk": "@@ -193,7 +283,11 @@ CategorySummary getCategorySummary(String restAPIName,\n                                            String entityGuid,\n                                            FindRequest findRequest) throws SubjectAreaCheckedException,\n                                                                            PropertyServerException,\n-                                                                           UserNotAuthorizedException {\n+                                                                           UserNotAuthorizedException, org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwNjMwNA=="}, "originalCommit": {"oid": "c713bf6c6aaac145c6f52b93f17eeb511e2fc66c"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDQzNTkzOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaProjectHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1MzoyNFrOHltmWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozNDo0MFrOHmnx7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwNjQ1OQ==", "bodyText": "Remove please package org.odpi.openmetadata.commonservices.ffdc.exceptions.", "url": "https://github.com/odpi/egeria/pull/3925#discussion_r509306459", "createdAt": "2020-10-21T13:53:24Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaProjectHandler.java", "diffHunk": "@@ -155,7 +156,7 @@ public SubjectAreaProjectHandler(OMRSAPIHelper oMRSAPIHelper) {\n             } else {\n                 return response;\n             }\n-        } catch (SubjectAreaCheckedException | PropertyServerException | UserNotAuthorizedException e) {\n+        } catch (SubjectAreaCheckedException | PropertyServerException | UserNotAuthorizedException | org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c713bf6c6aaac145c6f52b93f17eeb511e2fc66c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzODQ4Mg==", "bodyText": "OK will do", "url": "https://github.com/odpi/egeria/pull/3925#discussion_r510038482", "createdAt": "2020-10-22T10:04:08Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaProjectHandler.java", "diffHunk": "@@ -155,7 +156,7 @@ public SubjectAreaProjectHandler(OMRSAPIHelper oMRSAPIHelper) {\n             } else {\n                 return response;\n             }\n-        } catch (SubjectAreaCheckedException | PropertyServerException | UserNotAuthorizedException e) {\n+        } catch (SubjectAreaCheckedException | PropertyServerException | UserNotAuthorizedException | org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwNjQ1OQ=="}, "originalCommit": {"oid": "c713bf6c6aaac145c6f52b93f17eeb511e2fc66c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0MzczMw==", "bodyText": "The problem is that there is already an InvalidParameterExcpetion used by this class which is why I needed to qualify this one with the package. I think the answer is to remove the SubjectArea InvalidParameterException and replace it with the common one and use the InvalidParameterHandler more pervasively int the subject area code. @immmus given this, I suggest we merge this pr as is and then address this issue in an new Git issue", "url": "https://github.com/odpi/egeria/pull/3925#discussion_r510043733", "createdAt": "2020-10-22T10:13:00Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaProjectHandler.java", "diffHunk": "@@ -155,7 +156,7 @@ public SubjectAreaProjectHandler(OMRSAPIHelper oMRSAPIHelper) {\n             } else {\n                 return response;\n             }\n-        } catch (SubjectAreaCheckedException | PropertyServerException | UserNotAuthorizedException e) {\n+        } catch (SubjectAreaCheckedException | PropertyServerException | UserNotAuthorizedException | org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwNjQ1OQ=="}, "originalCommit": {"oid": "c713bf6c6aaac145c6f52b93f17eeb511e2fc66c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1OTY5NQ==", "bodyText": "Okay I understand you", "url": "https://github.com/odpi/egeria/pull/3925#discussion_r510259695", "createdAt": "2020-10-22T15:34:40Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaProjectHandler.java", "diffHunk": "@@ -155,7 +156,7 @@ public SubjectAreaProjectHandler(OMRSAPIHelper oMRSAPIHelper) {\n             } else {\n                 return response;\n             }\n-        } catch (SubjectAreaCheckedException | PropertyServerException | UserNotAuthorizedException e) {\n+        } catch (SubjectAreaCheckedException | PropertyServerException | UserNotAuthorizedException | org.odpi.openmetadata.commonservices.ffdc.exceptions.InvalidParameterException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwNjQ1OQ=="}, "originalCommit": {"oid": "c713bf6c6aaac145c6f52b93f17eeb511e2fc66c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjM0NzI0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaCategoryHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozOToyMVrOHmn_sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjozMjo1MFrOHmqUiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MzIxOQ==", "bodyText": "I really don't like how methods like this are written. But, unfortunately, I do not have time to show you how I would have done it ...\nI am very sorry about this ...", "url": "https://github.com/odpi/egeria/pull/3925#discussion_r510263219", "createdAt": "2020-10-22T15:39:21Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaCategoryHandler.java", "diffHunk": "@@ -423,4 +412,95 @@ private void updateAttributes(Category currentCategory, Category newTerm) {\n \n         return response;\n     }\n+\n+    /**\n+     * Get the terms that are categorized by this Category\n+     *\n+     * @param userId       unique identifier for requesting user, under which the request is performed\n+     * @param guid         guid of the category to get terms\n+     * @param termHandler term handler\n+     * @param startingFrom initial position in the stored list.\n+     * @param pageSize     maximum number of definitions to return on this call.\n+     * @return A list of terms is categorized by this Category\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     * */\n+    public SubjectAreaOMASAPIResponse<Term> getCategorizedTerms(String userId, String guid, SubjectAreaTermHandler termHandler, int startingFrom, Integer pageSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08642e57cae5cdcd171cd0677edd1404034a7324"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NDI5OQ==", "bodyText": "I have to approve this because I have no free time right now, but for you this is an urgent change.", "url": "https://github.com/odpi/egeria/pull/3925#discussion_r510264299", "createdAt": "2020-10-22T15:40:51Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaCategoryHandler.java", "diffHunk": "@@ -423,4 +412,95 @@ private void updateAttributes(Category currentCategory, Category newTerm) {\n \n         return response;\n     }\n+\n+    /**\n+     * Get the terms that are categorized by this Category\n+     *\n+     * @param userId       unique identifier for requesting user, under which the request is performed\n+     * @param guid         guid of the category to get terms\n+     * @param termHandler term handler\n+     * @param startingFrom initial position in the stored list.\n+     * @param pageSize     maximum number of definitions to return on this call.\n+     * @return A list of terms is categorized by this Category\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     * */\n+    public SubjectAreaOMASAPIResponse<Term> getCategorizedTerms(String userId, String guid, SubjectAreaTermHandler termHandler, int startingFrom, Integer pageSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MzIxOQ=="}, "originalCommit": {"oid": "08642e57cae5cdcd171cd0677edd1404034a7324"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMwMTMyMQ==", "bodyText": "Thanks for your understanding @immmus. I am interested in how you would prefer the methods to be written.", "url": "https://github.com/odpi/egeria/pull/3925#discussion_r510301321", "createdAt": "2020-10-22T16:32:50Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/handlers/SubjectAreaCategoryHandler.java", "diffHunk": "@@ -423,4 +412,95 @@ private void updateAttributes(Category currentCategory, Category newTerm) {\n \n         return response;\n     }\n+\n+    /**\n+     * Get the terms that are categorized by this Category\n+     *\n+     * @param userId       unique identifier for requesting user, under which the request is performed\n+     * @param guid         guid of the category to get terms\n+     * @param termHandler term handler\n+     * @param startingFrom initial position in the stored list.\n+     * @param pageSize     maximum number of definitions to return on this call.\n+     * @return A list of terms is categorized by this Category\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     * */\n+    public SubjectAreaOMASAPIResponse<Term> getCategorizedTerms(String userId, String guid, SubjectAreaTermHandler termHandler, int startingFrom, Integer pageSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MzIxOQ=="}, "originalCommit": {"oid": "08642e57cae5cdcd171cd0677edd1404034a7324"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2495, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}