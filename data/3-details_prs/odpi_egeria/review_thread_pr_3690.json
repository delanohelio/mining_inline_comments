{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMDQxNjQx", "number": 3690, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzoxNTozM1rOEnc3FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNTo1MDo0NlrOEntyzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODAyNzczOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzoxNTozM1rOHYDIWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNTozNjowOVrOHYIrtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3OTE2Mg==", "bodyText": "Could you make it like this. I would you it like this.\n    public SubjectAreaOMASAPIResponse<Term> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n        final String methodName = \"createMultipleTermsInAGlossary\";\n        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n        SubjectAreaOMASAPIResponse<Term> response = new SubjectAreaOMASAPIResponse<>();\n        AuditLog auditLog = null;\n        \n        try {\n            SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n            auditLog = instanceHandler.getAuditLog(userId, serverName, methodName);\n            for (Term term : terms) {\n                GlossarySummary glossarySummary = new GlossarySummary();\n                glossarySummary.setGuid(guid);\n                term.setGlossary(glossarySummary);\n                Term createdTerm = clients.terms().create(userId, term);\n                response.addResult(createdTerm);\n            }\n        } catch (Throwable error) {\n            response = getResponseForError(error, auditLog, className, methodName);\n        }\n        restCallLogger.logRESTCallReturn(token, response.toString());\n        return response;\n    }", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r494979162", "createdAt": "2020-09-25T13:15:33Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -361,10 +364,60 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n             SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n             Glossary glossary = clients.glossaries().restore(userId, guid);\n             response.addResult(glossary);\n-        }  catch (Throwable error) {\n-            response =  getResponseForError(error, auditLog, className, methodName);\n+        } catch (Throwable error) {\n+            response = getResponseForError(error, auditLog, className, methodName);\n         }\n         restCallLogger.logRESTCallReturn(token, response.toString());\n         return response;\n     }\n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b44db9fd133a4963c8183ab963a784f9b871fef7"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk4MzU3OQ==", "bodyText": "In general, if I were you, I would solve this problem on the UI by sending several requests to this method -> public SubjectAreaOMASAPIResponse<Term> createTerm(String serverName, String userId, Term suppliedTerm), since in fact we are doing the same thing here.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r494983579", "createdAt": "2020-09-25T13:22:36Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -361,10 +364,60 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n             SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n             Glossary glossary = clients.glossaries().restore(userId, guid);\n             response.addResult(glossary);\n-        }  catch (Throwable error) {\n-            response =  getResponseForError(error, auditLog, className, methodName);\n+        } catch (Throwable error) {\n+            response = getResponseForError(error, auditLog, className, methodName);\n         }\n         restCallLogger.logRESTCallReturn(token, response.toString());\n         return response;\n     }\n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3OTE2Mg=="}, "originalCommit": {"oid": "b44db9fd133a4963c8183ab963a784f9b871fef7"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA1OTQ0NQ==", "bodyText": "@immmus thanks for your feedback.  In terms of your suggestion to do this in the UI, we have had extensive discussions and the consensus is that we should push this sort of business logic into the view server. This makes it very easy to issue one call in the UI. In general this sort of change is what the View services are for, surfacing UI specific artefacts that can be easily consumed.  I started doing this in the UI layer, the code would have been quite involved (I looked at solutions involving promise all, a new context and reducer for this, either way there is state to be managed in the Ui code); it is much neater to have it all in this little java method.\nI notice that you have suggested I change the response type to SubjectAreaOMASAPIResponse  Term . but I need to have the Term responses, so I can tell which ones completed successfully and the errors for those that failed. I notice also you are using the audit log , which I missed , I am looking to rework the fix to use the audit log for errors.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495059445", "createdAt": "2020-09-25T15:18:48Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -361,10 +364,60 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n             SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n             Glossary glossary = clients.glossaries().restore(userId, guid);\n             response.addResult(glossary);\n-        }  catch (Throwable error) {\n-            response =  getResponseForError(error, auditLog, className, methodName);\n+        } catch (Throwable error) {\n+            response = getResponseForError(error, auditLog, className, methodName);\n         }\n         restCallLogger.logRESTCallReturn(token, response.toString());\n         return response;\n     }\n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3OTE2Mg=="}, "originalCommit": {"oid": "b44db9fd133a4963c8183ab963a784f9b871fef7"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3MDEzMw==", "bodyText": "@immmus the new fix is ready for review again.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495070133", "createdAt": "2020-09-25T15:36:09Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -361,10 +364,60 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n             SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n             Glossary glossary = clients.glossaries().restore(userId, guid);\n             response.addResult(glossary);\n-        }  catch (Throwable error) {\n-            response =  getResponseForError(error, auditLog, className, methodName);\n+        } catch (Throwable error) {\n+            response = getResponseForError(error, auditLog, className, methodName);\n         }\n         restCallLogger.logRESTCallReturn(token, response.toString());\n         return response;\n     }\n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3OTE2Mg=="}, "originalCommit": {"oid": "b44db9fd133a4963c8183ab963a784f9b871fef7"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDc3OTA5OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNToxNjoyN1rOHYd2NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwOTowNDoxNlrOHYe-XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxNjg4NA==", "bodyText": "AuditLog is not initialized. You need this call -> auditLog = instanceHandler.getAuditLog(userId, serverName, methodName); in try catch construction.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495416884", "createdAt": "2020-09-26T05:16:27Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -390,10 +390,12 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n         final String methodName = \"createMultipleTermsInAGlossary\";\n+        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n+\n         List<SubjectAreaOMASAPIResponse<Term>> termList = new ArrayList<>();\n         SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> response = new SubjectAreaOMASAPIResponse<>();\n+        AuditLog auditLog = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNDc2Mw==", "bodyText": ":-) Good catch @immmus", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495434763", "createdAt": "2020-09-26T08:56:42Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -390,10 +390,12 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n         final String methodName = \"createMultipleTermsInAGlossary\";\n+        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n+\n         List<SubjectAreaOMASAPIResponse<Term>> termList = new ArrayList<>();\n         SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> response = new SubjectAreaOMASAPIResponse<>();\n+        AuditLog auditLog = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxNjg4NA=="}, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNTM1Nw==", "bodyText": "changed", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495435357", "createdAt": "2020-09-26T09:04:16Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -390,10 +390,12 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n         final String methodName = \"createMultipleTermsInAGlossary\";\n+        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n+\n         List<SubjectAreaOMASAPIResponse<Term>> termList = new ArrayList<>();\n         SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> response = new SubjectAreaOMASAPIResponse<>();\n+        AuditLog auditLog = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxNjg4NA=="}, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDc4MzYyOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNToyMzowNVrOHYd4Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwOTowNDowNlrOHYe-TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxNzM5OA==", "bodyText": "You are not need this collection. Use response.addResult(termResponse); instead of code in 413 line and remove collection.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495417398", "createdAt": "2020-09-26T05:23:05Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -361,8 +364,57 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n             SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n             Glossary glossary = clients.glossaries().restore(userId, guid);\n             response.addResult(glossary);\n-        }  catch (Throwable error) {\n-            response =  getResponseForError(error, auditLog, className, methodName);\n+        } catch (Throwable error) {\n+            response = getResponseForError(error, auditLog, className, methodName);\n+        }\n+        restCallLogger.logRESTCallReturn(token, response.toString());\n+        return response;\n+    }\n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n+        final String methodName = \"createMultipleTermsInAGlossary\";\n+        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n+\n+        List<SubjectAreaOMASAPIResponse<Term>> termList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNTM0MA==", "bodyText": "changed", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495435340", "createdAt": "2020-09-26T09:04:06Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -361,8 +364,57 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n             SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n             Glossary glossary = clients.glossaries().restore(userId, guid);\n             response.addResult(glossary);\n-        }  catch (Throwable error) {\n-            response =  getResponseForError(error, auditLog, className, methodName);\n+        } catch (Throwable error) {\n+            response = getResponseForError(error, auditLog, className, methodName);\n+        }\n+        restCallLogger.logRESTCallReturn(token, response.toString());\n+        return response;\n+    }\n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n+        final String methodName = \"createMultipleTermsInAGlossary\";\n+        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n+\n+        List<SubjectAreaOMASAPIResponse<Term>> termList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxNzM5OA=="}, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDc4OTYzOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNTozMjoyMVrOHYd65g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwOTozMzo0MlrOHYfIEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxODA4Ng==", "bodyText": "I think not need this here because we already doing this action in SubjectAreaTermHandler during create term on the server. We also dont do this action in GlossaryAuthorViewTermRESTServices during create term.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495418086", "createdAt": "2020-09-26T05:32:21Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -361,8 +364,57 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n             SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n             Glossary glossary = clients.glossaries().restore(userId, guid);\n             response.addResult(glossary);\n-        }  catch (Throwable error) {\n-            response =  getResponseForError(error, auditLog, className, methodName);\n+        } catch (Throwable error) {\n+            response = getResponseForError(error, auditLog, className, methodName);\n+        }\n+        restCallLogger.logRESTCallReturn(token, response.toString());\n+        return response;\n+    }\n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n+        final String methodName = \"createMultipleTermsInAGlossary\";\n+        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n+\n+        List<SubjectAreaOMASAPIResponse<Term>> termList = new ArrayList<>();\n+        SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> response = new SubjectAreaOMASAPIResponse<>();\n+        AuditLog auditLog = null;\n+\n+        try {\n+\n+            SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n+            for (Term term : terms) {\n+                GlossarySummary glossarySummary = new GlossarySummary();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNTY2Mg==", "bodyText": "The idea was that the terms that are submitted need not have the glossary set in them, so I could set it here. This is an API under a particular glossary so all the terms should be associated with that glossary, which is why I have done it this way.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495435662", "createdAt": "2020-09-26T09:07:57Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -361,8 +364,57 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n             SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n             Glossary glossary = clients.glossaries().restore(userId, guid);\n             response.addResult(glossary);\n-        }  catch (Throwable error) {\n-            response =  getResponseForError(error, auditLog, className, methodName);\n+        } catch (Throwable error) {\n+            response = getResponseForError(error, auditLog, className, methodName);\n+        }\n+        restCallLogger.logRESTCallReturn(token, response.toString());\n+        return response;\n+    }\n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n+        final String methodName = \"createMultipleTermsInAGlossary\";\n+        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n+\n+        List<SubjectAreaOMASAPIResponse<Term>> termList = new ArrayList<>();\n+        SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> response = new SubjectAreaOMASAPIResponse<>();\n+        AuditLog auditLog = null;\n+\n+        try {\n+\n+            SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n+            for (Term term : terms) {\n+                GlossarySummary glossarySummary = new GlossarySummary();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxODA4Ng=="}, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNzg0Mg==", "bodyText": "I think it is not good idea because bring additional responsibility to this method. He already implies that all terms will be created in this glossary...", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495437842", "createdAt": "2020-09-26T09:33:42Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -361,8 +364,57 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n             SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n             Glossary glossary = clients.glossaries().restore(userId, guid);\n             response.addResult(glossary);\n-        }  catch (Throwable error) {\n-            response =  getResponseForError(error, auditLog, className, methodName);\n+        } catch (Throwable error) {\n+            response = getResponseForError(error, auditLog, className, methodName);\n+        }\n+        restCallLogger.logRESTCallReturn(token, response.toString());\n+        return response;\n+    }\n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n+        final String methodName = \"createMultipleTermsInAGlossary\";\n+        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n+\n+        List<SubjectAreaOMASAPIResponse<Term>> termList = new ArrayList<>();\n+        SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> response = new SubjectAreaOMASAPIResponse<>();\n+        AuditLog auditLog = null;\n+\n+        try {\n+\n+            SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n+            for (Term term : terms) {\n+                GlossarySummary glossarySummary = new GlossarySummary();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxODA4Ng=="}, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDgwMjA2OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-spring/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/server/GlossaryAuthorViewGlossaryRESTResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNTo1MDo0NlrOHYeAqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwOTowODo0NFrOHYe_yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxOTU2MQ==", "bodyText": "You need remove parameter \"guid\" after changes.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495419561", "createdAt": "2020-09-26T05:50:46Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-spring/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/server/GlossaryAuthorViewGlossaryRESTResource.java", "diffHunk": "@@ -164,6 +166,33 @@ public GlossaryAuthorViewGlossaryRESTResource() {\n         return restAPI.getGlossaryRelationships(serverName, userId, guid, asOfTime, offset, pageSize, sequencingOrder, sequencingProperty);\n     }\n \n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/{guid}/terms\")\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(@PathVariable String serverName,\n+                                                                                                   @PathVariable String userId,\n+                                                                                                   @PathVariable String guid,\n+                                                                                                   @RequestBody  Term[] terms\n+                                                                                                  ) {\n+        return restAPI.createMultipleTermsInAGlossary(serverName, userId, guid, terms);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNTcyMQ==", "bodyText": "As above - I think we need it.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495435721", "createdAt": "2020-09-26T09:08:44Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-spring/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/server/GlossaryAuthorViewGlossaryRESTResource.java", "diffHunk": "@@ -164,6 +166,33 @@ public GlossaryAuthorViewGlossaryRESTResource() {\n         return restAPI.getGlossaryRelationships(serverName, userId, guid, asOfTime, offset, pageSize, sequencingOrder, sequencingProperty);\n     }\n \n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/{guid}/terms\")\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(@PathVariable String serverName,\n+                                                                                                   @PathVariable String userId,\n+                                                                                                   @PathVariable String guid,\n+                                                                                                   @RequestBody  Term[] terms\n+                                                                                                  ) {\n+        return restAPI.createMultipleTermsInAGlossary(serverName, userId, guid, terms);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxOTU2MQ=="}, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2554, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}