{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMDQxNjQx", "number": 3690, "title": "#3660 Adding multiple term create view API", "bodyText": "Signed-off-by: David Radley david_radley@uk.ibm.com", "createdAt": "2020-09-25T12:33:09Z", "url": "https://github.com/odpi/egeria/pull/3690", "merged": true, "mergeCommit": {"oid": "2b19fe3d4a9063c166431bd8800005b728938f20"}, "closed": true, "closedAt": "2020-09-26T10:04:03Z", "author": {"login": "davidradl"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMU_XBAH2gAyNDkzMDQxNjQxOmVmMTljZGNmNTFiMGIxOTYyOTQ3MDVhODYwNDZhYzc2MWUxM2VlZGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMmnRigH2gAyNDkzMDQxNjQxOjkyZmNmMDQ5ZWQwOTIzYjZhNjJjZmVjNTU3MTI3YzY0NzI0NzY3MjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ef19cdcf51b0b196294705a86046ac761e13eedf", "author": {"user": {"login": "davidradl", "name": "David Radley"}}, "url": "https://github.com/odpi/egeria/commit/ef19cdcf51b0b196294705a86046ac761e13eedf", "committedDate": "2020-09-25T12:31:38Z", "message": "#3660 Adding multiple term create view API\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "840cee61bec66c38b2e37496e382f139828e1c47", "author": {"user": {"login": "davidradl", "name": "David Radley"}}, "url": "https://github.com/odpi/egeria/commit/840cee61bec66c38b2e37496e382f139828e1c47", "committedDate": "2020-09-25T12:33:43Z", "message": "Merge branch 'master' of https://github.com/odpi/egeria into git3660"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b44db9fd133a4963c8183ab963a784f9b871fef7", "author": {"user": {"login": "davidradl", "name": "David Radley"}}, "url": "https://github.com/odpi/egeria/commit/b44db9fd133a4963c8183ab963a784f9b871fef7", "committedDate": "2020-09-25T12:48:21Z", "message": "#3660 Adding multiple term create view API\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NDA3ODU4", "url": "https://github.com/odpi/egeria/pull/3690#pullrequestreview-496407858", "createdAt": "2020-09-25T13:15:33Z", "commit": {"oid": "b44db9fd133a4963c8183ab963a784f9b871fef7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzoxNTozM1rOHYDIWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzoxNTozM1rOHYDIWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3OTE2Mg==", "bodyText": "Could you make it like this. I would you it like this.\n    public SubjectAreaOMASAPIResponse<Term> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n        final String methodName = \"createMultipleTermsInAGlossary\";\n        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n        SubjectAreaOMASAPIResponse<Term> response = new SubjectAreaOMASAPIResponse<>();\n        AuditLog auditLog = null;\n        \n        try {\n            SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n            auditLog = instanceHandler.getAuditLog(userId, serverName, methodName);\n            for (Term term : terms) {\n                GlossarySummary glossarySummary = new GlossarySummary();\n                glossarySummary.setGuid(guid);\n                term.setGlossary(glossarySummary);\n                Term createdTerm = clients.terms().create(userId, term);\n                response.addResult(createdTerm);\n            }\n        } catch (Throwable error) {\n            response = getResponseForError(error, auditLog, className, methodName);\n        }\n        restCallLogger.logRESTCallReturn(token, response.toString());\n        return response;\n    }", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r494979162", "createdAt": "2020-09-25T13:15:33Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -361,10 +364,60 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n             SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n             Glossary glossary = clients.glossaries().restore(userId, guid);\n             response.addResult(glossary);\n-        }  catch (Throwable error) {\n-            response =  getResponseForError(error, auditLog, className, methodName);\n+        } catch (Throwable error) {\n+            response = getResponseForError(error, auditLog, className, methodName);\n         }\n         restCallLogger.logRESTCallReturn(token, response.toString());\n         return response;\n     }\n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b44db9fd133a4963c8183ab963a784f9b871fef7"}, "originalPosition": 202}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dec1ca3ac62fa88d54d27325436de84063ea2b6", "author": {"user": {"login": "davidradl", "name": "David Radley"}}, "url": "https://github.com/odpi/egeria/commit/2dec1ca3ac62fa88d54d27325436de84063ea2b6", "committedDate": "2020-09-25T15:19:07Z", "message": "Merge branch 'master' of https://github.com/odpi/egeria into git3660"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec", "author": {"user": {"login": "davidradl", "name": "David Radley"}}, "url": "https://github.com/odpi/egeria/commit/9c54b13260127ead44b47581731fef03944a48ec", "committedDate": "2020-09-25T15:35:27Z", "message": "#3660 add audit log for error in response to review feedback\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTQyNTEw", "url": "https://github.com/odpi/egeria/pull/3690#pullrequestreview-496942510", "createdAt": "2020-09-26T05:16:27Z", "commit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNToxNjoyN1rOHYd2NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNToxNjoyN1rOHYd2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxNjg4NA==", "bodyText": "AuditLog is not initialized. You need this call -> auditLog = instanceHandler.getAuditLog(userId, serverName, methodName); in try catch construction.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495416884", "createdAt": "2020-09-26T05:16:27Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -390,10 +390,12 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n         final String methodName = \"createMultipleTermsInAGlossary\";\n+        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n+\n         List<SubjectAreaOMASAPIResponse<Term>> termList = new ArrayList<>();\n         SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> response = new SubjectAreaOMASAPIResponse<>();\n+        AuditLog auditLog = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTQyODgz", "url": "https://github.com/odpi/egeria/pull/3690#pullrequestreview-496942883", "createdAt": "2020-09-26T05:23:05Z", "commit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNToyMzowNVrOHYd4Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNToyMzowNVrOHYd4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxNzM5OA==", "bodyText": "You are not need this collection. Use response.addResult(termResponse); instead of code in 413 line and remove collection.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495417398", "createdAt": "2020-09-26T05:23:05Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -361,8 +364,57 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n             SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n             Glossary glossary = clients.glossaries().restore(userId, guid);\n             response.addResult(glossary);\n-        }  catch (Throwable error) {\n-            response =  getResponseForError(error, auditLog, className, methodName);\n+        } catch (Throwable error) {\n+            response = getResponseForError(error, auditLog, className, methodName);\n+        }\n+        restCallLogger.logRESTCallReturn(token, response.toString());\n+        return response;\n+    }\n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n+        final String methodName = \"createMultipleTermsInAGlossary\";\n+        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n+\n+        List<SubjectAreaOMASAPIResponse<Term>> termList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 206}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTQzMzU3", "url": "https://github.com/odpi/egeria/pull/3690#pullrequestreview-496943357", "createdAt": "2020-09-26T05:32:20Z", "commit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNTozMjoyMVrOHYd65g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNTozMjoyMVrOHYd65g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxODA4Ng==", "bodyText": "I think not need this here because we already doing this action in SubjectAreaTermHandler during create term on the server. We also dont do this action in GlossaryAuthorViewTermRESTServices during create term.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495418086", "createdAt": "2020-09-26T05:32:21Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-server/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/services/GlossaryAuthorViewGlossaryRESTServices.java", "diffHunk": "@@ -361,8 +364,57 @@ public GlossaryAuthorViewGlossaryRESTServices() {\n             SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n             Glossary glossary = clients.glossaries().restore(userId, guid);\n             response.addResult(glossary);\n-        }  catch (Throwable error) {\n-            response =  getResponseForError(error, auditLog, className, methodName);\n+        } catch (Throwable error) {\n+            response = getResponseForError(error, auditLog, className, methodName);\n+        }\n+        restCallLogger.logRESTCallReturn(token, response.toString());\n+        return response;\n+    }\n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(String serverName, String userId, String guid, Term[] terms) {\n+        final String methodName = \"createMultipleTermsInAGlossary\";\n+        RESTCallToken token = restCallLogger.logRESTCall(serverName, userId, methodName);\n+\n+        List<SubjectAreaOMASAPIResponse<Term>> termList = new ArrayList<>();\n+        SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> response = new SubjectAreaOMASAPIResponse<>();\n+        AuditLog auditLog = null;\n+\n+        try {\n+\n+            SubjectAreaNodeClients clients = instanceHandler.getSubjectAreaNodeClients(serverName, userId, methodName);\n+            for (Term term : terms) {\n+                GlossarySummary glossarySummary = new GlossarySummary();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 214}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTQ0MzQ2", "url": "https://github.com/odpi/egeria/pull/3690#pullrequestreview-496944346", "createdAt": "2020-09-26T05:50:46Z", "commit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNTo1MDo0NlrOHYeAqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNTo1MDo0NlrOHYeAqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxOTU2MQ==", "bodyText": "You need remove parameter \"guid\" after changes.", "url": "https://github.com/odpi/egeria/pull/3690#discussion_r495419561", "createdAt": "2020-09-26T05:50:46Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/view-services/glossary-author-view/glossary-author-view-spring/src/main/java/org/odpi/openmetadata/viewservices/glossaryauthor/server/GlossaryAuthorViewGlossaryRESTResource.java", "diffHunk": "@@ -164,6 +166,33 @@ public GlossaryAuthorViewGlossaryRESTResource() {\n         return restAPI.getGlossaryRelationships(serverName, userId, guid, asOfTime, offset, pageSize, sequencingOrder, sequencingProperty);\n     }\n \n+    /**\n+     * Create the supplied list of Terms in the glossary, identified by the supplied guid. Each term does not need to specify a glossary.\n+     *\n+     * @param serverName       local UI server name\n+     * @param userId           user identifier\n+     * @param guid             guid of the glossary under which the Terms will be created\n+     * @param terms            terms to create\n+     * @return a response which when successful contains a list of the responses from the Term creates (successful or otherwise). The order of the responses is the same as the supplied terms order.\n+     *\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UnrecognizedGUIDException            the supplied guid was not recognised</li>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> FunctionNotSupportedException        Function not supported</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> MetadataServerUncontactableException not able to communicate with a Metadata respository service.</li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/{guid}/terms\")\n+    public SubjectAreaOMASAPIResponse<SubjectAreaOMASAPIResponse<Term>> createMultipleTermsInAGlossary(@PathVariable String serverName,\n+                                                                                                   @PathVariable String userId,\n+                                                                                                   @PathVariable String guid,\n+                                                                                                   @RequestBody  Term[] terms\n+                                                                                                  ) {\n+        return restAPI.createMultipleTermsInAGlossary(serverName, userId, guid, terms);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c54b13260127ead44b47581731fef03944a48ec"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e4967155c24f238c3fbf318072f05aacf3ae549", "author": {"user": {"login": "davidradl", "name": "David Radley"}}, "url": "https://github.com/odpi/egeria/commit/6e4967155c24f238c3fbf318072f05aacf3ae549", "committedDate": "2020-09-26T08:57:48Z", "message": "Merge branch 'master' of https://github.com/odpi/egeria into git3660"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92fcf049ed0923b6a62cfec557127c6472476724", "author": {"user": {"login": "davidradl", "name": "David Radley"}}, "url": "https://github.com/odpi/egeria/commit/92fcf049ed0923b6a62cfec557127c6472476724", "committedDate": "2020-09-26T09:03:37Z", "message": "#3660 initialise audit log and remove use of collection as per review feedback\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3900, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}