{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MDU2NDI4", "number": 2638, "title": "1876 infinite loop fix ", "bodyText": "This fix is for #1876", "createdAt": "2020-02-24T15:34:52Z", "url": "https://github.com/odpi/egeria/pull/2638", "merged": true, "mergeCommit": {"oid": "70c4d4364ae94aa5348c3116596301ff0b47e9fd"}, "closed": true, "closedAt": "2020-03-06T08:20:28Z", "author": {"login": "wbittles"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHfozxgBqjMwNjU5MjYxMzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKzPGzgH2gAyMzc5MDU2NDI4OmIwMDgyZWYxYjhhN2U1ZDQzZjcxYmU5ZmZmMDU5YjAyOTk5YmZlNjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eed34f3f35d7b083ae539db9560d058d556ec61d", "author": {"user": {"login": "wbittles", "name": "William Bittles"}}, "url": "https://github.com/odpi/egeria/commit/eed34f3f35d7b083ae539db9560d058d556ec61d", "committedDate": "2020-02-24T15:25:32Z", "message": "merge conflicts\n\nSigned-off-by: William Bittles <wbittles@uk.ibm.com>"}, "afterCommit": {"oid": "2f59feefa4563f615206695d9aeb3b93da1af5a2", "author": {"user": {"login": "wbittles", "name": "William Bittles"}}, "url": "https://github.com/odpi/egeria/commit/2f59feefa4563f615206695d9aeb3b93da1af5a2", "committedDate": "2020-02-24T15:54:30Z", "message": "merge conflicts\n\nSigned-off-by: William Bittles <wbittles@uk.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTM0MTM3", "url": "https://github.com/odpi/egeria/pull/2638#pullrequestreview-363534137", "createdAt": "2020-02-24T16:41:09Z", "commit": {"oid": "2f59feefa4563f615206695d9aeb3b93da1af5a2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjo0MTowOVrOFtnn2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjo0OToxM1rOFtn7Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3OTQxNg==", "bodyText": "Though this occurs at shutdown, could it occur in other situations too?\nFor example another thread could use wakeup() against this thread - though I think we do?\nI'm wondering if we should pause and retry ... though at shutdown I'd be concerned we wait too long\nIf we really only think wakeup will be at shutdown then this handling is ok-ish, but it's one route out of the method where we don't log an audit message at all, which probably would be desirable?", "url": "https://github.com/odpi/egeria/pull/2638#discussion_r383379416", "createdAt": "2020-02-24T16:41:09Z", "author": {"login": "planetf1"}, "path": "open-metadata-implementation/adapters/open-connectors/event-bus-connectors/open-metadata-topic-connectors/kafka-open-metadata-topic-connector/src/main/java/org/odpi/openmetadata/adapters/eventbus/topic/kafka/KafkaOpenMetadataEventProducer.java", "diffHunk": "@@ -97,58 +96,97 @@ private void publishEvent(String event) throws ConnectorCheckedException\n     {\n         final String methodName = \"publishEvent\";\n \n-        try\n-        {\n-            log.debug(\"Sending message {0}\" + event);\n-            ProducerRecord<String, String> record = new ProducerRecord<>(topicName, localServerId, event);\n-            producer.send(record).get();\n-            messageSendCount++;\n-        }\n-        catch (ExecutionException | CancellationException | InterruptedException error)\n-        {\n-        /*\n-         * Issue #1876 moved the retry logic into the kafka producer\n-         */\n-            log.debug(\"Kafka had trouble sending event: \" + event + \"exception message is \" + error.getMessage());\n-            KafkaOpenMetadataTopicConnectorAuditCode auditCode;\n-            auditCode = KafkaOpenMetadataTopicConnectorAuditCode.EVENT_SEND_IN_ERROR_LOOP;\n-            auditLog.logRecord(methodName,\n-                              auditCode.getLogMessageId(),\n-                              auditCode.getSeverity(),\n-                              auditCode.getFormattedLogMessage(topicName,\n-                                                                Long.toString(messageSendCount),\n-                                                                Long.toString(this.getSendBufferSize()),\n-                                                                error.getMessage()),\n-                                                                null,\n-                                                                auditCode.getSystemAction(),\n-                                                                auditCode.getUserAction());\n-        }\n-        catch (WakeupException error)\n-        {\n-            log.error(\"Wake up for shut down \" + error.toString());\n-        }\n-        catch (Throwable error)\n-        {\n-            log.error(\"Exception in sendEvent \" + error.toString());\n-            KafkaOpenMetadataTopicConnectorErrorCode errorCode = KafkaOpenMetadataTopicConnectorErrorCode.ERROR_SENDING_EVENT;\n-            String errorMessage = errorCode.getErrorMessageId() + errorCode.getFormattedErrorMessage(error.getClass().getName(),\n-                                                                                                     topicName,\n-                                                                                                     error.getMessage());\n-\n-            throw new ConnectorCheckedException(errorCode.getHTTPErrorCode(),\n-                                                this.getClass().getName(),\n-                                                methodName,\n-                                                errorMessage,\n-                                                errorCode.getSystemAction(),\n-                                                errorCode.getUserAction(),\n-                                                error);\n-        }\n-        finally\n+        boolean                  eventSent = false;\n+        long                     eventRetryCount = 0;\n+\n+        while (!eventSent)\n         {\n-            /*\n-             * Producers have a thread and an in memory buffer\n-             */\n-            producer.flush();\n+            try\n+            {\n+                log.debug(\"Sending message {0}\" + event);\n+                ProducerRecord<String, String> record = new ProducerRecord<>(topicName, localServerId, event);\n+                producer.send(record).get();\n+                eventSent = true;\n+                messageSendCount++;\n+            }\n+            catch (ExecutionException error)\n+            {\n+                /*\n+                 * This may be a simple timeout or something else more\n+                 */\n+                log.debug(\"Kafka had trouble sending event: \" + event + \"exception message is \" + error.getMessage());\n+\n+                if( !isExceptionRetryable(error)) {\n+                    /* kafka thinks this isn't a retryable problem */\n+                    /* so let the caller try */\n+                    log.error(\"Exception in sendEvent \" + error.toString());\n+                    KafkaOpenMetadataTopicConnectorErrorCode errorCode = KafkaOpenMetadataTopicConnectorErrorCode.ERROR_SENDING_EVENT;\n+                    String errorMessage = errorCode.getErrorMessageId() + errorCode.getFormattedErrorMessage(error.getClass().getName(),\n+                            topicName,\n+                            error.getMessage());\n+\n+                    throw new ConnectorCheckedException(errorCode.getHTTPErrorCode(),\n+                            this.getClass().getName(),\n+                            methodName,\n+                            errorMessage,\n+                            errorCode.getSystemAction(),\n+                            errorCode.getUserAction(),\n+                            error);\n+                }\n+                if (eventRetryCount == 10)\n+                {\n+                    /* we've retried now let the caller retry */\n+                    break;\n+                }\n+                else\n+                {\n+                    if (eventRetryCount == 0)\n+                    {\n+                        KafkaOpenMetadataTopicConnectorAuditCode auditCode;\n+\n+                        auditCode = KafkaOpenMetadataTopicConnectorAuditCode.EVENT_SEND_IN_ERROR_LOOP;\n+                        auditLog.logRecord(methodName,\n+                                           auditCode.getLogMessageId(),\n+                                           auditCode.getSeverity(),\n+                                           auditCode.getFormattedLogMessage(topicName,\n+                                                                            Long.toString(messageSendCount),\n+                                                                            Long.toString(this.getSendBufferSize()),\n+                                                                            error.getMessage()),\n+                                           null,\n+                                           auditCode.getSystemAction(),\n+                                           auditCode.getUserAction());\n+                    }\n+\n+                    eventRetryCount++;\n+                }\n+            }\n+            catch (WakeupException error)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f59feefa4563f615206695d9aeb3b93da1af5a2"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4MTgzMg==", "bodyText": "I noticed in this method we are using time in 2 different units - around line 39. Seconds for recoverytime, milliseconds for regular sleep time. though handled correctly would be better to use consistent units?", "url": "https://github.com/odpi/egeria/pull/2638#discussion_r383381832", "createdAt": "2020-02-24T16:45:13Z", "author": {"login": "planetf1"}, "path": "open-metadata-implementation/adapters/open-connectors/event-bus-connectors/open-metadata-topic-connectors/kafka-open-metadata-topic-connector/src/main/java/org/odpi/openmetadata/adapters/eventbus/topic/kafka/KafkaOpenMetadataEventProducer.java", "diffHunk": "@@ -206,11 +244,19 @@ public void run()\n             catch (Throwable   error)\n             {\n                 log.error(\"Bad exception from sending events \" + error.getMessage());\n-                this.recoverAfterError();\n+\n+                if( isExceptionRetryable(error) ) {\n+                    this.recoverAfterError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f59feefa4563f615206695d9aeb3b93da1af5a2"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4NDQxMA==", "bodyText": "I notice the text for this event says the message isn't sent. True in terms of this connector's responsibility, but if queueing occurs further up the stack the message is confusing to the audit log reviewer", "url": "https://github.com/odpi/egeria/pull/2638#discussion_r383384410", "createdAt": "2020-02-24T16:49:13Z", "author": {"login": "planetf1"}, "path": "open-metadata-implementation/adapters/open-connectors/event-bus-connectors/open-metadata-topic-connectors/kafka-open-metadata-topic-connector/src/main/java/org/odpi/openmetadata/adapters/eventbus/topic/kafka/KafkaOpenMetadataEventProducer.java", "diffHunk": "@@ -97,58 +96,97 @@ private void publishEvent(String event) throws ConnectorCheckedException\n     {\n         final String methodName = \"publishEvent\";\n \n-        try\n-        {\n-            log.debug(\"Sending message {0}\" + event);\n-            ProducerRecord<String, String> record = new ProducerRecord<>(topicName, localServerId, event);\n-            producer.send(record).get();\n-            messageSendCount++;\n-        }\n-        catch (ExecutionException | CancellationException | InterruptedException error)\n-        {\n-        /*\n-         * Issue #1876 moved the retry logic into the kafka producer\n-         */\n-            log.debug(\"Kafka had trouble sending event: \" + event + \"exception message is \" + error.getMessage());\n-            KafkaOpenMetadataTopicConnectorAuditCode auditCode;\n-            auditCode = KafkaOpenMetadataTopicConnectorAuditCode.EVENT_SEND_IN_ERROR_LOOP;\n-            auditLog.logRecord(methodName,\n-                              auditCode.getLogMessageId(),\n-                              auditCode.getSeverity(),\n-                              auditCode.getFormattedLogMessage(topicName,\n-                                                                Long.toString(messageSendCount),\n-                                                                Long.toString(this.getSendBufferSize()),\n-                                                                error.getMessage()),\n-                                                                null,\n-                                                                auditCode.getSystemAction(),\n-                                                                auditCode.getUserAction());\n-        }\n-        catch (WakeupException error)\n-        {\n-            log.error(\"Wake up for shut down \" + error.toString());\n-        }\n-        catch (Throwable error)\n-        {\n-            log.error(\"Exception in sendEvent \" + error.toString());\n-            KafkaOpenMetadataTopicConnectorErrorCode errorCode = KafkaOpenMetadataTopicConnectorErrorCode.ERROR_SENDING_EVENT;\n-            String errorMessage = errorCode.getErrorMessageId() + errorCode.getFormattedErrorMessage(error.getClass().getName(),\n-                                                                                                     topicName,\n-                                                                                                     error.getMessage());\n-\n-            throw new ConnectorCheckedException(errorCode.getHTTPErrorCode(),\n-                                                this.getClass().getName(),\n-                                                methodName,\n-                                                errorMessage,\n-                                                errorCode.getSystemAction(),\n-                                                errorCode.getUserAction(),\n-                                                error);\n-        }\n-        finally\n+        boolean                  eventSent = false;\n+        long                     eventRetryCount = 0;\n+\n+        while (!eventSent)\n         {\n-            /*\n-             * Producers have a thread and an in memory buffer\n-             */\n-            producer.flush();\n+            try\n+            {\n+                log.debug(\"Sending message {0}\" + event);\n+                ProducerRecord<String, String> record = new ProducerRecord<>(topicName, localServerId, event);\n+                producer.send(record).get();\n+                eventSent = true;\n+                messageSendCount++;\n+            }\n+            catch (ExecutionException error)\n+            {\n+                /*\n+                 * This may be a simple timeout or something else more\n+                 */\n+                log.debug(\"Kafka had trouble sending event: \" + event + \"exception message is \" + error.getMessage());\n+\n+                if( !isExceptionRetryable(error)) {\n+                    /* kafka thinks this isn't a retryable problem */\n+                    /* so let the caller try */\n+                    log.error(\"Exception in sendEvent \" + error.toString());\n+                    KafkaOpenMetadataTopicConnectorErrorCode errorCode = KafkaOpenMetadataTopicConnectorErrorCode.ERROR_SENDING_EVENT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f59feefa4563f615206695d9aeb3b93da1af5a2"}, "originalPosition": 105}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f59feefa4563f615206695d9aeb3b93da1af5a2", "author": {"user": {"login": "wbittles", "name": "William Bittles"}}, "url": "https://github.com/odpi/egeria/commit/2f59feefa4563f615206695d9aeb3b93da1af5a2", "committedDate": "2020-02-24T15:54:30Z", "message": "merge conflicts\n\nSigned-off-by: William Bittles <wbittles@uk.ibm.com>"}, "afterCommit": {"oid": "144aae98179f1f98836da5e834e83bcb286b006a", "author": {"user": {"login": "wbittles", "name": "William Bittles"}}, "url": "https://github.com/odpi/egeria/commit/144aae98179f1f98836da5e834e83bcb286b006a", "committedDate": "2020-02-24T16:57:46Z", "message": "merge conflicts\n\nSigned-off-by: William Bittles <wbittles@uk.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fd18ccf1d528bc8c5aa33e4f3185a1d32d4ef9f", "author": {"user": {"login": "wbittles", "name": "William Bittles"}}, "url": "https://github.com/odpi/egeria/commit/7fd18ccf1d528bc8c5aa33e4f3185a1d32d4ef9f", "committedDate": "2020-03-04T16:05:54Z", "message": "Revert \"#1876 Fix issue of infinite loop\"\n\nThis reverts commit 0321cbd1c4062706bfb0349445b2640d48c6ae3c.\n\nSigned-off-by: William Bittles <wbittles@uk.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d4d873356c6a8e5f3c79466dd8c55a31e19a21b", "author": {"user": {"login": "wbittles", "name": "William Bittles"}}, "url": "https://github.com/odpi/egeria/commit/2d4d873356c6a8e5f3c79466dd8c55a31e19a21b", "committedDate": "2020-03-04T16:09:25Z", "message": "fix infinite loop while sending message #1876\n\nSigned-off-by: William Bittles <wbittles@uk.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d0711f6054fd254855c46dc7cff01d5485341cc", "author": {"user": {"login": "wbittles", "name": "William Bittles"}}, "url": "https://github.com/odpi/egeria/commit/5d0711f6054fd254855c46dc7cff01d5485341cc", "committedDate": "2020-03-04T16:19:52Z", "message": "Merge branch 'master' of https://github.com/odpi/egeria into it-infrastructure"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a6965a2859650e2be7d9193c6f64691d76e5aa8", "author": {"user": {"login": "wbittles", "name": "William Bittles"}}, "url": "https://github.com/odpi/egeria/commit/4a6965a2859650e2be7d9193c6f64691d76e5aa8", "committedDate": "2020-02-26T10:57:58Z", "message": "Merge branch 'master' into it-infrastructure"}, "afterCommit": {"oid": "5d0711f6054fd254855c46dc7cff01d5485341cc", "author": {"user": {"login": "wbittles", "name": "William Bittles"}}, "url": "https://github.com/odpi/egeria/commit/5d0711f6054fd254855c46dc7cff01d5485341cc", "committedDate": "2020-03-04T16:19:52Z", "message": "Merge branch 'master' of https://github.com/odpi/egeria into it-infrastructure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0082ef1b8a7e5d43f71be9fff059b02999bfe65", "author": {"user": {"login": "mandy-chessell", "name": "Mandy Chessell"}}, "url": "https://github.com/odpi/egeria/commit/b0082ef1b8a7e5d43f71be9fff059b02999bfe65", "committedDate": "2020-03-05T22:26:59Z", "message": "Merge branch 'master' into it-infrastructure"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3777, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}