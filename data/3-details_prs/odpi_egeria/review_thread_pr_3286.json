{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyOTc3Nzky", "number": 3286, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowNzoyMFrOEOkv3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNToyNDo1M1rOEQrPBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzE3NTk4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowNzoyMFrOGxzATw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1MTo0N1rOGyxXxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2OTA3MQ==", "bodyText": "Can we change object to Node as this is more accurate", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454869071", "createdAt": "2020-07-15T08:07:20Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1MjM4NQ==", "bodyText": "In this case, there may be other objects (relationship for example and etc) and not only node.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455652385", "createdAt": "2020-07-16T09:29:05Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2OTA3MQ=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc0OTY2Nw==", "bodyText": "apologies for misreading. I suggest we say Node or Line instead of object,  then it is very explicit and we do not have to use the word object - which is very generic so does not add meaning.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455749667", "createdAt": "2020-07-16T12:31:02Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2OTA3MQ=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDg4NQ==", "bodyText": "If you do not like Node or Line, instead of object. How about Glossary Artifact ?", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455890885", "createdAt": "2020-07-16T15:51:47Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2OTA3MQ=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzE3NzMxOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowNzo0M1rOGxzBJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOToyOTo0MVrOGyi1jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2OTI4NA==", "bodyText": "object => node", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454869284", "createdAt": "2020-07-15T08:07:43Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MDY0NA==", "bodyText": "by this do you mean a unique user identifier is the qualified name. This was optional and if not specified we talked of defaulting it. I assume you are not talking about creating a node specifying a guid, this is definitely not required.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454870644", "createdAt": "2020-07-15T08:10:09Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2OTI4NA=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1Mjc1MQ==", "bodyText": "Analogically.  In this case, there may be other objects (relationship for example and etc) and not only node.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455652751", "createdAt": "2020-07-16T09:29:41Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2OTI4NA=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzE5MjczOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxMjowMFrOGxzKjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOToyOTo1MVrOGyi2AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MTY5NA==", "bodyText": "I think we should have paging on this on call. Or at least a warning for now - getting all Terms when there are 100s of thousands will lill the system.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454871694", "createdAt": "2020-07-15T08:12:00Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to search all objects of the current type T.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MjA3NQ==", "bodyText": "The method is called find but we talk about search we should be consistent", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454872075", "createdAt": "2020-07-15T08:12:40Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to search all objects of the current type T.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MTY5NA=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1Mjg2NQ==", "bodyText": "Okay.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455652865", "createdAt": "2020-07-16T09:29:51Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to search all objects of the current type T.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MTY5NA=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzE5NTUyOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxMjo0N1rOGxzMVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTozMDowNFrOGyi2gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MjE0OA==", "bodyText": "The method is called find but we talk about search we should be consistent", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454872148", "createdAt": "2020-07-15T08:12:47Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to search all objects of the current type T.\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @return list all objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default List<T> findAll(String userId) throws InvalidParameterException,\n                                                   PropertyServerException,\n                                                   UserNotAuthorizedException\n     {\n        return find(userId, EMPTY_FIND_REQUEST);\n     }\n \n+    /**\n+     * Request to search entities of the current type T.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MjI0MQ==", "bodyText": "current type => type", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454872241", "createdAt": "2020-07-15T08:12:57Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to search all objects of the current type T.\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @return list all objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default List<T> findAll(String userId) throws InvalidParameterException,\n                                                   PropertyServerException,\n                                                   UserNotAuthorizedException\n     {\n        return find(userId, EMPTY_FIND_REQUEST);\n     }\n \n+    /**\n+     * Request to search entities of the current type T.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MjE0OA=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1Mjk5NA==", "bodyText": "Okay.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455652994", "createdAt": "2020-07-16T09:30:04Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to search all objects of the current type T.\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @return list all objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default List<T> findAll(String userId) throws InvalidParameterException,\n                                                   PropertyServerException,\n                                                   UserNotAuthorizedException\n     {\n        return find(userId, EMPTY_FIND_REQUEST);\n     }\n \n+    /**\n+     * Request to search entities of the current type T.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MjE0OA=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzE5ODE1OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxMzozMlrOGxzOGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTozMDoxN1rOGyi3FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MjYwMg==", "bodyText": "object => node", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454872602", "createdAt": "2020-07-15T08:13:32Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to search all objects of the current type T.\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @return list all objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default List<T> findAll(String userId) throws InvalidParameterException,\n                                                   PropertyServerException,\n                                                   UserNotAuthorizedException\n     {\n        return find(userId, EMPTY_FIND_REQUEST);\n     }\n \n+    /**\n+     * Request to search entities of the current type T.\n+     *\n+     * @param userId      unique identifier for requesting user, under which the request is performed.\n+     * @param findRequest information object for find calls.\n+     * @return list objects of the T type relevant in the findRequest information.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n    List<T> find(String userId, FindRequest findRequest) throws InvalidParameterException,\n                                                                PropertyServerException,\n                                                                UserNotAuthorizedException;\n \n+    /**\n+     * Update or replace a object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1MzE0MQ==", "bodyText": "Analogically. In this case, there may be other objects (relationship for example and etc) and not only node.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455653141", "createdAt": "2020-07-16T09:30:17Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to search all objects of the current type T.\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @return list all objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default List<T> findAll(String userId) throws InvalidParameterException,\n                                                   PropertyServerException,\n                                                   UserNotAuthorizedException\n     {\n        return find(userId, EMPTY_FIND_REQUEST);\n     }\n \n+    /**\n+     * Request to search entities of the current type T.\n+     *\n+     * @param userId      unique identifier for requesting user, under which the request is performed.\n+     * @param findRequest information object for find calls.\n+     * @return list objects of the T type relevant in the findRequest information.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n    List<T> find(String userId, FindRequest findRequest) throws InvalidParameterException,\n                                                                PropertyServerException,\n                                                                UserNotAuthorizedException;\n \n+    /**\n+     * Update or replace a object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MjYwMg=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzIwMTA0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxNDoyMFrOGxzP5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxNDoyMFrOGxzP5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MzA2Mg==", "bodyText": "is => of a", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454873062", "createdAt": "2020-07-15T08:14:20Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,190 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to search all objects of the current type T.\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @return list all objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default List<T> findAll(String userId) throws InvalidParameterException,\n                                                   PropertyServerException,\n                                                   UserNotAuthorizedException\n     {\n        return find(userId, EMPTY_FIND_REQUEST);\n     }\n \n+    /**\n+     * Request to search entities of the current type T.\n+     *\n+     * @param userId      unique identifier for requesting user, under which the request is performed.\n+     * @param findRequest information object for find calls.\n+     * @return list objects of the T type relevant in the findRequest information.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n    List<T> find(String userId, FindRequest findRequest) throws InvalidParameterException,\n                                                                PropertyServerException,\n                                                                UserNotAuthorizedException;\n \n+    /**\n+     * Update or replace a object.\n+     *\n+     * @param guid      unique identifier of the object to which the found objects should relate.\n+     * @param userId    unique identifier for requesting user, under which the request is performed.\n+     * @param supplied  object to be updated or replaced.\n+     * @param isReplace flag to indicate that this update is a replace.\n+     * @return updated object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T update(String userId, String guid, T supplied, boolean isReplace) throws InvalidParameterException,\n                                                                                PropertyServerException,\n                                                                                UserNotAuthorizedException;\n \n+    /**\n+     * Replace a object. This means to override all the existing attributes with the supplied attributes.\n+     *\n+     * @param guid     unique identifier of the object to which the found objects should relate.\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to be replaced.\n+     * @return replaced object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default T replace(String userId, String guid, T supplied) throws InvalidParameterException,\n                                                                      PropertyServerException,\n                                                                      UserNotAuthorizedException\n     {\n         return update(userId, guid, supplied, true);\n     }\n \n+    /**\n+     * Update a object. This means to update the object with any non-null attributes from the supplied object.\n+     *\n+     * @param guid     unique identifier of the object to which the found objects should relate.\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to be updated.\n+     * @return updated object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default T update(String userId, String guid, T supplied) throws InvalidParameterException,\n                                                                     PropertyServerException,\n                                                                     UserNotAuthorizedException\n     {\n         return update(userId, guid, supplied, false);\n     }\n \n-    void delete (String userId, String guid, boolean isPurge) throws InvalidParameterException,\n+    /**\n+     * Delete a object.\n+     *\n+     * @param guid    unique identifier of the object to which the found objects should relate.\n+     * @param userId  unique identifier for requesting user, under which the request is performed.\n+     * @param isPurge true indicates a hard delete, false is a soft delete.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n+    void delete(String userId, String guid, boolean isPurge) throws InvalidParameterException,\n                                                                      PropertyServerException,\n                                                                      UserNotAuthorizedException;\n \n+    /**\n+     * Purge a object.\n+     *\n+     * @param guid    unique identifier of the object to which the found objects should relate.\n+     * @param userId  unique identifier for requesting user, under which the request is performed.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default void purge(String userId, String guid) throws InvalidParameterException,\n                                                           PropertyServerException,\n                                                           UserNotAuthorizedException\n     {\n         delete(userId, guid, true);\n     }\n \n+    /**\n+     * Soft delete a object.\n+     *\n+     * @param guid    unique identifier of the object to which the found objects should relate.\n+     * @param userId  unique identifier for requesting user, under which the request is performed.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default void delete(String userId, String guid) throws InvalidParameterException,\n                                                            PropertyServerException,\n                                                            UserNotAuthorizedException\n     {\n         delete(userId, guid, false);\n     }\n \n+    /**\n+     * Restore is soft deleted object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzIwODI4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaEntityClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxNjowM1rOGxzUHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo1MjoxN1rOGyjqWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NDE0MQ==", "bodyText": "I would prefer not talking about types in a API too much - can we remove object type. Conceptually Egeria has a type system -which this API is trying to hide. We are talking here about the types in the java api , but it could be confusing.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454874141", "createdAt": "2020-07-15T08:16:03Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaEntityClient.java", "diffHunk": "@@ -11,14 +11,39 @@\n \n import java.util.List;\n \n+/**\n+ * @param <E> inherited from {@link Node} object type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NjI2NA==", "bodyText": "No developer can be confused by this description.) And in this case, javadoc requires a generic type description from me.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455666264", "createdAt": "2020-07-16T09:52:17Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaEntityClient.java", "diffHunk": "@@ -11,14 +11,39 @@\n \n import java.util.List;\n \n+/**\n+ * @param <E> inherited from {@link Node} object type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NDE0MQ=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzIxMDE4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaEntityClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxNjozNFrOGxzVTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo1MjoyOFrOGyjqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NDQ0NQ==", "bodyText": "entity => node. ThisAPI doesn ot expose the concept of entity", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454874445", "createdAt": "2020-07-15T08:16:34Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaEntityClient.java", "diffHunk": "@@ -11,14 +11,39 @@\n \n import java.util.List;\n \n+/**\n+ * @param <E> inherited from {@link Node} object type\n+ * Interface for Subject Area client entity operations\n+ */\n public interface SubjectAreaEntityClient<E extends Node> extends SubjectAreaClient<E> {\n \n+    /**\n+     * Request to search relationships for current entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NjM3NA==", "bodyText": "Okay.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455666374", "createdAt": "2020-07-16T09:52:28Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaEntityClient.java", "diffHunk": "@@ -11,14 +11,39 @@\n \n import java.util.List;\n \n+/**\n+ * @param <E> inherited from {@link Node} object type\n+ * Interface for Subject Area client entity operations\n+ */\n public interface SubjectAreaEntityClient<E extends Node> extends SubjectAreaClient<E> {\n \n+    /**\n+     * Request to search relationships for current entity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NDQ0NQ=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzIxMTEzOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaEntityClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxNjo1MVrOGxzV7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTozMDoyOVrOGyi3mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NDYwNg==", "bodyText": "entity => node", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454874606", "createdAt": "2020-07-15T08:16:51Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaEntityClient.java", "diffHunk": "@@ -11,14 +11,39 @@\n \n import java.util.List;\n \n+/**\n+ * @param <E> inherited from {@link Node} object type\n+ * Interface for Subject Area client entity operations\n+ */\n public interface SubjectAreaEntityClient<E extends Node> extends SubjectAreaClient<E> {\n \n+    /**\n+     * Request to search relationships for current entity.\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @param findRequest information object for find calls.\n+     * @return list relationships relevant in the findRequest information.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     List<Line> getRelationships(String userId,\n                                 String guid,\n                                 FindRequest findRequest) throws InvalidParameterException,\n                                                                 PropertyServerException,\n                                                                 UserNotAuthorizedException;\n \n+    /**\n+     * Request to search all relationships for current entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1MzI3NQ==", "bodyText": "Okay.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455653275", "createdAt": "2020-07-16T09:30:29Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaEntityClient.java", "diffHunk": "@@ -11,14 +11,39 @@\n \n import java.util.List;\n \n+/**\n+ * @param <E> inherited from {@link Node} object type\n+ * Interface for Subject Area client entity operations\n+ */\n public interface SubjectAreaEntityClient<E extends Node> extends SubjectAreaClient<E> {\n \n+    /**\n+     * Request to search relationships for current entity.\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @param findRequest information object for find calls.\n+     * @return list relationships relevant in the findRequest information.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     List<Line> getRelationships(String userId,\n                                 String guid,\n                                 FindRequest findRequest) throws InvalidParameterException,\n                                                                 PropertyServerException,\n                                                                 UserNotAuthorizedException;\n \n+    /**\n+     * Request to search all relationships for current entity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NDYwNg=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzIxMzYyOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/AbstractSubjectAreaEntity.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxNzozM1rOGxzXcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoyNTowOFrOGyyxHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NDk5Mg==", "bodyText": "entity => node", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454874992", "createdAt": "2020-07-15T08:17:33Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/AbstractSubjectAreaEntity.java", "diffHunk": "@@ -16,6 +16,10 @@\n \n import java.util.List;\n \n+/**\n+ * @param <E> inherited from {@link Node} object type\n+ * Abstract class for Subject Area client entity operations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NTUyMg==", "bodyText": "it is probably worth changing the folder from entities to nodes as well for consistency. You could do this in another issue if you like", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454875522", "createdAt": "2020-07-15T08:18:30Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/AbstractSubjectAreaEntity.java", "diffHunk": "@@ -16,6 +16,10 @@\n \n import java.util.List;\n \n+/**\n+ * @param <E> inherited from {@link Node} object type\n+ * Abstract class for Subject Area client entity operations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NDk5Mg=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1MzM2NA==", "bodyText": "Okay.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455653364", "createdAt": "2020-07-16T09:30:39Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/AbstractSubjectAreaEntity.java", "diffHunk": "@@ -16,6 +16,10 @@\n \n import java.util.List;\n \n+/**\n+ * @param <E> inherited from {@link Node} object type\n+ * Abstract class for Subject Area client entity operations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NDk5Mg=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjgyOA==", "bodyText": "I think we should change the comment from entity to Node -even if we are changing the file names in another issue", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455892828", "createdAt": "2020-07-16T15:54:27Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/AbstractSubjectAreaEntity.java", "diffHunk": "@@ -16,6 +16,10 @@\n \n import java.util.List;\n \n+/**\n+ * @param <E> inherited from {@link Node} object type\n+ * Abstract class for Subject Area client entity operations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NDk5Mg=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMzc1Nw==", "bodyText": "Changed", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455913757", "createdAt": "2020-07-16T16:25:08Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/AbstractSubjectAreaEntity.java", "diffHunk": "@@ -16,6 +16,10 @@\n \n import java.util.List;\n \n+/**\n+ * @param <E> inherited from {@link Node} object type\n+ * Abstract class for Subject Area client entity operations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NDk5Mg=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzIyMTAyOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/categories/SubjectAreaCategory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxOToyN1rOGxzb5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxOToyN1rOGxzb5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NjEzNA==", "bodyText": "SubjectAreaEntityClient => SubjectAreaNodeClient", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454876134", "createdAt": "2020-07-15T08:19:27Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/categories/SubjectAreaCategory.java", "diffHunk": "@@ -2,13 +2,25 @@\n /* Copyright Contributors to the ODPi Egeria project. */\n package org.odpi.openmetadata.accessservices.subjectarea.client.entities.categories;\n \n+import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaClient;\n import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaEntityClient;\n import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.category.Category;\n import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.category.SubjectAreaDefinition;\n \n+/**\n+ * The SubjectAreaDefinition Open Metadata Access Service (OMAS) API for categories.\n+ */\n public interface SubjectAreaCategory {\n \n+    /**\n+     * @return {@link SubjectAreaEntityClient} for client calls(described in {@link SubjectAreaClient})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzIyMjk2OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/glossaries/SubjectAreaGlossary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxOTo1OFrOGxzdGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoxOTo1OFrOGxzdGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NjQ0MA==", "bodyText": "Glossary objects => Glossaries. If we can avoid using object that would be good as this would have to be another concept we would need to explain/define", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454876440", "createdAt": "2020-07-15T08:19:58Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/glossaries/SubjectAreaGlossary.java", "diffHunk": "@@ -2,9 +2,18 @@\n /* Copyright Contributors to the ODPi Egeria project. */\n package org.odpi.openmetadata.accessservices.subjectarea.client.entities.glossaries;\n \n+import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaClient;\n import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaEntityClient;\n import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.glossary.Glossary;\n \n+/**\n+ * The SubjectAreaDefinition Open Metadata Access Service (OMAS) API for glossaries.\n+ */\n public interface SubjectAreaGlossary {\n+\n+   /**\n+    * @return {@link SubjectAreaEntityClient} for client calls(described in {@link SubjectAreaClient})\n+    * when working with Glossary objects", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzIzMTgxOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/terms/SubjectAreaTerm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoyMjoyMlrOGxziiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTozNzowOFrOGyjGxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NzgzNQ==", "bodyText": "Missing the equivalent javadoc for Category", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r454877835", "createdAt": "2020-07-15T08:22:22Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/terms/SubjectAreaTerm.java", "diffHunk": "@@ -2,9 +2,18 @@\n /* Copyright Contributors to the ODPi Egeria project. */\n package org.odpi.openmetadata.accessservices.subjectarea.client.entities.terms;\n \n+import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaClient;\n import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaEntityClient;\n import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.term.Term;\n \n+/**\n+ * The SubjectAreaDefinition Open Metadata Access Service (OMAS) API for terms.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1NzE1Nw==", "bodyText": "It is not missing. I added this on 8th July.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455657157", "createdAt": "2020-07-16T09:37:08Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/terms/SubjectAreaTerm.java", "diffHunk": "@@ -2,9 +2,18 @@\n /* Copyright Contributors to the ODPi Egeria project. */\n package org.odpi.openmetadata.accessservices.subjectarea.client.entities.terms;\n \n+import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaClient;\n import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaEntityClient;\n import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.term.Term;\n \n+/**\n+ * The SubjectAreaDefinition Open Metadata Access Service (OMAS) API for terms.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3NzgzNQ=="}, "originalCommit": {"oid": "46ca46a9d2d0e728d1b6120e93216e910a38e64d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzY1NDk2OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0OTozM1rOGyxRdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1Nzo0MVrOGyxohA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4OTI2OA==", "bodyText": "typo . I suggest phrasing this something like : Be aware that getting all objects may incur a big performance hit when there  re many objects.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455889268", "createdAt": "2020-07-16T15:49:33Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,191 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to find all objects of the type T.\n+     * Getting all objects when there are 100s of thousands may be will lill the system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c29dcbe4dcc7f8a9120efdbbdd2adefc4567179f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NTE3Mg==", "bodyText": "Well.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455895172", "createdAt": "2020-07-16T15:57:41Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,191 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to find all objects of the type T.\n+     * Getting all objects when there are 100s of thousands may be will lill the system.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4OTI2OA=="}, "originalCommit": {"oid": "c29dcbe4dcc7f8a9120efdbbdd2adefc4567179f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzY2NzEzOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1MjoxMFrOGyxY0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1ODo1NlrOGyxr2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MTE1NA==", "bodyText": "should not have entities here", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455891154", "createdAt": "2020-07-16T15:52:10Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,191 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to find all objects of the type T.\n+     * Getting all objects when there are 100s of thousands may be will lill the system.\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @return list all objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default List<T> findAll(String userId) throws InvalidParameterException,\n                                                   PropertyServerException,\n                                                   UserNotAuthorizedException\n     {\n        return find(userId, EMPTY_FIND_REQUEST);\n     }\n \n+    /**\n+     * Request to find entities of the type T.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c29dcbe4dcc7f8a9120efdbbdd2adefc4567179f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NjAyNg==", "bodyText": "yes I understood you. but this is an interface and it is designed for a longer perspective, because in the future, other objects other than (node \u200b\u200band line) may appear, so in this case such a generalized description.\nentities replace to objects.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455896026", "createdAt": "2020-07-16T15:58:56Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,191 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to find all objects of the type T.\n+     * Getting all objects when there are 100s of thousands may be will lill the system.\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @return list all objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default List<T> findAll(String userId) throws InvalidParameterException,\n                                                   PropertyServerException,\n                                                   UserNotAuthorizedException\n     {\n        return find(userId, EMPTY_FIND_REQUEST);\n     }\n \n+    /**\n+     * Request to find entities of the type T.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MTE1NA=="}, "originalCommit": {"oid": "c29dcbe4dcc7f8a9120efdbbdd2adefc4567179f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzY3MTA4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1MzowMVrOGyxbRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1OToyOVrOGyxtaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MTc4MA==", "bodyText": "I don't think this makes sense. I suggest just unique identifier of the object.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455891780", "createdAt": "2020-07-16T15:53:01Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,191 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to find all objects of the type T.\n+     * Getting all objects when there are 100s of thousands may be will lill the system.\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @return list all objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default List<T> findAll(String userId) throws InvalidParameterException,\n                                                   PropertyServerException,\n                                                   UserNotAuthorizedException\n     {\n        return find(userId, EMPTY_FIND_REQUEST);\n     }\n \n+    /**\n+     * Request to find entities of the type T.\n+     *\n+     * @param userId      unique identifier for requesting user, under which the request is performed.\n+     * @param findRequest information object for find calls.\n+     * @return list objects of the T type relevant in the findRequest information.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n    List<T> find(String userId, FindRequest findRequest) throws InvalidParameterException,\n                                                                PropertyServerException,\n                                                                UserNotAuthorizedException;\n \n+    /**\n+     * Update or replace a object.\n+     *\n+     * @param guid      unique identifier of the object to which the found objects should relate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c29dcbe4dcc7f8a9120efdbbdd2adefc4567179f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NjQyNQ==", "bodyText": "No problem.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r455896425", "createdAt": "2020-07-16T15:59:29Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,191 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> object type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get object by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the object to which the found objects should relate.\n+     * @return found objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T getByGUID(String userId, String guid) throws InvalidParameterException,\n                                                    PropertyServerException,\n                                                    UserNotAuthorizedException;\n \n+    /**\n+     * Create a object. To create, you must pass the created object and specify a unique user identifier.\n+     *\n+     * @param userId   unique identifier for requesting user, under which the request is performed.\n+     * @param supplied object to create.\n+     * @return created object.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     T create(String userId, T supplied) throws InvalidParameterException,\n                                                PropertyServerException,\n                                                UserNotAuthorizedException;\n \n+    /**\n+     * Request to find all objects of the type T.\n+     * Getting all objects when there are 100s of thousands may be will lill the system.\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @return list all objects of the T type.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n     default List<T> findAll(String userId) throws InvalidParameterException,\n                                                   PropertyServerException,\n                                                   UserNotAuthorizedException\n     {\n        return find(userId, EMPTY_FIND_REQUEST);\n     }\n \n+    /**\n+     * Request to find entities of the type T.\n+     *\n+     * @param userId      unique identifier for requesting user, under which the request is performed.\n+     * @param findRequest information object for find calls.\n+     * @return list objects of the T type relevant in the findRequest information.\n+     *\n+     * @throws PropertyServerException    something went wrong with the REST call stack.\n+     * @throws UserNotAuthorizedException the requesting user is not authorized to issue this request.\n+     * @throws InvalidParameterException  one of the parameters is null or invalid.\n+     */\n    List<T> find(String userId, FindRequest findRequest) throws InvalidParameterException,\n                                                                PropertyServerException,\n                                                                UserNotAuthorizedException;\n \n+    /**\n+     * Update or replace a object.\n+     *\n+     * @param guid      unique identifier of the object to which the found objects should relate.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MTc4MA=="}, "originalCommit": {"oid": "c29dcbe4dcc7f8a9120efdbbdd2adefc4567179f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ1NTQzOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxMDozMFrOGzLkvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTozMTozM1rOGzMQhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMDE5MA==", "bodyText": "re =>are", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r456320190", "createdAt": "2020-07-17T09:10:30Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -49,7 +49,7 @@ T create(String userId, T supplied) throws InvalidParameterException,\n \n     /**\n      * Request to find all objects of the type T.\n-     * Getting all objects when there are 100s of thousands may be will lill the system.\n+     * Be aware that getting all objects may incur a big performance hit when there re many objects.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "562a5cc08b64734fd406a56376b10a3c32a9ad67"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzMTM5Nw==", "bodyText": "yes I missed it", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r456331397", "createdAt": "2020-07-17T09:31:33Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -49,7 +49,7 @@ T create(String userId, T supplied) throws InvalidParameterException,\n \n     /**\n      * Request to find all objects of the type T.\n-     * Getting all objects when there are 100s of thousands may be will lill the system.\n+     * Be aware that getting all objects may incur a big performance hit when there re many objects.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyMDE5MA=="}, "originalCommit": {"oid": "562a5cc08b64734fd406a56376b10a3c32a9ad67"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTE3MDAyOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNToxNjozOVrOG089eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTozMToxNVrOG09pZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3NzkxMg==", "bodyText": "Sorry I am being very picky  @immmus artifacts -> artifact.\nCould we should Glossary Artifact with a capital A so it is not seen as a Glossary - in all occurances\nI will merge after these changes", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r458177912", "createdAt": "2020-07-21T15:16:39Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,191 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> Glossary artifact type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get Glossary artifact by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the Glossary artifact.\n+     * @return found Glossary artifacts of the T type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77a4b000b0e8a5b1a1b6c91cfcd253d6e3c6720"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4OTE1OA==", "bodyText": "okay", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r458189158", "createdAt": "2020-07-21T15:31:15Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,191 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> Glossary artifact type for supplied and return.\n+ * Interface describing common methods to client working with Subject area resources.\n+ */\n public interface SubjectAreaClient<T> {\n \n     FindRequest EMPTY_FIND_REQUEST = new FindRequest();\n \n+    /**\n+     * Get Glossary artifact by guid\n+     *\n+     * @param userId unique identifier for requesting user, under which the request is performed.\n+     * @param guid   unique identifier of the Glossary artifact.\n+     * @return found Glossary artifacts of the T type.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3NzkxMg=="}, "originalCommit": {"oid": "e77a4b000b0e8a5b1a1b6c91cfcd253d6e3c6720"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTIxMDMxOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNToyNDo1M1rOG09Wyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODoyMToxOVrOG1X8lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NDM5NQ==", "bodyText": "Please could you add a description for this class.\nI suggest something like. This is the Subject Area client API, for use by the subject area expert. This API exposes SCRUD (search, create, read ,update, delete) operations that can be performed on a Glossary Artifact. A Glossary Artifact is a {@link Node} or a {@link Line}.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r458184395", "createdAt": "2020-07-21T15:24:53Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,191 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> Glossary artifact type for supplied and return.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77a4b000b0e8a5b1a1b6c91cfcd253d6e3c6720"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5NDg0OQ==", "bodyText": "@davidradl  let's omit \"A Glossary Artifact is a {@link Node} or a {@link Line}.\". And leave only \"I suggest something like. This is the Subject Area client API, for use by the subject area expert. This API exposes SCRUD (search, create, read ,update, delete) operations that can be performed on a Glossary Artifact.\"", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r458194849", "createdAt": "2020-07-21T15:38:28Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,191 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> Glossary artifact type for supplied and return.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NDM5NQ=="}, "originalCommit": {"oid": "e77a4b000b0e8a5b1a1b6c91cfcd253d6e3c6720"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5ODIxMg==", "bodyText": "Because anytime can to appear a new Glossary Artifact which is not node or line.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r458198212", "createdAt": "2020-07-21T15:42:59Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,191 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> Glossary artifact type for supplied and return.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NDM5NQ=="}, "originalCommit": {"oid": "e77a4b000b0e8a5b1a1b6c91cfcd253d6e3c6720"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyMDA1NQ==", "bodyText": "@immmus I don't think we will as the idea is that the nodes and lines are displayed on a graph. We may have more types of lines and nodes. I like this line as it is definitive definition of Glossary Artifact and has hard links to the Node and Line definitions - so there is no ambiguity. I suggest we can add this in a subsequent issue.", "url": "https://github.com/odpi/egeria/pull/3286#discussion_r458620055", "createdAt": "2020-07-22T08:21:19Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -9,65 +9,191 @@\n \n import java.util.List;\n \n+/**\n+ * @param <T> Glossary artifact type for supplied and return.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NDM5NQ=="}, "originalCommit": {"oid": "e77a4b000b0e8a5b1a1b6c91cfcd253d6e3c6720"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2363, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}