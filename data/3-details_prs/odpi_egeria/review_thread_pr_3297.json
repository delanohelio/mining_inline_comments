{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzOTgwMjM5", "number": 3297, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1MDoxNVrOELmO6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1MDoxNVrOELmO6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk2MjAyOnYy", "diffSide": "RIGHT", "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/test/script/configureStartServer.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1MDoxNVrOGtOeEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1OTowNVrOGtOytw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NjE3OA==", "bodyText": "@planetf1 We do have junits that inline the in memory repo to run tests, which means we do not need to have a dependant server. I like being able to run against a real server as you can change the type of repo.  I wonder if we could run the FVTs against an in memory repo and then a graph repo (in case there are quirky differences, for example around search). I raise this as a consideration in case there is something in the current structure you might want to change to accommodate running it against multiple repositories.", "url": "https://github.com/odpi/egeria/pull/3297#discussion_r450076178", "createdAt": "2020-07-06T08:50:15Z", "author": {"login": "davidradl"}, "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/test/script/configureStartServer.groovy", "diffHunk": "@@ -0,0 +1,113 @@\n+#!/usr/local/bin/groovy\n+import javax.net.ssl.HttpsURLConnection\n+\n+// SPDX-License-Identifier: Apache-2.0\n+// Copyright Contributors to the ODPi Egeria project.\n+\n+// Function to convert array to String\n+\n+// Will configure a server chassis - which should already be running - for FVT testing\n+\n+import javax.net.ssl.SSLContext\n+import javax.net.ssl.TrustManager\n+import javax.net.ssl.X509TrustManager\n+\n+// Retrieve configuration - with defaults to aid in local testing (using default ports)\n+user=properties[\"user\"] ?: \"garygeeke\";\n+baseURL=properties[\"baseURL\"] ?: \"https://localhost:9443\";\n+server=properties[\"server\"] ?: \"server1\";\n+retries=properties[\"retries\"] ?: 12;\n+delay=properties[\"delay\"] ?: 10;\n+\n+// SSL setup to avoid self-signed errors for testing\n+TrustManager[] trustAllCerts = new TrustManager[]{\n+        new X509TrustManager() {\n+\n+            public java.security.cert.X509Certificate[] getAcceptedIssuers()\n+            {\n+                return null;\n+            }\n+            public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType)\n+            {\n+                //No need to implement.\n+            }\n+            public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType)\n+            {\n+                //No need to implement.\n+            }\n+        }\n+};\n+try\n+{\n+    SSLContext sc = SSLContext.getInstance(\"SSL\");\n+    sc.init(null, trustAllCerts, new java.security.SecureRandom());\n+    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n+}\n+catch (Exception e)\n+{\n+    System.out.println(e);\n+    System.exit(-1);\n+}\n+\n+// Wait until the platform is ready\n+connected=false;\n+i=retries;\n+while (!connected && i>0)\n+{\n+    try {\n+\n+        System.out.println(\"=== Checking platform at \" + baseURL + \" is available (\" + i + \" attempts remaining) ===\");\n+        post0 = new java.net.URL(baseURL + \"/open-metadata/platform-services/users/\" + user + \"/server-platform/origin\").openConnection();\n+        post0RC = post0.getResponseCode();\n+        println(post0RC);\n+        if (post0RC.equals(200)) {\n+            connected = true;\n+            println(post0.getInputStream().getText());\n+        } else {\n+            i--;\n+            Thread.sleep(1000 * delay);\n+        }\n+    } catch (Throwable t)\n+    {\n+        // TODO: look at whether some exceptions should be deemed irrecoverable rather than retry\n+        i--;\n+        Thread.sleep(1000 * delay);\n+    }\n+}\n+\n+// --- Configure the platform - any errors here and we exit\n+System.out.println(\"=== Configuring server: \" + server + \" ===\");\n+post1 = new URL(baseURL + \"/open-metadata/admin-services/users/\" + user + \"/servers/\" + server + \"/local-repository/mode/in-memory-repository\" ).openConnection()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98907850d25658f902b924daa4137f3c21ad9410"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4MTQ2Mw==", "bodyText": "I did wonder about whether we should run the FVTs twice - once for each repo type (that we ship).\nCan you raise a note in the parent issue for that (or a new issue)- as it's just a minor change it will be easy as a new PR? It also means you have a base to work with as you add more tests, or adapt the tests to be more JUnit ish?\nAs to how that scales.. I think automation is fairly easy, but optimizing performance won't be with all the starts/stops of platforms/servers -- but if we don't do this we may contaminate test results in any case, so probably worth taking the hit\nI've also seen v.slow perf recently esp. in graph. I have #3213 but not looked at yet. That is probably a precursor.", "url": "https://github.com/odpi/egeria/pull/3297#discussion_r450081463", "createdAt": "2020-07-06T08:59:05Z", "author": {"login": "planetf1"}, "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/test/script/configureStartServer.groovy", "diffHunk": "@@ -0,0 +1,113 @@\n+#!/usr/local/bin/groovy\n+import javax.net.ssl.HttpsURLConnection\n+\n+// SPDX-License-Identifier: Apache-2.0\n+// Copyright Contributors to the ODPi Egeria project.\n+\n+// Function to convert array to String\n+\n+// Will configure a server chassis - which should already be running - for FVT testing\n+\n+import javax.net.ssl.SSLContext\n+import javax.net.ssl.TrustManager\n+import javax.net.ssl.X509TrustManager\n+\n+// Retrieve configuration - with defaults to aid in local testing (using default ports)\n+user=properties[\"user\"] ?: \"garygeeke\";\n+baseURL=properties[\"baseURL\"] ?: \"https://localhost:9443\";\n+server=properties[\"server\"] ?: \"server1\";\n+retries=properties[\"retries\"] ?: 12;\n+delay=properties[\"delay\"] ?: 10;\n+\n+// SSL setup to avoid self-signed errors for testing\n+TrustManager[] trustAllCerts = new TrustManager[]{\n+        new X509TrustManager() {\n+\n+            public java.security.cert.X509Certificate[] getAcceptedIssuers()\n+            {\n+                return null;\n+            }\n+            public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType)\n+            {\n+                //No need to implement.\n+            }\n+            public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType)\n+            {\n+                //No need to implement.\n+            }\n+        }\n+};\n+try\n+{\n+    SSLContext sc = SSLContext.getInstance(\"SSL\");\n+    sc.init(null, trustAllCerts, new java.security.SecureRandom());\n+    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n+}\n+catch (Exception e)\n+{\n+    System.out.println(e);\n+    System.exit(-1);\n+}\n+\n+// Wait until the platform is ready\n+connected=false;\n+i=retries;\n+while (!connected && i>0)\n+{\n+    try {\n+\n+        System.out.println(\"=== Checking platform at \" + baseURL + \" is available (\" + i + \" attempts remaining) ===\");\n+        post0 = new java.net.URL(baseURL + \"/open-metadata/platform-services/users/\" + user + \"/server-platform/origin\").openConnection();\n+        post0RC = post0.getResponseCode();\n+        println(post0RC);\n+        if (post0RC.equals(200)) {\n+            connected = true;\n+            println(post0.getInputStream().getText());\n+        } else {\n+            i--;\n+            Thread.sleep(1000 * delay);\n+        }\n+    } catch (Throwable t)\n+    {\n+        // TODO: look at whether some exceptions should be deemed irrecoverable rather than retry\n+        i--;\n+        Thread.sleep(1000 * delay);\n+    }\n+}\n+\n+// --- Configure the platform - any errors here and we exit\n+System.out.println(\"=== Configuring server: \" + server + \" ===\");\n+post1 = new URL(baseURL + \"/open-metadata/admin-services/users/\" + user + \"/servers/\" + server + \"/local-repository/mode/in-memory-repository\" ).openConnection()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NjE3OA=="}, "originalCommit": {"oid": "98907850d25658f902b924daa4137f3c21ad9410"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2608, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}