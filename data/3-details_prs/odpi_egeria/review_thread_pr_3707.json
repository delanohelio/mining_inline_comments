{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0OTQxODUz", "number": 3707, "reviewThreads": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODo1Nzo1OVrOEqORYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo0MDowMFrOEqqvjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzA5NDc1OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/elements/ElementOrigin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODo1Nzo1OVrOHcTofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODo1Nzo1OVrOHcTofQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ0MzgzNw==", "bodyText": "Should be ElementOrigin", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499443837", "createdAt": "2020-10-05T08:57:59Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/elements/ElementOrigin.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetconsumer.elements;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * The ElementType bean provides details of the type information associated with a metadata element.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzEzOTU0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/elements/ElementOriginCategory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTowOTo1NFrOHcUDrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTowOTo1NFrOHcUDrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1MDc5Ng==", "bodyText": "...element origin category", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499450796", "createdAt": "2020-10-05T09:09:54Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/elements/ElementOriginCategory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetconsumer.elements;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.io.Serializable;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * ElementOriginCategory defines where the metadata comes from.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public enum ElementOriginCategory implements Serializable\n+{\n+    UNKNOWN                 (0, \"<Unknown>\",               \"Unknown provenance\"),\n+    LOCAL_COHORT            (1, \"Local to cohort\",         \"The element is being maintained within one of the local cohort members. \" +\n+                                                                  \"The metadata collection id is for one of the repositories in the cohort. \" +\n+                                                                  \"This metadata collection id identifies the home repository for this element. \"),\n+    EXPORT_ARCHIVE          (2, \"Export Archive\",          \"The element was created from an export archive. \" +\n+                                                                  \"The metadata collection id for the element is the metadata collection id of the originating server. \" +\n+                                                                  \"If the originating server later joins the cohort with the same metadata collection Id \" +\n+                                                                  \"then these elements will be refreshed from the originating server's current repository.\"),\n+    CONTENT_PACK            (3, \"Content Pack\",            \"The element comes from an open metadata content pack. \" +\n+                                                                  \"The metadata collection id of the elements is set to the GUID of the pack.\"),\n+    DEREGISTERED_REPOSITORY (4, \"Deregistered Repository\", \"The element comes from a metadata repository that \" +\n+                                                                  \"used to be a member of the one of the local repository's cohorts but it has been deregistered. \" +\n+                                                                  \"The metadata collection id remains the same. If the repository rejoins the cohort \" +\n+                                                                  \"then these elements can be refreshed from the rejoining repository.\"),\n+    CONFIGURATION           (5, \"Configuration\",           \"The element is part of a service's configuration.  The metadata collection id is null.\"),\n+    EXTERNAL_SOURCE         (6, \"External Source\",         \"The element is maintained by an external technology.  The metadata collection id is the guid of the technology's descriptive entity.\");\n+\n+    private static final long     serialVersionUID = 1L;\n+\n+    private int    originCode;\n+    private String originName;\n+    private String originDescription;\n+\n+\n+    /**\n+     * Constructor for the enum.\n+     *\n+     * @param originCode code number for origin\n+     * @param originName name for origin\n+     * @param originDescription description for origin\n+     */\n+    ElementOriginCategory(int originCode, String originName, String originDescription)\n+    {\n+        this.originCode = originCode;\n+        this.originName = originName;\n+        this.originDescription = originDescription;\n+    }\n+\n+\n+    /**\n+     * Return the code for metadata element.\n+     *\n+     * @return int code for the origin\n+     */\n+    public int getOrdinal()\n+    {\n+        return originCode;\n+    }\n+\n+\n+    /**\n+     * Return the name of the metadata element origin.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzE0MDQ0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/elements/ElementOriginCategory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToxMDowOVrOHcUEOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToxMDowOVrOHcUEOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1MDkzNw==", "bodyText": "...element origin category", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499450937", "createdAt": "2020-10-05T09:10:09Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/elements/ElementOriginCategory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetconsumer.elements;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.io.Serializable;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * ElementOriginCategory defines where the metadata comes from.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public enum ElementOriginCategory implements Serializable\n+{\n+    UNKNOWN                 (0, \"<Unknown>\",               \"Unknown provenance\"),\n+    LOCAL_COHORT            (1, \"Local to cohort\",         \"The element is being maintained within one of the local cohort members. \" +\n+                                                                  \"The metadata collection id is for one of the repositories in the cohort. \" +\n+                                                                  \"This metadata collection id identifies the home repository for this element. \"),\n+    EXPORT_ARCHIVE          (2, \"Export Archive\",          \"The element was created from an export archive. \" +\n+                                                                  \"The metadata collection id for the element is the metadata collection id of the originating server. \" +\n+                                                                  \"If the originating server later joins the cohort with the same metadata collection Id \" +\n+                                                                  \"then these elements will be refreshed from the originating server's current repository.\"),\n+    CONTENT_PACK            (3, \"Content Pack\",            \"The element comes from an open metadata content pack. \" +\n+                                                                  \"The metadata collection id of the elements is set to the GUID of the pack.\"),\n+    DEREGISTERED_REPOSITORY (4, \"Deregistered Repository\", \"The element comes from a metadata repository that \" +\n+                                                                  \"used to be a member of the one of the local repository's cohorts but it has been deregistered. \" +\n+                                                                  \"The metadata collection id remains the same. If the repository rejoins the cohort \" +\n+                                                                  \"then these elements can be refreshed from the rejoining repository.\"),\n+    CONFIGURATION           (5, \"Configuration\",           \"The element is part of a service's configuration.  The metadata collection id is null.\"),\n+    EXTERNAL_SOURCE         (6, \"External Source\",         \"The element is maintained by an external technology.  The metadata collection id is the guid of the technology's descriptive entity.\");\n+\n+    private static final long     serialVersionUID = 1L;\n+\n+    private int    originCode;\n+    private String originName;\n+    private String originDescription;\n+\n+\n+    /**\n+     * Constructor for the enum.\n+     *\n+     * @param originCode code number for origin\n+     * @param originName name for origin\n+     * @param originDescription description for origin\n+     */\n+    ElementOriginCategory(int originCode, String originName, String originDescription)\n+    {\n+        this.originCode = originCode;\n+        this.originName = originName;\n+        this.originDescription = originDescription;\n+    }\n+\n+\n+    /**\n+     * Return the code for metadata element.\n+     *\n+     * @return int code for the origin\n+     */\n+    public int getOrdinal()\n+    {\n+        return originCode;\n+    }\n+\n+\n+    /**\n+     * Return the name of the metadata element origin.\n+     *\n+     * @return String name\n+     */\n+    public String getName()\n+    {\n+        return originName;\n+    }\n+\n+\n+    /**\n+     * Return the description of the metadata element origin.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzE1NTQ4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/elements/LikeElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToxNDoxNFrOHcUNnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToxNDoxNFrOHcUNnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1MzM0MA==", "bodyText": "LikeElement", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499453340", "createdAt": "2020-10-05T09:14:14Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/elements/LikeElement.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.assetconsumer.elements;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.odpi.openmetadata.accessservices.assetconsumer.properties.LikeProperties;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * Like contains the properties and header for a Rating entity retrieved from the metadata repository.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzE2NTE2OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/AssetProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToxNjoyM1rOHcUTQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOToxNjoyM1rOHcUTQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ1NDc4Nw==", "bodyText": "should (be) only be", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499454787", "createdAt": "2020-10-05T09:16:23Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/AssetProperties.java", "diffHunk": "@@ -0,0 +1,364 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetconsumer.properties;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import java.util.*;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * Asset holds asset properties that are used for displaying details of\n+ * an asset in summary lists or hover text.  It includes the following properties:\n+ * <ul>\n+ *     <li>type - metadata type information for the asset</li>\n+ *     <li>guid - globally unique identifier for the asset</li>\n+ *     <li>url - external link for the asset</li>\n+ *     <li>qualifiedName - The official (unique) name for the asset. This is often defined by the IT systems\n+ *     management organization and should be used (when available) on audit logs and error messages.\n+ *     (qualifiedName from Referenceable - model 0010)</li>\n+ *     <li>displayName - A consumable name for the asset.  Often a shortened form of the assetQualifiedName\n+ *     for use on user interfaces and messages.   The assetDisplayName should be only be used for audit logs and error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzI0OTU0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/CommentProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTozNDo1N1rOHcVENA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTozNjoxNVrOHcVHew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2NzMxNg==", "bodyText": "Need to be careful here - I think what Jackson serialisation will do is to strip of the \"is\" prefix and leave you with a field called \"public\" (in the serialized JSON object). Provided the object is only ever serialised in this way and deserialised using the setter below. There are two ways to avoid this issue - one is to explicitly call the field \"public\" and provide getPublic and setPublic accessors. the other would be to add an @jsonProperty annotation to specify the property name.", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499467316", "createdAt": "2020-10-05T09:34:57Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/CommentProperties.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetconsumer.properties;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * The CommentProperties bean stores information about a comment connected to an asset.  Comments provide informal feedback to assets\n+ * and can be added at any time.\n+ *\n+ * Comments have the userId of the person who added the feedback, along with their comment text.\n+ *\n+ * The content of the comment is a personal statement (which is why the user's id is in the comment)\n+ * and there is no formal review of the content.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public class CommentProperties extends ReferenceableProperties\n+{\n+    private static final long     serialVersionUID = 1L;\n+\n+    private CommentType commentType = null;\n+    private String      commentText = null;\n+    private String      user        = null;\n+    private boolean     isPublic    = false;\n+\n+    /**\n+     * Default constructor\n+     */\n+    public CommentProperties()\n+    {\n+        super();\n+    }\n+\n+\n+    /**\n+     * Copy/clone constructor.\n+     *\n+     * @param template element to copy\n+     */\n+    public CommentProperties(CommentProperties template)\n+    {\n+        super(template);\n+\n+        if (template != null)\n+        {\n+            /*\n+             * Copy the values from the supplied comment.\n+             */\n+            commentType = template.getCommentType();\n+            user        = template.getUser();\n+            commentText = template.getCommentText();\n+            isPublic    = template.isPublic;\n+        }\n+    }\n+\n+\n+    /**\n+     * Return an enum that describes the type of comment.\n+     *\n+     * @return CommentType enum\n+     */\n+    public CommentType getCommentType()\n+    {\n+        return commentType;\n+    }\n+\n+\n+    /**\n+     * Set up the enum that describes the type of comment.\n+     *\n+     * @param commentType CommentType enum\n+     */\n+    public void setCommentType(CommentType commentType)\n+    {\n+        this.commentType = commentType;\n+    }\n+\n+\n+    /**\n+     * Return the comment text.\n+     *\n+     * @return String commentText\n+     */\n+    public String getCommentText()\n+    {\n+        return commentText;\n+    }\n+\n+\n+    /**\n+     * Set up the comment text.\n+     *\n+     * @param commentText String text\n+     */\n+    public void setCommentText(String commentText)\n+    {\n+        this.commentText = commentText;\n+    }\n+\n+\n+    /**\n+     * Return the user id of the person who created the comment.  Null means the user id is not known.\n+     *\n+     * @return String commenting user\n+     */\n+    public String getUser()\n+    {\n+        return user;\n+    }\n+\n+\n+    /**\n+     * Set up the user id of the person who created the comment.  Null means the user id is not known.\n+     *\n+     * @param user String commenting user\n+     */\n+    public void setUser(String user)\n+    {\n+        this.user = user;\n+    }\n+\n+\n+    /**\n+     * Return if this like is private ot the creating user.\n+     *\n+     * @return boolean\n+     */\n+    public boolean isPublic()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2ODE1NQ==", "bodyText": "A third option would be to provide both a getIsPublic() - for serialisation - and isPublic() for convenience for Java callers.", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499468155", "createdAt": "2020-10-05T09:36:15Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/CommentProperties.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetconsumer.properties;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * The CommentProperties bean stores information about a comment connected to an asset.  Comments provide informal feedback to assets\n+ * and can be added at any time.\n+ *\n+ * Comments have the userId of the person who added the feedback, along with their comment text.\n+ *\n+ * The content of the comment is a personal statement (which is why the user's id is in the comment)\n+ * and there is no formal review of the content.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public class CommentProperties extends ReferenceableProperties\n+{\n+    private static final long     serialVersionUID = 1L;\n+\n+    private CommentType commentType = null;\n+    private String      commentText = null;\n+    private String      user        = null;\n+    private boolean     isPublic    = false;\n+\n+    /**\n+     * Default constructor\n+     */\n+    public CommentProperties()\n+    {\n+        super();\n+    }\n+\n+\n+    /**\n+     * Copy/clone constructor.\n+     *\n+     * @param template element to copy\n+     */\n+    public CommentProperties(CommentProperties template)\n+    {\n+        super(template);\n+\n+        if (template != null)\n+        {\n+            /*\n+             * Copy the values from the supplied comment.\n+             */\n+            commentType = template.getCommentType();\n+            user        = template.getUser();\n+            commentText = template.getCommentText();\n+            isPublic    = template.isPublic;\n+        }\n+    }\n+\n+\n+    /**\n+     * Return an enum that describes the type of comment.\n+     *\n+     * @return CommentType enum\n+     */\n+    public CommentType getCommentType()\n+    {\n+        return commentType;\n+    }\n+\n+\n+    /**\n+     * Set up the enum that describes the type of comment.\n+     *\n+     * @param commentType CommentType enum\n+     */\n+    public void setCommentType(CommentType commentType)\n+    {\n+        this.commentType = commentType;\n+    }\n+\n+\n+    /**\n+     * Return the comment text.\n+     *\n+     * @return String commentText\n+     */\n+    public String getCommentText()\n+    {\n+        return commentText;\n+    }\n+\n+\n+    /**\n+     * Set up the comment text.\n+     *\n+     * @param commentText String text\n+     */\n+    public void setCommentText(String commentText)\n+    {\n+        this.commentText = commentText;\n+    }\n+\n+\n+    /**\n+     * Return the user id of the person who created the comment.  Null means the user id is not known.\n+     *\n+     * @return String commenting user\n+     */\n+    public String getUser()\n+    {\n+        return user;\n+    }\n+\n+\n+    /**\n+     * Set up the user id of the person who created the comment.  Null means the user id is not known.\n+     *\n+     * @param user String commenting user\n+     */\n+    public void setUser(String user)\n+    {\n+        this.user = user;\n+    }\n+\n+\n+    /**\n+     * Return if this like is private ot the creating user.\n+     *\n+     * @return boolean\n+     */\n+    public boolean isPublic()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2NzMxNg=="}, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzI2MzIwOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/InformalTagProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTozODozMlrOHcVMVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTozODozMlrOHcVMVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2OTM5OA==", "bodyText": "Similar comment to previous", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499469398", "createdAt": "2020-10-05T09:38:32Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/InformalTagProperties.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetconsumer.properties;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+\n+/**\n+ * InformalTagProperties stores information about a tag connected to an asset.\n+ * InformalTags provide informal classifications to assets\n+ * and can be added at any time.\n+ *\n+ * InformalTags have the userId of the person who added the tag, the name of the tag and its description.\n+ *\n+ * The content of the tag is a personal judgement (which is why the user's id is in the tag)\n+ * and there is no formal review of the tags.  However, they can be used as a basis for crowd-sourcing\n+ * Glossary terms.\n+ *\n+ * Private InformalTags are only returned to the user that created them.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public class InformalTagProperties implements Serializable\n+{\n+    private static final long     serialVersionUID = 1L;\n+\n+    /*\n+     * Attributes of a InformalTagProperties\n+     */\n+    private boolean isPublic     = false;\n+    private boolean isPrivateTag = false;\n+    private String  name         = null;\n+    private String  description  = null;\n+    private String  user         = null;\n+\n+\n+    /**\n+     * Default constructor\n+     */\n+    public InformalTagProperties()\n+    {\n+        super();\n+    }\n+\n+\n+    /**\n+     * Copy/clone constructor.\n+     *\n+     * @param template element to copy\n+     */\n+    public InformalTagProperties(InformalTagProperties template)\n+    {\n+        if (template != null)\n+        {\n+            isPublic = template.isPublic();\n+            isPrivateTag = template.isPrivateTag();\n+            user = template.getUser();\n+            name = template.getName();\n+            description = template.getDescription();\n+        }\n+    }\n+\n+\n+    /**\n+     * Return if the link to the tag is private to the creating user.\n+     *\n+     * @return boolean\n+     */\n+    public boolean isPublic()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzI2NDQ1OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/InformalTagProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTozODo1MVrOHcVNFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTozODo1MVrOHcVNFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ2OTU5MQ==", "bodyText": "Similar comment to previous", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499469591", "createdAt": "2020-10-05T09:38:51Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/InformalTagProperties.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetconsumer.properties;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+\n+/**\n+ * InformalTagProperties stores information about a tag connected to an asset.\n+ * InformalTags provide informal classifications to assets\n+ * and can be added at any time.\n+ *\n+ * InformalTags have the userId of the person who added the tag, the name of the tag and its description.\n+ *\n+ * The content of the tag is a personal judgement (which is why the user's id is in the tag)\n+ * and there is no formal review of the tags.  However, they can be used as a basis for crowd-sourcing\n+ * Glossary terms.\n+ *\n+ * Private InformalTags are only returned to the user that created them.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public class InformalTagProperties implements Serializable\n+{\n+    private static final long     serialVersionUID = 1L;\n+\n+    /*\n+     * Attributes of a InformalTagProperties\n+     */\n+    private boolean isPublic     = false;\n+    private boolean isPrivateTag = false;\n+    private String  name         = null;\n+    private String  description  = null;\n+    private String  user         = null;\n+\n+\n+    /**\n+     * Default constructor\n+     */\n+    public InformalTagProperties()\n+    {\n+        super();\n+    }\n+\n+\n+    /**\n+     * Copy/clone constructor.\n+     *\n+     * @param template element to copy\n+     */\n+    public InformalTagProperties(InformalTagProperties template)\n+    {\n+        if (template != null)\n+        {\n+            isPublic = template.isPublic();\n+            isPrivateTag = template.isPrivateTag();\n+            user = template.getUser();\n+            name = template.getName();\n+            description = template.getDescription();\n+        }\n+    }\n+\n+\n+    /**\n+     * Return if the link to the tag is private to the creating user.\n+     *\n+     * @return boolean\n+     */\n+    public boolean isPublic()\n+    {\n+        return isPublic;\n+    }\n+\n+\n+    /**\n+     * Set up whether the link to the tag is private to the creating user or not.\n+     *\n+     * @param aPublic boolean\n+     */\n+    public void setPublic(boolean aPublic)\n+    {\n+        isPublic = aPublic;\n+    }\n+\n+\n+    /**\n+     * Return boolean flag to say whether the tag is private or not.  A private tag is only seen by the\n+     * person who set it up.  Public tags are visible to everyone.\n+     *\n+     * @return boolean is private flag\n+     */\n+    public boolean isPrivateTag() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzI2ODgwOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/LikeProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo0MDowMlrOHcVP1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo0MDowMlrOHcVP1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3MDI5NQ==", "bodyText": "Ditto", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499470295", "createdAt": "2020-10-05T09:40:02Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/LikeProperties.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetconsumer.properties;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * The LikeProperties properties object records a single user's \"like\" of an asset.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public class LikeProperties implements Serializable\n+{\n+    private static final long     serialVersionUID = 1L;\n+\n+    private String     user       = null;\n+    private boolean    isPublic   = false;\n+\n+\n+    /**\n+     * Default constructor\n+     */\n+    public LikeProperties()\n+    {\n+        super();\n+    }\n+\n+\n+    /**\n+     * Copy/clone constructor.\n+     *\n+     * @param template   element to copy\n+     */\n+    public LikeProperties(LikeProperties template)\n+    {\n+        if (template != null)\n+        {\n+            user = template.getUser();\n+            isPublic = template.isPublic;\n+        }\n+    }\n+\n+\n+    /**\n+     * Return the user id of the person who created the like.  Null means the user id is not known.\n+     *\n+     * @return String liking user\n+     */\n+    public String getUser() {\n+        return user;\n+    }\n+\n+\n+    /**\n+     * Set up he user id of the person who created the like.  Null means the user id is not known.\n+     *\n+     * @param user String liking user\n+     */\n+    public void setUser(String user)\n+    {\n+        this.user = user;\n+    }\n+\n+\n+    /**\n+     * Return if this like is private to the creating user.\n+     *\n+     * @return boolean\n+     */\n+    public boolean isPublic()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzI4NjM5OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/RatingProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo0NDo0OFrOHcVaXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo0NDo0OFrOHcVaXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3Mjk4OA==", "bodyText": "As per earlier remarks about (de)serialzation", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499472988", "createdAt": "2020-10-05T09:44:48Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/RatingProperties.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetconsumer.properties;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * Stores information about a rating connected to an asset.  Ratings provide informal feedback on the quality of assets\n+ * and can be added at any time.\n+ *\n+ * Ratings have the userId of the person who added it, a star rating and an optional review comment.\n+ *\n+ * The content of the rating is a personal judgement (which is why the user's id is in the object)\n+ * and there is no formal review of the ratings.  However, they can be used as a basis for crowd-sourcing\n+ * feedback to asset owners.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public class RatingProperties implements Serializable\n+{\n+    private static final long     serialVersionUID = 1L;\n+\n+    /*\n+     * Attributes of a RatingProperties\n+     */\n+    private StarRating starRating = null;\n+    private String     review     = null;\n+    private String     user       = null;\n+    private boolean    isPublic   = false;\n+\n+    /**\n+     * Default constructor\n+     */\n+    public RatingProperties()\n+    {\n+        super();\n+    }\n+\n+\n+    /**\n+     * Copy/clone constructor.\n+     *\n+     * @param template element to copy\n+     */\n+    public RatingProperties(RatingProperties template)\n+    {\n+        if (template != null)\n+        {\n+            user = template.getUser();\n+            starRating = template.getStarRating();\n+            review = template.getReview();\n+            isPublic = template.isPublic;\n+        }\n+    }\n+\n+\n+    /**\n+     * Return the user id of the person who created the rating.  Null means the user id is not known.\n+     *\n+     * @return String user\n+     */\n+    public String getUser() {\n+        return user;\n+    }\n+\n+\n+    /**\n+     * Set up the user id of the person who created the rating.  Null means the user id is not known.\n+     *\n+     * @param user string\n+     */\n+    public void setUser(String user)\n+    {\n+        this.user = user;\n+    }\n+\n+\n+    /**\n+     * Return the stars for the rating.\n+     *\n+     * @return StarRating enum\n+     */\n+    public StarRating getStarRating() {\n+        return starRating;\n+    }\n+\n+\n+    /**\n+     * Set up the stars for the rating.\n+     *\n+     * @param starRating StarRating enum\n+     */\n+    public void setStarRating(StarRating starRating)\n+    {\n+        this.starRating = starRating;\n+    }\n+\n+\n+    /**\n+     * Return the review comments - null means no review is available.\n+     *\n+     * @return String review comments\n+     */\n+    public String getReview()\n+    {\n+        return review;\n+    }\n+\n+\n+    /**\n+     * Set up the review comments - null means no review is available.\n+     *\n+     * @param review String review comments\n+     */\n+    public void setReview(String review)\n+    {\n+        this.review = review;\n+    }\n+\n+\n+    /**\n+     * Return if this rating is private ot the creating user.\n+     *\n+     * @return boolean\n+     */\n+    public boolean isPublic()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzI5MzQ0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/SecurityTagsProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo0NjozOVrOHcVeqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo0NjozOVrOHcVeqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3NDA5MQ==", "bodyText": "SecurityTagsProperties", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499474091", "createdAt": "2020-10-05T09:46:39Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/SecurityTagsProperties.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.assetconsumer.properties;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.io.Serializable;\n+import java.util.*;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * SecurityTags holds the list of labels and properties used by a security enforcement engine to control access", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzMwMTU5OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/StarRating.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo0ODo1M1rOHcVjuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo0ODo1M1rOHcVjuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3NTM4NQ==", "bodyText": "Does \"not recommended\" imply that there is no recommendation? Or that there is a recommendation and the user who provided it is recommending that you avoid this asset? The term \"not recommended\" is ambiguous in this.", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499475385", "createdAt": "2020-10-05T09:48:53Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/properties/StarRating.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetconsumer.properties;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.io.Serializable;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * A StarRating defines the rating that a user has placed against an asset. This ranges from not recommended", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzMxMTY4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/rest/FeedbackRequestBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo1MTozN1rOHcVp_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo1MTozN1rOHcVp_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3Njk5MA==", "bodyText": "As per earlier comment on (de)serialisation", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499476990", "createdAt": "2020-10-05T09:51:37Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-consumer/asset-consumer-api/src/main/java/org/odpi/openmetadata/accessservices/assetconsumer/rest/FeedbackRequestBody.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetconsumer.rest;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * FeedbackRequestBody provides a base class for passing feedback objects as a request body over a REST API.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public class FeedbackRequestBody extends AssetConsumerOMASAPIRequestBody\n+{\n+    private static final long    serialVersionUID = 1L;\n+\n+    // todo this default should be false - need to fix up the problem with passing boolean values over REST APIs\n+    private boolean    isPublic  = true;\n+\n+\n+    /**\n+     * Default constructor\n+     */\n+    public FeedbackRequestBody()\n+    {\n+    }\n+\n+\n+    /**\n+     * Copy/clone constructor\n+     *\n+     * @param template object to copy\n+     */\n+    public FeedbackRequestBody(FeedbackRequestBody template)\n+    {\n+        super(template);\n+\n+        if (template != null)\n+        {\n+            this.isPublic = template.isPublic();\n+        }\n+    }\n+\n+\n+\n+\n+    /**\n+     * Return whether the feedback is private or not\n+     *\n+     * @return boolean\n+     */\n+    public boolean isPublic()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzQzNTQ3OnYy", "diffSide": "RIGHT", "path": "open-metadata-publication/website/roadmap/education-functional-detail.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyNTowMVrOHcW0Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyNTowMVrOHcW0Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5NjAzOQ==", "bodyText": "Since there are...", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499496039", "createdAt": "2020-10-05T10:25:01Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-publication/website/roadmap/education-functional-detail.md", "diffHunk": "@@ -0,0 +1,43 @@\n+<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project 2020. -->\n+\n+# Education Functional Detail\n+\n+![Education Logo](education-logo.png)\n+\n+Egeria's **Education** aims to broaden the knowledge of people who need to\n+work with digital resources about metadata, governance practices and the\n+use of Egeria.  Since that are many types of professionals involved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzQ0NzA2OnYy", "diffSide": "RIGHT", "path": "open-metadata-publication/website/solutions/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyODowNlrOHcW7Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyODowNlrOHcW7Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5Nzc5NA==", "bodyText": "it can store", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499497794", "createdAt": "2020-10-05T10:28:06Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-publication/website/solutions/README.md", "diffHunk": "@@ -0,0 +1,105 @@\n+<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project 2020. -->\n+\n+# Egeria Solutions\n+\n+The Egeria solutions illustrate useful integration\n+solutions that you can create using Egeria.\n+Each solution describes the scenario and business value,\n+along with instructions on how to set up Egeria.\n+\n+The solutions combine different categories of \n+[OMAG Servers](../../../open-metadata-implementation/admin-services/docs/concepts/omag-server.md) that host\n+the connectors to the third party technologies.  The OMAG Servers\n+manage the metadata exchange through REST API calls and events.\n+\n+Figure 1 shows how the different categories of OMAG Servers\n+are linked together to build the solutions.\n+\n+![Egeria Solution Composition](egeria-solution-components.png#pagewidth)\n+> **Figure 1:** OMAG Servers connected together as components in an Egeria solution\n+\n+The inner ring, titled **Integrated Metadata**, illustrates the exchange of metadata between\n+third party metadata servers.\n+Third party metadata servers provide support for a wide\n+range of metadata and are typically supporting\n+a suite of tools.  They are connected together through an\n+[Open Metadata Repository Cohort](../../../open-metadata-implementation/admin-services/docs/concepts/cohort-member.md)\n+or **cohort** for short.\n+\n+A cohort can support the exchange of many third party metadata\n+servers even though only one is shown in Figure 1.\n+\n+A third party metadata server can embed the Egeria libraries in its\n+own runtime or, more commonly,\n+use a special OMAG server called the **Repository Proxy**\n+to host connectors that map between the events and APIs of the\n+third party metadata server and the Open Metadata events and APIs.\n+The repository proxy manages all of the interaction with the other\n+members of the cohort.\n+\n+The cohort protocols are peer-to-peer and the membership is dynamic.\n+When a third party metadata server connects to the cohort, either directly\n+or through its repository proxy, it automatically begins receiving\n+metadata from all of the other members.  When it shares metadata,\n+it is shared with all the other members.   Each member is free to choose what\n+to share and what to process from the other members of the cohort.\n+\n+There are other types of OMAG Servers provided by\n+Egeria that can be members of the cohort.\n+* The **Conformance Test Server** is used to verify that a member of the\n+cohort is operating correctly.  It is typically only used in\n+test environments because it sends out a lot of test metadata on the cohort\n+and validates the responses from the cohort member it is testing.\n+\n+* The **Metadata Access Point** supports Egeria's [Open Metadata Access\n+ Services (OMASs)](../../../open-metadata-implementation/access-services), or access services, for short.  These access services\n+ provide specialized APIs and events for different types of technologies.\n+ \n+* The **Metadata Server** provides a metadata repository\n+that supports any type of open metadata.  It is a valuable\n+member of the cohort because it is a metadata gap-filler.  By that we mean\n+that is can store relationships between metadata", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzQ1MDk3OnYy", "diffSide": "RIGHT", "path": "open-metadata-publication/website/solutions/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyOToxMlrOHcW9hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyOToxMlrOHcW9hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5ODM3NQ==", "bodyText": "Should this paragraph be moved up to just below the para on Metadata Access Point?", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499498375", "createdAt": "2020-10-05T10:29:12Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-publication/website/solutions/README.md", "diffHunk": "@@ -0,0 +1,105 @@\n+<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project 2020. -->\n+\n+# Egeria Solutions\n+\n+The Egeria solutions illustrate useful integration\n+solutions that you can create using Egeria.\n+Each solution describes the scenario and business value,\n+along with instructions on how to set up Egeria.\n+\n+The solutions combine different categories of \n+[OMAG Servers](../../../open-metadata-implementation/admin-services/docs/concepts/omag-server.md) that host\n+the connectors to the third party technologies.  The OMAG Servers\n+manage the metadata exchange through REST API calls and events.\n+\n+Figure 1 shows how the different categories of OMAG Servers\n+are linked together to build the solutions.\n+\n+![Egeria Solution Composition](egeria-solution-components.png#pagewidth)\n+> **Figure 1:** OMAG Servers connected together as components in an Egeria solution\n+\n+The inner ring, titled **Integrated Metadata**, illustrates the exchange of metadata between\n+third party metadata servers.\n+Third party metadata servers provide support for a wide\n+range of metadata and are typically supporting\n+a suite of tools.  They are connected together through an\n+[Open Metadata Repository Cohort](../../../open-metadata-implementation/admin-services/docs/concepts/cohort-member.md)\n+or **cohort** for short.\n+\n+A cohort can support the exchange of many third party metadata\n+servers even though only one is shown in Figure 1.\n+\n+A third party metadata server can embed the Egeria libraries in its\n+own runtime or, more commonly,\n+use a special OMAG server called the **Repository Proxy**\n+to host connectors that map between the events and APIs of the\n+third party metadata server and the Open Metadata events and APIs.\n+The repository proxy manages all of the interaction with the other\n+members of the cohort.\n+\n+The cohort protocols are peer-to-peer and the membership is dynamic.\n+When a third party metadata server connects to the cohort, either directly\n+or through its repository proxy, it automatically begins receiving\n+metadata from all of the other members.  When it shares metadata,\n+it is shared with all the other members.   Each member is free to choose what\n+to share and what to process from the other members of the cohort.\n+\n+There are other types of OMAG Servers provided by\n+Egeria that can be members of the cohort.\n+* The **Conformance Test Server** is used to verify that a member of the\n+cohort is operating correctly.  It is typically only used in\n+test environments because it sends out a lot of test metadata on the cohort\n+and validates the responses from the cohort member it is testing.\n+\n+* The **Metadata Access Point** supports Egeria's [Open Metadata Access\n+ Services (OMASs)](../../../open-metadata-implementation/access-services), or access services, for short.  These access services\n+ provide specialized APIs and events for different types of technologies.\n+ \n+* The **Metadata Server** provides a metadata repository\n+that supports any type of open metadata.  It is a valuable\n+member of the cohort because it is a metadata gap-filler.  By that we mean\n+that is can store relationships between metadata\n+from different third party repositories along with additional types of metadata\n+not supported by any of the third party metadata repositories.\n+It may optionally have the access services enabled so it can also\n+act as a metadata access point.\n+\n+The metadata access point is the bridge to the governance servers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzQ1MzMzOnYy", "diffSide": "RIGHT", "path": "open-metadata-publication/website/solutions/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyOTo1OFrOHcW-_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyOTo1OFrOHcW-_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5ODc0OA==", "bodyText": "new solutions [emerge?] that bring value...", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499498748", "createdAt": "2020-10-05T10:29:58Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-publication/website/solutions/README.md", "diffHunk": "@@ -0,0 +1,105 @@\n+<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project 2020. -->\n+\n+# Egeria Solutions\n+\n+The Egeria solutions illustrate useful integration\n+solutions that you can create using Egeria.\n+Each solution describes the scenario and business value,\n+along with instructions on how to set up Egeria.\n+\n+The solutions combine different categories of \n+[OMAG Servers](../../../open-metadata-implementation/admin-services/docs/concepts/omag-server.md) that host\n+the connectors to the third party technologies.  The OMAG Servers\n+manage the metadata exchange through REST API calls and events.\n+\n+Figure 1 shows how the different categories of OMAG Servers\n+are linked together to build the solutions.\n+\n+![Egeria Solution Composition](egeria-solution-components.png#pagewidth)\n+> **Figure 1:** OMAG Servers connected together as components in an Egeria solution\n+\n+The inner ring, titled **Integrated Metadata**, illustrates the exchange of metadata between\n+third party metadata servers.\n+Third party metadata servers provide support for a wide\n+range of metadata and are typically supporting\n+a suite of tools.  They are connected together through an\n+[Open Metadata Repository Cohort](../../../open-metadata-implementation/admin-services/docs/concepts/cohort-member.md)\n+or **cohort** for short.\n+\n+A cohort can support the exchange of many third party metadata\n+servers even though only one is shown in Figure 1.\n+\n+A third party metadata server can embed the Egeria libraries in its\n+own runtime or, more commonly,\n+use a special OMAG server called the **Repository Proxy**\n+to host connectors that map between the events and APIs of the\n+third party metadata server and the Open Metadata events and APIs.\n+The repository proxy manages all of the interaction with the other\n+members of the cohort.\n+\n+The cohort protocols are peer-to-peer and the membership is dynamic.\n+When a third party metadata server connects to the cohort, either directly\n+or through its repository proxy, it automatically begins receiving\n+metadata from all of the other members.  When it shares metadata,\n+it is shared with all the other members.   Each member is free to choose what\n+to share and what to process from the other members of the cohort.\n+\n+There are other types of OMAG Servers provided by\n+Egeria that can be members of the cohort.\n+* The **Conformance Test Server** is used to verify that a member of the\n+cohort is operating correctly.  It is typically only used in\n+test environments because it sends out a lot of test metadata on the cohort\n+and validates the responses from the cohort member it is testing.\n+\n+* The **Metadata Access Point** supports Egeria's [Open Metadata Access\n+ Services (OMASs)](../../../open-metadata-implementation/access-services), or access services, for short.  These access services\n+ provide specialized APIs and events for different types of technologies.\n+ \n+* The **Metadata Server** provides a metadata repository\n+that supports any type of open metadata.  It is a valuable\n+member of the cohort because it is a metadata gap-filler.  By that we mean\n+that is can store relationships between metadata\n+from different third party repositories along with additional types of metadata\n+not supported by any of the third party metadata repositories.\n+It may optionally have the access services enabled so it can also\n+act as a metadata access point.\n+\n+The metadata access point is the bridge to the governance servers.\n+The addition of the governance servers provides active metadata\n+exchange and governance of any type of third party technology,\n+not just metadata servers.  We call this **Integrated Governance**.\n+\n+For the most part, Egeria is a background technology.\n+However, once metadata is being exchanged and linked, new\n+solutions that bring value directly to individuals", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzQ1NDk4OnYy", "diffSide": "RIGHT", "path": "open-metadata-publication/website/solutions/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDozMDoyMVrOHcW_7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDozMDoyMVrOHcW_7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5ODk4OA==", "bodyText": "implementation (of) of", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499498988", "createdAt": "2020-10-05T10:30:21Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-publication/website/solutions/README.md", "diffHunk": "@@ -0,0 +1,105 @@\n+<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project 2020. -->\n+\n+# Egeria Solutions\n+\n+The Egeria solutions illustrate useful integration\n+solutions that you can create using Egeria.\n+Each solution describes the scenario and business value,\n+along with instructions on how to set up Egeria.\n+\n+The solutions combine different categories of \n+[OMAG Servers](../../../open-metadata-implementation/admin-services/docs/concepts/omag-server.md) that host\n+the connectors to the third party technologies.  The OMAG Servers\n+manage the metadata exchange through REST API calls and events.\n+\n+Figure 1 shows how the different categories of OMAG Servers\n+are linked together to build the solutions.\n+\n+![Egeria Solution Composition](egeria-solution-components.png#pagewidth)\n+> **Figure 1:** OMAG Servers connected together as components in an Egeria solution\n+\n+The inner ring, titled **Integrated Metadata**, illustrates the exchange of metadata between\n+third party metadata servers.\n+Third party metadata servers provide support for a wide\n+range of metadata and are typically supporting\n+a suite of tools.  They are connected together through an\n+[Open Metadata Repository Cohort](../../../open-metadata-implementation/admin-services/docs/concepts/cohort-member.md)\n+or **cohort** for short.\n+\n+A cohort can support the exchange of many third party metadata\n+servers even though only one is shown in Figure 1.\n+\n+A third party metadata server can embed the Egeria libraries in its\n+own runtime or, more commonly,\n+use a special OMAG server called the **Repository Proxy**\n+to host connectors that map between the events and APIs of the\n+third party metadata server and the Open Metadata events and APIs.\n+The repository proxy manages all of the interaction with the other\n+members of the cohort.\n+\n+The cohort protocols are peer-to-peer and the membership is dynamic.\n+When a third party metadata server connects to the cohort, either directly\n+or through its repository proxy, it automatically begins receiving\n+metadata from all of the other members.  When it shares metadata,\n+it is shared with all the other members.   Each member is free to choose what\n+to share and what to process from the other members of the cohort.\n+\n+There are other types of OMAG Servers provided by\n+Egeria that can be members of the cohort.\n+* The **Conformance Test Server** is used to verify that a member of the\n+cohort is operating correctly.  It is typically only used in\n+test environments because it sends out a lot of test metadata on the cohort\n+and validates the responses from the cohort member it is testing.\n+\n+* The **Metadata Access Point** supports Egeria's [Open Metadata Access\n+ Services (OMASs)](../../../open-metadata-implementation/access-services), or access services, for short.  These access services\n+ provide specialized APIs and events for different types of technologies.\n+ \n+* The **Metadata Server** provides a metadata repository\n+that supports any type of open metadata.  It is a valuable\n+member of the cohort because it is a metadata gap-filler.  By that we mean\n+that is can store relationships between metadata\n+from different third party repositories along with additional types of metadata\n+not supported by any of the third party metadata repositories.\n+It may optionally have the access services enabled so it can also\n+act as a metadata access point.\n+\n+The metadata access point is the bridge to the governance servers.\n+The addition of the governance servers provides active metadata\n+exchange and governance of any type of third party technology,\n+not just metadata servers.  We call this **Integrated Governance**.\n+\n+For the most part, Egeria is a background technology.\n+However, once metadata is being exchanged and linked, new\n+solutions that bring value directly to individuals\n+working in an organization.  Therefore we have added the\n+**View Server** and **Presentation Server** to\n+support browser based User Interfaces.  The view server\n+provides REST APIs specifically for user interfaces.\n+They are consumed by the Egeria UIs but can also be used by\n+other UIs and tools.\n+\n+\n+## Specific Solutions\n+\n+Follow the links below to learn more about specific Egeria solutions.\n+\n+* [Metadata Server Exchange](metadata-server-exchange) describes how to set up\n+Egeria to enable third party metadata servers to exchange\n+metadata.\n+\n+* [Metadata Repository Conformance Validation](../../../open-metadata-conformance-suite)\n+describes how to set up a cohort to validate the implementation of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzQ1Nzk4OnYy", "diffSide": "RIGHT", "path": "open-metadata-resources/open-metadata-samples/open-metadata-security-samples/src/main/java/org/odpi/openmetadata/metadatasecurity/samples/CocoPharmaServerSecurityConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDozMToxNVrOHcXB2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDozMToxNVrOHcXB2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5OTQ4Mg==", "bodyText": "than a specific user", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499499482", "createdAt": "2020-10-05T10:31:15Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-resources/open-metadata-samples/open-metadata-security-samples/src/main/java/org/odpi/openmetadata/metadatasecurity/samples/CocoPharmaServerSecurityConnector.java", "diffHunk": "@@ -469,6 +470,93 @@ public void  validateUserForConnection(String     userId,\n     }\n \n \n+    /**\n+     * Select a connection from the list of connections attached to an asset.  Some connections change the userId to\n+     * provide a higher level of access that a specific user account.  These connections are processed first so that the user gets the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzQ2NTU5OnYy", "diffSide": "RIGHT", "path": "open-metadata-publication/website/solutions/metadata-server-exchange/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDozMzo0NlrOHcXG4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNjoxNzo1MVrOHiogNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwMDc3MA==", "bodyText": "Open Metadata Repository [Services] Cohort?", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499500770", "createdAt": "2020-10-05T10:33:46Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-publication/website/solutions/metadata-server-exchange/README.md", "diffHunk": "@@ -0,0 +1,200 @@\n+<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project 2020. -->\n+\n+# Metadata Server Exchange\n+\n+The metadata server exchange solution describes how third party metadata servers can exchange metadata through\n+an **Open Metadata Repository Cohort** or **Cohort** for short.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA3NzIzNg==", "bodyText": "Open Metadata Repository Cohort is correct - https://egeria.odpi.org/open-metadata-implementation/repository-services/docs/open-metadata-repository-cohort.html#:~:text=An%20open%20metadata%20repository%20cohort%20is%20a%20collection,with%2C%20and%20receive%20metadata%20from%2C%20any%20other%20member.", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r506077236", "createdAt": "2020-10-16T06:17:51Z", "author": {"login": "mandy-chessell"}, "path": "open-metadata-publication/website/solutions/metadata-server-exchange/README.md", "diffHunk": "@@ -0,0 +1,200 @@\n+<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project 2020. -->\n+\n+# Metadata Server Exchange\n+\n+The metadata server exchange solution describes how third party metadata servers can exchange metadata through\n+an **Open Metadata Repository Cohort** or **Cohort** for short.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwMDc3MA=="}, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzQ4MjE3OnYy", "diffSide": "RIGHT", "path": "open-metadata-publication/website/solutions/metadata-server-exchange/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDozODo1NlrOHcXRHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDozODo1NlrOHcXRHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwMzM5MA==", "bodyText": "[would it be better to say... \"or errors caused by unexpected values they contain?\"", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499503390", "createdAt": "2020-10-05T10:38:56Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-publication/website/solutions/metadata-server-exchange/README.md", "diffHunk": "@@ -0,0 +1,200 @@\n+<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project 2020. -->\n+\n+# Metadata Server Exchange\n+\n+The metadata server exchange solution describes how third party metadata servers can exchange metadata through\n+an **Open Metadata Repository Cohort** or **Cohort** for short.\n+\n+A cohort uses a peer-to-peer exchange protocol.\n+Servers that implement the protocol's open metadata APIs and event exchange sequences can\n+become a member of one or more cohorts.  Each member of a cohort can send\n+notifications about updates to its metadata to the other members of the cohort\n+as well as query/update metadata from all of the member repositories.\n+\n+Since the cohort protocols are open, they can be implemented by any technology.  However in this solution\n+we are going to focus on integrating third party metadata servers that **do not** implement the protocol.\n+\n+## Introducing the Repository Proxy\n+\n+Third party metadata servers that do not directly support any of the open metadata APIs and protocols\n+need an adapter to convert their events and APIs into open metadata events and APIs\n+as well as manage the protocol event sequencing.\n+\n+To make this easy, Egeria provides a special\n+[OMAG Server](../../../../open-metadata-implementation/admin-services/docs/concepts/omag-server.md) called the\n+[Repository Proxy](../../../../open-metadata-implementation/admin-services/docs/concepts/repository-proxy.md)\n+that is an adapter for third party metadata servers.\n+Inside the repository proxy are plug points for two repository connectors:\n+\n+  * The **OMRS Repository Connector** - translates calls to the OMRS Repository REST API to calls to the third party\n+    metadata server's API.\n+  * The **OMRS Event Mapper** - translates events from the third party metadata server to open metadata events. \n+ \n+The repository proxy represents the third party metadata server in the cohort and calls the connectors as required.\n+You need one repository proxy for each third party metadata server that you want to be in the solution.\n+\n+Figure 1 shows the repository proxy in action:\n+\n+![Figure 1](../../../../open-metadata-implementation/admin-services/docs/concepts/repository-proxy.png)\n+> **Figure 1:** showing a repository proxy acting as an adapter for a third party metadata server\n+\n+You can create your own implementation of the repository connectors for your favorite metadata server\n+using [these instructions](https://www.odpi.org/blog/2019/07/08/implementing-an-open-metadata-connector).\n+Alternatively Egeria provides repository connector implementations for two third party metadata servers:\n+\n+  * [IBM Information Governance Catalog (IGC)](https://github.com/odpi/egeria-connector-ibm-information-server)\n+  * [Apache Atlas](https://github.com/odpi/egeria-connector-hadoop-ecosystem)\n+\n+We will use these implementations to illustrate the metadata server exchange solution.\n+We are also assuming that in this example, glossary terms are being maintained in IGC and the organization\n+wants to connect these terms to the Hadoop data sources described in Apache Atlas.\n+\n+## Working with read-only third party metadata repository connectors\n+\n+Most third party metadata servers do not support the storing of metadata from other metadata servers.\n+The sticking point is typically that it can not store information about\n+[where the metadata came from](../../metadata-provenance) and it can not guarantee that metadata from\n+another metadata server is not updatable through its APIs and user interfaces.\n+There can also be more subtle issues in the the scale (size) of metadata descriptions or the values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzQ5Mjc5OnYy", "diffSide": "RIGHT", "path": "open-metadata-publication/website/solutions/metadata-server-exchange/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDo0MjoxMFrOHcXXhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDo0MjoxMFrOHcXXhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNTAyOA==", "bodyText": "Rather than \"At this point\" could we say \"With the above capabilities deployed\" ?", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499505028", "createdAt": "2020-10-05T10:42:10Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-publication/website/solutions/metadata-server-exchange/README.md", "diffHunk": "@@ -0,0 +1,200 @@\n+<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project 2020. -->\n+\n+# Metadata Server Exchange\n+\n+The metadata server exchange solution describes how third party metadata servers can exchange metadata through\n+an **Open Metadata Repository Cohort** or **Cohort** for short.\n+\n+A cohort uses a peer-to-peer exchange protocol.\n+Servers that implement the protocol's open metadata APIs and event exchange sequences can\n+become a member of one or more cohorts.  Each member of a cohort can send\n+notifications about updates to its metadata to the other members of the cohort\n+as well as query/update metadata from all of the member repositories.\n+\n+Since the cohort protocols are open, they can be implemented by any technology.  However in this solution\n+we are going to focus on integrating third party metadata servers that **do not** implement the protocol.\n+\n+## Introducing the Repository Proxy\n+\n+Third party metadata servers that do not directly support any of the open metadata APIs and protocols\n+need an adapter to convert their events and APIs into open metadata events and APIs\n+as well as manage the protocol event sequencing.\n+\n+To make this easy, Egeria provides a special\n+[OMAG Server](../../../../open-metadata-implementation/admin-services/docs/concepts/omag-server.md) called the\n+[Repository Proxy](../../../../open-metadata-implementation/admin-services/docs/concepts/repository-proxy.md)\n+that is an adapter for third party metadata servers.\n+Inside the repository proxy are plug points for two repository connectors:\n+\n+  * The **OMRS Repository Connector** - translates calls to the OMRS Repository REST API to calls to the third party\n+    metadata server's API.\n+  * The **OMRS Event Mapper** - translates events from the third party metadata server to open metadata events. \n+ \n+The repository proxy represents the third party metadata server in the cohort and calls the connectors as required.\n+You need one repository proxy for each third party metadata server that you want to be in the solution.\n+\n+Figure 1 shows the repository proxy in action:\n+\n+![Figure 1](../../../../open-metadata-implementation/admin-services/docs/concepts/repository-proxy.png)\n+> **Figure 1:** showing a repository proxy acting as an adapter for a third party metadata server\n+\n+You can create your own implementation of the repository connectors for your favorite metadata server\n+using [these instructions](https://www.odpi.org/blog/2019/07/08/implementing-an-open-metadata-connector).\n+Alternatively Egeria provides repository connector implementations for two third party metadata servers:\n+\n+  * [IBM Information Governance Catalog (IGC)](https://github.com/odpi/egeria-connector-ibm-information-server)\n+  * [Apache Atlas](https://github.com/odpi/egeria-connector-hadoop-ecosystem)\n+\n+We will use these implementations to illustrate the metadata server exchange solution.\n+We are also assuming that in this example, glossary terms are being maintained in IGC and the organization\n+wants to connect these terms to the Hadoop data sources described in Apache Atlas.\n+\n+## Working with read-only third party metadata repository connectors\n+\n+Most third party metadata servers do not support the storing of metadata from other metadata servers.\n+The sticking point is typically that it can not store information about\n+[where the metadata came from](../../metadata-provenance) and it can not guarantee that metadata from\n+another metadata server is not updatable through its APIs and user interfaces.\n+There can also be more subtle issues in the the scale (size) of metadata descriptions or the values\n+contained within them, are not expected and cause errors.\n+\n+This is why it is common that the repository connectors for third party metadata servers only support\n+what we call read-only operation.  They can publish information about metadata stored in the third party\n+metadata server, and support open metadata queries to that repository.\n+However, they do not pass metadata from other metadata\n+servers to the third party metadata server.  \n+\n+Both IGC's and Atlas's repository connectors are read-only.  Figure 2 shows them connected to their\n+repository proxies and how the operate.\n+\n+![Figure 2](connecting-read-only-repository.png)\n+> **Figure 2:** Read only repository connector operation\n+\n+Because of their read-only nature,\n+if we just connected them together in a cohort, it would be like two people talking and no-one listening.\n+There would be no value to the solution.\n+\n+## Creating an enterprise view \n+\n+Figure 3 shows a possible extension using an OMAG Server called the\n+[Metadata Access Point](../../../../open-metadata-implementation/admin-services/docs/concepts/metadata-access-point.md).\n+This provides specialist APIs and events for retrieving and maintaining open metadata.\n+The metadata access point can be augmented with a\n+[View Server](../../../../open-metadata-implementation/admin-services/docs/concepts/view-server.md)\n+to support a UI, or provide services to other third party tools.\n+\n+![Figure 3](enterprise-view.png#pagewidth)\n+> **Figure 3:** Using a metadata access point to create an enterprise view\n+\n+With this approach it is possible to issue queries that return metadata content content from\n+both Atlas and IGC as if they were one metadata repository.\n+\n+However, there is no support for updates or linking this metadata together.\n+\n+## Linking metadata from different metadata servers\n+\n+Figure 4 adds an Egeria\n+[Metadata Server](../../../../open-metadata-implementation/admin-services/docs/concepts/metadata-server.md)\n+to the cohort enabling the storage of new metadata.  This means that the APIs of the metadata\n+access point can be used to link glossary terms from IGC to asset definitions from Atlas.\n+These links (called relationships) are\n+stored in the Egeria Metadata Server.  When queries for metadata are made through the metadata access point,\n+the IGC glossary terms are shown linked to the Atlas assets as if all of the metadata is stored in\n+a single repository.\n+\n+\n+![Figure 4](enterprise-linking.png#pagewidth)\n+> **Figure 4:** Using a metadata server to provide storage for relationships between IGC and Atlas metadata\n+\n+## Expanding the scope of metadata being captured\n+\n+With the metadata server in place, it is possible to connect an\n+[Integration Daemon](../../../../open-metadata-implementation/admin-services/docs/concepts/integration-daemon.md)\n+to the metadata server to provide metadata from additional third party technologies through the\n+metadata access point,\n+as shown in figure 5.\n+\n+![Figure 5](enterprise-catalog.png#pagewidth)\n+> **Figure 5:** Using a metadata server to provide storage for new metadata\n+\n+At this point, there is now a rich source of metadata visible through the metadata access point.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzQ5NTQ4OnYy", "diffSide": "RIGHT", "path": "open-metadata-publication/website/solutions/metadata-server-exchange/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDo0Mjo1N1rOHcXZOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDo0Mjo1N1rOHcXZOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNTQ2NA==", "bodyText": "the the", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499505464", "createdAt": "2020-10-05T10:42:57Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-publication/website/solutions/metadata-server-exchange/README.md", "diffHunk": "@@ -0,0 +1,200 @@\n+<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project 2020. -->\n+\n+# Metadata Server Exchange\n+\n+The metadata server exchange solution describes how third party metadata servers can exchange metadata through\n+an **Open Metadata Repository Cohort** or **Cohort** for short.\n+\n+A cohort uses a peer-to-peer exchange protocol.\n+Servers that implement the protocol's open metadata APIs and event exchange sequences can\n+become a member of one or more cohorts.  Each member of a cohort can send\n+notifications about updates to its metadata to the other members of the cohort\n+as well as query/update metadata from all of the member repositories.\n+\n+Since the cohort protocols are open, they can be implemented by any technology.  However in this solution\n+we are going to focus on integrating third party metadata servers that **do not** implement the protocol.\n+\n+## Introducing the Repository Proxy\n+\n+Third party metadata servers that do not directly support any of the open metadata APIs and protocols\n+need an adapter to convert their events and APIs into open metadata events and APIs\n+as well as manage the protocol event sequencing.\n+\n+To make this easy, Egeria provides a special\n+[OMAG Server](../../../../open-metadata-implementation/admin-services/docs/concepts/omag-server.md) called the\n+[Repository Proxy](../../../../open-metadata-implementation/admin-services/docs/concepts/repository-proxy.md)\n+that is an adapter for third party metadata servers.\n+Inside the repository proxy are plug points for two repository connectors:\n+\n+  * The **OMRS Repository Connector** - translates calls to the OMRS Repository REST API to calls to the third party\n+    metadata server's API.\n+  * The **OMRS Event Mapper** - translates events from the third party metadata server to open metadata events. \n+ \n+The repository proxy represents the third party metadata server in the cohort and calls the connectors as required.\n+You need one repository proxy for each third party metadata server that you want to be in the solution.\n+\n+Figure 1 shows the repository proxy in action:\n+\n+![Figure 1](../../../../open-metadata-implementation/admin-services/docs/concepts/repository-proxy.png)\n+> **Figure 1:** showing a repository proxy acting as an adapter for a third party metadata server\n+\n+You can create your own implementation of the repository connectors for your favorite metadata server\n+using [these instructions](https://www.odpi.org/blog/2019/07/08/implementing-an-open-metadata-connector).\n+Alternatively Egeria provides repository connector implementations for two third party metadata servers:\n+\n+  * [IBM Information Governance Catalog (IGC)](https://github.com/odpi/egeria-connector-ibm-information-server)\n+  * [Apache Atlas](https://github.com/odpi/egeria-connector-hadoop-ecosystem)\n+\n+We will use these implementations to illustrate the metadata server exchange solution.\n+We are also assuming that in this example, glossary terms are being maintained in IGC and the organization\n+wants to connect these terms to the Hadoop data sources described in Apache Atlas.\n+\n+## Working with read-only third party metadata repository connectors\n+\n+Most third party metadata servers do not support the storing of metadata from other metadata servers.\n+The sticking point is typically that it can not store information about\n+[where the metadata came from](../../metadata-provenance) and it can not guarantee that metadata from\n+another metadata server is not updatable through its APIs and user interfaces.\n+There can also be more subtle issues in the the scale (size) of metadata descriptions or the values\n+contained within them, are not expected and cause errors.\n+\n+This is why it is common that the repository connectors for third party metadata servers only support\n+what we call read-only operation.  They can publish information about metadata stored in the third party\n+metadata server, and support open metadata queries to that repository.\n+However, they do not pass metadata from other metadata\n+servers to the third party metadata server.  \n+\n+Both IGC's and Atlas's repository connectors are read-only.  Figure 2 shows them connected to their\n+repository proxies and how the operate.\n+\n+![Figure 2](connecting-read-only-repository.png)\n+> **Figure 2:** Read only repository connector operation\n+\n+Because of their read-only nature,\n+if we just connected them together in a cohort, it would be like two people talking and no-one listening.\n+There would be no value to the solution.\n+\n+## Creating an enterprise view \n+\n+Figure 3 shows a possible extension using an OMAG Server called the\n+[Metadata Access Point](../../../../open-metadata-implementation/admin-services/docs/concepts/metadata-access-point.md).\n+This provides specialist APIs and events for retrieving and maintaining open metadata.\n+The metadata access point can be augmented with a\n+[View Server](../../../../open-metadata-implementation/admin-services/docs/concepts/view-server.md)\n+to support a UI, or provide services to other third party tools.\n+\n+![Figure 3](enterprise-view.png#pagewidth)\n+> **Figure 3:** Using a metadata access point to create an enterprise view\n+\n+With this approach it is possible to issue queries that return metadata content content from\n+both Atlas and IGC as if they were one metadata repository.\n+\n+However, there is no support for updates or linking this metadata together.\n+\n+## Linking metadata from different metadata servers\n+\n+Figure 4 adds an Egeria\n+[Metadata Server](../../../../open-metadata-implementation/admin-services/docs/concepts/metadata-server.md)\n+to the cohort enabling the storage of new metadata.  This means that the APIs of the metadata\n+access point can be used to link glossary terms from IGC to asset definitions from Atlas.\n+These links (called relationships) are\n+stored in the Egeria Metadata Server.  When queries for metadata are made through the metadata access point,\n+the IGC glossary terms are shown linked to the Atlas assets as if all of the metadata is stored in\n+a single repository.\n+\n+\n+![Figure 4](enterprise-linking.png#pagewidth)\n+> **Figure 4:** Using a metadata server to provide storage for relationships between IGC and Atlas metadata\n+\n+## Expanding the scope of metadata being captured\n+\n+With the metadata server in place, it is possible to connect an\n+[Integration Daemon](../../../../open-metadata-implementation/admin-services/docs/concepts/integration-daemon.md)\n+to the metadata server to provide metadata from additional third party technologies through the\n+metadata access point,\n+as shown in figure 5.\n+\n+![Figure 5](enterprise-catalog.png#pagewidth)\n+> **Figure 5:** Using a metadata server to provide storage for new metadata\n+\n+At this point, there is now a rich source of metadata visible through the metadata access point.\n+Metadata from the IGC and Atlas repositories can be retrieved, combined together and used in new ways without\n+needing to change their implementation.\n+\n+However, there is no additional metadata being made available through either the IGC or Atlas UIs since they\n+only access metadata stored in their own private metadata repositories. \n+\n+## Integrating third party metadata servers through the integration daemon\n+\n+There is an alternative integration path for third party metadata servers to integrate into\n+the open metadata ecosystem even when they do not meet the requirements to have their repository connectors\n+write metadata into their private metadata repository.\n+\n+Figure 6 shows IGC connected using this alternative approach.  IGC is now connecting through\n+an integration daemon in a similar way to the other third party technologies shown in Figure 5.\n+Storing metadata from other repositories is now possible because IGC is no longer providing\n+metadata services to the the broader metadata", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzUxNzk3OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/view-services/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDo1MDowOVrOHcXnHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDo1MDowOVrOHcXnHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwOTAyMw==", "bodyText": "Not sure about the added text... was this a typo?", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499509023", "createdAt": "2020-10-05T10:50:09Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/view-services/README.md", "diffHunk": "@@ -6,7 +6,7 @@\n # Open Metadata View Services (OMVS)\n \n The Open Metadata View Services (OMVS) provide task oriented, domain-specific services\n-for user interfaces to integrate with open metadata. \n+for user interfaces to integrate with open metadata.  View services ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzU2ODgzOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/repository-services/repository-services-spring/src/main/java/org/odpi/openmetadata/repositoryservices/rest/server/spring/LocalRepositoryServicesResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTowNjoxOVrOHcYGbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNjowODo0M1rOHioL-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNzAzNw==", "bodyText": "Does this Javadoc need to refer to the 'history' capability?", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499517037", "createdAt": "2020-10-05T11:06:19Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/repository-services/repository-services-spring/src/main/java/org/odpi/openmetadata/repositoryservices/rest/server/spring/LocalRepositoryServicesResource.java", "diffHunk": "@@ -2323,6 +2355,58 @@ public VoidResponse saveEntityReferenceCopy(@PathVariable String       serverNam\n     }\n \n \n+    /**\n+     * Retrieve any locally homed classifications assigned to the requested entity.  This method is implemented by repository connectors that are able\n+     * to store classifications for entities that are homed in another repository.\n+     *\n+     * @param serverName unique identifier for requested server.\n+     * @param userId unique identifier for requesting user.\n+     * @param entityGUID unique identifier of the entity with classifications to retrieve\n+     * @return list of all of the classifications for this entity that are homed in this repository or\n+     * InvalidParameterException the entity is null or\n+     * RepositoryErrorException there is a problem communicating with the metadata repository where\n+     *                                    the metadata collection is stored or\n+     * EntityNotKnownException the entity is not recognized by this repository or\n+     * UserNotAuthorizedException to calling user is not authorized to retrieve this metadata or\n+     * FunctionNotSupportedException this method is not supported\n+     */\n+    @PostMapping(path = \"/instances/entity/{entityGUID}/home-classifications\")\n+\n+    public ClassificationListResponse getHomeClassifications(@PathVariable String serverName,\n+                                                             @PathVariable String userId,\n+                                                             @PathVariable String entityGUID)\n+    {\n+        return restAPI.getHomeClassifications(serverName, userId, entityGUID);\n+    }\n+\n+\n+    /**\n+     * Retrieve any locally homed classifications assigned to the requested entity.  This method is implemented by repository connectors that are able", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA3MjA1OQ==", "bodyText": "Not sure I understand this comment.", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r506072059", "createdAt": "2020-10-16T06:08:43Z", "author": {"login": "mandy-chessell"}, "path": "open-metadata-implementation/repository-services/repository-services-spring/src/main/java/org/odpi/openmetadata/repositoryservices/rest/server/spring/LocalRepositoryServicesResource.java", "diffHunk": "@@ -2323,6 +2355,58 @@ public VoidResponse saveEntityReferenceCopy(@PathVariable String       serverNam\n     }\n \n \n+    /**\n+     * Retrieve any locally homed classifications assigned to the requested entity.  This method is implemented by repository connectors that are able\n+     * to store classifications for entities that are homed in another repository.\n+     *\n+     * @param serverName unique identifier for requested server.\n+     * @param userId unique identifier for requesting user.\n+     * @param entityGUID unique identifier of the entity with classifications to retrieve\n+     * @return list of all of the classifications for this entity that are homed in this repository or\n+     * InvalidParameterException the entity is null or\n+     * RepositoryErrorException there is a problem communicating with the metadata repository where\n+     *                                    the metadata collection is stored or\n+     * EntityNotKnownException the entity is not recognized by this repository or\n+     * UserNotAuthorizedException to calling user is not authorized to retrieve this metadata or\n+     * FunctionNotSupportedException this method is not supported\n+     */\n+    @PostMapping(path = \"/instances/entity/{entityGUID}/home-classifications\")\n+\n+    public ClassificationListResponse getHomeClassifications(@PathVariable String serverName,\n+                                                             @PathVariable String userId,\n+                                                             @PathVariable String entityGUID)\n+    {\n+        return restAPI.getHomeClassifications(serverName, userId, entityGUID);\n+    }\n+\n+\n+    /**\n+     * Retrieve any locally homed classifications assigned to the requested entity.  This method is implemented by repository connectors that are able", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNzAzNw=="}, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzU3NDcyOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-owner/asset-owner-api/src/main/java/org/odpi/openmetadata/accessservices/assetowner/metadataelements/FolderElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTowODoxOFrOHcYKFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTowODoxOFrOHcYKFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNzk3NQ==", "bodyText": "FolderElement", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499517975", "createdAt": "2020-10-05T11:08:18Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-owner/asset-owner-api/src/main/java/org/odpi/openmetadata/accessservices/assetowner/metadataelements/FolderElement.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.assetowner.metadataelements;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.odpi.openmetadata.accessservices.assetowner.properties.FolderProperties;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * FolderElement contains the properties and header for a Folder retrieved from the metadata repository.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public class FolderElement extends FolderProperties implements MetadataElement, Serializable\n+{\n+    private static final long serialVersionUID = 1L;\n+\n+    private ElementHeader elementHeader = null;\n+\n+\n+    /**\n+     * Default constructor\n+     */\n+    public FolderElement()\n+    {\n+        super();\n+    }\n+\n+\n+    /**\n+     * Copy/clone constructor\n+     *\n+     * @param template object to copy\n+     */\n+    public FolderElement(FolderElement template)\n+    {\n+        if (template != null)\n+        {\n+            elementHeader = template.getElementHeader();\n+        }\n+    }\n+\n+\n+    /**\n+     * Return the element header associated with the properties.\n+     *\n+     * @return element header object\n+     */\n+    @Override\n+    public ElementHeader getElementHeader()\n+    {\n+        return elementHeader;\n+    }\n+\n+\n+    /**\n+     * Set up the element header associated with the properties.\n+     *\n+     * @param elementHeader element header object\n+     */\n+    @Override\n+    public void setElementHeader(ElementHeader elementHeader)\n+    {\n+        this.elementHeader = elementHeader;\n+    }\n+\n+\n+    /**\n+     * JSON-style toString\n+     *\n+     * @return return string containing the property names and values\n+     */\n+    @Override\n+    public String toString()\n+    {\n+        return \"AssetElement{\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzU3NzMxOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-owner/asset-owner-api/src/main/java/org/odpi/openmetadata/accessservices/assetowner/metadataelements/FileElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTowODo1OFrOHcYLmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTowODo1OFrOHcYLmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxODM2MQ==", "bodyText": "FileElement", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499518361", "createdAt": "2020-10-05T11:08:58Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-owner/asset-owner-api/src/main/java/org/odpi/openmetadata/accessservices/assetowner/metadataelements/FileElement.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.assetowner.metadataelements;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.odpi.openmetadata.accessservices.assetowner.properties.AssetProperties;\n+import org.odpi.openmetadata.accessservices.assetowner.properties.FileProperties;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * FileElement contains the properties and header for a file retrieved from the metadata repository.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public class FileElement extends FileProperties implements MetadataElement,\n+                                                           Serializable\n+{\n+    private static final long serialVersionUID = 1L;\n+\n+    private ElementHeader elementHeader = null;\n+\n+\n+    /**\n+     * Default constructor\n+     */\n+    public FileElement()\n+    {\n+        super();\n+    }\n+\n+\n+    /**\n+     * Copy/clone constructor\n+     *\n+     * @param template object to copy\n+     */\n+    public FileElement(FileElement template)\n+    {\n+        if (template != null)\n+        {\n+            elementHeader = template.getElementHeader();\n+        }\n+    }\n+\n+\n+    /**\n+     * Return the element header associated with the properties.\n+     *\n+     * @return element header object\n+     */\n+    @Override\n+    public ElementHeader getElementHeader()\n+    {\n+        return elementHeader;\n+    }\n+\n+\n+    /**\n+     * Set up the element header associated with the properties.\n+     *\n+     * @param elementHeader element header object\n+     */\n+    @Override\n+    public void setElementHeader(ElementHeader elementHeader)\n+    {\n+        this.elementHeader = elementHeader;\n+    }\n+\n+\n+    /**\n+     * JSON-style toString\n+     *\n+     * @return return string containing the property names and values\n+     */\n+    @Override\n+    public String toString()\n+    {\n+        return \"AssetElement{\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzcxOTgyOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-owner/asset-owner-api/src/main/java/org/odpi/openmetadata/accessservices/assetowner/metadataelements/ElementOrigin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTo0OToxMlrOHcZeaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTo0OToxMlrOHcZeaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzOTU2Mw==", "bodyText": "ElementOrigin", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499539563", "createdAt": "2020-10-05T11:49:12Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-owner/asset-owner-api/src/main/java/org/odpi/openmetadata/accessservices/assetowner/metadataelements/ElementOrigin.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetowner.metadataelements;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * The ElementType bean provides details of the type information associated with a metadata element.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzg2MzgxOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-owner/asset-owner-api/src/main/java/org/odpi/openmetadata/accessservices/assetowner/properties/DocumentSchemaAttributeProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozMToyNlrOHca22Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozMToyNlrOHca22Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2MjIwMQ==", "bodyText": "Is this method header needed, or are we just inheriting from superclass?", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499562201", "createdAt": "2020-10-05T12:31:26Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-owner/asset-owner-api/src/main/java/org/odpi/openmetadata/accessservices/assetowner/properties/DocumentSchemaAttributeProperties.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetowner.properties;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * A DocumentSchemaAttributeProperties defines an attribute in a hierarchical document structure such as an\n+ * XML document.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public class DocumentSchemaAttributeProperties extends SchemaAttributeProperties\n+{\n+    private static final long     serialVersionUID = 1L;\n+\n+\n+    /**\n+     * Default constructor\n+     */\n+    public DocumentSchemaAttributeProperties()\n+    {\n+        super();\n+    }\n+\n+\n+    /**\n+     * Copy/clone Constructor.\n+     *\n+     * @param template template object to copy.\n+     */\n+    public DocumentSchemaAttributeProperties(DocumentSchemaAttributeProperties template)\n+    {\n+        super(template);\n+    }\n+\n+\n+\n+    /**\n+     * Standard toString method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzg3MzM0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-owner/asset-owner-api/src/main/java/org/odpi/openmetadata/accessservices/assetowner/properties/ExternalSchemaTypeProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozNDoxMlrOHca81w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjozNDoxMlrOHca81w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2MzczNQ==", "bodyText": "ExternalSchemTypeProperties", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499563735", "createdAt": "2020-10-05T12:34:12Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-owner/asset-owner-api/src/main/java/org/odpi/openmetadata/accessservices/assetowner/properties/ExternalSchemaTypeProperties.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.assetowner.properties;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * EnumSchemaTypeProperties carries the specialized parameters for creating or updating enum schema types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzk1MDUwOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/properties/ExternalSchemaTypeProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjo1NDozMFrOHcbswA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMjo1NDozMFrOHcbswA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3NjAwMA==", "bodyText": "ExternalSchemaTypeProperties...", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499576000", "createdAt": "2020-10-05T12:54:30Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/properties/ExternalSchemaTypeProperties.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.datamanager.properties;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * EnumSchemaTypeProperties carries the specialized parameters for creating or updating enum schema types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODAxNDA0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/metadataelements/TabularColumnTypeElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzoxMDoyNVrOHccTrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzoxMDoyNVrOHccTrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4NTk2NA==", "bodyText": "TabularColumnTypeElement", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499585964", "createdAt": "2020-10-05T13:10:25Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/metadataelements/TabularColumnTypeElement.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+\n+package org.odpi.openmetadata.accessservices.datamanager.metadataelements;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.odpi.openmetadata.accessservices.datamanager.properties.SchemaTypeProperties;\n+\n+import java.io.Serializable;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * TabularColumnTypeElement contains the properties and header for a database column entity\n+ * retrieved from the metadata repository.\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public class TabularColumnTypeElement extends SchemaTypeProperties implements MetadataElement,\n+                                                                              Serializable\n+{\n+    private static final long serialVersionUID = 1L;\n+\n+    private ElementHeader                elementHeader = null;\n+\n+\n+    /**\n+     * Default constructor\n+     */\n+    public TabularColumnTypeElement()\n+    {\n+        super();\n+    }\n+\n+\n+    /**\n+     * Copy/clone constructor\n+     *\n+     * @param template object to copy\n+     */\n+    public TabularColumnTypeElement(TabularColumnTypeElement template)\n+    {\n+        super(template);\n+\n+        if (template != null)\n+        {\n+            elementHeader = template.getElementHeader();\n+        }\n+    }\n+\n+\n+    /**\n+     * Return the element header associated with the properties.\n+     *\n+     * @return element header object\n+     */\n+    @Override\n+    public ElementHeader getElementHeader()\n+    {\n+        return elementHeader;\n+    }\n+\n+\n+    /**\n+     * Set up the element header associated with the properties.\n+     *\n+     * @param elementHeader element header object\n+     */\n+    @Override\n+    public void setElementHeader(ElementHeader elementHeader)\n+    {\n+        this.elementHeader = elementHeader;\n+    }\n+\n+\n+    /**\n+     * JSON-style toString\n+     *\n+     * @return return string containing the property names and values\n+     */\n+    @Override\n+    public String toString()\n+    {\n+        return \"DatabaseColumnTypeElement{\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODE1MTk5OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/properties/ComplexSchemaTypeProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0MjoxOFrOHcdoyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0MjoxOFrOHcdoyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwNzc1Mg==", "bodyText": "ComplexSchemaTypeProperties", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499607752", "createdAt": "2020-10-05T13:42:18Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/properties/ComplexSchemaTypeProperties.java", "diffHunk": "@@ -53,20 +77,41 @@ public ComplexSchemaTypeProperties(ComplexSchemaTypeProperties template)\n     @Override\n     public String toString()\n     {\n-        return \"ComplexSchemaTypeProperties{\" +\n-                \"versionNumber='\" + getVersionNumber() + '\\'' +\n+        return \"ComplexSchemaType{\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODE2MTY5OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/asset-owner/asset-owner-server/src/main/java/org/odpi/openmetadata/accessservices/assetowner/server/AssetOwnerInstanceHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0NDozM1rOHcdu9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0NDozM1rOHcdu9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwOTMzNA==", "bodyText": "AssetOwnerInstanceHandler", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499609334", "createdAt": "2020-10-05T13:44:33Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/asset-owner/asset-owner-server/src/main/java/org/odpi/openmetadata/accessservices/assetowner/server/AssetOwnerInstanceHandler.java", "diffHunk": "@@ -2,16 +2,24 @@\n /* Copyright Contributors to the ODPi Egeria project. */\n package org.odpi.openmetadata.accessservices.assetowner.server;\n \n+import org.odpi.openmetadata.accessservices.assetowner.metadataelements.*;\n import org.odpi.openmetadata.adminservices.configuration.registration.AccessServiceDescription;\n-import org.odpi.openmetadata.commonservices.multitenant.ODFOMASServiceInstanceHandler;\n+import org.odpi.openmetadata.commonservices.generichandlers.*;\n+import org.odpi.openmetadata.commonservices.multitenant.OMASServiceInstanceHandler;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.InvalidParameterException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.PropertyServerException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.UserNotAuthorizedException;\n+import org.odpi.openmetadata.frameworks.discovery.properties.Annotation;\n+import org.odpi.openmetadata.frameworks.discovery.properties.DataField;\n+import org.odpi.openmetadata.frameworks.discovery.properties.DiscoveryAnalysisReport;\n \n \n /**\n  * AssetConsumerInstanceHandler retrieves information from the instance map for the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODE5MzYzOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/properties/FileManagerProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1MTozNFrOHceClQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1MTozNFrOHceClQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxNDM1Nw==", "bodyText": "FileManagerProperties", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499614357", "createdAt": "2020-10-05T13:51:34Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/properties/FileManagerProperties.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.datamanager.properties;\n+\n+\n+/**\n+ * FileSystemProperties describes an application that manages a collection of files.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODE5NDk1OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/properties/FileManagerProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1MTo0OFrOHceDTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1MTo0OFrOHceDTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxNDU0MA==", "bodyText": "FileManagerProperties", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499614540", "createdAt": "2020-10-05T13:51:48Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/properties/FileManagerProperties.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.datamanager.properties;\n+\n+\n+/**\n+ * FileSystemProperties describes an application that manages a collection of files.\n+ */\n+public class FileManagerProperties extends SoftwareServerCapabilitiesProperties\n+{\n+    private static final long    serialVersionUID = 1L;\n+\n+    /**\n+     * Default constructor\n+     */\n+    public FileManagerProperties()\n+    {\n+        super();\n+    }\n+\n+\n+    /**\n+     * Copy/clone constructor.\n+     *\n+     * @param template object to copy\n+     */\n+    public FileManagerProperties(FileManagerProperties template)\n+    {\n+        super(template);\n+    }\n+\n+\n+    /**\n+     * Copy/clone constructor from OCF bean.\n+     *\n+     * @param template object to copy\n+     */\n+    public FileManagerProperties(SoftwareServerCapabilitiesProperties template)\n+    {\n+        super(template);\n+    }\n+\n+\n+    /**\n+     * JSON-style toString\n+     *\n+     * @return return string containing the property names and values\n+     */\n+    @Override\n+    public String toString()\n+    {\n+        return \"FileSystemProperties{\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODIxMjA2OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/rest/DataFolderRequestBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1NTozM1rOHceNtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1NTozM1rOHceNtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxNzIwNQ==", "bodyText": "DataFolderRequestBody", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499617205", "createdAt": "2020-10-05T13:55:33Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/rest/DataFolderRequestBody.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.datamanager.rest;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.odpi.openmetadata.accessservices.datamanager.properties.FileFolderProperties;\n+\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * DataFileRequestBody carries the parameters for creating a new file asset.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODIxNzE3OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/rest/FileManagerRequestBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1Njo0NFrOHceQ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1Njo0NFrOHceQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxODA0Ng==", "bodyText": "FileManagerRequestBody", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499618046", "createdAt": "2020-10-05T13:56:44Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/rest/FileManagerRequestBody.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.datamanager.rest;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.odpi.openmetadata.accessservices.datamanager.properties.FileManagerProperties;\n+\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+\n+/**\n+ * FileManagerProperties describes the root node of a file system.  FileManagerRequestBody extends these properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODIxOTgxOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/rest/FileSystemRequestBody.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1NzoxNlrOHceSmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1NzoxNlrOHceSmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxODQ1Nw==", "bodyText": "FileSystemRequestBody", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499618457", "createdAt": "2020-10-05T13:57:16Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/access-services/data-manager/data-manager-api/src/main/java/org/odpi/openmetadata/accessservices/datamanager/rest/FileSystemRequestBody.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.datamanager.rest;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.odpi.openmetadata.accessservices.datamanager.properties.FileSystemProperties;\n+\n+import java.util.Objects;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+\n+/**\n+ * FileSystemProperties describes the root node of a file system.  FileSystemRequestBody extends these properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODI2NDYwOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/admin-services/docs/concepts/integration-daemon.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowNzoyM1rOHcetzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNjoxMTo1OVrOHioR7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNTQyMg==", "bodyText": "through [an] OMAS?", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499625422", "createdAt": "2020-10-05T14:07:23Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/admin-services/docs/concepts/integration-daemon.md", "diffHunk": "@@ -7,14 +7,21 @@ An **Integration Daemon** is an [OMAG Server](omag-server.md)\n that provides metadata exchange services between third party\n technology and the open metadata ecosystem.\n \n-Each integration daemon is paired with an \n-[access service](../../../access-services) and supports a particular\n-class of technology.\n+The integration daemon interacts with the open metadata\n+ecosystem through [Open Metadata Access Service (OMAS)](../../../access-services)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA3MzU4MQ==", "bodyText": "plural", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r506073581", "createdAt": "2020-10-16T06:11:59Z", "author": {"login": "mandy-chessell"}, "path": "open-metadata-implementation/admin-services/docs/concepts/integration-daemon.md", "diffHunk": "@@ -7,14 +7,21 @@ An **Integration Daemon** is an [OMAG Server](omag-server.md)\n that provides metadata exchange services between third party\n technology and the open metadata ecosystem.\n \n-Each integration daemon is paired with an \n-[access service](../../../access-services) and supports a particular\n-class of technology.\n+The integration daemon interacts with the open metadata\n+ecosystem through [Open Metadata Access Service (OMAS)](../../../access-services)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNTQyMg=="}, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODI2NzUxOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/admin-services/docs/concepts/integration-daemon.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowODowMVrOHcevlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowODowMVrOHcevlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNTg3OQ==", "bodyText": "look in a bit more details at....", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499625879", "createdAt": "2020-10-05T14:08:01Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/admin-services/docs/concepts/integration-daemon.md", "diffHunk": "@@ -7,14 +7,21 @@ An **Integration Daemon** is an [OMAG Server](omag-server.md)\n that provides metadata exchange services between third party\n technology and the open metadata ecosystem.\n \n-Each integration daemon is paired with an \n-[access service](../../../access-services) and supports a particular\n-class of technology.\n+The integration daemon interacts with the open metadata\n+ecosystem through [Open Metadata Access Service (OMAS)](../../../access-services)\n+running in a [Metadata Access Point](metadata-access-point.md) or \n+[Metadata Server](metadata-server.md).\n \n ![Figure 1](integration-daemon.png)\n > **Figure 1:** The integration daemon sitting between a third party technology and\n > a metadata access point / metadata server\n \n+Inside the integration daemon are one or more **[Open Metadata Integration\n+Services (OMISs)](../../../integration-services)** that each focus on integrating\n+a specific type of technology.  They are paired with a specific\n+[Open Metadata Access Service (OMAS)](../../../access-services)\n+running in the metadata access point / metadata server.\n+\n To understand how an integration daemon works, it is necessary to\n look at a bit more detail at how technologies can be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODI3MzE4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/admin-services/docs/user/configuring-an-omag-server.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowOToxOFrOHcezDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowOToxOFrOHcezDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNjc2NA==", "bodyText": "Needs clean up after conflict merge?", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499626764", "createdAt": "2020-10-05T14:09:18Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/admin-services/docs/user/configuring-an-omag-server.md", "diffHunk": "@@ -80,9 +80,12 @@ Below are the commands to\n   * [Configuring the open metadata archives loaded at server start](configuring-the-startup-archives.md) - Metadata Access Point, Metadata Server and Repository Proxy only\n   * [Configuring the repository proxy connectors](configuring-the-repository-proxy-connector.md) - Repository Proxy only\n   * [Configuring the Open Metadata Access Services (OMASs)](configuring-the-access-services.md) - Metadata Access Point and Metadata Server only\n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODI4MjgwOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/admin-services/docs/user/configuring-the-view-services.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoxMToyNlrOHce5BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoxMToyNlrOHce5BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyODI5Mw==", "bodyText": "Needs cleanup after conflict merge?", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499628293", "createdAt": "2020-10-05T14:11:26Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/admin-services/docs/user/configuring-the-view-services.md", "diffHunk": "@@ -1,6 +1,17 @@\n <!-- SPDX-License-Identifier: CC-BY-4.0 -->\n <!-- Copyright Contributors to the ODPi Egeria project. -->\n \n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODQzMTAzOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/common-services/repository-handler/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDo0MzoxM1rOHcgVrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDo0MzoxM1rOHcgVrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY1MjAxNA==", "bodyText": "dependent :-)", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499652014", "createdAt": "2020-10-05T14:43:13Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/common-services/repository-handler/README.md", "diffHunk": "@@ -8,8 +8,23 @@\n The repository handler provides methods for managing linked groups\n of Open Metadata Repository Services (OMRS) instances.\n \n-The Repository Handler also provides error handling that converts the exceptions from the OMRS into common services exceptions.\n-The aim is to reduce the coding needed in the specific handlers used by the Open Metadata Access Services (OMASs).\n+It supports the following abstractions:\n+* Conversion of repository services exceptions into common exceptions.\n+* Creation of the correct type of instances dependant on the setting of the external source GUID.  This means that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODQ1ODUzOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/common-services/metadata-security/metadata-security-apis/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDo0ODo0OFrOHcgmVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDo0ODo0OFrOHcgmVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY1NjI3OA==", "bodyText": "choose", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499656278", "createdAt": "2020-10-05T14:48:48Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/common-services/metadata-security/metadata-security-apis/README.md", "diffHunk": "@@ -0,0 +1,107 @@\n+<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project 2020. -->\n+\n+# API for the open metadata connectors\n+\n+Below is a description of the API of the two\n+[Open Metadata Security Connectors](../metadata-security-connectors).\n+\n+## Open metadata platform security connector interface\n+\n+The connector that plugs in to the platform implements the following interface.\n+\n+*  **OpenMetadataPlatformSecurity** - provides the interface for a plugin connector that validates whether a calling\n+   user can access any service on an OMAG Server Platform.  It is called within the context of a specific\n+   OMAG Server Platform request.\n+   Each OMAG Server Platform can define its own plugin connector implementation and will have its own instance\n+   of the connector. \n+   \n+   * **validateUserForPlatform** - Check that the calling user is authorized to issue a (any) request to the OMAG Server Platform.\n+   * **validateUserAsAdminForPlatform** - Check that the calling user is authorized to issue administration requests to the OMAG Server Platform.\n+   * **validateUserAsOperatorForPlatform** - Check that the calling user is authorized to issue operator requests to the OMAG Server Platform.\n+   * **validateUserAsInvestigatorForPlatform** - Check that the calling user is authorized to issue operator requests to the OMAG Server Platform.\n+  \n+## Open metadata server security connector interface\n+\n+The connector that can be defined for an OMAG Server offers a series of layers of\n+security checks.  An organization can chose which layers to make use of and which to allow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODU1NTE5OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/frameworks/open-connector-framework/src/main/java/org/odpi/openmetadata/frameworks/connectors/properties/beans/ElementStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTowOTo1MFrOHchijA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTowOTo1MFrOHchijA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY3MTY5Mg==", "bodyText": "ElementStatus", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499671692", "createdAt": "2020-10-05T15:09:50Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/frameworks/open-connector-framework/src/main/java/org/odpi/openmetadata/frameworks/connectors/properties/beans/ElementStatus.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.frameworks.connectors.properties.beans;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import java.io.Serializable;\n+\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;\n+import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n+\n+/**\n+ * The ElementStatus defines the status of an element in the metadata collection.  It effectively\n+ * defines its visibility to different types of queries.  Most queries by default will only return instances in the\n+ * active status.\n+ * <ul>\n+ *     <li>Unknown: Unknown instance status.</li>\n+ *     <li>Draft: The content is incomplete.</li>\n+ *     <li>Proposed: The content is in review.</li>\n+ *     <li>Approved: The content is approved.</li>\n+ *     <li>Rejected: The request or proposal is rejected.</li>\n+ *     <li>Approved concept: The request or proposal is approved for development.</li>\n+ *     <li>Under development: The instance is being developed.</li>\n+ *     <li>Development complete: The development of the instance is complete.</li>\n+ *     <li>Approved for deployment: The instance is approved for deployment.</li>\n+ *     <li>StandBy: The instance is deployed in standby mode.</li>\n+ *     <li>Active: The instance is approved and in use.</li>\n+ *     <li>Failed: The instance is not in use due to failure.</li>\n+ *     <li>Disabled: The instance is shutdown or disabled.</li>\n+ *     <li>Complete: The activity associated with the instance is complete.</li>\n+ *     <li>Deprecated: The instance is out of date and should not be used.</li>\n+ *     <li>Other: The instance is in a locally defined state.</li>\n+ *     <li>Deleted: The instance has been deleted and is waiting to be purged.  It is kept in the metadata collection\n+ *     to support a restore request.  It is not returned on normal queries.</li>\n+ * </ul>\n+ */\n+@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown=true)\n+public enum ElementStatus implements Serializable\n+{\n+    UNKNOWN                 (0,  \"<Unknown>\",               \"Unknown instance status.\"),\n+    DRAFT                   (1,  \"Draft\",                   \"The content is incomplete.\"),\n+    PREPARED                (2,  \"Prepared\",                \"The content is ready for review.\"),\n+    PROPOSED                (3,  \"Proposed\",                \"The content is in review.\"),\n+    APPROVED                (4,  \"Approved\",                \"The content is approved.\"),\n+    REJECTED                (5,  \"Rejected\",                \"The request or proposal is rejected.\"),\n+    APPROVED_CONCEPT        (6,  \"Approved concept\",        \"The request or proposal is approved for development.\"),\n+    UNDER_DEVELOPMENT       (7,  \"Under development\",       \"The instance is being developed.\"),\n+    DEVELOPMENT_COMPLETE    (8,  \"Development complete\",    \"The development of the instance is complete.\"),\n+    APPROVED_FOR_DEPLOYMENT (9,  \"Approved for deployment\", \"The instance is approved for deployment.\"),\n+    STANDBY                 (10, \"StandBy\",                 \"The instance is deployed in standby mode.\"),\n+    ACTIVE                  (15, \"Active\",                  \"The instance is approved and in use.\"),\n+    FAILED                  (20, \"Failed\",                  \"The instance is not in use due to failure.\"),\n+    DISABLED                (21, \"Disabled\",                \"The instance is shutdown or disabled.\"),\n+    COMPLETE                (22, \"Complete\",                \"The activity associated with the instance is complete.\"),\n+    DEPRECATED              (30, \"Deprecated\",              \"The instance is out of date and should not be used.\"),\n+    OTHER                   (50, \"Other\",                   \"The instance is in a locally defined state.\"),\n+    DELETED                 (99, \"Deleted\",                 \"The instance has been deleted and is no longer available.\");\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private  int    ordinal;\n+    private  String name;\n+    private  String description;\n+\n+\n+    /**\n+     * Default constructor sets up the specific values for an enum instance.\n+     *\n+     * @param ordinal int enum value ordinal\n+     * @param name String name\n+     * @param description String description\n+     */\n+    ElementStatus(int     ordinal,\n+                  String  name,\n+                  String  description)\n+    {\n+        this.ordinal = ordinal;\n+        this.name = name;\n+        this.description = description;\n+    }\n+\n+\n+    /**\n+     * Return the numerical value for the enum.\n+     *\n+     * @return int enum value ordinal\n+     */\n+    public int getOrdinal() { return ordinal; }\n+\n+\n+    /**\n+     * Return the descriptive name for the enum.\n+     *\n+     * @return String name\n+     */\n+    public String getName() { return name; }\n+\n+\n+    /**\n+     * Return the description for the enum.\n+     *\n+     * @return String description\n+     */\n+    public String getDescription() { return description; }\n+\n+\n+    /**\n+     * toString() JSON-style\n+     *\n+     * @return string description\n+     */\n+    @Override\n+    public String toString()\n+    {\n+        return \"InstanceStatus{\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODU5MjU4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/frameworks/open-connector-framework/src/main/java/org/odpi/openmetadata/frameworks/connectors/properties/AssetSecurityTags.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToxNzo1M1rOHch5sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToxNzo1M1rOHch5sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY3NzYxNw==", "bodyText": "Javadoc should be for AssetSecurityTags", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499677617", "createdAt": "2020-10-05T15:17:53Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/frameworks/open-connector-framework/src/main/java/org/odpi/openmetadata/frameworks/connectors/properties/AssetSecurityTags.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.frameworks.connectors.properties;\n+\n+import org.odpi.openmetadata.frameworks.connectors.properties.beans.SecurityTags;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Meaning is a cut-down summary of a glossary term to aid the asset consumer in understanding the content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODYwMjk2OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/frameworks/open-connector-framework/src/main/java/org/odpi/openmetadata/frameworks/connectors/properties/AssetExternalSchemaType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToyMDoxN1rOHciAGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToyMDoxN1rOHciAGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY3OTI1Nw==", "bodyText": "AssetExternalSchemaType", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499679257", "createdAt": "2020-10-05T15:20:17Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/frameworks/open-connector-framework/src/main/java/org/odpi/openmetadata/frameworks/connectors/properties/AssetExternalSchemaType.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.frameworks.connectors.properties;\n+\n+import org.odpi.openmetadata.frameworks.connectors.properties.beans.ExternalSchemaType;\n+import org.odpi.openmetadata.frameworks.connectors.properties.beans.SchemaType;\n+\n+import java.util.Objects;\n+\n+/**\n+ * SchemaTypeChoice describes a schema element that has a choice of type.  This class returns the list of schema choices.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODYwNTY4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/frameworks/open-connector-framework/src/main/java/org/odpi/openmetadata/frameworks/connectors/properties/AssetExternalSchemaType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToyMDo1N1rOHciB0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToyMDo1N1rOHciB0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY3OTY5Nw==", "bodyText": "AssetExternalSchemaType", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499679697", "createdAt": "2020-10-05T15:20:57Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/frameworks/open-connector-framework/src/main/java/org/odpi/openmetadata/frameworks/connectors/properties/AssetExternalSchemaType.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.frameworks.connectors.properties;\n+\n+import org.odpi.openmetadata.frameworks.connectors.properties.beans.ExternalSchemaType;\n+import org.odpi.openmetadata.frameworks.connectors.properties.beans.SchemaType;\n+\n+import java.util.Objects;\n+\n+/**\n+ * SchemaTypeChoice describes a schema element that has a choice of type.  This class returns the list of schema choices.\n+ */\n+public class AssetExternalSchemaType extends AssetSchemaType\n+{\n+    private static final long     serialVersionUID = 1L;\n+\n+    protected ExternalSchemaType externalSchemaTypeBean;\n+\n+\n+    /**\n+     * Constructor used by the subclasses\n+     *\n+     * @param parentAsset descriptor of asset that this property relates to.\n+     */\n+    protected AssetExternalSchemaType(AssetDescriptor parentAsset)\n+    {\n+        super(parentAsset);\n+    }\n+\n+\n+    /**\n+     * Bean constructor\n+     *\n+     * @param externalSchemaTypeBean bean containing the schema element properties\n+     */\n+    public AssetExternalSchemaType(ExternalSchemaType externalSchemaTypeBean)\n+    {\n+        super(externalSchemaTypeBean);\n+\n+        if (externalSchemaTypeBean == null)\n+        {\n+            this.externalSchemaTypeBean = new ExternalSchemaType();\n+        }\n+        else\n+        {\n+            this.externalSchemaTypeBean = externalSchemaTypeBean;\n+        }\n+    }\n+\n+\n+    /**\n+     * Bean constructor with parent asset\n+     *\n+     * @param parentAsset descriptor for parent asset\n+     * @param externalSchemaTypeBean bean containing the schema element properties\n+     */\n+    public AssetExternalSchemaType(AssetDescriptor    parentAsset,\n+                                   ExternalSchemaType externalSchemaTypeBean)\n+    {\n+        super(parentAsset, externalSchemaTypeBean);\n+\n+        if (externalSchemaTypeBean == null)\n+        {\n+            this.externalSchemaTypeBean = new ExternalSchemaType();\n+        }\n+        else\n+        {\n+            this.externalSchemaTypeBean = externalSchemaTypeBean;\n+        }\n+    }\n+\n+\n+    /**\n+     * Copy/clone Constructor the parentAsset is passed separately to the template because it is also\n+     * likely to be being cloned in the same operation and we want the definitions clone to point to the\n+     * asset clone and not the original asset.\n+     *\n+     * @param parentAsset description of the asset that this schema element is attached to.\n+     * @param templateSchemaElement template object to copy.\n+     */\n+    public AssetExternalSchemaType(AssetDescriptor         parentAsset,\n+                                   AssetExternalSchemaType templateSchemaElement)\n+    {\n+        super(parentAsset, templateSchemaElement);\n+\n+        if (templateSchemaElement == null)\n+        {\n+            this.externalSchemaTypeBean = new ExternalSchemaType();\n+        }\n+        else\n+        {\n+            this.externalSchemaTypeBean = templateSchemaElement.getExternalSchemaTypeBean();\n+        }\n+    }\n+\n+\n+    /**\n+     * Return the bean with all of the properties.\n+     *\n+     * @return  schema choice bean\n+     */\n+    protected ExternalSchemaType getExternalSchemaTypeBean()\n+    {\n+        return externalSchemaTypeBean;\n+    }\n+\n+\n+    /**\n+     * Return the external schema type.\n+     *\n+     * @return reusable schema type\n+     */\n+    public AssetSchemaType getLinkedSchemaType()\n+    {\n+        AssetSchemaType assetSchemaType = null;\n+\n+        if ((externalSchemaTypeBean != null) && (externalSchemaTypeBean.getLinkedSchemaType() != null))\n+        {\n+            assetSchemaType = AssetSchemaType.createAssetSchemaType(parentAsset, externalSchemaTypeBean.getLinkedSchemaType());\n+        }\n+\n+        return assetSchemaType;\n+    }\n+\n+\n+    /**\n+     * Return a clone of this schema element.  This method is needed because AssetSchemaType\n+     * is abstract.\n+     *\n+     * @param parentAsset description of the asset that this schema element is attached to.\n+     * @return An instance of the this object's subclass\n+     */\n+    @Override\n+    protected AssetSchemaType cloneAssetSchemaType(AssetDescriptor parentAsset)\n+    {\n+        return new AssetExternalSchemaType(parentAsset, this);\n+    }\n+\n+\n+    /**\n+     * Return this schema element bean.  This method is needed because SchemaElement\n+     * is abstract.\n+     *\n+     * @return An instance of the appropriate subclass of SchemaElement bean\n+     */\n+    @Override\n+    protected SchemaType getSchemaTypeBean()\n+    {\n+        return externalSchemaTypeBean;\n+    }\n+\n+\n+    /**\n+     * Set up the bean that contains the properties of the schema.\n+     *\n+     * @param bean bean containing the schema properties\n+     */\n+    protected void  setBean(ExternalSchemaType bean)\n+    {\n+        super.setBean(bean);\n+        this.externalSchemaTypeBean = bean;\n+    }\n+\n+\n+    /**\n+     * Standard toString method.\n+     *\n+     * @return print out of variables in a JSON-style\n+     */\n+    @Override\n+    public String toString()\n+    {\n+        return \"AssetSchemaTypeChoice{\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODYzNjUxOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/common-services/ocf-metadata-management/ocf-metadata-server/src/main/java/org/odpi/openmetadata/commonservices/ocf/metadatamanagement/server/OCFMetadataInstanceHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToyNzo1N1rOHciVFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToyNzo1N1rOHciVFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4NDYyOA==", "bodyText": "OCFMetadataInstanceHandler...", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499684628", "createdAt": "2020-10-05T15:27:57Z", "author": {"login": "grahamwallis"}, "path": "open-metadata-implementation/common-services/ocf-metadata-management/ocf-metadata-server/src/main/java/org/odpi/openmetadata/commonservices/ocf/metadatamanagement/server/OCFMetadataInstanceHandler.java", "diffHunk": "@@ -3,14 +3,20 @@\n package org.odpi.openmetadata.commonservices.ocf.metadatamanagement.server;\n \n import org.odpi.openmetadata.adminservices.configuration.registration.CommonServicesDescription;\n-import org.odpi.openmetadata.commonservices.multitenant.OCFOMASServiceInstanceHandler;\n+import org.odpi.openmetadata.commonservices.generichandlers.*;\n+import org.odpi.openmetadata.commonservices.multitenant.OMASServiceInstanceHandler;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.InvalidParameterException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.PropertyServerException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.UserNotAuthorizedException;\n+import org.odpi.openmetadata.frameworks.connectors.properties.beans.*;\n+\n \n /**\n  * ConnectedAssetInstanceHandler retrieves information from the instance map for the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTA3Mjk4OnYy", "diffSide": "LEFT", "path": "Content-Organization.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyMDoyNlrOHcmlYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyMDoyNlrOHcmlYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NDMzOA==", "bodyText": "Not an issue with the gradle pom, but this is a useful list of the affected modules. Can you verify that when built, each maven module either has packaging=pom if an aggregator, or packaging=jar, AND contains 3 jars for the a) source b) javadoc c) built jar - otherwise the new modules may not be releaseable. Hopefully should happen by default but worth checking. If neiher a jar or pom we should figure out how to handle on a case by case basis", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r499754338", "createdAt": "2020-10-05T17:20:26Z", "author": {"login": "planetf1"}, "path": "Content-Organization.md", "diffHunk": "@@ -61,29 +63,34 @@ The Egeria core repository contains the core Egeria functionality, and is organi\n   * **[admin-services](open-metadata-implementation/admin-services)** - supports the configuration of the OMAG Server Platform.  This configuration determines which of the open metadata and governance services are active.\n   * **[common-services](open-metadata-implementation/common-services)** - support modules that are reused by other services.\n     * **[ffdc-services](open-metadata-implementation/common-services/ffdc-services)** - provides base classes and validation for First Failure Data Capture (FFDC).\n-    * **[gaf-metadata-management](open-metadata-implementation/common-services/gaf-metadata-management)** - provides metadata management for the [Governance Action Framework (GAF)](open-metadata-implementation/frameworks/governance-action-framework) properties and APIs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c1a1a4c12dcbe989db2969a253830652249f2d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTc1OTUxOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/common-services/generic-handlers/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDo0MDowMFrOHdAQ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjoyMTo1OFrOHfQoqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3NTEwMQ==", "bodyText": "this will pull avro into many areas. Not necessarily a problem, but is it an intent to have dependencies on connectors - I had assumed we were striving for dynamic loading of all connectors?", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r500175101", "createdAt": "2020-10-06T10:40:00Z", "author": {"login": "planetf1"}, "path": "open-metadata-implementation/common-services/generic-handlers/pom.xml", "diffHunk": "@@ -0,0 +1,111 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!-- SPDX-License-Identifier: Apache-2.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project.  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>common-services</artifactId>\n+        <groupId>org.odpi.egeria</groupId>\n+        <version>2.4-SNAPSHOT</version>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <scm>\n+        <connection>scm:git:git://github.com/odpi/egeria.git</connection>\n+        <developerConnection>scm:git:ssh://github.com/odpi/egeria.git</developerConnection>\n+        <url>http://github.com/odpi/egeria/tree/master</url>\n+    </scm>\n+\n+    <name>Generic Handler Services</name>\n+    <description>\n+        Common services for managing OMAS bean mappings to OMRS API objects as well as\n+        asset visibility through supported zones and calls to the Open Metadata Security Verifier.\n+    </description>\n+\n+    <artifactId>generic-handlers</artifactId>\n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>open-connector-framework</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>open-discovery-framework</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>repository-services-apis</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>repository-handler</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>audit-log-framework</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>open-metadata-ut</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>ffdc-services</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>metadata-security-apis</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>metadata-security-server</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>csv-file-connector</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>basic-file-connector</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>avro-file-connector</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e0310fd2a63715c71231be993f72ce2aadd988"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0MDQ1OQ==", "bodyText": "This is deliberate and not new.  We build the connection to the asset as it is onboarded in Asset Owner - this needs the connector type information which is extracted from the connector's ConnectorProvider.  The alternative is to hardcode the information about the connector in the OMAS.", "url": "https://github.com/odpi/egeria/pull/3707#discussion_r502540459", "createdAt": "2020-10-09T16:21:58Z", "author": {"login": "mandy-chessell"}, "path": "open-metadata-implementation/common-services/generic-handlers/pom.xml", "diffHunk": "@@ -0,0 +1,111 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!-- SPDX-License-Identifier: Apache-2.0 -->\n+<!-- Copyright Contributors to the ODPi Egeria project.  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>common-services</artifactId>\n+        <groupId>org.odpi.egeria</groupId>\n+        <version>2.4-SNAPSHOT</version>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <scm>\n+        <connection>scm:git:git://github.com/odpi/egeria.git</connection>\n+        <developerConnection>scm:git:ssh://github.com/odpi/egeria.git</developerConnection>\n+        <url>http://github.com/odpi/egeria/tree/master</url>\n+    </scm>\n+\n+    <name>Generic Handler Services</name>\n+    <description>\n+        Common services for managing OMAS bean mappings to OMRS API objects as well as\n+        asset visibility through supported zones and calls to the Open Metadata Security Verifier.\n+    </description>\n+\n+    <artifactId>generic-handlers</artifactId>\n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>open-connector-framework</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>open-discovery-framework</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>repository-services-apis</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>repository-handler</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>audit-log-framework</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>open-metadata-ut</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>ffdc-services</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>metadata-security-apis</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>metadata-security-server</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>csv-file-connector</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>basic-file-connector</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.odpi.egeria</groupId>\n+            <artifactId>avro-file-connector</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE3NTEwMQ=="}, "originalCommit": {"oid": "28e0310fd2a63715c71231be993f72ce2aadd988"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2558, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}