{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0OTY2MTgy", "number": 3366, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyMTo0NFrOEQ9t3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoyOTowMFrOERebow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjIzODM2OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyMTo0NFrOG1aLqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyMTo0NFrOG1aLqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1NjY4Mg==", "bodyText": "It is more than a relationship between a category and another category, it is the relationship between a child category and its parent category. I think it is defined in the UML as \"Relationship between two categories used to create nested categories.\"\nIt is possible to create this relationship by specifying a category with a parentCategory", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458656682", "createdAt": "2020-07-22T09:21:44Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "diffHunk": "@@ -1935,6 +1935,107 @@ public SubjectAreaRelationshipRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SemanticAssignment> getSemanticAssignmentRelationship(String serverName, String userId, String guid) {\n         String restAPIName = \"getSemanticAssignmentRelationship\";\n-        return restoreLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+        return getLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship\n+     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @return response, when successful contains the updated categoryHierarchyLink\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> updateCategoryHierarchyLink(String serverName, String userId, String guid, CategoryHierarchyLink categoryHierarchyLink, Boolean isReplace) {\n+        String restAPIName = \"updateCategoryHierarchyLink\";\n+        return updateLine(serverName,restAPIName, userId, guid, CategoryHierarchyLinkMapper.class, categoryHierarchyLink, isReplace);\n+    }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c402c3465ea8589f9504d86478bde978d48cfb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjI1NDk1OnYy", "diffSide": "RIGHT", "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyNjowM1rOG1aVww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyNjowM1rOG1aVww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1OTI2Nw==", "bodyText": "Could we get cat3 and validate that it has a parent of cat4 as well please.", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458659267", "createdAt": "2020-07-22T09:26:03Z", "author": {"login": "davidradl"}, "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java", "diffHunk": "@@ -198,6 +199,9 @@ public void run() throws SubjectAreaFVTCheckedException, InvalidParameterExcepti\n         projectFVT.deleteProject(project.getSystemAttributes().getGUID());\n         projectFVT.purgeProject(project.getSystemAttributes().getGUID());\n \n+        Category cat3 = catFVT.createCategory(DEFAULT_TEST_CAT_NAME3, glossaryGuid);\n+        Category cat4 = catFVT.createCategory(DEFAULT_TEST_CAT_NAME4, glossaryGuid);\n+        categoryHierarchyLinkFVT(cat3, cat4);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c402c3465ea8589f9504d86478bde978d48cfb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjI1NjcwOnYy", "diffSide": "RIGHT", "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyNjozN1rOG1aW7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoyNzoyMlrOG2NH-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1OTU2NQ==", "bodyText": "remove", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458659565", "createdAt": "2020-07-22T09:26:37Z", "author": {"login": "davidradl"}, "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java", "diffHunk": "@@ -1423,4 +1427,36 @@ private ProjectScope createProjectScope(Project project, Term term) throws Inval\n         System.out.println(\"CreatedProjectScopeRelationship \" + createdProjectScope);\n         return createdProjectScope;\n     }\n+\n+    private void categoryHierarchyLinkFVT(Category parent, Category child) throws UserNotAuthorizedException, PropertyServerException, InvalidParameterException, SubjectAreaFVTCheckedException {\n+        CategoryHierarchyLink categoryHierarchyLink = createCategoryHierarchyLink(parent, child);\n+        String guid = categoryHierarchyLink.getGuid();\n+        CategoryHierarchyLink gotCategoryHierarchyLink = subjectAreaRelationship.categoryHierarchyLink().getByGUID(this.userId, guid);\n+        FVTUtils.validateLine(gotCategoryHierarchyLink);\n+        System.out.println(\"Got CategoryHierarchyLink \" + categoryHierarchyLink);\n+        subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n+        //FVTUtils.validateLine(gotTermCategorizationRelationship);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c402c3465ea8589f9504d86478bde978d48cfb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MDA5Mw==", "bodyText": "No, There is \"got\" here. Remove after on 1439 line.", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458680093", "createdAt": "2020-07-22T10:01:53Z", "author": {"login": "immmus"}, "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java", "diffHunk": "@@ -1423,4 +1427,36 @@ private ProjectScope createProjectScope(Project project, Term term) throws Inval\n         System.out.println(\"CreatedProjectScopeRelationship \" + createdProjectScope);\n         return createdProjectScope;\n     }\n+\n+    private void categoryHierarchyLinkFVT(Category parent, Category child) throws UserNotAuthorizedException, PropertyServerException, InvalidParameterException, SubjectAreaFVTCheckedException {\n+        CategoryHierarchyLink categoryHierarchyLink = createCategoryHierarchyLink(parent, child);\n+        String guid = categoryHierarchyLink.getGuid();\n+        CategoryHierarchyLink gotCategoryHierarchyLink = subjectAreaRelationship.categoryHierarchyLink().getByGUID(this.userId, guid);\n+        FVTUtils.validateLine(gotCategoryHierarchyLink);\n+        System.out.println(\"Got CategoryHierarchyLink \" + categoryHierarchyLink);\n+        subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n+        //FVTUtils.validateLine(gotTermCategorizationRelationship);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1OTU2NQ=="}, "originalCommit": {"oid": "75c402c3465ea8589f9504d86478bde978d48cfb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MTMyMA==", "bodyText": "@immmus I am not sure I understand - I am suggesting we do not add commented out lines of code.", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r459491320", "createdAt": "2020-07-23T14:27:22Z", "author": {"login": "davidradl"}, "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java", "diffHunk": "@@ -1423,4 +1427,36 @@ private ProjectScope createProjectScope(Project project, Term term) throws Inval\n         System.out.println(\"CreatedProjectScopeRelationship \" + createdProjectScope);\n         return createdProjectScope;\n     }\n+\n+    private void categoryHierarchyLinkFVT(Category parent, Category child) throws UserNotAuthorizedException, PropertyServerException, InvalidParameterException, SubjectAreaFVTCheckedException {\n+        CategoryHierarchyLink categoryHierarchyLink = createCategoryHierarchyLink(parent, child);\n+        String guid = categoryHierarchyLink.getGuid();\n+        CategoryHierarchyLink gotCategoryHierarchyLink = subjectAreaRelationship.categoryHierarchyLink().getByGUID(this.userId, guid);\n+        FVTUtils.validateLine(gotCategoryHierarchyLink);\n+        System.out.println(\"Got CategoryHierarchyLink \" + categoryHierarchyLink);\n+        subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n+        //FVTUtils.validateLine(gotTermCategorizationRelationship);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1OTU2NQ=="}, "originalCommit": {"oid": "75c402c3465ea8589f9504d86478bde978d48cfb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjI2MDk4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyNzo0N1rOG1aZvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyNzo0N1rOG1aZvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2MDI4Nw==", "bodyText": "should be CategoryHierarchyLink. formatting does not look right.", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458660287", "createdAt": "2020-07-22T09:27:47Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "diffHunk": "@@ -1939,4 +1939,120 @@ public SubjectAreaRelationshipRESTResource() {\n                                                                                             @PathVariable String guid) {\n         return restAPI.getSemanticAssignmentRelationship(serverName, userId, guid);\n     }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                     userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/users/{userId}/relationships/category-hierarchy-link\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                         @PathVariable String userId,\n+                                                                                         @RequestBody CategoryHierarchyLink categoryHierarchyLink) {\n+        return restAPI.createCategoryHierarchyLink(serverName, userId, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get\n+     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @GetMapping(path = \"/users/{userId}/relationships/category-hierarchy-link/{guid}\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> getCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                      @PathVariable String userId,\n+                                                                                      @PathVariable String guid) {\n+        return restAPI.getCategoryHierarchyLink(serverName, userId, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c402c3465ea8589f9504d86478bde978d48cfb"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjI2MzI4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyODoyMFrOG1abLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyODoyMFrOG1abLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2MDY1NA==", "bodyText": "should be CategoryHierarchyLink", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458660654", "createdAt": "2020-07-22T09:28:20Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "diffHunk": "@@ -1939,4 +1939,120 @@ public SubjectAreaRelationshipRESTResource() {\n                                                                                             @PathVariable String guid) {\n         return restAPI.getSemanticAssignmentRelationship(serverName, userId, guid);\n     }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                     userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/users/{userId}/relationships/category-hierarchy-link\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                         @PathVariable String userId,\n+                                                                                         @RequestBody CategoryHierarchyLink categoryHierarchyLink) {\n+        return restAPI.createCategoryHierarchyLink(serverName, userId, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get\n+     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @GetMapping(path = \"/users/{userId}/relationships/category-hierarchy-link/{guid}\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> getCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                      @PathVariable String userId,\n+                                                                                      @PathVariable String guid) {\n+        return restAPI.getCategoryHierarchyLink(serverName, userId, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c402c3465ea8589f9504d86478bde978d48cfb"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjI2NDI0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyODozN1rOG1abxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyODozN1rOG1abxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2MDgwNw==", "bodyText": "should be updateCategoryHierarchyLink", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458660807", "createdAt": "2020-07-22T09:28:37Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "diffHunk": "@@ -1939,4 +1939,120 @@ public SubjectAreaRelationshipRESTResource() {\n                                                                                             @PathVariable String guid) {\n         return restAPI.getSemanticAssignmentRelationship(serverName, userId, guid);\n     }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                     userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/users/{userId}/relationships/category-hierarchy-link\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                         @PathVariable String userId,\n+                                                                                         @RequestBody CategoryHierarchyLink categoryHierarchyLink) {\n+        return restAPI.createCategoryHierarchyLink(serverName, userId, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get\n+     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @GetMapping(path = \"/users/{userId}/relationships/category-hierarchy-link/{guid}\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> getCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                      @PathVariable String userId,\n+                                                                                      @PathVariable String guid) {\n+        return restAPI.getCategoryHierarchyLink(serverName, userId, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship\n+     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @return response, when successful contains the updated categoryHierarchyLink\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PutMapping(path = \"/users/{userId}/relationships/category-hierarchy-link/{guid}\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> updateCategoryAnchor(@PathVariable String serverName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c402c3465ea8589f9504d86478bde978d48cfb"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjc4NzY2OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjowNzo0MFrOG1fdLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjowNzo0MFrOG1fdLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0MzA4NA==", "bodyText": "categoryAnchor incorrect", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458743084", "createdAt": "2020-07-22T12:07:40Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "diffHunk": "@@ -1939,4 +1939,120 @@ public SubjectAreaRelationshipRESTResource() {\n                                                                                             @PathVariable String guid) {\n         return restAPI.getSemanticAssignmentRelationship(serverName, userId, guid);\n     }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n+     *\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/users/{userId}/relationships/category-hierarchy-link\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                         @PathVariable String userId,\n+                                                                                         @RequestBody CategoryHierarchyLink categoryHierarchyLink) {\n+        return restAPI.createCategoryHierarchyLink(serverName, userId, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between two categories used to create nested categories.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3b47005591e81d736a63886d97923ecf114d0d"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjc4OTk4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjowODoyOFrOG1fewg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjowODoyOFrOG1fewg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0MzQ5MA==", "bodyText": "CategoryAnchor incorrect and formatting", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458743490", "createdAt": "2020-07-22T12:08:28Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "diffHunk": "@@ -1935,6 +1935,107 @@ public SubjectAreaRelationshipRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SemanticAssignment> getSemanticAssignmentRelationship(String serverName, String userId, String guid) {\n         String restAPIName = \"getSemanticAssignmentRelationship\";\n-        return restoreLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+        return getLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3b47005591e81d736a63886d97923ecf114d0d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjc5MDM4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjowODozN1rOG1ffBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjowODozN1rOG1ffBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0MzU1OQ==", "bodyText": "CategoryAnchor incorrect and formatting", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458743559", "createdAt": "2020-07-22T12:08:37Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "diffHunk": "@@ -1935,6 +1935,107 @@ public SubjectAreaRelationshipRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SemanticAssignment> getSemanticAssignmentRelationship(String serverName, String userId, String guid) {\n         String restAPIName = \"getSemanticAssignmentRelationship\";\n-        return restoreLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+        return getLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3b47005591e81d736a63886d97923ecf114d0d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjc5MTY1OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjowODo1NlrOG1ffvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjowODo1NlrOG1ffvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0Mzc0MQ==", "bodyText": "CategoryAnchor incorrect", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458743741", "createdAt": "2020-07-22T12:08:56Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "diffHunk": "@@ -1935,6 +1935,107 @@ public SubjectAreaRelationshipRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SemanticAssignment> getSemanticAssignmentRelationship(String serverName, String userId, String guid) {\n         String restAPIName = \"getSemanticAssignmentRelationship\";\n-        return restoreLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+        return getLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship\n+     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @return response, when successful contains the updated categoryHierarchyLink\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> updateCategoryHierarchyLink(String serverName, String userId, String guid, CategoryHierarchyLink categoryHierarchyLink, Boolean isReplace) {\n+        String restAPIName = \"updateCategoryHierarchyLink\";\n+        return updateLine(serverName,restAPIName, userId, guid, CategoryHierarchyLinkMapper.class, categoryHierarchyLink, isReplace);\n+    }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                     userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(String serverName, String userId, CategoryHierarchyLink categoryHierarchyLink) {\n+        String restAPIName = \"createCategoryHierarchyLink\";\n+        return createLine(serverName,restAPIName,userId, CategoryHierarchyLinkMapper.class, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between a Category and a Category.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3b47005591e81d736a63886d97923ecf114d0d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjc5MzI0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjowOToyOFrOG1fgww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjowOToyOFrOG1fgww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0NDAwMw==", "bodyText": "CategoryAnchor incorrect", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458744003", "createdAt": "2020-07-22T12:09:28Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "diffHunk": "@@ -1935,6 +1935,107 @@ public SubjectAreaRelationshipRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SemanticAssignment> getSemanticAssignmentRelationship(String serverName, String userId, String guid) {\n         String restAPIName = \"getSemanticAssignmentRelationship\";\n-        return restoreLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+        return getLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship\n+     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @return response, when successful contains the updated categoryHierarchyLink\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> updateCategoryHierarchyLink(String serverName, String userId, String guid, CategoryHierarchyLink categoryHierarchyLink, Boolean isReplace) {\n+        String restAPIName = \"updateCategoryHierarchyLink\";\n+        return updateLine(serverName,restAPIName, userId, guid, CategoryHierarchyLinkMapper.class, categoryHierarchyLink, isReplace);\n+    }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                     userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(String serverName, String userId, CategoryHierarchyLink categoryHierarchyLink) {\n+        String restAPIName = \"createCategoryHierarchyLink\";\n+        return createLine(serverName,restAPIName,userId, CategoryHierarchyLinkMapper.class, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3b47005591e81d736a63886d97923ecf114d0d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjc5NTUyOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxMDowMFrOG1fh_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxMDowMFrOG1fh_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0NDMxOA==", "bodyText": "CategoryAnchor incorrect - I suggest we do not need the word relationship here", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458744318", "createdAt": "2020-07-22T12:10:00Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "diffHunk": "@@ -1935,6 +1935,107 @@ public SubjectAreaRelationshipRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SemanticAssignment> getSemanticAssignmentRelationship(String serverName, String userId, String guid) {\n         String restAPIName = \"getSemanticAssignmentRelationship\";\n-        return restoreLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+        return getLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship\n+     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @return response, when successful contains the updated categoryHierarchyLink\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> updateCategoryHierarchyLink(String serverName, String userId, String guid, CategoryHierarchyLink categoryHierarchyLink, Boolean isReplace) {\n+        String restAPIName = \"updateCategoryHierarchyLink\";\n+        return updateLine(serverName,restAPIName, userId, guid, CategoryHierarchyLinkMapper.class, categoryHierarchyLink, isReplace);\n+    }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                     userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(String serverName, String userId, CategoryHierarchyLink categoryHierarchyLink) {\n+        String restAPIName = \"createCategoryHierarchyLink\";\n+        return createLine(serverName,restAPIName,userId, CategoryHierarchyLinkMapper.class, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get\n+     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3b47005591e81d736a63886d97923ecf114d0d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjc5ODYxOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxMDo1MlrOG1fj3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxMDo1MlrOG1fj3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0NDc5OA==", "bodyText": "CategoryAnchor incorrect", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458744798", "createdAt": "2020-07-22T12:10:52Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "diffHunk": "@@ -1939,4 +1939,120 @@ public SubjectAreaRelationshipRESTResource() {\n                                                                                             @PathVariable String guid) {\n         return restAPI.getSemanticAssignmentRelationship(serverName, userId, guid);\n     }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n+     *\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/users/{userId}/relationships/category-hierarchy-link\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                         @PathVariable String userId,\n+                                                                                         @RequestBody CategoryHierarchyLink categoryHierarchyLink) {\n+        return restAPI.createCategoryHierarchyLink(serverName, userId, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between two categories used to create nested categories.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3b47005591e81d736a63886d97923ecf114d0d"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjc5OTA0OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxMDo1OVrOG1fkIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxMDo1OVrOG1fkIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0NDg2Nw==", "bodyText": "CategoryAnchor incorrect and formatting", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458744867", "createdAt": "2020-07-22T12:10:59Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "diffHunk": "@@ -1939,4 +1939,120 @@ public SubjectAreaRelationshipRESTResource() {\n                                                                                             @PathVariable String guid) {\n         return restAPI.getSemanticAssignmentRelationship(serverName, userId, guid);\n     }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n+     *\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/users/{userId}/relationships/category-hierarchy-link\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                         @PathVariable String userId,\n+                                                                                         @RequestBody CategoryHierarchyLink categoryHierarchyLink) {\n+        return restAPI.createCategoryHierarchyLink(serverName, userId, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between two categories used to create nested categories.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get\n+     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3b47005591e81d736a63886d97923ecf114d0d"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzU5ODQzOnYy", "diffSide": "RIGHT", "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoyOTowMFrOG2NMrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNToyMTowMlrOG2Pkyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MjUyNQ==", "bodyText": "@immmus I suggest we remove the commented out line of code we are adding", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r459492525", "createdAt": "2020-07-23T14:29:00Z", "author": {"login": "davidradl"}, "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java", "diffHunk": "@@ -1423,4 +1432,52 @@ private ProjectScope createProjectScope(Project project, Term term) throws Inval\n         System.out.println(\"CreatedProjectScopeRelationship \" + createdProjectScope);\n         return createdProjectScope;\n     }\n+\n+    private void categoryHierarchyLinkFVT(Category parent, Category child) throws UserNotAuthorizedException, PropertyServerException, InvalidParameterException, SubjectAreaFVTCheckedException {\n+        CategoryHierarchyLink categoryHierarchyLink = createCategoryHierarchyLink(parent, child);\n+        String guid = categoryHierarchyLink.getGuid();\n+        CategoryHierarchyLink gotCategoryHierarchyLink = subjectAreaRelationship.categoryHierarchyLink().getByGUID(this.userId, guid);\n+        FVTUtils.validateLine(gotCategoryHierarchyLink);\n+        System.out.println(\"Got CategoryHierarchyLink \" + categoryHierarchyLink);\n+        Category gotChild = subjectAreaCategory.getByGUID(userId, child.getSystemAttributes().getGUID());\n+        checkParent(parent, gotChild);\n+        subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n+        //FVTUtils.validateLine(gotTermCategorizationRelationship);\n+        System.out.println(\"Soft deleted CategoryHierarchyLink with userId=\" + guid);\n+        gotCategoryHierarchyLink = subjectAreaRelationship.categoryHierarchyLink().restore(this.userId, guid);\n+        FVTUtils.validateLine(gotCategoryHierarchyLink);\n+        System.out.println(\"Restored CategoryHierarchyLink with userId=\" + guid);\n+        subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n+        //FVTUtils.validateLine(gotTermCategorizationRelationship);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43b3fac563ce119c01277ba3b1a9931a977b922"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzMTQ2Nw==", "bodyText": "I agree to you", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r459531467", "createdAt": "2020-07-23T15:21:02Z", "author": {"login": "immmus"}, "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java", "diffHunk": "@@ -1423,4 +1432,52 @@ private ProjectScope createProjectScope(Project project, Term term) throws Inval\n         System.out.println(\"CreatedProjectScopeRelationship \" + createdProjectScope);\n         return createdProjectScope;\n     }\n+\n+    private void categoryHierarchyLinkFVT(Category parent, Category child) throws UserNotAuthorizedException, PropertyServerException, InvalidParameterException, SubjectAreaFVTCheckedException {\n+        CategoryHierarchyLink categoryHierarchyLink = createCategoryHierarchyLink(parent, child);\n+        String guid = categoryHierarchyLink.getGuid();\n+        CategoryHierarchyLink gotCategoryHierarchyLink = subjectAreaRelationship.categoryHierarchyLink().getByGUID(this.userId, guid);\n+        FVTUtils.validateLine(gotCategoryHierarchyLink);\n+        System.out.println(\"Got CategoryHierarchyLink \" + categoryHierarchyLink);\n+        Category gotChild = subjectAreaCategory.getByGUID(userId, child.getSystemAttributes().getGUID());\n+        checkParent(parent, gotChild);\n+        subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n+        //FVTUtils.validateLine(gotTermCategorizationRelationship);\n+        System.out.println(\"Soft deleted CategoryHierarchyLink with userId=\" + guid);\n+        gotCategoryHierarchyLink = subjectAreaRelationship.categoryHierarchyLink().restore(this.userId, guid);\n+        FVTUtils.validateLine(gotCategoryHierarchyLink);\n+        System.out.println(\"Restored CategoryHierarchyLink with userId=\" + guid);\n+        subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n+        //FVTUtils.validateLine(gotTermCategorizationRelationship);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MjUyNQ=="}, "originalCommit": {"oid": "b43b3fac563ce119c01277ba3b1a9931a977b922"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2612, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}