{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NDk1OTM2", "number": 3245, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowOTowMVrOEIA21w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozOTo0MFrOEJt6Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODM4MTAzOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-api/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/responses/SubjectAreaOMASAPIResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowOTowMVrOGnt3Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjo0NjozNFrOGoFD7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5OTA4Ng==", "bodyText": "This type of coding gives the external caller very little information about the type of response to request", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444299086", "createdAt": "2020-06-23T15:09:01Z", "author": {"login": "mandy-chessell"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-api/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/responses/SubjectAreaOMASAPIResponse.java", "diffHunk": "@@ -13,201 +20,40 @@\n  * SubjectAreaOMASAPIResponse provides a common header for Subject Area OMAS managed rest to its REST API.\n  * It manages information about exceptions.  If no exception has been raised exceptionClassName is null.\n  */\n-@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonAutoDetect(getterVisibility = PUBLIC_ONLY, setterVisibility = PUBLIC_ONLY, fieldVisibility = NONE)\n @JsonInclude(JsonInclude.Include.NON_NULL)\n-@JsonIgnoreProperties(ignoreUnknown=true)\n-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME,\n-        include = JsonTypeInfo.As.PROPERTY,\n-        property = \"class\")\n-@JsonSubTypes(\n-        {\n-                @JsonSubTypes.Type(value = CategoryResponse.class, name = \"CategoryResponse\"),\n-                @JsonSubTypes.Type(value = CategoriesResponse.class, name = \"CategoriesResponse\"),\n-                @JsonSubTypes.Type(value = GlossaryResponse.class, name = \"GlossaryResponse\"),\n-                @JsonSubTypes.Type(value = GlossariesResponse.class, name = \"GlossariesResponse\"),\n-                @JsonSubTypes.Type(value = SubjectAreaDefinitionResponse.class, name = \"SubjectAreaDefinitionResponse\"),\n-                @JsonSubTypes.Type(value = SubjectAreaDefinitionsResponse.class, name = \"SubjectAreaDefinitionsResponse\"),\n-                @JsonSubTypes.Type(value = TermResponse.class, name = \"TermResponse\"),\n-                @JsonSubTypes.Type(value = TermsResponse.class, name = \"TermsResponse\"),\n-                @JsonSubTypes.Type(value = VoidResponse.class, name = \"VoidResponse\"),\n-                @JsonSubTypes.Type(value = ProjectResponse.class, name = \"ProjectResponse\"),\n-                @JsonSubTypes.Type(value = ProjectsResponse.class, name = \"ProjectsResponse\"),\n-                @JsonSubTypes.Type(value = LinesResponse.class, name = \"LinesResponse\"),\n-\n-                // Lines\n-\n-                // term to term relationship responses\n-                @JsonSubTypes.Type(value = TermHASARelationshipResponse.class, name = \"TermHASARelationshipResponse\"),\n-                @JsonSubTypes.Type(value = RelatedTermResponse.class, name = \"RelatedTermResponse\"),\n-                @JsonSubTypes.Type(value = SynonymRelationshipResponse.class, name = \"SynonymRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = AntonymRelationshipResponse.class, name = \"AntonymRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = PreferredTermRelationshipResponse.class, name = \"PreferredTermRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = ReplacementRelationshipResponse.class, name = \"ReplacementRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = TranslationRelationshipResponse.class, name = \"TranslationRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = ValidValueRelationshipResponse.class, name = \"ValidValueRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = UsedInContextRelationshipResponse.class, name = \"UsedInContextRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = TermISATYPEOFRelationshipResponse.class, name = \"TermISATYPEOFRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = TermTYPEDBYRelationshipResponse.class, name = \"TermTYPEDBYRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = TermISARelationshipResponse.class,name = \"TermISARelationshipResponse\"),\n-                // term to glossary response\n-                @JsonSubTypes.Type(value = TermAnchorRelationshipResponse.class,name = \"TermAnchorRelationshipResponse\"),\n-                // category to glossary response\n-                @JsonSubTypes.Type(value =CategoryAnchorRelationshipResponse.class,name = \"CategoryAnchorRelationshipResponse\"),\n-                // category to term response\n-                @JsonSubTypes.Type(value = TermCategorizationRelationshipResponse.class, name = \"TermCategorizationRelationshipResponse\"),\n-                // Term to asset response\n-                @JsonSubTypes.Type(value = SemanticAssignementRelationshipResponse.class, name = \"SemanticAssignementRelationshipResponse\"),\n-                // external glossary responses\n-                @JsonSubTypes.Type(value = LibraryTermReference.class, name = \"LibraryTermReference\"),\n-                @JsonSubTypes.Type(value = LibraryCategoryReferenceResponse.class, name = \"LibraryCategoryReferenceResponse\"),\n-\n-                @JsonSubTypes.Type(value = ProjectScopeRelationshipResponse.class, name = \"ProjectScopeRelationshipResponse\"),\n-                /*\n-                 Exception responses - note that each exception has the same 4 Exception orientated fields.\n-                 Ideally these should be in a superclass. Due to restrictions in the @JsonSubTypes processing it is only possible to have\n-                 one level of inheritance at this time.\n-                 */\n-                @JsonSubTypes.Type(value = ClassificationExceptionResponse.class, name = \"ClassificationExceptionResponse\"),\n-                @JsonSubTypes.Type(value = EntityNotDeletedExceptionResponse.class, name = \"EntityNotDeletedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = EntityNotPurgedExceptionResponse.class, name = \"EntityNotPurgedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = RelationshipNotDeletedExceptionResponse.class, name = \"RelationshipNotDeletedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = RelationshipNotPurgedExceptionResponse.class, name = \"RelationshipNotPurgedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = FunctionNotSupportedExceptionResponse.class, name = \"FunctionNotSupportedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = InvalidParameterExceptionResponse.class, name = \"InvalidParameterExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = MetadataServerUncontactableExceptionResponse.class, name = \"MetadataServerUncontactableExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = RelationshipNotDeletedExceptionResponse.class, name = \"RelationshipNotDeletedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = StatusNotsupportedExceptionResponse.class, name = \"StatusNotsupportedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = UnrecognizedGUIDExceptionResponse.class, name = \"UnrecognizedGUIDExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = UserNotAuthorizedExceptionResponse.class, name = \"UserNotAuthorizedExceptionResponse\"),\n-                @JsonSubTypes.Type(value = PropertyServerExceptionResponse.class, name = \"PropertyServerExceptionResponse\"),\n-\n-                @JsonSubTypes.Type(value = GraphResponse.class, name = \"GraphResponse\")\n-\n-        })\n-public abstract class SubjectAreaOMASAPIResponse\n-{\n-    protected int       relatedHTTPCode = 200;\n-    protected ResponseCategory responseCategory;\n-    protected String    messageId = null;\n-    protected String    className = null;\n-    protected String    actionDescription = null;\n-    protected String    formattedMessage = null;\n-\n-    /**\n-     * Default constructor\n-     */\n-    public SubjectAreaOMASAPIResponse() {\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class SubjectAreaOMASAPIResponse<R> extends FFDCResponseBase {\n+    private List<R> result = new ArrayList<>();\n \n+    public void addAllResults(Collection<? extends R> entities) {\n+        this.result.addAll(entities);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3OTE0OQ==", "bodyText": "When creating the response object, we ourselves must explicitly set the type of returned objects. As will be seen in the picture below - if we set the Category category, then we simply cannot put the Term's objects. And we clearly see the type.\n\nBut also in this case, \"? extends R\" allows you to specify a generalized object there (it can even be an interface) in order to put the types of objects inherited from it into the response. This shows the following example with Line.\nTherefore, no confusion should arise.", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444679149", "createdAt": "2020-06-24T06:46:34Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-api/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/responses/SubjectAreaOMASAPIResponse.java", "diffHunk": "@@ -13,201 +20,40 @@\n  * SubjectAreaOMASAPIResponse provides a common header for Subject Area OMAS managed rest to its REST API.\n  * It manages information about exceptions.  If no exception has been raised exceptionClassName is null.\n  */\n-@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n+@JsonAutoDetect(getterVisibility = PUBLIC_ONLY, setterVisibility = PUBLIC_ONLY, fieldVisibility = NONE)\n @JsonInclude(JsonInclude.Include.NON_NULL)\n-@JsonIgnoreProperties(ignoreUnknown=true)\n-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME,\n-        include = JsonTypeInfo.As.PROPERTY,\n-        property = \"class\")\n-@JsonSubTypes(\n-        {\n-                @JsonSubTypes.Type(value = CategoryResponse.class, name = \"CategoryResponse\"),\n-                @JsonSubTypes.Type(value = CategoriesResponse.class, name = \"CategoriesResponse\"),\n-                @JsonSubTypes.Type(value = GlossaryResponse.class, name = \"GlossaryResponse\"),\n-                @JsonSubTypes.Type(value = GlossariesResponse.class, name = \"GlossariesResponse\"),\n-                @JsonSubTypes.Type(value = SubjectAreaDefinitionResponse.class, name = \"SubjectAreaDefinitionResponse\"),\n-                @JsonSubTypes.Type(value = SubjectAreaDefinitionsResponse.class, name = \"SubjectAreaDefinitionsResponse\"),\n-                @JsonSubTypes.Type(value = TermResponse.class, name = \"TermResponse\"),\n-                @JsonSubTypes.Type(value = TermsResponse.class, name = \"TermsResponse\"),\n-                @JsonSubTypes.Type(value = VoidResponse.class, name = \"VoidResponse\"),\n-                @JsonSubTypes.Type(value = ProjectResponse.class, name = \"ProjectResponse\"),\n-                @JsonSubTypes.Type(value = ProjectsResponse.class, name = \"ProjectsResponse\"),\n-                @JsonSubTypes.Type(value = LinesResponse.class, name = \"LinesResponse\"),\n-\n-                // Lines\n-\n-                // term to term relationship responses\n-                @JsonSubTypes.Type(value = TermHASARelationshipResponse.class, name = \"TermHASARelationshipResponse\"),\n-                @JsonSubTypes.Type(value = RelatedTermResponse.class, name = \"RelatedTermResponse\"),\n-                @JsonSubTypes.Type(value = SynonymRelationshipResponse.class, name = \"SynonymRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = AntonymRelationshipResponse.class, name = \"AntonymRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = PreferredTermRelationshipResponse.class, name = \"PreferredTermRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = ReplacementRelationshipResponse.class, name = \"ReplacementRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = TranslationRelationshipResponse.class, name = \"TranslationRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = ValidValueRelationshipResponse.class, name = \"ValidValueRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = UsedInContextRelationshipResponse.class, name = \"UsedInContextRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = TermISATYPEOFRelationshipResponse.class, name = \"TermISATYPEOFRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = TermTYPEDBYRelationshipResponse.class, name = \"TermTYPEDBYRelationshipResponse\"),\n-                @JsonSubTypes.Type(value = TermISARelationshipResponse.class,name = \"TermISARelationshipResponse\"),\n-                // term to glossary response\n-                @JsonSubTypes.Type(value = TermAnchorRelationshipResponse.class,name = \"TermAnchorRelationshipResponse\"),\n-                // category to glossary response\n-                @JsonSubTypes.Type(value =CategoryAnchorRelationshipResponse.class,name = \"CategoryAnchorRelationshipResponse\"),\n-                // category to term response\n-                @JsonSubTypes.Type(value = TermCategorizationRelationshipResponse.class, name = \"TermCategorizationRelationshipResponse\"),\n-                // Term to asset response\n-                @JsonSubTypes.Type(value = SemanticAssignementRelationshipResponse.class, name = \"SemanticAssignementRelationshipResponse\"),\n-                // external glossary responses\n-                @JsonSubTypes.Type(value = LibraryTermReference.class, name = \"LibraryTermReference\"),\n-                @JsonSubTypes.Type(value = LibraryCategoryReferenceResponse.class, name = \"LibraryCategoryReferenceResponse\"),\n-\n-                @JsonSubTypes.Type(value = ProjectScopeRelationshipResponse.class, name = \"ProjectScopeRelationshipResponse\"),\n-                /*\n-                 Exception responses - note that each exception has the same 4 Exception orientated fields.\n-                 Ideally these should be in a superclass. Due to restrictions in the @JsonSubTypes processing it is only possible to have\n-                 one level of inheritance at this time.\n-                 */\n-                @JsonSubTypes.Type(value = ClassificationExceptionResponse.class, name = \"ClassificationExceptionResponse\"),\n-                @JsonSubTypes.Type(value = EntityNotDeletedExceptionResponse.class, name = \"EntityNotDeletedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = EntityNotPurgedExceptionResponse.class, name = \"EntityNotPurgedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = RelationshipNotDeletedExceptionResponse.class, name = \"RelationshipNotDeletedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = RelationshipNotPurgedExceptionResponse.class, name = \"RelationshipNotPurgedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = FunctionNotSupportedExceptionResponse.class, name = \"FunctionNotSupportedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = InvalidParameterExceptionResponse.class, name = \"InvalidParameterExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = MetadataServerUncontactableExceptionResponse.class, name = \"MetadataServerUncontactableExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = RelationshipNotDeletedExceptionResponse.class, name = \"RelationshipNotDeletedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = StatusNotsupportedExceptionResponse.class, name = \"StatusNotsupportedExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = UnrecognizedGUIDExceptionResponse.class, name = \"UnrecognizedGUIDExceptionResponse\") ,\n-                @JsonSubTypes.Type(value = UserNotAuthorizedExceptionResponse.class, name = \"UserNotAuthorizedExceptionResponse\"),\n-                @JsonSubTypes.Type(value = PropertyServerExceptionResponse.class, name = \"PropertyServerExceptionResponse\"),\n-\n-                @JsonSubTypes.Type(value = GraphResponse.class, name = \"GraphResponse\")\n-\n-        })\n-public abstract class SubjectAreaOMASAPIResponse\n-{\n-    protected int       relatedHTTPCode = 200;\n-    protected ResponseCategory responseCategory;\n-    protected String    messageId = null;\n-    protected String    className = null;\n-    protected String    actionDescription = null;\n-    protected String    formattedMessage = null;\n-\n-    /**\n-     * Default constructor\n-     */\n-    public SubjectAreaOMASAPIResponse() {\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class SubjectAreaOMASAPIResponse<R> extends FFDCResponseBase {\n+    private List<R> result = new ArrayList<>();\n \n+    public void addAllResults(Collection<? extends R> entities) {\n+        this.result.addAll(entities);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5OTA4Ng=="}, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODM5NjM3OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxMjozOFrOGnuBUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjo0Njo0MlrOGoFEGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMTY0OA==", "bodyText": "This type of interface gived very little information about the types of objects that can be passed over the API.", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444301648", "createdAt": "2020-06-23T15:12:38Z", "author": {"login": "mandy-chessell"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.common.FindRequest;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.InvalidParameterException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.PropertyServerException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.UserNotAuthorizedException;\n+\n+import java.util.List;\n+\n+public interface SubjectAreaClient<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3OTE5NQ==", "bodyText": "In this case, any objects, because in the future, during the development of the project, we may need to create new objects, but the scheme for calling the methods described in the interface should not change, because it is already declared in the API.", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444679195", "createdAt": "2020-06-24T06:46:42Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaClient.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.common.FindRequest;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.InvalidParameterException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.PropertyServerException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.UserNotAuthorizedException;\n+\n+import java.util.List;\n+\n+public interface SubjectAreaClient<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMTY0OA=="}, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQwMTc3OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaRelationshipClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxMzo1M1rOGnuExg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0MzowNFrOGoIszA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMjUzNA==", "bodyText": "What is a Line?", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444302534", "createdAt": "2020-06-23T15:13:53Z", "author": {"login": "mandy-chessell"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaRelationshipClient.java", "diffHunk": "@@ -0,0 +1,14 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.common.FindRequest;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.graph.Line;\n+\n+import java.util.List;\n+\n+public interface SubjectAreaRelationshipClient<L extends Line>  extends SubjectAreaClient<L> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3OTIyOA==", "bodyText": "\"Line\" is an object created before me. It is a common object for working with Relationships. Objects such as Hasa, Isa, etc. are inherited from it.", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444679228", "createdAt": "2020-06-24T06:46:51Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaRelationshipClient.java", "diffHunk": "@@ -0,0 +1,14 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.common.FindRequest;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.graph.Line;\n+\n+import java.util.List;\n+\n+public interface SubjectAreaRelationshipClient<L extends Line>  extends SubjectAreaClient<L> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMjUzNA=="}, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczODc2NA==", "bodyText": "\"Line\" is an object created before me. It is a common object for working with Relationships. Objects such as Hasa, Isa, etc. are inherited from it.\n\nYes a line is a Subject Area OMAS concept.", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444738764", "createdAt": "2020-06-24T08:43:04Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaRelationshipClient.java", "diffHunk": "@@ -0,0 +1,14 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.common.FindRequest;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.graph.Line;\n+\n+import java.util.List;\n+\n+public interface SubjectAreaRelationshipClient<L extends Line>  extends SubjectAreaClient<L> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMjUzNA=="}, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQwNTE4OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaRestClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxNDo0MFrOGnuG6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDowMjo0M1rOGoz_Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMzA4MQ==", "bodyText": "No javadoc\nShould this be public?", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444303081", "createdAt": "2020-06-23T15:14:40Z", "author": {"login": "mandy-chessell"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaRestClient.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.common.FindRequest;\n+import org.odpi.openmetadata.accessservices.subjectarea.responses.SubjectAreaOMASAPIResponse;\n+import org.odpi.openmetadata.accessservices.subjectarea.utils.QueryBuilder;\n+import org.odpi.openmetadata.accessservices.subjectarea.utils.QueryUtils;\n+import org.odpi.openmetadata.commonservices.ffdc.rest.FFDCRESTClient;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.InvalidParameterException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.PropertyServerException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.UserNotAuthorizedException;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.SequencingOrder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.ParameterizedTypeReference;\n+\n+public class SubjectAreaRestClient extends FFDCRESTClient {\n+    private static final Logger log = LoggerFactory.getLogger(SubjectAreaRestClient.class);\n+\n+    private final String serverName;\n+    private final String serverPlatformURLRoot;\n+\n+    public SubjectAreaRestClient(String serverName, String serverPlatformURLRoot) throws InvalidParameterException {\n+        super(serverName, serverPlatformURLRoot);\n+        this.serverName = serverName;\n+        this.serverPlatformURLRoot = serverPlatformURLRoot;\n+    }\n+\n+    public SubjectAreaRestClient(String serverName,\n+                                 String serverPlatformURLRoot,\n+                                 String userId,\n+                                 String password) throws InvalidParameterException\n+    {\n+        super(serverName, serverPlatformURLRoot, userId, password);\n+        this.serverName = serverName;\n+        this.serverPlatformURLRoot = serverPlatformURLRoot;\n+    }\n+\n+    public <T> SubjectAreaOMASAPIResponse<T> postRESTCall(String userId,\n+                                                          String methodName,\n+                                                          String urlTemplate,\n+                                                          ParameterizedTypeReference<SubjectAreaOMASAPIResponse<T>> type,\n+                                                          T requestBody) throws PropertyServerException,\n+                                                                                 UserNotAuthorizedException,\n+                                                                                 InvalidParameterException\n+    {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"==> Method: \" + methodName + \",userId=\" + userId);\n+        }\n+        String expandedURL = String.format(serverPlatformURLRoot + urlTemplate, serverName, userId);\n+        SubjectAreaOMASAPIResponse<T> response = callPostRESTCall(methodName, type, expandedURL, requestBody);\n+        exceptionHandler.detectAndThrowStandardExceptions(methodName, response);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"<== successful method : \" + methodName + \",userId=\" + userId);\n+        }\n+        return response;\n+    }\n+\n+    public <T> SubjectAreaOMASAPIResponse<T> putRESTCall(String userId,\n+                                                         String guid,\n+                                                         String methodName,\n+                                                         String urlTemplate,\n+                                                         ParameterizedTypeReference<SubjectAreaOMASAPIResponse<T>> type,\n+                                                         T requestBody) throws InvalidParameterException,\n+                                                                                PropertyServerException,\n+                                                                                UserNotAuthorizedException\n+    {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"==> Method: \" + methodName + \",userId=\" + userId + \",guid=\" + guid);\n+        }\n+        String expandedURL = String.format(serverPlatformURLRoot + urlTemplate, serverName, userId, guid);\n+        SubjectAreaOMASAPIResponse<T> response = callPutRESTCall(methodName, type, expandedURL, requestBody);\n+        exceptionHandler.detectAndThrowStandardExceptions(methodName, response);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"<== successful method : \" + methodName + \",userId=\" + userId);\n+        }\n+        return response;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3OTI5MQ==", "bodyText": "Of course this should be public. To use the client without having to inherit from it.\nhttps://github.com/odpi/egeria/pull/3245/files/cbb9eb14f3e5acc73bded2b55e10441f25d89657#diff-196347764b01a4715889c3b2b6184224\nThis allows you to create one client object for all requests, and not several as it was before.\nJavadoc I will add a little later as other questions will disappear", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444679291", "createdAt": "2020-06-24T06:46:58Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaRestClient.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.common.FindRequest;\n+import org.odpi.openmetadata.accessservices.subjectarea.responses.SubjectAreaOMASAPIResponse;\n+import org.odpi.openmetadata.accessservices.subjectarea.utils.QueryBuilder;\n+import org.odpi.openmetadata.accessservices.subjectarea.utils.QueryUtils;\n+import org.odpi.openmetadata.commonservices.ffdc.rest.FFDCRESTClient;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.InvalidParameterException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.PropertyServerException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.UserNotAuthorizedException;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.SequencingOrder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.ParameterizedTypeReference;\n+\n+public class SubjectAreaRestClient extends FFDCRESTClient {\n+    private static final Logger log = LoggerFactory.getLogger(SubjectAreaRestClient.class);\n+\n+    private final String serverName;\n+    private final String serverPlatformURLRoot;\n+\n+    public SubjectAreaRestClient(String serverName, String serverPlatformURLRoot) throws InvalidParameterException {\n+        super(serverName, serverPlatformURLRoot);\n+        this.serverName = serverName;\n+        this.serverPlatformURLRoot = serverPlatformURLRoot;\n+    }\n+\n+    public SubjectAreaRestClient(String serverName,\n+                                 String serverPlatformURLRoot,\n+                                 String userId,\n+                                 String password) throws InvalidParameterException\n+    {\n+        super(serverName, serverPlatformURLRoot, userId, password);\n+        this.serverName = serverName;\n+        this.serverPlatformURLRoot = serverPlatformURLRoot;\n+    }\n+\n+    public <T> SubjectAreaOMASAPIResponse<T> postRESTCall(String userId,\n+                                                          String methodName,\n+                                                          String urlTemplate,\n+                                                          ParameterizedTypeReference<SubjectAreaOMASAPIResponse<T>> type,\n+                                                          T requestBody) throws PropertyServerException,\n+                                                                                 UserNotAuthorizedException,\n+                                                                                 InvalidParameterException\n+    {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"==> Method: \" + methodName + \",userId=\" + userId);\n+        }\n+        String expandedURL = String.format(serverPlatformURLRoot + urlTemplate, serverName, userId);\n+        SubjectAreaOMASAPIResponse<T> response = callPostRESTCall(methodName, type, expandedURL, requestBody);\n+        exceptionHandler.detectAndThrowStandardExceptions(methodName, response);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"<== successful method : \" + methodName + \",userId=\" + userId);\n+        }\n+        return response;\n+    }\n+\n+    public <T> SubjectAreaOMASAPIResponse<T> putRESTCall(String userId,\n+                                                         String guid,\n+                                                         String methodName,\n+                                                         String urlTemplate,\n+                                                         ParameterizedTypeReference<SubjectAreaOMASAPIResponse<T>> type,\n+                                                         T requestBody) throws InvalidParameterException,\n+                                                                                PropertyServerException,\n+                                                                                UserNotAuthorizedException\n+    {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"==> Method: \" + methodName + \",userId=\" + userId + \",guid=\" + guid);\n+        }\n+        String expandedURL = String.format(serverPlatformURLRoot + urlTemplate, serverName, userId, guid);\n+        SubjectAreaOMASAPIResponse<T> response = callPutRESTCall(methodName, type, expandedURL, requestBody);\n+        exceptionHandler.detectAndThrowStandardExceptions(methodName, response);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"<== successful method : \" + methodName + \",userId=\" + userId);\n+        }\n+        return response;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMzA4MQ=="}, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0Nzk2Mg==", "bodyText": "I added javadoc", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r445447962", "createdAt": "2020-06-25T10:02:43Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/SubjectAreaRestClient.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.common.FindRequest;\n+import org.odpi.openmetadata.accessservices.subjectarea.responses.SubjectAreaOMASAPIResponse;\n+import org.odpi.openmetadata.accessservices.subjectarea.utils.QueryBuilder;\n+import org.odpi.openmetadata.accessservices.subjectarea.utils.QueryUtils;\n+import org.odpi.openmetadata.commonservices.ffdc.rest.FFDCRESTClient;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.InvalidParameterException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.PropertyServerException;\n+import org.odpi.openmetadata.frameworks.connectors.ffdc.UserNotAuthorizedException;\n+import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.SequencingOrder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.ParameterizedTypeReference;\n+\n+public class SubjectAreaRestClient extends FFDCRESTClient {\n+    private static final Logger log = LoggerFactory.getLogger(SubjectAreaRestClient.class);\n+\n+    private final String serverName;\n+    private final String serverPlatformURLRoot;\n+\n+    public SubjectAreaRestClient(String serverName, String serverPlatformURLRoot) throws InvalidParameterException {\n+        super(serverName, serverPlatformURLRoot);\n+        this.serverName = serverName;\n+        this.serverPlatformURLRoot = serverPlatformURLRoot;\n+    }\n+\n+    public SubjectAreaRestClient(String serverName,\n+                                 String serverPlatformURLRoot,\n+                                 String userId,\n+                                 String password) throws InvalidParameterException\n+    {\n+        super(serverName, serverPlatformURLRoot, userId, password);\n+        this.serverName = serverName;\n+        this.serverPlatformURLRoot = serverPlatformURLRoot;\n+    }\n+\n+    public <T> SubjectAreaOMASAPIResponse<T> postRESTCall(String userId,\n+                                                          String methodName,\n+                                                          String urlTemplate,\n+                                                          ParameterizedTypeReference<SubjectAreaOMASAPIResponse<T>> type,\n+                                                          T requestBody) throws PropertyServerException,\n+                                                                                 UserNotAuthorizedException,\n+                                                                                 InvalidParameterException\n+    {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"==> Method: \" + methodName + \",userId=\" + userId);\n+        }\n+        String expandedURL = String.format(serverPlatformURLRoot + urlTemplate, serverName, userId);\n+        SubjectAreaOMASAPIResponse<T> response = callPostRESTCall(methodName, type, expandedURL, requestBody);\n+        exceptionHandler.detectAndThrowStandardExceptions(methodName, response);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"<== successful method : \" + methodName + \",userId=\" + userId);\n+        }\n+        return response;\n+    }\n+\n+    public <T> SubjectAreaOMASAPIResponse<T> putRESTCall(String userId,\n+                                                         String guid,\n+                                                         String methodName,\n+                                                         String urlTemplate,\n+                                                         ParameterizedTypeReference<SubjectAreaOMASAPIResponse<T>> type,\n+                                                         T requestBody) throws InvalidParameterException,\n+                                                                                PropertyServerException,\n+                                                                                UserNotAuthorizedException\n+    {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"==> Method: \" + methodName + \",userId=\" + userId + \",guid=\" + guid);\n+        }\n+        String expandedURL = String.format(serverPlatformURLRoot + urlTemplate, serverName, userId, guid);\n+        SubjectAreaOMASAPIResponse<T> response = callPutRESTCall(methodName, type, expandedURL, requestBody);\n+        exceptionHandler.detectAndThrowStandardExceptions(methodName, response);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"<== successful method : \" + methodName + \",userId=\" + userId);\n+        }\n+        return response;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMzA4MQ=="}, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQxMzY1OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/relationships/SubjectAreaLine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxNjozM1rOGnuMcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjowMjowMVrOGo3hvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwNDQ5OA==", "bodyText": "Javadoc?", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444304498", "createdAt": "2020-06-23T15:16:33Z", "author": {"login": "mandy-chessell"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/relationships/SubjectAreaLine.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client.relationships;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUwNTk4Mg==", "bodyText": "Added", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r445505982", "createdAt": "2020-06-25T12:02:01Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/relationships/SubjectAreaLine.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client.relationships;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwNDQ5OA=="}, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODUyNTg5OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0Mjo1M1rOGnvVNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjo0NzoxM1rOGoFE2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMzEyNg==", "bodyText": "Need to review new dependencies with team ... see https://github.com/odpi/egeria/blob/master/developer-resources/Developer-Guidelines.md#dependent-libraries", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444323126", "createdAt": "2020-06-23T15:42:53Z", "author": {"login": "mandy-chessell"}, "path": "pom.xml", "diffHunk": "@@ -2390,6 +2392,18 @@\n                 <version>${jcl-over-slf4j.version}</version>\n             </dependency>\n \n+            <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3OTM4Nw==", "bodyText": "Yes I know that...\nThe idea associated with this library did not come up right away, so I decided to discuss it right in pr.\nThe library just solves some issues related to Reflections, something like utils", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444679387", "createdAt": "2020-06-24T06:47:13Z", "author": {"login": "immmus"}, "path": "pom.xml", "diffHunk": "@@ -2390,6 +2392,18 @@\n                 <version>${jcl-over-slf4j.version}</version>\n             </dependency>\n \n+            <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMzEyNg=="}, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODU4OTY1OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/relationships/SubjectAreaLine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo1ODowNVrOGnv-vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjo0NjoxOVrOGoFDdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzMzc1OQ==", "bodyText": "hasA", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444333759", "createdAt": "2020-06-23T15:58:05Z", "author": {"login": "mandy-chessell"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/relationships/SubjectAreaLine.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client.relationships;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaRelationshipClient;\n+import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaRestClient;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.graph.Line;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.relationships.*;\n+import org.reflections.Reflections;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class SubjectAreaLine implements SubjectAreaRelationship {\n+\n+    private static final String HASA = \"has-as\";\n+    private static final String RELATED_TERM = \"related-terms\";\n+    private static final String SYNONYM = \"synonyms\";\n+    private static final String ANTONYM = \"antonyms\";\n+    private static final String TRANSLATION = \"translations\";\n+    private static final String USED_IN_CONTEXT = \"used-in-contexts\";\n+    private static final String PREFERRED_TERM = \"preferred-terms\";\n+    private static final String VALID_VALUE = \"valid-values\";\n+    private static final String REPLACEMENT_TERM = \"replacement-terms\";\n+    private static final String TYPED_BY = \"typed-bys\";\n+    private static final String IS_A = \"is-as\";\n+    private static final String IS_A_TYPE_OF = \"is-a-type-ofs\";\n+    private static final String TERM_CATEGORIZATION = \"term-categorizations\";\n+    private static final String SEMANTIC_ASSIGNMENT = \"semantic-assignments\";\n+    private static final String TERM_ANCHOR = \"term-anchor\";\n+    private static final String CATEGORY_ANCHOR = \"category-anchor\";\n+    private static final String PROJECT_SCOPE = \"project-scopes\";\n+\n+    private Map<Class<?>, SubjectAreaRelationshipClient<?>> cache = new HashMap<>();\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public SubjectAreaLine(String packageToScan, SubjectAreaRestClient subjectAreaRestClient) {\n+        Reflections reflections = new Reflections(packageToScan);\n+        Set<Class<?>> clientClasses = reflections.getTypesAnnotatedWith(SubjectAreaLineClient.class);\n+        for (Class<?> declaredClass : clientClasses) {\n+            try {\n+                if (AbstractSubjectAreaRelationship.class.isAssignableFrom(declaredClass)) {\n+                    Constructor<?> ctor = declaredClass.getDeclaredConstructor(SubjectAreaRestClient.class);\n+                    ctor.setAccessible(true);\n+                    final AbstractSubjectAreaRelationship newInstance =\n+                            (AbstractSubjectAreaRelationship) ctor.newInstance(subjectAreaRestClient);\n+                    cache.put(newInstance.type(), newInstance);\n+                }\n+            } catch (NoSuchMethodException\n+                    | IllegalAccessException\n+                    | InstantiationException\n+                    | InvocationTargetException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+    public SubjectAreaLine(SubjectAreaRestClient subjectAreaRestClient) {\n+        this(SubjectAreaLine.class.getPackage().getName(), subjectAreaRestClient);\n+    }\n+\n+    @Override\n+    public SubjectAreaRelationshipClient<Hasa> hasa() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY3OTAzMA==", "bodyText": "I think then the class should be too called HasA? And IsA?", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r444679030", "createdAt": "2020-06-24T06:46:19Z", "author": {"login": "immmus"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/relationships/SubjectAreaLine.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client.relationships;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaRelationshipClient;\n+import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaRestClient;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.graph.Line;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.relationships.*;\n+import org.reflections.Reflections;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class SubjectAreaLine implements SubjectAreaRelationship {\n+\n+    private static final String HASA = \"has-as\";\n+    private static final String RELATED_TERM = \"related-terms\";\n+    private static final String SYNONYM = \"synonyms\";\n+    private static final String ANTONYM = \"antonyms\";\n+    private static final String TRANSLATION = \"translations\";\n+    private static final String USED_IN_CONTEXT = \"used-in-contexts\";\n+    private static final String PREFERRED_TERM = \"preferred-terms\";\n+    private static final String VALID_VALUE = \"valid-values\";\n+    private static final String REPLACEMENT_TERM = \"replacement-terms\";\n+    private static final String TYPED_BY = \"typed-bys\";\n+    private static final String IS_A = \"is-as\";\n+    private static final String IS_A_TYPE_OF = \"is-a-type-ofs\";\n+    private static final String TERM_CATEGORIZATION = \"term-categorizations\";\n+    private static final String SEMANTIC_ASSIGNMENT = \"semantic-assignments\";\n+    private static final String TERM_ANCHOR = \"term-anchor\";\n+    private static final String CATEGORY_ANCHOR = \"category-anchor\";\n+    private static final String PROJECT_SCOPE = \"project-scopes\";\n+\n+    private Map<Class<?>, SubjectAreaRelationshipClient<?>> cache = new HashMap<>();\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public SubjectAreaLine(String packageToScan, SubjectAreaRestClient subjectAreaRestClient) {\n+        Reflections reflections = new Reflections(packageToScan);\n+        Set<Class<?>> clientClasses = reflections.getTypesAnnotatedWith(SubjectAreaLineClient.class);\n+        for (Class<?> declaredClass : clientClasses) {\n+            try {\n+                if (AbstractSubjectAreaRelationship.class.isAssignableFrom(declaredClass)) {\n+                    Constructor<?> ctor = declaredClass.getDeclaredConstructor(SubjectAreaRestClient.class);\n+                    ctor.setAccessible(true);\n+                    final AbstractSubjectAreaRelationship newInstance =\n+                            (AbstractSubjectAreaRelationship) ctor.newInstance(subjectAreaRestClient);\n+                    cache.put(newInstance.type(), newInstance);\n+                }\n+            } catch (NoSuchMethodException\n+                    | IllegalAccessException\n+                    | InstantiationException\n+                    | InvocationTargetException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+    public SubjectAreaLine(SubjectAreaRestClient subjectAreaRestClient) {\n+        this(SubjectAreaLine.class.getPackage().getName(), subjectAreaRestClient);\n+    }\n+\n+    @Override\n+    public SubjectAreaRelationshipClient<Hasa> hasa() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzMzc1OQ=="}, "originalCommit": {"oid": "cbb9eb14f3e5acc73bded2b55e10441f25d89657"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjI0MTI1OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/mappers/MappersFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozODowN1rOGqWuTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozODowN1rOGqWuTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2NTY3OA==", "bodyText": "We cannot have printStackTrace", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r447065678", "createdAt": "2020-06-29T15:38:07Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/mappers/MappersFactory.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.server.mappers;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.utilities.OMRSAPIHelper;\n+import org.reflections.Reflections;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+public class MappersFactory {\n+    private final Map<Class<?>, Supplier<Object>> mappers = new HashMap<>();\n+    private final String SUBJECT_AREA_PACKAGE = \"org.odpi.openmetadata.accessservices.subjectarea\";\n+\n+    public MappersFactory(final OMRSAPIHelper omrsApiHelper) {\n+        Reflections reflections = new Reflections(SUBJECT_AREA_PACKAGE);\n+        Set<Class<?>> mappersClasses = reflections.getTypesAnnotatedWith(SubjectAreaMapper.class);\n+        for (Class<?> mapperClass : mappersClasses) {\n+            try {\n+                Constructor<?> ctor = mapperClass.getDeclaredConstructor(OMRSAPIHelper.class);\n+                ctor.setAccessible(true);\n+                final Object mapper = ctor.newInstance(omrsApiHelper);\n+                mappers.put(mapperClass, () -> mapper);\n+            } catch (NoSuchMethodException\n+                    | IllegalAccessException\n+                    | InstantiationException\n+                    | InvocationTargetException e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e073034a724a445d67f89a045f44f5f4cd136632"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjI0MzA2OnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/mappers/MappersFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozODozNFrOGqWvdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozODozNFrOGqWvdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2NTk3NQ==", "bodyText": "We cannot gobble exceptions", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r447065975", "createdAt": "2020-06-29T15:38:34Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/mappers/MappersFactory.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.server.mappers;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.utilities.OMRSAPIHelper;\n+import org.reflections.Reflections;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+public class MappersFactory {\n+    private final Map<Class<?>, Supplier<Object>> mappers = new HashMap<>();\n+    private final String SUBJECT_AREA_PACKAGE = \"org.odpi.openmetadata.accessservices.subjectarea\";\n+\n+    public MappersFactory(final OMRSAPIHelper omrsApiHelper) {\n+        Reflections reflections = new Reflections(SUBJECT_AREA_PACKAGE);\n+        Set<Class<?>> mappersClasses = reflections.getTypesAnnotatedWith(SubjectAreaMapper.class);\n+        for (Class<?> mapperClass : mappersClasses) {\n+            try {\n+                Constructor<?> ctor = mapperClass.getDeclaredConstructor(OMRSAPIHelper.class);\n+                ctor.setAccessible(true);\n+                final Object mapper = ctor.newInstance(omrsApiHelper);\n+                mappers.put(mapperClass, () -> mapper);\n+            } catch (NoSuchMethodException\n+                    | IllegalAccessException\n+                    | InstantiationException\n+                    | InvocationTargetException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T>T get(Class<T> mapperClass) {\n+        if (mappers.containsKey(mapperClass)) {\n+            return (T) this.mappers.get(mapperClass).get();\n+        }\n+        //TODO throw Error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e073034a724a445d67f89a045f44f5f4cd136632"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjI0NzkwOnYy", "diffSide": "RIGHT", "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/SubjectAreaNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozOTo0MFrOGqWyeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozOTo0MFrOGqWyeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2Njc0NA==", "bodyText": "cannot have stack traces - we need to deal with the errors properly", "url": "https://github.com/odpi/egeria/pull/3245#discussion_r447066744", "createdAt": "2020-06-29T15:39:40Z", "author": {"login": "davidradl"}, "path": "open-metadata-implementation/access-services/subject-area/subject-area-client/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/client/entities/SubjectAreaNode.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.accessservices.subjectarea.client.entities;\n+\n+import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaEntityClient;\n+import org.odpi.openmetadata.accessservices.subjectarea.client.SubjectAreaRestClient;\n+import org.odpi.openmetadata.accessservices.subjectarea.client.entities.categories.SubjectAreaCategory;\n+import org.odpi.openmetadata.accessservices.subjectarea.client.entities.glossaries.SubjectAreaGlossary;\n+import org.odpi.openmetadata.accessservices.subjectarea.client.entities.projects.SubjectAreaProject;\n+import org.odpi.openmetadata.accessservices.subjectarea.client.entities.terms.SubjectAreaTerm;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.category.Category;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.category.SubjectAreaDefinition;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.glossary.Glossary;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.graph.Line;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.graph.Node;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.project.Project;\n+import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.term.Term;\n+import org.reflections.Reflections;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.*;\n+\n+/**\n+ * The OMAS client library implementation of the Subject Area OMAS.\n+ * This interface provides entities {@link Node} authoring interface for subject area experts.\n+ * A standard set of customers is described in {@link SubjectAreaCategory}, {@link SubjectAreaTerm},\n+ * {@link SubjectAreaProject}, {@link SubjectAreaGlossary}\n+ */\n+public class SubjectAreaNode implements SubjectAreaCategory, SubjectAreaTerm, SubjectAreaProject, SubjectAreaGlossary {\n+    private Map<Class<?>, SubjectAreaEntityClient<?>> cache = new HashMap<>();\n+    private static final String DEFAULT_SCAN_PACKAGE = SubjectAreaNode.class.getPackage().getName();\n+\n+    /**\n+     * @param packagesToScan - search packages for finding classes placed by annotation {@link SubjectAreaNodeClient}\n+     * @param subjectAreaRestClient - rest client for Subject Area OMAS REST APIs\n+     * */\n+    @SuppressWarnings(\"rawtypes\")\n+    public SubjectAreaNode(SubjectAreaRestClient subjectAreaRestClient, String... packagesToScan) {\n+        Set<String> packages = new HashSet<>(Arrays.asList(packagesToScan));\n+        packages.add(DEFAULT_SCAN_PACKAGE);\n+\n+        Reflections reflections = new Reflections(packages);\n+        Set<Class<?>> clientClasses = reflections.getTypesAnnotatedWith(SubjectAreaNodeClient.class);\n+        for (Class<?> declaredClass : clientClasses) {\n+            try {\n+                if (AbstractSubjectAreaEntity.class.isAssignableFrom(declaredClass)) {\n+                    Constructor<?> ctor = declaredClass.getDeclaredConstructor(SubjectAreaRestClient.class);\n+                    ctor.setAccessible(true);\n+                    final AbstractSubjectAreaEntity newInstance =\n+                            (AbstractSubjectAreaEntity) ctor.newInstance(subjectAreaRestClient);\n+                    cache.put(newInstance.type(), newInstance);\n+                }\n+            } catch (NoSuchMethodException\n+                    | IllegalAccessException\n+                    | InstantiationException\n+                    | InvocationTargetException e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e073034a724a445d67f89a045f44f5f4cd136632"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2357, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}