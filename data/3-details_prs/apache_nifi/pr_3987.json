{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNzYxMDQz", "number": 3987, "title": "NIFI-7015 - ConsumeJMS supports additional message types", "bodyText": "https://issues.apache.org/jira/browse/NIFI-7015\nConsumeJMS now supports ObjectMessage, MapMessage and StreamMessage types as well. Added optional ERROR_QUEUE property. Result flowfiles get a 'jms.messagetype' attribute that contains the incoming message type (TextMessage, BytesMessage, ObjectMessage, MapMessage or StreamMessage).\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced\nin the commit message?\n\n\n Does your PR title start with NIFI-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen \"-\" character.\n\n\n Has your PR been rebased against the latest commit within the target branch (typically master)?\n\n\n Is your initial contribution a single, squashed commit? Additional commits in response to PR reviewer feedback should be made on this branch and pushed to allow change tracking. Do not squash or use --force when pushing to allow for clean monitoring of changes.\n\n\nFor code changes:\n\n Have you ensured that the full suite of tests is executed via mvn -Pcontrib-check clean install at the root nifi folder?\n Have you written or updated unit tests to verify your changes?\n Have you verified that the full build is successful on both JDK 8 and JDK 11?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE file, including the main LICENSE file under nifi-assembly?\n If applicable, have you updated the NOTICE file, including the main NOTICE file found under nifi-assembly?\n If adding new Properties, have you added .displayName in addition to .name (programmatic access) for each of the new properties?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n\nNote:\nPlease ensure that once the PR is submitted, you check travis-ci for build issues and submit an update to your PR as soon as possible.", "createdAt": "2020-01-14T17:46:31Z", "url": "https://github.com/apache/nifi/pull/3987", "merged": true, "mergeCommit": {"oid": "103325354b6930bf92e0f99b332866cbb2ffeb31"}, "closed": true, "closedAt": "2020-01-14T22:07:45Z", "author": {"login": "tpalfy"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6UsH9AH2gAyMzYyNzYxMDQzOjBlMTI1MGRkZjRlYjY5ZmZhNGVhOTExMDg3ZDliMjlkNTI4NTAxN2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6UxjnAFqTM0MjcyNDk0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0e1250ddf4eb69ffa4ea911087d9b29d5285017e", "author": {"user": {"login": "tpalfy", "name": null}}, "url": "https://github.com/apache/nifi/commit/0e1250ddf4eb69ffa4ea911087d9b29d5285017e", "committedDate": "2020-01-14T17:48:50Z", "message": "NIFI-7015 - ConsumeJMS now supports ObjectMessage, MapMessage and StreamMessage types as well. Added optional ERROR_QUEUE property. Result flowfiles get a 'jms.messagetype' attribute that contains the incoming message type (TextMessage, BytesMessage, ObjectMessage, MapMessage or StreamMessage)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "776b2c96aa548429962c231bd1e58b2489098c20", "author": {"user": {"login": "tpalfy", "name": null}}, "url": "https://github.com/apache/nifi/commit/776b2c96aa548429962c231bd1e58b2489098c20", "committedDate": "2020-01-14T17:44:54Z", "message": "NIFI-7015 - ConsumeJMS now supports ObjectMessage, MapMessage and StreamMessage types as well. Added optional ERROR_QUEUE property. Result flowfiles get a 'jms.messagetype' attribute that contains the incoming message type (TextMessage, BytesMessage, ObjectMessage, MapMessage or StreamMessage)."}, "afterCommit": {"oid": "0e1250ddf4eb69ffa4ea911087d9b29d5285017e", "author": {"user": {"login": "tpalfy", "name": null}}, "url": "https://github.com/apache/nifi/commit/0e1250ddf4eb69ffa4ea911087d9b29d5285017e", "committedDate": "2020-01-14T17:48:50Z", "message": "NIFI-7015 - ConsumeJMS now supports ObjectMessage, MapMessage and StreamMessage types as well. Added optional ERROR_QUEUE property. Result flowfiles get a 'jms.messagetype' attribute that contains the incoming message type (TextMessage, BytesMessage, ObjectMessage, MapMessage or StreamMessage)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzI0OTQx", "url": "https://github.com/apache/nifi/pull/3987#pullrequestreview-342724941", "createdAt": "2020-01-14T17:54:11Z", "commit": {"oid": "0e1250ddf4eb69ffa4ea911087d9b29d5285017e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzo1NDoxMVrOFdgfBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzo1NDoxMVrOFdgfBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4NTI1Mg==", "bodyText": "Minor: Could be inlined similar to the other test methods.", "url": "https://github.com/apache/nifi/pull/3987#discussion_r366485252", "createdAt": "2020-01-14T17:54:11Z", "author": {"login": "tpalfy"}, "path": "nifi-nar-bundles/nifi-jms-bundle/nifi-jms-processors/src/test/java/org/apache/nifi/jms/processors/ConsumeJMSIT.java", "diffHunk": "@@ -65,11 +79,183 @@ public void validateSuccessfulConsumeAndTransferToSuccess() throws Exception {\n             successFF.assertAttributeEquals(\"filename\", \"message.txt\");\n             successFF.assertAttributeExists(\"attribute_from_sender\");\n             successFF.assertAttributeEquals(\"attribute_from_sender\", \"some value\");\n+            successFF.assertAttributeExists(\"jms.messagetype\");\n+            successFF.assertAttributeEquals(\"jms.messagetype\", \"BytesMessage\");\n             successFF.assertContentEquals(\"Hey dude!\".getBytes());\n             String sourceDestination = successFF.getAttribute(ConsumeJMS.JMS_SOURCE_DESTINATION_NAME);\n             assertNotNull(sourceDestination);\n         } finally {\n             ((CachingConnectionFactory) jmsTemplate.getConnectionFactory()).destroy();\n         }\n     }\n+\n+    @Test\n+    public void testValidateErrorQueueWhenDestinationIsTopicAndErrorQueueIsSet() throws Exception {\n+        testValidateErrorQueue(ConsumeJMS.TOPIC, \"errorQueue\", false);\n+    }\n+\n+    @Test\n+    public void testValidateErrorQueueWhenDestinationIsTopicAndErrorQueueIsNotSet() throws Exception {\n+        testValidateErrorQueue(ConsumeJMS.TOPIC, null, true);\n+    }\n+\n+    @Test\n+    public void testValidateErrorQueueWhenDestinationIsQueueAndErrorQueueIsSet() throws Exception {\n+        testValidateErrorQueue(ConsumeJMS.QUEUE, \"errorQueue\", true);\n+    }\n+\n+    @Test\n+    public void testValidateErrorQueueWhenDestinationIsQueueAndErrorQueueIsNotSet() throws Exception {\n+        testValidateErrorQueue(ConsumeJMS.QUEUE, null, true);\n+    }\n+\n+    private void testValidateErrorQueue(String destinationType, String errorQueue, boolean expectedValid) throws Exception {\n+        JmsTemplate jmsTemplate = CommonTest.buildJmsTemplateForDestination(false);\n+\n+        try {\n+            TestRunner runner = TestRunners.newTestRunner(new ConsumeJMS());\n+\n+            JMSConnectionFactoryProviderDefinition cfService = mock(JMSConnectionFactoryProviderDefinition.class);\n+            when(cfService.getIdentifier()).thenReturn(\"cfService\");\n+            when(cfService.getConnectionFactory()).thenReturn(jmsTemplate.getConnectionFactory());\n+\n+            runner.addControllerService(\"cfService\", cfService);\n+            runner.enableControllerService(cfService);\n+\n+            runner.setProperty(PublishJMS.CF_SERVICE, \"cfService\");\n+            runner.setProperty(ConsumeJMS.DESTINATION, \"destination\");\n+            runner.setProperty(ConsumeJMS.DESTINATION_TYPE, destinationType);\n+            if (errorQueue != null) {\n+                runner.setProperty(ConsumeJMS.ERROR_QUEUE, errorQueue);\n+            }\n+\n+            if (expectedValid) {\n+                runner.assertValid();\n+            } else {\n+                runner.assertNotValid();\n+            }\n+        } finally {\n+            ((CachingConnectionFactory) jmsTemplate.getConnectionFactory()).destroy();\n+        }\n+    }\n+\n+    @Test\n+    public void testTextMessageTypeAttribute() throws Exception {\n+        testMessageTypeAttribute(\n+            \"testTextMessage\",\n+            Session::createTextMessage,\n+            TextMessage.class.getSimpleName()\n+        );\n+    }\n+\n+    @Test\n+    public void testByteMessageTypeAttribute() throws Exception {\n+        testMessageTypeAttribute(\n+            \"testByteMessage\",\n+            Session::createBytesMessage,\n+            BytesMessage.class.getSimpleName()\n+        );\n+    }\n+\n+    @Test\n+    public void testObjectMessageTypeAttribute() throws Exception {\n+        String destinationName = \"testObjectMessage\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1250ddf4eb69ffa4ea911087d9b29d5285017e"}, "originalPosition": 128}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2007, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}