{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMjU2NzMz", "number": 4700, "title": "NIFI-8060 Added minimal VolatileProvenanceRepository to nifi-stateles\u2026", "bodyText": "\u2026s-engine and remove dependency on nifi-volatile-provenance-repo module\nThank you for submitting a contribution to Apache NiFi.\nPlease provide a short description of the PR here:\nDescription of PR\nEnables X functionality; fixes bug NIFI-YYYY.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced\nin the commit message?\n\n\n Does your PR title start with NIFI-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen \"-\" character.\n\n\n Has your PR been rebased against the latest commit within the target branch (typically main)?\n\n\n Is your initial contribution a single, squashed commit? Additional commits in response to PR reviewer feedback should be made on this branch and pushed to allow change tracking. Do not squash or use --force when pushing to allow for clean monitoring of changes.\n\n\nFor code changes:\n\n Have you ensured that the full suite of tests is executed via mvn -Pcontrib-check clean install at the root nifi folder?\n Have you written or updated unit tests to verify your changes?\n Have you verified that the full build is successful on JDK 8?\n Have you verified that the full build is successful on JDK 11?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE file, including the main LICENSE file under nifi-assembly?\n If applicable, have you updated the NOTICE file, including the main NOTICE file found under nifi-assembly?\n If adding new Properties, have you added .displayName in addition to .name (programmatic access) for each of the new properties?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n\nNote:\nPlease ensure that once the PR is submitted, you check GitHub Actions CI for build issues and submit an update to your PR as soon as possible.", "createdAt": "2020-12-02T19:59:37Z", "url": "https://github.com/apache/nifi/pull/4700", "merged": true, "mergeCommit": {"oid": "2b1359a8080ac8b05058beffd272cf3f41ba9e1e"}, "closed": true, "closedAt": "2020-12-03T19:42:51Z", "author": {"login": "bbende"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiUISkgH2gAyNTMxMjU2NzMzOjI5MmU3NzZkZjg2YzVjYjk3MjY2MzAzNWE1MGVhZTBmYzViMzNiMTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiVAA-gBqjQwNjQzNTY2Mzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "292e776df86c5cb972663035a50eae0fc5b33b15", "author": {"user": {"login": "bbende", "name": "Bryan Bende"}}, "url": "https://github.com/apache/nifi/commit/292e776df86c5cb972663035a50eae0fc5b33b15", "committedDate": "2020-12-02T19:57:49Z", "message": "NIFI-8060 Added minimal VolatileProvenanceRepository to nifi-stateless-engine and remove dependency on nifi-volatile-provenance-repo module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjA0NzQ2", "url": "https://github.com/apache/nifi/pull/4700#pullrequestreview-543204746", "createdAt": "2020-12-02T20:19:45Z", "commit": {"oid": "292e776df86c5cb972663035a50eae0fc5b33b15"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDoxOTo0NVrOH9skkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDoyNzo0NVrOH9s2Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NTQ0Mw==", "bodyText": "Given the usage pattern, that this will only be used in stateless, and it's not loaded via the service loader, I don't think we even need the no-arg constructor.", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534455443", "createdAt": "2020-12-02T20:19:45Z", "author": {"login": "markap14"}, "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java", "diffHunk": "@@ -0,0 +1,409 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.stateless.repository;\n+\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.user.NiFiUser;\n+import org.apache.nifi.events.EventReporter;\n+import org.apache.nifi.provenance.AsyncLineageSubmission;\n+import org.apache.nifi.provenance.IdentifierLookup;\n+import org.apache.nifi.provenance.ProvenanceAuthorizableFactory;\n+import org.apache.nifi.provenance.ProvenanceEventBuilder;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventRepository;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+import org.apache.nifi.provenance.ProvenanceRepository;\n+import org.apache.nifi.provenance.StandardProvenanceEventRecord;\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.util.RingBuffer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class VolatileProvenanceRepository implements ProvenanceRepository {\n+\n+    // default property values\n+    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+\n+    public static String CONTAINER_NAME = \"in-memory\";\n+\n+    private final RingBuffer<ProvenanceEventRecord> ringBuffer;\n+    private final int maxSize;\n+\n+    private final AtomicLong idGenerator = new AtomicLong(0L);\n+    private final AtomicBoolean initialized = new AtomicBoolean(false);\n+\n+    /**\n+     * Default no args constructor for service loading only\n+     */\n+    public VolatileProvenanceRepository() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292e776df86c5cb972663035a50eae0fc5b33b15"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NTg2OA==", "bodyText": "I think we can just make this a no-op and remove the initialized - doesn't appear to serve any particular function?", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534455868", "createdAt": "2020-12-02T20:20:29Z", "author": {"login": "markap14"}, "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java", "diffHunk": "@@ -0,0 +1,409 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.stateless.repository;\n+\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.user.NiFiUser;\n+import org.apache.nifi.events.EventReporter;\n+import org.apache.nifi.provenance.AsyncLineageSubmission;\n+import org.apache.nifi.provenance.IdentifierLookup;\n+import org.apache.nifi.provenance.ProvenanceAuthorizableFactory;\n+import org.apache.nifi.provenance.ProvenanceEventBuilder;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventRepository;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+import org.apache.nifi.provenance.ProvenanceRepository;\n+import org.apache.nifi.provenance.StandardProvenanceEventRecord;\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.util.RingBuffer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class VolatileProvenanceRepository implements ProvenanceRepository {\n+\n+    // default property values\n+    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+\n+    public static String CONTAINER_NAME = \"in-memory\";\n+\n+    private final RingBuffer<ProvenanceEventRecord> ringBuffer;\n+    private final int maxSize;\n+\n+    private final AtomicLong idGenerator = new AtomicLong(0L);\n+    private final AtomicBoolean initialized = new AtomicBoolean(false);\n+\n+    /**\n+     * Default no args constructor for service loading only\n+     */\n+    public VolatileProvenanceRepository() {\n+        ringBuffer = null;\n+        maxSize = DEFAULT_BUFFER_SIZE;\n+    }\n+\n+    public VolatileProvenanceRepository(final int maxEvents) {\n+        maxSize = maxEvents;\n+        ringBuffer = new RingBuffer<>(maxSize);\n+    }\n+\n+    @Override\n+    public void initialize(final EventReporter eventReporter, final Authorizer authorizer, final ProvenanceAuthorizableFactory resourceFactory,\n+                           final IdentifierLookup idLookup) throws IOException {\n+        if (initialized.getAndSet(true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292e776df86c5cb972663035a50eae0fc5b33b15"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NzA5Nw==", "bodyText": "Don't think we need to actually call this, given that isAuthorized will always return true", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534457097", "createdAt": "2020-12-02T20:22:42Z", "author": {"login": "markap14"}, "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java", "diffHunk": "@@ -0,0 +1,409 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.stateless.repository;\n+\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.user.NiFiUser;\n+import org.apache.nifi.events.EventReporter;\n+import org.apache.nifi.provenance.AsyncLineageSubmission;\n+import org.apache.nifi.provenance.IdentifierLookup;\n+import org.apache.nifi.provenance.ProvenanceAuthorizableFactory;\n+import org.apache.nifi.provenance.ProvenanceEventBuilder;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventRepository;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+import org.apache.nifi.provenance.ProvenanceRepository;\n+import org.apache.nifi.provenance.StandardProvenanceEventRecord;\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.util.RingBuffer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class VolatileProvenanceRepository implements ProvenanceRepository {\n+\n+    // default property values\n+    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+\n+    public static String CONTAINER_NAME = \"in-memory\";\n+\n+    private final RingBuffer<ProvenanceEventRecord> ringBuffer;\n+    private final int maxSize;\n+\n+    private final AtomicLong idGenerator = new AtomicLong(0L);\n+    private final AtomicBoolean initialized = new AtomicBoolean(false);\n+\n+    /**\n+     * Default no args constructor for service loading only\n+     */\n+    public VolatileProvenanceRepository() {\n+        ringBuffer = null;\n+        maxSize = DEFAULT_BUFFER_SIZE;\n+    }\n+\n+    public VolatileProvenanceRepository(final int maxEvents) {\n+        maxSize = maxEvents;\n+        ringBuffer = new RingBuffer<>(maxSize);\n+    }\n+\n+    @Override\n+    public void initialize(final EventReporter eventReporter, final Authorizer authorizer, final ProvenanceAuthorizableFactory resourceFactory,\n+                           final IdentifierLookup idLookup) throws IOException {\n+        if (initialized.getAndSet(true)) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public ProvenanceEventRepository getProvenanceEventRepository() {\n+        return this;\n+    }\n+\n+    @Override\n+    public ProvenanceEventBuilder eventBuilder() {\n+        return new StandardProvenanceEventRecord.Builder();\n+    }\n+\n+    @Override\n+    public void registerEvent(final ProvenanceEventRecord event) {\n+        final long id = idGenerator.getAndIncrement();\n+        ringBuffer.add(new IdEnrichedProvEvent(event, id));\n+    }\n+\n+    @Override\n+    public void registerEvents(final Iterable<ProvenanceEventRecord> events) {\n+        for (final ProvenanceEventRecord event : events) {\n+            registerEvent(event);\n+        }\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getEvents(final long firstRecordId, final int maxRecords) throws IOException {\n+        return getEvents(firstRecordId, maxRecords, null);\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getEvents(final long firstRecordId, final int maxRecords, final NiFiUser user) throws IOException {\n+        return ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord value) {\n+                if (!isAuthorized(value, user)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292e776df86c5cb972663035a50eae0fc5b33b15"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1ODU3Ng==", "bodyText": "I think we can avoid even calling authorize, no?", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534458576", "createdAt": "2020-12-02T20:25:24Z", "author": {"login": "markap14"}, "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java", "diffHunk": "@@ -0,0 +1,409 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.stateless.repository;\n+\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.user.NiFiUser;\n+import org.apache.nifi.events.EventReporter;\n+import org.apache.nifi.provenance.AsyncLineageSubmission;\n+import org.apache.nifi.provenance.IdentifierLookup;\n+import org.apache.nifi.provenance.ProvenanceAuthorizableFactory;\n+import org.apache.nifi.provenance.ProvenanceEventBuilder;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventRepository;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+import org.apache.nifi.provenance.ProvenanceRepository;\n+import org.apache.nifi.provenance.StandardProvenanceEventRecord;\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.util.RingBuffer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class VolatileProvenanceRepository implements ProvenanceRepository {\n+\n+    // default property values\n+    public static final int DEFAULT_BUFFER_SIZE = 10000;\n+\n+    public static String CONTAINER_NAME = \"in-memory\";\n+\n+    private final RingBuffer<ProvenanceEventRecord> ringBuffer;\n+    private final int maxSize;\n+\n+    private final AtomicLong idGenerator = new AtomicLong(0L);\n+    private final AtomicBoolean initialized = new AtomicBoolean(false);\n+\n+    /**\n+     * Default no args constructor for service loading only\n+     */\n+    public VolatileProvenanceRepository() {\n+        ringBuffer = null;\n+        maxSize = DEFAULT_BUFFER_SIZE;\n+    }\n+\n+    public VolatileProvenanceRepository(final int maxEvents) {\n+        maxSize = maxEvents;\n+        ringBuffer = new RingBuffer<>(maxSize);\n+    }\n+\n+    @Override\n+    public void initialize(final EventReporter eventReporter, final Authorizer authorizer, final ProvenanceAuthorizableFactory resourceFactory,\n+                           final IdentifierLookup idLookup) throws IOException {\n+        if (initialized.getAndSet(true)) {\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public ProvenanceEventRepository getProvenanceEventRepository() {\n+        return this;\n+    }\n+\n+    @Override\n+    public ProvenanceEventBuilder eventBuilder() {\n+        return new StandardProvenanceEventRecord.Builder();\n+    }\n+\n+    @Override\n+    public void registerEvent(final ProvenanceEventRecord event) {\n+        final long id = idGenerator.getAndIncrement();\n+        ringBuffer.add(new IdEnrichedProvEvent(event, id));\n+    }\n+\n+    @Override\n+    public void registerEvents(final Iterable<ProvenanceEventRecord> events) {\n+        for (final ProvenanceEventRecord event : events) {\n+            registerEvent(event);\n+        }\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getEvents(final long firstRecordId, final int maxRecords) throws IOException {\n+        return getEvents(firstRecordId, maxRecords, null);\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getEvents(final long firstRecordId, final int maxRecords, final NiFiUser user) throws IOException {\n+        return ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord value) {\n+                if (!isAuthorized(value, user)) {\n+                    return false;\n+                }\n+\n+                return value.getEventId() >= firstRecordId;\n+            }\n+        }, maxRecords);\n+    }\n+\n+    @Override\n+    public Long getMaxEventId() {\n+        final ProvenanceEventRecord newest = ringBuffer.getNewestElement();\n+        return (newest == null) ? null : newest.getEventId();\n+    }\n+\n+    public ProvenanceEventRecord getEvent(final String identifier) throws IOException {\n+        final List<ProvenanceEventRecord> records = ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord event) {\n+                return identifier.equals(event.getFlowFileUuid());\n+            }\n+        }, 1);\n+        return records.isEmpty() ? null : records.get(0);\n+    }\n+\n+    @Override\n+    public ProvenanceEventRecord getEvent(final long id) {\n+        final List<ProvenanceEventRecord> records = ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord event) {\n+                return event.getEventId() == id;\n+            }\n+        }, 1);\n+\n+        return records.isEmpty() ? null : records.get(0);\n+    }\n+\n+    @Override\n+    public ProvenanceEventRecord getEvent(final long id, final NiFiUser user) {\n+        final ProvenanceEventRecord event = getEvent(id);\n+        if (event == null) {\n+            return null;\n+        }\n+\n+        authorize(event, user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292e776df86c5cb972663035a50eae0fc5b33b15"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1OTkzOQ==", "bodyText": "It might make sense to call this StatelessProvenanceRepository or perhaps RingBufferProvenanceRepository just to avoid confusion with the existing VolatileProvenanceRepository?", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534459939", "createdAt": "2020-12-02T20:27:45Z", "author": {"login": "markap14"}, "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/VolatileProvenanceRepository.java", "diffHunk": "@@ -0,0 +1,409 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.stateless.repository;\n+\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.user.NiFiUser;\n+import org.apache.nifi.events.EventReporter;\n+import org.apache.nifi.provenance.AsyncLineageSubmission;\n+import org.apache.nifi.provenance.IdentifierLookup;\n+import org.apache.nifi.provenance.ProvenanceAuthorizableFactory;\n+import org.apache.nifi.provenance.ProvenanceEventBuilder;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventRepository;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+import org.apache.nifi.provenance.ProvenanceRepository;\n+import org.apache.nifi.provenance.StandardProvenanceEventRecord;\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.util.RingBuffer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class VolatileProvenanceRepository implements ProvenanceRepository {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292e776df86c5cb972663035a50eae0fc5b33b15"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjE5MDI5", "url": "https://github.com/apache/nifi/pull/4700#pullrequestreview-543219029", "createdAt": "2020-12-02T20:40:25Z", "commit": {"oid": "b4f7168e40d2f9b757bae5d0d18b6f6e41699439"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDo0MDoyNlrOH9tQxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDo0MDoyNlrOH9tQxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2Njc1OQ==", "bodyText": "Can we change this whole method to simply return getEvent(id); now?", "url": "https://github.com/apache/nifi/pull/4700#discussion_r534466759", "createdAt": "2020-12-02T20:40:26Z", "author": {"login": "markap14"}, "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-stateless-bundle/nifi-stateless-engine/src/main/java/org/apache/nifi/stateless/repository/StatelessProvenanceRepository.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.stateless.repository;\n+\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.user.NiFiUser;\n+import org.apache.nifi.events.EventReporter;\n+import org.apache.nifi.provenance.AsyncLineageSubmission;\n+import org.apache.nifi.provenance.IdentifierLookup;\n+import org.apache.nifi.provenance.ProvenanceAuthorizableFactory;\n+import org.apache.nifi.provenance.ProvenanceEventBuilder;\n+import org.apache.nifi.provenance.ProvenanceEventRecord;\n+import org.apache.nifi.provenance.ProvenanceEventRepository;\n+import org.apache.nifi.provenance.ProvenanceEventType;\n+import org.apache.nifi.provenance.ProvenanceRepository;\n+import org.apache.nifi.provenance.StandardProvenanceEventRecord;\n+import org.apache.nifi.provenance.lineage.ComputeLineageSubmission;\n+import org.apache.nifi.provenance.search.Query;\n+import org.apache.nifi.provenance.search.QuerySubmission;\n+import org.apache.nifi.provenance.search.SearchableField;\n+import org.apache.nifi.util.RingBuffer;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class StatelessProvenanceRepository implements ProvenanceRepository {\n+\n+    public static String CONTAINER_NAME = \"in-memory\";\n+\n+    private final RingBuffer<ProvenanceEventRecord> ringBuffer;\n+    private final int maxSize;\n+\n+    private final AtomicLong idGenerator = new AtomicLong(0L);\n+\n+    public StatelessProvenanceRepository(final int maxEvents) {\n+        maxSize = maxEvents;\n+        ringBuffer = new RingBuffer<>(maxSize);\n+    }\n+\n+    @Override\n+    public void initialize(final EventReporter eventReporter, final Authorizer authorizer, final ProvenanceAuthorizableFactory resourceFactory,\n+                           final IdentifierLookup idLookup) throws IOException {\n+\n+    }\n+\n+    @Override\n+    public ProvenanceEventRepository getProvenanceEventRepository() {\n+        return this;\n+    }\n+\n+    @Override\n+    public ProvenanceEventBuilder eventBuilder() {\n+        return new StandardProvenanceEventRecord.Builder();\n+    }\n+\n+    @Override\n+    public void registerEvent(final ProvenanceEventRecord event) {\n+        final long id = idGenerator.getAndIncrement();\n+        ringBuffer.add(new IdEnrichedProvEvent(event, id));\n+    }\n+\n+    @Override\n+    public void registerEvents(final Iterable<ProvenanceEventRecord> events) {\n+        for (final ProvenanceEventRecord event : events) {\n+            registerEvent(event);\n+        }\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getEvents(final long firstRecordId, final int maxRecords) throws IOException {\n+        return getEvents(firstRecordId, maxRecords, null);\n+    }\n+\n+    @Override\n+    public List<ProvenanceEventRecord> getEvents(final long firstRecordId, final int maxRecords, final NiFiUser user) throws IOException {\n+        return ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord value) {\n+                return value.getEventId() >= firstRecordId;\n+            }\n+        }, maxRecords);\n+    }\n+\n+    @Override\n+    public Long getMaxEventId() {\n+        final ProvenanceEventRecord newest = ringBuffer.getNewestElement();\n+        return (newest == null) ? null : newest.getEventId();\n+    }\n+\n+    public ProvenanceEventRecord getEvent(final String identifier) throws IOException {\n+        final List<ProvenanceEventRecord> records = ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord event) {\n+                return identifier.equals(event.getFlowFileUuid());\n+            }\n+        }, 1);\n+        return records.isEmpty() ? null : records.get(0);\n+    }\n+\n+    @Override\n+    public ProvenanceEventRecord getEvent(final long id) {\n+        final List<ProvenanceEventRecord> records = ringBuffer.getSelectedElements(new RingBuffer.Filter<ProvenanceEventRecord>() {\n+            @Override\n+            public boolean select(final ProvenanceEventRecord event) {\n+                return event.getEventId() == id;\n+            }\n+        }, 1);\n+\n+        return records.isEmpty() ? null : records.get(0);\n+    }\n+\n+    @Override\n+    public ProvenanceEventRecord getEvent(final long id, final NiFiUser user) {\n+        final ProvenanceEventRecord event = getEvent(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4f7168e40d2f9b757bae5d0d18b6f6e41699439"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "author": {"user": {"login": "bbende", "name": "Bryan Bende"}}, "url": "https://github.com/apache/nifi/commit/80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "committedDate": "2020-12-02T20:58:11Z", "message": "NIFI-8060 Addressed review feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84a0212f2c3c6631ee10fa1d75dda8f231d32e0b", "author": {"user": {"login": "bbende", "name": "Bryan Bende"}}, "url": "https://github.com/apache/nifi/commit/84a0212f2c3c6631ee10fa1d75dda8f231d32e0b", "committedDate": "2020-12-02T20:46:56Z", "message": "NIFI-8060 Simplify getEvent method after removing unnecessary authorization check"}, "afterCommit": {"oid": "80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "author": {"user": {"login": "bbende", "name": "Bryan Bende"}}, "url": "https://github.com/apache/nifi/commit/80b1d25ee6f12ae8fb9a695918b8a676d0107d01", "committedDate": "2020-12-02T20:58:11Z", "message": "NIFI-8060 Addressed review feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2033, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}