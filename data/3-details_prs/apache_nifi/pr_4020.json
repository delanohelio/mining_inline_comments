{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjAxNjEw", "number": 4020, "title": "NIFI-7054: Add RecordSinkServiceLookup for dynamic sink routing", "bodyText": "Thank you for submitting a contribution to Apache NiFi.\nPlease provide a short description of the PR here:\nDescription of PR\nEnables X functionality; fixes bug NIFI-YYYY.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced\nin the commit message?\n\n\n Does your PR title start with NIFI-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen \"-\" character.\n\n\n Has your PR been rebased against the latest commit within the target branch (typically master)?\n\n\n Is your initial contribution a single, squashed commit? Additional commits in response to PR reviewer feedback should be made on this branch and pushed to allow change tracking. Do not squash or use --force when pushing to allow for clean monitoring of changes.\n\n\nFor code changes:\n\n Have you ensured that the full suite of tests is executed via mvn -Pcontrib-check clean install at the root nifi folder?\n Have you written or updated unit tests to verify your changes?\n Have you verified that the full build is successful on both JDK 8 and JDK 11?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE file, including the main LICENSE file under nifi-assembly?\n If applicable, have you updated the NOTICE file, including the main NOTICE file found under nifi-assembly?\n If adding new Properties, have you added .displayName in addition to .name (programmatic access) for each of the new properties?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n\nNote:\nPlease ensure that once the PR is submitted, you check travis-ci for build issues and submit an update to your PR as soon as possible.", "createdAt": "2020-01-27T17:02:37Z", "url": "https://github.com/apache/nifi/pull/4020", "merged": true, "mergeCommit": {"oid": "dd6bcc74850daf8f5d7a8621aacd6140eedd4001"}, "closed": true, "closedAt": "2020-02-03T14:45:08Z", "author": {"login": "mattyb149"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_SAVigFqTM1MDU2NDUyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_xj3igBqjI5OTc2NTI2MjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTY0NTIx", "url": "https://github.com/apache/nifi/pull/4020#pullrequestreview-350564521", "createdAt": "2020-01-30T03:30:48Z", "commit": {"oid": "d3c2dc35b3d1d65eb7577575ee9af9219a1422e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzozMDo0OVrOFjeh0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzozMDo0OVrOFjeh0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NDY1Nw==", "bodyText": "I think this only sets the recordSinkService variable once, however if the value changes, and if the reset is invoked, only the first used in the lookup service is reset.  Should there be a way to ensure that all used values are reset when invoked? Or at least to ensure that the recordSinkService is changed when a different recordSink is retrieved?", "url": "https://github.com/apache/nifi/pull/4020#discussion_r372744657", "createdAt": "2020-01-30T03:30:49Z", "author": {"login": "YolandaMDavis"}, "path": "nifi-nar-bundles/nifi-standard-services/nifi-record-sink-service-bundle/nifi-record-sink-service/src/main/java/org/apache/nifi/record/sink/lookup/RecordSinkServiceLookup.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.record.sink.lookup;\n+\n+import org.apache.nifi.annotation.behavior.DynamicProperty;\n+import org.apache.nifi.annotation.documentation.CapabilityDescription;\n+import org.apache.nifi.annotation.documentation.Tags;\n+import org.apache.nifi.expression.ExpressionLanguageScope;\n+import org.apache.nifi.processor.exception.ProcessException;\n+import org.apache.nifi.record.sink.RecordSinkService;\n+import org.apache.nifi.serialization.WriteResult;\n+import org.apache.nifi.serialization.record.RecordSet;\n+import org.apache.nifi.service.lookup.AbstractSingleAttributeBasedControllerServiceLookup;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+\n+@Tags({\"record\", \"sink\", \"lookup\"})\n+@CapabilityDescription(\"Provides a RecordSinkService that can be used to dynamically select another RecordSinkService. This service \" +\n+        \"requires an attribute named 'record.sink.name' to be passed in when asking for a connection, and will throw an exception \" +\n+        \"if the attribute is missing. The value of 'record.sink.name' will be used to select the RecordSinkService that has been \" +\n+        \"registered with that name. This will allow multiple RecordSinkServices to be defined and registered, and then selected \" +\n+        \"dynamically at runtime by tagging flow files with the appropriate 'record.sink.name' attribute.\")\n+@DynamicProperty(name = \"The name to register the specified RecordSinkService\", value = \"The RecordSinkService\",\n+        description = \"If '\" + RecordSinkServiceLookup.RECORD_SINK_NAME_ATTRIBUTE + \"' attribute contains \" +\n+                \"the name of the dynamic property, then the RecordSinkService (registered in the value) will be selected.\",\n+        expressionLanguageScope = ExpressionLanguageScope.NONE)\n+public class RecordSinkServiceLookup\n+        extends AbstractSingleAttributeBasedControllerServiceLookup<RecordSinkService> implements RecordSinkService {\n+\n+    public static final String RECORD_SINK_NAME_ATTRIBUTE = \"record.sink.name\";\n+\n+    RecordSinkService recordSinkService;\n+\n+    @Override\n+    protected String getLookupAttribute() {\n+        return RECORD_SINK_NAME_ATTRIBUTE;\n+    }\n+\n+    @Override\n+    public Class<RecordSinkService> getServiceType() {\n+        return RecordSinkService.class;\n+    }\n+\n+    @Override\n+    public WriteResult sendData(RecordSet recordSet, Map<String, String> attributes, boolean sendZeroResults) throws IOException {\n+        try {\n+            RecordSinkService recordSink = lookupService(attributes);\n+            WriteResult writeResult = recordSink.sendData(recordSet, attributes, sendZeroResults);\n+            if (recordSinkService == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c2dc35b3d1d65eb7577575ee9af9219a1422e0"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1987d24e816b947df0cb154c421283f81060b994", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/1987d24e816b947df0cb154c421283f81060b994", "committedDate": "2020-01-31T15:20:23Z", "message": "NIFI-7054: Add RecordSinkServiceLookup for dynamic sink routing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01f8e77597e4755f51336d73b4293237cb3d311f", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/01f8e77597e4755f51336d73b4293237cb3d311f", "committedDate": "2020-01-31T16:16:19Z", "message": "NIFI-7054: Incorporated review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3c2dc35b3d1d65eb7577575ee9af9219a1422e0", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/d3c2dc35b3d1d65eb7577575ee9af9219a1422e0", "committedDate": "2020-01-27T16:59:49Z", "message": "NIFI-7054: Add RecordSinkServiceLookup for dynamic sink routing"}, "afterCommit": {"oid": "01f8e77597e4755f51336d73b4293237cb3d311f", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/01f8e77597e4755f51336d73b4293237cb3d311f", "committedDate": "2020-01-31T16:16:19Z", "message": "NIFI-7054: Incorporated review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1940, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}