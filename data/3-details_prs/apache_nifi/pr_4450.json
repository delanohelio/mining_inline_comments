{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTEwNTkx", "number": 4450, "title": "NIFI-7681 - Add update-bucket-policy command, add option to specify timeout and fix documentation to include previously implemented commands", "bodyText": "Thank you for submitting a contribution to Apache NiFi.\nPlease provide a short description of the PR here:\nDescription of PR\nhttps://issues.apache.org/jira/projects/NIFI/issues/NIFI-7681\nApart from the description present in the JIRA ticket, a few other miscellaneous changes have also been made:-\n\n\nBoth NiFiClient and NiFiRegistryClient have configs to specify readTimeout and connectionTimeout parameters, however there was no way to specify those parameters in toolkit. I have added a couple of flags, -rto and -cto to specify the read and connection timeouts respectively. They can also be specified in the properties file by their longnames readTimeout and connectionTimeout.\n\n\nToolkit documentation had a few commands missing, so I updated it to reflect all previously implemented commands\n\n\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced\nin the commit message?\n\n\n Does your PR title start with NIFI-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen \"-\" character.\n\n\n Has your PR been rebased against the latest commit within the target branch (typically main)?\n\n\n Is your initial contribution a single, squashed commit? Additional commits in response to PR reviewer feedback should be made on this branch and pushed to allow change tracking. Do not squash or use --force when pushing to allow for clean monitoring of changes.\n\n\nFor code changes:\n\n Have you ensured that the full suite of tests is executed via mvn -Pcontrib-check clean install at the root nifi folder?\n Have you written or updated unit tests to verify your changes?\n Have you verified that the full build is successful on JDK 8?\n Have you verified that the full build is successful on JDK 11?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE file, including the main LICENSE file under nifi-assembly?\n If applicable, have you updated the NOTICE file, including the main NOTICE file found under nifi-assembly?\n If adding new Properties, have you added .displayName in addition to .name (programmatic access) for each of the new properties?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n\nNote:\nPlease ensure that once the PR is submitted, you check GitHub Actions CI for build issues and submit an update to your PR as soon as possible.", "createdAt": "2020-08-05T02:45:03Z", "url": "https://github.com/apache/nifi/pull/4450", "merged": true, "mergeCommit": {"oid": "339e09a6e040303177f99131bf235365c5d9889a"}, "closed": true, "closedAt": "2020-08-07T13:06:57Z", "author": {"login": "jayaaditya"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7yBSAAH2gAyNDYzMTEwNTkxOmRkNTZjYTgwNjY0MGMzZDlkMjg4ZDU1ZjZjZDRiM2E3ZTM2YWE2ODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8O7OfAH2gAyNDYzMTEwNTkxOmU5ZjEwZDkyY2VjNzZhYzhjODQzODRkYjk4M2M5ZjdhNGZjNmE4MmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dd56ca806640c3d9d288d55f6cd4b3a7e36aa680", "author": {"user": {"login": "jayaaditya", "name": "Jaya Aditya"}}, "url": "https://github.com/apache/nifi/commit/dd56ca806640c3d9d288d55f6cd4b3a7e36aa680", "committedDate": "2020-08-05T02:44:16Z", "message": "NIFI-7681 - Add update-bucket-policy command, add option to specify\ntimeout and fix documentation to include previously implemented commands"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNjY0NjQw", "url": "https://github.com/apache/nifi/pull/4450#pullrequestreview-461664640", "createdAt": "2020-08-05T13:29:52Z", "commit": {"oid": "dd56ca806640c3d9d288d55f6cd4b3a7e36aa680"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoyOTo1MlrOG8JuoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoxMDozNVrOG8LcVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNzEzNg==", "bodyText": "SInce we are updating this, there are other registry commands that got added for users/groups/policies that never made it into this list. Can we add those?", "url": "https://github.com/apache/nifi/pull/4450#discussion_r465727136", "createdAt": "2020-08-05T13:29:52Z", "author": {"login": "bbende"}, "path": "nifi-docs/src/main/asciidoc/toolkit-guide.adoc", "diffHunk": "@@ -94,10 +94,42 @@ The following are available commands:\n  nifi pg-get-services\n  nifi pg-enable-services\n  nifi pg-disable-services\n+ nifi pg-create-service\n+ nifi create-user\n+ nifi list-users\n+ nifi create-user-group\n+ nifi list-user-groups\n+ nifi update-user-group\n+ nifi get-policy\n+ nifi update-policy\n+ nifi create-service\n+ nifi get-services\n+ nifi get-service\n+ nifi disable-services\n+ nifi enable-services\n+ nifi get-reporting-task\n+ nifi get-reporting-tasks\n+ nifi create-reporting-task\n+ nifi set-param\n+ nifi delete-param\n+ nifi list-param-contexts\n+ nifi get-param-context\n+ nifi create-param-context\n+ nifi delete-param-context\n+ nifi merge-param-context\n+ nifi import-param-context\n+ nifi pg-get-param-context\n+ nifi pg-set-param-context\n+ nifi list-templates\n+ nifi download-template\n+ nifi upload-template\n+ nifi start-reporting-tasks\n+ nifi stop-reporting-tasks\n  registry current-user\n  registry list-buckets\n  registry create-bucket\n  registry delete-bucket\n+ registry update-bucket-policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd56ca806640c3d9d288d55f6cd4b3a7e36aa680"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyODgwOA==", "bodyText": "Can we add to the description of these to say that the value is in milliseconds?", "url": "https://github.com/apache/nifi/pull/4450#discussion_r465728808", "createdAt": "2020-08-05T13:32:30Z", "author": {"login": "bbende"}, "path": "nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/CommandOption.java", "diffHunk": "@@ -24,6 +24,8 @@\n public enum CommandOption {\n \n     // General\n+    CONNECTION_TIMEOUT(\"cto\", \"connectionTimeout\", \"Timeout parameter for creating a connection to NiFi/Registry\", true),\n+    READ_TIMEOUT(\"rto\", \"readTimeout\", \"Timeout parameter for reading from NiFi/Registry\", true),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd56ca806640c3d9d288d55f6cd4b3a7e36aa680"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MDUxMA==", "bodyText": "If we want the result to be void, then we should wrap the println with if (shouldPrint(properties)) { ... }, this would make it only print when in interactive mode of the CLI, but not during non-interactive mode.\nIf you want the command to always return the policy id, then instead of println with Void, you would instead return a StringResult like:\nreturn new StringResult(identifier, getContext().isInteractive());\nUsually a create command returns the id as a string result and an update returns void, so since this command is a combo of either create or update, you could return different results depending whether you called create or update.", "url": "https://github.com/apache/nifi/pull/4450#discussion_r465750510", "createdAt": "2020-08-05T14:04:01Z", "author": {"login": "bbende"}, "path": "nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/registry/bucket/UpdateBucketPolicy.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.toolkit.cli.impl.command.registry.bucket;\n+\n+import org.apache.commons.cli.ParseException;\n+import org.apache.nifi.registry.authorization.AccessPolicy;\n+import org.apache.nifi.registry.authorization.Tenant;\n+import org.apache.nifi.registry.bucket.Bucket;\n+import org.apache.nifi.registry.client.NiFiRegistryClient;\n+import org.apache.nifi.registry.client.NiFiRegistryException;\n+import org.apache.nifi.toolkit.cli.api.Context;\n+import org.apache.nifi.toolkit.cli.impl.client.ExtendedNiFiRegistryClient;\n+import org.apache.nifi.toolkit.cli.impl.client.registry.PoliciesClient;\n+import org.apache.nifi.toolkit.cli.impl.command.CommandOption;\n+import org.apache.nifi.toolkit.cli.impl.command.registry.AbstractNiFiRegistryCommand;\n+import org.apache.nifi.toolkit.cli.impl.command.registry.tenant.TenantHelper;\n+import org.apache.nifi.toolkit.cli.impl.result.VoidResult;\n+import org.apache.nifi.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+public class UpdateBucketPolicy extends AbstractNiFiRegistryCommand<VoidResult> {\n+\n+\n+    public UpdateBucketPolicy() {\n+        super(\"update-bucket-policy\", VoidResult.class);\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Updates access policy of bucket\";\n+    }\n+\n+    @Override\n+    public void doInitialize(final Context context) {\n+        addOption(CommandOption.BUCKET_NAME.createOption());\n+        addOption(CommandOption.BUCKET_ID.createOption());\n+        addOption(CommandOption.USER_NAME_LIST.createOption());\n+        addOption(CommandOption.USER_ID_LIST.createOption());\n+        addOption(CommandOption.GROUP_NAME_LIST.createOption());\n+        addOption(CommandOption.GROUP_ID_LIST.createOption());\n+        addOption(CommandOption.POLICY_ACTION.createOption());\n+    }\n+\n+\n+    @Override\n+    public VoidResult doExecute(NiFiRegistryClient client, Properties properties) throws IOException, NiFiRegistryException, ParseException {\n+        if (!(client instanceof ExtendedNiFiRegistryClient)) {\n+            throw new IllegalArgumentException(\"This command needs extended registry client!\");\n+        }\n+        final ExtendedNiFiRegistryClient extendedClient = (ExtendedNiFiRegistryClient) client;\n+        final PoliciesClient policiesClient = extendedClient.getPoliciesClient();\n+\n+        final String bucketName = getArg(properties, CommandOption.BUCKET_NAME);\n+        String bucketId = getArg(properties, CommandOption.BUCKET_ID);\n+\n+        final String userNames = getArg(properties, CommandOption.USER_NAME_LIST);\n+        final String userIds = getArg(properties, CommandOption.USER_ID_LIST);\n+        final String groupNames = getArg(properties, CommandOption.GROUP_NAME_LIST);\n+        final String groupIds = getArg(properties, CommandOption.GROUP_ID_LIST);\n+\n+        final String policyAction = getRequiredArg(properties, CommandOption.POLICY_ACTION);\n+        final HashSet<String> permittedActions = new HashSet<>(Arrays.asList(\"read\", \"write\", \"delete\"));\n+        if (!permittedActions.contains(policyAction)) {\n+            throw new IllegalArgumentException(\"Only read, write, delete actions permitted\");\n+        }\n+        if (StringUtils.isBlank(bucketName) == StringUtils.isBlank(bucketId)) {\n+            throw new IllegalArgumentException(\"Specify either bucket name or bucket id\");\n+        }\n+        if (StringUtils.isBlank(bucketId)) {\n+            final Optional<Bucket> optionalBucket = client.getBucketClient().getAll()\n+                    .stream().filter(b -> bucketName.equals(b.getName())).findAny();\n+            if (!optionalBucket.isPresent()) {\n+                throw new IllegalArgumentException(\"Specified bucket does not exist\");\n+            }\n+            bucketId = optionalBucket.get().getIdentifier();\n+        } else {\n+            try {\n+                extendedClient.getBucketClient().get(bucketId);\n+            } catch (NiFiRegistryException e) {\n+                throw new IllegalArgumentException(\"Specified bucket does not exist\");\n+            }\n+        }\n+        AccessPolicy accessPolicy;\n+        String resource = \"/buckets/\" + bucketId;\n+        try {\n+            accessPolicy = policiesClient.getAccessPolicy(policyAction, resource);\n+        } catch (NiFiRegistryException e) {\n+            accessPolicy = new AccessPolicy();\n+            accessPolicy.setResource(resource);\n+            accessPolicy.setAction(policyAction);\n+        }\n+        if (!StringUtils.isBlank(userNames) || !StringUtils.isBlank(userIds)) {\n+            Set<Tenant> users = TenantHelper.selectExistingTenants(userNames,\n+                    userIds, extendedClient.getTenantsClient().getUsers());\n+            accessPolicy.setUsers(users);\n+        }\n+        if (!StringUtils.isBlank(groupNames) || !StringUtils.isBlank(groupIds)) {\n+            Set<Tenant> groups = TenantHelper.selectExistingTenants(groupNames,\n+                    groupIds, extendedClient.getTenantsClient().getUserGroups());\n+            accessPolicy.setUserGroups(groups);\n+        }\n+        AccessPolicy updatedPolicy = StringUtils.isBlank(accessPolicy.getIdentifier())\n+                ? policiesClient.createAccessPolicy(accessPolicy)\n+                : policiesClient.updateAccessPolicy(accessPolicy);\n+        println(updatedPolicy.getIdentifier());\n+        return VoidResult.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd56ca806640c3d9d288d55f6cd4b3a7e36aa680"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1NTIyMw==", "bodyText": "We may want to document that when updating the users it will overwrite any existing users, so if your goal is to add one user to an existing set of users, you need to send in all of them.\nWe have a little bit of an inconsistency between the NiFi command for UpdatePolicy and NiFi Registry command for CreateOrUpdateAccessPolicy.\nThe NiFi command has an argument for \"overwrite\" which determines whether the set of users/groups is overwritten or added to, where as the NiFi Registry command works the same as your command where it is always an overwrite.", "url": "https://github.com/apache/nifi/pull/4450#discussion_r465755223", "createdAt": "2020-08-05T14:10:35Z", "author": {"login": "bbende"}, "path": "nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/registry/bucket/UpdateBucketPolicy.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.toolkit.cli.impl.command.registry.bucket;\n+\n+import org.apache.commons.cli.ParseException;\n+import org.apache.nifi.registry.authorization.AccessPolicy;\n+import org.apache.nifi.registry.authorization.Tenant;\n+import org.apache.nifi.registry.bucket.Bucket;\n+import org.apache.nifi.registry.client.NiFiRegistryClient;\n+import org.apache.nifi.registry.client.NiFiRegistryException;\n+import org.apache.nifi.toolkit.cli.api.Context;\n+import org.apache.nifi.toolkit.cli.impl.client.ExtendedNiFiRegistryClient;\n+import org.apache.nifi.toolkit.cli.impl.client.registry.PoliciesClient;\n+import org.apache.nifi.toolkit.cli.impl.command.CommandOption;\n+import org.apache.nifi.toolkit.cli.impl.command.registry.AbstractNiFiRegistryCommand;\n+import org.apache.nifi.toolkit.cli.impl.command.registry.tenant.TenantHelper;\n+import org.apache.nifi.toolkit.cli.impl.result.VoidResult;\n+import org.apache.nifi.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+public class UpdateBucketPolicy extends AbstractNiFiRegistryCommand<VoidResult> {\n+\n+\n+    public UpdateBucketPolicy() {\n+        super(\"update-bucket-policy\", VoidResult.class);\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Updates access policy of bucket\";\n+    }\n+\n+    @Override\n+    public void doInitialize(final Context context) {\n+        addOption(CommandOption.BUCKET_NAME.createOption());\n+        addOption(CommandOption.BUCKET_ID.createOption());\n+        addOption(CommandOption.USER_NAME_LIST.createOption());\n+        addOption(CommandOption.USER_ID_LIST.createOption());\n+        addOption(CommandOption.GROUP_NAME_LIST.createOption());\n+        addOption(CommandOption.GROUP_ID_LIST.createOption());\n+        addOption(CommandOption.POLICY_ACTION.createOption());\n+    }\n+\n+\n+    @Override\n+    public VoidResult doExecute(NiFiRegistryClient client, Properties properties) throws IOException, NiFiRegistryException, ParseException {\n+        if (!(client instanceof ExtendedNiFiRegistryClient)) {\n+            throw new IllegalArgumentException(\"This command needs extended registry client!\");\n+        }\n+        final ExtendedNiFiRegistryClient extendedClient = (ExtendedNiFiRegistryClient) client;\n+        final PoliciesClient policiesClient = extendedClient.getPoliciesClient();\n+\n+        final String bucketName = getArg(properties, CommandOption.BUCKET_NAME);\n+        String bucketId = getArg(properties, CommandOption.BUCKET_ID);\n+\n+        final String userNames = getArg(properties, CommandOption.USER_NAME_LIST);\n+        final String userIds = getArg(properties, CommandOption.USER_ID_LIST);\n+        final String groupNames = getArg(properties, CommandOption.GROUP_NAME_LIST);\n+        final String groupIds = getArg(properties, CommandOption.GROUP_ID_LIST);\n+\n+        final String policyAction = getRequiredArg(properties, CommandOption.POLICY_ACTION);\n+        final HashSet<String> permittedActions = new HashSet<>(Arrays.asList(\"read\", \"write\", \"delete\"));\n+        if (!permittedActions.contains(policyAction)) {\n+            throw new IllegalArgumentException(\"Only read, write, delete actions permitted\");\n+        }\n+        if (StringUtils.isBlank(bucketName) == StringUtils.isBlank(bucketId)) {\n+            throw new IllegalArgumentException(\"Specify either bucket name or bucket id\");\n+        }\n+        if (StringUtils.isBlank(bucketId)) {\n+            final Optional<Bucket> optionalBucket = client.getBucketClient().getAll()\n+                    .stream().filter(b -> bucketName.equals(b.getName())).findAny();\n+            if (!optionalBucket.isPresent()) {\n+                throw new IllegalArgumentException(\"Specified bucket does not exist\");\n+            }\n+            bucketId = optionalBucket.get().getIdentifier();\n+        } else {\n+            try {\n+                extendedClient.getBucketClient().get(bucketId);\n+            } catch (NiFiRegistryException e) {\n+                throw new IllegalArgumentException(\"Specified bucket does not exist\");\n+            }\n+        }\n+        AccessPolicy accessPolicy;\n+        String resource = \"/buckets/\" + bucketId;\n+        try {\n+            accessPolicy = policiesClient.getAccessPolicy(policyAction, resource);\n+        } catch (NiFiRegistryException e) {\n+            accessPolicy = new AccessPolicy();\n+            accessPolicy.setResource(resource);\n+            accessPolicy.setAction(policyAction);\n+        }\n+        if (!StringUtils.isBlank(userNames) || !StringUtils.isBlank(userIds)) {\n+            Set<Tenant> users = TenantHelper.selectExistingTenants(userNames,\n+                    userIds, extendedClient.getTenantsClient().getUsers());\n+            accessPolicy.setUsers(users);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd56ca806640c3d9d288d55f6cd4b3a7e36aa680"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9f10d92cec76ac8c84384db983c9f7a4fc6a82b", "author": {"user": null}, "url": "https://github.com/apache/nifi/commit/e9f10d92cec76ac8c84384db983c9f7a4fc6a82b", "committedDate": "2020-08-06T12:24:54Z", "message": "Fix return type of UpdateBucketPolicy and add missing registry commands to the documentation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1730, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}