{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MjY1ODc0", "number": 4348, "title": "NIFI-7523: Use SSL Context Service for Atlas HTTPS connection in Atla\u2026", "bodyText": "\u2026s reporting task\nAlso fixing ControllerServiceDisabledException-s when validating the Kerberos config\nhttps://issues.apache.org/jira/browse/NIFI-7523\nThank you for submitting a contribution to Apache NiFi.\nPlease provide a short description of the PR here:\nDescription of PR\nEnables X functionality; fixes bug NIFI-YYYY.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced\nin the commit message?\n\n\n Does your PR title start with NIFI-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen \"-\" character.\n\n\n Has your PR been rebased against the latest commit within the target branch (typically master)?\n\n\n Is your initial contribution a single, squashed commit? Additional commits in response to PR reviewer feedback should be made on this branch and pushed to allow change tracking. Do not squash or use --force when pushing to allow for clean monitoring of changes.\n\n\nFor code changes:\n\n Have you ensured that the full suite of tests is executed via mvn -Pcontrib-check clean install at the root nifi folder?\n Have you written or updated unit tests to verify your changes?\n Have you verified that the full build is successful on JDK 8?\n Have you verified that the full build is successful on JDK 11?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE file, including the main LICENSE file under nifi-assembly?\n If applicable, have you updated the NOTICE file, including the main NOTICE file found under nifi-assembly?\n If adding new Properties, have you added .displayName in addition to .name (programmatic access) for each of the new properties?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n\nNote:\nPlease ensure that once the PR is submitted, you check GitHub Actions CI for build issues and submit an update to your PR as soon as possible.", "createdAt": "2020-06-18T06:50:44Z", "url": "https://github.com/apache/nifi/pull/4348", "merged": true, "mergeCommit": {"oid": "327d73f5cdde18278b2db7f9fec7d90938d3451c"}, "closed": true, "closedAt": "2020-06-23T18:22:51Z", "author": {"login": "turcsanyip"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsYujNgH2gAyNDM2MjY1ODc0OmU2MDY2OGU5YmRmMTZmZDc5MDkwZTEwMjY3N2YxMWM5Nzg0YWE3ZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuJqxqAFqTQzNjA0MzI5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e60668e9bdf16fd79090e102677f11c9784aa7d5", "author": {"user": {"login": "turcsanyip", "name": "Peter Turcsanyi"}}, "url": "https://github.com/apache/nifi/commit/e60668e9bdf16fd79090e102677f11c9784aa7d5", "committedDate": "2020-06-18T06:47:19Z", "message": "NIFI-7523: Use SSL Context Service for Atlas HTTPS connection in Atlas reporting task\n\nAlso fixing ControllerServiceDisabledException-s when validating the Kerberos config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edd8871bcf1446f589b0b542459942199dea2b63", "author": {"user": {"login": "turcsanyip", "name": "Peter Turcsanyi"}}, "url": "https://github.com/apache/nifi/commit/edd8871bcf1446f589b0b542459942199dea2b63", "committedDate": "2020-06-19T19:36:15Z", "message": "NIFI-7523: Fixed test failure on Windows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f493894db4deaab2e47889f534a49341c0f40d47", "author": {"user": {"login": "turcsanyip", "name": "Peter Turcsanyi"}}, "url": "https://github.com/apache/nifi/commit/f493894db4deaab2e47889f534a49341c0f40d47", "committedDate": "2020-06-20T15:20:15Z", "message": "NIFI-7523: Fixed another test failure on Windows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a", "author": {"user": {"login": "turcsanyip", "name": "Peter Turcsanyi"}}, "url": "https://github.com/apache/nifi/commit/9c9a61190d43ea616f3b49219b5ec6dfa28dc10a", "committedDate": "2020-06-20T15:20:15Z", "message": "NIFI-7523: Added license headers."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDI4ODk4", "url": "https://github.com/apache/nifi/pull/4348#pullrequestreview-435028898", "createdAt": "2020-06-22T15:19:31Z", "commit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToxOTozMVrOGnFedg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToxOTozMVrOGnFedg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzNzM2Ng==", "bodyText": "Could we use the Atlas constants instead?", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443637366", "createdAt": "2020-06-22T15:19:31Z", "author": {"login": "tpalfy"}, "path": "nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/reporting/ReportLineageToAtlas.java", "diffHunk": "@@ -322,9 +328,19 @@\n     private static final String ATLAS_PROPERTY_CLUSTER_NAME = \"atlas.cluster.name\";\n     private static final String ATLAS_PROPERTY_REST_ADDRESS = \"atlas.rest.address\";\n     private static final String ATLAS_PROPERTY_ENABLE_TLS = \"atlas.enableTLS\";\n+    private static final String ATLAS_PROPERTY_TRUSTSTORE_FILE = \"truststore.file\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTc5NzY5", "url": "https://github.com/apache/nifi/pull/4348#pullrequestreview-434979769", "createdAt": "2020-06-22T14:29:41Z", "commit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyOTo0MVrOGnDPIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDoyOTo0MVrOGnDPIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMDY3NQ==", "bodyText": "Is it possible it would still would work by falling back to the system truststore, or is it required to provide the truststore from the SSLContext?", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443600675", "createdAt": "2020-06-22T14:29:41Z", "author": {"login": "bbende"}, "path": "nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/reporting/ReportLineageToAtlas.java", "diffHunk": "@@ -385,31 +401,50 @@ protected PropertyDescriptor getSupportedDynamicPropertyDescriptor(String proper\n     protected Collection<ValidationResult> customValidate(ValidationContext context) {\n         final Collection<ValidationResult> results = new ArrayList<>();\n \n-        final boolean isSSLContextServiceSet = context.getProperty(KAFKA_SSL_CONTEXT_SERVICE).isSet();\n+        final SSLContextService sslContextService = context.getProperty(SSL_CONTEXT_SERVICE).asControllerService(SSLContextService.class);\n         final ValidationResult.Builder invalidSSLService = new ValidationResult.Builder()\n-                .subject(KAFKA_SSL_CONTEXT_SERVICE.getDisplayName()).valid(false);\n+                .subject(SSL_CONTEXT_SERVICE.getDisplayName()).valid(false);\n \n+        AtomicBoolean isAtlasApiSecure = new AtomicBoolean(false);\n         String atlasUrls = context.getProperty(ATLAS_URLS).evaluateAttributeExpressions().getValue();\n         if (!StringUtils.isEmpty(atlasUrls)) {\n             Arrays.stream(atlasUrls.split(ATLAS_URL_DELIMITER))\n                 .map(String::trim)\n                 .forEach(input -> {\n-                    final ValidationResult.Builder builder = new ValidationResult.Builder().subject(ATLAS_URLS.getDisplayName()).input(input);\n                     try {\n-                        new URL(input);\n-                        results.add(builder.explanation(\"Valid URI\").valid(true).build());\n+                        final URL url = new URL(input);\n+                        if (\"https\".equalsIgnoreCase(url.getProtocol())) {\n+                            isAtlasApiSecure.set(true);\n+                        }\n                     } catch (Exception e) {\n-                        results.add(builder.explanation(\"Contains invalid URI: \" + e).valid(false).build());\n+                        results.add(new ValidationResult.Builder().subject(ATLAS_URLS.getDisplayName()).input(input)\n+                                .explanation(\"contains invalid URI: \" + e).valid(false).build());\n                     }\n                 });\n         }\n \n+        if (isAtlasApiSecure.get()) {\n+            if (sslContextService == null) {\n+                results.add(invalidSSLService.explanation(\"required for connecting to Atlas via HTTPS.\").build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTM3MjI4", "url": "https://github.com/apache/nifi/pull/4348#pullrequestreview-435137228", "createdAt": "2020-06-22T17:34:23Z", "commit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzozNDoyNFrOGnKgtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0MjoxNlrOGnKxJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxOTg2Mw==", "bodyText": "Could use the Hadoop constants.", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443719863", "createdAt": "2020-06-22T17:34:24Z", "author": {"login": "tpalfy"}, "path": "nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/credstore/HadoopCredentialStore.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.security.credstore;\n+\n+import org.apache.nifi.processor.exception.ProcessException;\n+\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.KeyStore;\n+import java.util.Map;\n+\n+public class HadoopCredentialStore {\n+\n+    private static final String CRED_STORE_PASSWORD_ENVVAR = \"HADOOP_CREDSTORE_PASSWORD\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNDA3MQ==", "bodyText": "We could initialize a collection in @OnScheduled instread.", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443724071", "createdAt": "2020-06-22T17:42:16Z", "author": {"login": "tpalfy"}, "path": "nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/reporting/ReportLineageToAtlas.java", "diffHunk": "@@ -385,31 +401,50 @@ protected PropertyDescriptor getSupportedDynamicPropertyDescriptor(String proper\n     protected Collection<ValidationResult> customValidate(ValidationContext context) {\n         final Collection<ValidationResult> results = new ArrayList<>();\n \n-        final boolean isSSLContextServiceSet = context.getProperty(KAFKA_SSL_CONTEXT_SERVICE).isSet();\n+        final SSLContextService sslContextService = context.getProperty(SSL_CONTEXT_SERVICE).asControllerService(SSLContextService.class);\n         final ValidationResult.Builder invalidSSLService = new ValidationResult.Builder()\n-                .subject(KAFKA_SSL_CONTEXT_SERVICE.getDisplayName()).valid(false);\n+                .subject(SSL_CONTEXT_SERVICE.getDisplayName()).valid(false);\n \n+        AtomicBoolean isAtlasApiSecure = new AtomicBoolean(false);\n         String atlasUrls = context.getProperty(ATLAS_URLS).evaluateAttributeExpressions().getValue();\n         if (!StringUtils.isEmpty(atlasUrls)) {\n             Arrays.stream(atlasUrls.split(ATLAS_URL_DELIMITER))\n                 .map(String::trim)\n                 .forEach(input -> {\n-                    final ValidationResult.Builder builder = new ValidationResult.Builder().subject(ATLAS_URLS.getDisplayName()).input(input);\n                     try {\n-                        new URL(input);\n-                        results.add(builder.explanation(\"Valid URI\").valid(true).build());\n+                        final URL url = new URL(input);\n+                        if (\"https\".equalsIgnoreCase(url.getProtocol())) {\n+                            isAtlasApiSecure.set(true);\n+                        }\n                     } catch (Exception e) {\n-                        results.add(builder.explanation(\"Contains invalid URI: \" + e).valid(false).build());\n+                        results.add(new ValidationResult.Builder().subject(ATLAS_URLS.getDisplayName()).input(input)\n+                                .explanation(\"contains invalid URI: \" + e).valid(false).build());\n                     }\n                 });\n         }\n \n+        if (isAtlasApiSecure.get()) {\n+            if (sslContextService == null) {\n+                results.add(invalidSSLService.explanation(\"required for connecting to Atlas via HTTPS.\").build());\n+            } else if (context.getControllerServiceLookup().isControllerServiceEnabled(sslContextService)) {\n+                if (!sslContextService.isTrustStoreConfigured()) {\n+                    results.add(invalidSSLService.explanation(\"no truststore configured which is required for connecting to Atlas via HTTPS.\").build());\n+                } else if (!KEYSTORE_TYPE_JKS.equalsIgnoreCase(sslContextService.getTrustStoreType())) {\n+                    results.add(invalidSSLService.explanation(\"truststore type is not JKS. Atlas client supports JKS truststores only.\").build());\n+                }\n+            }\n+        }\n+\n         final String atlasAuthNMethod = context.getProperty(ATLAS_AUTHN_METHOD).getValue();\n         final AtlasAuthN atlasAuthN = getAtlasAuthN(atlasAuthNMethod);\n         results.addAll(atlasAuthN.validate(context));\n \n-\n-        namespaceResolverLoader.forEach(resolver -> results.addAll(resolver.validate(context)));\n+        synchronized (namespaceResolverLoader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDc4Njgw", "url": "https://github.com/apache/nifi/pull/4348#pullrequestreview-435078680", "createdAt": "2020-06-22T16:16:09Z", "commit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxNjoxMFrOGnHyZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoyMDoyM1rOGnH84Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NTIzOA==", "bodyText": "This looks very similar to the added validation in ReportLineageToAtlas. Would it make sense to extract?", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443675238", "createdAt": "2020-06-22T16:16:10Z", "author": {"login": "simonbence"}, "path": "nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/security/Kerberos.java", "diffHunk": "@@ -49,22 +49,24 @@\n \n         final KerberosCredentialsService credentialsService = context.getProperty(ReportLineageToAtlas.KERBEROS_CREDENTIALS_SERVICE).asControllerService(KerberosCredentialsService.class);\n \n-        final String resolvedPrincipal;\n-        final String resolvedKeytab;\n-        if (credentialsService == null) {\n-            resolvedPrincipal = explicitPrincipal;\n-            resolvedKeytab = explicitKeytab;\n-        } else {\n-            resolvedPrincipal = credentialsService.getPrincipal();\n-            resolvedKeytab = credentialsService.getKeytab();\n-        }\n-\n-        if (resolvedPrincipal == null || resolvedKeytab == null) {\n-            problems.add(new ValidationResult.Builder()\n-                .subject(\"Kerberos Credentials\")\n-                .valid(false)\n-                .explanation(\"Both the Principal and the Keytab must be specified when using Kerberos authentication, either via the explicit properties or the Kerberos Credentials Service.\")\n-                .build());\n+        if (credentialsService == null || context.getControllerServiceLookup().isControllerServiceEnabled(credentialsService)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NzkyMQ==", "bodyText": "Is not that necessary to use allMatch? (I am not 100% sure though)", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443677921", "createdAt": "2020-06-22T16:20:23Z", "author": {"login": "simonbence"}, "path": "nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/reporting/ReportLineageToAtlas.java", "diffHunk": "@@ -632,10 +667,37 @@ private void setValue(Consumer<String> setter, Runnable emptyHandler, PropertyVa\n         }\n     }\n \n-    private void checkAtlasUrls(List<String> urlStrings, ConfigurationContext context) {\n-        if (urlStrings.isEmpty()) {\n-            throw new ProcessException(\"No Atlas URL has been specified! Set either the '\" + ATLAS_URLS.getDisplayName() + \"' \" +\n-                \"property on the processor or the 'atlas.rest.address' porperty in the atlas configuration file.\");\n+    private void setAtlasSSLConfig(Properties atlasProperties, ConfigurationContext context, List<String> urls, File confDir) throws IOException {\n+        boolean isAtlasApiSecure = urls.stream().anyMatch(url -> url.toLowerCase().startsWith(\"https\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a"}, "originalPosition": 245}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NzgwMzY4", "url": "https://github.com/apache/nifi/pull/4348#pullrequestreview-435780368", "createdAt": "2020-06-23T13:27:36Z", "commit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzoyNzozNlrOGnpMmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzoyNzozNlrOGnpMmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyMjYxOA==", "bodyText": "Taking a closer look, I think we would be better off using the hadoop library for this.\nThis module already depends on hadoop-commons and the API between NiFi and Atlas solidifies this dependency - although not explicitly through code, but through the constraints of how to create the keystore.\nI don't think it's worth having our own version but @bbende, I'd give you the final word on this one.", "url": "https://github.com/apache/nifi/pull/4348#discussion_r444222618", "createdAt": "2020-06-23T13:27:36Z", "author": {"login": "tpalfy"}, "path": "nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/credstore/HadoopCredentialStore.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.security.credstore;\n+\n+import org.apache.nifi.processor.exception.ProcessException;\n+\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.KeyStore;\n+import java.util.Map;\n+\n+public class HadoopCredentialStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc0c937e567835339b7048382bda74aeea79492e", "author": {"user": {"login": "turcsanyip", "name": "Peter Turcsanyi"}}, "url": "https://github.com/apache/nifi/commit/dc0c937e567835339b7048382bda74aeea79492e", "committedDate": "2020-06-23T15:54:52Z", "message": "NIFI-7523: Review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDI3NjI0", "url": "https://github.com/apache/nifi/pull/4348#pullrequestreview-436027624", "createdAt": "2020-06-23T18:00:32Z", "commit": {"oid": "dc0c937e567835339b7048382bda74aeea79492e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDQzMjk5", "url": "https://github.com/apache/nifi/pull/4348#pullrequestreview-436043299", "createdAt": "2020-06-23T18:22:28Z", "commit": {"oid": "dc0c937e567835339b7048382bda74aeea79492e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1751, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}