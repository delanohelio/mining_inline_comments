{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTEwNTkx", "number": 4450, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoyOTo1MlrOEVafmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoxMDozNVrOEVbjVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODg5NjI3OnYy", "diffSide": "RIGHT", "path": "nifi-docs/src/main/asciidoc/toolkit-guide.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoyOTo1MlrOG8JuoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoyOTo1MlrOG8JuoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNzEzNg==", "bodyText": "SInce we are updating this, there are other registry commands that got added for users/groups/policies that never made it into this list. Can we add those?", "url": "https://github.com/apache/nifi/pull/4450#discussion_r465727136", "createdAt": "2020-08-05T13:29:52Z", "author": {"login": "bbende"}, "path": "nifi-docs/src/main/asciidoc/toolkit-guide.adoc", "diffHunk": "@@ -94,10 +94,42 @@ The following are available commands:\n  nifi pg-get-services\n  nifi pg-enable-services\n  nifi pg-disable-services\n+ nifi pg-create-service\n+ nifi create-user\n+ nifi list-users\n+ nifi create-user-group\n+ nifi list-user-groups\n+ nifi update-user-group\n+ nifi get-policy\n+ nifi update-policy\n+ nifi create-service\n+ nifi get-services\n+ nifi get-service\n+ nifi disable-services\n+ nifi enable-services\n+ nifi get-reporting-task\n+ nifi get-reporting-tasks\n+ nifi create-reporting-task\n+ nifi set-param\n+ nifi delete-param\n+ nifi list-param-contexts\n+ nifi get-param-context\n+ nifi create-param-context\n+ nifi delete-param-context\n+ nifi merge-param-context\n+ nifi import-param-context\n+ nifi pg-get-param-context\n+ nifi pg-set-param-context\n+ nifi list-templates\n+ nifi download-template\n+ nifi upload-template\n+ nifi start-reporting-tasks\n+ nifi stop-reporting-tasks\n  registry current-user\n  registry list-buckets\n  registry create-bucket\n  registry delete-bucket\n+ registry update-bucket-policy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd56ca806640c3d9d288d55f6cd4b3a7e36aa680"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkwNjY4OnYy", "diffSide": "RIGHT", "path": "nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/CommandOption.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozMjozMFrOG8J1KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozMjozMFrOG8J1KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyODgwOA==", "bodyText": "Can we add to the description of these to say that the value is in milliseconds?", "url": "https://github.com/apache/nifi/pull/4450#discussion_r465728808", "createdAt": "2020-08-05T13:32:30Z", "author": {"login": "bbende"}, "path": "nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/CommandOption.java", "diffHunk": "@@ -24,6 +24,8 @@\n public enum CommandOption {\n \n     // General\n+    CONNECTION_TIMEOUT(\"cto\", \"connectionTimeout\", \"Timeout parameter for creating a connection to NiFi/Registry\", true),\n+    READ_TIMEOUT(\"rto\", \"readTimeout\", \"Timeout parameter for reading from NiFi/Registry\", true),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd56ca806640c3d9d288d55f6cd4b3a7e36aa680"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTA0MDA1OnYy", "diffSide": "RIGHT", "path": "nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/registry/bucket/UpdateBucketPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDowNDowMVrOG8LJ7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDowNDowMVrOG8LJ7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MDUxMA==", "bodyText": "If we want the result to be void, then we should wrap the println with if (shouldPrint(properties)) { ... }, this would make it only print when in interactive mode of the CLI, but not during non-interactive mode.\nIf you want the command to always return the policy id, then instead of println with Void, you would instead return a StringResult like:\nreturn new StringResult(identifier, getContext().isInteractive());\nUsually a create command returns the id as a string result and an update returns void, so since this command is a combo of either create or update, you could return different results depending whether you called create or update.", "url": "https://github.com/apache/nifi/pull/4450#discussion_r465750510", "createdAt": "2020-08-05T14:04:01Z", "author": {"login": "bbende"}, "path": "nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/registry/bucket/UpdateBucketPolicy.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.toolkit.cli.impl.command.registry.bucket;\n+\n+import org.apache.commons.cli.ParseException;\n+import org.apache.nifi.registry.authorization.AccessPolicy;\n+import org.apache.nifi.registry.authorization.Tenant;\n+import org.apache.nifi.registry.bucket.Bucket;\n+import org.apache.nifi.registry.client.NiFiRegistryClient;\n+import org.apache.nifi.registry.client.NiFiRegistryException;\n+import org.apache.nifi.toolkit.cli.api.Context;\n+import org.apache.nifi.toolkit.cli.impl.client.ExtendedNiFiRegistryClient;\n+import org.apache.nifi.toolkit.cli.impl.client.registry.PoliciesClient;\n+import org.apache.nifi.toolkit.cli.impl.command.CommandOption;\n+import org.apache.nifi.toolkit.cli.impl.command.registry.AbstractNiFiRegistryCommand;\n+import org.apache.nifi.toolkit.cli.impl.command.registry.tenant.TenantHelper;\n+import org.apache.nifi.toolkit.cli.impl.result.VoidResult;\n+import org.apache.nifi.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+public class UpdateBucketPolicy extends AbstractNiFiRegistryCommand<VoidResult> {\n+\n+\n+    public UpdateBucketPolicy() {\n+        super(\"update-bucket-policy\", VoidResult.class);\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Updates access policy of bucket\";\n+    }\n+\n+    @Override\n+    public void doInitialize(final Context context) {\n+        addOption(CommandOption.BUCKET_NAME.createOption());\n+        addOption(CommandOption.BUCKET_ID.createOption());\n+        addOption(CommandOption.USER_NAME_LIST.createOption());\n+        addOption(CommandOption.USER_ID_LIST.createOption());\n+        addOption(CommandOption.GROUP_NAME_LIST.createOption());\n+        addOption(CommandOption.GROUP_ID_LIST.createOption());\n+        addOption(CommandOption.POLICY_ACTION.createOption());\n+    }\n+\n+\n+    @Override\n+    public VoidResult doExecute(NiFiRegistryClient client, Properties properties) throws IOException, NiFiRegistryException, ParseException {\n+        if (!(client instanceof ExtendedNiFiRegistryClient)) {\n+            throw new IllegalArgumentException(\"This command needs extended registry client!\");\n+        }\n+        final ExtendedNiFiRegistryClient extendedClient = (ExtendedNiFiRegistryClient) client;\n+        final PoliciesClient policiesClient = extendedClient.getPoliciesClient();\n+\n+        final String bucketName = getArg(properties, CommandOption.BUCKET_NAME);\n+        String bucketId = getArg(properties, CommandOption.BUCKET_ID);\n+\n+        final String userNames = getArg(properties, CommandOption.USER_NAME_LIST);\n+        final String userIds = getArg(properties, CommandOption.USER_ID_LIST);\n+        final String groupNames = getArg(properties, CommandOption.GROUP_NAME_LIST);\n+        final String groupIds = getArg(properties, CommandOption.GROUP_ID_LIST);\n+\n+        final String policyAction = getRequiredArg(properties, CommandOption.POLICY_ACTION);\n+        final HashSet<String> permittedActions = new HashSet<>(Arrays.asList(\"read\", \"write\", \"delete\"));\n+        if (!permittedActions.contains(policyAction)) {\n+            throw new IllegalArgumentException(\"Only read, write, delete actions permitted\");\n+        }\n+        if (StringUtils.isBlank(bucketName) == StringUtils.isBlank(bucketId)) {\n+            throw new IllegalArgumentException(\"Specify either bucket name or bucket id\");\n+        }\n+        if (StringUtils.isBlank(bucketId)) {\n+            final Optional<Bucket> optionalBucket = client.getBucketClient().getAll()\n+                    .stream().filter(b -> bucketName.equals(b.getName())).findAny();\n+            if (!optionalBucket.isPresent()) {\n+                throw new IllegalArgumentException(\"Specified bucket does not exist\");\n+            }\n+            bucketId = optionalBucket.get().getIdentifier();\n+        } else {\n+            try {\n+                extendedClient.getBucketClient().get(bucketId);\n+            } catch (NiFiRegistryException e) {\n+                throw new IllegalArgumentException(\"Specified bucket does not exist\");\n+            }\n+        }\n+        AccessPolicy accessPolicy;\n+        String resource = \"/buckets/\" + bucketId;\n+        try {\n+            accessPolicy = policiesClient.getAccessPolicy(policyAction, resource);\n+        } catch (NiFiRegistryException e) {\n+            accessPolicy = new AccessPolicy();\n+            accessPolicy.setResource(resource);\n+            accessPolicy.setAction(policyAction);\n+        }\n+        if (!StringUtils.isBlank(userNames) || !StringUtils.isBlank(userIds)) {\n+            Set<Tenant> users = TenantHelper.selectExistingTenants(userNames,\n+                    userIds, extendedClient.getTenantsClient().getUsers());\n+            accessPolicy.setUsers(users);\n+        }\n+        if (!StringUtils.isBlank(groupNames) || !StringUtils.isBlank(groupIds)) {\n+            Set<Tenant> groups = TenantHelper.selectExistingTenants(groupNames,\n+                    groupIds, extendedClient.getTenantsClient().getUserGroups());\n+            accessPolicy.setUserGroups(groups);\n+        }\n+        AccessPolicy updatedPolicy = StringUtils.isBlank(accessPolicy.getIdentifier())\n+                ? policiesClient.createAccessPolicy(accessPolicy)\n+                : policiesClient.updateAccessPolicy(accessPolicy);\n+        println(updatedPolicy.getIdentifier());\n+        return VoidResult.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd56ca806640c3d9d288d55f6cd4b3a7e36aa680"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTA2OTY2OnYy", "diffSide": "RIGHT", "path": "nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/registry/bucket/UpdateBucketPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoxMDozNVrOG8LcVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoxMDozNVrOG8LcVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1NTIyMw==", "bodyText": "We may want to document that when updating the users it will overwrite any existing users, so if your goal is to add one user to an existing set of users, you need to send in all of them.\nWe have a little bit of an inconsistency between the NiFi command for UpdatePolicy and NiFi Registry command for CreateOrUpdateAccessPolicy.\nThe NiFi command has an argument for \"overwrite\" which determines whether the set of users/groups is overwritten or added to, where as the NiFi Registry command works the same as your command where it is always an overwrite.", "url": "https://github.com/apache/nifi/pull/4450#discussion_r465755223", "createdAt": "2020-08-05T14:10:35Z", "author": {"login": "bbende"}, "path": "nifi-toolkit/nifi-toolkit-cli/src/main/java/org/apache/nifi/toolkit/cli/impl/command/registry/bucket/UpdateBucketPolicy.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.toolkit.cli.impl.command.registry.bucket;\n+\n+import org.apache.commons.cli.ParseException;\n+import org.apache.nifi.registry.authorization.AccessPolicy;\n+import org.apache.nifi.registry.authorization.Tenant;\n+import org.apache.nifi.registry.bucket.Bucket;\n+import org.apache.nifi.registry.client.NiFiRegistryClient;\n+import org.apache.nifi.registry.client.NiFiRegistryException;\n+import org.apache.nifi.toolkit.cli.api.Context;\n+import org.apache.nifi.toolkit.cli.impl.client.ExtendedNiFiRegistryClient;\n+import org.apache.nifi.toolkit.cli.impl.client.registry.PoliciesClient;\n+import org.apache.nifi.toolkit.cli.impl.command.CommandOption;\n+import org.apache.nifi.toolkit.cli.impl.command.registry.AbstractNiFiRegistryCommand;\n+import org.apache.nifi.toolkit.cli.impl.command.registry.tenant.TenantHelper;\n+import org.apache.nifi.toolkit.cli.impl.result.VoidResult;\n+import org.apache.nifi.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+public class UpdateBucketPolicy extends AbstractNiFiRegistryCommand<VoidResult> {\n+\n+\n+    public UpdateBucketPolicy() {\n+        super(\"update-bucket-policy\", VoidResult.class);\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Updates access policy of bucket\";\n+    }\n+\n+    @Override\n+    public void doInitialize(final Context context) {\n+        addOption(CommandOption.BUCKET_NAME.createOption());\n+        addOption(CommandOption.BUCKET_ID.createOption());\n+        addOption(CommandOption.USER_NAME_LIST.createOption());\n+        addOption(CommandOption.USER_ID_LIST.createOption());\n+        addOption(CommandOption.GROUP_NAME_LIST.createOption());\n+        addOption(CommandOption.GROUP_ID_LIST.createOption());\n+        addOption(CommandOption.POLICY_ACTION.createOption());\n+    }\n+\n+\n+    @Override\n+    public VoidResult doExecute(NiFiRegistryClient client, Properties properties) throws IOException, NiFiRegistryException, ParseException {\n+        if (!(client instanceof ExtendedNiFiRegistryClient)) {\n+            throw new IllegalArgumentException(\"This command needs extended registry client!\");\n+        }\n+        final ExtendedNiFiRegistryClient extendedClient = (ExtendedNiFiRegistryClient) client;\n+        final PoliciesClient policiesClient = extendedClient.getPoliciesClient();\n+\n+        final String bucketName = getArg(properties, CommandOption.BUCKET_NAME);\n+        String bucketId = getArg(properties, CommandOption.BUCKET_ID);\n+\n+        final String userNames = getArg(properties, CommandOption.USER_NAME_LIST);\n+        final String userIds = getArg(properties, CommandOption.USER_ID_LIST);\n+        final String groupNames = getArg(properties, CommandOption.GROUP_NAME_LIST);\n+        final String groupIds = getArg(properties, CommandOption.GROUP_ID_LIST);\n+\n+        final String policyAction = getRequiredArg(properties, CommandOption.POLICY_ACTION);\n+        final HashSet<String> permittedActions = new HashSet<>(Arrays.asList(\"read\", \"write\", \"delete\"));\n+        if (!permittedActions.contains(policyAction)) {\n+            throw new IllegalArgumentException(\"Only read, write, delete actions permitted\");\n+        }\n+        if (StringUtils.isBlank(bucketName) == StringUtils.isBlank(bucketId)) {\n+            throw new IllegalArgumentException(\"Specify either bucket name or bucket id\");\n+        }\n+        if (StringUtils.isBlank(bucketId)) {\n+            final Optional<Bucket> optionalBucket = client.getBucketClient().getAll()\n+                    .stream().filter(b -> bucketName.equals(b.getName())).findAny();\n+            if (!optionalBucket.isPresent()) {\n+                throw new IllegalArgumentException(\"Specified bucket does not exist\");\n+            }\n+            bucketId = optionalBucket.get().getIdentifier();\n+        } else {\n+            try {\n+                extendedClient.getBucketClient().get(bucketId);\n+            } catch (NiFiRegistryException e) {\n+                throw new IllegalArgumentException(\"Specified bucket does not exist\");\n+            }\n+        }\n+        AccessPolicy accessPolicy;\n+        String resource = \"/buckets/\" + bucketId;\n+        try {\n+            accessPolicy = policiesClient.getAccessPolicy(policyAction, resource);\n+        } catch (NiFiRegistryException e) {\n+            accessPolicy = new AccessPolicy();\n+            accessPolicy.setResource(resource);\n+            accessPolicy.setAction(policyAction);\n+        }\n+        if (!StringUtils.isBlank(userNames) || !StringUtils.isBlank(userIds)) {\n+            Set<Tenant> users = TenantHelper.selectExistingTenants(userNames,\n+                    userIds, extendedClient.getTenantsClient().getUsers());\n+            accessPolicy.setUsers(users);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd56ca806640c3d9d288d55f6cd4b3a7e36aa680"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 163, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}