{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NzI2MTg1", "number": 4538, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTowOTozMlrOElzWhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTowOTozMlrOElzWhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDc0MTE4OnYy", "diffSide": "RIGHT", "path": "nifi-nar-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/main/java/org/apache/nifi/parquet/utils/ParquetUtils.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTowOTozMlrOHVeuhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoxNToyNFrOHVg2fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4NTU3NQ==", "bodyText": "The COMPRESSION_TYPE PropertyDescriptor has a list of allowable values and it also has a default value using the first value which is UNCOMPRESSED, anything with a default value should always return a value so that is why the code didn't check isSet() before.\nI'm not terribly offended adding this as an extra precaution, but I am concerned that something else broke that now makes the default value not return.", "url": "https://github.com/apache/nifi/pull/4538#discussion_r492285575", "createdAt": "2020-09-21T19:09:32Z", "author": {"login": "bbende"}, "path": "nifi-nar-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/main/java/org/apache/nifi/parquet/utils/ParquetUtils.java", "diffHunk": "@@ -168,9 +168,11 @@ public static ParquetConfig createParquetConfig(final PropertyContext context, f\n         final ParquetFileWriter.Mode mode = overwrite ? ParquetFileWriter.Mode.OVERWRITE : ParquetFileWriter.Mode.CREATE;\n         parquetConfig.setWriterMode(mode);\n \n-        final String compressionTypeValue = context.getProperty(ParquetUtils.COMPRESSION_TYPE).getValue();\n-        final CompressionCodecName codecName = CompressionCodecName.valueOf(compressionTypeValue);\n-        parquetConfig.setCompressionCodec(codecName);\n+        if(context.getProperty(ParquetUtils.COMPRESSION_TYPE).isSet()) {\n+            final String compressionTypeValue = context.getProperty(ParquetUtils.COMPRESSION_TYPE).getValue();\n+            final CompressionCodecName codecName = CompressionCodecName.valueOf(compressionTypeValue);\n+            parquetConfig.setCompressionCodec(codecName);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa62d03d9cbf6bc2b225ae9e85610bd8e85baece"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5MTg1MA==", "bodyText": "There is no COMPRESSION_TYPE PropertyDescriptor in the ParquetReader controller service which is causing the NPE initially discussed in #4537.", "url": "https://github.com/apache/nifi/pull/4538#discussion_r492291850", "createdAt": "2020-09-21T19:20:37Z", "author": {"login": "pvillard31"}, "path": "nifi-nar-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/main/java/org/apache/nifi/parquet/utils/ParquetUtils.java", "diffHunk": "@@ -168,9 +168,11 @@ public static ParquetConfig createParquetConfig(final PropertyContext context, f\n         final ParquetFileWriter.Mode mode = overwrite ? ParquetFileWriter.Mode.OVERWRITE : ParquetFileWriter.Mode.CREATE;\n         parquetConfig.setWriterMode(mode);\n \n-        final String compressionTypeValue = context.getProperty(ParquetUtils.COMPRESSION_TYPE).getValue();\n-        final CompressionCodecName codecName = CompressionCodecName.valueOf(compressionTypeValue);\n-        parquetConfig.setCompressionCodec(codecName);\n+        if(context.getProperty(ParquetUtils.COMPRESSION_TYPE).isSet()) {\n+            final String compressionTypeValue = context.getProperty(ParquetUtils.COMPRESSION_TYPE).getValue();\n+            final CompressionCodecName codecName = CompressionCodecName.valueOf(compressionTypeValue);\n+            parquetConfig.setCompressionCodec(codecName);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4NTU3NQ=="}, "originalCommit": {"oid": "fa62d03d9cbf6bc2b225ae9e85610bd8e85baece"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5NTA1Mw==", "bodyText": "That is correct, but we always called ParquetUtils createParquetConfig  from both the reader and writer before and it worked, so I'm confused why now we have to check isSet().\nThe JIRA mentioned https://issues.apache.org/jira/browse/NIFI-7635  so maybe that fix now makes it such that if you call context.getProperty(ParquetUtils.COMPRESSION_TYPE).getValue() and the component doesn't have that property then you no longer get the default value. Before you did get the default value.", "url": "https://github.com/apache/nifi/pull/4538#discussion_r492295053", "createdAt": "2020-09-21T19:26:29Z", "author": {"login": "bbende"}, "path": "nifi-nar-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/main/java/org/apache/nifi/parquet/utils/ParquetUtils.java", "diffHunk": "@@ -168,9 +168,11 @@ public static ParquetConfig createParquetConfig(final PropertyContext context, f\n         final ParquetFileWriter.Mode mode = overwrite ? ParquetFileWriter.Mode.OVERWRITE : ParquetFileWriter.Mode.CREATE;\n         parquetConfig.setWriterMode(mode);\n \n-        final String compressionTypeValue = context.getProperty(ParquetUtils.COMPRESSION_TYPE).getValue();\n-        final CompressionCodecName codecName = CompressionCodecName.valueOf(compressionTypeValue);\n-        parquetConfig.setCompressionCodec(codecName);\n+        if(context.getProperty(ParquetUtils.COMPRESSION_TYPE).isSet()) {\n+            final String compressionTypeValue = context.getProperty(ParquetUtils.COMPRESSION_TYPE).getValue();\n+            final CompressionCodecName codecName = CompressionCodecName.valueOf(compressionTypeValue);\n+            parquetConfig.setCompressionCodec(codecName);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4NTU3NQ=="}, "originalCommit": {"oid": "fa62d03d9cbf6bc2b225ae9e85610bd8e85baece"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5OTEwOQ==", "bodyText": "This is most likely because of this change: 4f11e36#diff-782335ecee68f6939c3724dba3983d3d\nThat's definitely a good question though: did this impact only this Parquet controller service or did it impact other components? custom code/NARs/etc?", "url": "https://github.com/apache/nifi/pull/4538#discussion_r492299109", "createdAt": "2020-09-21T19:34:26Z", "author": {"login": "pvillard31"}, "path": "nifi-nar-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/main/java/org/apache/nifi/parquet/utils/ParquetUtils.java", "diffHunk": "@@ -168,9 +168,11 @@ public static ParquetConfig createParquetConfig(final PropertyContext context, f\n         final ParquetFileWriter.Mode mode = overwrite ? ParquetFileWriter.Mode.OVERWRITE : ParquetFileWriter.Mode.CREATE;\n         parquetConfig.setWriterMode(mode);\n \n-        final String compressionTypeValue = context.getProperty(ParquetUtils.COMPRESSION_TYPE).getValue();\n-        final CompressionCodecName codecName = CompressionCodecName.valueOf(compressionTypeValue);\n-        parquetConfig.setCompressionCodec(codecName);\n+        if(context.getProperty(ParquetUtils.COMPRESSION_TYPE).isSet()) {\n+            final String compressionTypeValue = context.getProperty(ParquetUtils.COMPRESSION_TYPE).getValue();\n+            final CompressionCodecName codecName = CompressionCodecName.valueOf(compressionTypeValue);\n+            parquetConfig.setCompressionCodec(codecName);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4NTU3NQ=="}, "originalCommit": {"oid": "fa62d03d9cbf6bc2b225ae9e85610bd8e85baece"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMDM4MQ==", "bodyText": "PR #4537 aimed to allow previous functionality to work as it did in previous versions of NiFi. However, the resolution order changed to also address NIFI-7635. In that PR, the resolvedValue was determined in this order:\n\nconfiguredValue\ndefault value from the ComponentNode\ndefault value from the PropertyDescriptor\n\nWhereas in earlier versions of NiFi (pre 1.12.0), the resolution was done in this order:\n\nconfiguredValue\ndefault value from the PropertyDescriptor\ndefault value from the ComponentNode", "url": "https://github.com/apache/nifi/pull/4538#discussion_r492320381", "createdAt": "2020-09-21T20:15:24Z", "author": {"login": "frankgh"}, "path": "nifi-nar-bundles/nifi-parquet-bundle/nifi-parquet-processors/src/main/java/org/apache/nifi/parquet/utils/ParquetUtils.java", "diffHunk": "@@ -168,9 +168,11 @@ public static ParquetConfig createParquetConfig(final PropertyContext context, f\n         final ParquetFileWriter.Mode mode = overwrite ? ParquetFileWriter.Mode.OVERWRITE : ParquetFileWriter.Mode.CREATE;\n         parquetConfig.setWriterMode(mode);\n \n-        final String compressionTypeValue = context.getProperty(ParquetUtils.COMPRESSION_TYPE).getValue();\n-        final CompressionCodecName codecName = CompressionCodecName.valueOf(compressionTypeValue);\n-        parquetConfig.setCompressionCodec(codecName);\n+        if(context.getProperty(ParquetUtils.COMPRESSION_TYPE).isSet()) {\n+            final String compressionTypeValue = context.getProperty(ParquetUtils.COMPRESSION_TYPE).getValue();\n+            final CompressionCodecName codecName = CompressionCodecName.valueOf(compressionTypeValue);\n+            parquetConfig.setCompressionCodec(codecName);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4NTU3NQ=="}, "originalCommit": {"oid": "fa62d03d9cbf6bc2b225ae9e85610bd8e85baece"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 158, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}