{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MjIwMjM0", "number": 4509, "title": "NIFI-7592: Allow NiFi to be started without a GUI/REST interface", "bodyText": "Thank you for submitting a contribution to Apache NiFi.\nPlease provide a short description of the PR here:\nDescription of PR\nNew and improved version of a previous PR to move NARs and dependencies around such that NiFi could be started in a \"headless\" mode. Specifically it removes the requirement on JettyServer and instead moves that into nifi-server-nar and provides a reference implementation for a headless NiFi in nifi-headless-server-nar.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced\nin the commit message?\n\n\n Does your PR title start with NIFI-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen \"-\" character.\n\n\n Has your PR been rebased against the latest commit within the target branch (typically main)?\n\n\n Is your initial contribution a single, squashed commit? Additional commits in response to PR reviewer feedback should be made on this branch and pushed to allow change tracking. Do not squash or use --force when pushing to allow for clean monitoring of changes.\n\n\nFor code changes:\n\n Have you ensured that the full suite of tests is executed via mvn -Pcontrib-check clean install at the root nifi folder?\n Have you written or updated unit tests to verify your changes?\n Have you verified that the full build is successful on JDK 8?\n Have you verified that the full build is successful on JDK 11?\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n If applicable, have you updated the LICENSE file, including the main LICENSE file under nifi-assembly?\n If applicable, have you updated the NOTICE file, including the main NOTICE file found under nifi-assembly?\n If adding new Properties, have you added .displayName in addition to .name (programmatic access) for each of the new properties?\n\nFor documentation related changes:\n\n Have you ensured that format looks appropriate for the output in which it is rendered?\n\nNote:\nPlease ensure that once the PR is submitted, you check GitHub Actions CI for build issues and submit an update to your PR as soon as possible.", "createdAt": "2020-09-02T22:31:36Z", "url": "https://github.com/apache/nifi/pull/4509", "merged": true, "mergeCommit": {"oid": "325a49556c6cb2effbdb936889ebf45b212d2a46"}, "closed": true, "closedAt": "2020-10-07T13:12:16Z", "author": {"login": "mattyb149"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG77mqgBqjM3NDIyODIzMzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNvATNgH2gAyNDc4MjIwMjM0OmMzNmJhYzU1MWNhM2ZhYzZmNGEzYjk0YzY2NGViYzQzNTczY2U3N2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca1ee72fb5475ac21463610fc96413764f36c21b", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/ca1ee72fb5475ac21463610fc96413764f36c21b", "committedDate": "2020-09-02T22:30:51Z", "message": "NIFI-7592: Allow NiFi to be started without a GUI/REST interface"}, "afterCommit": {"oid": "0938936a7bad46ea292e59e6a4ee3b6ae3d329f1", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/0938936a7bad46ea292e59e6a4ee3b6ae3d329f1", "committedDate": "2020-09-08T18:26:34Z", "message": "NIFI-7592: Allow NiFi to be started without a GUI/REST interface"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd4c443ab0a2fce3a4699c5abfa5edfabc3e3385", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/dd4c443ab0a2fce3a4699c5abfa5edfabc3e3385", "committedDate": "2020-09-09T15:57:19Z", "message": "NIFI-7592: Enable all controller services when starting headless"}, "afterCommit": {"oid": "45ed5ced8f6167a6e5e51b172e529037cccf5ae4", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/45ed5ced8f6167a6e5e51b172e529037cccf5ae4", "committedDate": "2020-09-10T18:41:53Z", "message": "NIFI-7592: Enable all controller services when starting headless"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45ed5ced8f6167a6e5e51b172e529037cccf5ae4", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/45ed5ced8f6167a6e5e51b172e529037cccf5ae4", "committedDate": "2020-09-10T18:41:53Z", "message": "NIFI-7592: Enable all controller services when starting headless"}, "afterCommit": {"oid": "3b23d230fb24f4be034c1c91bad11b0eeb30ad31", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/3b23d230fb24f4be034c1c91bad11b0eeb30ad31", "committedDate": "2020-09-21T19:00:04Z", "message": "NIFI-7592: Enable all controller services when starting headless"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b23d230fb24f4be034c1c91bad11b0eeb30ad31", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/3b23d230fb24f4be034c1c91bad11b0eeb30ad31", "committedDate": "2020-09-21T19:00:04Z", "message": "NIFI-7592: Enable all controller services when starting headless"}, "afterCommit": {"oid": "86f1c697701be44e12f88ffd7c7c5705e1cb0c49", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/86f1c697701be44e12f88ffd7c7c5705e1cb0c49", "committedDate": "2020-09-24T14:58:33Z", "message": "NIFI-7592: Enable all controller services when starting headless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NzA2MDIw", "url": "https://github.com/apache/nifi/pull/4509#pullrequestreview-497706020", "createdAt": "2020-09-28T16:35:45Z", "commit": {"oid": "86f1c697701be44e12f88ffd7c7c5705e1cb0c49"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjozNTo0NlrOHZGpiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjozNzowNVrOHZGsiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NTM4Nw==", "bodyText": "I think we should make this line consistent with the logic below around line 390...\nIn this case we are saying, if no dependency then the parent is always the root class loader.\nIn the other case we are saying, if no dependency and if jetty bundle exists (which currently it always does), then make jetty bundle the parent, otherwise the parent is null.\nI think both cases should probably make the parent be the jetty class loader if the jetty bundle exists, otherwise the root class loader.", "url": "https://github.com/apache/nifi/pull/4509#discussion_r496085387", "createdAt": "2020-09-28T16:35:46Z", "author": {"login": "bbende"}, "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-nar-utils/src/main/java/org/apache/nifi/nar/NarClassLoaders.java", "diffHunk": "@@ -224,7 +228,7 @@ private InitContext load(final ClassLoader rootClassloader,\n                     // see if this class loader is eligible for loading\n                     ClassLoader narClassLoader = null;\n                     if (narDependencyCoordinate == null) {\n-                        narClassLoader = createNarClassLoader(narDetail.getWorkingDirectory(), jettyClassLoader);\n+                        narClassLoader = createNarClassLoader(narDetail.getWorkingDirectory(), rootClassloader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f1c697701be44e12f88ffd7c7c5705e1cb0c49"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NjE1Mg==", "bodyText": "I don't really know what is involved in providing these, but just wanted to double check that we really want them to be null since then I think you can't call the nifi.sh diagnostics command without them.", "url": "https://github.com/apache/nifi/pull/4509#discussion_r496086152", "createdAt": "2020-09-28T16:37:05Z", "author": {"login": "bbende"}, "path": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-headless-server/src/main/java/org/apache/nifi/headless/HeadlessNiFiServer.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.headless;\n+\n+import org.apache.nifi.NiFiServer;\n+import org.apache.nifi.admin.service.AuditService;\n+import org.apache.nifi.admin.service.impl.StandardAuditService;\n+import org.apache.nifi.authorization.AuthorizationRequest;\n+import org.apache.nifi.authorization.AuthorizationResult;\n+import org.apache.nifi.authorization.Authorizer;\n+import org.apache.nifi.authorization.AuthorizerConfigurationContext;\n+import org.apache.nifi.authorization.AuthorizerInitializationContext;\n+import org.apache.nifi.authorization.FlowParser;\n+import org.apache.nifi.authorization.exception.AuthorizationAccessException;\n+import org.apache.nifi.authorization.exception.AuthorizerCreationException;\n+import org.apache.nifi.authorization.exception.AuthorizerDestructionException;\n+import org.apache.nifi.bundle.Bundle;\n+import org.apache.nifi.controller.FlowController;\n+import org.apache.nifi.controller.StandardFlowService;\n+import org.apache.nifi.controller.flow.FlowManager;\n+import org.apache.nifi.controller.repository.FlowFileEventRepository;\n+import org.apache.nifi.controller.repository.metrics.RingBufferEventRepository;\n+import org.apache.nifi.diagnostics.DiagnosticsFactory;\n+import org.apache.nifi.encrypt.StringEncryptor;\n+import org.apache.nifi.events.VolatileBulletinRepository;\n+import org.apache.nifi.nar.ExtensionDiscoveringManager;\n+import org.apache.nifi.nar.ExtensionManagerHolder;\n+import org.apache.nifi.nar.ExtensionMapping;\n+import org.apache.nifi.nar.StandardExtensionDiscoveringManager;\n+import org.apache.nifi.registry.VariableRegistry;\n+import org.apache.nifi.registry.flow.StandardFlowRegistryClient;\n+import org.apache.nifi.registry.variable.FileBasedVariableRegistry;\n+import org.apache.nifi.reporting.BulletinRepository;\n+import org.apache.nifi.services.FlowService;\n+import org.apache.nifi.util.NiFiProperties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ */\n+public class HeadlessNiFiServer implements NiFiServer {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(HeadlessNiFiServer.class);\n+    private NiFiProperties props;\n+    private Bundle systemBundle;\n+    private Set<Bundle> bundles;\n+    private FlowService flowService;\n+\n+    private static final String DEFAULT_SENSITIVE_PROPS_KEY = \"nififtw!\";\n+\n+    /**\n+     * Default constructor\n+     */\n+    public HeadlessNiFiServer() {\n+    }\n+\n+    public void start() {\n+        try {\n+\n+            // Create a standard extension manager and discover extensions\n+            final ExtensionDiscoveringManager extensionManager = new StandardExtensionDiscoveringManager();\n+            extensionManager.discoverExtensions(systemBundle, bundles);\n+            extensionManager.logClassLoaderMapping();\n+\n+            // Set the extension manager into the holder which makes it available to the Spring context via a factory bean\n+            ExtensionManagerHolder.init(extensionManager);\n+\n+            // Enrich the flow xml using the Extension Manager mapping\n+            final FlowParser flowParser = new FlowParser();\n+            final FlowEnricher flowEnricher = new FlowEnricher(this, flowParser, props);\n+            flowEnricher.enrichFlowWithBundleInformation();\n+            logger.info(\"Loading Flow...\");\n+\n+            FlowFileEventRepository flowFileEventRepository = new RingBufferEventRepository(5);\n+            AuditService auditService = new StandardAuditService();\n+            Authorizer authorizer = new Authorizer() {\n+                @Override\n+                public AuthorizationResult authorize(AuthorizationRequest request) throws AuthorizationAccessException {\n+                    return AuthorizationResult.approved();\n+                }\n+\n+                @Override\n+                public void initialize(AuthorizerInitializationContext initializationContext) throws AuthorizerCreationException {\n+                    // do nothing\n+                }\n+\n+                @Override\n+                public void onConfigured(AuthorizerConfigurationContext configurationContext) throws AuthorizerCreationException {\n+                    // do nothing\n+                }\n+\n+                @Override\n+                public void preDestruction() throws AuthorizerDestructionException {\n+                    // do nothing\n+                }\n+            };\n+\n+            final String sensitivePropAlgorithmVal = props.getProperty(StringEncryptor.NF_SENSITIVE_PROPS_ALGORITHM);\n+            final String sensitivePropProviderVal = props.getProperty(StringEncryptor.NF_SENSITIVE_PROPS_PROVIDER);\n+            final String sensitivePropValueNifiPropVar = props.getProperty(StringEncryptor.NF_SENSITIVE_PROPS_KEY, DEFAULT_SENSITIVE_PROPS_KEY);\n+\n+            StringEncryptor encryptor = StringEncryptor.createEncryptor(sensitivePropAlgorithmVal, sensitivePropProviderVal, sensitivePropValueNifiPropVar);\n+            VariableRegistry variableRegistry = new FileBasedVariableRegistry(props.getVariableRegistryPropertiesPaths());\n+            BulletinRepository bulletinRepository = new VolatileBulletinRepository();\n+            StandardFlowRegistryClient flowRegistryClient = new StandardFlowRegistryClient();\n+            flowRegistryClient.setProperties(props);\n+\n+            FlowController flowController = FlowController.createStandaloneInstance(\n+                    flowFileEventRepository,\n+                    props,\n+                    authorizer,\n+                    auditService,\n+                    encryptor,\n+                    bulletinRepository,\n+                    variableRegistry,\n+                    flowRegistryClient,\n+                    extensionManager\n+                    );\n+\n+            flowService = StandardFlowService.createStandaloneInstance(\n+                    flowController,\n+                    props,\n+                    encryptor,\n+                    null, // revision manager\n+                    authorizer);\n+\n+            // start and load the flow\n+            flowService.start();\n+            flowService.load(null);\n+            flowController.onFlowInitialized(true);\n+            FlowManager flowManager = flowController.getFlowManager();\n+            flowManager.getGroup(flowManager.getRootGroupId()).startProcessing();\n+\n+            logger.info(\"Flow loaded successfully.\");\n+        } catch (Exception e) {\n+            // ensure the flow service is terminated\n+            if (flowService != null && flowService.isRunning()) {\n+                flowService.stop(false);\n+            }\n+            startUpFailure(new Exception(\"Unable to load flow due to: \" + e, e));\n+        }\n+    }\n+\n+    private void startUpFailure(Throwable t) {\n+        System.err.println(\"Failed to start flow service: \" + t.getMessage());\n+        System.err.println(\"Shutting down...\");\n+        logger.warn(\"Failed to start headless server... shutting down.\", t);\n+        System.exit(1);\n+    }\n+\n+    @Override\n+    public void initialize(NiFiProperties properties, Bundle systemBundle, Set<Bundle> bundles, ExtensionMapping extensionMapping) {\n+        this.props = properties;\n+        this.systemBundle = systemBundle;\n+        this.bundles = bundles;\n+    }\n+\n+    public DiagnosticsFactory getDiagnosticsFactory() {\n+        return null;\n+    }\n+\n+    public DiagnosticsFactory getThreadDumpFactory() {\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f1c697701be44e12f88ffd7c7c5705e1cb0c49"}, "originalPosition": 181}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1525562f2c7ceb428851b6ddfa76ac9a285a46b7", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/1525562f2c7ceb428851b6ddfa76ac9a285a46b7", "committedDate": "2020-09-29T17:58:34Z", "message": "NIFI-7592: Allow NiFi to be started without a GUI/REST interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cbbbcbf953c95bba17bf144dee9f8f96d40a5a9", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/4cbbbcbf953c95bba17bf144dee9f8f96d40a5a9", "committedDate": "2020-09-29T17:58:36Z", "message": "NIFI-7592: Enable all controller services when starting headless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "955086af81e445b709214629fe3deac2b47f7536", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/955086af81e445b709214629fe3deac2b47f7536", "committedDate": "2020-09-29T20:23:10Z", "message": "NIFI-7592: Marked duplicate dependencies as provided"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86f1c697701be44e12f88ffd7c7c5705e1cb0c49", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/86f1c697701be44e12f88ffd7c7c5705e1cb0c49", "committedDate": "2020-09-24T14:58:33Z", "message": "NIFI-7592: Enable all controller services when starting headless"}, "afterCommit": {"oid": "955086af81e445b709214629fe3deac2b47f7536", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/955086af81e445b709214629fe3deac2b47f7536", "committedDate": "2020-09-29T20:23:10Z", "message": "NIFI-7592: Marked duplicate dependencies as provided"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c36bac551ca3fac6f4a3b94c664ebc43573ce77f", "author": {"user": {"login": "mattyb149", "name": "Matthew Burgess"}}, "url": "https://github.com/apache/nifi/commit/c36bac551ca3fac6f4a3b94c664ebc43573ce77f", "committedDate": "2020-09-29T21:24:07Z", "message": "NIFI-7592: Incorporated additional review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1680, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}