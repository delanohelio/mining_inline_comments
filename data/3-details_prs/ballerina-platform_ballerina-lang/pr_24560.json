{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNDI1MTMy", "number": 24560, "title": "Add MockFunction validation and Service compatibility", "bodyText": "Purpose\nImplement Compile time and Runtime Mock Function validation.\nImplement mocking functions that are used inside a Service.\nFixes #24391, Fixes #23469\nApproach\nAdd Compile time validation to check if the function specified in the annotation exists.\nAdd Runtime validation when the mock function object tries to call the specified mock function.\nAdd implementation to replace functions calls within defined Services.\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-07-02T10:27:48Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560", "merged": true, "mergeCommit": {"oid": "8f0cc0743cfd739a15eb8e4e442de88f66843bbb"}, "closed": true, "closedAt": "2020-07-09T12:21:53Z", "author": {"login": "Ibaqu"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxQ-0YAH2gAyNDQzNDI1MTMyOjlkMDg2M2IyMzRiNmEzODliM2VmODcwZmM4OGRlYjEzMzkxNzA5ZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczN3gmgFqTQ0NTU1MTI5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9d0863b234b6a389b3ef870fc88deb13391709ef", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d0863b234b6a389b3ef870fc88deb13391709ef", "committedDate": "2020-07-03T10:35:28Z", "message": "Add MockFunction validation with tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "committedDate": "2020-07-03T10:38:29Z", "message": "Add Service compatibility for Function Mocking"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32d0596f1b24eb0e895644db9095ff1ab206d823", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/32d0596f1b24eb0e895644db9095ff1ab206d823", "committedDate": "2020-07-02T09:18:23Z", "message": "Add MockFunction validation with tests"}, "afterCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/954561779e3f98b0fa5bdf3fdc7d3a96acf52957", "committedDate": "2020-07-03T10:38:29Z", "message": "Add Service compatibility for Function Mocking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzY4NDk3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#pullrequestreview-442368497", "createdAt": "2020-07-03T12:07:22Z", "commit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowNzoyMlrOGsuUJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowNzoyMlrOGsuUJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTM1MQ==", "bodyText": "Commented code block?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449549351", "createdAt": "2020-07-03T12:07:22Z", "author": {"login": "pramodya1994"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -171,17 +176,48 @@ private BLangFunctionBody generateBody() {\n     }\n \n     private List<BLangStatement> generateStatements() {\n-        List<BLangStatement> statements = new ArrayList<>();\n-\n+        // <MockFunctionObj>.functionToMock = (functionToMock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzY4NjI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#pullrequestreview-442368627", "createdAt": "2020-07-03T12:07:38Z", "commit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowNzozOFrOGsuUmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowNzozOFrOGsuUmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTQ2NQ==", "bodyText": "Commented code?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449549465", "createdAt": "2020-07-03T12:07:38Z", "author": {"login": "pramodya1994"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -171,17 +176,48 @@ private BLangFunctionBody generateBody() {\n     }\n \n     private List<BLangStatement> generateStatements() {\n-        List<BLangStatement> statements = new ArrayList<>();\n-\n+        // <MockFunctionObj>.functionToMock = (functionToMock);\n+        BLangAssignment bLangAssignment =\n+                ASTBuilderUtil.createAssignmentStmt(bLangPackage.pos, generateFieldBasedAccess(), generateRHSExpr());\n         // BLangReturn Statement <retType> test:MockHandler(<MockFunctionObj>, [<args?>])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzY5Mjgy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#pullrequestreview-442369282", "createdAt": "2020-07-03T12:08:54Z", "commit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowODo1NFrOGsuWbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowODo1NFrOGsuWbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTkzMw==", "bodyText": "mockHandlerSymbol local variable seems redundant", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449549933", "createdAt": "2020-07-03T12:08:54Z", "author": {"login": "pramodya1994"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -213,6 +246,7 @@ private BLangInvocation generateBLangInvocation() {\n \n     private BInvokableSymbol getMockHandlerInvokableSymbol() {\n         BSymbol testPkg = bLangPackage.getTestablePkg().symbol.scope.lookup(new Name(\"test\")).symbol;\n+\n         BInvokableSymbol mockHandlerSymbol =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzY5NjIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#pullrequestreview-442369621", "createdAt": "2020-07-03T12:09:30Z", "commit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowOTozMFrOGsuXbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowOTozMFrOGsuXbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MDE5MA==", "bodyText": "bLangSimpleVarRef local variable seems redundant", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449550190", "createdAt": "2020-07-03T12:09:30Z", "author": {"login": "pramodya1994"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -240,13 +272,13 @@ private BLangSimpleVarRef getMockFunctionReference() {\n                 (BVarSymbol) bLangPackage.getTestablePkg().symbol.scope.lookup(new Name(mockObjName)).symbol;\n \n         BLangSimpleVarRef bLangSimpleVarRef = ASTBuilderUtil.createVariableRef(bLangPackage.pos, mockObjectSymbol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzcwODM0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#pullrequestreview-442370834", "createdAt": "2020-07-03T12:11:51Z", "commit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxMTo1MVrOGsubSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxMTo1MVrOGsubSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MTE3Nw==", "bodyText": "Do we really need continue here? Since there no statements after this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449551177", "createdAt": "2020-07-03T12:11:51Z", "author": {"login": "pramodya1994"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -431,6 +427,51 @@ private String formatPackageName(String value) {\n         return value;\n     }\n \n+    /**\n+     * Validates the function name provided in the annotation.\n+     * @param functionName Function to mock\n+     * @param variableNode  MockFunction object variable node\n+     * @param attachmentNode  MockFunction object attachment node\n+     */\n+    private void validateFunctionName(String functionName, SimpleVariableNode variableNode,\n+                                      AnnotationAttachmentNode attachmentNode) {\n+        PackageID packageID = ((BLangTestablePackage) ((BLangSimpleVariable) variableNode).parent).packageID;\n+\n+        if (functionName == null) {\n+            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, attachmentNode.getPosition(),\n+                    \"Function name cannot be empty\");\n+        } else {\n+            // Iterate through package map entries\n+            for (Map.Entry<BPackageSymbol, SymbolEnv> entry : this.packageEnvironmentMap.entrySet()) {\n+\n+                // Consider both instances of the current package\n+                if (entry.getKey().pkgID.equals(packageID)) {\n+                    // Check if the current package has the function name\n+                    if (entry.getValue().scope.entries.containsKey(new Name(functionName))) {\n+\n+                        // Functions within a test package are not allowed to be mocked\n+                        if (entry.getValue().scope.entries.containsKey(new Name(\"test\"))) {\n+                            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR,\n+                                    attachmentNode.getPosition(),\n+                                    \"Function \\'\" + functionName +\n+                                            \"\\' defined within the tests folder cannot be mocked\");\n+                        }\n+\n+                        //Exit validate function if the function exists in the entry\n+                        return;\n+                    } else {\n+                        // We need to continue to make sure both packages are checked\n+                        continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzcxMzc3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#pullrequestreview-442371377", "createdAt": "2020-07-03T12:12:53Z", "commit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxMjo1M1rOGsuc-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxMjo1M1rOGsuc-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MTYwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    //Exit validate function if the function exists in the entry\n          \n          \n            \n                                    // Exit validate function if the function exists in the entry", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449551608", "createdAt": "2020-07-03T12:12:53Z", "author": {"login": "pramodya1994"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -431,6 +427,51 @@ private String formatPackageName(String value) {\n         return value;\n     }\n \n+    /**\n+     * Validates the function name provided in the annotation.\n+     * @param functionName Function to mock\n+     * @param variableNode  MockFunction object variable node\n+     * @param attachmentNode  MockFunction object attachment node\n+     */\n+    private void validateFunctionName(String functionName, SimpleVariableNode variableNode,\n+                                      AnnotationAttachmentNode attachmentNode) {\n+        PackageID packageID = ((BLangTestablePackage) ((BLangSimpleVariable) variableNode).parent).packageID;\n+\n+        if (functionName == null) {\n+            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, attachmentNode.getPosition(),\n+                    \"Function name cannot be empty\");\n+        } else {\n+            // Iterate through package map entries\n+            for (Map.Entry<BPackageSymbol, SymbolEnv> entry : this.packageEnvironmentMap.entrySet()) {\n+\n+                // Consider both instances of the current package\n+                if (entry.getKey().pkgID.equals(packageID)) {\n+                    // Check if the current package has the function name\n+                    if (entry.getValue().scope.entries.containsKey(new Name(functionName))) {\n+\n+                        // Functions within a test package are not allowed to be mocked\n+                        if (entry.getValue().scope.entries.containsKey(new Name(\"test\"))) {\n+                            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR,\n+                                    attachmentNode.getPosition(),\n+                                    \"Function \\'\" + functionName +\n+                                            \"\\' defined within the tests folder cannot be mocked\");\n+                        }\n+\n+                        //Exit validate function if the function exists in the entry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzcyNjM5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#pullrequestreview-442372639", "createdAt": "2020-07-03T12:15:24Z", "commit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNToyNFrOGsug1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNToyNFrOGsug1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MjU5OQ==", "bodyText": "Is there a possibility to break down some child methods, since this method is very long.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449552599", "createdAt": "2020-07-03T12:15:24Z", "author": {"login": "pramodya1994"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java", "diffHunk": "@@ -92,26 +93,93 @@ private static Object callFunction(String returnVal, ArrayValue args) {\n                 methodName, argsList.toArray());\n     }\n \n-    private static String getClassName(String methodName, String orgName, String packageName, String version)\n-            throws IOException, ClassNotFoundException {\n+    private static String getClassName(String mockMethodName, String orgName, String packageName, String version,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzcyOTAy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#pullrequestreview-442372902", "createdAt": "2020-07-03T12:15:59Z", "commit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNTo1OVrOGsuhtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNTo1OVrOGsuhtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MjgyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // Methods type and paramters\n          \n          \n            \n                            // Methods type and parameters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449552821", "createdAt": "2020-07-03T12:15:59Z", "author": {"login": "pramodya1994"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java", "diffHunk": "@@ -92,26 +93,93 @@ private static Object callFunction(String returnVal, ArrayValue args) {\n                 methodName, argsList.toArray());\n     }\n \n-    private static String getClassName(String methodName, String orgName, String packageName, String version)\n-            throws IOException, ClassNotFoundException {\n+    private static String getClassName(String mockMethodName, String orgName, String packageName, String version,\n+                                       String originalMethodName) throws IOException, ClassNotFoundException {\n         String jarName = orgName + \"-\" + packageName + \"-\" + version + \"-testable.jar\";\n         Path jarPath = Paths.get(System.getProperty(\"user.dir\"), \"target\", \"caches\", \"jar_cache\", orgName,\n                 packageName, version, jarName);\n+\n         try (JarFile jar = new JarFile(jarPath.toString())) {\n-            for (Enumeration<JarEntry> entries = jar.entries(); entries.hasMoreElements(); ) {\n-                JarEntry entry = entries.nextElement();\n-                String file = entry.getName();\n-                if (file.endsWith(\".class\") && file.contains(\"tests/\")) {\n-                    String classname = file.replace('/', '.').substring(0, file.length() - 6);\n-                    Class<?> clazz = Class.forName(classname);\n-                    for (Method method : clazz.getDeclaredMethods()) {\n-                        if (methodName.equals(method.getName())) {\n-                            return clazz.getSimpleName();\n-                        }\n+            // Method definition\n+            Method mockMethod = null;\n+            Method originalMethod = null;\n+\n+            for (Enumeration<JarEntry> entries = jar.entries(); entries.hasMoreElements();) {\n+                String file = entries.nextElement().getName();\n+\n+                // Get .class files but dont contain '..Frame.class'\n+                if (file.endsWith(\".class\") && !file.contains(\"Frame.class\") && !file.contains(\"__init\")) {\n+\n+                    // Find mock method if still null\n+                    if (file.contains(\"/tests/\") && mockMethod == null) {\n+                        mockMethod = getClassDeclaredMethod(file, mockMethodName);\n                     }\n+\n+                    // Find original method if still null\n+                    if (!file.contains(\"/tests/\") && originalMethod == null) {\n+                        originalMethod = getClassDeclaredMethod(file, originalMethodName);\n+                    }\n+                }\n+\n+                if (mockMethod != null && originalMethod != null) {\n+                    break;\n                 }\n+\n             }\n+\n+            // Validation\n+            if (mockMethod != null && originalMethod != null) {\n+\n+                // Methods type and paramters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzczOTAz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#pullrequestreview-442373903", "createdAt": "2020-07-03T12:17:54Z", "commit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNzo1NFrOGsukuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNzo1NFrOGsukuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MzU5NQ==", "bodyText": "msg3 is never used", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#discussion_r449553595", "createdAt": "2020-07-03T12:17:54Z", "author": {"login": "pramodya1994"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/MockTest.java", "diffHunk": "@@ -41,16 +41,25 @@ public void setup() throws BallerinaTestException {\n     }\n \n     @Test\n-    public void testAssertTrue() throws BallerinaTestException {\n+    public void testFunctionMocking() throws BallerinaTestException {\n         String msg1 = \"4 passing\";\n-        String msg2 = \"1 passing\";\n+        String msg2 = \"3 failing\";\n+        String msg3 = \"1 passing\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzc0NDMz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#pullrequestreview-442374433", "createdAt": "2020-07-03T12:18:57Z", "commit": {"oid": "954561779e3f98b0fa5bdf3fdc7d3a96acf52957"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d39cfb8141b343e811efef0a0ee3bd8e1dcb877", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d39cfb8141b343e811efef0a0ee3bd8e1dcb877", "committedDate": "2020-07-03T15:55:33Z", "message": "Refactor Function mock validation"}, "afterCommit": {"oid": "685dc6d61792b3d41cc12c10c6305bc0361fb3c9", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/685dc6d61792b3d41cc12c10c6305bc0361fb3c9", "committedDate": "2020-07-03T16:06:03Z", "message": "Refactor Function mock validation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "685dc6d61792b3d41cc12c10c6305bc0361fb3c9", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/685dc6d61792b3d41cc12c10c6305bc0361fb3c9", "committedDate": "2020-07-03T16:06:03Z", "message": "Refactor Function mock validation"}, "afterCommit": {"oid": "e41ef60ce091a8cc40a9becdd1e1d8908a026b57", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e41ef60ce091a8cc40a9becdd1e1d8908a026b57", "committedDate": "2020-07-06T03:46:15Z", "message": "Refactor Function mock validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7d3876cd5df0a4f4229db9de88822c3815eb456", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7d3876cd5df0a4f4229db9de88822c3815eb456", "committedDate": "2020-07-06T12:17:45Z", "message": "Refactor Function mock validation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e41ef60ce091a8cc40a9becdd1e1d8908a026b57", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e41ef60ce091a8cc40a9becdd1e1d8908a026b57", "committedDate": "2020-07-06T03:46:15Z", "message": "Refactor Function mock validation"}, "afterCommit": {"oid": "d7d3876cd5df0a4f4229db9de88822c3815eb456", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7d3876cd5df0a4f4229db9de88822c3815eb456", "committedDate": "2020-07-06T12:17:45Z", "message": "Refactor Function mock validation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NTUxMjkz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24560#pullrequestreview-445551293", "createdAt": "2020-07-09T12:05:37Z", "commit": {"oid": "d7d3876cd5df0a4f4229db9de88822c3815eb456"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4150, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}