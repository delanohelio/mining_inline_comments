{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MDQ0MjAy", "number": 22326, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzowMDoyOVrODtZqFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzowODowNlrODtZx-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTMyODg1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzowMDoyOVrOF-zO1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODowMzoxM1rOF-1KIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NTQxNA==", "bodyText": "Importing everything from a package is discouraged. We should import only the required classes.\nShall we revert this change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401395414", "createdAt": "2020-04-01T07:00:29Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -19,12 +19,7 @@\n \n import io.ballerinalang.compiler.internal.parser.BallerinaParserErrorHandler.Action;\n import io.ballerinalang.compiler.internal.parser.BallerinaParserErrorHandler.Solution;\n-import io.ballerinalang.compiler.internal.parser.tree.STCheckExpression;\n-import io.ballerinalang.compiler.internal.parser.tree.STMissingToken;\n-import io.ballerinalang.compiler.internal.parser.tree.STNode;\n-import io.ballerinalang.compiler.internal.parser.tree.STNodeFactory;\n-import io.ballerinalang.compiler.internal.parser.tree.STToken;\n-import io.ballerinalang.compiler.internal.parser.tree.SyntaxKind;\n+import io.ballerinalang.compiler.internal.parser.tree.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b5eec29d237eb58f007e750d8087ce650a0aab"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyNjk3OQ==", "bodyText": "sure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401426979", "createdAt": "2020-04-01T08:03:13Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -19,12 +19,7 @@\n \n import io.ballerinalang.compiler.internal.parser.BallerinaParserErrorHandler.Action;\n import io.ballerinalang.compiler.internal.parser.BallerinaParserErrorHandler.Solution;\n-import io.ballerinalang.compiler.internal.parser.tree.STCheckExpression;\n-import io.ballerinalang.compiler.internal.parser.tree.STMissingToken;\n-import io.ballerinalang.compiler.internal.parser.tree.STNode;\n-import io.ballerinalang.compiler.internal.parser.tree.STNodeFactory;\n-import io.ballerinalang.compiler.internal.parser.tree.STToken;\n-import io.ballerinalang.compiler.internal.parser.tree.SyntaxKind;\n+import io.ballerinalang.compiler.internal.parser.tree.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NTQxNA=="}, "originalCommit": {"oid": "33b5eec29d237eb58f007e750d8087ce650a0aab"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTMzMzg0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzowMjozMFrOF-zSDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODowMzozN1rOF-1LFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NjIzOA==", "bodyText": "Shouldn't this be parseReturnKeyword()?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401396238", "createdAt": "2020-04-01T07:02:30Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -160,6 +155,8 @@ public STNode resumeParsing(ParserRuleContext context, STNode... parsedNodes) {\n                 return parseWhileKeyword();\n             case BOOLEAN_LITERAL:\n                 return parseBooleanLiteral();\n+            case RETURN_KEYWORD:\n+                return parseReturnStatement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b5eec29d237eb58f007e750d8087ce650a0aab"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyNzIyMA==", "bodyText": "ahh yeah. thanks", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401427220", "createdAt": "2020-04-01T08:03:37Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -160,6 +155,8 @@ public STNode resumeParsing(ParserRuleContext context, STNode... parsedNodes) {\n                 return parseWhileKeyword();\n             case BOOLEAN_LITERAL:\n                 return parseBooleanLiteral();\n+            case RETURN_KEYWORD:\n+                return parseReturnStatement();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NjIzOA=="}, "originalCommit": {"oid": "33b5eec29d237eb58f007e750d8087ce650a0aab"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTM0MTkzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzowNToyNlrOF-zW4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzowNToyNlrOF-zW4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NzQ3Mw==", "bodyText": "Since semicolon = parseSemicolon(); is common to both cases, we can take it out from the switch-case", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401397473", "createdAt": "2020-04-01T07:05:26Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2954,4 +2953,72 @@ private STNode parseCheckingKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse return statement.\n+     * <code>return-stmt := return [ action-or-expr ] ;</code>\n+     *\n+     * @return Return statement\n+     */\n+    private STNode parseReturnStatement() {\n+        startContext(ParserRuleContext.RETURN_STMT);\n+        STNode returnKeyword = parseReturnKeyword();\n+        STNode returnRhs = parseReturnStatementRhs(returnKeyword);\n+        endContext();\n+        return returnRhs;\n+    }\n+\n+    /**\n+     * Parse return-keyword.\n+     *\n+     * @return Return-keyword node\n+     */\n+    private STNode parseReturnKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.RETURN_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.RETURN_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * <p>\n+     * Parse the right hand side of a return statement.\n+     * </p>\n+     * <code>\n+     * return-stmt-rhs := ; |  action-or-expr ;\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseReturnStatementRhs(STNode returnKeyword) {\n+        STToken token = peek();\n+        return parseReturnStatementRhs(token.kind, returnKeyword);\n+    }\n+\n+    /**\n+     * Parse the right hand side of a return statement, given the\n+     * next token kind.\n+     *\n+     * @param tokenKind Next token kind\n+     * @return Parsed node\n+     */\n+    private STNode parseReturnStatementRhs(SyntaxKind tokenKind,STNode returnKeyword) {\n+        STNode expr;\n+        STNode semicolon;\n+\n+        switch (tokenKind) {\n+            case SEMICOLON_TOKEN:\n+                expr = STNodeFactory.createEmptyNode();\n+                semicolon = parseSemicolon();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b5eec29d237eb58f007e750d8087ce650a0aab"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTM0NDAzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzowNjoxNVrOF-zYLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzowNjoxNVrOF-zYLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NzgwNA==", "bodyText": "Indentation are not consistent", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401397804", "createdAt": "2020-04-01T07:06:15Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java", "diffHunk": "@@ -111,6 +111,13 @@ public static STNode createVariableDeclaration(SyntaxKind kind,\n         return new STVariableDeclaration(kind, typeName, variableName, equalsToken, initializer, semicolonToken);\n     }\n \n+    public static STNode createReturnStatement(SyntaxKind kind,\n+                                                   STNode returnKeyword,\n+                                                   STNode actionOrExpr,\n+                                                   STNode semicolonToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b5eec29d237eb58f007e750d8087ce650a0aab"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTM0OTA0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ReturnStatement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzowODowNlrOF-zbKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODowNDo1N1rOF-1OLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5ODU2OA==", "bodyText": "Since actionOrExpr is a Node and not a Token, we cannot use createToken(1) method.\nHave a look at the expression() method in the AssignmentStatement", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401398568", "createdAt": "2020-04-01T07:08:06Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ReturnStatement.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class ReturnStatement extends Statement{\n+    private Token returnToken;\n+    private Node actionOrExpr;\n+    private Token semicolonToken;\n+\n+    public ReturnStatement(STNode node, int position, NonTerminalNode parent) {\n+        super(node, position, parent);\n+    }\n+\n+    public Token returnToken() {\n+        if (returnToken != null) {\n+            return returnToken;\n+        }\n+\n+        returnToken = createToken(0);\n+        return returnToken;\n+    }\n+\n+    public Node actionOrExpr() {\n+        if (actionOrExpr != null) {\n+            return actionOrExpr;\n+        }\n+\n+        actionOrExpr = createToken(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b5eec29d237eb58f007e750d8087ce650a0aab"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyODAxNA==", "bodyText": "thanks. will check and correct", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22326#discussion_r401428014", "createdAt": "2020-04-01T08:04:57Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ReturnStatement.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class ReturnStatement extends Statement{\n+    private Token returnToken;\n+    private Node actionOrExpr;\n+    private Token semicolonToken;\n+\n+    public ReturnStatement(STNode node, int position, NonTerminalNode parent) {\n+        super(node, position, parent);\n+    }\n+\n+    public Token returnToken() {\n+        if (returnToken != null) {\n+            return returnToken;\n+        }\n+\n+        returnToken = createToken(0);\n+        return returnToken;\n+    }\n+\n+    public Node actionOrExpr() {\n+        if (actionOrExpr != null) {\n+            return actionOrExpr;\n+        }\n+\n+        actionOrExpr = createToken(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5ODU2OA=="}, "originalCommit": {"oid": "33b5eec29d237eb58f007e750d8087ce650a0aab"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4463, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}