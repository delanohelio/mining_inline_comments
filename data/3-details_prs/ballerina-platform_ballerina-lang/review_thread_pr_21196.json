{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MTgxNTA5", "number": 21196, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNTo1NToxNFrODikvuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoyOTowMFrODilHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTgwMjE3OnYy", "diffSide": "RIGHT", "path": "tool-plugins/vscode/package.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNTo1NToxNFrOFt5eZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjozNDoxNlrOFt6HUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MTkxMA==", "bodyText": "Shall we rephrase this into something like \"ballerina.goToDefinition.enableStdlib\"?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21196#discussion_r383671910", "createdAt": "2020-02-25T05:55:14Z", "author": {"login": "rasika"}, "path": "tool-plugins/vscode/package.json", "diffHunk": "@@ -81,6 +81,11 @@\n                     \"default\": false,\n                     \"description\": \"If set to true debug msgs will be printed to Ballerina output channel\"\n                 },\n+                \"ballerina.definition.enableStdlib\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e429635167961c84741d73771c1b56f1ad2222"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4MjM4Ng==", "bodyText": "+1 let's change this to ballerina.definition.standardLibraries", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21196#discussion_r383682386", "createdAt": "2020-02-25T06:34:16Z", "author": {"login": "nadeeshaan"}, "path": "tool-plugins/vscode/package.json", "diffHunk": "@@ -81,6 +81,11 @@\n                     \"default\": false,\n                     \"description\": \"If set to true debug msgs will be printed to Ballerina output channel\"\n                 },\n+                \"ballerina.definition.enableStdlib\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MTkxMA=="}, "originalCommit": {"oid": "53e429635167961c84741d73771c1b56f1ad2222"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTgyMjk1OnYy", "diffSide": "RIGHT", "path": "tool-plugins/vscode/src/core/extension.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjowNjo1MVrOFt5qSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjozMzoxOVrOFt6GSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NDk1NQ==", "bodyText": "We need to remove these parameters since we can handle these config changes on-the-fly with the support of the LSP protocol's didChangeConfiguration notifications. WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21196#discussion_r383674955", "createdAt": "2020-02-25T06:06:51Z", "author": {"login": "rasika"}, "path": "tool-plugins/vscode/src/core/extension.ts", "diffHunk": "@@ -199,7 +199,8 @@ export class BallerinaExtension {\n                 params.affectsConfiguration(OVERRIDE_BALLERINA_HOME) ||\n                 params.affectsConfiguration(ALLOW_EXPERIMENTAL) ||\n                 params.affectsConfiguration(ENABLE_DEBUG_LOG) ||\n-                params.affectsConfiguration(ENABLE_TRACE_LOG)) {\n+                params.affectsConfiguration(ENABLE_TRACE_LOG) ||\n+                params.affectsConfiguration(ENABLE_STDLIB_DEFINITION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e429635167961c84741d73771c1b56f1ad2222"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4MjEyMQ==", "bodyText": "+1, We need to think a proper way for handling all the options such as trace logs and and debug logs as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21196#discussion_r383682121", "createdAt": "2020-02-25T06:33:19Z", "author": {"login": "nadeeshaan"}, "path": "tool-plugins/vscode/src/core/extension.ts", "diffHunk": "@@ -199,7 +199,8 @@ export class BallerinaExtension {\n                 params.affectsConfiguration(OVERRIDE_BALLERINA_HOME) ||\n                 params.affectsConfiguration(ALLOW_EXPERIMENTAL) ||\n                 params.affectsConfiguration(ENABLE_DEBUG_LOG) ||\n-                params.affectsConfiguration(ENABLE_TRACE_LOG)) {\n+                params.affectsConfiguration(ENABLE_TRACE_LOG) ||\n+                params.affectsConfiguration(ENABLE_STDLIB_DEFINITION)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NDk1NQ=="}, "originalCommit": {"oid": "53e429635167961c84741d73771c1b56f1ad2222"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTgzODc0OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/util/definition/LSStandardLibCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoxNjoyNVrOFt5zwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoxNjoyNVrOFt5zwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NzM3Ng==", "bodyText": "Shall we add a traceLog for this compilation. Will be useful when analyzing performance bugs. https://github.com/ballerina-platform/ballerina-lang/blob/master/language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/LSModuleCompiler.java#L287-L292", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21196#discussion_r383677376", "createdAt": "2020-02-25T06:16:25Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/util/definition/LSStandardLibCache.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.util.definition;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import org.ballerinalang.compiler.CompilerOptionName;\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.compiler.LSCompilerUtil;\n+import org.ballerinalang.langserver.exception.LSStdlibCacheException;\n+import org.ballerinalang.model.elements.Flag;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.model.tree.TopLevelNode;\n+import org.ballerinalang.util.diagnostic.DiagnosticListener;\n+import org.wso2.ballerinalang.compiler.Compiler;\n+import org.wso2.ballerinalang.compiler.FileSystemProjectDirectory;\n+import org.wso2.ballerinalang.compiler.SourceDirectory;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotation;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangImportPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangConstant;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DefaultDiagnosticListener;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PROJECT_DIR;\n+\n+/**\n+ * Standard Library Cache Implementation for the Language Server.\n+ * This will be used by the Goto Definition and the Reference Feature Implementations\n+ *\n+ * @since 1.2.0\n+ */\n+public class LSStandardLibCache {\n+    private static final LSStandardLibCache STANDARD_LIB_CACHE;\n+    private static final ReentrantLock lock = new ReentrantLock();\n+    private static final String CACHE_PROJECT_NAME = \"stdlib_cache_proj\";\n+    private static final String TOML_CONTENT = \"[project]\\norg-name= \\\"lsbalorg\\\"\\nversion=\\\"1.1.0\\\"\\n\\n[dependencies]\";\n+    private Path stdlibCacheProjectPath;\n+    private Path stdlibSourceRoot;\n+    private boolean cacheProjectRootSuccess;\n+    private LoadingCache<String, List<TopLevelNode>> topLevelNodeCache;\n+\n+    static {\n+        STANDARD_LIB_CACHE = new LSStandardLibCache();\n+    }\n+\n+    private LSStandardLibCache() {\n+        topLevelNodeCache = CacheBuilder.newBuilder()\n+                .maximumSize(25)\n+                .expireAfterAccess(30, TimeUnit.MINUTES)\n+                .build(new CacheLoader<String, List<TopLevelNode>>() {\n+                    @Override\n+                    public List<TopLevelNode> load(@Nonnull String module) throws UnsupportedEncodingException {\n+                        return getNodesForModule(module);\n+                    }\n+                });\n+\n+        try {\n+            Path cachedProjectPath = CommonUtil.LS_STDLIB_CACHE_DIR.resolve(CACHE_PROJECT_NAME);\n+            stdlibCacheProjectPath = Files.createDirectories(cachedProjectPath);\n+            Path manifestPath = stdlibCacheProjectPath.resolve(ProjectDirConstants.MANIFEST_FILE_NAME);\n+            Files.write(manifestPath, Collections.singletonList(TOML_CONTENT));\n+            cacheProjectRootSuccess = true;\n+        } catch (IOException e) {\n+            cacheProjectRootSuccess = false;\n+            return;\n+        }\n+        stdlibSourceRoot = Paths.get(CommonUtil.BALLERINA_HOME).resolve(\"lib\").resolve(\"repo\");\n+    }\n+\n+    /**\n+     * Get the Cache Instance.\n+     *\n+     * @return {@link LSStandardLibCache} standard library cache instance\n+     */\n+    public static LSStandardLibCache getInstance() {\n+        return STANDARD_LIB_CACHE;\n+    }\n+\n+    /**\n+     * Update the lib cache.\n+     *\n+     * @param importPackages import module to update\n+     */\n+    public void updateCache(List<BLangImportPackage> importPackages) throws LSStdlibCacheException {\n+        if (!cacheProjectRootSuccess) {\n+            throw new LSStdlibCacheException(\"Trying to access failed cache\");\n+        }\n+        if (lock.isLocked() || importPackages == null || importPackages.isEmpty()) {\n+            return;\n+        }\n+        Set<String> cachedModules = topLevelNodeCache.asMap().keySet();\n+        List<BLangImportPackage> evalModules = importPackages.parallelStream()\n+                .filter(importModule -> !cachedModules.contains(LSStdLibCacheUtil.getCacheEntryName(importModule)))\n+                .collect(Collectors.toList());\n+        // Populate cache entries in a separate thread\n+        new Thread(() -> {\n+            try {\n+                lock.lock();\n+                evalModules.forEach(module -> {\n+                    String orgName = module.getOrgName().getValue();\n+                    String moduleName = LSStdLibCacheUtil.getCacheEntryName(module);\n+                    try {\n+                        LSStdLibCacheUtil.extractSourceFromBalo(stdlibSourceRoot.resolve(orgName),\n+                                stdlibCacheProjectPath.resolve(ProjectDirConstants.SOURCE_DIR_NAME), module);\n+                        topLevelNodeCache.put(moduleName, getNodesForModule(moduleName));\n+                    } catch (IOException | LSStdlibCacheException e) {\n+                        // Ignore the exception since the cache will not be polluted\n+                    }\n+                });\n+            } finally {\n+                lock.unlock();\n+            }\n+        }).start();\n+    }\n+\n+    /**\n+     * Get the top level nodes (Definitions) in a given module.\n+     *\n+     * @param pkgId PackageID\n+     * @return {@link List} List of module names\n+     */\n+    public List<TopLevelNode> getTopLevelNodesForModule(LSContext context, PackageID pkgId) {\n+        Boolean enabled = context.get(DocumentServiceKeys.ENABLE_STDLIB_DEFINITION_KEY);\n+        if (enabled == null || !enabled) {\n+            return new ArrayList<>();\n+        }\n+        String cachedModuleName = LSStdLibCacheUtil.getCacheEntryName(pkgId);\n+        return topLevelNodeCache.getUnchecked(cachedModuleName);\n+    }\n+\n+    /**\n+     * Get the standard library cache root which resides within the temp directory.\n+     * \n+     * @return {@link Path} Cache root\n+     * @throws LSStdlibCacheException If the cache root initialization has been failed\n+     */\n+    public Path getStdlibCacheRoot() throws LSStdlibCacheException {\n+        if (!cacheProjectRootSuccess) {\n+            throw new LSStdlibCacheException(\"Cache Root could not initialized\");\n+        }\n+        return stdlibCacheProjectPath;\n+    }\n+\n+    private List<TopLevelNode> getNodesForModule(String moduleName) throws UnsupportedEncodingException {\n+        Compiler compiler = getCompiler(stdlibCacheProjectPath.toString());\n+        BLangPackage bLangPackage = compiler.compile(moduleName);\n+        return bLangPackage.topLevelNodes.stream()\n+                .filter(topLevelNode -> {\n+                    Set<Flag> flagSet;\n+                    switch (topLevelNode.getKind()) {\n+                        case FUNCTION:\n+                            flagSet = ((BLangFunction) topLevelNode).flagSet;\n+                            break;\n+                        case TYPE_DEFINITION:\n+                            flagSet = ((BLangTypeDefinition) topLevelNode).flagSet;\n+                            break;\n+                        case CONSTANT:\n+                            flagSet = ((BLangConstant) topLevelNode).flagSet;\n+                            break;\n+                        // TODO: Handle XML Namespace Declarations\n+                        case ANNOTATION:\n+                            flagSet = ((BLangAnnotation) topLevelNode).flagSet;\n+                            break;\n+                        default:\n+                            flagSet = new HashSet<>();\n+                            break;\n+                    }\n+                    return flagSet.contains(Flag.PUBLIC);\n+                })\n+                .collect(Collectors.toList());\n+    }\n+\n+    private CompilerContext createNewCompilerContext(String projectDir) {\n+        CompilerContext context = new CompilerContext();\n+        CompilerOptions options = CompilerOptions.getInstance(context);\n+        options.put(PROJECT_DIR, projectDir);\n+        options.put(COMPILER_PHASE, CompilerPhase.DESUGAR.toString());\n+        options.put(PRESERVE_WHITESPACE, Boolean.toString(false));\n+        options.put(OFFLINE, Boolean.toString(true));\n+        options.put(CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED, Boolean.toString(true));\n+        context.put(SourceDirectory.class, new FileSystemProjectDirectory(Paths.get(projectDir)));\n+        context.put(DiagnosticListener.class, new DefaultDiagnosticListener());\n+        return context;\n+    }\n+\n+    private Compiler getCompiler(String projectDir) throws UnsupportedEncodingException {\n+        Compiler compiler = Compiler.getInstance(createNewCompilerContext(projectDir));\n+        compiler.setOutStream(new LSCompilerUtil.EmptyPrintStream());\n+\n+        return compiler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e429635167961c84741d73771c1b56f1ad2222"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTg0NDQzOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/util/definition/LSStandardLibCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoxOTo1MVrOFt53Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoxOTo1MVrOFt53Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3ODMwMw==", "bodyText": "Shall we change this line into below which would be equal to what you have done inside the static block.\nprivate static final LSStandardLibCache STANDARD_LIB_CACHE = new LSStandardLibCache();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21196#discussion_r383678303", "createdAt": "2020-02-25T06:19:51Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/util/definition/LSStandardLibCache.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.util.definition;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import org.ballerinalang.compiler.CompilerOptionName;\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.compiler.LSCompilerUtil;\n+import org.ballerinalang.langserver.exception.LSStdlibCacheException;\n+import org.ballerinalang.model.elements.Flag;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.model.tree.TopLevelNode;\n+import org.ballerinalang.util.diagnostic.DiagnosticListener;\n+import org.wso2.ballerinalang.compiler.Compiler;\n+import org.wso2.ballerinalang.compiler.FileSystemProjectDirectory;\n+import org.wso2.ballerinalang.compiler.SourceDirectory;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotation;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangImportPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangConstant;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DefaultDiagnosticListener;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PROJECT_DIR;\n+\n+/**\n+ * Standard Library Cache Implementation for the Language Server.\n+ * This will be used by the Goto Definition and the Reference Feature Implementations\n+ *\n+ * @since 1.2.0\n+ */\n+public class LSStandardLibCache {\n+    private static final LSStandardLibCache STANDARD_LIB_CACHE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e429635167961c84741d73771c1b56f1ad2222"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTg2MTg3OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/util/definition/LSStandardLibCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoyOTowMFrOFt6Bhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjoyOTowMFrOFt6Bhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4MDkwMw==", "bodyText": "Shall we have a trace log here stating that \"module x is loading into cache....\" similar to https://github.com/ballerina-platform/ballerina-lang/blob/master/language-server/modules/langserver-compiler/src/main/java/org/ballerinalang/langserver/compiler/LSModuleCompiler.java#L287-L292. Will be useful to identify if there's never resolving module imports.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21196#discussion_r383680903", "createdAt": "2020-02-25T06:29:00Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/util/definition/LSStandardLibCache.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.util.definition;\n+\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import org.ballerinalang.compiler.CompilerOptionName;\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.compiler.DocumentServiceKeys;\n+import org.ballerinalang.langserver.compiler.LSCompilerUtil;\n+import org.ballerinalang.langserver.exception.LSStdlibCacheException;\n+import org.ballerinalang.model.elements.Flag;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.model.tree.TopLevelNode;\n+import org.ballerinalang.util.diagnostic.DiagnosticListener;\n+import org.wso2.ballerinalang.compiler.Compiler;\n+import org.wso2.ballerinalang.compiler.FileSystemProjectDirectory;\n+import org.wso2.ballerinalang.compiler.SourceDirectory;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotation;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangImportPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangTypeDefinition;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangConstant;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DefaultDiagnosticListener;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nonnull;\n+\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PROJECT_DIR;\n+\n+/**\n+ * Standard Library Cache Implementation for the Language Server.\n+ * This will be used by the Goto Definition and the Reference Feature Implementations\n+ *\n+ * @since 1.2.0\n+ */\n+public class LSStandardLibCache {\n+    private static final LSStandardLibCache STANDARD_LIB_CACHE;\n+    private static final ReentrantLock lock = new ReentrantLock();\n+    private static final String CACHE_PROJECT_NAME = \"stdlib_cache_proj\";\n+    private static final String TOML_CONTENT = \"[project]\\norg-name= \\\"lsbalorg\\\"\\nversion=\\\"1.1.0\\\"\\n\\n[dependencies]\";\n+    private Path stdlibCacheProjectPath;\n+    private Path stdlibSourceRoot;\n+    private boolean cacheProjectRootSuccess;\n+    private LoadingCache<String, List<TopLevelNode>> topLevelNodeCache;\n+\n+    static {\n+        STANDARD_LIB_CACHE = new LSStandardLibCache();\n+    }\n+\n+    private LSStandardLibCache() {\n+        topLevelNodeCache = CacheBuilder.newBuilder()\n+                .maximumSize(25)\n+                .expireAfterAccess(30, TimeUnit.MINUTES)\n+                .build(new CacheLoader<String, List<TopLevelNode>>() {\n+                    @Override\n+                    public List<TopLevelNode> load(@Nonnull String module) throws UnsupportedEncodingException {\n+                        return getNodesForModule(module);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e429635167961c84741d73771c1b56f1ad2222"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1117, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}