{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMDgzMDA3", "number": 22941, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjozNjoyMlrOD4yjUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjo0MTozNlrOD4ylMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODc1MDkwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/DefaultValueInitializationObjects.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjozNjoyMlrOGPth0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjozNjoyMlrOGPth0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNzc2Mg==", "bodyText": "Shall we rename this class? Something like ObjectFieldDefaultValueTest", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22941#discussion_r419127762", "createdAt": "2020-05-03T16:36:22Z", "author": {"login": "pramodya1994"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/DefaultValueInitializationObjects.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a46ee5ab30bf434c8c92f987059a6072a7ed9c0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODc1MTgzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/DefaultValueInitializationObjects.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjozNzowM1rOGPtiPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjozNzowM1rOGPtiPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNzg3MA==", "bodyText": "These values have never used", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22941#discussion_r419127870", "createdAt": "2020-05-03T16:37:03Z", "author": {"login": "pramodya1994"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/DefaultValueInitializationObjects.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.documentation;\n+\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.docgen.generator.model.DefaultableVariable;\n+import org.ballerinalang.docgen.generator.model.Module;\n+import org.ballerinalang.docgen.generator.model.Object;\n+import org.ballerinalang.docgen.generator.model.Project;\n+import org.ballerinalang.docgen.model.ModuleDoc;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Test cases to check default value initialization for objects in docs.\n+ */\n+public class DefaultValueInitializationObjects {\n+    private Module testModule;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        String sourceRoot =\n+                \"test-src\" + File.separator + \"documentation\" + File.separator + \"default_value_initialization\";\n+        CompileResult result = BCompileUtil.compile(sourceRoot, \"test_module\");\n+\n+        List<BLangPackage> modules = new LinkedList<>();\n+        modules.add((BLangPackage) result.getAST());\n+        Map<String, ModuleDoc> docsMap = BallerinaDocGenerator.generateModuleDocs(\n+                Paths.get(\"src/test/resources\", sourceRoot).toAbsolutePath().toString(), modules);\n+        List<ModuleDoc> moduleDocList = new ArrayList<>(docsMap.values());\n+        moduleDocList.sort(Comparator.comparing(pkg -> pkg.bLangPackage.packageID.toString()));\n+        Map<String, List<Path>> resources = new HashMap<>();\n+\n+        Project project = BallerinaDocGenerator.getDocsGenModel(moduleDocList, resources);\n+        testModule = project.modules.get(0);\n+    }\n+\n+    @Test(description = \"Test default value init\")\n+    public void testDefValInit() {\n+        List<Object> objects = testModule.objects;\n+        Object foo, bar, student;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a46ee5ab30bf434c8c92f987059a6072a7ed9c0"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODc1NTcxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/DefaultValueInitializationObjects.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjo0MTozNlrOGPtkPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjo0MTozNlrOGPtkPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyODM4MQ==", "bodyText": "I think its better if we can write 3 test cases to check Different values. Like to test int value, string value, and object value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22941#discussion_r419128381", "createdAt": "2020-05-03T16:41:36Z", "author": {"login": "pramodya1994"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/DefaultValueInitializationObjects.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.documentation;\n+\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.docgen.generator.model.DefaultableVariable;\n+import org.ballerinalang.docgen.generator.model.Module;\n+import org.ballerinalang.docgen.generator.model.Object;\n+import org.ballerinalang.docgen.generator.model.Project;\n+import org.ballerinalang.docgen.model.ModuleDoc;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Test cases to check default value initialization for objects in docs.\n+ */\n+public class DefaultValueInitializationObjects {\n+    private Module testModule;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        String sourceRoot =\n+                \"test-src\" + File.separator + \"documentation\" + File.separator + \"default_value_initialization\";\n+        CompileResult result = BCompileUtil.compile(sourceRoot, \"test_module\");\n+\n+        List<BLangPackage> modules = new LinkedList<>();\n+        modules.add((BLangPackage) result.getAST());\n+        Map<String, ModuleDoc> docsMap = BallerinaDocGenerator.generateModuleDocs(\n+                Paths.get(\"src/test/resources\", sourceRoot).toAbsolutePath().toString(), modules);\n+        List<ModuleDoc> moduleDocList = new ArrayList<>(docsMap.values());\n+        moduleDocList.sort(Comparator.comparing(pkg -> pkg.bLangPackage.packageID.toString()));\n+        Map<String, List<Path>> resources = new HashMap<>();\n+\n+        Project project = BallerinaDocGenerator.getDocsGenModel(moduleDocList, resources);\n+        testModule = project.modules.get(0);\n+    }\n+\n+    @Test(description = \"Test default value init\")\n+    public void testDefValInit() {\n+        List<Object> objects = testModule.objects;\n+        Object foo, bar, student;\n+        for (Object object : objects) {\n+            for (DefaultableVariable variable : object.fields) {\n+                if (object.name.equals(\"Foo\")) {\n+                    if (variable.name.equals(\"i\")) {\n+                        Assert.assertEquals(variable.defaultValue, \"1\");\n+                    }\n+                } else if (object.name.equals(\"Bar\")) {\n+                    if (variable.name.equals(\"i\")) {\n+                        Assert.assertEquals(variable.defaultValue, \"1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a46ee5ab30bf434c8c92f987059a6072a7ed9c0"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3819, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}