{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNTcyMjk2", "number": 27319, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0Nzo0NFrOFFkehA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzo1NToxNVrOFLLX9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzg0ODM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/declarations/record-type-def/record_type_def_source_26.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0Nzo0NFrOIGJMKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0Nzo0NFrOIGJMKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxMjkzOQ==", "bodyText": "Should we add a test for the union scenario too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27319#discussion_r543312939", "createdAt": "2020-12-15T12:47:44Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-parser/src/test/resources/declarations/record-type-def/record_type_def_source_26.bal", "diffHunk": "@@ -0,0 +1,3 @@\n+type Foo3 record {|\n+    *int&;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7a48912bb362d67c386b41d286982ae6ad85e0"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDc5NjgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOTo1MzoyM1rOIKffmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOTo1MzoyM1rOIKffmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg3MjY2Nw==", "bodyText": "Why we remove early return?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27319#discussion_r547872667", "createdAt": "2020-12-23T09:53:23Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2212,17 +2206,20 @@ private STNode parseTypeDescriptorInternal(List<STNode> qualifiers, ParserRuleCo\n             typeDesc = STNodeFactory.createSimpleNameReferenceNode(missingToken);\n         }\n \n-        return parseComplexTypeDescriptor(typeDesc, context, isTypedBindingPattern);\n+        typeDesc = parseComplexTypeDescriptor(typeDesc, context, isTypedBindingPattern);\n+        return typeDesc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b747452f77b0892794cfdd7b96585cf5a0945518"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDk1NjM1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMDo0Nzo1N1rOIKg8YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMDo0Nzo1N1rOIKg8YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NjQxNg==", "bodyText": "We will lose the original context if we end the context before we complete parsing the complete type descriptor.\neg type myint int[5; error handler will look for expression after recovering ] where it should look for the semicolon.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27319#discussion_r547896416", "createdAt": "2020-12-23T10:47:57Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2193,14 +2193,8 @@ private STNode parseTypeDescriptor(ParserRuleContext context, boolean isTypedBin\n     private STNode parseTypeDescriptor(List<STNode> qualifiers, ParserRuleContext context,\n                                        boolean isTypedBindingPattern, boolean isInConditionalExpr) {\n         startContext(context);\n-        STNode typeDesc = parseTypeDescriptorInternal(qualifiers, context, isTypedBindingPattern, isInConditionalExpr);\n-        endContext();\n-        return typeDesc;\n-    }\n-\n-    private STNode parseTypeDescriptorInternal(List<STNode> qualifiers, ParserRuleContext context,\n-                                               boolean isTypedBindingPattern, boolean isInConditionalExpr) {\n         STNode typeDesc = parseTypeDescriptorInternal(qualifiers, context, isInConditionalExpr);\n+        endContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b747452f77b0892794cfdd7b96585cf5a0945518"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjY1MDEyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ArrayTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNzo1NToxNVrOIONP2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODo0MDoxMVrOIOOdrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2ODAyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    testTopLevelNode(\"array-type/array_type_assert_05.bal\", \"array-type/array_type_assert_20.json\");\n          \n          \n            \n                    testTopLevelNode(\"array-type/array_type_assert_20.bal\", \"array-type/array_type_assert_20.json\");\n          \n          \n            \n                  \n          \n      \n    \n    \n  \n\nCan we sync bal file and assert file. It would be better if we can change the existing ones as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27319#discussion_r551768026", "createdAt": "2021-01-05T07:55:15Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ArrayTypeTest.java", "diffHunk": "@@ -104,6 +104,11 @@ public void testInvalidArrayTypeWithArrayLengthMissingCloseBracket() {\n         test(\"int[5 a;\", \"array-type/array_type_assert_11.json\");\n     }\n \n+    @Test\n+    public void testTopLevelArrayTypeWithMissingCloseBracket() {\n+        testTopLevelNode(\"array-type/array_type_assert_05.bal\", \"array-type/array_type_assert_20.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba4aa0ad66971cd55e9bf46aa211c4fc467bd077"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4Nzk1MQ==", "bodyText": "array_type_source_20.bal :P", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27319#discussion_r551787951", "createdAt": "2021-01-05T08:40:11Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ArrayTypeTest.java", "diffHunk": "@@ -104,6 +104,11 @@ public void testInvalidArrayTypeWithArrayLengthMissingCloseBracket() {\n         test(\"int[5 a;\", \"array-type/array_type_assert_11.json\");\n     }\n \n+    @Test\n+    public void testTopLevelArrayTypeWithMissingCloseBracket() {\n+        testTopLevelNode(\"array-type/array_type_assert_05.bal\", \"array-type/array_type_assert_20.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2ODAyNg=="}, "originalCommit": {"oid": "ba4aa0ad66971cd55e9bf46aa211c4fc467bd077"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2839, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}