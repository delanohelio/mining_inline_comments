{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyOTQ0NDc4", "number": 26988, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjo1Njo0N1rOE6bFTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjowNToyN1rOE6o9CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Njk2NTkxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/BaloWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjo1Njo0N1rOH1febw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo1ODoyMVrOH2oVzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1MjI3MQ==", "bodyText": "Here we are writing the list of dependencies.  I think the original requirement was to dump the dependency graph so that we can get it back when we read the Balo project?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26988#discussion_r525852271", "createdAt": "2020-11-18T06:56:47Z", "author": {"login": "sameerajayasoma"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/BaloWriter.java", "diffHunk": "@@ -244,6 +255,31 @@ private void addPackageSource(ZipOutputStream baloOutputStream, Package pkg) thr\n         }\n     }\n \n+    private void addDependenciesJson(ZipOutputStream baloOutputStream, Package pkg) {\n+        List<PackageId> sortedPackageIds = pkg.getCompilation().packageDependencyGraph().toTopologicallySortedList();\n+        ProjectEnvironment projectEnvironment = pkg.packageContext().project().projectEnvironmentContext();\n+        PackageResolver packageResolver = projectEnvironment.getService(PackageResolver.class);\n+        List<Dependency> dependencies = new ArrayList<>();\n+\n+        for (PackageId packageId : sortedPackageIds) {\n+            PackageContext packageContext = packageResolver.getPackage(packageId).packageContext();\n+            Dependency dependency = new Dependency(packageContext.packageOrg().toString(),\n+                    packageContext.packageName().toString(),\n+                    packageContext.packageVersion().toString());\n+            dependencies.add(dependency);\n+        }\n+\n+        DependenciesJson dependenciesJson = new DependenciesJson(dependencies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6245d728933166b5c75ed60972bb7588a3470c0a"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0NjA5Mw==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26988#discussion_r527046093", "createdAt": "2020-11-19T16:58:21Z", "author": {"login": "pramodya1994"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/BaloWriter.java", "diffHunk": "@@ -244,6 +255,31 @@ private void addPackageSource(ZipOutputStream baloOutputStream, Package pkg) thr\n         }\n     }\n \n+    private void addDependenciesJson(ZipOutputStream baloOutputStream, Package pkg) {\n+        List<PackageId> sortedPackageIds = pkg.getCompilation().packageDependencyGraph().toTopologicallySortedList();\n+        ProjectEnvironment projectEnvironment = pkg.packageContext().project().projectEnvironmentContext();\n+        PackageResolver packageResolver = projectEnvironment.getService(PackageResolver.class);\n+        List<Dependency> dependencies = new ArrayList<>();\n+\n+        for (PackageId packageId : sortedPackageIds) {\n+            PackageContext packageContext = packageResolver.getPackage(packageId).packageContext();\n+            Dependency dependency = new Dependency(packageContext.packageOrg().toString(),\n+                    packageContext.packageName().toString(),\n+                    packageContext.packageVersion().toString());\n+            dependencies.add(dependency);\n+        }\n+\n+        DependenciesJson dependenciesJson = new DependenciesJson(dependencies);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1MjI3MQ=="}, "originalCommit": {"oid": "6245d728933166b5c75ed60972bb7588a3470c0a"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTIzODQ4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/DependencyGraph.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjowNToyN1rOH11PPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjowNToyN1rOH11PPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIwODgzMQ==", "bodyText": "I have a concern about exposing the internal data structure of the dependency graph.\nWe can refactor this later.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26988#discussion_r526208831", "createdAt": "2020-11-18T16:05:27Z", "author": {"login": "sameerajayasoma"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/projects/DependencyGraph.java", "diffHunk": "@@ -84,6 +84,10 @@ public void findCycles() {\n         return topologicallySortedNodes;\n     }\n \n+    Map<T, Set<T>> dependencies() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58de042751597892a4be5beca8e6c14a1592003"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3022, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}