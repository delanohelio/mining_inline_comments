{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0ODY3ODE4", "number": 26725, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo1MzoyMFrOE3MRLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMToxMzoxN1rOE5ac3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzA4MTQyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo1MzoyMFrOHwZG7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo1MzoyMFrOHwZG7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNTA2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    mv.visitLdcInsn(module.org.value);\n          \n          \n            \n                    mv.visitLdcInsn(IdentifierUtils.decodeIdentifier(module.org.value));", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r520505069", "createdAt": "2020-11-10T11:53:20Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java", "diffHunk": "@@ -256,20 +260,41 @@ private static void generateStaticInitializer(ClassWriter cw, String className,\n         }\n         MethodVisitor mv = cw.visitMethod(ACC_STATIC, \"<clinit>\", \"()V\", null, null);\n         if (isInitClass) {\n-            String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n-            mv.visitTypeInsn(NEW, LOCK_STORE);\n-            mv.visitInsn(DUP);\n-            mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n-            mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+            setLockStoreField(mv, className);\n             setServiceEPAvailableField(cw, mv, serviceEPAvailable, className);\n             setModuleStatusField(cw, mv, className);\n+            setCurrentModuleField(cw, mv, module, className);\n         }\n         JvmCodeGenUtil.generateStrandMetadata(mv, className, module, asyncDataCollector);\n         mv.visitInsn(RETURN);\n         mv.visitMaxs(0, 0);\n         mv.visitEnd();\n     }\n \n+    private static void setLockStoreField(MethodVisitor mv, String className) {\n+        String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n+        mv.visitTypeInsn(NEW, LOCK_STORE);\n+        mv.visitInsn(DUP);\n+        mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n+        mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+    }\n+\n+    private static void setCurrentModuleField(ClassWriter cw, MethodVisitor mv, BIRPackage module,\n+                                              String moduleInitClass) {\n+        FieldVisitor fv = cw.visitField(ACC_PUBLIC + ACC_STATIC, CURRENT_MODULE_VAR_NAME,\n+                                        String.format(\"L%s;\", MODULE), null, null);\n+        fv.visitEnd();\n+        mv.visitTypeInsn(Opcodes.NEW, MODULE);\n+        mv.visitInsn(Opcodes.DUP);\n+        mv.visitLdcInsn(module.org.value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d812c7c25ea74a24936f8561cb111210c9020e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzA4NTc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo1NDozNFrOHwZJfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzoyMzoyOFrOHw8Kxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNTcyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    mv.visitLdcInsn(module.name.value);\n          \n          \n            \n                    mv.visitLdcInsn(IdentifierUtils.decodeIdentifier(module.name.value));", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r520505724", "createdAt": "2020-11-10T11:54:34Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java", "diffHunk": "@@ -256,20 +260,41 @@ private static void generateStaticInitializer(ClassWriter cw, String className,\n         }\n         MethodVisitor mv = cw.visitMethod(ACC_STATIC, \"<clinit>\", \"()V\", null, null);\n         if (isInitClass) {\n-            String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n-            mv.visitTypeInsn(NEW, LOCK_STORE);\n-            mv.visitInsn(DUP);\n-            mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n-            mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+            setLockStoreField(mv, className);\n             setServiceEPAvailableField(cw, mv, serviceEPAvailable, className);\n             setModuleStatusField(cw, mv, className);\n+            setCurrentModuleField(cw, mv, module, className);\n         }\n         JvmCodeGenUtil.generateStrandMetadata(mv, className, module, asyncDataCollector);\n         mv.visitInsn(RETURN);\n         mv.visitMaxs(0, 0);\n         mv.visitEnd();\n     }\n \n+    private static void setLockStoreField(MethodVisitor mv, String className) {\n+        String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n+        mv.visitTypeInsn(NEW, LOCK_STORE);\n+        mv.visitInsn(DUP);\n+        mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n+        mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+    }\n+\n+    private static void setCurrentModuleField(ClassWriter cw, MethodVisitor mv, BIRPackage module,\n+                                              String moduleInitClass) {\n+        FieldVisitor fv = cw.visitField(ACC_PUBLIC + ACC_STATIC, CURRENT_MODULE_VAR_NAME,\n+                                        String.format(\"L%s;\", MODULE), null, null);\n+        fv.visitEnd();\n+        mv.visitTypeInsn(Opcodes.NEW, MODULE);\n+        mv.visitInsn(Opcodes.DUP);\n+        mv.visitLdcInsn(module.org.value);\n+        mv.visitLdcInsn(module.name.value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d812c7c25ea74a24936f8561cb111210c9020e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNjkzMQ==", "bodyText": "We will be having the encoded names for module/org names at this point. So we might need to decode them for module initializing", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r520506931", "createdAt": "2020-11-10T11:56:49Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java", "diffHunk": "@@ -256,20 +260,41 @@ private static void generateStaticInitializer(ClassWriter cw, String className,\n         }\n         MethodVisitor mv = cw.visitMethod(ACC_STATIC, \"<clinit>\", \"()V\", null, null);\n         if (isInitClass) {\n-            String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n-            mv.visitTypeInsn(NEW, LOCK_STORE);\n-            mv.visitInsn(DUP);\n-            mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n-            mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+            setLockStoreField(mv, className);\n             setServiceEPAvailableField(cw, mv, serviceEPAvailable, className);\n             setModuleStatusField(cw, mv, className);\n+            setCurrentModuleField(cw, mv, module, className);\n         }\n         JvmCodeGenUtil.generateStrandMetadata(mv, className, module, asyncDataCollector);\n         mv.visitInsn(RETURN);\n         mv.visitMaxs(0, 0);\n         mv.visitEnd();\n     }\n \n+    private static void setLockStoreField(MethodVisitor mv, String className) {\n+        String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n+        mv.visitTypeInsn(NEW, LOCK_STORE);\n+        mv.visitInsn(DUP);\n+        mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n+        mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+    }\n+\n+    private static void setCurrentModuleField(ClassWriter cw, MethodVisitor mv, BIRPackage module,\n+                                              String moduleInitClass) {\n+        FieldVisitor fv = cw.visitField(ACC_PUBLIC + ACC_STATIC, CURRENT_MODULE_VAR_NAME,\n+                                        String.format(\"L%s;\", MODULE), null, null);\n+        fv.visitEnd();\n+        mv.visitTypeInsn(Opcodes.NEW, MODULE);\n+        mv.visitInsn(Opcodes.DUP);\n+        mv.visitLdcInsn(module.org.value);\n+        mv.visitLdcInsn(module.name.value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNTcyNA=="}, "originalCommit": {"oid": "d5d812c7c25ea74a24936f8561cb111210c9020e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MTM5OA==", "bodyText": "Do we need to decode version?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r520761398", "createdAt": "2020-11-10T17:59:23Z", "author": {"login": "warunalakshitha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java", "diffHunk": "@@ -256,20 +260,41 @@ private static void generateStaticInitializer(ClassWriter cw, String className,\n         }\n         MethodVisitor mv = cw.visitMethod(ACC_STATIC, \"<clinit>\", \"()V\", null, null);\n         if (isInitClass) {\n-            String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n-            mv.visitTypeInsn(NEW, LOCK_STORE);\n-            mv.visitInsn(DUP);\n-            mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n-            mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+            setLockStoreField(mv, className);\n             setServiceEPAvailableField(cw, mv, serviceEPAvailable, className);\n             setModuleStatusField(cw, mv, className);\n+            setCurrentModuleField(cw, mv, module, className);\n         }\n         JvmCodeGenUtil.generateStrandMetadata(mv, className, module, asyncDataCollector);\n         mv.visitInsn(RETURN);\n         mv.visitMaxs(0, 0);\n         mv.visitEnd();\n     }\n \n+    private static void setLockStoreField(MethodVisitor mv, String className) {\n+        String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n+        mv.visitTypeInsn(NEW, LOCK_STORE);\n+        mv.visitInsn(DUP);\n+        mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n+        mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+    }\n+\n+    private static void setCurrentModuleField(ClassWriter cw, MethodVisitor mv, BIRPackage module,\n+                                              String moduleInitClass) {\n+        FieldVisitor fv = cw.visitField(ACC_PUBLIC + ACC_STATIC, CURRENT_MODULE_VAR_NAME,\n+                                        String.format(\"L%s;\", MODULE), null, null);\n+        fv.visitEnd();\n+        mv.visitTypeInsn(Opcodes.NEW, MODULE);\n+        mv.visitInsn(Opcodes.DUP);\n+        mv.visitLdcInsn(module.org.value);\n+        mv.visitLdcInsn(module.name.value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNTcyNA=="}, "originalCommit": {"oid": "d5d812c7c25ea74a24936f8561cb111210c9020e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3OTQ5NQ==", "bodyText": "No. version is not encoded.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r521079495", "createdAt": "2020-11-11T03:23:28Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java", "diffHunk": "@@ -256,20 +260,41 @@ private static void generateStaticInitializer(ClassWriter cw, String className,\n         }\n         MethodVisitor mv = cw.visitMethod(ACC_STATIC, \"<clinit>\", \"()V\", null, null);\n         if (isInitClass) {\n-            String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n-            mv.visitTypeInsn(NEW, LOCK_STORE);\n-            mv.visitInsn(DUP);\n-            mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n-            mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+            setLockStoreField(mv, className);\n             setServiceEPAvailableField(cw, mv, serviceEPAvailable, className);\n             setModuleStatusField(cw, mv, className);\n+            setCurrentModuleField(cw, mv, module, className);\n         }\n         JvmCodeGenUtil.generateStrandMetadata(mv, className, module, asyncDataCollector);\n         mv.visitInsn(RETURN);\n         mv.visitMaxs(0, 0);\n         mv.visitEnd();\n     }\n \n+    private static void setLockStoreField(MethodVisitor mv, String className) {\n+        String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n+        mv.visitTypeInsn(NEW, LOCK_STORE);\n+        mv.visitInsn(DUP);\n+        mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n+        mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+    }\n+\n+    private static void setCurrentModuleField(ClassWriter cw, MethodVisitor mv, BIRPackage module,\n+                                              String moduleInitClass) {\n+        FieldVisitor fv = cw.visitField(ACC_PUBLIC + ACC_STATIC, CURRENT_MODULE_VAR_NAME,\n+                                        String.format(\"L%s;\", MODULE), null, null);\n+        fv.visitEnd();\n+        mv.visitTypeInsn(Opcodes.NEW, MODULE);\n+        mv.visitInsn(Opcodes.DUP);\n+        mv.visitLdcInsn(module.org.value);\n+        mv.visitLdcInsn(module.name.value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNTcyNA=="}, "originalCommit": {"oid": "d5d812c7c25ea74a24936f8561cb111210c9020e"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Nzg3MzA3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozNzo0OFrOHxHmPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozNzo0OFrOHxHmPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2Njc1MQ==", "bodyText": "I have been wondering if there could be a better way rather than having to pass this parameter to many methods", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r521266751", "createdAt": "2020-11-11T10:37:48Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java", "diffHunk": "@@ -452,7 +477,7 @@ CompiledJarFile generate(BIRNode.BIRPackage module, InteropValidator interopVali\n \n         // generate object/record value classes\n         JvmValueGen valueGen = new JvmValueGen(module, this, methodGen, lambdaGen);\n-        valueGen.generateValueClasses(jarEntries);\n+        valueGen.generateValueClasses(jarEntries, moduleInitClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dccab252580d6a7567f080c2c5d3f67444878ad"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Nzg3NzgyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozOToxOFrOHxHpSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozOToxOFrOHxHpSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NzUzMA==", "bodyText": "I think it is a bad idea to pass a null to a constructor. We can have two constructors in the Environment class to handle this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r521267530", "createdAt": "2020-11-11T10:39:18Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java", "diffHunk": "@@ -257,7 +257,7 @@ public static void logMessageToActiveSpan(String logLevel, Supplier<String> logM\n         if (!tracingEnabled) {\n             return;\n         }\n-        Environment balEnv = new Environment(Scheduler.getStrand());\n+        Environment balEnv = new Environment(Scheduler.getStrand(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dccab252580d6a7567f080c2c5d3f67444878ad"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjY4MjI1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/basic/instance_method_tests.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNTowOTo1OVrOHycHEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNTowOTo1OVrOHycHEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1MTQwOA==", "bodyText": "Since this is unit tests we can use the test:assertEquals function from the ballerina/test package. Then we need not define this function", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r522651408", "createdAt": "2020-11-13T05:09:59Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/basic/instance_method_tests.bal", "diffHunk": "@@ -191,3 +200,15 @@ function newByte(int val) returns handle = @java:Constructor {\n    'class: \"java.lang.Byte\"\n } external;\n \n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function assertEquality(any|error expected, any|error actual) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8010382bed44e8ce4e0bc124e093e35f9a63a163"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjcwNTM0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/InstanceMethods.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNToxNTowMlrOHycWrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjozNTozOVrOHz8O-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1NTQwNg==", "bodyText": "Shall we also have test where self is also passed as a parameter for an instance method? I mean self and Environment both.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r522655406", "createdAt": "2020-11-13T05:15:02Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/InstanceMethods.java", "diffHunk": "@@ -172,4 +176,10 @@ public int getInt(ObjectValue objectValue, int x) {\n     public int getRandomInt() {\n         return 123;\n     }\n+\n+    public BString getCurrentModule(Environment env, long b) {\n+        Module callerModule = env.getCurrentModule();\n+        return StringUtils.fromString(callerModule.getOrg() + \"#\" + callerModule.getName() + \"#\" +\n+                                              callerModule.getVersion() + \"#\" + b);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8010382bed44e8ce4e0bc124e093e35f9a63a163"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1NjU2Nw==", "bodyText": "Shall we also see what happens if the methods with both without self and with self and Environment have the same name(overloaded)?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r522656567", "createdAt": "2020-11-13T05:16:22Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/InstanceMethods.java", "diffHunk": "@@ -172,4 +176,10 @@ public int getInt(ObjectValue objectValue, int x) {\n     public int getRandomInt() {\n         return 123;\n     }\n+\n+    public BString getCurrentModule(Environment env, long b) {\n+        Module callerModule = env.getCurrentModule();\n+        return StringUtils.fromString(callerModule.getOrg() + \"#\" + callerModule.getName() + \"#\" +\n+                                              callerModule.getVersion() + \"#\" + b);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1NTQwNg=="}, "originalCommit": {"oid": "8010382bed44e8ce4e0bc124e093e35f9a63a163"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNjI5OQ==", "bodyText": "Self is not part of parameter list in instance method. As an example getCureentModule(receiver) will generated to receiver.getCurrentModule() . passing self as a parameter test already added. I also added another test case for overload methods.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r524226299", "createdAt": "2020-11-16T12:35:39Z", "author": {"login": "warunalakshitha"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/InstanceMethods.java", "diffHunk": "@@ -172,4 +176,10 @@ public int getInt(ObjectValue objectValue, int x) {\n     public int getRandomInt() {\n         return 123;\n     }\n+\n+    public BString getCurrentModule(Environment env, long b) {\n+        Module callerModule = env.getCurrentModule();\n+        return StringUtils.fromString(callerModule.getOrg() + \"#\" + callerModule.getName() + \"#\" +\n+                                              callerModule.getVersion() + \"#\" + b);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1NTQwNg=="}, "originalCommit": {"oid": "8010382bed44e8ce4e0bc124e093e35f9a63a163"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjM3NjYwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/javainterop/basic/StaticMethodTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMToxMzoxN1rOHz21ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMToxMzoxN1rOHz21ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNzkyMw==", "bodyText": "We can add the function name to the above data provider", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r524137923", "createdAt": "2020-11-16T11:13:17Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/javainterop/basic/StaticMethodTest.java", "diffHunk": "@@ -171,4 +171,9 @@ public void testBalEnvSlowAsync(String funcName) {\n                 \"testBalEnvFastAsync\", \"testReturnNullString\", \"testReturnNotNullString\", \"testStaticResolve\",\n                 \"testStringCast\"};\n     }\n+\n+    @Test\n+    public void testGetCurrentModule() {\n+        BRunUtil.invoke(result, \"testGetCurrentModule\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdc4e377f50cbf1e025d3da7fd4a958a8904231a"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3185, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}