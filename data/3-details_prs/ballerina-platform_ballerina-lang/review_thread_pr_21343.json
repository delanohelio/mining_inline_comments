{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMjEzMTU1", "number": 21343, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNTo1NjoyM1rODk63UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjoxOToyOVrODk7F8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDM5NzYwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/XMLFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNTo1NjoyM1rOFxgzTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoxNzo0OFrOFxiMAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MTk2Nw==", "bodyText": "Should we deprecate these public methods and add new ones instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21343#discussion_r387461967", "createdAt": "2020-03-04T05:56:23Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/XMLFactory.java", "diffHunk": "@@ -270,10 +262,10 @@ public static XMLValue createXMLElement(XMLQName startTagName, XMLQName endTagNa\n         }\n     }\n \n-    public static XMLValue createXMLElement(XMLQName startTagName, XMLQName endTagName,\n-                                               BString defaultNsUriVal) {\n-        return createXMLElement(startTagName, endTagName,\n-                                defaultNsUriVal == null ? XMLConstants.NULL_NS_URI : defaultNsUriVal.getValue());\n+    public static XMLValue createXMLElement(XMLQName startTagName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b15f88baeefe3d489ba9422f1ac5ed13516bbae"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4NDY3NQ==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21343#discussion_r387484675", "createdAt": "2020-03-04T07:17:48Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/XMLFactory.java", "diffHunk": "@@ -270,10 +262,10 @@ public static XMLValue createXMLElement(XMLQName startTagName, XMLQName endTagNa\n         }\n     }\n \n-    public static XMLValue createXMLElement(XMLQName startTagName, XMLQName endTagName,\n-                                               BString defaultNsUriVal) {\n-        return createXMLElement(startTagName, endTagName,\n-                                defaultNsUriVal == null ? XMLConstants.NULL_NS_URI : defaultNsUriVal.getValue());\n+    public static XMLValue createXMLElement(XMLQName startTagName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MTk2Nw=="}, "originalCommit": {"oid": "5b15f88baeefe3d489ba9422f1ac5ed13516bbae"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQxMjAyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowNToyM1rOFxg8Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowNToyM1rOFxg8Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NDIxNA==", "bodyText": "Should this be a comment or should this go into L339-L341?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21343#discussion_r387464214", "createdAt": "2020-03-04T06:05:23Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLItem.java", "diffHunk": "@@ -327,6 +341,10 @@ public void setChildren(BXML seq) {\n      */\n     @Override\n     @Deprecated\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b15f88baeefe3d489ba9422f1ac5ed13516bbae"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQxNTMzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowNzoyMVrOFxg-Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowNzoyMVrOFxg-Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NDc2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void ensureAcyclicParentGraph(BXML newSubTree, XMLItem current,\n          \n          \n            \n                                                      Map<XMLItem, XMLItem> lineageSet) {\n          \n          \n            \n                private void ensureAcyclicParentGraph(BXML newSubTree, XMLItem current, Map<XMLItem, XMLItem> lineageSet) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21343#discussion_r387464762", "createdAt": "2020-03-04T06:07:21Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLItem.java", "diffHunk": "@@ -346,14 +364,59 @@ public void addChildren(BXML seq) {\n                     && appendingList.get(0).getNodeType() == TEXT) {\n                 mergeAdjoiningTextNodesIntoList(leftList, appendingList);\n             } else {\n+                for (BXML bxml : appendingList) {\n+                    addParent(bxml, this);\n+                }\n                 leftList.addAll(appendingList);\n             }\n         } else {\n+            addParent(seq, this);\n             leftList.add(seq);\n         }\n         this.children = new XMLSequence(leftList);\n     }\n \n+\n+    private void addParent(BXML child) {\n+        ensureAcyclicGraph(child, this);\n+        addParent(child, this);\n+    }\n+\n+    // This method does not ensure acyclicness of tree after adding the children. Hence this method shold only be\n+    // use in scenarios where cyclic xml construction is impossible, that is only when constructing xml tree from\n+    // xml literal syntax, or after ensuring the new xml tree is not cyclic.\n+    private void addParent(BXML child, XMLItem thisElem) {\n+        if (child.getNodeType() == ELEMENT) {\n+            ((XMLItem) child).probableParents.add(new WeakReference<>(thisElem));\n+        }\n+    }\n+\n+    private void ensureAcyclicGraph(BXML newSubTree, XMLItem current) {\n+        IdentityHashMap<XMLItem, XMLItem> lineageSet = new IdentityHashMap<>();\n+        lineageSet.put(this, this);\n+        ensureAcyclicParentGraph(newSubTree, current, lineageSet);\n+    }\n+\n+    private void ensureAcyclicParentGraph(BXML newSubTree, XMLItem current,\n+                                          Map<XMLItem, XMLItem> lineageSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b15f88baeefe3d489ba9422f1ac5ed13516bbae"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQyNDIwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjoxMzowMVrOFxhD2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo0MDoyOFrOFxiqlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NjIwMg==", "bodyText": "We only seem to be putting to this lineageSet?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21343#discussion_r387466202", "createdAt": "2020-03-04T06:13:01Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLItem.java", "diffHunk": "@@ -346,14 +364,59 @@ public void addChildren(BXML seq) {\n                     && appendingList.get(0).getNodeType() == TEXT) {\n                 mergeAdjoiningTextNodesIntoList(leftList, appendingList);\n             } else {\n+                for (BXML bxml : appendingList) {\n+                    addParent(bxml, this);\n+                }\n                 leftList.addAll(appendingList);\n             }\n         } else {\n+            addParent(seq, this);\n             leftList.add(seq);\n         }\n         this.children = new XMLSequence(leftList);\n     }\n \n+\n+    private void addParent(BXML child) {\n+        ensureAcyclicGraph(child, this);\n+        addParent(child, this);\n+    }\n+\n+    // This method does not ensure acyclicness of tree after adding the children. Hence this method shold only be\n+    // use in scenarios where cyclic xml construction is impossible, that is only when constructing xml tree from\n+    // xml literal syntax, or after ensuring the new xml tree is not cyclic.\n+    private void addParent(BXML child, XMLItem thisElem) {\n+        if (child.getNodeType() == ELEMENT) {\n+            ((XMLItem) child).probableParents.add(new WeakReference<>(thisElem));\n+        }\n+    }\n+\n+    private void ensureAcyclicGraph(BXML newSubTree, XMLItem current) {\n+        IdentityHashMap<XMLItem, XMLItem> lineageSet = new IdentityHashMap<>();\n+        lineageSet.put(this, this);\n+        ensureAcyclicParentGraph(newSubTree, current, lineageSet);\n+    }\n+\n+    private void ensureAcyclicParentGraph(BXML newSubTree, XMLItem current,\n+                                          Map<XMLItem, XMLItem> lineageSet) {\n+        for (WeakReference<XMLItem> probableParentRef : current.probableParents) {\n+            XMLItem parent = probableParentRef.get();\n+            // probable parent is the actual parent.\n+            if (parent.children.children.contains(current)) {\n+                // If new subtree is in the lineage of current node, adding this newSubTree forms a cycle.\n+                if (parent == newSubTree) {\n+                    throw createXMLCycleError();\n+                }\n+                lineageSet.put(parent, parent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b15f88baeefe3d489ba9422f1ac5ed13516bbae"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MjUwMQ==", "bodyText": "Thanks for pointing this out, this was bits remaining from a previous attempt.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21343#discussion_r387492501", "createdAt": "2020-03-04T07:40:28Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLItem.java", "diffHunk": "@@ -346,14 +364,59 @@ public void addChildren(BXML seq) {\n                     && appendingList.get(0).getNodeType() == TEXT) {\n                 mergeAdjoiningTextNodesIntoList(leftList, appendingList);\n             } else {\n+                for (BXML bxml : appendingList) {\n+                    addParent(bxml, this);\n+                }\n                 leftList.addAll(appendingList);\n             }\n         } else {\n+            addParent(seq, this);\n             leftList.add(seq);\n         }\n         this.children = new XMLSequence(leftList);\n     }\n \n+\n+    private void addParent(BXML child) {\n+        ensureAcyclicGraph(child, this);\n+        addParent(child, this);\n+    }\n+\n+    // This method does not ensure acyclicness of tree after adding the children. Hence this method shold only be\n+    // use in scenarios where cyclic xml construction is impossible, that is only when constructing xml tree from\n+    // xml literal syntax, or after ensuring the new xml tree is not cyclic.\n+    private void addParent(BXML child, XMLItem thisElem) {\n+        if (child.getNodeType() == ELEMENT) {\n+            ((XMLItem) child).probableParents.add(new WeakReference<>(thisElem));\n+        }\n+    }\n+\n+    private void ensureAcyclicGraph(BXML newSubTree, XMLItem current) {\n+        IdentityHashMap<XMLItem, XMLItem> lineageSet = new IdentityHashMap<>();\n+        lineageSet.put(this, this);\n+        ensureAcyclicParentGraph(newSubTree, current, lineageSet);\n+    }\n+\n+    private void ensureAcyclicParentGraph(BXML newSubTree, XMLItem current,\n+                                          Map<XMLItem, XMLItem> lineageSet) {\n+        for (WeakReference<XMLItem> probableParentRef : current.probableParents) {\n+            XMLItem parent = probableParentRef.get();\n+            // probable parent is the actual parent.\n+            if (parent.children.children.contains(current)) {\n+                // If new subtree is in the lineage of current node, adding this newSubTree forms a cycle.\n+                if (parent == newSubTree) {\n+                    throw createXMLCycleError();\n+                }\n+                lineageSet.put(parent, parent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NjIwMg=="}, "originalCommit": {"oid": "5b15f88baeefe3d489ba9422f1ac5ed13516bbae"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQyNjAzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjoxNDowMlrOFxhE8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjoxNDowMlrOFxhE8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NjQ4MQ==", "bodyText": "Shall we return early by checking\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (removedItem.getNodeType() == ELEMENT) {\n          \n          \n            \n                    if (removedItem.getNodeType() != ELEMENT) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21343#discussion_r387466481", "createdAt": "2020-03-04T06:14:02Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLItem.java", "diffHunk": "@@ -571,7 +634,22 @@ public void removeChildren(String qname) {\n \n         Collections.reverse(toRemove);\n         for (Integer index : toRemove) {\n-            children.remove(index.intValue());\n+            BXML removed = children.remove(index.intValue());\n+            removeParentReference(removed);\n+        }\n+    }\n+\n+    private void removeParentReference(BXML removedItem) {\n+        if (removedItem.getNodeType() == ELEMENT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b15f88baeefe3d489ba9422f1ac5ed13516bbae"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQyODA2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLSequence.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjoxNToyNlrOFxhGTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo1MDo0OFrOFxi5PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NjgyOQ==", "bodyText": "Why do we need this() since we are doing this.children = new ArrayList<>(); after anyway?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21343#discussion_r387466829", "createdAt": "2020-03-04T06:15:26Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLSequence.java", "diffHunk": "@@ -70,6 +70,12 @@ public XMLSequence(List<BXML> children) {\n         this.children = children;\n     }\n \n+    public XMLSequence(BXML child) {\n+        this();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b15f88baeefe3d489ba9422f1ac5ed13516bbae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NjI1Mw==", "bodyText": "Will remove extra calls", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21343#discussion_r387496253", "createdAt": "2020-03-04T07:50:48Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/XMLSequence.java", "diffHunk": "@@ -70,6 +70,12 @@ public XMLSequence(List<BXML> children) {\n         this.children = children;\n     }\n \n+    public XMLSequence(BXML child) {\n+        this();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NjgyOQ=="}, "originalCommit": {"oid": "5b15f88baeefe3d489ba9422f1ac5ed13516bbae"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQzNTA1OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjoxOToyOVrOFxhKiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjoxOToyOVrOFxhKiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NzkxMg==", "bodyText": "Can't we do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                error? er = trap cds[0].setChildren(subRoot);\n          \n          \n            \n                if (er is ()) {\n          \n          \n            \n                    return cat;\n          \n          \n            \n                } else {\n          \n          \n            \n                    return er;\n          \n          \n            \n                }\n          \n          \n            \n                check trap cds[0].setChildren(subRoot);\n          \n          \n            \n                return cat;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21343#discussion_r387467912", "createdAt": "2020-03-04T06:19:29Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "diffHunk": "@@ -206,3 +206,33 @@ function testSlice() returns [xml, xml, xml] {\n     xml elem = elemL + elemN + elemM;\n     return [elem.slice(0, 2), elem.slice(1), xmllib:slice(elem, 1)];\n }\n+\n+function testXMLCycleError() returns [error|xml, error|xml] {\n+     return [trap testXMLCycleErrorInner(), trap testXMLCycleInnerNonError()];\n+}\n+\n+function testXMLCycleErrorInner() returns xml {\n+    xml cat = catalog.clone();\n+    cat.getChildren().strip()[0].setChildren(cat);\n+    return cat;\n+}\n+\n+function testXMLCycleInnerNonError() returns xml {\n+    xml cat = catalog.clone();\n+    var cds = cat.getChildren().strip();\n+    cds[0].setChildren(cds[1]);\n+    return cat;\n+}\n+\n+function testXMLCycleDueToChildrenOfChildren() returns xml|error {\n+    xml cat = catalog.clone();\n+    xml subRoot = xml `<subRoot></subRoot>`;\n+    subRoot.setChildren(cat);\n+    var cds = cat.getChildren().strip();\n+    error? er = trap cds[0].setChildren(subRoot);\n+    if (er is ()) {\n+        return cat;\n+    } else {\n+        return er;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b15f88baeefe3d489ba9422f1ac5ed13516bbae"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1040, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}