{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTEyNDE5", "number": 20598, "title": "[IntelliJ Plugin] Fix indentation issue when working with ballerina documentation syntax", "bodyText": "Purpose\nFixes #20594.\nRelated PRs\n#20599.\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-01-14T08:43:20Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20598", "merged": true, "mergeCommit": {"oid": "00f5cf2b0f58ac3a9753a1b4e355bee508a067b2"}, "closed": true, "closedAt": "2020-01-16T08:20:15Z", "author": {"login": "NipunaRanasinghe"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5QmqBgH2gAyMzYyNTEyNDE5OjI5NWQ1Zjg4MWNhNDZhNzEzZGNiMTI5NjU3OGFkODY1ZTI3MzZmYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb60VcEgFqTM0MzY5OTIxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "295d5f881ca46a713dcb1296578ad865e2736fbe", "author": {"user": {"login": "NipunaRanasinghe", "name": "Nipuna Ransinghe "}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/295d5f881ca46a713dcb1296578ad865e2736fbe", "committedDate": "2020-01-11T10:29:19Z", "message": "Fix indentation issue when working with ballerina documentation syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjk5MTc3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20598#pullrequestreview-343699177", "createdAt": "2020-01-16T06:40:52Z", "commit": {"oid": "295d5f881ca46a713dcb1296578ad865e2736fbe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjo0MDo1MlrOFePWhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjo0MDo1MlrOFePWhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1MzEyNw==", "bodyText": "Better to use method documentation format instead of the single line comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20598#discussion_r367253127", "createdAt": "2020-01-16T06:40:52Z", "author": {"login": "nadeeshaan"}, "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/editor/inserthandlers/BallerinaEnterInDocumentationHandler.java", "diffHunk": "@@ -29,48 +30,53 @@\n import org.jetbrains.annotations.NotNull;\n \n /**\n- * Handles the enter key press in braces.\n+ * Handles the enter key press events within ballerina documentation.\n  */\n public class BallerinaEnterInDocumentationHandler extends EnterHandlerDelegateAdapter {\n \n+    private static final String BAL_DOC_PREFIX = \"#\";\n+\n     @Override\n     public Result postProcessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull DataContext dataContext) {\n-        if (!file.getLanguage().is(BallerinaLanguage.INSTANCE)) {\n+\n+        if (!file.getLanguage().is(BallerinaLanguage.INSTANCE) || editor.isDisposed()) {\n             return Result.Continue;\n         }\n+        Document doc = editor.getDocument();\n+\n         // We need to save the file before checking. Otherwise issues can occur when we press enter in a string.\n         Project project = file.getProject();\n-        PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());\n+        PsiDocumentManager.getInstance(project).commitDocument(doc);\n \n-        // Checks whether the previous line starts with \"#\".\n         LogicalPosition caretPos = editor.getCaretModel().getLogicalPosition();\n         int prevLine = caretPos.line - 1;\n-        String lineString = editor.getDocument().getText(\n-                new TextRange(editor.getDocument().getLineStartOffset(prevLine),\n-                        editor.getDocument().getLineEndOffset(prevLine))).trim();\n-        if (lineString.startsWith(\"#\")) {\n-            int newCol = lineString.replace(\"\\t\", \"    \").indexOf(\"#\");\n-            String enteredText = editor.getDocument().getText(\n-                    new TextRange(editor.getDocument().getLineStartOffset(caretPos.line),\n-                            editor.getDocument().getLineEndOffset(caretPos.line))).trim();\n-            editor.getDocument().deleteString(editor.getDocument().getLineStartOffset(caretPos.line),\n-                    editor.getDocument().getLineEndOffset(caretPos.line));\n-            editor.getCaretModel().moveToLogicalPosition(new LogicalPosition(caretPos.line, 1));\n-            enterNewLine(editor, enteredText, newCol);\n+        String lineString = doc.getText(new TextRange(doc.getLineStartOffset(prevLine),\n+                doc.getLineEndOffset(prevLine)));\n \n+        if (lineString.trim().startsWith(BAL_DOC_PREFIX)) {\n+            addNewline(editor, doc, lineString, caretPos);\n             // Commit the document.\n-            PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());\n+            PsiDocumentManager.getInstance(project).commitDocument(doc);\n         }\n         return Result.Continue;\n     }\n \n-    private void enterNewLine(Editor editor, String str, int col) {\n-        StringBuilder strBuilder = new StringBuilder(\"# \" + str);\n-        // Left padding with whitespaces in order to be vertically aligned with the previous doc line.\n-        for (int i = 0; i < col; i++) {\n+    // Inserts the splitted documentation at the next line.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295d5f881ca46a713dcb1296578ad865e2736fbe"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjk5MjE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20598#pullrequestreview-343699217", "createdAt": "2020-01-16T06:41:01Z", "commit": {"oid": "295d5f881ca46a713dcb1296578ad865e2736fbe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4475, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}