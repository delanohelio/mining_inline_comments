{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NjY5NzU5", "number": 25889, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozNjoxOVrOEkinHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzo0NDoyNlrOEki1ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzUxMjYzOnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozNjoxOVrOHTiljA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxNzoxNlrOHTkhhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTY2MA==", "bodyText": "Can invert the conditions and do an early exit.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490251660", "createdAt": "2020-09-17T13:36:19Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -244,15 +290,90 @@ static Token formatToken(Token token, int leadingSpaces, int trailingSpaces, int\n         if (token == null) {\n             return token;\n         }\n-        MinutiaeList newLeadingMinutiaeList = modifyMinutiaeList(leadingSpaces, leadingNewLines);\n-        MinutiaeList newTrailingMinutiaeList = modifyMinutiaeList(trailingSpaces, trailingNewLines);\n+        MinutiaeList newLeadingMinutiaeList = preserveComments(token.leadingMinutiae(), trailingNewLines)\n+                .add(createWhitespaceMinutiae(getWhiteSpaces(leadingSpaces, leadingNewLines)));\n+        MinutiaeList newTrailingMinutiaeList = preserveComments(token.trailingMinutiae(), trailingNewLines)\n+                .add(createWhitespaceMinutiae(getWhiteSpaces(trailingSpaces, trailingNewLines)));\n \n         return token.modify(newLeadingMinutiaeList, newTrailingMinutiaeList);\n     }\n \n-    private static MinutiaeList modifyMinutiaeList(int spaces, int newLines) {\n-        Minutiae minutiae = createWhitespaceMinutiae(getWhiteSpaces(spaces, newLines));\n-        return createMinutiaeList(minutiae);\n+    private static MinutiaeList preserveComments(MinutiaeList minutiaeList, int trailingNewLines) {\n+        MinutiaeList minutiaes = AbstractNodeFactory.createEmptyMinutiaeList();\n+        if (minutiaeList.size() > 0) {\n+            int count = commentCount(minutiaeList);\n+            if (count > 0) {\n+                int processedCount = 0;\n+                for (int i = 0; i < minutiaeList.size(); i++) {\n+                    Minutiae minutiae = minutiaeList.get(i);\n+                    minutiaes = minutiaes.add(minutiae);\n+                    if (minutiae.kind() == SyntaxKind.COMMENT_MINUTIAE) {\n+                        processedCount++;\n+                        if (processedCount == count) {\n+                            if (trailingNewLines == 0) {\n+                                minutiaes = minutiaes.add(AbstractNodeFactory\n+                                        .createEndOfLineMinutiae(System.getProperty(LINE_SEPARATOR)));\n+                            }\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return minutiaes;\n+    }\n+\n+    private static int commentCount(MinutiaeList minutiaeList) {\n+        int count = 0;\n+        for (int i = 0; i < minutiaeList.size(); i++) {\n+            if (minutiaeList.get(i).kind() == SyntaxKind.COMMENT_MINUTIAE) {\n+                count++;\n+            }\n+        }\n+        return count;\n+    }\n+\n+    private static int leadingNewLines(NonTerminalNode parent, Token node) {\n+        int count = 0;\n+        if (parent != null) {\n+            int childLocation = getChildLocation(parent, node);\n+            if (parent.children().size() > childLocation + 1) {\n+                Token nextToken = getFirstToken(parent.children().get(childLocation + 1));\n+                if (nextToken != null && nextToken.containsLeadingMinutiae()) {\n+                    MinutiaeList minutiaes = nextToken.leadingMinutiae();\n+                    if (commentCount(minutiaes) > 0) {\n+                        for (Minutiae minutiae : minutiaes) {\n+                            if (minutiae.kind() == SyntaxKind.END_OF_LINE_MINUTIAE) {\n+                                count++;\n+                            } else {\n+                                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdce13f26e83ff1b287228902f068e95bd5a2616"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MzM5OQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490283399", "createdAt": "2020-09-17T14:17:16Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -244,15 +290,90 @@ static Token formatToken(Token token, int leadingSpaces, int trailingSpaces, int\n         if (token == null) {\n             return token;\n         }\n-        MinutiaeList newLeadingMinutiaeList = modifyMinutiaeList(leadingSpaces, leadingNewLines);\n-        MinutiaeList newTrailingMinutiaeList = modifyMinutiaeList(trailingSpaces, trailingNewLines);\n+        MinutiaeList newLeadingMinutiaeList = preserveComments(token.leadingMinutiae(), trailingNewLines)\n+                .add(createWhitespaceMinutiae(getWhiteSpaces(leadingSpaces, leadingNewLines)));\n+        MinutiaeList newTrailingMinutiaeList = preserveComments(token.trailingMinutiae(), trailingNewLines)\n+                .add(createWhitespaceMinutiae(getWhiteSpaces(trailingSpaces, trailingNewLines)));\n \n         return token.modify(newLeadingMinutiaeList, newTrailingMinutiaeList);\n     }\n \n-    private static MinutiaeList modifyMinutiaeList(int spaces, int newLines) {\n-        Minutiae minutiae = createWhitespaceMinutiae(getWhiteSpaces(spaces, newLines));\n-        return createMinutiaeList(minutiae);\n+    private static MinutiaeList preserveComments(MinutiaeList minutiaeList, int trailingNewLines) {\n+        MinutiaeList minutiaes = AbstractNodeFactory.createEmptyMinutiaeList();\n+        if (minutiaeList.size() > 0) {\n+            int count = commentCount(minutiaeList);\n+            if (count > 0) {\n+                int processedCount = 0;\n+                for (int i = 0; i < minutiaeList.size(); i++) {\n+                    Minutiae minutiae = minutiaeList.get(i);\n+                    minutiaes = minutiaes.add(minutiae);\n+                    if (minutiae.kind() == SyntaxKind.COMMENT_MINUTIAE) {\n+                        processedCount++;\n+                        if (processedCount == count) {\n+                            if (trailingNewLines == 0) {\n+                                minutiaes = minutiaes.add(AbstractNodeFactory\n+                                        .createEndOfLineMinutiae(System.getProperty(LINE_SEPARATOR)));\n+                            }\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return minutiaes;\n+    }\n+\n+    private static int commentCount(MinutiaeList minutiaeList) {\n+        int count = 0;\n+        for (int i = 0; i < minutiaeList.size(); i++) {\n+            if (minutiaeList.get(i).kind() == SyntaxKind.COMMENT_MINUTIAE) {\n+                count++;\n+            }\n+        }\n+        return count;\n+    }\n+\n+    private static int leadingNewLines(NonTerminalNode parent, Token node) {\n+        int count = 0;\n+        if (parent != null) {\n+            int childLocation = getChildLocation(parent, node);\n+            if (parent.children().size() > childLocation + 1) {\n+                Token nextToken = getFirstToken(parent.children().get(childLocation + 1));\n+                if (nextToken != null && nextToken.containsLeadingMinutiae()) {\n+                    MinutiaeList minutiaes = nextToken.leadingMinutiae();\n+                    if (commentCount(minutiaes) > 0) {\n+                        for (Minutiae minutiae : minutiaes) {\n+                            if (minutiae.kind() == SyntaxKind.END_OF_LINE_MINUTIAE) {\n+                                count++;\n+                            } else {\n+                                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTY2MA=="}, "originalCommit": {"oid": "bdce13f26e83ff1b287228902f068e95bd5a2616"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzUxMzc1OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozNjozNVrOHTimUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxNzozM1rOHTkiaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTg1OA==", "bodyText": "Same as above", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490251858", "createdAt": "2020-09-17T13:36:35Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -410,6 +535,18 @@ private static Indentation getBlockParent(Node node) {\n         return new Indentation(null, false);\n     }\n \n+    static boolean addNewTrailingLine(NonTerminalNode parent, NonTerminalNode node) {\n+        if (parent != null) {\n+            int childLocation = getChildLocation(parent, node);\n+            if (parent.children().size() > childLocation + 1) {\n+                Token nextToken = getFirstToken(parent.children().get(childLocation + 1));\n+                if (nextToken != null && nextToken.containsLeadingMinutiae()) {\n+                    return (nextToken.leadingMinutiae().get(0).kind() != SyntaxKind.END_OF_LINE_MINUTIAE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdce13f26e83ff1b287228902f068e95bd5a2616"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MzYyNQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490283625", "createdAt": "2020-09-17T14:17:33Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -410,6 +535,18 @@ private static Indentation getBlockParent(Node node) {\n         return new Indentation(null, false);\n     }\n \n+    static boolean addNewTrailingLine(NonTerminalNode parent, NonTerminalNode node) {\n+        if (parent != null) {\n+            int childLocation = getChildLocation(parent, node);\n+            if (parent.children().size() > childLocation + 1) {\n+                Token nextToken = getFirstToken(parent.children().get(childLocation + 1));\n+                if (nextToken != null && nextToken.containsLeadingMinutiae()) {\n+                    return (nextToken.leadingMinutiae().get(0).kind() != SyntaxKind.END_OF_LINE_MINUTIAE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTg1OA=="}, "originalCommit": {"oid": "bdce13f26e83ff1b287228902f068e95bd5a2616"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzUxNjM5OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozNzowOFrOHTin5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxNzo1N1rOHTkjww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MjI2Mw==", "bodyText": "Additional parenthesis around the syntax kind", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490252263", "createdAt": "2020-09-17T13:37:08Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -134,6 +167,14 @@ static DiagnosticPos getPosition(Node node) {\n                 return parent;\n             }\n         }\n+        if (parentKind == (SyntaxKind.OBJECT_CONSTRUCTOR) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.LOCAL_VAR_DECL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdce13f26e83ff1b287228902f068e95bd5a2616"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4Mzk3MQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490283971", "createdAt": "2020-09-17T14:17:57Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -134,6 +167,14 @@ static DiagnosticPos getPosition(Node node) {\n                 return parent;\n             }\n         }\n+        if (parentKind == (SyntaxKind.OBJECT_CONSTRUCTOR) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.LOCAL_VAR_DECL)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MjI2Mw=="}, "originalCommit": {"oid": "bdce13f26e83ff1b287228902f068e95bd5a2616"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzUxNzExOnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozNzoxOVrOHTioXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxODoxMlrOHTkkjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MjM4MA==", "bodyText": "same as above", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490252380", "createdAt": "2020-09-17T13:37:19Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -134,6 +167,14 @@ static DiagnosticPos getPosition(Node node) {\n                 return parent;\n             }\n         }\n+        if (parentKind == (SyntaxKind.OBJECT_CONSTRUCTOR) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.LOCAL_VAR_DECL)) {\n+            return grandParent;\n+        }\n+        if (parentKind == (SyntaxKind.TYPE_CAST_PARAM) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.TYPE_CAST_EXPRESSION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdce13f26e83ff1b287228902f068e95bd5a2616"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NDE3Mg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490284172", "createdAt": "2020-09-17T14:18:12Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -134,6 +167,14 @@ static DiagnosticPos getPosition(Node node) {\n                 return parent;\n             }\n         }\n+        if (parentKind == (SyntaxKind.OBJECT_CONSTRUCTOR) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.LOCAL_VAR_DECL)) {\n+            return grandParent;\n+        }\n+        if (parentKind == (SyntaxKind.TYPE_CAST_PARAM) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.TYPE_CAST_EXPRESSION)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MjM4MA=="}, "originalCommit": {"oid": "bdce13f26e83ff1b287228902f068e95bd5a2616"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzU0OTM5OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzo0NDoyNlrOHTi8Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxNTo1MVrOHTkdBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1NzQ2Ng==", "bodyText": "Shall we invert the condition with a continue?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490257466", "createdAt": "2020-09-17T13:44:26Z", "author": {"login": "nadeeshaan"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -244,15 +290,90 @@ static Token formatToken(Token token, int leadingSpaces, int trailingSpaces, int\n         if (token == null) {\n             return token;\n         }\n-        MinutiaeList newLeadingMinutiaeList = modifyMinutiaeList(leadingSpaces, leadingNewLines);\n-        MinutiaeList newTrailingMinutiaeList = modifyMinutiaeList(trailingSpaces, trailingNewLines);\n+        MinutiaeList newLeadingMinutiaeList = preserveComments(token.leadingMinutiae(), trailingNewLines)\n+                .add(createWhitespaceMinutiae(getWhiteSpaces(leadingSpaces, leadingNewLines)));\n+        MinutiaeList newTrailingMinutiaeList = preserveComments(token.trailingMinutiae(), trailingNewLines)\n+                .add(createWhitespaceMinutiae(getWhiteSpaces(trailingSpaces, trailingNewLines)));\n \n         return token.modify(newLeadingMinutiaeList, newTrailingMinutiaeList);\n     }\n \n-    private static MinutiaeList modifyMinutiaeList(int spaces, int newLines) {\n-        Minutiae minutiae = createWhitespaceMinutiae(getWhiteSpaces(spaces, newLines));\n-        return createMinutiaeList(minutiae);\n+    private static MinutiaeList preserveComments(MinutiaeList minutiaeList, int trailingNewLines) {\n+        MinutiaeList minutiaes = AbstractNodeFactory.createEmptyMinutiaeList();\n+        if (minutiaeList.size() > 0) {\n+            int count = commentCount(minutiaeList);\n+            if (count > 0) {\n+                int processedCount = 0;\n+                for (int i = 0; i < minutiaeList.size(); i++) {\n+                    Minutiae minutiae = minutiaeList.get(i);\n+                    minutiaes = minutiaes.add(minutiae);\n+                    if (minutiae.kind() == SyntaxKind.COMMENT_MINUTIAE) {\n+                        processedCount++;\n+                        if (processedCount == count) {\n+                            if (trailingNewLines == 0) {\n+                                minutiaes = minutiaes.add(AbstractNodeFactory\n+                                        .createEndOfLineMinutiae(System.getProperty(LINE_SEPARATOR)));\n+                            }\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return minutiaes;\n+    }\n+\n+    private static int commentCount(MinutiaeList minutiaeList) {\n+        int count = 0;\n+        for (int i = 0; i < minutiaeList.size(); i++) {\n+            if (minutiaeList.get(i).kind() == SyntaxKind.COMMENT_MINUTIAE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdce13f26e83ff1b287228902f068e95bd5a2616"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MjI0NQ==", "bodyText": "This method checks the number of comment minutiaes available inside the minutiae list. Therefore, the entire list should be looped.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490282245", "createdAt": "2020-09-17T14:15:51Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -244,15 +290,90 @@ static Token formatToken(Token token, int leadingSpaces, int trailingSpaces, int\n         if (token == null) {\n             return token;\n         }\n-        MinutiaeList newLeadingMinutiaeList = modifyMinutiaeList(leadingSpaces, leadingNewLines);\n-        MinutiaeList newTrailingMinutiaeList = modifyMinutiaeList(trailingSpaces, trailingNewLines);\n+        MinutiaeList newLeadingMinutiaeList = preserveComments(token.leadingMinutiae(), trailingNewLines)\n+                .add(createWhitespaceMinutiae(getWhiteSpaces(leadingSpaces, leadingNewLines)));\n+        MinutiaeList newTrailingMinutiaeList = preserveComments(token.trailingMinutiae(), trailingNewLines)\n+                .add(createWhitespaceMinutiae(getWhiteSpaces(trailingSpaces, trailingNewLines)));\n \n         return token.modify(newLeadingMinutiaeList, newTrailingMinutiaeList);\n     }\n \n-    private static MinutiaeList modifyMinutiaeList(int spaces, int newLines) {\n-        Minutiae minutiae = createWhitespaceMinutiae(getWhiteSpaces(spaces, newLines));\n-        return createMinutiaeList(minutiae);\n+    private static MinutiaeList preserveComments(MinutiaeList minutiaeList, int trailingNewLines) {\n+        MinutiaeList minutiaes = AbstractNodeFactory.createEmptyMinutiaeList();\n+        if (minutiaeList.size() > 0) {\n+            int count = commentCount(minutiaeList);\n+            if (count > 0) {\n+                int processedCount = 0;\n+                for (int i = 0; i < minutiaeList.size(); i++) {\n+                    Minutiae minutiae = minutiaeList.get(i);\n+                    minutiaes = minutiaes.add(minutiae);\n+                    if (minutiae.kind() == SyntaxKind.COMMENT_MINUTIAE) {\n+                        processedCount++;\n+                        if (processedCount == count) {\n+                            if (trailingNewLines == 0) {\n+                                minutiaes = minutiaes.add(AbstractNodeFactory\n+                                        .createEndOfLineMinutiae(System.getProperty(LINE_SEPARATOR)));\n+                            }\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return minutiaes;\n+    }\n+\n+    private static int commentCount(MinutiaeList minutiaeList) {\n+        int count = 0;\n+        for (int i = 0; i < minutiaeList.size(); i++) {\n+            if (minutiaeList.get(i).kind() == SyntaxKind.COMMENT_MINUTIAE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1NzQ2Ng=="}, "originalCommit": {"oid": "bdce13f26e83ff1b287228902f068e95bd5a2616"}, "originalPosition": 170}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4963, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}