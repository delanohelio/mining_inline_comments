{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDkyMjYx", "number": 21488, "title": "Add remove and removeIfHasKey methods for both records and maps.", "bodyText": "Purpose\n\nWith this PR, remove langlib method now supports for records where the key is a rest or optional field.\n\nWe also have introduced a new langlib method removeIfHasKey which supports both maps and records.\nFixes #21235\nFixes #18873\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-05T06:30:23Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488", "merged": true, "mergeCommit": {"oid": "490445d42e776f49d8c127470acd3e305814a7e5"}, "closed": true, "closedAt": "2020-03-10T22:07:38Z", "author": {"login": "dulvinw"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ9tlaAH2gAyMzg0MDkyMjYxOjEwYjAwZjJiM2I4OTc2NGI0NmY3Y2E5MDBlMzI2NzFkMTVlMDU0NWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMZ82iAFqTM3MjM1NTA4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "10b00f2b3b89764b46f7ca900e32671d15e0545c", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10b00f2b3b89764b46f7ca900e32671d15e0545c", "committedDate": "2020-03-03T08:05:24Z", "message": "Add support to perform remove method on Records."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fda499eeb2669e186640a0ec7e80def848b80bb0", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fda499eeb2669e186640a0ec7e80def848b80bb0", "committedDate": "2020-03-03T08:05:24Z", "message": "Fix checkstyle errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd0742f532160186957e66cf271dd42c6ecada1c", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd0742f532160186957e66cf271dd42c6ecada1c", "committedDate": "2020-03-03T08:05:24Z", "message": "Fix lang-lib test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f64be35ef944589d1d2a15e2d2fbe272cd008594", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f64be35ef944589d1d2a15e2d2fbe272cd008594", "committedDate": "2020-03-03T08:05:24Z", "message": "Add review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9decf6b445289f34e33d19a0d6e257678814f966", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9decf6b445289f34e33d19a0d6e257678814f966", "committedDate": "2020-03-03T08:05:24Z", "message": "Support remove all for records"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41075a5ceb308c4b6fade83cffb54561098774af", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41075a5ceb308c4b6fade83cffb54561098774af", "committedDate": "2020-03-03T08:05:24Z", "message": "Checkstyle Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7be4ee789a05bc89d3c11e8f815910bc9ca4f225", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7be4ee789a05bc89d3c11e8f815910bc9ca4f225", "committedDate": "2020-03-04T05:45:44Z", "message": "Add support to perform remove method on Records."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99bc83c2048f5b422c210381cf3c781226d806cb", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/99bc83c2048f5b422c210381cf3c781226d806cb", "committedDate": "2020-03-04T05:45:44Z", "message": "Fix checkstyle errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3ebfc6a7fe5eb49d5e5049458093d024cf1d580", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3ebfc6a7fe5eb49d5e5049458093d024cf1d580", "committedDate": "2020-03-04T05:45:44Z", "message": "Fix lang-lib test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd097d8cd83dfa767130fe5d306d81a6c45e9394", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd097d8cd83dfa767130fe5d306d81a6c45e9394", "committedDate": "2020-03-04T05:45:44Z", "message": "Add review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70984181180b1f9045e5eef2fe4ae3dd0dd6add3", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/70984181180b1f9045e5eef2fe4ae3dd0dd6add3", "committedDate": "2020-03-04T05:45:44Z", "message": "Support remove all for records"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73dcf851a35b704b74bba1bd27163973bbca9404", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73dcf851a35b704b74bba1bd27163973bbca9404", "committedDate": "2020-03-04T05:45:44Z", "message": "Checkstyle Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30e27bd1022abae00fe54770b758f037ca59da38", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30e27bd1022abae00fe54770b758f037ca59da38", "committedDate": "2020-03-04T08:04:24Z", "message": "Add changes to java backend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d2c1cd051425269edeb73959b641b1a27ef8e76", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d2c1cd051425269edeb73959b641b1a27ef8e76", "committedDate": "2020-03-04T08:08:54Z", "message": "Merge branch 'remove-impl' of https://github.com/ballerina-platform/ballerina-lang into remove-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de4749c94638e4e2bcb88743a968beb164beda47", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/de4749c94638e4e2bcb88743a968beb164beda47", "committedDate": "2020-03-04T10:07:34Z", "message": "Checkstyle Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1fa41c73011f31af3ca444ba6e979604b45bbcf", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1fa41c73011f31af3ca444ba6e979604b45bbcf", "committedDate": "2020-03-05T05:25:05Z", "message": "Merge pull request #21471 from dulvinw/remove-impl\n\nAdd changes related to remove implementation of records"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04fec55142654310bb492463e38836d6e61ca3e9", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04fec55142654310bb492463e38836d6e61ca3e9", "committedDate": "2020-03-05T05:28:59Z", "message": "Add removeIfHasKey to map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "252c3bee4a939a7cc4f1ff29c11f153403a42d1b", "author": {"user": {"login": "nadeeshaan", "name": "Nadeeshaan Gunasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/252c3bee4a939a7cc4f1ff29c11f153403a42d1b", "committedDate": "2020-03-05T05:28:59Z", "message": "fix failing language server completion tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb38104f721152fe1e0e41c65d9018f439b792a1", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb38104f721152fe1e0e41c65d9018f439b792a1", "committedDate": "2020-03-05T05:28:59Z", "message": "Add support for record"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee20a950d44acfc12ff41f7e0e0b0eed38780044", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee20a950d44acfc12ff41f7e0e0b0eed38780044", "committedDate": "2020-03-05T05:28:59Z", "message": "Add tests for records"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54c5692fdb6bf6524133277af4a8719f4849b68d", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/54c5692fdb6bf6524133277af4a8719f4849b68d", "committedDate": "2020-03-05T05:28:59Z", "message": "Add tests to langlib tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba0698bc170af433b86279e2b832b9d00ea03b45", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba0698bc170af433b86279e2b832b9d00ea03b45", "committedDate": "2020-03-05T05:30:07Z", "message": "Add method to a constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d4e37c48a93b5180457f28553839536c1261de06", "committedDate": "2020-03-05T06:27:31Z", "message": "Merge pull request #21459 from KavinduZoysa/issue-21235-dup\n\nAdd removeIfHasKey"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MzY0NDQ2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#pullrequestreview-369364446", "createdAt": "2020-03-05T08:14:33Z", "commit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODoxNDozM1rOFyJ1_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODozNjowNFrOFyKZag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNDM5OA==", "bodyText": "Shall we do these assertions in Ballerina itself?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388134398", "createdAt": "2020-03-05T08:14:33Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordTest.java", "diffHunk": "@@ -323,4 +323,28 @@ public void testInvalidExprsAsRecordLiteralKeys() {\n         BAssertUtil.validateError(result, index++, \"undefined field 'z' in record 'Foo'\", 46, 48);\n         Assert.assertEquals(result.getErrorCount(), index);\n     }\n+\n+    @Test\n+    public void testOptionalRecordRemove() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"removeOptional\");\n+\n+        Assert.assertTrue(((BBoolean) returns[0]).booleanValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNTAwOA==", "bodyText": "These tests also can be written in Ballerina right? Using trap?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388135008", "createdAt": "2020-03-05T08:16:09Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/RecordRemoveNegativeTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.record;\n+\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Negative Test cases for removing required fields in records.\n+ */\n+public class RecordRemoveNegativeTest {\n+\n+    CompileResult result;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/record/negative/record_field_remove.bal\");\n+    }\n+\n+    @Test(expectedExceptions = RuntimeException.class,\n+            expectedExceptionsMessageRegExp = \".*error: \\\\{ballerina/lang.map\\\\}OperationNotSupported.*\")\n+    public void testOpenRecordRequiredFieldRemove() {\n+        BValue[] returns = BRunUtil.invoke(result, \"removeRequiredOpen\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNTQ5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     error err = error(\"Returned value should be nil.\");\n          \n          \n            \n                     panic err;\n          \n          \n            \n                     panic error(\"Returned value should be nil.\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388135491", "createdAt": "2020-03-05T08:17:26Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/closed_record.bal", "diffHunk": "@@ -301,3 +301,86 @@ function addStringToMapValue(string s) returns string {\n     mapValue = mapValue + s;\n     return mapValue;\n }\n+\n+type FooRecord record {|\n+    string a;\n+    int b?;\n+    int...;\n+|};\n+\n+function removeOptional() returns boolean {\n+    FooRecord fooRecord = {a : \"a\", b : 1};\n+    _ = fooRecord.remove(\"b\");\n+    int? testValue = fooRecord?.b;\n+    if (testValue is ()) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n+\n+function removeRest() returns boolean {\n+    FooRecord fooRecord = { a: \"a\", b : 1, \"c\" : 10};\n+    _ = fooRecord.remove(\"c\");\n+    anydata testValue = fooRecord[\"c\"];\n+    if (testValue is ()) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n+\n+type Student record {|\n+    int id;\n+    string name?;\n+    Grades...;\n+|};\n+\n+type Grades record {|\n+    int maths;\n+    int physics;\n+\n+    int...;\n+|};\n+\n+function removeIfHasKeyOptional() {\n+    Student s = {id : 1, name : \"Andrew\"};\n+    string? n = <string?> s.removeIfHasKey(\"name\");\n+    if (n is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+\n+    if (<string>n !== \"Andrew\") {\n+         error err = error(\"Returned value should equals 'Andrew'.\");\n+         panic err;\n+    }\n+\n+    var age = s.removeIfHasKey(\"age\");\n+    if !(age is ()) {\n+         error err = error(\"Returned value should be nil.\");\n+         panic err;\n+    }\n+}\n+\n+function removeIfHasKeyRest() {\n+    Grades g1 = {maths: 80, physics:75};\n+    Student s = {id : 1, name : \"Andrew\", \"grade\": g1};\n+    Grades? g2 = <Grades?> s.removeIfHasKey(\"grade\");\n+    if (g2 is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+\n+    Grades g3 = <Grades>g2;\n+    if !(g3.maths == g1.maths && g3.physics == g1.physics) {\n+         error err = error(\"Returned value should be identical with expected value.\");\n+         panic err;\n+    }\n+\n+    var g4 = s.removeIfHasKey(\"grade\");\n+    if !(g4 is ()) {\n+         error err = error(\"Returned value should be nil.\");\n+         panic err;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNjkxMQ==", "bodyText": "Do we need a separate method for this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388136911", "createdAt": "2020-03-05T08:20:52Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzEwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isValid = checkField(m, k);\n          \n          \n            \n                            if (!isValid) {\n          \n          \n            \n                                return;\n          \n          \n            \n                            }\n          \n          \n            \n                            if (!m.containsKey(k)) {\n          \n          \n            \n                                return;\n          \n          \n            \n                            }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388137105", "createdAt": "2020-03-05T08:21:24Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzQwNg==", "bodyText": "Shall we rename this to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static boolean checkForRequiredFields(BRecordType type, String k) {\n          \n          \n            \n                private static boolean isRequiredField(BRecordType type, String k) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388137406", "createdAt": "2020-03-05T08:22:07Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);\n+    }\n+\n+    private static boolean checkForRequiredFields(BRecordType type, String k) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzc4Mw==", "bodyText": "Assuming we rename,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n          \n          \n            \n                            if (isRequired) {\n          \n          \n            \n                            if (isRequiredField((BRecordType) type, k)) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388137783", "createdAt": "2020-03-05T08:22:58Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MDg2Nw==", "bodyText": "Shall we check by tag and also return early if not a record type?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (type instanceof BRecordType) {\n          \n          \n            \n                    if (type.tag != TypeTags.RECORD_TYPE_TAG) {\n          \n          \n            \n                            return;\n          \n          \n            \n                    }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388140867", "createdAt": "2020-03-05T08:30:05Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);\n+    }\n+\n+    private static boolean checkForRequiredFields(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type instanceof BRecordType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MTIxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isRequired = checkForRequiredFields((BRecordType) type, key);\n          \n          \n            \n                            if (isRequired) {\n          \n          \n            \n                            if (isRequiredField((BRecordType) type, key)) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388141218", "createdAt": "2020-03-05T08:30:55Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);\n+    }\n+\n+    private static boolean checkForRequiredFields(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type instanceof BRecordType) {\n+            Map<String, BField> fields = ((BRecordType) type).getFields();\n+            for (String key : fields.keySet()) {\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, key);\n+                if (isRequired) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MjIwMA==", "bodyText": "Should we add more info to say it failed since it is a required field?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388142200", "createdAt": "2020-03-05T08:33:11Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MzQ2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     error err = error(\"Returned value should equals 'Andrew'.\");\n          \n          \n            \n                     panic err;\n          \n          \n            \n                     panic error(\"Returned value should equals 'Andrew'.\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388143466", "createdAt": "2020-03-05T08:36:04Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -39,6 +39,25 @@ function testRemoveAll() returns map<string> {\n     return countriesDup;\n }\n \n+function testRemoveIfHasKey() {\n+    map<string> student = {id:\"1\", name:\"Andrew\", country:\"Sri Lanka\", city:\"Colombo\"};\n+    string? s = student.removeIfHasKey(\"name\");\n+    if (s is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+    if (<string> s != \"Andrew\") {\n+         error err = error(\"Returned value should equals 'Andrew'.\");\n+         panic err;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MzgyNjg4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#pullrequestreview-369382688", "createdAt": "2020-03-05T08:46:31Z", "commit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0NjozMlrOFyKtOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0NjozMlrOFyKtOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0ODUzOQ==", "bodyText": "This could happen for records too right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388148539", "createdAt": "2020-03-05T08:46:32Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+import org.wso2.ballerinalang.compiler.util.Constants;\n+\n+import static org.ballerinalang.jvm.MapUtils.checkIsMapOnlyOperation;\n+import static org.ballerinalang.jvm.MapUtils.checkValidFieldForRecord;\n+\n+/**\n+ * Extern function to remove element from the map if key exists.\n+ * ballerina.model.map:removeIfHasKey(string)\n+ *\n+ * @since 1.2.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.map\", functionName = \"removeIfHasKey\",\n+        args = {@Argument(name = \"m\", type = TypeKind.MAP), @Argument(name = \"k\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.ANY)},\n+        isPublic = true\n+)\n+public class RemoveIfHasKey {\n+\n+    public static Object removeIfHasKey(Strand strand, MapValue<?, ?> m, String k) {\n+        String op = Constants.REMOVE_IF_HAS_KEY;\n+\n+        checkIsMapOnlyOperation(m.getType(), op);\n+        checkValidFieldForRecord(m, k, op);\n+        try {\n+            return m.remove(k);\n+        } catch (org.ballerinalang.jvm.util.exceptions.BLangFreezeException e) {\n+            throw BallerinaErrors.createError(e.getMessage(),\n+                    \"Failed to remove element from map: \" + e.getDetail());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e37c48a93b5180457f28553839536c1261de06"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b485f541a5241682c95ab8b382055bc4ee958766", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b485f541a5241682c95ab8b382055bc4ee958766", "committedDate": "2020-03-05T11:01:13Z", "message": "Review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a955f4ae9fefc1fd169d702af4abf09b8d70f1", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/24a955f4ae9fefc1fd169d702af4abf09b8d70f1", "committedDate": "2020-03-05T11:41:07Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75790dbe0e4204caf614c67898769fa6469be3e7", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/75790dbe0e4204caf614c67898769fa6469be3e7", "committedDate": "2020-03-05T11:53:46Z", "message": "Refactor open record tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7d80bd417655d274778fd6af994f5ecb8812774", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7d80bd417655d274778fd6af994f5ecb8812774", "committedDate": "2020-03-05T11:56:22Z", "message": "Merge pull request #21498 from dulvinw/remove-impl\n\nFix review suggestions for remove method implementation in temp-branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b60bc7a35de076f2acc63c066ffd1064f29bcb9", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b60bc7a35de076f2acc63c066ffd1064f29bcb9", "committedDate": "2020-03-05T14:40:40Z", "message": "Revert unwanted bal changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb", "author": {"user": {"login": "hasithaa", "name": "Hasitha Aravinda"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff5837a3bfc6c4189224da865a6bb23796aeadbb", "committedDate": "2020-03-05T14:46:44Z", "message": "Merge pull request #21503 from dulvinw/remove-impl\n\nRevert unwanted bal changes in the remove-impl branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ed811e38a0b563bebfd57b7567c071025771908", "author": {"user": {"login": "nadeeshaan", "name": "Nadeeshaan Gunasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ed811e38a0b563bebfd57b7567c071025771908", "committedDate": "2020-03-06T03:39:44Z", "message": "sync with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7baf6a03305175049a23ba163127a317d29d76b4", "author": {"user": {"login": "nadeeshaan", "name": "Nadeeshaan Gunasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7baf6a03305175049a23ba163127a317d29d76b4", "committedDate": "2020-03-06T03:51:10Z", "message": "fix failing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDc5MjAw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#pullrequestreview-370079200", "createdAt": "2020-03-06T04:42:41Z", "commit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0Mjo0MVrOFytAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0Mjo0MVrOFytAgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDUyOQ==", "bodyText": "Is this for the use of remove methods? If so, shall we make the error message specific? Something like below:\nfailed to remove field: 'foo' is a required field in 'FooRec'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388710529", "createdAt": "2020-03-06T04:42:41Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type.getTag() != TypeTags.RECORD_TYPE_TAG) {\n+            return;\n+        }\n+        Map<String, BField> fields = ((BRecordType) type).getFields();\n+        for (String key : fields.keySet()) {\n+            if (isRequiredField((BRecordType) type, key)) {\n+                throw createOpNotSupportedErrorForRecord(type, op);\n+            }\n+        }\n+    }\n+\n+    private static ErrorValue createOpNotSupportedErrorForRecord(BType type, String op) {\n+        return BallerinaErrors.createError(getModulePrefixedReason(MAP_LANG_LIB,\n+                OPERATION_NOT_SUPPORTED_IDENTIFIER),\n+                format(\"%s not supported on type '%s' since there are required fields.\", op, type.getQualifiedName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDg0NzI5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#pullrequestreview-370084729", "createdAt": "2020-03-06T05:07:29Z", "commit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTowNzozMFrOFytS4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTowNzozMFrOFytS4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTIzMw==", "bodyText": "Since we are checking if this particular type is a type param, shall we rename this method to isTypeParam()? Check the isTypeParam() method in TypeParamAnalyzer", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388715233", "createdAt": "2020-03-06T05:07:30Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java", "diffHunk": "@@ -217,9 +218,16 @@ public boolean isPureType() {\n \n     private static LinkedHashSet<BType> toFlatTypeSet(LinkedHashSet<BType> types) {\n         return types.stream()\n-                .flatMap(type -> type.tag == TypeTags.UNION ?\n+                .flatMap(type -> type.tag == TypeTags.UNION && !isTypeParamAvailable(type) ?\n                         ((BUnionType) type).memberTypes.stream() : Stream.of(type))\n                 .collect(Collectors.toCollection(LinkedHashSet::new));\n     }\n \n+    private static boolean isTypeParamAvailable(BType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDg1MTc2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#pullrequestreview-370085176", "createdAt": "2020-03-06T05:09:20Z", "commit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTowOToyMFrOFytUQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTowOToyMFrOFytUQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTU4Ng==", "bodyText": "Can't we define this constant somewhere else? This constant seems like a random constant in this particular class. Even the one above it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388715586", "createdAt": "2020-03-06T05:09:20Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/Constants.java", "diffHunk": "@@ -47,4 +47,7 @@ private Constants() {\n     public static final int MAX_UNICODE = 0x10FFFF;\n \n     public static final String DESUGARED_MAPPING_CONSTR_KEY = \"$mapping$var$\";\n+\n+    public static final String REMOVE_IF_HAS_KEY = \"removeIfHasKey()\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDg1NTMy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#pullrequestreview-370085532", "createdAt": "2020-03-06T05:10:52Z", "commit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNToxMDo1MlrOFytVvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNToxMDo1MlrOFytVvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTk2Ng==", "bodyText": "Shall we make this a static constant?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388715966", "createdAt": "2020-03-06T05:10:52Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Remove.java", "diffHunk": "@@ -42,13 +44,17 @@\n public class Remove {\n \n     public static Object remove(Strand strand, MapValue<?, ?> m, String k) {\n-        checkIsMapOnlyOperation(m.getType(), \"remove()\");\n+        BType type = m.getType();\n+        String op = \"remove()\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/05dcb928886d4997bf3867af5387970e4cf8dbd9", "committedDate": "2020-03-06T08:27:26Z", "message": "Merge pull request #21504 from nadeeshaan/remove-impl-local\n\nResolve conflicts and fix failing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTU1NDkz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#pullrequestreview-370155493", "createdAt": "2020-03-06T08:37:13Z", "commit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODozNzoxM1rOFywycw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowNTowNFrOFyxh8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MjQ2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BType type = m.getType();\n          \n          \n            \n                    switch (type.getTag()) {\n          \n          \n            \n                        case TypeTags.RECORD_TYPE_TAG:\n          \n          \n            \n                            if (!m.containsKey(k)) {\n          \n          \n            \n                                return;\n          \n          \n            \n                            }\n          \n          \n            \n                            if (isRequiredField((BRecordType) type, k)) {\n          \n          \n            \n                                throw createOpNotSupportedErrorForRecord(type, op);\n          \n          \n            \n                            }\n          \n          \n            \n                            return;\n          \n          \n            \n                        default:\n          \n          \n            \n                            return;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (m.getType().getTag() != TypeTags.RECORD_TYPE_TAG) {\n          \n          \n            \n                        return;        \n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (!m.containsKey(k)) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (isRequiredField((BRecordType) type, k)) {\n          \n          \n            \n                        throw createOpNotSupportedErrorForRecord(type, op);\n          \n          \n            \n                    }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388772467", "createdAt": "2020-03-06T08:37:13Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3Mjc0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388772742", "createdAt": "2020-03-06T08:37:52Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MzU4MQ==", "bodyText": "+1, I think we should mention the specific field when an attempt to remove a single field fails.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388773581", "createdAt": "2020-03-06T08:39:54Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type.getTag() != TypeTags.RECORD_TYPE_TAG) {\n+            return;\n+        }\n+        Map<String, BField> fields = ((BRecordType) type).getFields();\n+        for (String key : fields.keySet()) {\n+            if (isRequiredField((BRecordType) type, key)) {\n+                throw createOpNotSupportedErrorForRecord(type, op);\n+            }\n+        }\n+    }\n+\n+    private static ErrorValue createOpNotSupportedErrorForRecord(BType type, String op) {\n+        return BallerinaErrors.createError(getModulePrefixedReason(MAP_LANG_LIB,\n+                OPERATION_NOT_SUPPORTED_IDENTIFIER),\n+                format(\"%s not supported on type '%s' since there are required fields.\", op, type.getQualifiedName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDUyOQ=="}, "originalCommit": {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MTQ0OA==", "bodyText": "Shall we make this a switch instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388781448", "createdAt": "2020-03-06T08:58:01Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "diffHunk": "@@ -997,19 +999,89 @@ private void createRecordRemoveMethod(ClassWriter cw) {\n             mv.visitEnd();\n         }\n \n-        private void createRecordClearMethod(ClassWriter cw) {\n+        private void createRecordClearMethod(ClassWriter cw, List<BField> fields, String className) {\n             // throw an UnsupportedOperationException, since remove is not supported by for records.\n             MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"remove\", String.format(\"(L%s;)L%s;\", OBJECT, OBJECT),\n                     String.format(\"(L%s;)TV;\", OBJECT), null);\n             mv.visitCode();\n-            mv.visitTypeInsn(NEW, UNSUPPORTED_OPERATION_EXCEPTION);\n-            mv.visitInsn(DUP);\n-            mv.visitMethodInsn(INVOKESPECIAL, UNSUPPORTED_OPERATION_EXCEPTION, \"<init>\", \"()V\", false);\n-            mv.visitInsn(ATHROW);\n+\n+            int fieldNameRegIndex = 1;\n+            int strKeyVarIndex = 2;\n+\n+            // cast key to java.lang.String\n+            mv.visitVarInsn(ALOAD, fieldNameRegIndex);\n+            mv.visitTypeInsn(CHECKCAST, STRING_VALUE);\n+            mv.visitVarInsn(ASTORE, strKeyVarIndex);\n+\n+            mv.visitVarInsn(ALOAD, 0);\n+            mv.visitMethodInsn(INVOKESPECIAL, MAP_VALUE_IMPL, \"validateFreezeStatus\", \"()V\", false);\n+\n+            // sort the fields before generating switch case\n+            @Nilable List<BField> sortedFields = new ArrayList<>(fields);\n+            sortedFields.sort(NAME_HASH_COMPARATOR);\n+\n+            Label defaultCaseLabel = new Label();\n+            List<Label> labels = createLabelsForSwitch(mv, strKeyVarIndex, sortedFields, defaultCaseLabel);\n+            List<Label> targetLabels = createLabelsForEqualCheck(mv, strKeyVarIndex, sortedFields, labels,\n+                    defaultCaseLabel);\n+\n+            int i = 0;\n+            for (BField optionalField : sortedFields) {\n+                BField field = getObjectField(optionalField);\n+                Label targetLabel = targetLabels.get(i);\n+                mv.visitLabel(targetLabel);\n+\n+                //Setting isPresent as zero\n+                if (this.isOptionalRecordField(field)) {\n+                    String fieldName = field.name.value;\n+                    mv.visitVarInsn(ALOAD, 0);\n+                    mv.visitInsn(ICONST_0);\n+                    mv.visitFieldInsn(PUTFIELD, className, this.getFieldIsPresentFlagName(fieldName),\n+                            getTypeDesc(symbolTable.booleanType, false));\n+\n+                    // load the existing value to return\n+                    mv.visitVarInsn(ALOAD, 0);\n+                    mv.visitFieldInsn(GETFIELD, className, fieldName, getTypeDesc(field.type, false));\n+                    addBoxInsn(mv, field.type);\n+\n+                    // Set default value for reference types\n+                    if (checkIfValueIsJReferenceType(field.type)) {\n+                        mv.visitVarInsn(ALOAD, 0);\n+                        mv.visitInsn(ACONST_NULL);\n+                        mv.visitFieldInsn(PUTFIELD, className, fieldName, getTypeDesc(field.type, false));\n+                    }\n+\n+                    mv.visitInsn(ARETURN);\n+                } else {\n+                    mv.visitTypeInsn(NEW, UNSUPPORTED_OPERATION_EXCEPTION);\n+                    mv.visitInsn(DUP);\n+                    mv.visitMethodInsn(INVOKESPECIAL, UNSUPPORTED_OPERATION_EXCEPTION, \"<init>\", \"()V\", false);\n+                    mv.visitInsn(ATHROW);\n+                }\n+                i += 1;\n+            }\n+\n+            // default case\n+            mv.visitLabel(defaultCaseLabel);\n+            mv.visitVarInsn(ALOAD, 0);\n+            mv.visitVarInsn(ALOAD, strKeyVarIndex);\n+            mv.visitMethodInsn(INVOKESPECIAL, MAP_VALUE_IMPL, \"remove\",\n+                    String.format(\"(L%s;)L%s;\", OBJECT, OBJECT), false);\n+            mv.visitInsn(ARETURN);\n+\n             mv.visitMaxs(0, 0);\n             mv.visitEnd();\n         }\n \n+        private boolean checkIfValueIsJReferenceType(BType bType) {\n+            if ((bType.getKind() == TypeKind.INT) || (bType.getKind() == TypeKind.BOOLEAN) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MTk2Mg==", "bodyText": "We can ignore the return values in these tests.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BValue[] returns = BRunUtil.invoke(compileResult, \"removeOptional\");\n          \n          \n            \n                    BRunUtil.invoke(compileResult, \"removeOptional\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388781962", "createdAt": "2020-03-06T08:59:06Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/OpenRecordTest.java", "diffHunk": "@@ -481,6 +481,26 @@ public void testInvalidExprsAsRecordLiteralKeys() {\n                 \"expected a string literal or an expression\", 28, 26);\n     }\n \n+    @Test\n+    public void testOptionalRecordRemove() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"removeOptional\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MjE2Ng==", "bodyText": "Can we move these tests to Ballerina?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388782166", "createdAt": "2020-03-06T08:59:32Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/map/MapAccessExprTest.java", "diffHunk": "@@ -197,4 +197,28 @@ public void testMapRemovePositive() {\n     public void testMapRemoveNegative() {\n         BRunUtil.invoke(compileResult, \"testMapRemoveNegative\");\n     }\n+\n+    @Test(description = \"Test removeIfHasKey if key exists.\")\n+    public void testRemoveIfHasKeyPositive1() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"testRemoveIfHasKeyPositive1\");\n+        Assert.assertTrue(((BBoolean) returns[0]).booleanValue(), \"Expected booleans to be identified as equal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MjMyMQ==", "bodyText": "We can remove the else block.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388782321", "createdAt": "2020-03-06T08:59:54Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/negative/record_field_remove.bal", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+type Foo record {\n+    string a;\n+    int b?;\n+};\n+\n+function removeRequiredOpen() {\n+    Foo foo = {a : \"a\", b : 1};\n+    _ = foo.remove(\"a\");\n+}\n+\n+function testRemoveRequiredOpen() {\n+    error? result = trap removeRequiredOpen();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {\n+        panic error(\"Wrong Result\");\n+    }\n+}\n+\n+type Bar record {|\n+    string a;\n+    int b?;\n+|};\n+\n+function removeRequiredClosed() {\n+    Bar bar = {a : \"a\", b : 1};\n+    _ = bar.remove(\"a\");\n+}\n+\n+function testRemoveRequiredClosed() {\n+    error? result = trap removeRequiredClosed();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NDYyNA==", "bodyText": "Shall we panic with a proper error.\nUse a proper string without spaces, e.g., \"AssertionError\", as the reason and the include a \"message\" field in the detail field with more info.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388784624", "createdAt": "2020-03-06T09:05:04Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/negative/record_field_remove.bal", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+type Foo record {\n+    string a;\n+    int b?;\n+};\n+\n+function removeRequiredOpen() {\n+    Foo foo = {a : \"a\", b : 1};\n+    _ = foo.remove(\"a\");\n+}\n+\n+function testRemoveRequiredOpen() {\n+    error? result = trap removeRequiredOpen();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {\n+        panic error(\"Wrong Result\");\n+    }\n+}\n+\n+type Bar record {|\n+    string a;\n+    int b?;\n+|};\n+\n+function removeRequiredClosed() {\n+    Bar bar = {a : \"a\", b : 1};\n+    _ = bar.remove(\"a\");\n+}\n+\n+function testRemoveRequiredClosed() {\n+    error? result = trap removeRequiredClosed();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {\n+        panic error(\"Wrong Result\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1bd01fffb3fd3e8e70ea65a25504d2f02998151", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1bd01fffb3fd3e8e70ea65a25504d2f02998151", "committedDate": "2020-03-06T09:41:56Z", "message": "Change the test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjc3OTU0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#pullrequestreview-371677954", "createdAt": "2020-03-10T04:38:50Z", "commit": {"oid": "b1bd01fffb3fd3e8e70ea65a25504d2f02998151"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDozODo1MFrOF0BUCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDozODo1MFrOF0BUCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MTc4NA==", "bodyText": "This method is doing the same thing as the checkValidFieldForRecord() method right? Shall we get rid of one of these? Also simplify the logic as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390091784", "createdAt": "2020-03-10T04:38:50Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1bd01fffb3fd3e8e70ea65a25504d2f02998151"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "554460400c3a192b00fd91cc8ecad72bca6a1a1e", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/554460400c3a192b00fd91cc8ecad72bca6a1a1e", "committedDate": "2020-03-10T06:08:45Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into remove-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "413853fd8c7332021d7f1642c9dc255a9a8f78a6", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/413853fd8c7332021d7f1642c9dc255a9a8f78a6", "committedDate": "2020-03-10T06:10:26Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33665df621fc75bdb68ecb7685f8ebca1954ac51", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33665df621fc75bdb68ecb7685f8ebca1954ac51", "committedDate": "2020-03-10T06:15:58Z", "message": "Merge branch 'remove-impl' of https://github.com/ballerina-platform/ballerina-lang into remove-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdb961927ecb22a2ff2b786fbfe079327babdbb2", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cdb961927ecb22a2ff2b786fbfe079327babdbb2", "committedDate": "2020-03-10T09:58:05Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b00fbffe298a364785472790455a11f6541becad", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b00fbffe298a364785472790455a11f6541becad", "committedDate": "2020-03-10T11:31:22Z", "message": "Merge pull request #21583 from dulvinw/remove-impl\n\nRemove impl review suggestions fix for temp branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd87672605747037cb921107a88029cb36d3cf6e", "author": {"user": {"login": "hasithaa", "name": "Hasitha Aravinda"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd87672605747037cb921107a88029cb36d3cf6e", "committedDate": "2020-03-10T19:31:25Z", "message": "Merge branch 'master' into remove-impl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzU1MDgz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#pullrequestreview-372355083", "createdAt": "2020-03-10T22:07:16Z", "commit": {"oid": "fd87672605747037cb921107a88029cb36d3cf6e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3966, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}