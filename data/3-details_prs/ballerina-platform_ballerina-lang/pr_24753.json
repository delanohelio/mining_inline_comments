{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MzY4NzEx", "number": 24753, "title": "Add fail expression/action implementation", "bodyText": "Purpose\n\nFixes #24421 ...\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-07-15T09:43:20Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753", "merged": true, "mergeCommit": {"oid": "05a2abd698c827e1368c6524225e2a9701a7789f"}, "closed": true, "closedAt": "2020-07-16T11:15:16Z", "author": {"login": "mohanvive"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcy5DEPAH2gAyNDQ5MzY4NzExOjE4ZGQ5MTdjMTFhNDc3YzZhY2YyZDUzM2UyZDg3N2YwNGI4YjJkOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc10phUgFqTQ1MDcwMTU2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "18dd917c11a477c6acf2d533e2d877f04b8b2d90", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18dd917c11a477c6acf2d533e2d877f04b8b2d90", "committedDate": "2020-07-08T11:50:14Z", "message": "Add Fail expression support with Antlr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "588b0b1d7d3d31766733a1f2b210dffd20b3baef", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/588b0b1d7d3d31766733a1f2b210dffd20b3baef", "committedDate": "2020-07-09T06:15:13Z", "message": "Add fail expression support for new parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfef4bac6974e1b98c51978e27b305cac9f18f1e", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cfef4bac6974e1b98c51978e27b305cac9f18f1e", "committedDate": "2020-07-09T06:15:41Z", "message": "Add test cases for fail expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf0fb37625be4731cfdfe8116c24316a39378362", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bf0fb37625be4731cfdfe8116c24316a39378362", "committedDate": "2020-07-09T06:28:41Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into master-new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b15c7cb908d8e359250576c182359472c5d0ca2", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b15c7cb908d8e359250576c182359472c5d0ca2", "committedDate": "2020-07-09T07:09:18Z", "message": "Fix javadoc warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "238fea4c386f81dbc26f453a216573b6ec597161", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/238fea4c386f81dbc26f453a216573b6ec597161", "committedDate": "2020-07-09T07:09:40Z", "message": "Fix test case due to new fail expression keyword"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79dc430949da8e715b2e993d8f497d0fc0c12eea", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79dc430949da8e715b2e993d8f497d0fc0c12eea", "committedDate": "2020-07-09T07:35:54Z", "message": "Add missed parser auto generated files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e93dba1fa6b5ca84f477d89071c1d5fe75cef5d6", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e93dba1fa6b5ca84f477d89071c1d5fe75cef5d6", "committedDate": "2020-07-09T09:19:22Z", "message": "Merge branch 'master' into master-new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4363a66ed8f38525c51ce67fc8790aada7744f51", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4363a66ed8f38525c51ce67fc8790aada7744f51", "committedDate": "2020-07-14T07:56:17Z", "message": "Remove unused grammar definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26d148994a42d423667dfc5e77bae054cbdc91b8", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/26d148994a42d423667dfc5e77bae054cbdc91b8", "committedDate": "2020-07-14T07:56:46Z", "message": "Desugar fail expression as return statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "068b7b802a315e436451acd9b1febcabdb71d105", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/068b7b802a315e436451acd9b1febcabdb71d105", "committedDate": "2020-07-14T07:58:09Z", "message": "Merge branch 'master-new' of https://github.com/mohanvive/ballerina-lang into master-new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec1d748f86d66608a1429ec490207e15f87efff4", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec1d748f86d66608a1429ec490207e15f87efff4", "committedDate": "2020-07-14T09:15:28Z", "message": "set fail expression as action"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a74491f139965bce1fa1b087e8d698d01acdb634", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a74491f139965bce1fa1b087e8d698d01acdb634", "committedDate": "2020-07-15T09:42:08Z", "message": "Desugar fail expr as return statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac835fd005458e4195f9c7449694f0ce512f4e70", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac835fd005458e4195f9c7449694f0ce512f4e70", "committedDate": "2020-07-15T09:44:48Z", "message": "Fix test bal files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4ba366ebbd86459508e3c9e3a3154d2122644124", "committedDate": "2020-07-16T09:28:29Z", "message": "Add testcases and type checker fixes for fail expression"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NjgxMTMx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#pullrequestreview-449681131", "createdAt": "2020-07-16T09:33:38Z", "commit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTozMzozOFrOGyi-1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTozMzozOFrOGyi-1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1NTEyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@code FailExpressionNode} represents a expression which forces to return error.\n          \n          \n            \n             * {@code FailExpressionNode} represents an expression which forces to return error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r455655127", "createdAt": "2020-07-16T09:33:38Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/FailExpressionNode.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * {@code FailExpressionNode} represents a expression which forces to return error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Njg1MjQz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#pullrequestreview-449685243", "createdAt": "2020-07-16T09:39:06Z", "commit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTozOTowNlrOGyjLYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTozOTowNlrOGyjLYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1ODMzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@code FailExpressionNode} represents a expression which forces to return error.\n          \n          \n            \n             * {@code FailExpressionNode} represents an expression which forces to return error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r455658337", "createdAt": "2020-07-16T09:39:06Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangFailExpr.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.expressions.FailExpressionNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.List;\n+\n+/**\n+ * {@code FailExpressionNode} represents a expression which forces to return error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Njg1NjMy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#pullrequestreview-449685632", "createdAt": "2020-07-16T09:39:38Z", "commit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTozOTozOFrOGyjMow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTozOTozOFrOGyjMow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1ODY1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This list caches types that are equivalent to the error type which are returned by the rhs expression.\n          \n          \n            \n                // This list catches types that are equivalent to the error type which are returned by the rhs expression.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r455658659", "createdAt": "2020-07-16T09:39:38Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangFailExpr.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.expressions.FailExpressionNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.List;\n+\n+/**\n+ * {@code FailExpressionNode} represents a expression which forces to return error.\n+ *\n+ * @since Swan Lake\n+ */\n+public class BLangFailExpr extends BLangExpression implements FailExpressionNode {\n+\n+    public BLangExpression expr;\n+\n+    // This list caches types that are equivalent to the error type which are returned by the rhs expression.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Njg2Njcy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#pullrequestreview-449686672", "createdAt": "2020-07-16T09:41:03Z", "commit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0MTowM1rOGyjQEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0MTowM1rOGyjQEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1OTUzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 2.0.0\n          \n          \n            \n             * @since Swan Lake", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r455659539", "createdAt": "2020-07-16T09:41:03Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STFailExpressionNode.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.FailExpressionNode;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * This is a generated internal syntax tree node.\n+ *\n+ * @since 2.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Njg3MTkw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#pullrequestreview-449687190", "createdAt": "2020-07-16T09:41:46Z", "commit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0MTo0NlrOGyjRiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0MTo0NlrOGyjRiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1OTkxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 2.0.0\n          \n          \n            \n             * @since Swan Lake", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r455659912", "createdAt": "2020-07-16T09:41:46Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/FailExpressionNode.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This is a generated syntax tree node.\n+ *\n+ * @since 2.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Njg3ODA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#pullrequestreview-449687806", "createdAt": "2020-07-16T09:42:37Z", "commit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0MjozN1rOGyjTkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwOTo0MjozN1rOGyjTkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MDQzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r455660432", "createdAt": "2020-07-16T09:42:37Z", "author": {"login": "gimantha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/fail-expression.bal", "diffHunk": "@@ -0,0 +1,13 @@\n+\n+public function testFailExpr() returns error {\n+\n+    error err = error(\"Custom error thrown explicitly.\");\n+    error outputErr = fail err;\n+    return outputErr;\n+}\n+\n+public function testFailAction() returns error {\n+\n+    error err = error(\"Custom error thrown explicitly.\");\n+    fail err;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Njg4MTE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#pullrequestreview-449688117", "createdAt": "2020-07-16T09:43:03Z", "commit": {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97045be9173c7822a96002354b927f7f3a081bd6", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97045be9173c7822a96002354b927f7f3a081bd6", "committedDate": "2020-07-16T09:44:31Z", "message": "Update compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/FailExpressionNode.java\n\nCo-authored-by: gimantha <gimantha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65e9d96d40f960f94ccb12e502f7f63150d59953", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/65e9d96d40f960f94ccb12e502f7f63150d59953", "committedDate": "2020-07-16T09:44:39Z", "message": "Update compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangFailExpr.java\n\nCo-authored-by: gimantha <gimantha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff53ccfd37c34874c10bd3691f921b68584d65ad", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff53ccfd37c34874c10bd3691f921b68584d65ad", "committedDate": "2020-07-16T09:44:47Z", "message": "Update compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangFailExpr.java\n\nCo-authored-by: gimantha <gimantha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd213c2a587670dc0cb4f2b29048958b06d2e018", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd213c2a587670dc0cb4f2b29048958b06d2e018", "committedDate": "2020-07-16T09:44:56Z", "message": "Update compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STFailExpressionNode.java\n\nCo-authored-by: gimantha <gimantha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49816d89197289b4bfdaf5f29e0a30e649ca07de", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49816d89197289b4bfdaf5f29e0a30e649ca07de", "committedDate": "2020-07-16T09:45:03Z", "message": "Update compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/FailExpressionNode.java\n\nCo-authored-by: gimantha <gimantha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "819914deae85c3f479a1828ee37bf4ac8e2de204", "author": {"user": {"login": "mohanvive", "name": "Mohanadarshan V"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/819914deae85c3f479a1828ee37bf4ac8e2de204", "committedDate": "2020-07-16T09:45:11Z", "message": "Update tests/jballerina-unit-test/src/test/resources/test-src/query/fail-expression.bal\n\nCo-authored-by: gimantha <gimantha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Njk1MTE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#pullrequestreview-449695117", "createdAt": "2020-07-16T09:52:24Z", "commit": {"oid": "819914deae85c3f479a1828ee37bf4ac8e2de204"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNjcwOTA5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#pullrequestreview-450670909", "createdAt": "2020-07-17T13:46:32Z", "commit": {"oid": "819914deae85c3f479a1828ee37bf4ac8e2de204"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo0NjozMlrOGzTqMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDowNTo1MVrOGzUXgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MjY1Nw==", "bodyText": "I think FAIL_EXPRESSION also should goes to the below block, and parse as an action-statement.\nAdding it here will parse the fail-expression as call-statement, which is not correct.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456452657", "createdAt": "2020-07-17T13:46:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7259,9 +7310,11 @@ private STNode getExpressionAsStatement(STNode expression) {\n             case METHOD_CALL:\n             case FUNCTION_CALL:\n             case CHECK_EXPRESSION:\n+            case FAIL_EXPRESSION:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "819914deae85c3f479a1828ee37bf4ac8e2de204"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2MjM5MA==", "bodyText": "Since we add a new expression, we need to update few other places such as:\n\nisExpression(...)\nisValidExpressionStart(...)\nisValidExprStart(...)\netc..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456462390", "createdAt": "2020-07-17T14:02:43Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4077,6 +4079,8 @@ private STNode parseTerminalExpression(SyntaxKind kind, STNode annots, boolean i\n                 // In the checking action, nested actions are allowed. And that's the only\n                 // place where actions are allowed within an action or an expression.\n                 return parseCheckExpression(isRhsExpr, allowActions, isInConditionalExpr);\n+            case FAIL_KEYWORD:\n+                return parseFailExpression(isRhsExpr, allowActions, isInConditionalExpr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "819914deae85c3f479a1828ee37bf4ac8e2de204"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2NDAzMQ==", "bodyText": "Would be good to add some parser-tests as well, as it validates the tree-structure including nodes types, expr-precedence etc.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456464031", "createdAt": "2020-07-17T14:05:29Z", "author": {"login": "SupunS"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/FailExpressionTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.query;\n+\n+import org.ballerinalang.model.values.BError;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.ballerinalang.test.util.BAssertUtil.validateError;\n+\n+/**\n+ * This contains methods to test fail expressions.\n+ *\n+ * @since Swan Lake\n+ */\n+public class FailExpressionTest {\n+\n+    private CompileResult result;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/query/fail-expression.bal\");\n+    }\n+\n+    @Test(description = \"Test fail expression basic syntax\")\n+    public void testFailExpr() {\n+        BValue[] returnValues = BRunUtil.invoke(result, \"testFailExpr\");\n+        Assert.assertNotNull(returnValues);\n+\n+        Assert.assertTrue(returnValues[0] instanceof BError);\n+        Assert.assertEquals(((BError) returnValues[0]).getMessage(),\n+                \"Custom error thrown explicitly.\");\n+    }\n+\n+    @Test(description = \"Test fail action basic syntax\")\n+    public void testFailAction() {\n+        BValue[] returnValues = BRunUtil.invoke(result, \"testFailAction\");\n+        Assert.assertNotNull(returnValues);\n+\n+        Assert.assertTrue(returnValues[0] instanceof BError);\n+        Assert.assertEquals(((BError) returnValues[0]).getMessage(),\n+                \"Custom error thrown explicitly.\");\n+    }\n+\n+    @Test(description = \"Test negative cases in fail expr\")\n+    public void testFailActionNegative() {\n+        CompileResult negativeResult = BCompileUtil.compile(\"test-src/query/fail-action-negative.bal\");\n+        Assert.assertEquals(negativeResult.getErrorCount(), 1);\n+        int index = 0;\n+\n+        validateError(negativeResult, index++,\n+                \"type 'err' not allowed here; expected an 'error' or a subtype of 'error'.\",\n+                5, 10);\n+    }\n+\n+    @Test(description = \"Test negative cases in fail expr\")\n+    public void testFailExprNegative() {\n+        CompileResult negativeResult = BCompileUtil.compile(\"test-src/query/fail-expression-negative.bal\");\n+        Assert.assertEquals(negativeResult.getErrorCount(), 1);\n+        int index = 0;\n+\n+        validateError(negativeResult, index++,\n+                \"this function must return a result\", 2, 1);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "819914deae85c3f479a1828ee37bf4ac8e2de204"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2NDI1OA==", "bodyText": "Number should be 1337", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456464258", "createdAt": "2020-07-17T14:05:51Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxKind.java", "diffHunk": "@@ -289,6 +290,7 @@\n     XML_STEP_EXPRESSION(1334),\n     XML_NAME_PATTERN_CHAIN(1335),\n     XML_ATOMIC_NAME_PATTERN(1336),\n+    FAIL_EXPRESSION(1336),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "819914deae85c3f479a1828ee37bf4ac8e2de204"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNzAxNTY1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#pullrequestreview-450701565", "createdAt": "2020-07-17T14:24:28Z", "commit": {"oid": "819914deae85c3f479a1828ee37bf4ac8e2de204"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDoyNDoyOFrOGzVDEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDoyNDoyOFrOGzVDEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ3NTQwOQ==", "bodyText": "Need to add this to the resumeParsing() method", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456475409", "createdAt": "2020-07-17T14:24:28Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5763,6 +5768,52 @@ private STNode parseCheckingKeyword() {\n         }\n     }\n \n+    /**\n+     * Parse fail expression. This method is used to parse both fail expression\n+     * as well as fail action.\n+     *\n+     * <p>\n+     * <code>\n+     * fail-expr := fail-keyword expression\n+     * fail-action := fail-keyword action\n+     * </code>\n+     *\n+     * @param allowActions Allow actions\n+     * @param isRhsExpr    Is rhs expression\n+     * @return Fail expression node\n+     */\n+    private STNode parseFailExpression(boolean isRhsExpr, boolean allowActions, boolean isInConditionalExpr) {\n+\n+        STNode failKeyword = parseFailKeyword();\n+        STNode expr =\n+                parseExpression(OperatorPrecedence.EXPRESSION_ACTION, isRhsExpr, allowActions, isInConditionalExpr);\n+        if (isAction(expr)) {\n+            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_ACTION, failKeyword, expr);\n+        } else {\n+            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_EXPRESSION, failKeyword, expr);\n+        }\n+    }\n+\n+    /**\n+     * Parse fail keyword.\n+     * <p>\n+     * <code>\n+     * fail-keyword := fail\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseFailKeyword() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "819914deae85c3f479a1828ee37bf4ac8e2de204"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3750, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}