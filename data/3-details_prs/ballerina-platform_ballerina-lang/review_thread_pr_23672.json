{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTE5MTIw", "number": 23672, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjozMjozMFrOEBuSMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToxNTo0M1rOECEggA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQyMzUzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjozMjozMFrOGdvbsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODozOTo1OFrOGeR5dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzOTAyNA==", "bodyText": "can we use kind instead a string?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r433839024", "createdAt": "2020-06-02T12:32:30Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            String firstIndent = attachPoint.firstIdent().text().toLowerCase();\n+            if (firstIndent == \"object\") {\n+                switch (attachPoint.secondIdent().text().toLowerCase()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwMzcwMg==", "bodyText": "Used enum", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434403702", "createdAt": "2020-06-03T08:39:58Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            String firstIndent = attachPoint.firstIdent().text().toLowerCase();\n+            if (firstIndent == \"object\") {\n+                switch (attachPoint.secondIdent().text().toLowerCase()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzOTAyNA=="}, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQ1NTgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/declarations/annot-decl/annot_decl_assert_10.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo0MTo0NFrOGdvwMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODo0MDoxOFrOGeR6Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NDI3NQ==", "bodyText": "I know we earlier used to follow 4-spaces indentation for json formatting. But given our json generator tool can only support 2-spaces for indentation, shall we follow the same?\nThat way, it is easy to understand the diff went in to the file..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r433844275", "createdAt": "2020-06-02T12:41:44Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/declarations/annot-decl/annot_decl_assert_10.json", "diffHunk": "@@ -1,68 +1,68 @@\n {\n-  \"kind\": \"MODULE_PART\",\n-  \"children\": [\n-    {\n-      \"kind\": \"LIST\",\n-      \"children\": []\n-    },\n-    {\n-      \"kind\": \"LIST\",\n-      \"children\": [\n+    \"kind\": \"MODULE_PART\",\n+    \"children\": [\n         {\n-          \"kind\": \"ANNOTATION_DECLARATION\",\n-          \"children\": [\n-            {\n-              \"kind\": \"METADATA\",\n-              \"children\": [\n-                {\n-                  \"kind\": \"LIST\",\n-                  \"children\": []\n-                }\n-              ]\n-            },\n-            {\n-              \"kind\": \"ANNOTATION_KEYWORD\"\n-            },\n-            {\n-              \"kind\": \"IDENTIFIER_TOKEN\",\n-              \"value\": \"Foo\"\n-            },\n-            {\n-              \"kind\": \"ON_KEYWORD\"\n-            },\n-            {\n-              \"kind\": \"LIST\",\n-              \"children\": [\n-                {\n-                  \"kind\": \"ANNOTATION_ATTACH_POINT\",\n-                  \"children\": [\n-                    {\n-                      \"kind\": \"SOURCE_KEYWORD\"\n-                    },\n-                    {\n-                      \"kind\": \"TYPE_KEYWORD\",\n-                      \"isMissing\": true\n-                    }\n-                  ]\n-                },\n-                {\n-                  \"kind\": \"COMMA_TOKEN\"\n-                },\n+            \"kind\": \"LIST\",\n+            \"children\": []\n+        },\n+        {\n+            \"kind\": \"LIST\",\n+            \"children\": [\n                 {\n-                  \"kind\": \"TYPE_KEYWORD\",\n-                  \"isMissing\": true\n+                    \"kind\": \"ANNOTATION_DECLARATION\",\n+                    \"children\": [\n+                        {\n+                            \"kind\": \"METADATA\",\n+                            \"children\": [\n+                                {\n+                                    \"kind\": \"LIST\",\n+                                    \"children\": []\n+                                }\n+                            ]\n+                        },\n+                        {\n+                            \"kind\": \"ANNOTATION_KEYWORD\"\n+                        },\n+                        {\n+                            \"kind\": \"IDENTIFIER_TOKEN\",\n+                            \"value\": \"Foo\"\n+                        },\n+                        {\n+                            \"kind\": \"ON_KEYWORD\"\n+                        },\n+                        {\n+                            \"kind\": \"LIST\",\n+                            \"children\": [\n+                                {\n+                                    \"kind\": \"ANNOTATION_ATTACH_POINT\",\n+                                    \"children\": [\n+                                        {\n+                                            \"kind\": \"SOURCE_KEYWORD\"\n+                                        },\n+                                        {\n+                                            \"kind\": \"TYPE_KEYWORD\",\n+                                            \"isMissing\": true\n+                                        }\n+                                    ]\n+                                },\n+                                {\n+                                    \"kind\": \"COMMA_TOKEN\"\n+                                },\n+                                {\n+                                    \"kind\": \"TYPE_KEYWORD\",\n+                                    \"isMissing\": true\n+                                }\n+                            ]\n+                        },\n+                        {\n+                            \"kind\": \"SEMICOLON_TOKEN\"\n+                        }\n+                    ]\n                 }\n-              ]\n-            },\n-            {\n-              \"kind\": \"SEMICOLON_TOKEN\"\n-            }\n-          ]\n+            ]\n+        },\n+        {\n+            \"kind\": \"EOF_TOKEN\"\n         }\n-      ]\n-    },\n-    {\n-      \"kind\": \"EOF_TOKEN\"\n-    }\n-  ]\n-}\n\\ No newline at end of file\n+    ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwMzkzMA==", "bodyText": "Reformated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434403930", "createdAt": "2020-06-03T08:40:18Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/test/resources/declarations/annot-decl/annot_decl_assert_10.json", "diffHunk": "@@ -1,68 +1,68 @@\n {\n-  \"kind\": \"MODULE_PART\",\n-  \"children\": [\n-    {\n-      \"kind\": \"LIST\",\n-      \"children\": []\n-    },\n-    {\n-      \"kind\": \"LIST\",\n-      \"children\": [\n+    \"kind\": \"MODULE_PART\",\n+    \"children\": [\n         {\n-          \"kind\": \"ANNOTATION_DECLARATION\",\n-          \"children\": [\n-            {\n-              \"kind\": \"METADATA\",\n-              \"children\": [\n-                {\n-                  \"kind\": \"LIST\",\n-                  \"children\": []\n-                }\n-              ]\n-            },\n-            {\n-              \"kind\": \"ANNOTATION_KEYWORD\"\n-            },\n-            {\n-              \"kind\": \"IDENTIFIER_TOKEN\",\n-              \"value\": \"Foo\"\n-            },\n-            {\n-              \"kind\": \"ON_KEYWORD\"\n-            },\n-            {\n-              \"kind\": \"LIST\",\n-              \"children\": [\n-                {\n-                  \"kind\": \"ANNOTATION_ATTACH_POINT\",\n-                  \"children\": [\n-                    {\n-                      \"kind\": \"SOURCE_KEYWORD\"\n-                    },\n-                    {\n-                      \"kind\": \"TYPE_KEYWORD\",\n-                      \"isMissing\": true\n-                    }\n-                  ]\n-                },\n-                {\n-                  \"kind\": \"COMMA_TOKEN\"\n-                },\n+            \"kind\": \"LIST\",\n+            \"children\": []\n+        },\n+        {\n+            \"kind\": \"LIST\",\n+            \"children\": [\n                 {\n-                  \"kind\": \"TYPE_KEYWORD\",\n-                  \"isMissing\": true\n+                    \"kind\": \"ANNOTATION_DECLARATION\",\n+                    \"children\": [\n+                        {\n+                            \"kind\": \"METADATA\",\n+                            \"children\": [\n+                                {\n+                                    \"kind\": \"LIST\",\n+                                    \"children\": []\n+                                }\n+                            ]\n+                        },\n+                        {\n+                            \"kind\": \"ANNOTATION_KEYWORD\"\n+                        },\n+                        {\n+                            \"kind\": \"IDENTIFIER_TOKEN\",\n+                            \"value\": \"Foo\"\n+                        },\n+                        {\n+                            \"kind\": \"ON_KEYWORD\"\n+                        },\n+                        {\n+                            \"kind\": \"LIST\",\n+                            \"children\": [\n+                                {\n+                                    \"kind\": \"ANNOTATION_ATTACH_POINT\",\n+                                    \"children\": [\n+                                        {\n+                                            \"kind\": \"SOURCE_KEYWORD\"\n+                                        },\n+                                        {\n+                                            \"kind\": \"TYPE_KEYWORD\",\n+                                            \"isMissing\": true\n+                                        }\n+                                    ]\n+                                },\n+                                {\n+                                    \"kind\": \"COMMA_TOKEN\"\n+                                },\n+                                {\n+                                    \"kind\": \"TYPE_KEYWORD\",\n+                                    \"isMissing\": true\n+                                }\n+                            ]\n+                        },\n+                        {\n+                            \"kind\": \"SEMICOLON_TOKEN\"\n+                        }\n+                    ]\n                 }\n-              ]\n-            },\n-            {\n-              \"kind\": \"SEMICOLON_TOKEN\"\n-            }\n-          ]\n+            ]\n+        },\n+        {\n+            \"kind\": \"EOF_TOKEN\"\n         }\n-      ]\n-    },\n-    {\n-      \"kind\": \"EOF_TOKEN\"\n-    }\n-  ]\n-}\n\\ No newline at end of file\n+    ]\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NDI3NQ=="}, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQ2NzU3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo0NTowNFrOGdv35w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyNToxOFrOGeTlEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NjI0Nw==", "bodyText": "I have updated this method to handle missing nodes (Identifiers). PR is yet to be merged (#23669), but better to sync with it, if it got merged before this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r433846247", "createdAt": "2020-06-02T12:45:04Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwOTE1OQ==", "bodyText": "Noted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434409159", "createdAt": "2020-06-03T08:49:09Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NjI0Nw=="}, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzMTI1MA==", "bodyText": "Should use createIdentifier which accept a STNode instead of String as the second param.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434431250", "createdAt": "2020-06-03T09:25:18Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NjI0Nw=="}, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQ5Mzc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo1MTo1MlrOGdwH3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODo0MDo0MVrOGeR7UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MDMzMg==", "bodyText": "Can use a switch case for the outer if-else as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r433850332", "createdAt": "2020-06-02T12:51:52Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            String firstIndent = attachPoint.firstIdent().text().toLowerCase();\n+            if (firstIndent == \"object\") {\n+                switch (attachPoint.secondIdent().text().toLowerCase()) {\n+                    case \"function\" :\n+                        bLAttachPoint = AttachPoint.getAttachmentPoint(\"objectfunction\", source);\n+                        break;\n+                    case \"field\" :\n+                        bLAttachPoint = AttachPoint.getAttachmentPoint(\"objectfield\", source);\n+                        break;\n+                    default:\n+                        bLAttachPoint = AttachPoint.getAttachmentPoint(\"objecttype\", source);\n+                }\n+            } else if (firstIndent == \"resource\") {\n+                bLAttachPoint = AttachPoint.getAttachmentPoint(\"resourcefunction\", source);\n+            } else if (firstIndent == \"record\") {\n+                bLAttachPoint = AttachPoint.getAttachmentPoint(\"recordfield\", source);\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNDE3Nw==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434404177", "createdAt": "2020-06-03T08:40:41Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            String firstIndent = attachPoint.firstIdent().text().toLowerCase();\n+            if (firstIndent == \"object\") {\n+                switch (attachPoint.secondIdent().text().toLowerCase()) {\n+                    case \"function\" :\n+                        bLAttachPoint = AttachPoint.getAttachmentPoint(\"objectfunction\", source);\n+                        break;\n+                    case \"field\" :\n+                        bLAttachPoint = AttachPoint.getAttachmentPoint(\"objectfield\", source);\n+                        break;\n+                    default:\n+                        bLAttachPoint = AttachPoint.getAttachmentPoint(\"objecttype\", source);\n+                }\n+            } else if (firstIndent == \"resource\") {\n+                bLAttachPoint = AttachPoint.getAttachmentPoint(\"resourcefunction\", source);\n+            } else if (firstIndent == \"record\") {\n+                bLAttachPoint = AttachPoint.getAttachmentPoint(\"recordfield\", source);\n+            } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MDMzMg=="}, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjA2MzA5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToxNToxOFrOGeTN6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDowMzowN1rOGeU9vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNTMyMA==", "bodyText": "Can't we use the attachPoint.firstIdent().kind?\nEach ident you get here would be a keyword token, so token kind should be unique.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434425320", "createdAt": "2020-06-03T09:15:18Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1117,6 +1125,69 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            AttachPoint.Point firstIndent = AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "489472ebb17e7cc88b74f02ae59540836d3d2b85"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyODgwNQ==", "bodyText": "Something like:\nswitch (attachPoint.firstIdent().kind) {\n    case OBJECT_KEYWROD:\n    ...\n    case RESOURCE_KEYWROD:\n    ...\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434428805", "createdAt": "2020-06-03T09:21:01Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1117,6 +1125,69 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            AttachPoint.Point firstIndent = AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNTMyMA=="}, "originalCommit": {"oid": "489472ebb17e7cc88b74f02ae59540836d3d2b85"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1Mzk1MQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434453951", "createdAt": "2020-06-03T10:03:07Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1117,6 +1125,69 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            AttachPoint.Point firstIndent = AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNTMyMA=="}, "originalCommit": {"oid": "489472ebb17e7cc88b74f02ae59540836d3d2b85"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjA2NDY0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToxNTo0M1rOGeTO8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDowMzoxNFrOGeU-Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNTU4NA==", "bodyText": "can we replace the string using org.ballerinalang.model.elements.AttachPoint value ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434425584", "createdAt": "2020-06-03T09:15:43Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1117,6 +1125,69 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            AttachPoint.Point firstIndent = AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());\n+            switch (firstIndent) {\n+                case OBJECT:\n+                    AttachPoint.Point secondIdent =\n+                            AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());\n+                    switch (secondIdent) {\n+                        case FUNCTION:\n+                            bLAttachPoint = AttachPoint.getAttachmentPoint(\"objectfunction\", source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "489472ebb17e7cc88b74f02ae59540836d3d2b85"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1NDAxOQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434454019", "createdAt": "2020-06-03T10:03:14Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1117,6 +1125,69 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            AttachPoint.Point firstIndent = AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());\n+            switch (firstIndent) {\n+                case OBJECT:\n+                    AttachPoint.Point secondIdent =\n+                            AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());\n+                    switch (secondIdent) {\n+                        case FUNCTION:\n+                            bLAttachPoint = AttachPoint.getAttachmentPoint(\"objectfunction\", source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNTU4NA=="}, "originalCommit": {"oid": "489472ebb17e7cc88b74f02ae59540836d3d2b85"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3555, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}