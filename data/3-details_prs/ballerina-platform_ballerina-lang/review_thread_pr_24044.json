{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzODMyODg0", "number": 24044, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOTo0NDoyNFrOEFK9ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMToyOTozN1rOEFORNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODU3OTc4OnYy", "diffSide": "LEFT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/xml/XMLLiteralTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOTo0NDoyNVrOGjPu6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDoyNjozOVrOGjXyCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYxMTExNQ==", "bodyText": "why are the test changed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24044#discussion_r439611115", "createdAt": "2020-06-12T19:44:25Z", "author": {"login": "manuranga"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/xml/XMLLiteralTest.java", "diffHunk": "@@ -156,13 +155,13 @@ public void testXMLPILiteral() {\n         Assert.assertEquals(returns[1].stringValue(), \"<?foo 11?>\");\n \n         Assert.assertTrue(returns[2] instanceof BXML);\n-        Assert.assertEquals(returns[2].stringValue(), \"<?foo  aaa11bbb22ccc?>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3718f74c4498719452ad5f7758bf914bc9e4fffd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzM3NQ==", "bodyText": "This is a bug in the old xml-parser, where ws is captured as part of the xml-pi char* section. This is fixed in the new parser, now any ws is capture as ws.\nNow we are hitting a different bug which is there in BLangNodes, where ws is not propagated to runtime - BLandNodes ignore ws when creating XMLs. @KavinduZoysa  shall we create an issue for this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24044#discussion_r439697375", "createdAt": "2020-06-13T01:38:13Z", "author": {"login": "SupunS"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/xml/XMLLiteralTest.java", "diffHunk": "@@ -156,13 +155,13 @@ public void testXMLPILiteral() {\n         Assert.assertEquals(returns[1].stringValue(), \"<?foo 11?>\");\n \n         Assert.assertTrue(returns[2] instanceof BXML);\n-        Assert.assertEquals(returns[2].stringValue(), \"<?foo  aaa11bbb22ccc?>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYxMTExNQ=="}, "originalCommit": {"oid": "3718f74c4498719452ad5f7758bf914bc9e4fffd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0Mjk4NQ==", "bodyText": "Created an issue #24065", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24044#discussion_r439742985", "createdAt": "2020-06-13T14:26:39Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/xml/XMLLiteralTest.java", "diffHunk": "@@ -156,13 +155,13 @@ public void testXMLPILiteral() {\n         Assert.assertEquals(returns[1].stringValue(), \"<?foo 11?>\");\n \n         Assert.assertTrue(returns[2] instanceof BXML);\n-        Assert.assertEquals(returns[2].stringValue(), \"<?foo  aaa11bbb22ccc?>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYxMTExNQ=="}, "originalCommit": {"oid": "3718f74c4498719452ad5f7758bf914bc9e4fffd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTEyMTE3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMToyOTozN1rOGjU9OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDo0NDowMFrOGjX3UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjY5Nw==", "bodyText": "shouldn't we use createExpression() method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24044#discussion_r439696697", "createdAt": "2020-06-13T01:29:37Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1805,7 +1805,16 @@ public BLangNode transform(TemplateExpressionNode expressionNode) {\n         SyntaxKind kind = expressionNode.kind();\n         switch (kind) {\n             case XML_TEMPLATE_EXPRESSION:\n-                return expressionNode.content().get(0).apply(this);\n+                SyntaxKind contentKind = expressionNode.content().get(0).kind();\n+                switch (contentKind) {\n+                    case XML_COMMENT:\n+                    case XML_PI:\n+                    case XML_ELEMENT:\n+                    case XML_EMPTY_ELEMENT:\n+                        return expressionNode.content().get(0).apply(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3718f74c4498719452ad5f7758bf914bc9e4fffd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDMzNw==", "bodyText": "We need to use that method, so changed it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24044#discussion_r439744337", "createdAt": "2020-06-13T14:44:00Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1805,7 +1805,16 @@ public BLangNode transform(TemplateExpressionNode expressionNode) {\n         SyntaxKind kind = expressionNode.kind();\n         switch (kind) {\n             case XML_TEMPLATE_EXPRESSION:\n-                return expressionNode.content().get(0).apply(this);\n+                SyntaxKind contentKind = expressionNode.content().get(0).kind();\n+                switch (contentKind) {\n+                    case XML_COMMENT:\n+                    case XML_PI:\n+                    case XML_ELEMENT:\n+                    case XML_EMPTY_ELEMENT:\n+                        return expressionNode.content().get(0).apply(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjY5Nw=="}, "originalCommit": {"oid": "3718f74c4498719452ad5f7758bf914bc9e4fffd"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3369, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}