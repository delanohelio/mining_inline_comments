{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTU4NTI1", "number": 23085, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzoyODoyOFrOD5SMRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0Mzo1NlrOD5Se-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzkzNDc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzoyODoyOFrOGQdeFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDo1NTozNFrOGQkL8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxMzIzOQ==", "bodyText": "Since it is either possible to have all three tokens, or non-of the three tokens (all-or-none situation), shall we group the three tokens  <T> together and have it as a separate node?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085#discussion_r419913239", "createdAt": "2020-05-05T07:28:28Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7228,4 +7235,55 @@ private boolean isEndOfFieldNamesList(SyntaxKind tokenKind) {\n                 return true;\n         }\n     }\n+\n+    /**\n+     * Parse error type descriptor.\n+     * <p>\n+     * error-type-descriptor := error [error-type-param]\n+     * error-type-param := < (detail-type-descriptor | inferred-type-descriptor) >\n+     * detail-type-descriptor := type-descriptor\n+     * inferred-type-descriptor := *\n+     * </p>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseErrorTypeDescriptor() {\n+        startContext(ParserRuleContext.ERROR_TYPE_DESCRIPTOR);\n+\n+        STNode errorKeywordToken = parseErrorKeyWord();\n+        STNode errorTypeParamsNode, ltToken, gtToken;\n+        STToken nextToken = peek();\n+        STToken nextNextToken = peek(2);\n+        if (nextToken.kind == SyntaxKind.LT_TOKEN || nextNextToken.kind == SyntaxKind.GT_TOKEN) {\n+            ltToken = parseLTToken();\n+            nextToken = peek();\n+            if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n+                errorTypeParamsNode = consume();\n+            } else {\n+                errorTypeParamsNode = parseTypeDescriptor();\n+            }\n+            gtToken = parseGTToken();\n+        } else {\n+            ltToken = STNodeFactory.createEmptyNode();\n+            errorTypeParamsNode = STNodeFactory.createEmptyNode();\n+            gtToken = STNodeFactory.createEmptyNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7726a85e4ee26c13b3dcde8ed3f7ae73f5393d74"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAyMzI4MQ==", "bodyText": "Actually my first approach is that, isn't it cost an unnecessary node?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085#discussion_r420023281", "createdAt": "2020-05-05T10:55:34Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7228,4 +7235,55 @@ private boolean isEndOfFieldNamesList(SyntaxKind tokenKind) {\n                 return true;\n         }\n     }\n+\n+    /**\n+     * Parse error type descriptor.\n+     * <p>\n+     * error-type-descriptor := error [error-type-param]\n+     * error-type-param := < (detail-type-descriptor | inferred-type-descriptor) >\n+     * detail-type-descriptor := type-descriptor\n+     * inferred-type-descriptor := *\n+     * </p>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseErrorTypeDescriptor() {\n+        startContext(ParserRuleContext.ERROR_TYPE_DESCRIPTOR);\n+\n+        STNode errorKeywordToken = parseErrorKeyWord();\n+        STNode errorTypeParamsNode, ltToken, gtToken;\n+        STToken nextToken = peek();\n+        STToken nextNextToken = peek(2);\n+        if (nextToken.kind == SyntaxKind.LT_TOKEN || nextNextToken.kind == SyntaxKind.GT_TOKEN) {\n+            ltToken = parseLTToken();\n+            nextToken = peek();\n+            if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n+                errorTypeParamsNode = consume();\n+            } else {\n+                errorTypeParamsNode = parseTypeDescriptor();\n+            }\n+            gtToken = parseGTToken();\n+        } else {\n+            ltToken = STNodeFactory.createEmptyNode();\n+            errorTypeParamsNode = STNodeFactory.createEmptyNode();\n+            gtToken = STNodeFactory.createEmptyNode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxMzIzOQ=="}, "originalCommit": {"oid": "7726a85e4ee26c13b3dcde8ed3f7ae73f5393d74"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk2OTM1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzozOTo0NlrOGQdzRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo1ODo1NVrOGQtkNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxODY2MA==", "bodyText": "IIUC, though error-type-desc context is started here, it is ended only in one-of the paths. i.e: context will not be ended in the error case (without type-param).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085#discussion_r419918660", "createdAt": "2020-05-05T07:39:46Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1644,6 +1664,7 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n             case TYPE_CAST_EXPRESSION:\n             case TABLE_CONSTRUCTOR:\n             case KEY_SPECIFIER:\n+            case ERROR_TYPE_DESCRIPTOR:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7726a85e4ee26c13b3dcde8ed3f7ae73f5393d74"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3Njk0OQ==", "bodyText": "Fixed, That case handled as a simple type. Check if that is ok.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085#discussion_r420176949", "createdAt": "2020-05-05T14:58:55Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1644,6 +1664,7 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n             case TYPE_CAST_EXPRESSION:\n             case TABLE_CONSTRUCTOR:\n             case KEY_SPECIFIER:\n+            case ERROR_TYPE_DESCRIPTOR:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxODY2MA=="}, "originalCommit": {"oid": "7726a85e4ee26c13b3dcde8ed3f7ae73f5393d74"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzk4MjY3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ParameterizedTypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo0Mzo1NlrOGQd7fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDo1NzowM1rOGQkO1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMDc2Ng==", "bodyText": "This test is not needed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085#discussion_r419920766", "createdAt": "2020-05-05T07:43:56Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ParameterizedTypeTest.java", "diffHunk": "@@ -91,8 +91,8 @@ public void testInValidModuleLevelMapTypeWithInvalidTokenInside() {\n         test(\"map<%> a;\", \"parameterized-type/parameterized_type_assert_10.json\");\n     }\n \n-    @Test\n-    public void testInValidModuleLevelParameterizedTypeMissingType() {\n-        test(\"<int> a;\", \"parameterized-type/parameterized_type_assert_12.json\");\n-    }\n+//    @Test\n+//    public void testInValidModuleLevelParameterizedTypeMissingType() {\n+//        test(\"<int> a;\", \"parameterized-type/parameterized_type_assert_12.json\");\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7726a85e4ee26c13b3dcde8ed3f7ae73f5393d74"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAyNDAyMw==", "bodyText": "<int> a; is recovering as error<int> a; so I commented the parameterized test case.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23085#discussion_r420024023", "createdAt": "2020-05-05T10:57:03Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/types/ParameterizedTypeTest.java", "diffHunk": "@@ -91,8 +91,8 @@ public void testInValidModuleLevelMapTypeWithInvalidTokenInside() {\n         test(\"map<%> a;\", \"parameterized-type/parameterized_type_assert_10.json\");\n     }\n \n-    @Test\n-    public void testInValidModuleLevelParameterizedTypeMissingType() {\n-        test(\"<int> a;\", \"parameterized-type/parameterized_type_assert_12.json\");\n-    }\n+//    @Test\n+//    public void testInValidModuleLevelParameterizedTypeMissingType() {\n+//        test(\"<int> a;\", \"parameterized-type/parameterized_type_assert_12.json\");\n+//    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMDc2Ng=="}, "originalCommit": {"oid": "7726a85e4ee26c13b3dcde8ed3f7ae73f5393d74"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3699, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}