{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMzg3MjM1", "number": 21410, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowNjoxOFrODk69lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjozNDoxNFrODlTgPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQxMzY1OnYy", "diffSide": "RIGHT", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowNjoxOFrOFxg9Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjoyMzo1NVrOFxhPMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NDQ3NA==", "bodyText": "Shall we try to merge this to a single line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21410#discussion_r387464474", "createdAt": "2020-03-04T06:06:18Z", "author": {"login": "wggihan"}, "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -25,23 +25,14 @@ public type Scheduler object {\n     # Attaches the provided `service` to the task.\n     #\n     # + serviceToAttach - Ballerina `service` object which needs to be attached to the task.\n-    # + attachment - An optional parameter which needs to passed inside the resources.\n+    # + attachments - Set of optional parameters which needs to passed inside the resources.\n     # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n-    public function attach(service serviceToAttach, public any attachment = ()) returns SchedulerError? {\n+    public function attach(service serviceToAttach, any... attachments) returns SchedulerError? {\n         string message = \"Failed to attach the service to the scheduler\";\n-        if (attachment != ()) {\n-            map<any> attachments = { attachment: attachment };\n-            var result = attachExternal(self.taskListener, serviceToAttach, attachments);\n-            if (result is ListenerError) {\n-                SchedulerError err = error(SCHEDULER_ERROR_REASON, message = message, cause = result);\n-                return err;\n-            }\n-        } else {\n-            var result = attachExternal(self.taskListener, serviceToAttach, {});\n-            if (result is ListenerError) {\n-                SchedulerError err = error(SCHEDULER_ERROR_REASON, message = message, cause = result);\n-                return err;\n-            }\n+        var result = attachExternal(self.taskListener, serviceToAttach, ...attachments);\n+        if (result is ListenerError) {\n+            SchedulerError err = error(SCHEDULER_ERROR_REASON, message = message, cause = result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636cb0ff57cfce72012fc8bc0f92085d917ee815"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2OTEwNQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21410#discussion_r387469105", "createdAt": "2020-03-04T06:23:55Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -25,23 +25,14 @@ public type Scheduler object {\n     # Attaches the provided `service` to the task.\n     #\n     # + serviceToAttach - Ballerina `service` object which needs to be attached to the task.\n-    # + attachment - An optional parameter which needs to passed inside the resources.\n+    # + attachments - Set of optional parameters which needs to passed inside the resources.\n     # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n-    public function attach(service serviceToAttach, public any attachment = ()) returns SchedulerError? {\n+    public function attach(service serviceToAttach, any... attachments) returns SchedulerError? {\n         string message = \"Failed to attach the service to the scheduler\";\n-        if (attachment != ()) {\n-            map<any> attachments = { attachment: attachment };\n-            var result = attachExternal(self.taskListener, serviceToAttach, attachments);\n-            if (result is ListenerError) {\n-                SchedulerError err = error(SCHEDULER_ERROR_REASON, message = message, cause = result);\n-                return err;\n-            }\n-        } else {\n-            var result = attachExternal(self.taskListener, serviceToAttach, {});\n-            if (result is ListenerError) {\n-                SchedulerError err = error(SCHEDULER_ERROR_REASON, message = message, cause = result);\n-                return err;\n-            }\n+        var result = attachExternal(self.taskListener, serviceToAttach, ...attachments);\n+        if (result is ListenerError) {\n+            SchedulerError err = error(SCHEDULER_ERROR_REASON, message = message, cause = result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NDQ3NA=="}, "originalCommit": {"oid": "636cb0ff57cfce72012fc8bc0f92085d917ee815"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDQzNDUzOnYy", "diffSide": "RIGHT", "path": "stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/TaskExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjozNDoxNFrOFyHzUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjo1MToyOFrOFyIHNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEwMDk0NQ==", "bodyText": "How does this behave in the error cases? If the # of onTrigger resource param count and the # of attach() function params are different, null will be returned.\nIf the above is validated during the compile-time, then this condition is not necessary. WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21410#discussion_r388100945", "createdAt": "2020-03-05T06:34:14Z", "author": {"login": "chamil321"}, "path": "stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/TaskExecutor.java", "diffHunk": "@@ -40,9 +38,17 @@ public static void executeFunction(ServiceInformation serviceInformation) {\n     }\n \n     private static Object[] getParameterList(AttachedFunction function, ServiceInformation serviceInformation) {\n-        if (function.type.paramTypes.length > 0 && Objects.nonNull(serviceInformation.getAttachment())) {\n-            return new Object[]{serviceInformation.getAttachment(), Boolean.TRUE};\n+        Object[] attachments = serviceInformation.getAttachment();\n+        int numberOfParameters = function.type.paramTypes.length;\n+        Object[] parameters = null;\n+        if (numberOfParameters == attachments.length) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57accb56f539fe371c97b8185e7013e63dd7cd9d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEwNjAzNg==", "bodyText": "Ideally, this should be validated in the compile time, but unfortunately, we can't write compiler plugin for this, just yet. (See #14148)\nTherefore this is added. But since this is invoked from a resource function, we cannot return any error here. Is there a way to reflect this error scenario?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21410#discussion_r388106036", "createdAt": "2020-03-05T06:51:28Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/task/src/main/java/org/ballerinalang/stdlib/task/utils/TaskExecutor.java", "diffHunk": "@@ -40,9 +38,17 @@ public static void executeFunction(ServiceInformation serviceInformation) {\n     }\n \n     private static Object[] getParameterList(AttachedFunction function, ServiceInformation serviceInformation) {\n-        if (function.type.paramTypes.length > 0 && Objects.nonNull(serviceInformation.getAttachment())) {\n-            return new Object[]{serviceInformation.getAttachment(), Boolean.TRUE};\n+        Object[] attachments = serviceInformation.getAttachment();\n+        int numberOfParameters = function.type.paramTypes.length;\n+        Object[] parameters = null;\n+        if (numberOfParameters == attachments.length) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEwMDk0NQ=="}, "originalCommit": {"oid": "57accb56f539fe371c97b8185e7013e63dd7cd9d"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1080, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}