{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2OTg5MDM1", "number": 22401, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDowNDo1M1rODtjEGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo1MDowMVrODyDoFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDg3MDAyOnYy", "diffSide": "RIGHT", "path": "stdlib/email/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDowNDo1NFrOF_CP2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDoxMjoxMlrOF_CkXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY0MTQzNA==", "bodyText": "I think the latest released version is 6.3.8", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r401641434", "createdAt": "2020-04-01T14:04:54Z", "author": {"login": "Bhashinee"}, "path": "stdlib/email/build.gradle", "diffHunk": "@@ -27,20 +27,35 @@ configurations.testCompileClasspath {\n dependencies {\n     baloCreat project(':lib-creator')\n     implementation project(':ballerina-lang')\n+    implementation project(':ballerina-java')\n     implementation project(':ballerina-runtime')\n+    implementation project(':ballerina-io')\n     implementation project(':ballerina-time')\n     implementation project(':ballerina-log-api')\n+    implementation project(':ballerina-runtime-api')\n+    implementation project(':ballerina-lang:annotations')\n     implementation project(':ballerina-file')\n+    implementation project(':ballerina-mime')\n+    implementation 'org.jvnet.mimepull:mimepull'\n     implementation 'com.sun.mail:javax.mail:1.6.2'\n+    implementation 'org.wso2.transport.http:org.wso2.transport.http.netty'\n+    implementation 'org.apache.ws.commons.axiom:axiom-dom'\n \n+    baloImplementation project(path: ':ballerina-lang:annotations', configuration: 'baloImplementation')\n+    baloImplementation project(path: ':ballerina-io', configuration: 'baloImplementation')\n+    baloImplementation project(path: ':ballerina-file', configuration: 'baloImplementation')\n+    baloImplementation project(path: ':ballerina-mime', configuration: 'baloImplementation')\n+    baloImplementation project(path: ':ballerina-runtime-api', configuration: 'baloImplementation')\n     baloImplementation project(path: ':ballerina-time', configuration: 'baloImplementation')\n     baloImplementation project(path: ':ballerina-log-api', configuration: 'baloImplementation')\n     baloImplementation project(path: ':ballerina-java', configuration: 'baloImplementation')\n \n     interopImports project(':ballerina-time')\n     interopImports project(':ballerina-log-api')\n     interopImports project(':ballerina-io')\n+    interopImports project(':ballerina-mime')\n     interopImports 'com.sun.mail:javax.mail:1.6.2'\n+    interopImports 'org.wso2.transport.http:org.wso2.transport.http.netty:6.3.4'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bc10d56a07798ab295bbd16d2ce4f1d857aab0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY0NjY4Ng==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r401646686", "createdAt": "2020-04-01T14:12:12Z", "author": {"login": "Maninda"}, "path": "stdlib/email/build.gradle", "diffHunk": "@@ -27,20 +27,35 @@ configurations.testCompileClasspath {\n dependencies {\n     baloCreat project(':lib-creator')\n     implementation project(':ballerina-lang')\n+    implementation project(':ballerina-java')\n     implementation project(':ballerina-runtime')\n+    implementation project(':ballerina-io')\n     implementation project(':ballerina-time')\n     implementation project(':ballerina-log-api')\n+    implementation project(':ballerina-runtime-api')\n+    implementation project(':ballerina-lang:annotations')\n     implementation project(':ballerina-file')\n+    implementation project(':ballerina-mime')\n+    implementation 'org.jvnet.mimepull:mimepull'\n     implementation 'com.sun.mail:javax.mail:1.6.2'\n+    implementation 'org.wso2.transport.http:org.wso2.transport.http.netty'\n+    implementation 'org.apache.ws.commons.axiom:axiom-dom'\n \n+    baloImplementation project(path: ':ballerina-lang:annotations', configuration: 'baloImplementation')\n+    baloImplementation project(path: ':ballerina-io', configuration: 'baloImplementation')\n+    baloImplementation project(path: ':ballerina-file', configuration: 'baloImplementation')\n+    baloImplementation project(path: ':ballerina-mime', configuration: 'baloImplementation')\n+    baloImplementation project(path: ':ballerina-runtime-api', configuration: 'baloImplementation')\n     baloImplementation project(path: ':ballerina-time', configuration: 'baloImplementation')\n     baloImplementation project(path: ':ballerina-log-api', configuration: 'baloImplementation')\n     baloImplementation project(path: ':ballerina-java', configuration: 'baloImplementation')\n \n     interopImports project(':ballerina-time')\n     interopImports project(':ballerina-log-api')\n     interopImports project(':ballerina-io')\n+    interopImports project(':ballerina-mime')\n     interopImports 'com.sun.mail:javax.mail:1.6.2'\n+    interopImports 'org.wso2.transport.http:org.wso2.transport.http.netty:6.3.4'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY0MTQzNA=="}, "originalCommit": {"oid": "04bc10d56a07798ab295bbd16d2ce4f1d857aab0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTMzNTU0OnYy", "diffSide": "RIGHT", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0NTo1N1rOF_G5yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDozNjowMFrOGCGo5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNzcwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return string != null && !string.equals(\"\");\n          \n          \n            \n                    return string != null && !string.isEmpty();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r401717705", "createdAt": "2020-04-01T15:45:57Z", "author": {"login": "chamil321"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -125,4 +225,8 @@ private static String getNullCheckedString(String string) {\n         return string == null ? \"\" : string;\n     }\n \n+    private static boolean stringIsNotNullOrEmpty(String string) {\n+        return string != null && !string.equals(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be6013d0d6b28e51cbd28a8e0557161163c46f18"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxODA1NQ==", "bodyText": "May be we can rename the variable name as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r401718055", "createdAt": "2020-04-01T15:46:26Z", "author": {"login": "chamil321"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -125,4 +225,8 @@ private static String getNullCheckedString(String string) {\n         return string == null ? \"\" : string;\n     }\n \n+    private static boolean stringIsNotNullOrEmpty(String string) {\n+        return string != null && !string.equals(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNzcwNQ=="}, "originalCommit": {"oid": "be6013d0d6b28e51cbd28a8e0557161163c46f18"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1OTEwOQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r404859109", "createdAt": "2020-04-07T14:36:00Z", "author": {"login": "Maninda"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -125,4 +225,8 @@ private static String getNullCheckedString(String string) {\n         return string == null ? \"\" : string;\n     }\n \n+    private static boolean stringIsNotNullOrEmpty(String string) {\n+        return string != null && !string.equals(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNzcwNQ=="}, "originalCommit": {"oid": "be6013d0d6b28e51cbd28a8e0557161163c46f18"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTM3OTA4OnYy", "diffSide": "RIGHT", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/CommonUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1NToxN1rOF_HU1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDozNjozOFrOGCGqmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNDYzMA==", "bodyText": "Shouldn't the contentType be checked for null here? message.getContentType() can result null according to the API docs", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r401724630", "createdAt": "2020-04-01T15:55:17Z", "author": {"login": "chamil321"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/CommonUtil.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.mime.util.MimeConstants;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Contains the common utility functions.\n+ *\n+ * @since 1.2.1\n+ */\n+public class CommonUtil {\n+\n+    /**\n+     * Check whether the content type is based on text.\n+     *\n+     * @param contentType Content Type of a MIME Body Type\n+     * @return boolean Whether the MIME Body Type is text based\n+     */\n+    protected static boolean isTextBased(String contentType) {\n+        return contentType.startsWith(MimeConstants.TEXT_AS_PRIMARY_TYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be6013d0d6b28e51cbd28a8e0557161163c46f18"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNjE5MQ==", "bodyText": "Maybe we need to check other methods as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r401726191", "createdAt": "2020-04-01T15:57:27Z", "author": {"login": "chamil321"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/CommonUtil.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.mime.util.MimeConstants;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Contains the common utility functions.\n+ *\n+ * @since 1.2.1\n+ */\n+public class CommonUtil {\n+\n+    /**\n+     * Check whether the content type is based on text.\n+     *\n+     * @param contentType Content Type of a MIME Body Type\n+     * @return boolean Whether the MIME Body Type is text based\n+     */\n+    protected static boolean isTextBased(String contentType) {\n+        return contentType.startsWith(MimeConstants.TEXT_AS_PRIMARY_TYPE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNDYzMA=="}, "originalCommit": {"oid": "be6013d0d6b28e51cbd28a8e0557161163c46f18"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1OTU0NQ==", "bodyText": "Checked in all the instances.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r404859545", "createdAt": "2020-04-07T14:36:38Z", "author": {"login": "Maninda"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/CommonUtil.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.mime.util.MimeConstants;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Contains the common utility functions.\n+ *\n+ * @since 1.2.1\n+ */\n+public class CommonUtil {\n+\n+    /**\n+     * Check whether the content type is based on text.\n+     *\n+     * @param contentType Content Type of a MIME Body Type\n+     * @return boolean Whether the MIME Body Type is text based\n+     */\n+    protected static boolean isTextBased(String contentType) {\n+        return contentType.startsWith(MimeConstants.TEXT_AS_PRIMARY_TYPE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNDYzMA=="}, "originalCommit": {"oid": "be6013d0d6b28e51cbd28a8e0557161163c46f18"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzcwMTgyOnYy", "diffSide": "RIGHT", "path": "stdlib/email/src/test/resources/test-src/ImapComplexEmailReceive.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo0OToyMVrOF_dcfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDozNjo1OFrOGCGrlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4NzAzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             };\n          \n          \n            \n            };", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r402087039", "createdAt": "2020-04-02T06:49:21Z", "author": {"login": "ldclakmal"}, "path": "stdlib/email/src/test/resources/test-src/ImapComplexEmailReceive.bal", "diffHunk": "@@ -15,17 +15,58 @@\n // under the License.\n \n import ballerina/email;\n+import ballerina/mime;\n \n email:ImapConfig imapConfig = {\n      port: 3143,\n      enableSsl: false\n  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be6013d0d6b28e51cbd28a8e0557161163c46f18"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1OTc5Nw==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r404859797", "createdAt": "2020-04-07T14:36:58Z", "author": {"login": "Maninda"}, "path": "stdlib/email/src/test/resources/test-src/ImapComplexEmailReceive.bal", "diffHunk": "@@ -15,17 +15,58 @@\n // under the License.\n \n import ballerina/email;\n+import ballerina/mime;\n \n email:ImapConfig imapConfig = {\n      port: 3143,\n      enableSsl: false\n  };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4NzAzOQ=="}, "originalCommit": {"oid": "be6013d0d6b28e51cbd28a8e0557161163c46f18"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODA3MTEyOnYy", "diffSide": "RIGHT", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoyOTozOVrOGF3ZrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDowNzoyNFrOGF7ctQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwMzc1Nw==", "bodyText": "What happens if this condition does not satisfied?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r408803757", "createdAt": "2020-04-15T12:29:39Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -94,14 +112,96 @@ public static MimeMessage generateMessage(Session session, String username, MapV\n             emailMessage.setReplyTo(replyToAddressArray);\n         }\n         emailMessage.setSubject(subject);\n-        emailMessage.setText(messageBody);\n         emailMessage.setFrom(new InternetAddress(fromAddress));\n         if (!senderAddress.isEmpty()) {\n             emailMessage.setSender(new InternetAddress(senderAddress));\n         }\n+        ArrayValue attachments = message.getArrayValue(EmailConstants.MESSAGE_ATTACHMENTS);\n+        if (attachments == null) {\n+            emailMessage.setText(messageBody);\n+        } else {\n+            addBodyAndAttachments(emailMessage, messageBody, attachments);\n+        }\n         return emailMessage;\n     }\n \n+    private static void addBodyAndAttachments(MimeMessage emailMessage, String messageBody, ArrayValue attachments)\n+            throws MessagingException, IOException {\n+        BodyPart messageBodyPart = new MimeBodyPart();\n+        messageBodyPart.setText(messageBody);\n+        Multipart multipart = new MimeMultipart();\n+        multipart.addBodyPart(messageBodyPart);\n+        for (int i = 0; i < attachments.size(); i++) {\n+            if (attachments.get(i) instanceof ObjectValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5defb2b1d2436e4d0d2d8d2a0a015fd95263e2d7"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzNjcwNg==", "bodyText": "It will be skipped getting added as an attachment. Anyway, this case will not happen according to the referred code of this method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r408836706", "createdAt": "2020-04-15T13:22:46Z", "author": {"login": "Maninda"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -94,14 +112,96 @@ public static MimeMessage generateMessage(Session session, String username, MapV\n             emailMessage.setReplyTo(replyToAddressArray);\n         }\n         emailMessage.setSubject(subject);\n-        emailMessage.setText(messageBody);\n         emailMessage.setFrom(new InternetAddress(fromAddress));\n         if (!senderAddress.isEmpty()) {\n             emailMessage.setSender(new InternetAddress(senderAddress));\n         }\n+        ArrayValue attachments = message.getArrayValue(EmailConstants.MESSAGE_ATTACHMENTS);\n+        if (attachments == null) {\n+            emailMessage.setText(messageBody);\n+        } else {\n+            addBodyAndAttachments(emailMessage, messageBody, attachments);\n+        }\n         return emailMessage;\n     }\n \n+    private static void addBodyAndAttachments(MimeMessage emailMessage, String messageBody, ArrayValue attachments)\n+            throws MessagingException, IOException {\n+        BodyPart messageBodyPart = new MimeBodyPart();\n+        messageBodyPart.setText(messageBody);\n+        Multipart multipart = new MimeMultipart();\n+        multipart.addBodyPart(messageBodyPart);\n+        for (int i = 0; i < attachments.size(); i++) {\n+            if (attachments.get(i) instanceof ObjectValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwMzc1Nw=="}, "originalCommit": {"oid": "5defb2b1d2436e4d0d2d8d2a0a015fd95263e2d7"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0NTMwOA==", "bodyText": "Then it's better to add it as a comment at least I guess. This may lead to confusions in the future.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r408845308", "createdAt": "2020-04-15T13:34:46Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -94,14 +112,96 @@ public static MimeMessage generateMessage(Session session, String username, MapV\n             emailMessage.setReplyTo(replyToAddressArray);\n         }\n         emailMessage.setSubject(subject);\n-        emailMessage.setText(messageBody);\n         emailMessage.setFrom(new InternetAddress(fromAddress));\n         if (!senderAddress.isEmpty()) {\n             emailMessage.setSender(new InternetAddress(senderAddress));\n         }\n+        ArrayValue attachments = message.getArrayValue(EmailConstants.MESSAGE_ATTACHMENTS);\n+        if (attachments == null) {\n+            emailMessage.setText(messageBody);\n+        } else {\n+            addBodyAndAttachments(emailMessage, messageBody, attachments);\n+        }\n         return emailMessage;\n     }\n \n+    private static void addBodyAndAttachments(MimeMessage emailMessage, String messageBody, ArrayValue attachments)\n+            throws MessagingException, IOException {\n+        BodyPart messageBodyPart = new MimeBodyPart();\n+        messageBodyPart.setText(messageBody);\n+        Multipart multipart = new MimeMultipart();\n+        multipart.addBodyPart(messageBodyPart);\n+        for (int i = 0; i < attachments.size(); i++) {\n+            if (attachments.get(i) instanceof ObjectValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwMzc1Nw=="}, "originalCommit": {"oid": "5defb2b1d2436e4d0d2d8d2a0a015fd95263e2d7"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MDA2OQ==", "bodyText": "I think that is implicit as there can be emails without attachments too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r408870069", "createdAt": "2020-04-15T14:07:24Z", "author": {"login": "Maninda"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -94,14 +112,96 @@ public static MimeMessage generateMessage(Session session, String username, MapV\n             emailMessage.setReplyTo(replyToAddressArray);\n         }\n         emailMessage.setSubject(subject);\n-        emailMessage.setText(messageBody);\n         emailMessage.setFrom(new InternetAddress(fromAddress));\n         if (!senderAddress.isEmpty()) {\n             emailMessage.setSender(new InternetAddress(senderAddress));\n         }\n+        ArrayValue attachments = message.getArrayValue(EmailConstants.MESSAGE_ATTACHMENTS);\n+        if (attachments == null) {\n+            emailMessage.setText(messageBody);\n+        } else {\n+            addBodyAndAttachments(emailMessage, messageBody, attachments);\n+        }\n         return emailMessage;\n     }\n \n+    private static void addBodyAndAttachments(MimeMessage emailMessage, String messageBody, ArrayValue attachments)\n+            throws MessagingException, IOException {\n+        BodyPart messageBodyPart = new MimeBodyPart();\n+        messageBodyPart.setText(messageBody);\n+        Multipart multipart = new MimeMultipart();\n+        multipart.addBodyPart(messageBodyPart);\n+        for (int i = 0; i < attachments.size(); i++) {\n+            if (attachments.get(i) instanceof ObjectValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwMzc1Nw=="}, "originalCommit": {"oid": "5defb2b1d2436e4d0d2d8d2a0a015fd95263e2d7"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODA3NDIzOnYy", "diffSide": "RIGHT", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjozMDoyNFrOGF3bcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzozMTo0N1rOGF5zXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwNDIwOA==", "bodyText": "Can be replaced with a for each loop ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r408804208", "createdAt": "2020-04-15T12:30:24Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -94,14 +112,96 @@ public static MimeMessage generateMessage(Session session, String username, MapV\n             emailMessage.setReplyTo(replyToAddressArray);\n         }\n         emailMessage.setSubject(subject);\n-        emailMessage.setText(messageBody);\n         emailMessage.setFrom(new InternetAddress(fromAddress));\n         if (!senderAddress.isEmpty()) {\n             emailMessage.setSender(new InternetAddress(senderAddress));\n         }\n+        ArrayValue attachments = message.getArrayValue(EmailConstants.MESSAGE_ATTACHMENTS);\n+        if (attachments == null) {\n+            emailMessage.setText(messageBody);\n+        } else {\n+            addBodyAndAttachments(emailMessage, messageBody, attachments);\n+        }\n         return emailMessage;\n     }\n \n+    private static void addBodyAndAttachments(MimeMessage emailMessage, String messageBody, ArrayValue attachments)\n+            throws MessagingException, IOException {\n+        BodyPart messageBodyPart = new MimeBodyPart();\n+        messageBodyPart.setText(messageBody);\n+        Multipart multipart = new MimeMultipart();\n+        multipart.addBodyPart(messageBodyPart);\n+        for (int i = 0; i < attachments.size(); i++) {\n+            if (attachments.get(i) instanceof ObjectValue) {\n+                ObjectValue mimeEntity = (ObjectValue) attachments.get(i);\n+                String contentType = getContentTypeWithParameters(mimeEntity);\n+                if (contentType.startsWith(MimeConstants.MULTIPART_AS_PRIMARY_TYPE)) {\n+                    multipart.addBodyPart(populateMultipart(mimeEntity));\n+                } else {\n+                    multipart.addBodyPart(buildJavaMailBodyPart(mimeEntity, contentType));\n+                }\n+            }\n+        }\n+        emailMessage.setContent(multipart);\n+    }\n+\n+    private static MimeBodyPart populateMultipart(ObjectValue mimeEntity) throws IOException, MessagingException {\n+        Multipart multipart = new MimeMultipart();\n+        ArrayValue multipartMimeEntityArrayValue = EntityBodyHandler.getBodyPartArray(mimeEntity);\n+        int entityCount = multipartMimeEntityArrayValue.size();\n+        for (int i = 0; i < entityCount; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5defb2b1d2436e4d0d2d8d2a0a015fd95263e2d7"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0MzEwMQ==", "bodyText": "for each loop is not supporting ArrayValue type by default. Therefore, it is better to use a counter to access the ObjectValue entries with the for loop.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r408843101", "createdAt": "2020-04-15T13:31:47Z", "author": {"login": "Maninda"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -94,14 +112,96 @@ public static MimeMessage generateMessage(Session session, String username, MapV\n             emailMessage.setReplyTo(replyToAddressArray);\n         }\n         emailMessage.setSubject(subject);\n-        emailMessage.setText(messageBody);\n         emailMessage.setFrom(new InternetAddress(fromAddress));\n         if (!senderAddress.isEmpty()) {\n             emailMessage.setSender(new InternetAddress(senderAddress));\n         }\n+        ArrayValue attachments = message.getArrayValue(EmailConstants.MESSAGE_ATTACHMENTS);\n+        if (attachments == null) {\n+            emailMessage.setText(messageBody);\n+        } else {\n+            addBodyAndAttachments(emailMessage, messageBody, attachments);\n+        }\n         return emailMessage;\n     }\n \n+    private static void addBodyAndAttachments(MimeMessage emailMessage, String messageBody, ArrayValue attachments)\n+            throws MessagingException, IOException {\n+        BodyPart messageBodyPart = new MimeBodyPart();\n+        messageBodyPart.setText(messageBody);\n+        Multipart multipart = new MimeMultipart();\n+        multipart.addBodyPart(messageBodyPart);\n+        for (int i = 0; i < attachments.size(); i++) {\n+            if (attachments.get(i) instanceof ObjectValue) {\n+                ObjectValue mimeEntity = (ObjectValue) attachments.get(i);\n+                String contentType = getContentTypeWithParameters(mimeEntity);\n+                if (contentType.startsWith(MimeConstants.MULTIPART_AS_PRIMARY_TYPE)) {\n+                    multipart.addBodyPart(populateMultipart(mimeEntity));\n+                } else {\n+                    multipart.addBodyPart(buildJavaMailBodyPart(mimeEntity, contentType));\n+                }\n+            }\n+        }\n+        emailMessage.setContent(multipart);\n+    }\n+\n+    private static MimeBodyPart populateMultipart(ObjectValue mimeEntity) throws IOException, MessagingException {\n+        Multipart multipart = new MimeMultipart();\n+        ArrayValue multipartMimeEntityArrayValue = EntityBodyHandler.getBodyPartArray(mimeEntity);\n+        int entityCount = multipartMimeEntityArrayValue.size();\n+        for (int i = 0; i < entityCount; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwNDIwOA=="}, "originalCommit": {"oid": "5defb2b1d2436e4d0d2d8d2a0a015fd95263e2d7"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODE0NjY3OnYy", "diffSide": "RIGHT", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo0OTo0MVrOGF4IHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo0MzoxOVrOGF6VWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNTY0NA==", "bodyText": "Shall we replace this with a for each loop?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r408815644", "createdAt": "2020-04-15T12:49:41Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -94,14 +112,96 @@ public static MimeMessage generateMessage(Session session, String username, MapV\n             emailMessage.setReplyTo(replyToAddressArray);\n         }\n         emailMessage.setSubject(subject);\n-        emailMessage.setText(messageBody);\n         emailMessage.setFrom(new InternetAddress(fromAddress));\n         if (!senderAddress.isEmpty()) {\n             emailMessage.setSender(new InternetAddress(senderAddress));\n         }\n+        ArrayValue attachments = message.getArrayValue(EmailConstants.MESSAGE_ATTACHMENTS);\n+        if (attachments == null) {\n+            emailMessage.setText(messageBody);\n+        } else {\n+            addBodyAndAttachments(emailMessage, messageBody, attachments);\n+        }\n         return emailMessage;\n     }\n \n+    private static void addBodyAndAttachments(MimeMessage emailMessage, String messageBody, ArrayValue attachments)\n+            throws MessagingException, IOException {\n+        BodyPart messageBodyPart = new MimeBodyPart();\n+        messageBodyPart.setText(messageBody);\n+        Multipart multipart = new MimeMultipart();\n+        multipart.addBodyPart(messageBodyPart);\n+        for (int i = 0; i < attachments.size(); i++) {\n+            if (attachments.get(i) instanceof ObjectValue) {\n+                ObjectValue mimeEntity = (ObjectValue) attachments.get(i);\n+                String contentType = getContentTypeWithParameters(mimeEntity);\n+                if (contentType.startsWith(MimeConstants.MULTIPART_AS_PRIMARY_TYPE)) {\n+                    multipart.addBodyPart(populateMultipart(mimeEntity));\n+                } else {\n+                    multipart.addBodyPart(buildJavaMailBodyPart(mimeEntity, contentType));\n+                }\n+            }\n+        }\n+        emailMessage.setContent(multipart);\n+    }\n+\n+    private static MimeBodyPart populateMultipart(ObjectValue mimeEntity) throws IOException, MessagingException {\n+        Multipart multipart = new MimeMultipart();\n+        ArrayValue multipartMimeEntityArrayValue = EntityBodyHandler.getBodyPartArray(mimeEntity);\n+        int entityCount = multipartMimeEntityArrayValue.size();\n+        for (int i = 0; i < entityCount; i++) {\n+            ObjectValue childMimeEntity = (ObjectValue) multipartMimeEntityArrayValue.get(i);\n+            String childContentType = getContentTypeWithParameters(childMimeEntity);\n+            if (childContentType.startsWith(MimeConstants.MULTIPART_AS_PRIMARY_TYPE)) {\n+                multipart.addBodyPart(populateMultipart(childMimeEntity));\n+            } else {\n+                multipart.addBodyPart(buildJavaMailBodyPart(childMimeEntity, childContentType));\n+            }\n+        }\n+        MimeBodyPart returnMimeBodyPart = new MimeBodyPart();\n+        returnMimeBodyPart.setContent(multipart);\n+        return returnMimeBodyPart;\n+    }\n+\n+    private static MimeBodyPart buildJavaMailBodyPart(ObjectValue mimeEntity, String contentType)\n+            throws MessagingException, IOException {\n+        MimeBodyPart attachmentBodyPart = new MimeBodyPart();\n+        Channel channel = EntityBodyHandler.getByteChannel(mimeEntity);\n+        if (channel != null) {\n+            InputStream inputStream = channel.getInputStream();\n+            ByteArrayDataSource ds = new ByteArrayDataSource(inputStream, contentType);\n+            attachmentBodyPart.setDataHandler(new DataHandler(ds));\n+        } else {\n+            if (CommonUtil.isTextBased(contentType)) {\n+                attachmentBodyPart.setText((String) MimeDataSourceBuilder.getText(mimeEntity));\n+            } else {\n+                ArrayValue binaryContent = (ArrayValue) MimeDataSourceBuilder.getByteArray(mimeEntity);\n+                attachmentBodyPart.setContent(binaryContent.getBytes(), MimeConstants.OCTET_STREAM);\n+            }\n+        }\n+        addHeadersToJavaMailBodyPart(mimeEntity, attachmentBodyPart);\n+        return attachmentBodyPart;\n+    }\n+\n+    private static void addHeadersToJavaMailBodyPart(ObjectValue mimeEntity, MimeBodyPart attachmentBodyPart)\n+            throws MessagingException {\n+        ArrayValue headerNamesArrayValue = EntityHeaders.getHeaderNames(mimeEntity, MimeConstants.LEADING_HEADER);\n+        HandleValue[] handleValues = (HandleValue[]) headerNamesArrayValue.getValues();\n+        String[] headerNames = new String[handleValues.length];\n+        for (int j = 0; j < handleValues.length; j++) {\n+            headerNames[j] = handleValues[j].stringValue();\n+        }\n+        if (headerNames.length > 0) {\n+            for (String headerName : headerNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5defb2b1d2436e4d0d2d8d2a0a015fd95263e2d7"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1MTgwMQ==", "bodyText": "This is already a for each loop. If you are referring to something else can you please suggest the code.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r408851801", "createdAt": "2020-04-15T13:43:19Z", "author": {"login": "Maninda"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -94,14 +112,96 @@ public static MimeMessage generateMessage(Session session, String username, MapV\n             emailMessage.setReplyTo(replyToAddressArray);\n         }\n         emailMessage.setSubject(subject);\n-        emailMessage.setText(messageBody);\n         emailMessage.setFrom(new InternetAddress(fromAddress));\n         if (!senderAddress.isEmpty()) {\n             emailMessage.setSender(new InternetAddress(senderAddress));\n         }\n+        ArrayValue attachments = message.getArrayValue(EmailConstants.MESSAGE_ATTACHMENTS);\n+        if (attachments == null) {\n+            emailMessage.setText(messageBody);\n+        } else {\n+            addBodyAndAttachments(emailMessage, messageBody, attachments);\n+        }\n         return emailMessage;\n     }\n \n+    private static void addBodyAndAttachments(MimeMessage emailMessage, String messageBody, ArrayValue attachments)\n+            throws MessagingException, IOException {\n+        BodyPart messageBodyPart = new MimeBodyPart();\n+        messageBodyPart.setText(messageBody);\n+        Multipart multipart = new MimeMultipart();\n+        multipart.addBodyPart(messageBodyPart);\n+        for (int i = 0; i < attachments.size(); i++) {\n+            if (attachments.get(i) instanceof ObjectValue) {\n+                ObjectValue mimeEntity = (ObjectValue) attachments.get(i);\n+                String contentType = getContentTypeWithParameters(mimeEntity);\n+                if (contentType.startsWith(MimeConstants.MULTIPART_AS_PRIMARY_TYPE)) {\n+                    multipart.addBodyPart(populateMultipart(mimeEntity));\n+                } else {\n+                    multipart.addBodyPart(buildJavaMailBodyPart(mimeEntity, contentType));\n+                }\n+            }\n+        }\n+        emailMessage.setContent(multipart);\n+    }\n+\n+    private static MimeBodyPart populateMultipart(ObjectValue mimeEntity) throws IOException, MessagingException {\n+        Multipart multipart = new MimeMultipart();\n+        ArrayValue multipartMimeEntityArrayValue = EntityBodyHandler.getBodyPartArray(mimeEntity);\n+        int entityCount = multipartMimeEntityArrayValue.size();\n+        for (int i = 0; i < entityCount; i++) {\n+            ObjectValue childMimeEntity = (ObjectValue) multipartMimeEntityArrayValue.get(i);\n+            String childContentType = getContentTypeWithParameters(childMimeEntity);\n+            if (childContentType.startsWith(MimeConstants.MULTIPART_AS_PRIMARY_TYPE)) {\n+                multipart.addBodyPart(populateMultipart(childMimeEntity));\n+            } else {\n+                multipart.addBodyPart(buildJavaMailBodyPart(childMimeEntity, childContentType));\n+            }\n+        }\n+        MimeBodyPart returnMimeBodyPart = new MimeBodyPart();\n+        returnMimeBodyPart.setContent(multipart);\n+        return returnMimeBodyPart;\n+    }\n+\n+    private static MimeBodyPart buildJavaMailBodyPart(ObjectValue mimeEntity, String contentType)\n+            throws MessagingException, IOException {\n+        MimeBodyPart attachmentBodyPart = new MimeBodyPart();\n+        Channel channel = EntityBodyHandler.getByteChannel(mimeEntity);\n+        if (channel != null) {\n+            InputStream inputStream = channel.getInputStream();\n+            ByteArrayDataSource ds = new ByteArrayDataSource(inputStream, contentType);\n+            attachmentBodyPart.setDataHandler(new DataHandler(ds));\n+        } else {\n+            if (CommonUtil.isTextBased(contentType)) {\n+                attachmentBodyPart.setText((String) MimeDataSourceBuilder.getText(mimeEntity));\n+            } else {\n+                ArrayValue binaryContent = (ArrayValue) MimeDataSourceBuilder.getByteArray(mimeEntity);\n+                attachmentBodyPart.setContent(binaryContent.getBytes(), MimeConstants.OCTET_STREAM);\n+            }\n+        }\n+        addHeadersToJavaMailBodyPart(mimeEntity, attachmentBodyPart);\n+        return attachmentBodyPart;\n+    }\n+\n+    private static void addHeadersToJavaMailBodyPart(ObjectValue mimeEntity, MimeBodyPart attachmentBodyPart)\n+            throws MessagingException {\n+        ArrayValue headerNamesArrayValue = EntityHeaders.getHeaderNames(mimeEntity, MimeConstants.LEADING_HEADER);\n+        HandleValue[] handleValues = (HandleValue[]) headerNamesArrayValue.getValues();\n+        String[] headerNames = new String[handleValues.length];\n+        for (int j = 0; j < handleValues.length; j++) {\n+            headerNames[j] = handleValues[j].stringValue();\n+        }\n+        if (headerNames.length > 0) {\n+            for (String headerName : headerNames) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNTY0NA=="}, "originalCommit": {"oid": "5defb2b1d2436e4d0d2d8d2a0a015fd95263e2d7"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODE0ODA0OnYy", "diffSide": "RIGHT", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo1MDowMVrOGF4I3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzo0MzozMFrOGF6Vyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNTgzOA==", "bodyText": "Can be replaced with a for each loop ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r408815838", "createdAt": "2020-04-15T12:50:01Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -94,14 +112,96 @@ public static MimeMessage generateMessage(Session session, String username, MapV\n             emailMessage.setReplyTo(replyToAddressArray);\n         }\n         emailMessage.setSubject(subject);\n-        emailMessage.setText(messageBody);\n         emailMessage.setFrom(new InternetAddress(fromAddress));\n         if (!senderAddress.isEmpty()) {\n             emailMessage.setSender(new InternetAddress(senderAddress));\n         }\n+        ArrayValue attachments = message.getArrayValue(EmailConstants.MESSAGE_ATTACHMENTS);\n+        if (attachments == null) {\n+            emailMessage.setText(messageBody);\n+        } else {\n+            addBodyAndAttachments(emailMessage, messageBody, attachments);\n+        }\n         return emailMessage;\n     }\n \n+    private static void addBodyAndAttachments(MimeMessage emailMessage, String messageBody, ArrayValue attachments)\n+            throws MessagingException, IOException {\n+        BodyPart messageBodyPart = new MimeBodyPart();\n+        messageBodyPart.setText(messageBody);\n+        Multipart multipart = new MimeMultipart();\n+        multipart.addBodyPart(messageBodyPart);\n+        for (int i = 0; i < attachments.size(); i++) {\n+            if (attachments.get(i) instanceof ObjectValue) {\n+                ObjectValue mimeEntity = (ObjectValue) attachments.get(i);\n+                String contentType = getContentTypeWithParameters(mimeEntity);\n+                if (contentType.startsWith(MimeConstants.MULTIPART_AS_PRIMARY_TYPE)) {\n+                    multipart.addBodyPart(populateMultipart(mimeEntity));\n+                } else {\n+                    multipart.addBodyPart(buildJavaMailBodyPart(mimeEntity, contentType));\n+                }\n+            }\n+        }\n+        emailMessage.setContent(multipart);\n+    }\n+\n+    private static MimeBodyPart populateMultipart(ObjectValue mimeEntity) throws IOException, MessagingException {\n+        Multipart multipart = new MimeMultipart();\n+        ArrayValue multipartMimeEntityArrayValue = EntityBodyHandler.getBodyPartArray(mimeEntity);\n+        int entityCount = multipartMimeEntityArrayValue.size();\n+        for (int i = 0; i < entityCount; i++) {\n+            ObjectValue childMimeEntity = (ObjectValue) multipartMimeEntityArrayValue.get(i);\n+            String childContentType = getContentTypeWithParameters(childMimeEntity);\n+            if (childContentType.startsWith(MimeConstants.MULTIPART_AS_PRIMARY_TYPE)) {\n+                multipart.addBodyPart(populateMultipart(childMimeEntity));\n+            } else {\n+                multipart.addBodyPart(buildJavaMailBodyPart(childMimeEntity, childContentType));\n+            }\n+        }\n+        MimeBodyPart returnMimeBodyPart = new MimeBodyPart();\n+        returnMimeBodyPart.setContent(multipart);\n+        return returnMimeBodyPart;\n+    }\n+\n+    private static MimeBodyPart buildJavaMailBodyPart(ObjectValue mimeEntity, String contentType)\n+            throws MessagingException, IOException {\n+        MimeBodyPart attachmentBodyPart = new MimeBodyPart();\n+        Channel channel = EntityBodyHandler.getByteChannel(mimeEntity);\n+        if (channel != null) {\n+            InputStream inputStream = channel.getInputStream();\n+            ByteArrayDataSource ds = new ByteArrayDataSource(inputStream, contentType);\n+            attachmentBodyPart.setDataHandler(new DataHandler(ds));\n+        } else {\n+            if (CommonUtil.isTextBased(contentType)) {\n+                attachmentBodyPart.setText((String) MimeDataSourceBuilder.getText(mimeEntity));\n+            } else {\n+                ArrayValue binaryContent = (ArrayValue) MimeDataSourceBuilder.getByteArray(mimeEntity);\n+                attachmentBodyPart.setContent(binaryContent.getBytes(), MimeConstants.OCTET_STREAM);\n+            }\n+        }\n+        addHeadersToJavaMailBodyPart(mimeEntity, attachmentBodyPart);\n+        return attachmentBodyPart;\n+    }\n+\n+    private static void addHeadersToJavaMailBodyPart(ObjectValue mimeEntity, MimeBodyPart attachmentBodyPart)\n+            throws MessagingException {\n+        ArrayValue headerNamesArrayValue = EntityHeaders.getHeaderNames(mimeEntity, MimeConstants.LEADING_HEADER);\n+        HandleValue[] handleValues = (HandleValue[]) headerNamesArrayValue.getValues();\n+        String[] headerNames = new String[handleValues.length];\n+        for (int j = 0; j < handleValues.length; j++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5defb2b1d2436e4d0d2d8d2a0a015fd95263e2d7"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1MTkxNA==", "bodyText": "As this needs to iterate two arrays handleValues and headerNames it seems the for each loop is not suitable. If you are referring to something else can you please suggest the code.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22401#discussion_r408851914", "createdAt": "2020-04-15T13:43:30Z", "author": {"login": "Maninda"}, "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -94,14 +112,96 @@ public static MimeMessage generateMessage(Session session, String username, MapV\n             emailMessage.setReplyTo(replyToAddressArray);\n         }\n         emailMessage.setSubject(subject);\n-        emailMessage.setText(messageBody);\n         emailMessage.setFrom(new InternetAddress(fromAddress));\n         if (!senderAddress.isEmpty()) {\n             emailMessage.setSender(new InternetAddress(senderAddress));\n         }\n+        ArrayValue attachments = message.getArrayValue(EmailConstants.MESSAGE_ATTACHMENTS);\n+        if (attachments == null) {\n+            emailMessage.setText(messageBody);\n+        } else {\n+            addBodyAndAttachments(emailMessage, messageBody, attachments);\n+        }\n         return emailMessage;\n     }\n \n+    private static void addBodyAndAttachments(MimeMessage emailMessage, String messageBody, ArrayValue attachments)\n+            throws MessagingException, IOException {\n+        BodyPart messageBodyPart = new MimeBodyPart();\n+        messageBodyPart.setText(messageBody);\n+        Multipart multipart = new MimeMultipart();\n+        multipart.addBodyPart(messageBodyPart);\n+        for (int i = 0; i < attachments.size(); i++) {\n+            if (attachments.get(i) instanceof ObjectValue) {\n+                ObjectValue mimeEntity = (ObjectValue) attachments.get(i);\n+                String contentType = getContentTypeWithParameters(mimeEntity);\n+                if (contentType.startsWith(MimeConstants.MULTIPART_AS_PRIMARY_TYPE)) {\n+                    multipart.addBodyPart(populateMultipart(mimeEntity));\n+                } else {\n+                    multipart.addBodyPart(buildJavaMailBodyPart(mimeEntity, contentType));\n+                }\n+            }\n+        }\n+        emailMessage.setContent(multipart);\n+    }\n+\n+    private static MimeBodyPart populateMultipart(ObjectValue mimeEntity) throws IOException, MessagingException {\n+        Multipart multipart = new MimeMultipart();\n+        ArrayValue multipartMimeEntityArrayValue = EntityBodyHandler.getBodyPartArray(mimeEntity);\n+        int entityCount = multipartMimeEntityArrayValue.size();\n+        for (int i = 0; i < entityCount; i++) {\n+            ObjectValue childMimeEntity = (ObjectValue) multipartMimeEntityArrayValue.get(i);\n+            String childContentType = getContentTypeWithParameters(childMimeEntity);\n+            if (childContentType.startsWith(MimeConstants.MULTIPART_AS_PRIMARY_TYPE)) {\n+                multipart.addBodyPart(populateMultipart(childMimeEntity));\n+            } else {\n+                multipart.addBodyPart(buildJavaMailBodyPart(childMimeEntity, childContentType));\n+            }\n+        }\n+        MimeBodyPart returnMimeBodyPart = new MimeBodyPart();\n+        returnMimeBodyPart.setContent(multipart);\n+        return returnMimeBodyPart;\n+    }\n+\n+    private static MimeBodyPart buildJavaMailBodyPart(ObjectValue mimeEntity, String contentType)\n+            throws MessagingException, IOException {\n+        MimeBodyPart attachmentBodyPart = new MimeBodyPart();\n+        Channel channel = EntityBodyHandler.getByteChannel(mimeEntity);\n+        if (channel != null) {\n+            InputStream inputStream = channel.getInputStream();\n+            ByteArrayDataSource ds = new ByteArrayDataSource(inputStream, contentType);\n+            attachmentBodyPart.setDataHandler(new DataHandler(ds));\n+        } else {\n+            if (CommonUtil.isTextBased(contentType)) {\n+                attachmentBodyPart.setText((String) MimeDataSourceBuilder.getText(mimeEntity));\n+            } else {\n+                ArrayValue binaryContent = (ArrayValue) MimeDataSourceBuilder.getByteArray(mimeEntity);\n+                attachmentBodyPart.setContent(binaryContent.getBytes(), MimeConstants.OCTET_STREAM);\n+            }\n+        }\n+        addHeadersToJavaMailBodyPart(mimeEntity, attachmentBodyPart);\n+        return attachmentBodyPart;\n+    }\n+\n+    private static void addHeadersToJavaMailBodyPart(ObjectValue mimeEntity, MimeBodyPart attachmentBodyPart)\n+            throws MessagingException {\n+        ArrayValue headerNamesArrayValue = EntityHeaders.getHeaderNames(mimeEntity, MimeConstants.LEADING_HEADER);\n+        HandleValue[] handleValues = (HandleValue[]) headerNamesArrayValue.getValues();\n+        String[] headerNames = new String[handleValues.length];\n+        for (int j = 0; j < handleValues.length; j++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNTgzOA=="}, "originalCommit": {"oid": "5defb2b1d2436e4d0d2d8d2a0a015fd95263e2d7"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4507, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}