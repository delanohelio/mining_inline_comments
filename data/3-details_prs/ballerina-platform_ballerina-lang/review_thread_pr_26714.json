{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NjE3MDM4", "number": 26714, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwNjoxMjozNFrOFQuCSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwNzo1Njo1MVrOFQvwrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMDc1Nzg0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/varbindingpatternmatchpattern/list-binding-pattern-with-rest-binding-pattern.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwNjoxMjozNFrOIWuiUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwNjoxODoyNFrOIWuqDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDcwMjAzNQ==", "bodyText": "We use underscore for bal file names.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560702035", "createdAt": "2021-01-20T06:12:34Z", "author": {"login": "rdulmina"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/varbindingpatternmatchpattern/list-binding-pattern-with-rest-binding-pattern.bal", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "095531e0ba078dc0b656d6c8790d059d62cf38ce"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDcwNDAxMg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560704012", "createdAt": "2021-01-20T06:18:24Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/varbindingpatternmatchpattern/list-binding-pattern-with-rest-binding-pattern.bal", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDcwMjAzNQ=="}, "originalCommit": {"oid": "095531e0ba078dc0b656d6c8790d059d62cf38ce"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTAyNzExOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/bindingpattern/RestBindingPatternNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwNzo1MjoyOFrOIWw89A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwNzo1MjoyOFrOIWw89A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MTYyMA==", "bodyText": "2021?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560741620", "createdAt": "2021-01-20T07:52:28Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/bindingpattern/RestBindingPatternNode.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c347919a978ed7c774d143ab6303a856fd6035"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTAyODM1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/bindingpattern/WildCardBindingPatternNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwNzo1Mjo1MlrOIWw9pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNDo0NzoyNFrOIXlVkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MTc5OA==", "bodyText": "Missing license header", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560741798", "createdAt": "2021-01-20T07:52:52Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/bindingpattern/WildCardBindingPatternNode.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.ballerinalang.model.tree.bindingpattern;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c347919a978ed7c774d143ab6303a856fd6035"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU5OTg5MA==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r561599890", "createdAt": "2021-01-21T04:47:24Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/bindingpattern/WildCardBindingPatternNode.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.ballerinalang.model.tree.bindingpattern;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MTc5OA=="}, "originalCommit": {"oid": "e3c347919a978ed7c774d143ab6303a856fd6035"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTAzMjY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwNzo1NDoyMVrOIWxATw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNDo0NzoyMlrOIXlVfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MjQ3OQ==", "bodyText": "Can this cause NPE at any time?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560742479", "createdAt": "2021-01-20T07:54:21Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3398,20 +3399,188 @@ private BLangExpression createConditionForConstMatchPattern(BLangConstPattern co\n         return createBinaryExpression(constPattern.pos, matchExprVarRef, constPattern.expr);\n     }\n \n+    private BLangExpression createConditionForWildCardBindingPattern(boolean matchesAll, Location pos) {\n+        return ASTBuilderUtil.createLiteral(pos, symTable.booleanType, matchesAll);\n+    }\n+\n+    private BLangExpression createConditionForCaptureBindingPattern(BLangCaptureBindingPattern captureBindingPattern,\n+                                                                    BLangSimpleVarRef matchExprVarRef) {\n+        Location pos = captureBindingPattern.pos;\n+        BLangSimpleVarRef captureBindingPatternVarRef =\n+                declaredVarDef.get(captureBindingPattern.getIdentifier().getValue());\n+        matchStmtsForPattern.add(ASTBuilderUtil.createAssignmentStmt(pos,\n+                captureBindingPatternVarRef, matchExprVarRef));\n+        return ASTBuilderUtil.createLiteral(pos, symTable.booleanType, true);\n+    }\n+\n+    private BLangExpression createConditionForListBindingPattern(BLangListBindingPattern listBindingPattern,\n+                                                                 BLangSimpleVarRef matchExprVarRef) {\n+        Location pos = listBindingPattern.pos;\n+        BType bindingPatternType = listBindingPattern.type;\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$listBindingPatternResult$\", symTable.booleanType, null,\n+                pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        BLangBlockStmt mainBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        mainBlockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        mainBlockStmt.addStatement(failureResult);\n+\n+        BLangExpression typeCheckCondition = createIsLikeExpression(listBindingPattern.pos, matchExprVarRef,\n+                bindingPatternType);\n+\n+        BLangExpression typeConvertedExpr = addConversionExprIfRequired(matchExprVarRef, bindingPatternType);\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", bindingPatternType,\n+                typeConvertedExpr, pos);\n+        BLangSimpleVarRef tempCastVarRef = ASTBuilderUtil.createVariableRef(pos,\n+                tempCastVarDef.var.symbol);\n+\n+        BLangBlockStmt ifBlock = ASTBuilderUtil.createBlockStmt(pos);\n+        ifBlock.addStatement(tempCastVarDef);\n+        BLangIf ifStmt = ASTBuilderUtil.createIfElseStmt(pos, typeCheckCondition, ifBlock, null);\n+        mainBlockStmt.addStatement(ifStmt);\n+\n+        List<BLangBindingPattern> bindingPatterns = listBindingPattern.bindingPatterns;\n+        BLangExpression condition = ASTBuilderUtil.createLiteral(pos, symTable.booleanType, true);;\n+\n+        for (int i = 0; i < bindingPatterns.size(); i++) {\n+            BLangExpression memberPatternCondition = createConditionForListMemberPattern(i, bindingPatterns.get(i),\n+                    tempCastVarDef, ifBlock, bindingPatterns.get(i).type, pos);\n+            if (memberPatternCondition.getKind() == NodeKind.LITERAL) {\n+                if ((Boolean) ((BLangLiteral) memberPatternCondition).value) {\n+                    continue;\n+                }\n+            }\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType, symTable.booleanType));\n+        }\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        if (listBindingPattern.restBindingPattern != null) {\n+            BLangRestBindingPattern restBindingPattern = listBindingPattern.restBindingPattern;\n+            BLangSimpleVarRef restBindingPatternVarRef = declaredVarDef.get(restBindingPattern.variableName.value);\n+            matchStmtsForPattern.add(ASTBuilderUtil.createAssignmentStmt(pos, restBindingPatternVarRef,\n+                    createLangLibInvocationNode(\"slice\", tempCastVarRef,\n+                            new ArrayList<>(Arrays.asList(new BLangLiteral((long) bindingPatterns.size(),\n+                                    symTable.intType))), null, pos)));\n+        }\n+\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        ifBlock.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(mainBlockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        return statementExpression;\n+    }\n+\n+    private BLangExpression createConditionForListMemberPattern(int index, BLangBindingPattern bindingPattern,\n+                                                                BLangSimpleVariableDef tempCastVarDef,\n+                                                                BLangBlockStmt blockStmt, BType type,\n+                                                                Location pos) {\n+        BLangExpression indexExpr = createIndexBasedAccessExpr(type, pos, new BLangLiteral((long) index,\n+                symTable.intType), tempCastVarDef.var.symbol, null);\n+\n+        BLangSimpleVariableDef tempVarDef = createVarDef(\"$memberVarTemp$\" + index + \"_$\", type, indexExpr,\n+                bindingPattern.pos);\n+        BLangSimpleVarRef tempVarRef = ASTBuilderUtil.createVariableRef(pos, tempVarDef.var.symbol);\n+        blockStmt.addStatement(tempVarDef);\n+\n+        return createVarCheckCondition(bindingPattern, tempVarRef);\n+    }\n+\n+    private BLangExpression createVarCheckCondition(BLangBindingPattern bindingPattern, BLangSimpleVarRef varRef) {\n+        NodeKind bindingPatternKind = bindingPattern.getKind();\n+        switch (bindingPatternKind) {\n+            case WILDCARD_BINDING_PATTERN:\n+                return createConditionForWildCardBindingPattern(true, bindingPattern.pos);\n+            case CAPTURE_BINDING_PATTERN:\n+                return createConditionForCaptureBindingPattern((BLangCaptureBindingPattern) bindingPattern, varRef);\n+            case LIST_BINDING_PATTERN:\n+                return createVarCheckConditionForListBindingPattern((BLangListBindingPattern) bindingPattern, varRef);\n+            default:\n+                // If some patterns are not implemented, those should be detected before this phase\n+                // TODO : Remove this after all patterns are implemented\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c347919a978ed7c774d143ab6303a856fd6035"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU5OTg3MQ==", "bodyText": "We can remove that after all patterns are merged. (Will remove it in last one)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r561599871", "createdAt": "2021-01-21T04:47:22Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3398,20 +3399,188 @@ private BLangExpression createConditionForConstMatchPattern(BLangConstPattern co\n         return createBinaryExpression(constPattern.pos, matchExprVarRef, constPattern.expr);\n     }\n \n+    private BLangExpression createConditionForWildCardBindingPattern(boolean matchesAll, Location pos) {\n+        return ASTBuilderUtil.createLiteral(pos, symTable.booleanType, matchesAll);\n+    }\n+\n+    private BLangExpression createConditionForCaptureBindingPattern(BLangCaptureBindingPattern captureBindingPattern,\n+                                                                    BLangSimpleVarRef matchExprVarRef) {\n+        Location pos = captureBindingPattern.pos;\n+        BLangSimpleVarRef captureBindingPatternVarRef =\n+                declaredVarDef.get(captureBindingPattern.getIdentifier().getValue());\n+        matchStmtsForPattern.add(ASTBuilderUtil.createAssignmentStmt(pos,\n+                captureBindingPatternVarRef, matchExprVarRef));\n+        return ASTBuilderUtil.createLiteral(pos, symTable.booleanType, true);\n+    }\n+\n+    private BLangExpression createConditionForListBindingPattern(BLangListBindingPattern listBindingPattern,\n+                                                                 BLangSimpleVarRef matchExprVarRef) {\n+        Location pos = listBindingPattern.pos;\n+        BType bindingPatternType = listBindingPattern.type;\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$listBindingPatternResult$\", symTable.booleanType, null,\n+                pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        BLangBlockStmt mainBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        mainBlockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        mainBlockStmt.addStatement(failureResult);\n+\n+        BLangExpression typeCheckCondition = createIsLikeExpression(listBindingPattern.pos, matchExprVarRef,\n+                bindingPatternType);\n+\n+        BLangExpression typeConvertedExpr = addConversionExprIfRequired(matchExprVarRef, bindingPatternType);\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", bindingPatternType,\n+                typeConvertedExpr, pos);\n+        BLangSimpleVarRef tempCastVarRef = ASTBuilderUtil.createVariableRef(pos,\n+                tempCastVarDef.var.symbol);\n+\n+        BLangBlockStmt ifBlock = ASTBuilderUtil.createBlockStmt(pos);\n+        ifBlock.addStatement(tempCastVarDef);\n+        BLangIf ifStmt = ASTBuilderUtil.createIfElseStmt(pos, typeCheckCondition, ifBlock, null);\n+        mainBlockStmt.addStatement(ifStmt);\n+\n+        List<BLangBindingPattern> bindingPatterns = listBindingPattern.bindingPatterns;\n+        BLangExpression condition = ASTBuilderUtil.createLiteral(pos, symTable.booleanType, true);;\n+\n+        for (int i = 0; i < bindingPatterns.size(); i++) {\n+            BLangExpression memberPatternCondition = createConditionForListMemberPattern(i, bindingPatterns.get(i),\n+                    tempCastVarDef, ifBlock, bindingPatterns.get(i).type, pos);\n+            if (memberPatternCondition.getKind() == NodeKind.LITERAL) {\n+                if ((Boolean) ((BLangLiteral) memberPatternCondition).value) {\n+                    continue;\n+                }\n+            }\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType, symTable.booleanType));\n+        }\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        if (listBindingPattern.restBindingPattern != null) {\n+            BLangRestBindingPattern restBindingPattern = listBindingPattern.restBindingPattern;\n+            BLangSimpleVarRef restBindingPatternVarRef = declaredVarDef.get(restBindingPattern.variableName.value);\n+            matchStmtsForPattern.add(ASTBuilderUtil.createAssignmentStmt(pos, restBindingPatternVarRef,\n+                    createLangLibInvocationNode(\"slice\", tempCastVarRef,\n+                            new ArrayList<>(Arrays.asList(new BLangLiteral((long) bindingPatterns.size(),\n+                                    symTable.intType))), null, pos)));\n+        }\n+\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        ifBlock.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(mainBlockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        return statementExpression;\n+    }\n+\n+    private BLangExpression createConditionForListMemberPattern(int index, BLangBindingPattern bindingPattern,\n+                                                                BLangSimpleVariableDef tempCastVarDef,\n+                                                                BLangBlockStmt blockStmt, BType type,\n+                                                                Location pos) {\n+        BLangExpression indexExpr = createIndexBasedAccessExpr(type, pos, new BLangLiteral((long) index,\n+                symTable.intType), tempCastVarDef.var.symbol, null);\n+\n+        BLangSimpleVariableDef tempVarDef = createVarDef(\"$memberVarTemp$\" + index + \"_$\", type, indexExpr,\n+                bindingPattern.pos);\n+        BLangSimpleVarRef tempVarRef = ASTBuilderUtil.createVariableRef(pos, tempVarDef.var.symbol);\n+        blockStmt.addStatement(tempVarDef);\n+\n+        return createVarCheckCondition(bindingPattern, tempVarRef);\n+    }\n+\n+    private BLangExpression createVarCheckCondition(BLangBindingPattern bindingPattern, BLangSimpleVarRef varRef) {\n+        NodeKind bindingPatternKind = bindingPattern.getKind();\n+        switch (bindingPatternKind) {\n+            case WILDCARD_BINDING_PATTERN:\n+                return createConditionForWildCardBindingPattern(true, bindingPattern.pos);\n+            case CAPTURE_BINDING_PATTERN:\n+                return createConditionForCaptureBindingPattern((BLangCaptureBindingPattern) bindingPattern, varRef);\n+            case LIST_BINDING_PATTERN:\n+                return createVarCheckConditionForListBindingPattern((BLangListBindingPattern) bindingPattern, varRef);\n+            default:\n+                // If some patterns are not implemented, those should be detected before this phase\n+                // TODO : Remove this after all patterns are implemented\n+                return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MjQ3OQ=="}, "originalCommit": {"oid": "e3c347919a978ed7c774d143ab6303a856fd6035"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTAzODE5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwNzo1NjowN1rOIWxDyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwNzo1NjowN1rOIWxDyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MzM2OQ==", "bodyText": "What about the default case? Don't we need to handle?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560743369", "createdAt": "2021-01-20T07:56:07Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2952,6 +2986,55 @@ private void checkForSimilarVars(Map<String, BVarSymbol> declaredVars, Map<Strin\n         }\n     }\n \n+    private void assignTypesToMemberPatterns(BLangBindingPattern bindingPattern, BType bindingPatternType) {\n+        NodeKind patternKind = bindingPattern.getKind();\n+        switch (patternKind) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c347919a978ed7c774d143ab6303a856fd6035"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTAzOTQ2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/bindingpatterns/BLangRestBindingPattern.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwNzo1NjozMFrOIWxEjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwOTo0NToxNVrOIW12ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MzU2Nw==", "bodyText": "2021?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560743567", "createdAt": "2021-01-20T07:56:30Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/bindingpatterns/BLangRestBindingPattern.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c347919a978ed7c774d143ab6303a856fd6035"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgyMTg2MQ==", "bodyText": "We decided to go with 2020 since this file is created in that year.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560821861", "createdAt": "2021-01-20T09:45:15Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/bindingpatterns/BLangRestBindingPattern.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MzU2Nw=="}, "originalCommit": {"oid": "e3c347919a978ed7c774d143ab6303a856fd6035"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTA0MDQ1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/bindingpatterns/BLangWildCardBindingPattern.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwNzo1Njo1MVrOIWxFMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNDo0NzoxNlrOIXlVUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MzczMA==", "bodyText": "Missing license", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560743730", "createdAt": "2021-01-20T07:56:51Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/bindingpatterns/BLangWildCardBindingPattern.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.wso2.ballerinalang.compiler.tree.bindingpatterns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c347919a978ed7c774d143ab6303a856fd6035"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU5OTgyNw==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r561599827", "createdAt": "2021-01-21T04:47:16Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/bindingpatterns/BLangWildCardBindingPattern.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.wso2.ballerinalang.compiler.tree.bindingpatterns;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MzczMA=="}, "originalCommit": {"oid": "e3c347919a978ed7c774d143ab6303a856fd6035"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3170, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}