{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTgwMTg1", "number": 26737, "title": "Refactor code position selection for code actions", "bodyText": "Purpose\nRefactor the logic for selecting the position to display/not-display the code actions.\nFixes https://github.com/ballerina-platform/plugin-vscode/issues/91\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-11-04T07:00:42Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26737", "merged": true, "mergeCommit": {"oid": "6607075a9b24d9a4f3aa7324037c27a8fa534b18"}, "closed": true, "closedAt": "2020-11-11T04:21:01Z", "author": {"login": "prabushi"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZSxFngBqjM5NTkxMDY4Mjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbWI9IgFqTUyNzg1MTU1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c745400a85e6748e632aaa4a836e97940fc3f87", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3c745400a85e6748e632aaa4a836e97940fc3f87", "committedDate": "2020-11-04T06:59:03Z", "message": "Consider doc lines for code actions\n\nEvalute the code actions considering the number of API documentaion lines in a member node."}, "afterCommit": {"oid": "bb93e1ccc8b72324d34af34a7e932e6f5e665632", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bb93e1ccc8b72324d34af34a7e932e6f5e665632", "committedDate": "2020-11-04T19:16:45Z", "message": "Refactor code action selection logic\n\nRefactor code action selection logic to consider documentation, tree node position, etc."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed3c4b6691444cfd9fa74cc9483ebce6b48a0a6f", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ed3c4b6691444cfd9fa74cc9483ebce6b48a0a6f", "committedDate": "2020-11-05T02:45:38Z", "message": "Fix failures"}, "afterCommit": {"oid": "f1e69b4a63dd40d4e388a58c82f48599153ef3f3", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1e69b4a63dd40d4e388a58c82f48599153ef3f3", "committedDate": "2020-11-05T04:17:38Z", "message": "Refactor code position selection for a code action\n\nRefactor the logic for selecting the position to display/not display the code actions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MTEzNDI4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26737#pullrequestreview-524113428", "createdAt": "2020-11-05T10:17:53Z", "commit": {"oid": "f1e69b4a63dd40d4e388a58c82f48599153ef3f3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDoxNzo1NFrOHt8dnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDoyMTo1MVrOHt8noQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzODU4OQ==", "bodyText": "kind is an enum here. So you can directly use the kinds in the cases instead of the string", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26737#discussion_r517938589", "createdAt": "2020-11-05T10:17:54Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -183,4 +201,121 @@ public static CodeActionNodeType topLevelNodeInLine(LSContext context, TextDocum\n \n         return lsDiagnostics;\n     }\n+\n+    /**\n+     * Returns an object that is included with codeStart, bodyStart and bodyEnd positions of a given node.\n+     *\n+     * @param node Node for which the positions are calculated\n+     * @return {@link NodePositions} of the given node\n+     */\n+    private static NodePositions getNodeSelectionPositions(Node node) {\n+        if (!(node instanceof NonTerminalNode)) {\n+            return new NodePositions(null, null, null);\n+        }\n+        NonTerminalNode member = (NonTerminalNode) node;\n+        int codeStartLine = member.lineRange().startLine().line() + getNumberOfDocLines(member);\n+        Position startCodePosition = new Position(codeStartLine, member.lineRange().startLine().offset());\n+\n+        switch (member.kind().name()) {\n+            case \"FUNCTION_DEFINITION\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e69b4a63dd40d4e388a58c82f48599153ef3f3"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0MDA1MQ==", "bodyText": "You can directly cast in to the specific node type and access the APIs such as openBrace()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26737#discussion_r517940051", "createdAt": "2020-11-05T10:20:04Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -183,4 +201,121 @@ public static CodeActionNodeType topLevelNodeInLine(LSContext context, TextDocum\n \n         return lsDiagnostics;\n     }\n+\n+    /**\n+     * Returns an object that is included with codeStart, bodyStart and bodyEnd positions of a given node.\n+     *\n+     * @param node Node for which the positions are calculated\n+     * @return {@link NodePositions} of the given node\n+     */\n+    private static NodePositions getNodeSelectionPositions(Node node) {\n+        if (!(node instanceof NonTerminalNode)) {\n+            return new NodePositions(null, null, null);\n+        }\n+        NonTerminalNode member = (NonTerminalNode) node;\n+        int codeStartLine = member.lineRange().startLine().line() + getNumberOfDocLines(member);\n+        Position startCodePosition = new Position(codeStartLine, member.lineRange().startLine().offset());\n+\n+        switch (member.kind().name()) {\n+            case \"FUNCTION_DEFINITION\":\n+            case \"OBJECT_METHOD_DEFINITION\":\n+                for (Node child : member.children()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e69b4a63dd40d4e388a58c82f48599153ef3f3"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0MDc0OQ==", "bodyText": "Is it possible to use an offset based calculation here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26737#discussion_r517940749", "createdAt": "2020-11-05T10:21:14Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -183,4 +201,121 @@ public static CodeActionNodeType topLevelNodeInLine(LSContext context, TextDocum\n \n         return lsDiagnostics;\n     }\n+\n+    /**\n+     * Returns an object that is included with codeStart, bodyStart and bodyEnd positions of a given node.\n+     *\n+     * @param node Node for which the positions are calculated\n+     * @return {@link NodePositions} of the given node\n+     */\n+    private static NodePositions getNodeSelectionPositions(Node node) {\n+        if (!(node instanceof NonTerminalNode)) {\n+            return new NodePositions(null, null, null);\n+        }\n+        NonTerminalNode member = (NonTerminalNode) node;\n+        int codeStartLine = member.lineRange().startLine().line() + getNumberOfDocLines(member);\n+        Position startCodePosition = new Position(codeStartLine, member.lineRange().startLine().offset());\n+\n+        switch (member.kind().name()) {\n+            case \"FUNCTION_DEFINITION\":\n+            case \"OBJECT_METHOD_DEFINITION\":\n+                for (Node child : member.children()) {\n+                    if (child instanceof FunctionBodyBlockNode) {\n+                        return createNodePositions(child.lineRange(), startCodePosition);\n+                    }\n+                }\n+                break;\n+            case \"SERVICE_DECLARATION\":\n+                for (Node child : member.children()) {\n+                    if (child instanceof ServiceBodyNode) {\n+                        return createNodePositions(child.lineRange(), startCodePosition);\n+                    }\n+                }\n+                break;\n+            case \"METHOD_DECLARATION\":\n+                LineRange methodLineRange = member.lineRange();\n+                Position methodEndCodeBodyPosition = new Position(methodLineRange.endLine().line(),\n+                        methodLineRange.endLine().offset());\n+                return new NodePositions(startCodePosition, methodEndCodeBodyPosition, methodEndCodeBodyPosition);\n+            case \"CLASS_DEFINITION\":\n+            case \"TYPE_DEFINITION\":\n+                Position startCodeBodyPosition = null;\n+                for (Node child : member.children()) {\n+                    if (child instanceof IdentifierToken) {\n+                        LineRange identifierLineRange = child.lineRange();\n+                        startCodeBodyPosition = new Position(identifierLineRange.endLine().line(),\n+                                identifierLineRange.endLine().offset());\n+                        break;\n+                    }\n+                }\n+                LineRange typeLineRange = member.lineRange();\n+                Position typeEndCodeBodyPosition = new Position(typeLineRange.endLine().line(),\n+                        typeLineRange.endLine().offset());\n+                return new NodePositions(startCodePosition, startCodeBodyPosition, typeEndCodeBodyPosition);\n+        }\n+        return new NodePositions(startCodePosition, null, null);\n+    }\n+\n+    /**\n+     * Returns the number of API documentation lines.\n+     *\n+     * @param member Node for which the doc lines are calculated\n+     * @return Number of documentation lines\n+     */\n+    private static int getNumberOfDocLines(NonTerminalNode member) {\n+        if (member.children().size() > 0 && member.children().get(0) instanceof MetadataNode) {\n+            LineRange docLineRange = member.children().get(0).lineRange();\n+            return docLineRange.endLine().line() - docLineRange.startLine().line() + 1;\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * Checks if a give position is within a given range.\n+     *\n+     * @param start Start position of the range\n+     * @param end End position of the range\n+     * @param position Cursor position\n+     * @param isEndInclusive If the range is included with end position or not\n+     * @return If the position is within the range or not\n+     */\n+    private static boolean isWithinRange(Position start, Position end, Position position, boolean isEndInclusive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e69b4a63dd40d4e388a58c82f48599153ef3f3"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0MTE1Mw==", "bodyText": "Do we need this? Isn't it possible to do the calculations on the fly?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26737#discussion_r517941153", "createdAt": "2020-11-05T10:21:51Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -183,4 +201,121 @@ public static CodeActionNodeType topLevelNodeInLine(LSContext context, TextDocum\n \n         return lsDiagnostics;\n     }\n+\n+    /**\n+     * Returns an object that is included with codeStart, bodyStart and bodyEnd positions of a given node.\n+     *\n+     * @param node Node for which the positions are calculated\n+     * @return {@link NodePositions} of the given node\n+     */\n+    private static NodePositions getNodeSelectionPositions(Node node) {\n+        if (!(node instanceof NonTerminalNode)) {\n+            return new NodePositions(null, null, null);\n+        }\n+        NonTerminalNode member = (NonTerminalNode) node;\n+        int codeStartLine = member.lineRange().startLine().line() + getNumberOfDocLines(member);\n+        Position startCodePosition = new Position(codeStartLine, member.lineRange().startLine().offset());\n+\n+        switch (member.kind().name()) {\n+            case \"FUNCTION_DEFINITION\":\n+            case \"OBJECT_METHOD_DEFINITION\":\n+                for (Node child : member.children()) {\n+                    if (child instanceof FunctionBodyBlockNode) {\n+                        return createNodePositions(child.lineRange(), startCodePosition);\n+                    }\n+                }\n+                break;\n+            case \"SERVICE_DECLARATION\":\n+                for (Node child : member.children()) {\n+                    if (child instanceof ServiceBodyNode) {\n+                        return createNodePositions(child.lineRange(), startCodePosition);\n+                    }\n+                }\n+                break;\n+            case \"METHOD_DECLARATION\":\n+                LineRange methodLineRange = member.lineRange();\n+                Position methodEndCodeBodyPosition = new Position(methodLineRange.endLine().line(),\n+                        methodLineRange.endLine().offset());\n+                return new NodePositions(startCodePosition, methodEndCodeBodyPosition, methodEndCodeBodyPosition);\n+            case \"CLASS_DEFINITION\":\n+            case \"TYPE_DEFINITION\":\n+                Position startCodeBodyPosition = null;\n+                for (Node child : member.children()) {\n+                    if (child instanceof IdentifierToken) {\n+                        LineRange identifierLineRange = child.lineRange();\n+                        startCodeBodyPosition = new Position(identifierLineRange.endLine().line(),\n+                                identifierLineRange.endLine().offset());\n+                        break;\n+                    }\n+                }\n+                LineRange typeLineRange = member.lineRange();\n+                Position typeEndCodeBodyPosition = new Position(typeLineRange.endLine().line(),\n+                        typeLineRange.endLine().offset());\n+                return new NodePositions(startCodePosition, startCodeBodyPosition, typeEndCodeBodyPosition);\n+        }\n+        return new NodePositions(startCodePosition, null, null);\n+    }\n+\n+    /**\n+     * Returns the number of API documentation lines.\n+     *\n+     * @param member Node for which the doc lines are calculated\n+     * @return Number of documentation lines\n+     */\n+    private static int getNumberOfDocLines(NonTerminalNode member) {\n+        if (member.children().size() > 0 && member.children().get(0) instanceof MetadataNode) {\n+            LineRange docLineRange = member.children().get(0).lineRange();\n+            return docLineRange.endLine().line() - docLineRange.startLine().line() + 1;\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * Checks if a give position is within a given range.\n+     *\n+     * @param start Start position of the range\n+     * @param end End position of the range\n+     * @param position Cursor position\n+     * @param isEndInclusive If the range is included with end position or not\n+     * @return If the position is within the range or not\n+     */\n+    private static boolean isWithinRange(Position start, Position end, Position position, boolean isEndInclusive) {\n+        if (start == null || end == null || position == null) {\n+            return false;\n+        }\n+\n+        if (position.getLine() > start.getLine() && position.getLine() < end.getLine()) {\n+            return true;\n+        } else if (position.getLine() == start.getLine()) {\n+            return position.getCharacter() >= start.getCharacter() && (position.getLine() < end.getLine()\n+                    || (position.getLine() == end.getLine() && (position.getCharacter() < end.getCharacter()\n+                    || isEndInclusive && position.getCharacter() == end.getCharacter())));\n+        } else if (position.getLine() == end.getLine()) {\n+            return (position.getCharacter() < end.getCharacter() || (isEndInclusive\n+                    && position.getCharacter() == end.getCharacter())) && (position.getLine() > start.getLine()\n+                    || (position.getLine() == start.getLine() && position.getCharacter() >= start.getCharacter()));\n+        }\n+        return false;\n+    }\n+\n+    private static NodePositions createNodePositions(LineRange lineRange, Position startCodePosition) {\n+        Position startCodeBodyPosition = new Position(lineRange.startLine().line(), lineRange.startLine().offset());\n+        Position endCodeBodyPosition = new Position(lineRange.endLine().line(), lineRange.endLine().offset());\n+        return new NodePositions(startCodePosition, startCodeBodyPosition, endCodeBodyPosition);\n+    }\n+\n+    /**\n+     * Inner class to hold on to the positions of a node.\n+     */\n+    private static class NodePositions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e69b4a63dd40d4e388a58c82f48599153ef3f3"}, "originalPosition": 230}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1e69b4a63dd40d4e388a58c82f48599153ef3f3", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1e69b4a63dd40d4e388a58c82f48599153ef3f3", "committedDate": "2020-11-05T04:17:38Z", "message": "Refactor code position selection for a code action\n\nRefactor the logic for selecting the position to display/not display the code actions."}, "afterCommit": {"oid": "72d85999510c8b19dd6be73070c5a7d25ed2ae02", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72d85999510c8b19dd6be73070c5a7d25ed2ae02", "committedDate": "2020-11-06T05:11:27Z", "message": "Refactor code position selection for a code action\n\nRefactor the logic for selecting the position to display/not display the code actions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72d85999510c8b19dd6be73070c5a7d25ed2ae02", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72d85999510c8b19dd6be73070c5a7d25ed2ae02", "committedDate": "2020-11-06T05:11:27Z", "message": "Refactor code position selection for a code action\n\nRefactor the logic for selecting the position to display/not display the code actions."}, "afterCommit": {"oid": "d3ffccd7014df91f1782533e237a5f5ea0cc7153", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3ffccd7014df91f1782533e237a5f5ea0cc7153", "committedDate": "2020-11-06T05:16:36Z", "message": "Refactor code position selection for a code action\n\nRefactor the logic for selecting the position to display/not display the code actions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3ffccd7014df91f1782533e237a5f5ea0cc7153", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3ffccd7014df91f1782533e237a5f5ea0cc7153", "committedDate": "2020-11-06T05:16:36Z", "message": "Refactor code position selection for a code action\n\nRefactor the logic for selecting the position to display/not display the code actions."}, "afterCommit": {"oid": "869bf6193db9e13cd2e97b3201d3df09cc99f59b", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/869bf6193db9e13cd2e97b3201d3df09cc99f59b", "committedDate": "2020-11-07T09:05:13Z", "message": "Refactor code position selection for code actions\n\nRefactor the logic for selecting the position to display/not display the code actions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTA5MTE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26737#pullrequestreview-525909117", "createdAt": "2020-11-09T03:55:25Z", "commit": {"oid": "869bf6193db9e13cd2e97b3201d3df09cc99f59b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMzo1NToyNlrOHveNZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMzo1ODozMVrOHvePoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0MDA3MA==", "bodyText": "let's not check for nulls here. Use Optional.isEmpty() and Optionnal.isPresent() APIs", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26737#discussion_r519540070", "createdAt": "2020-11-09T03:55:26Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -183,4 +197,124 @@ public static CodeActionNodeType topLevelNodeInLine(LSContext context, TextDocum\n \n         return lsDiagnostics;\n     }\n+\n+    /**\n+     * Returns if given position's offset is within the code body of give node.\n+     *\n+     * @param node Node in which the code body is considered\n+     * @param positionOffset Offset of the position\n+     * @return {@link Boolean} If within the body or not\n+     */\n+    private static boolean isWithinBody(Node node, int positionOffset) {\n+        if (!(node instanceof NonTerminalNode)) {\n+            return false;\n+        }\n+\n+        switch (node.kind()) {\n+            case FUNCTION_DEFINITION:\n+            case OBJECT_METHOD_DEFINITION:\n+                TextRange functionBodyTextRange = ((FunctionDefinitionNode) node).functionBody().textRange();\n+                return isWithinRange(positionOffset, functionBodyTextRange.startOffset(),\n+                        functionBodyTextRange.endOffset());\n+            case SERVICE_DECLARATION:\n+                TextRange serviceBodyTextRange = ((ServiceDeclarationNode) node).serviceBody().textRange();\n+                return isWithinRange(positionOffset, serviceBodyTextRange.startOffset(),\n+                        serviceBodyTextRange.endOffset());\n+            case CLASS_DEFINITION:\n+                ClassDefinitionNode classDefinitionNode = (ClassDefinitionNode) node;\n+                return isWithinRange(positionOffset, classDefinitionNode.openBrace().textRange().startOffset(),\n+                        classDefinitionNode.closeBrace().textRange().endOffset());\n+            case TYPE_DEFINITION:\n+                TypeDefinitionNode typeDefinitionNode = (TypeDefinitionNode) node;\n+                return isWithinRange(positionOffset,\n+                        typeDefinitionNode.typeDescriptor().textRange().startOffset(),\n+                        typeDefinitionNode.semicolonToken().textRange().startOffset());\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns if given position's offset is within the starting code segment of give node.\n+     *\n+     * @param node Node in which the code start segment is considered\n+     * @param positionOffset Offset of the position\n+     * @return {@link Boolean} If within the start segment or not\n+     */\n+    private static boolean isWithinStartCodeSegment(Node node, int positionOffset) {\n+        if (!(node instanceof NonTerminalNode)) {\n+            return false;\n+        }\n+\n+        switch (node.kind()) {\n+            case FUNCTION_DEFINITION:\n+            case OBJECT_METHOD_DEFINITION:\n+                FunctionDefinitionNode functionDefinitionNode = (FunctionDefinitionNode) node;\n+                MetadataNode functionMetadataNode = functionDefinitionNode.metadata().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869bf6193db9e13cd2e97b3201d3df09cc99f59b"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0MDY0MA==", "bodyText": "Missing the default case, Where we can just return false", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26737#discussion_r519540640", "createdAt": "2020-11-09T03:58:31Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -183,4 +197,124 @@ public static CodeActionNodeType topLevelNodeInLine(LSContext context, TextDocum\n \n         return lsDiagnostics;\n     }\n+\n+    /**\n+     * Returns if given position's offset is within the code body of give node.\n+     *\n+     * @param node Node in which the code body is considered\n+     * @param positionOffset Offset of the position\n+     * @return {@link Boolean} If within the body or not\n+     */\n+    private static boolean isWithinBody(Node node, int positionOffset) {\n+        if (!(node instanceof NonTerminalNode)) {\n+            return false;\n+        }\n+\n+        switch (node.kind()) {\n+            case FUNCTION_DEFINITION:\n+            case OBJECT_METHOD_DEFINITION:\n+                TextRange functionBodyTextRange = ((FunctionDefinitionNode) node).functionBody().textRange();\n+                return isWithinRange(positionOffset, functionBodyTextRange.startOffset(),\n+                        functionBodyTextRange.endOffset());\n+            case SERVICE_DECLARATION:\n+                TextRange serviceBodyTextRange = ((ServiceDeclarationNode) node).serviceBody().textRange();\n+                return isWithinRange(positionOffset, serviceBodyTextRange.startOffset(),\n+                        serviceBodyTextRange.endOffset());\n+            case CLASS_DEFINITION:\n+                ClassDefinitionNode classDefinitionNode = (ClassDefinitionNode) node;\n+                return isWithinRange(positionOffset, classDefinitionNode.openBrace().textRange().startOffset(),\n+                        classDefinitionNode.closeBrace().textRange().endOffset());\n+            case TYPE_DEFINITION:\n+                TypeDefinitionNode typeDefinitionNode = (TypeDefinitionNode) node;\n+                return isWithinRange(positionOffset,\n+                        typeDefinitionNode.typeDescriptor().textRange().startOffset(),\n+                        typeDefinitionNode.semicolonToken().textRange().startOffset());\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns if given position's offset is within the starting code segment of give node.\n+     *\n+     * @param node Node in which the code start segment is considered\n+     * @param positionOffset Offset of the position\n+     * @return {@link Boolean} If within the start segment or not\n+     */\n+    private static boolean isWithinStartCodeSegment(Node node, int positionOffset) {\n+        if (!(node instanceof NonTerminalNode)) {\n+            return false;\n+        }\n+\n+        switch (node.kind()) {\n+            case FUNCTION_DEFINITION:\n+            case OBJECT_METHOD_DEFINITION:\n+                FunctionDefinitionNode functionDefinitionNode = (FunctionDefinitionNode) node;\n+                MetadataNode functionMetadataNode = functionDefinitionNode.metadata().orElse(null);\n+                int functionStartOffset;\n+                if (functionMetadataNode != null) {\n+                    functionStartOffset = functionMetadataNode.textRange().endOffset();\n+                } else {\n+                    functionStartOffset = functionDefinitionNode.textRange().startOffset() - 1;\n+                }\n+                return isWithinRange(positionOffset, functionStartOffset,\n+                        functionDefinitionNode.functionBody().textRange().startOffset());\n+            case SERVICE_DECLARATION:\n+                ServiceDeclarationNode serviceDeclarationNode = (ServiceDeclarationNode) node;\n+                MetadataNode serviceMetadataNode = serviceDeclarationNode.metadata().orElse(null);\n+                int serviceStartOffset;\n+                if (serviceMetadataNode != null) {\n+                    serviceStartOffset = serviceMetadataNode.textRange().endOffset();\n+                } else {\n+                    serviceStartOffset = serviceDeclarationNode.textRange().startOffset() - 1;\n+                }\n+                return isWithinRange(positionOffset, serviceStartOffset,\n+                        serviceDeclarationNode.serviceBody().textRange().startOffset());\n+            case METHOD_DECLARATION:\n+                MethodDeclarationNode methodDeclarationNode = (MethodDeclarationNode) node;\n+                MetadataNode methodMetadataNode = methodDeclarationNode.metadata().orElse(null);\n+                int methodStartOffset;\n+                if (methodMetadataNode != null) {\n+                    methodStartOffset = methodMetadataNode.textRange().endOffset();\n+                } else {\n+                    methodStartOffset = methodDeclarationNode.textRange().startOffset() - 1;\n+                }\n+                return isWithinRange(positionOffset, methodStartOffset,\n+                        methodDeclarationNode.semicolon().textRange().endOffset());\n+            case CLASS_DEFINITION:\n+                ClassDefinitionNode classDefinitionNode = (ClassDefinitionNode) node;\n+                MetadataNode classMetadataNode = classDefinitionNode.metadata().orElse(null);\n+                int classStartOffset;\n+                if (classMetadataNode != null) {\n+                    classStartOffset = classMetadataNode.textRange().endOffset();\n+                } else {\n+                    classStartOffset = classDefinitionNode.textRange().startOffset() - 1;\n+                }\n+                return isWithinRange(positionOffset, classStartOffset,\n+                        classDefinitionNode.openBrace().textRange().endOffset());\n+            case TYPE_DEFINITION:\n+                TypeDefinitionNode typeDefinitionNode = (TypeDefinitionNode) node;\n+                MetadataNode typeMetadataNode = typeDefinitionNode.metadata().orElse(null);\n+                int typeStartOffset;\n+                if (typeMetadataNode != null) {\n+                    typeStartOffset = typeMetadataNode.textRange().endOffset();\n+                } else {\n+                    typeStartOffset = typeDefinitionNode.textRange().startOffset() - 1;\n+                }\n+                return isWithinRange(positionOffset, typeStartOffset,\n+                        typeDefinitionNode.typeDescriptor().textRange().startOffset());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869bf6193db9e13cd2e97b3201d3df09cc99f59b"}, "originalPosition": 237}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "869bf6193db9e13cd2e97b3201d3df09cc99f59b", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/869bf6193db9e13cd2e97b3201d3df09cc99f59b", "committedDate": "2020-11-07T09:05:13Z", "message": "Refactor code position selection for code actions\n\nRefactor the logic for selecting the position to display/not display the code actions."}, "afterCommit": {"oid": "c7134377a2faa88240fc2f46138d0dd7edf66b63", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c7134377a2faa88240fc2f46138d0dd7edf66b63", "committedDate": "2020-11-09T06:09:55Z", "message": "Refactor code position selection for code actions\n\nRefactor the logic for selecting the position to display/not display the code actions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7134377a2faa88240fc2f46138d0dd7edf66b63", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c7134377a2faa88240fc2f46138d0dd7edf66b63", "committedDate": "2020-11-09T06:09:55Z", "message": "Refactor code position selection for code actions\n\nRefactor the logic for selecting the position to display/not display the code actions."}, "afterCommit": {"oid": "3d06d307ea3870f48fdfd67c73e6c0ade1c0749f", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d06d307ea3870f48fdfd67c73e6c0ade1c0749f", "committedDate": "2020-11-09T06:34:30Z", "message": "Refactor code position selection for code actions\n\nRefactor the logic for selecting the position to display/not display the code actions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "045192af68d3aa4a85192f0c4d3dce78e37a59f5", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/045192af68d3aa4a85192f0c4d3dce78e37a59f5", "committedDate": "2020-11-09T06:39:57Z", "message": "Refactor code position selection for code actions\n\nRefactor the logic for selecting the position to display/not display the code actions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d06d307ea3870f48fdfd67c73e6c0ade1c0749f", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d06d307ea3870f48fdfd67c73e6c0ade1c0749f", "committedDate": "2020-11-09T06:34:30Z", "message": "Refactor code position selection for code actions\n\nRefactor the logic for selecting the position to display/not display the code actions."}, "afterCommit": {"oid": "045192af68d3aa4a85192f0c4d3dce78e37a59f5", "author": {"user": {"login": "prabushi", "name": "Prabushi Samarakoon"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/045192af68d3aa4a85192f0c4d3dce78e37a59f5", "committedDate": "2020-11-09T06:39:57Z", "message": "Refactor code position selection for code actions\n\nRefactor the logic for selecting the position to display/not display the code actions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODUxNTU4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26737#pullrequestreview-527851558", "createdAt": "2020-11-11T04:20:53Z", "commit": {"oid": "045192af68d3aa4a85192f0c4d3dce78e37a59f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3301, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}