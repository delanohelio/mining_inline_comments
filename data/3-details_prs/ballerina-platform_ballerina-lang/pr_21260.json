{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDYwMDI0", "number": 21260, "title": "Implement Function mocking", "bodyText": "Purpose\nTo implement function mocking for Testerina. This allows us to use the mock annotation in a test case to mock other functions.\nFixes #18780\nApproach\nTestAnnotationProcessor processes every function in the test suite that has a @test:Mock annotation. It checks if the mock function has the correct parameter types and return types as the function it is mocking. If the checks pass, the functions are added it to a mockFunctionNamesMap in the BLangTestablePackage.\nWhen generating the BIR in the BIRGen class, if the BLangPackage has a testable package defined AND the testable package has a mockFunctionNamesMap, then the visitMockFunctions() function is called.\nThe visitMockFunctions() function deals with replacing the name and module of every function call with its equivalent mock provided it is defined in the mockFunctionNamesMap.\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-02-26T07:50:26Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260", "merged": true, "mergeCommit": {"oid": "05e8a967b1a57e851c273ce8d4f46f825b4e40cb"}, "closed": true, "closedAt": "2020-03-11T11:26:21Z", "author": {"login": "Ibaqu"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIUSaEgFqTM2NTQxOTI3NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMlX8kgFqTM3MjY3Mzc2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDE5Mjc0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#pullrequestreview-365419274", "createdAt": "2020-02-27T05:15:40Z", "commit": {"oid": "f489c86b7f6a9b2968e42d8eb97e6e96dfc93b21"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNToxNTo0MFrOFvFfBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNToxNTo0MFrOFvFfBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNzI1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if ((bbTerminator.kind.equals(InstructionKind.CALL))) {\n          \n          \n            \n                            if (bbTerminator.kind.equals(InstructionKind.CALL)) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r384917255", "createdAt": "2020-02-27T05:15:40Z", "author": {"login": "suganyasuven"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -280,6 +286,39 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if ((bbTerminator.kind.equals(InstructionKind.CALL))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f489c86b7f6a9b2968e42d8eb97e6e96dfc93b21"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDE5OTE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#pullrequestreview-365419917", "createdAt": "2020-02-27T05:18:16Z", "commit": {"oid": "f489c86b7f6a9b2968e42d8eb97e6e96dfc93b21"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNToxODoxNlrOFvFhLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNToxODoxNlrOFvFhLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNzgwNQ==", "bodyText": "Shall we remove this extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r384917805", "createdAt": "2020-02-27T05:18:16Z", "author": {"login": "suganyasuven"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -280,6 +286,39 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if ((bbTerminator.kind.equals(InstructionKind.CALL))) {\n+                    mockFunctionMap.forEach((k, v) -> {\n+                        String[] mockInfo = k.split(MOCK_ANNOTATION_DELIMITER);\n+                        if (mockInfo.length != 2) {\n+                            return;\n+                        }\n+                        if (((BIRTerminator.Call) bbTerminator).name.getValue().equals(mockInfo[1])) {\n+                            ((BIRTerminator.Call) bbTerminator).name = getMockFunctionName(v, birPkg);\n+                            if (!mockInfo[0].equals(\".\")) {\n+                                ((BIRTerminator.Call) bbTerminator).calleePkg = function.pos.src.pkgID;\n+                            }\n+                        }\n+                    });\n+                }\n+            }\n+        }\n+    }\n+\n+    private Name getMockFunctionName(String name, BIRPackage birPkg) {\n+        for (BIRFunction function : birPkg.functions) {\n+            if (function.name.value.equals(name)) {\n+                return function.name;\n+            }\n+        }\n+        return null;\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f489c86b7f6a9b2968e42d8eb97e6e96dfc93b21"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f489c86b7f6a9b2968e42d8eb97e6e96dfc93b21", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f489c86b7f6a9b2968e42d8eb97e6e96dfc93b21", "committedDate": "2020-02-26T07:25:15Z", "message": "Add Parameter and Return type check for function mocking implementation"}, "afterCommit": {"oid": "046497beee08298b32ede3cec621b8b47df6e202", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/046497beee08298b32ede3cec621b8b47df6e202", "committedDate": "2020-03-03T06:35:57Z", "message": "Add Parameter and Return type check for function mocking implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "046497beee08298b32ede3cec621b8b47df6e202", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/046497beee08298b32ede3cec621b8b47df6e202", "committedDate": "2020-03-03T06:35:57Z", "message": "Add Parameter and Return type check for function mocking implementation"}, "afterCommit": {"oid": "330c41b7a5d2e8c99825dbdaa321b298ea695e7e", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/330c41b7a5d2e8c99825dbdaa321b298ea695e7e", "committedDate": "2020-03-03T06:59:46Z", "message": "Add Parameter and Return type check for function mocking implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "330c41b7a5d2e8c99825dbdaa321b298ea695e7e", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/330c41b7a5d2e8c99825dbdaa321b298ea695e7e", "committedDate": "2020-03-03T06:59:46Z", "message": "Add Parameter and Return type check for function mocking implementation"}, "afterCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6", "committedDate": "2020-03-03T08:31:33Z", "message": "Add Parameter and Return type check for function mocking implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NjM5MDg3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#pullrequestreview-368639087", "createdAt": "2020-03-04T09:55:25Z", "commit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOTo1NToyNVrOFxmpJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDoyMDozMlrOFxngcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1NzY2OQ==", "bodyText": "Shall we use a better name for this, so that the functionality of this method is intuitive by the name?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387557669", "createdAt": "2020-03-04T09:55:25Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1ODIxOQ==", "bodyText": "I think we can refactor this to reduce the runtime-cost. No need to iterate through the mockFunctionMap and do the splitting etc. for each and every CALL instruction. Those are redundant.  Prepare a separate map before coming here, so that you can lookup function name in the map using the key.\nThat will reduce the time complexity of L#297-L#307 from O(n) to k-constant time.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387558219", "createdAt": "2020-03-04T09:56:22Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if (bbTerminator.kind.equals(InstructionKind.CALL)) {\n+                    mockFunctionMap.forEach((k, v) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2NzEwMA==", "bodyText": "Since your are doing the same casting operation ((BIRTerminator.Call) bbTerminator) multiple times,  better to do it once and keep it in a local variable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387567100", "createdAt": "2020-03-04T10:12:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if (bbTerminator.kind.equals(InstructionKind.CALL)) {\n+                    mockFunctionMap.forEach((k, v) -> {\n+                        String[] mockInfo = k.split(MOCK_ANNOTATION_DELIMITER);\n+                        if (mockInfo.length != 2) {\n+                            return;\n+                        }\n+                        if (((BIRTerminator.Call) bbTerminator).name.getValue().equals(mockInfo[1])) {\n+                            ((BIRTerminator.Call) bbTerminator).name = getMockFunctionName(v, birPkg);\n+                            if (!mockInfo[0].equals(\".\")) {\n+                                ((BIRTerminator.Call) bbTerminator).calleePkg = function.pos.src.pkgID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MTgyNw==", "bodyText": "Looks like there are 4-nested loops here. Please try to reduce.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387571827", "createdAt": "2020-03-04T10:20:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -282,6 +288,38 @@ private void visitBuiltinFunctions(BLangPackage pkgNode, BLangFunction function)\n         }\n     }\n \n+    private void visitMockFunctions(BIRPackage birPkg, Map<String, String> mockFunctionMap) {\n+        for (BIRFunction function : birPkg.functions) {\n+            List<BIRBasicBlock> functionBasicBlocks = function.basicBlocks;\n+            for (BIRBasicBlock functionBasicBlock : functionBasicBlocks) {\n+                BIRTerminator bbTerminator = functionBasicBlock.terminator;\n+                if (bbTerminator.kind.equals(InstructionKind.CALL)) {\n+                    mockFunctionMap.forEach((k, v) -> {\n+                        String[] mockInfo = k.split(MOCK_ANNOTATION_DELIMITER);\n+                        if (mockInfo.length != 2) {\n+                            return;\n+                        }\n+                        if (((BIRTerminator.Call) bbTerminator).name.getValue().equals(mockInfo[1])) {\n+                            ((BIRTerminator.Call) bbTerminator).name = getMockFunctionName(v, birPkg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzExOTE1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#pullrequestreview-368711915", "createdAt": "2020-03-04T11:46:54Z", "commit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo0Njo1NFrOFxqKWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo0Njo1NFrOFxqKWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNTMyMw==", "bodyText": "Instead of trying to extract the module using the annotation, check and see if you can get it when initializing the annotation processor.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387615323", "createdAt": "2020-03-04T11:46:54Z", "author": {"login": "pubudu91"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzEyNDY3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#pullrequestreview-368712467", "createdAt": "2020-03-04T11:47:53Z", "commit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo0Nzo1NFrOFxqL6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo0Nzo1NFrOFxqL6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNTcyMA==", "bodyText": "For compile errors the standard we follow is to use lower case letters at the start of an error message.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387615720", "createdAt": "2020-03-04T11:47:54Z", "author": {"login": "pubudu91"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);\n+                    }\n+\n+                    if (vals[0].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Module name cannot be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzEzNzU1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#pullrequestreview-368713755", "createdAt": "2020-03-04T11:50:06Z", "commit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo1MDowNlrOFxqP8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo1MDowNlrOFxqP8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNjc1NA==", "bodyText": "You don't need to do this each time the process() method gets invoked right? I think this can just be done in the init.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387616754", "createdAt": "2020-03-04T11:50:06Z", "author": {"login": "pubudu91"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);\n+                    }\n+\n+                    if (vals[0].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Module name cannot be empty\");\n+                    }\n+\n+                    if (vals[1].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Function name cannot be empty\");\n+                    }\n+\n+                    SymbolTable symbolTable = SymbolTable.getInstance(compilerContext);\n+                    Map<BPackageSymbol, SymbolEnv> packageEnvironmentMap = symbolTable.pkgEnvMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzE0OTE1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#pullrequestreview-368714915", "createdAt": "2020-03-04T11:52:01Z", "commit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo1MjowMVrOFxqTdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo1MjowMVrOFxqTdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxNzY1Mg==", "bodyText": "This typecheck will be checking the entire signature, not just the param types. So it's not exactly right to complain about parameter mismatches. You can try using the standard incompatible types error message we have in the compiler for this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#discussion_r387617652", "createdAt": "2020-03-04T11:52:01Z", "author": {"login": "pubudu91"}, "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -137,7 +173,45 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n                             vals[1] = value;\n                         }\n                     });\n-                    suite.addMockFunction(vals[0] + MOCK_ANNOTATION_DELIMITER + vals[1], functionName);\n+\n+                    if (bLangPackage == null) {\n+                        setBlangPackage(attachmentNode);\n+                    }\n+\n+                    if (vals[0].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Module name cannot be empty\");\n+                    }\n+\n+                    if (vals[1].isEmpty()) {\n+                        diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,\n+                                \"Function name cannot be empty\");\n+                    }\n+\n+                    SymbolTable symbolTable = SymbolTable.getInstance(compilerContext);\n+                    Map<BPackageSymbol, SymbolEnv> packageEnvironmentMap = symbolTable.pkgEnvMap;\n+                    PackageID functionToMockID = getPackageID(vals[0], packageEnvironmentMap);\n+\n+                    BType functionToMockType = getFunctionType(packageEnvironmentMap, functionToMockID, vals[1]);\n+                    BType mockFunctionType = getFunctionType(packageEnvironmentMap, bLangPackage.packageID,\n+                            ((BLangFunction) functionNode).name.toString());\n+\n+                    if (functionToMockType != null && mockFunctionType != null) {\n+                        if (!typeChecker.isAssignable(mockFunctionType, functionToMockType)) {\n+                            diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, ((BLangFunction) functionNode).pos,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6"}, "originalPosition": 106}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c1c06468c3d3e12f93dc27fa29e9b393e3c6da6", "committedDate": "2020-03-03T08:31:33Z", "message": "Add Parameter and Return type check for function mocking implementation"}, "afterCommit": {"oid": "10975d85e57528d80638e7ad6cd2cfb597cd3d75", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10975d85e57528d80638e7ad6cd2cfb597cd3d75", "committedDate": "2020-03-06T04:44:19Z", "message": "Refactor Function mocking implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10975d85e57528d80638e7ad6cd2cfb597cd3d75", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10975d85e57528d80638e7ad6cd2cfb597cd3d75", "committedDate": "2020-03-06T04:44:19Z", "message": "Refactor Function mocking implementation"}, "afterCommit": {"oid": "4b79906b27be1657824913b0184ab83fda45324f", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b79906b27be1657824913b0184ab83fda45324f", "committedDate": "2020-03-06T09:02:59Z", "message": "Refactor Function mocking implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b79906b27be1657824913b0184ab83fda45324f", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b79906b27be1657824913b0184ab83fda45324f", "committedDate": "2020-03-06T09:02:59Z", "message": "Refactor Function mocking implementation"}, "afterCommit": {"oid": "1df141839dd3b0e96ad95fd0c8843acc252a410b", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1df141839dd3b0e96ad95fd0c8843acc252a410b", "committedDate": "2020-03-06T11:50:10Z", "message": "Refactor Function mocking implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f31d00f8836673807d6b41867680914d43732c5a", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f31d00f8836673807d6b41867680914d43732c5a", "committedDate": "2020-03-10T10:44:44Z", "message": "Add MockFunctionNamesMap to BLangTestablePackage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d795131598da270732bb14f487ec0dd244e06f54", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d795131598da270732bb14f487ec0dd244e06f54", "committedDate": "2020-03-10T10:48:47Z", "message": "Implement function mocking in BIRGen"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b562c733a33bc993fe8d2a469f21b0f5df87ba58", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b562c733a33bc993fe8d2a469f21b0f5df87ba58", "committedDate": "2020-03-10T10:48:47Z", "message": "Add Parameter and Return type check for function mocking implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7fd816db2b3236eefe0df265c8420a38c467780", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7fd816db2b3236eefe0df265c8420a38c467780", "committedDate": "2020-03-10T10:54:27Z", "message": "Refactor Function mocking implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1df141839dd3b0e96ad95fd0c8843acc252a410b", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1df141839dd3b0e96ad95fd0c8843acc252a410b", "committedDate": "2020-03-06T11:50:10Z", "message": "Refactor Function mocking implementation"}, "afterCommit": {"oid": "f7fd816db2b3236eefe0df265c8420a38c467780", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7fd816db2b3236eefe0df265c8420a38c467780", "committedDate": "2020-03-10T10:54:27Z", "message": "Refactor Function mocking implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd0728376a3a7ef13638f17e2e75990633560893", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd0728376a3a7ef13638f17e2e75990633560893", "committedDate": "2020-03-10T12:30:47Z", "message": "Add test cases for function mocking implementation"}, "afterCommit": {"oid": "b8da7fbfbb99ffc5449cfde72383e05d963cedac", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8da7fbfbb99ffc5449cfde72383e05d963cedac", "committedDate": "2020-03-10T12:36:44Z", "message": "Add test cases for function mocking implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8da7fbfbb99ffc5449cfde72383e05d963cedac", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8da7fbfbb99ffc5449cfde72383e05d963cedac", "committedDate": "2020-03-10T12:36:44Z", "message": "Add test cases for function mocking implementation"}, "afterCommit": {"oid": "a80ded5efe4ec339b76bde99d9151b68ec8710b7", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a80ded5efe4ec339b76bde99d9151b68ec8710b7", "committedDate": "2020-03-10T12:56:35Z", "message": "Add test cases for function mocking implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a80ded5efe4ec339b76bde99d9151b68ec8710b7", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a80ded5efe4ec339b76bde99d9151b68ec8710b7", "committedDate": "2020-03-10T12:56:35Z", "message": "Add test cases for function mocking implementation"}, "afterCommit": {"oid": "edbd66283eb866dae03c068fdd8bcf150893acd2", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/edbd66283eb866dae03c068fdd8bcf150893acd2", "committedDate": "2020-03-11T05:32:28Z", "message": "Add test cases for function mocking implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edbd66283eb866dae03c068fdd8bcf150893acd2", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/edbd66283eb866dae03c068fdd8bcf150893acd2", "committedDate": "2020-03-11T05:32:28Z", "message": "Add test cases for function mocking implementation"}, "afterCommit": {"oid": "7890bb3959de5cca0b8df46f0cbf80571fbc467a", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7890bb3959de5cca0b8df46f0cbf80571fbc467a", "committedDate": "2020-03-11T06:27:51Z", "message": "Add test cases for function mocking implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7890bb3959de5cca0b8df46f0cbf80571fbc467a", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7890bb3959de5cca0b8df46f0cbf80571fbc467a", "committedDate": "2020-03-11T06:27:51Z", "message": "Add test cases for function mocking implementation"}, "afterCommit": {"oid": "ae619cd1676a6d4c97f11ad92ef2c09b2e3f7123", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae619cd1676a6d4c97f11ad92ef2c09b2e3f7123", "committedDate": "2020-03-11T06:53:13Z", "message": "Add test cases for function mocking implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee2192fd26e17ab9b25596d01726f0cf30d378b8", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee2192fd26e17ab9b25596d01726f0cf30d378b8", "committedDate": "2020-03-11T07:05:24Z", "message": "Add test cases for function mocking implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae619cd1676a6d4c97f11ad92ef2c09b2e3f7123", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae619cd1676a6d4c97f11ad92ef2c09b2e3f7123", "committedDate": "2020-03-11T06:53:13Z", "message": "Add test cases for function mocking implementation"}, "afterCommit": {"oid": "ee2192fd26e17ab9b25596d01726f0cf30d378b8", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee2192fd26e17ab9b25596d01726f0cf30d378b8", "committedDate": "2020-03-11T07:05:24Z", "message": "Add test cases for function mocking implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNjczNzY5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21260#pullrequestreview-372673769", "createdAt": "2020-03-11T11:25:50Z", "commit": {"oid": "ee2192fd26e17ab9b25596d01726f0cf30d378b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4173, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}