{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NzU4MDMz", "number": 21680, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODoxMTozOVrODnXetw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjowMTozM1rODqpxgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjA1NzUxOnYy", "diffSide": "RIGHT", "path": "misc/protobuf-ballerina/src/main/resources/google/api/annotations.proto", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODoxMTozOVrOF1UmRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0NjowM1rOF33C1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1NjMyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright (c) 2015, Google Inc.\n          \n          \n            \n            // Copyright (c) 2020, Google Inc.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391456326", "createdAt": "2020-03-12T08:11:39Z", "author": {"login": "BuddhiWathsala"}, "path": "misc/protobuf-ballerina/src/main/resources/google/api/annotations.proto", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2015, Google Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2MTI4MQ==", "bodyText": "Do we really need to use these proto files provided by Google with their license?. I think we can use our own proto files with WSO2 license.\nOn the other hand, if you have a real requirement of using these files, AFAIK you can use this with their license since it is also Apache 2.0. But it is better to provide the link that you copied from as a comment.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391461281", "createdAt": "2020-03-12T08:23:08Z", "author": {"login": "BuddhiWathsala"}, "path": "misc/protobuf-ballerina/src/main/resources/google/api/annotations.proto", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2015, Google Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1NjMyNg=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwMDYyNQ==", "bodyText": "These are some external files used. I included the source link as a comment.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392800625", "createdAt": "2020-03-16T06:19:56Z", "author": {"login": "daksithj"}, "path": "misc/protobuf-ballerina/src/main/resources/google/api/annotations.proto", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2015, Google Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1NjMyNg=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNzg0Nw==", "bodyText": "@daneshk, any idea of the licensing?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r394117847", "createdAt": "2020-03-18T05:46:03Z", "author": {"login": "BuddhiWathsala"}, "path": "misc/protobuf-ballerina/src/main/resources/google/api/annotations.proto", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2015, Google Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1NjMyNg=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjA2MTU4OnYy", "diffSide": "RIGHT", "path": "misc/protobuf-ballerina/src/main/resources/google/api/http.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODoxMzowMlrOF1UoxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODoxMzowMlrOF1UoxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1Njk2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright 2018 Google LLC\n          \n          \n            \n            // Copyright 2020 Google LLC", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391456964", "createdAt": "2020-03-12T08:13:02Z", "author": {"login": "BuddhiWathsala"}, "path": "misc/protobuf-ballerina/src/main/resources/google/api/http.proto", "diffHunk": "@@ -0,0 +1,318 @@\n+// Copyright 2018 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjEwNzUyOnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/build.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODoyOToyMFrOF1VFMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjowMjowOVrOF7NGtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2NDI0MA==", "bodyText": "Do we need the specific version here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391464240", "createdAt": "2020-03-12T08:29:20Z", "author": {"login": "BuddhiWathsala"}, "path": "stdlib/grpc/build.gradle", "diffHunk": "@@ -49,6 +49,7 @@ dependencies {\n     interopImports project(':ballerina-io')\n \n     implementation 'org.apache.commons:commons-lang3'\n+    implementation 'com.google.api.grpc:proto-google-common-protos:1.17.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxNTY4NQ==", "bodyText": "The documentation for the external resource suggested including the dependency in such a manner in gradle.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392815685", "createdAt": "2020-03-16T06:59:30Z", "author": {"login": "daksithj"}, "path": "stdlib/grpc/build.gradle", "diffHunk": "@@ -49,6 +49,7 @@ dependencies {\n     interopImports project(':ballerina-io')\n \n     implementation 'org.apache.commons:commons-lang3'\n+    implementation 'com.google.api.grpc:proto-google-common-protos:1.17.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2NDI0MA=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwMTU1OQ==", "bodyText": "Shall we add this dependency with the version to here[1] and refer it here without the version. So we are maintaining the version in one place\n\nhttps://github.com/ballerina-platform/ballerina-lang/blob/master/gradle/javaLibsProject.gradle.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r396901559", "createdAt": "2020-03-24T04:53:19Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/build.gradle", "diffHunk": "@@ -49,6 +49,7 @@ dependencies {\n     interopImports project(':ballerina-io')\n \n     implementation 'org.apache.commons:commons-lang3'\n+    implementation 'com.google.api.grpc:proto-google-common-protos:1.17.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2NDI0MA=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNTAxMw==", "bodyText": "Removed the version and added with version to [1] described above", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r397625013", "createdAt": "2020-03-25T06:02:09Z", "author": {"login": "daksithj"}, "path": "stdlib/grpc/build.gradle", "diffHunk": "@@ -49,6 +49,7 @@ dependencies {\n     interopImports project(':ballerina-io')\n \n     implementation 'org.apache.commons:commons-lang3'\n+    implementation 'com.google.api.grpc:proto-google-common-protos:1.17.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2NDI0MA=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjEzMDk0OnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODozNzozMVrOF1VT3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNToxNDoyNFrOF2lw7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2Nzk5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setMessageList(List<Message> messageList) {\n          \n          \n            \n                public void setMessageMap(List<Message> messageList) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391467999", "createdAt": "2020-03-12T08:37:31Z", "author": {"login": "BuddhiWathsala"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -86,7 +83,11 @@ public void setDescriptors(Set<Descriptor> descriptors) {\n     }\n \n     public void setMessageList(List<Message> messageList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4NjE1Nw==", "bodyText": "I refactored the function name", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392786157", "createdAt": "2020-03-16T05:14:24Z", "author": {"login": "daksithj"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -86,7 +83,11 @@ public void setDescriptors(Set<Descriptor> descriptors) {\n     }\n \n     public void setMessageList(List<Message> messageList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2Nzk5OQ=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjEzNDA4OnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODozODozNVrOF1VVyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNToxNTozMVrOF2lxyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2ODQ4OQ==", "bodyText": "Rename messageInList  -> message to improve the readability.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391468489", "createdAt": "2020-03-12T08:38:35Z", "author": {"login": "BuddhiWathsala"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -86,7 +83,11 @@ public void setDescriptors(Set<Descriptor> descriptors) {\n     }\n \n     public void setMessageList(List<Message> messageList) {\n-        this.messageList = messageList;\n+        Map<String, Message> messageMap = new HashMap<>();\n+        for (Message messageInList : messageList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4NjM3OQ==", "bodyText": "I renamed the variable name", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392786379", "createdAt": "2020-03-16T05:15:31Z", "author": {"login": "daksithj"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -86,7 +83,11 @@ public void setDescriptors(Set<Descriptor> descriptors) {\n     }\n \n     public void setMessageList(List<Message> messageList) {\n-        this.messageList = messageList;\n+        Map<String, Message> messageMap = new HashMap<>();\n+        for (Message messageInList : messageList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2ODQ4OQ=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjE1MzYxOnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/Method.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODo0NDo1M1rOF1Vh5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNToxNzowN1rOF2lzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3MTU5MQ==", "bodyText": "Do we really need an allocated variable since this httpPath used just once?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391471591", "createdAt": "2020-03-12T08:44:53Z", "author": {"login": "BuddhiWathsala"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/Method.java", "diffHunk": "@@ -93,9 +143,100 @@ public Method build() {\n             String methodName = methodDescriptor.getName();\n             String inputType = methodDescriptor.getInputType();\n             inputType = inputType != null ? getMappingBalType(inputType) : null;\n+            boolean primitiveInput = inputType != null && checkPrimitiveType(inputType);\n             String outputType = methodDescriptor.getOutputType();\n             outputType = outputType != null ? getMappingBalType(outputType) : null;\n-            return new Method(methodName, methodId, inputType, outputType, methodType);\n+            HttpRule httpExtension = methodDescriptor.getOptions().getExtension(AnnotationsProto.http);\n+            String httpMethod = httpExtension.getPatternCase().name();\n+            String httpPath = resolveHttpPath(httpExtension);\n+            String httpBody = httpExtension.getBody();\n+            List<Param> paramSet = getParamList(inputType, messageMap, httpExtension);\n+            return new Method(methodName, methodId, inputType, primitiveInput, outputType, methodType, httpMethod,\n+                    httpPath, httpBody, paramSet);\n+        }\n+\n+        private String resolveHttpPath(HttpRule httpExtension) {\n+            int number = httpExtension.getPatternCase().getNumber();\n+            // the following http methods are mapped thee numbers\n+            // 0:no extension / 2:get /3:put /4:post /5:delete /6:patch\n+            switch (number) {\n+                case 2:\n+                    return httpExtension.getGet();\n+                case 3:\n+                    return httpExtension.getPut();\n+                case 4:\n+                    return httpExtension.getPost();\n+                case 5:\n+                    return httpExtension.getDelete();\n+                case 6:\n+                    return httpExtension.getPatch();\n+                default:\n+                    return \"\";\n+            }\n+        }\n+\n+        private List<Param> getParamList(String inputType, Map<String, Message> messageMap, HttpRule httpExtension) {\n+            String httpMethod = httpExtension.getPatternCase().name();\n+            if (httpMethod.equals(HTTP_PATTERN_NOT_SET) || inputType == null) {\n+               return new ArrayList<>();\n+            }\n+            String httpPath = resolveHttpPath(httpExtension);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4Njc0NQ==", "bodyText": "I removed the variable and directly applied the function at the one place it was used", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392786745", "createdAt": "2020-03-16T05:17:07Z", "author": {"login": "daksithj"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/Method.java", "diffHunk": "@@ -93,9 +143,100 @@ public Method build() {\n             String methodName = methodDescriptor.getName();\n             String inputType = methodDescriptor.getInputType();\n             inputType = inputType != null ? getMappingBalType(inputType) : null;\n+            boolean primitiveInput = inputType != null && checkPrimitiveType(inputType);\n             String outputType = methodDescriptor.getOutputType();\n             outputType = outputType != null ? getMappingBalType(outputType) : null;\n-            return new Method(methodName, methodId, inputType, outputType, methodType);\n+            HttpRule httpExtension = methodDescriptor.getOptions().getExtension(AnnotationsProto.http);\n+            String httpMethod = httpExtension.getPatternCase().name();\n+            String httpPath = resolveHttpPath(httpExtension);\n+            String httpBody = httpExtension.getBody();\n+            List<Param> paramSet = getParamList(inputType, messageMap, httpExtension);\n+            return new Method(methodName, methodId, inputType, primitiveInput, outputType, methodType, httpMethod,\n+                    httpPath, httpBody, paramSet);\n+        }\n+\n+        private String resolveHttpPath(HttpRule httpExtension) {\n+            int number = httpExtension.getPatternCase().getNumber();\n+            // the following http methods are mapped thee numbers\n+            // 0:no extension / 2:get /3:put /4:post /5:delete /6:patch\n+            switch (number) {\n+                case 2:\n+                    return httpExtension.getGet();\n+                case 3:\n+                    return httpExtension.getPut();\n+                case 4:\n+                    return httpExtension.getPost();\n+                case 5:\n+                    return httpExtension.getDelete();\n+                case 6:\n+                    return httpExtension.getPatch();\n+                default:\n+                    return \"\";\n+            }\n+        }\n+\n+        private List<Param> getParamList(String inputType, Map<String, Message> messageMap, HttpRule httpExtension) {\n+            String httpMethod = httpExtension.getPatternCase().name();\n+            if (httpMethod.equals(HTTP_PATTERN_NOT_SET) || inputType == null) {\n+               return new ArrayList<>();\n+            }\n+            String httpPath = resolveHttpPath(httpExtension);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3MTU5MQ=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjE1Nzg0OnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/Param.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODo0NjoxMlrOF1VkgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDo1MDoyMFrOF2lekA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3MjI1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391472257", "createdAt": "2020-03-12T08:46:12Z", "author": {"login": "BuddhiWathsala"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/Param.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MTQ1Ng==", "bodyText": "I made the change", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392781456", "createdAt": "2020-03-16T04:50:20Z", "author": {"login": "daksithj"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/Param.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3MjI1Nw=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjE4NjQ5OnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/resources/templates/skeleton/proxy_unary.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODo1NTo0NVrOF1V2XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDo1MTo1NlrOF2lfpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3NjgyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }{{/not_equal}}\n          \n          \n            \n                }{{/not_equal}}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391476829", "createdAt": "2020-03-12T08:55:45Z", "author": {"login": "BuddhiWathsala"}, "path": "stdlib/grpc/src/main/resources/templates/skeleton/proxy_unary.mustache", "diffHunk": "@@ -0,0 +1,47 @@\n+    {{#not_equal httpMethod \"PATTERN_NOT_SET\"}}@http:ResourceConfig {\n+    methods: [\"{{httpMethod}}\"],\n+    path: \"{{httpPath}}\"{{#not_equal httpBody \"\"}},\n+    body: \"requestBody\"{{/not_equal}}\n+    }\n+    resource function {{methodName}}(http:Caller caller, http:Request req{{#paramSet}}{{#equals paramSource \"path\"}}, {{fieldType}} {{fieldName}}{{/equals}}{{/paramSet}}{{#not_equal httpBody \"\"}}, json requestBody{{/not_equal}}) {\n+        {{#isNotNull inputType}}{{#if primitiveInput}}{{inputType}} new{{inputType}};{{else}}{{inputType}} new{{inputType}} = {};{{/if}}\n+        {{#equals httpBody \"*\"}}{{inputType}} | error bodyExtracted{{inputType}} = {{inputType}}.constructFrom(requestBody);\n+        if bodyExtracted{{inputType}} is error {\n+            sendResponse(caller, bodyExtracted{{inputType}});\n+            return;\n+        } else {\n+        {{#if primitiveInput}}new{{inputType}}{{else}}new{{inputType}}{{/if}} = bodyExtracted{{inputType}};\n+        }\n+        {{#paramSet}}{{#equals paramSource \"path\"}}{{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = {{fieldName}};\n+        {{/equals}}{{/paramSet}}{{/equals}}{{#not_equal httpBody \"*\"}}{{#paramSet}}{{#equals paramSource \"message\"}}{{fieldType}} {{fieldName}} = {};\n+        {{/equals}}{{/paramSet}}any | error paramReader;\n+        string[]? queryParamSetReader;\n+        {{#paramSet}}{{#equals paramSource \"path\"}}{{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = {{fieldName}};\n+        {{/equals}}{{#equals paramSource \"query\"}}{{#if repeatedParam}}queryParamSetReader = req.getQueryParamValues(\"{{queryAccessName}}{{fieldName}}\");\n+        if queryParamSetReader is string[] {\n+            paramReader = arrayCaster(queryParamSetReader, \"{{fieldType}}\");\n+            if paramReader is {{fieldType}}[] {\n+                {{parentName}}.{{fieldName}} = paramReader;\n+            } else {\n+                sendResponse(caller, paramReader);\n+                return;\n+            }\n+        }{{else}}paramReader = castFunction(req.getQueryParamValue(\"{{queryAccessName}}{{fieldName}}\"), \"{{fieldType}}\");\n+        if paramReader is {{fieldType}} {\n+            {{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = paramReader;\n+        } else {\n+            sendResponse(caller, paramReader);\n+            return;\n+        }{{/if}}\n+        {{/equals}}{{#equals paramSource \"body\"}}{{fieldType}} | error {{fieldName}} = {{fieldType}}.constructFrom(requestBody);\n+        if {{fieldName}} is {{fieldType}} {\n+            {{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = {{fieldName}};\n+        } else {\n+            sendResponse(caller, {{fieldName}});\n+            return;\n+        }\n+        {{/equals}}{{#equals paramSource \"message\"}}{{parentName}}.{{fieldName}} = {{fieldName}};\n+        {{/equals}}{{/paramSet}}{{/not_equal}}var response = {{service}}BlockingEp ->{{methodName}}(new{{inputType}});{{/isNotNull}}{{#isNull inputType}}var response = {{service}}BlockingEp ->{{methodName}}();{{/isNull}}\n+        sendResponse(caller, response);\n+        return;\n+    }{{/not_equal}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MTczNA==", "bodyText": "I added the blank line at the end", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392781734", "createdAt": "2020-03-16T04:51:56Z", "author": {"login": "daksithj"}, "path": "stdlib/grpc/src/main/resources/templates/skeleton/proxy_unary.mustache", "diffHunk": "@@ -0,0 +1,47 @@\n+    {{#not_equal httpMethod \"PATTERN_NOT_SET\"}}@http:ResourceConfig {\n+    methods: [\"{{httpMethod}}\"],\n+    path: \"{{httpPath}}\"{{#not_equal httpBody \"\"}},\n+    body: \"requestBody\"{{/not_equal}}\n+    }\n+    resource function {{methodName}}(http:Caller caller, http:Request req{{#paramSet}}{{#equals paramSource \"path\"}}, {{fieldType}} {{fieldName}}{{/equals}}{{/paramSet}}{{#not_equal httpBody \"\"}}, json requestBody{{/not_equal}}) {\n+        {{#isNotNull inputType}}{{#if primitiveInput}}{{inputType}} new{{inputType}};{{else}}{{inputType}} new{{inputType}} = {};{{/if}}\n+        {{#equals httpBody \"*\"}}{{inputType}} | error bodyExtracted{{inputType}} = {{inputType}}.constructFrom(requestBody);\n+        if bodyExtracted{{inputType}} is error {\n+            sendResponse(caller, bodyExtracted{{inputType}});\n+            return;\n+        } else {\n+        {{#if primitiveInput}}new{{inputType}}{{else}}new{{inputType}}{{/if}} = bodyExtracted{{inputType}};\n+        }\n+        {{#paramSet}}{{#equals paramSource \"path\"}}{{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = {{fieldName}};\n+        {{/equals}}{{/paramSet}}{{/equals}}{{#not_equal httpBody \"*\"}}{{#paramSet}}{{#equals paramSource \"message\"}}{{fieldType}} {{fieldName}} = {};\n+        {{/equals}}{{/paramSet}}any | error paramReader;\n+        string[]? queryParamSetReader;\n+        {{#paramSet}}{{#equals paramSource \"path\"}}{{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = {{fieldName}};\n+        {{/equals}}{{#equals paramSource \"query\"}}{{#if repeatedParam}}queryParamSetReader = req.getQueryParamValues(\"{{queryAccessName}}{{fieldName}}\");\n+        if queryParamSetReader is string[] {\n+            paramReader = arrayCaster(queryParamSetReader, \"{{fieldType}}\");\n+            if paramReader is {{fieldType}}[] {\n+                {{parentName}}.{{fieldName}} = paramReader;\n+            } else {\n+                sendResponse(caller, paramReader);\n+                return;\n+            }\n+        }{{else}}paramReader = castFunction(req.getQueryParamValue(\"{{queryAccessName}}{{fieldName}}\"), \"{{fieldType}}\");\n+        if paramReader is {{fieldType}} {\n+            {{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = paramReader;\n+        } else {\n+            sendResponse(caller, paramReader);\n+            return;\n+        }{{/if}}\n+        {{/equals}}{{#equals paramSource \"body\"}}{{fieldType}} | error {{fieldName}} = {{fieldType}}.constructFrom(requestBody);\n+        if {{fieldName}} is {{fieldType}} {\n+            {{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = {{fieldName}};\n+        } else {\n+            sendResponse(caller, {{fieldName}});\n+            return;\n+        }\n+        {{/equals}}{{#equals paramSource \"message\"}}{{parentName}}.{{fieldName}} = {{fieldName}};\n+        {{/equals}}{{/paramSet}}{{/not_equal}}var response = {{service}}BlockingEp ->{{methodName}}(new{{inputType}});{{/isNotNull}}{{#isNull inputType}}var response = {{service}}BlockingEp ->{{methodName}}();{{/isNull}}\n+        sendResponse(caller, response);\n+        return;\n+    }{{/not_equal}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3NjgyOQ=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjE5Nzc4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/tool/StubGeneratorTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwODo1OToxNlrOF1V9Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDo1Mjo1MVrOF2lgRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3ODYxNA==", "bodyText": "Remove comments.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391478614", "createdAt": "2020-03-12T08:59:16Z", "author": {"login": "BuddhiWathsala"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/tool/StubGeneratorTestCase.java", "diffHunk": "@@ -344,6 +351,105 @@ public void testOneofFieldRecordGeneration() throws IllegalAccessException, Clas\n                 \"Expected imports not found in compile results.\");\n     }\n \n+    @Test(description = \"Test gateway proxy with only path and query parameters\")\n+    public void testHelloWorldGateway() throws IllegalAccessException, ClassNotFoundException,\n+            InstantiationException {\n+        CompileResult compileResult = getProxyCompileResult(\"helloWorldGateway.proto\",\n+                \"helloWorldGateway\");\n+        assertEquals(compileResult.getDiagnostics().length, 0);\n+        assertEquals(((BLangPackage) compileResult.getAST()).getCompilationUnits().size(), 4,\n+                \"Expected compilation units not found in compile results.\");\n+        assertEquals(((BLangPackage) compileResult.getAST()).typeDefinitions.size(), 8,\n+                \"Expected type definitions not found in compile results.\");\n+        assertEquals(((BLangPackage) compileResult.getAST()).functions.size(), 21,\n+                \"Expected functions not found in compile results.\");\n+        assertEquals(((BLangPackage) compileResult.getAST()).globalVars.size(), 4,\n+                \"Expected global variables not found in compile results.\");\n+        assertEquals(((BLangPackage) compileResult.getAST()).imports.size(), 5,\n+                \"Expected imports not found in compile results.\");\n+        validateAttachedResources(compileResult, 2);\n+//        Stream<Path> walk = Files.walk(Paths.get(\"src\", \"test\", \"resources\", \"grpc\", \"src\", \"proxyservices\"));\n+//        walk.forEach(file -> {\n+//            BalFileGenerationUtils.delete(file.toFile());\n+//        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MTg5NQ==", "bodyText": "I removed the comments", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392781895", "createdAt": "2020-03-16T04:52:51Z", "author": {"login": "daksithj"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/tool/StubGeneratorTestCase.java", "diffHunk": "@@ -344,6 +351,105 @@ public void testOneofFieldRecordGeneration() throws IllegalAccessException, Clas\n                 \"Expected imports not found in compile results.\");\n     }\n \n+    @Test(description = \"Test gateway proxy with only path and query parameters\")\n+    public void testHelloWorldGateway() throws IllegalAccessException, ClassNotFoundException,\n+            InstantiationException {\n+        CompileResult compileResult = getProxyCompileResult(\"helloWorldGateway.proto\",\n+                \"helloWorldGateway\");\n+        assertEquals(compileResult.getDiagnostics().length, 0);\n+        assertEquals(((BLangPackage) compileResult.getAST()).getCompilationUnits().size(), 4,\n+                \"Expected compilation units not found in compile results.\");\n+        assertEquals(((BLangPackage) compileResult.getAST()).typeDefinitions.size(), 8,\n+                \"Expected type definitions not found in compile results.\");\n+        assertEquals(((BLangPackage) compileResult.getAST()).functions.size(), 21,\n+                \"Expected functions not found in compile results.\");\n+        assertEquals(((BLangPackage) compileResult.getAST()).globalVars.size(), 4,\n+                \"Expected global variables not found in compile results.\");\n+        assertEquals(((BLangPackage) compileResult.getAST()).imports.size(), 5,\n+                \"Expected imports not found in compile results.\");\n+        validateAttachedResources(compileResult, 2);\n+//        Stream<Path> walk = Files.walk(Paths.get(\"src\", \"test\", \"resources\", \"grpc\", \"src\", \"proxyservices\"));\n+//        walk.forEach(file -> {\n+//            BalFileGenerationUtils.delete(file.toFile());\n+//        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3ODYxNA=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjIwMDIzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGateway.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowMDowNFrOF1V-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDo1MzozMVrOF2lg1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTAwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479000", "createdAt": "2020-03-12T09:00:04Z", "author": {"login": "BuddhiWathsala"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGateway.proto", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MjAzNw==", "bodyText": "I made the change to the file and the other test cases I added as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392782037", "createdAt": "2020-03-16T04:53:31Z", "author": {"login": "daksithj"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGateway.proto", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTAwMA=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjIwMjMwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGateway.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowMDo0MVrOF1WAFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNToxMToxN1rOF2lubg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTMxNg==", "bodyText": "Please check the indentations and formatting.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479316", "createdAt": "2020-03-12T09:00:41Z", "author": {"login": "BuddhiWathsala"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGateway.proto", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+syntax = \"proto3\";\n+import \"google/api/annotations.proto\";\n+service helloWorldGateway {\n+\t\trpc hello(HelloRequest) returns (HelloResponse) {\n+\t\toption (google.api.http) = \n+        \t\t{ post: \"/v1/{number}/\"\n+          \t\t}; \n+\t\t}\n+\t\trpc bye(ByeRequest) returns (ByeResponse) {\n+\t\toption (google.api.http) = \n+\t\t\t{ get: \"/v1/\" \n+          \t\t};\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4NTUxOA==", "bodyText": "I changed the formatting in the integration test proto files. Please let me know if the formatting is fine or requires further changes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392785518", "createdAt": "2020-03-16T05:11:17Z", "author": {"login": "daksithj"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGateway.proto", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+syntax = \"proto3\";\n+import \"google/api/annotations.proto\";\n+service helloWorldGateway {\n+\t\trpc hello(HelloRequest) returns (HelloResponse) {\n+\t\toption (google.api.http) = \n+        \t\t{ post: \"/v1/{number}/\"\n+          \t\t}; \n+\t\t}\n+\t\trpc bye(ByeRequest) returns (ByeResponse) {\n+\t\toption (google.api.http) = \n+\t\t\t{ get: \"/v1/\" \n+          \t\t};\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTMxNg=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjIwMzI5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithBody.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowMDo1N1rOF1WAqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowMDo1N1rOF1WAqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTQ2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479465", "createdAt": "2020-03-12T09:00:57Z", "author": {"login": "BuddhiWathsala"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithBody.proto", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjIwMzg2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithBody.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowMTowOVrOF1WBEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowMTowOVrOF1WBEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTU2OQ==", "bodyText": "Please check the indentations and formatting.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479569", "createdAt": "2020-03-12T09:01:09Z", "author": {"login": "BuddhiWathsala"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithBody.proto", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+syntax = \"proto3\";\n+import \"google/api/annotations.proto\";\n+service helloWorldGateway {\n+\t\trpc hello(HelloRequest) returns (HelloResponse) {\n+\t\toption (google.api.http) = \n+        \t\t{ post: \"/v1/{number}/\"\n+\t\t\t  body: \"text\"\n+          \t\t}; \n+\t\t}\n+\t\trpc bye(ByeRequest) returns (ByeResponse) {\n+\t\toption (google.api.http) = \n+\t\t\t{ get: \"/v1/\" \n+\t\t\t  body: \"*\"\n+          \t\t};\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjIwNTIwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithPrimitiveInput.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowMTozNVrOF1WB5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowMTozNVrOF1WB5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTc4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479782", "createdAt": "2020-03-12T09:01:35Z", "author": {"login": "BuddhiWathsala"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithPrimitiveInput.proto", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjIwNTY5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithPrimitiveInput.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowMTo0NlrOF1WCOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowMTo0NlrOF1WCOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTg2NA==", "bodyText": "Please check the indentations and formatting.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479864", "createdAt": "2020-03-12T09:01:46Z", "author": {"login": "BuddhiWathsala"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithPrimitiveInput.proto", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+syntax = \"proto3\";\n+import \"google/protobuf/wrappers.proto\";\n+import \"google/api/annotations.proto\";\n+service helloWorldGateway {\n+\t\trpc hello(google.protobuf.StringValue) returns (google.protobuf.StringValue) {\n+\t\toption (google.api.http) = \n+        \t\t{ post: \"/v1/\"\n+\t\t\t  body: \"value\"\n+          \t\t}; \n+\t\t}\n+\t\trpc bye(google.protobuf.Int64Value) returns (google.protobuf.StringValue) {\n+\t\toption (google.api.http) = \n+\t\t\t{ get: \"/v1/{value}/\" \n+          \t\t};\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjIwNjI2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithRepeatedField.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowMjowMVrOF1WCoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTowMjowMVrOF1WCoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTk2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479968", "createdAt": "2020-03-12T09:02:01Z", "author": {"login": "BuddhiWathsala"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithRepeatedField.proto", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjIzNDMxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithRepeatedField.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOToxMDo0NVrOF1WT4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOToxMDo0NVrOF1WT4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4NDM4NQ==", "bodyText": "Please check the indentations and formatting.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391484385", "createdAt": "2020-03-12T09:10:45Z", "author": {"login": "BuddhiWathsala"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithRepeatedField.proto", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+syntax = \"proto3\";\n+import \"google/api/annotations.proto\";\n+service helloWorldGateway {\n+\t\trpc hello(HelloRequest) returns (HelloResponse) {\n+\t\toption (google.api.http) = \n+        \t\t{ post: \"/v1/\"\n+          \t\t}; \n+\t\t}\n+\t\trpc bye(ByeRequest) returns (ByeResponse) {\n+\t\toption (google.api.http) = \n+\t\t\t{ get: \"/v2/\"\n+\t\t\t  body: \"request\" \n+          \t\t};\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjIzNzQzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithoutPath.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOToxMTozMFrOF1WVwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDo0NDoyM1rOF2lZ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4NDg2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391484864", "createdAt": "2020-03-12T09:11:30Z", "author": {"login": "BuddhiWathsala"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithoutPath.proto", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MDI2Mg==", "bodyText": "i made the relevant change", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392780262", "createdAt": "2020-03-16T04:44:23Z", "author": {"login": "daksithj"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithoutPath.proto", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4NDg2NA=="}, "originalCommit": {"oid": "ba7396a37780a1a67e63b96c277e10627073132d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODcxOTgwOnYy", "diffSide": "RIGHT", "path": "misc/protobuf-ballerina/src/main/java/org/ballerinalang/protobuf/BalGenerationConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzo1MDowMVrOF3NGNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzo1MDowMVrOF3NGNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzMDU4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**PROTOBUF\n          \n          \n            \n            /**", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r393430580", "createdAt": "2020-03-17T03:50:01Z", "author": {"login": "daneshk"}, "path": "misc/protobuf-ballerina/src/main/java/org/ballerinalang/protobuf/BalGenerationConstants.java", "diffHunk": "@@ -19,7 +19,7 @@\n \n import java.io.File;\n \n-/**\n+/**PROTOBUF", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf171f7c6c55ffbac3066de8383d17df7ab99a1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDM4MjMzOnYy", "diffSide": "RIGHT", "path": "misc/protobuf-ballerina/src/main/java/org/ballerinalang/protobuf/cmd/GrpcCmd.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNDozNDo0NVrOF6gtsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjowMjozNVrOF7NHDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NzcxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    createTempDirectory(protobufHome);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r396897713", "createdAt": "2020-03-24T04:34:45Z", "author": {"login": "daneshk"}, "path": "misc/protobuf-ballerina/src/main/java/org/ballerinalang/protobuf/cmd/GrpcCmd.java", "diffHunk": "@@ -218,6 +219,9 @@ private File createTempDirectory() {\n         createTempDirectory(protobufHome);\n         File compilerHome = new File(protobufHome, TEMP_COMPILER_DIRECTORY);\n         createTempDirectory(compilerHome);\n+        File apiHome = new File(googleHome, TEMP_API_DIRECTORY);\n+        createTempDirectory(protobufHome);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5ODAzNA==", "bodyText": "In line no: 219, we are creating the protobuf directory", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r396898034", "createdAt": "2020-03-24T04:36:19Z", "author": {"login": "daneshk"}, "path": "misc/protobuf-ballerina/src/main/java/org/ballerinalang/protobuf/cmd/GrpcCmd.java", "diffHunk": "@@ -218,6 +219,9 @@ private File createTempDirectory() {\n         createTempDirectory(protobufHome);\n         File compilerHome = new File(protobufHome, TEMP_COMPILER_DIRECTORY);\n         createTempDirectory(compilerHome);\n+        File apiHome = new File(googleHome, TEMP_API_DIRECTORY);\n+        createTempDirectory(protobufHome);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NzcxMw=="}, "originalCommit": {"oid": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNTEwMw==", "bodyText": "Removed the line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r397625103", "createdAt": "2020-03-25T06:02:35Z", "author": {"login": "daksithj"}, "path": "misc/protobuf-ballerina/src/main/java/org/ballerinalang/protobuf/cmd/GrpcCmd.java", "diffHunk": "@@ -218,6 +219,9 @@ private File createTempDirectory() {\n         createTempDirectory(protobufHome);\n         File compilerHome = new File(protobufHome, TEMP_COMPILER_DIRECTORY);\n         createTempDirectory(compilerHome);\n+        File apiHome = new File(googleHome, TEMP_API_DIRECTORY);\n+        createTempDirectory(protobufHome);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NzcxMw=="}, "originalCommit": {"oid": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ2ODEyOnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/Method.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTozNDo0N1rOF6hiFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjowMjo1NFrOF7NHfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMTEyNQ==", "bodyText": "Instead of passing another parameter to this method. Shall we add a new setter method in Method.Builder class like setMethodDescriptor.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r396911125", "createdAt": "2020-03-24T05:34:47Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/Method.java", "diffHunk": "@@ -32,20 +49,31 @@\n     private String methodName;\n     private String methodId;\n     private String inputType;\n+    private boolean primitiveInput;\n     private String outputType;\n     private MethodDescriptor.MethodType methodType;\n+    private String httpMethod;\n+    private String httpPath;\n+    private String httpBody;\n+    private List<Param> paramSet;\n \n-    private Method(String methodName, String methodId, String inputType, String outputType, MethodDescriptor\n-            .MethodType methodType) {\n+    private Method(String methodName, String methodId, String inputType, boolean primitiveInput, String outputType,\n+                   MethodDescriptor.MethodType methodType, String httpMethod, String httpPath, String httpBody,\n+                   List<Param> paramSet) {\n         this.methodName = methodName;\n         this.methodType = methodType;\n         this.methodId = methodId;\n         this.inputType = inputType;\n+        this.primitiveInput = primitiveInput;\n         this.outputType = outputType;\n+        this.httpMethod = httpMethod;\n+        this.httpPath = httpPath;\n+        this.httpBody = httpBody;\n+        this.paramSet = paramSet;\n     }\n \n-    public static Method.Builder newBuilder(String methodId) {\n-        return new Method.Builder(methodId);\n+    public static Method.Builder newBuilder(String methodId, Map<String, Message> messageMap) {\n+        return new Method.Builder(methodId, messageMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNTIxNQ==", "bodyText": "Added a setter method, and removed the additional parameter", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r397625215", "createdAt": "2020-03-25T06:02:54Z", "author": {"login": "daksithj"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/Method.java", "diffHunk": "@@ -32,20 +49,31 @@\n     private String methodName;\n     private String methodId;\n     private String inputType;\n+    private boolean primitiveInput;\n     private String outputType;\n     private MethodDescriptor.MethodType methodType;\n+    private String httpMethod;\n+    private String httpPath;\n+    private String httpBody;\n+    private List<Param> paramSet;\n \n-    private Method(String methodName, String methodId, String inputType, String outputType, MethodDescriptor\n-            .MethodType methodType) {\n+    private Method(String methodName, String methodId, String inputType, boolean primitiveInput, String outputType,\n+                   MethodDescriptor.MethodType methodType, String httpMethod, String httpPath, String httpBody,\n+                   List<Param> paramSet) {\n         this.methodName = methodName;\n         this.methodType = methodType;\n         this.methodId = methodId;\n         this.inputType = inputType;\n+        this.primitiveInput = primitiveInput;\n         this.outputType = outputType;\n+        this.httpMethod = httpMethod;\n+        this.httpPath = httpPath;\n+        this.httpBody = httpBody;\n+        this.paramSet = paramSet;\n     }\n \n-    public static Method.Builder newBuilder(String methodId) {\n-        return new Method.Builder(methodId);\n+    public static Method.Builder newBuilder(String methodId, Map<String, Message> messageMap) {\n+        return new Method.Builder(methodId, messageMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMTEyNQ=="}, "originalCommit": {"oid": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ4MjQ5OnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/BallerinaFileBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0MzoyMVrOF6hqtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0MzoyMVrOF6hqtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMzMzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                stubFileObject.setEnumList(enumList);\n          \n          \n            \n                                stubFileObject.setDescriptors(descriptors);\n          \n          \n            \n                                if (!stubRootDescriptor.isEmpty()) {\n          \n          \n            \n                                    stubFileObject.setRootDescriptor(stubRootDescriptor);\n          \n          \n            \n                                }\n          \n      \n    \n    \n  \n\nThis is already handled in line number 247", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r396913332", "createdAt": "2020-03-24T05:43:21Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/BallerinaFileBuilder.java", "diffHunk": "@@ -222,12 +230,20 @@ private void computeSourceContent(byte[] descriptor, String mode) throws CodeBui\n                     writeOutputFile(new ClientFile(serviceDescriptor.getName(), isUnaryContains),\n                             DEFAULT_SAMPLE_DIR,\n                             SAMPLE_CLIENT_TEMPLATE_NAME, clientFilePath);\n-\n+                } else if (GRPC_PROXY.equals(mode)) {\n+                    stubFileObject.setEnumList(enumList);\n+                    stubFileObject.setDescriptors(descriptors);\n+                    if (!stubRootDescriptor.isEmpty()) {\n+                        stubFileObject.setRootDescriptor(stubRootDescriptor);\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDUxMjAyOnYy", "diffSide": "RIGHT", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjowMTozM1rOF6h9jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjowMzo0MFrOF7NIQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxODE1OA==", "bodyText": "Shall we keep the method name as setMessageList here?\nSince we are setting a message list, I feel the previous name more suits.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r396918158", "createdAt": "2020-03-24T06:01:33Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -85,8 +82,12 @@ public void setDescriptors(Set<Descriptor> descriptors) {\n         return descriptors;\n     }\n \n-    public void setMessageList(List<Message> messageList) {\n-        this.messageList = messageList;\n+    public void setMessageMap(List<Message> messageList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNTQxMQ==", "bodyText": "Kept it as setMessageMap, but passed a map instead of a list as the parameter", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r397625411", "createdAt": "2020-03-25T06:03:40Z", "author": {"login": "daksithj"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -85,8 +82,12 @@ public void setDescriptors(Set<Descriptor> descriptors) {\n         return descriptors;\n     }\n \n-    public void setMessageList(List<Message> messageList) {\n-        this.messageList = messageList;\n+    public void setMessageMap(List<Message> messageList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxODE1OA=="}, "originalCommit": {"oid": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 787, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}