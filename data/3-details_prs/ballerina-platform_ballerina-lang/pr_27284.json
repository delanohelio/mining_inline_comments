{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNzQ5Njc1", "number": 27284, "title": "Handle the using of error in type-cast and toString", "bodyText": "Purpose\n$subject\nIn the previous implementation, we can cast a value and get the string of the value, without considering value is an error.\nex:\nint|error v = -1;\nint a1 = <int> v;\nstring a2 = v.toString();\n\nWith this PR, we disallow that kind of type cast and toString method call in compile time.\nFixes #27028\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-12-02T05:07:08Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284", "merged": true, "mergeCommit": {"oid": "6374b22a9c1afb7d1dfede39b798a65ce2dd5f8d"}, "closed": true, "closedAt": "2021-01-05T16:32:48Z", "author": {"login": "KavinduZoysa"}, "timelineItems": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiH0xNABqjQwNjA1MTkxODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtNjg3gFqTU2MTk0MTE4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7fc2dee227870e68814b592a6ed86294fad6cdf", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b7fc2dee227870e68814b592a6ed86294fad6cdf", "committedDate": "2020-12-02T04:42:20Z", "message": "Fix failure tests"}, "afterCommit": {"oid": "cce45990007c21d7e89e6bc8c1404db4486a32b9", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cce45990007c21d7e89e6bc8c1404db4486a32b9", "committedDate": "2020-12-02T05:35:34Z", "message": "Fix failure tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cce45990007c21d7e89e6bc8c1404db4486a32b9", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cce45990007c21d7e89e6bc8c1404db4486a32b9", "committedDate": "2020-12-02T05:35:34Z", "message": "Fix failure tests"}, "afterCommit": {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e", "committedDate": "2020-12-02T08:57:55Z", "message": "Fix failure tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1Mjc0NTYy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-545274562", "createdAt": "2020-12-04T20:28:42Z", "commit": {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoyODo0M1rOH_g6Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoyODo0M1rOH_g6Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MTUzNQ==", "bodyText": "\u26cf\ufe0f I think we create arrays with a capacity of 10 by default. Some times arrays can be empty. Max size can be a count of union members. There is an opportunity to save memory here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r536361535", "createdAt": "2020-12-04T20:28:43Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4666,24 +4671,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODQ5MDM2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-545849036", "createdAt": "2020-12-07T05:57:24Z", "commit": {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNTo1NzoyNVrOIAXIhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNTo1NzoyNVrOIAXIhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI0OTkyNw==", "bodyText": "why we need any and readonly, it is same as any|error isn't it ? @KavinduZoysa @MaryamZi", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537249927", "createdAt": "2020-12-07T05:57:25Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -135,6 +135,8 @@\n     public final BTypedescType typeDesc = new BTypedescType(this.anyType, null);\n     public final BType readonlyType = new BReadonlyType(TypeTags.READONLY, null);\n     public final BType anydataOrReadonly = BUnionType.create(null, anydataType, readonlyType);\n+    public final BType anyAndReadonly = new BAnyType(TypeTags.ANY, null, new Name(\"anyAndReadonly\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODUxMjA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-545851206", "createdAt": "2020-12-07T06:04:12Z", "commit": {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowNDoxMlrOIAXQlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowNDoxMlrOIAXQlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MTk5MA==", "bodyText": "Please create an issue to track this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537251990", "createdAt": "2020-12-07T06:04:12Z", "author": {"login": "hasithaa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java", "diffHunk": "@@ -53,7 +53,8 @@ public void testArrayForeachAndTrap() {\n             \"error: \\\\{ballerina\\\\}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: 'error' cannot be cast to \" +\n                     \"'int'\\\"\\\\}\\n\" +\n                     \"\\tat foreach_error_handling:\\\\$lambda\\\\$_0\\\\(foreach_error_handling.bal:41\\\\)\\n\" +\n-                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\")\n+                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\",\n+            enabled = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feec02e52773d0c8b6aa1583bd105d5b0fe8fa5e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODYxNTEy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-545861512", "createdAt": "2020-12-07T06:32:42Z", "commit": {"oid": "f8cda47931998bd7d3d7982573845d12317a65f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjozMjo0MlrOIAX3Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjozMjo0MlrOIAX3Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2MTg0Mg==", "bodyText": "Are these asserts are running? Because test has expectedExceptionsMessageRegExp attribute.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537261842", "createdAt": "2020-12-07T06:32:42Z", "author": {"login": "hasithaa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java", "diffHunk": "@@ -89,22 +89,25 @@ public void testJsonArrayWithType() {\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'json'.*\")\n+            expectedExceptionsMessageRegExp =\n+                    \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n+                            \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}ConversionError {\\\"message\\\":\\\"cannot convert \" \n-                + \"'null' value to type 'map<json>'\\\"}\");\n+        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cda47931998bd7d3d7982573845d12317a65f6"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODYxNTk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-545861599", "createdAt": "2020-12-07T06:32:56Z", "commit": {"oid": "f8cda47931998bd7d3d7982573845d12317a65f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjozMjo1NlrOIAX3Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjozMjo1NlrOIAX3Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2MTkxMA==", "bodyText": "Same as above", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r537261910", "createdAt": "2020-12-07T06:32:56Z", "author": {"login": "hasithaa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTypedBindingPatternsTests.java", "diffHunk": "@@ -89,22 +89,25 @@ public void testJsonArrayWithType() {\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'json'.*\")\n+            expectedExceptionsMessageRegExp =\n+                    \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n+                            \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}ConversionError {\\\"message\\\":\\\"cannot convert \" \n-                + \"'null' value to type 'map<json>'\\\"}\");\n+        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +\n+                \"()' cannot be cast to 'map<json>'\\\"}\");\n     }\n \n     @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'json'.*\")\n+            expectedExceptionsMessageRegExp =\n+                    \".*error: \\\\{ballerina}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: '\\\\(\\\\)' cannot be cast\" +\n+                            \" to 'map<json>'.*\")\n     public void testDirectAccessInvalidElementWithType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testDirectAccessInvalidElementWithType\");\n         Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}ConversionError {\\\"message\\\":\\\"cannot convert 'null'\" \n-                + \" \" +\n-                \"value to type 'map<json>'\\\"}\");\n+        Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: '\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cda47931998bd7d3d7982573845d12317a65f6"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDE5Mjk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-546019299", "createdAt": "2020-12-07T10:34:18Z", "commit": {"oid": "f8cda47931998bd7d3d7982573845d12317a65f6"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8cda47931998bd7d3d7982573845d12317a65f6", "author": {"user": {"login": "hasithaa", "name": "Hasitha Aravinda"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8cda47931998bd7d3d7982573845d12317a65f6", "committedDate": "2020-12-07T06:14:07Z", "message": "Merge branch 'master' into fix-issue-27028"}, "afterCommit": {"oid": "5ef172fe5e673ca4b60b10f5820ab05a93f58095", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ef172fe5e673ca4b60b10f5820ab05a93f58095", "committedDate": "2020-12-07T11:18:46Z", "message": "Fix review suggestions and test failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5ODEyNjkw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-549812690", "createdAt": "2020-12-11T05:33:43Z", "commit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTozMzo0M1rOIDp0vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzo0NDoxMlrOIDsvrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwMTg4NA==", "bodyText": "Can you check if we can use ImmutableTypeCloner with anyType and retrieve the immutable type for any? That way we have only one any and any & readonly.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540701884", "createdAt": "2020-12-11T05:33:43Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -134,6 +134,8 @@\n     public final BType readonlyType = new BReadonlyType(TypeTags.READONLY, null);\n     public final BType anydataOrReadonly = BUnionType.create(null, anydataType, readonlyType);\n     public final BType intStringFloatOrBoolean = BUnionType.create(null, intType, stringType, floatType, booleanType);\n+    public final BType anyAndReadonly = new BAnyType(TypeTags.ANY, null, new Name(\"anyAndReadonly\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwNTM0NQ==", "bodyText": "Should we be committing this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540705345", "createdAt": "2020-12-11T05:44:33Z", "author": {"login": "MaryamZi"}, "path": "tests/observability-test-utils/src/main/ballerina/Ballerina.toml", "diffHunk": "@@ -4,7 +4,7 @@ name = \"testobserve\"\n version = \"0.0.0\"\n \n [[platform.java11.dependency]]\n-path = \"../libs/observability-test-utils-2.0.0-Preview7.jar\"\n+path = \"../libs/observability-test-utils-2.0.0-Preview8-SNAPSHOT.jar\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwNjc0Nw==", "bodyText": "We can use ternary expressions in such scenarios, right?\nexpectedValAsString = expected is error ? expected.toString() : expected.toString();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540706747", "createdAt": "2020-12-11T05:48:58Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/uniontypes/union_types_basic.bal", "diffHunk": "@@ -218,6 +218,21 @@ function assertEquality(any|error expected, any|error actual) {\n     if expected === actual {\n         return;\n     }\n+\n+    string expectedValAsString = \"\";\n+    string actualValAsString = \"\";\n+    if (expected is error) {\n+        expectedValAsString = expected.toString();\n+    } else {\n+        expectedValAsString = expected.toString();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMDAwNg==", "bodyText": "Why are we disabling this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540730006", "createdAt": "2020-12-11T06:55:13Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "diffHunk": "@@ -572,8 +572,9 @@ public void testJsonArrayToJsonCasting() {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n-    @Test(expectedExceptions = { BLangRuntimeException.class },\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\")\n+    @Test(expectedExceptions = {BLangRuntimeException.class},\n+            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\",\n+            enabled = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMzYwNQ==", "bodyText": "Aren't we silently ignoring the error here? I think we should either do\nPerson2 p = checkpanic pe;\n\nor add an else block and fail there.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540733605", "createdAt": "2020-12-11T07:05:08Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -486,25 +500,28 @@ function testCloneWithTypeJsonRec1() {\n     json|error ss = p.cloneWithType(json);\n     assert(ss is json, true);\n \n-    json j = <json> ss;\n-    assert(j.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    if (ss is json) {\n+        assert(ss.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    }\n }\n \n function testCloneWithTypeJsonRec2() {\n    json pj = { name : \"tom\", age: 2};\n    Person2|error pe = pj.cloneWithType(Person2);\n    assert(pe is Person2, true);\n \n-   Person2 p = <Person2> pe;\n-   assert(p.name, \"tom\");\n-   assert(p.age, 2);\n+   if (pe is Person2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzY5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n          \n          \n            \n                            checkedExpr.equivalentErrorTypeList.add(symTable.errorType);\n          \n          \n            \n                            checkedExpr.equivalentErrorTypeList = new ArrayList<>() {{ add(symTable.errorType); }};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540743697", "createdAt": "2020-12-11T07:30:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4651,7 +4651,12 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         }\n \n         if (exprType.tag != TypeTags.UNION) {\n-            if (types.isAssignable(exprType, symTable.errorType)) {\n+            if (exprType.tag == TypeTags.READONLY) {\n+                checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n+                checkedExpr.equivalentErrorTypeList.add(symTable.errorType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzkzMg==", "bodyText": "or even\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n          \n          \n            \n                            checkedExpr.equivalentErrorTypeList.add(symTable.errorType);\n          \n          \n            \n                            checkedExpr.equivalentErrorTypeList = new ArrayList<>(1) {{ add(symTable.errorType); }};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540743932", "createdAt": "2020-12-11T07:31:01Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4651,7 +4651,12 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         }\n \n         if (exprType.tag != TypeTags.UNION) {\n-            if (types.isAssignable(exprType, symTable.errorType)) {\n+            if (exprType.tag == TypeTags.READONLY) {\n+                checkedExpr.equivalentErrorTypeList = new ArrayList<>();\n+                checkedExpr.equivalentErrorTypeList.add(symTable.errorType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MzY5Nw=="}, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0NjE3Mg==", "bodyText": "Can't we call these\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<BType> errorAssignableTypes = new ArrayList<>();\n          \n          \n            \n                    List<BType> errorNotAssignableTypes = new ArrayList<>();\n          \n          \n            \n                    List<BType> errorTypes = new ArrayList<>();\n          \n          \n            \n                    List<BType> nonErrorTypes = new ArrayList<>();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540746172", "createdAt": "2020-12-11T07:36:16Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0Njk1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (types.isAssignable(memberType, symTable.errorType)) {\n          \n          \n            \n                            errorAssignableTypes.add(memberType);\n          \n          \n            \n                        } else {\n          \n          \n            \n                            errorNotAssignableTypes.add(memberType);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (types.isAssignable(memberType, symTable.errorType)) {\n          \n          \n            \n                            errorAssignableTypes.add(memberType);\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }\n          \n          \n            \n                        errorNotAssignableTypes.add(memberType);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540746958", "createdAt": "2020-12-11T07:37:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorAssignableTypes.add(symTable.errorType);\n+                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorAssignableTypes.add(memberType);\n+            } else {\n+                errorNotAssignableTypes.add(memberType);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0OTI4Nw==", "bodyText": "We can directly check\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (checkedExpr.equivalentErrorTypeList.size() == 0) {\n          \n          \n            \n                    if (errorAssignableTypes.isEmpty()) {\n          \n      \n    \n    \n  \n\nright?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540749287", "createdAt": "2020-12-11T07:43:06Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorAssignableTypes.add(symTable.errorType);\n+                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorAssignableTypes.add(memberType);\n+            } else {\n+                errorNotAssignableTypes.add(memberType);\n+            }\n+        }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = resultTypeMap.get(true);\n-        if (checkedExpr.equivalentErrorTypeList == null ||\n-                checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n+        if (checkedExpr.equivalentErrorTypeList.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0OTc0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (errorNotAssignableTypes.size() == 0) {\n          \n          \n            \n                    if (errorNotAssignableTypes.isEmpty()) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r540749741", "createdAt": "2020-12-11T07:44:12Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4664,24 +4669,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorAssignableTypes = new ArrayList<>();\n+        List<BType> errorNotAssignableTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorAssignableTypes.add(symTable.errorType);\n+                errorNotAssignableTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorAssignableTypes.add(memberType);\n+            } else {\n+                errorNotAssignableTypes.add(memberType);\n+            }\n+        }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = resultTypeMap.get(true);\n-        if (checkedExpr.equivalentErrorTypeList == null ||\n-                checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorAssignableTypes;\n+        if (checkedExpr.equivalentErrorTypeList.size() == 0) {\n             // No member types in this union is equivalent to the error type\n             dlog.error(checkedExpr.expr.pos,\n                     DiagnosticErrorCode.CHECKED_EXPR_INVALID_USAGE_NO_ERROR_TYPE_IN_RHS, operatorType);\n             checkedExpr.type = symTable.semanticError;\n             return;\n         }\n \n-        List<BType> nonErrorTypeList = resultTypeMap.get(false);\n-        if (nonErrorTypeList == null || nonErrorTypeList.size() == 0) {\n+        if (errorNotAssignableTypes.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a07299635402f8b091b50d0413440c9384eb30f3", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a07299635402f8b091b50d0413440c9384eb30f3", "committedDate": "2020-12-07T15:38:53Z", "message": "Fix failure tests"}, "afterCommit": {"oid": "781b0f96c449caf56cd5f8e978d69ef03f8cab40", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/781b0f96c449caf56cd5f8e978d69ef03f8cab40", "committedDate": "2020-12-12T16:25:59Z", "message": "Fix failure tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "781b0f96c449caf56cd5f8e978d69ef03f8cab40", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/781b0f96c449caf56cd5f8e978d69ef03f8cab40", "committedDate": "2020-12-12T16:25:59Z", "message": "Fix failure tests"}, "afterCommit": {"oid": "1df984c4e4eab2a492067815a907128a4eea1d33", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1df984c4e4eab2a492067815a907128a4eea1d33", "committedDate": "2020-12-12T16:36:40Z", "message": "Fix failure tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1df984c4e4eab2a492067815a907128a4eea1d33", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1df984c4e4eab2a492067815a907128a4eea1d33", "committedDate": "2020-12-12T16:36:40Z", "message": "Fix failure tests"}, "afterCommit": {"oid": "9d1cd9870e381e401f4d36492f626b31d602e0f5", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d1cd9870e381e401f4d36492f626b31d602e0f5", "committedDate": "2020-12-12T16:56:07Z", "message": "Fix failure tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d1cd9870e381e401f4d36492f626b31d602e0f5", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d1cd9870e381e401f4d36492f626b31d602e0f5", "committedDate": "2020-12-12T16:56:07Z", "message": "Fix failure tests"}, "afterCommit": {"oid": "f34c10bc7026279a3ef421fd957ce0fe808ce64c", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f34c10bc7026279a3ef421fd957ce0fe808ce64c", "committedDate": "2020-12-12T16:57:58Z", "message": "Fix failure tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1ef3150012d0ee89cb438968de24b14bfea9179", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1ef3150012d0ee89cb438968de24b14bfea9179", "committedDate": "2020-12-13T04:37:28Z", "message": "Fix review suggestions"}, "afterCommit": {"oid": "9351fcfe56bf61b4b46596c97f768e4dce71ab8f", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9351fcfe56bf61b4b46596c97f768e4dce71ab8f", "committedDate": "2020-12-18T09:50:48Z", "message": "Define the any&ReadOnly using ImmutableTypeCloner"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9351fcfe56bf61b4b46596c97f768e4dce71ab8f", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9351fcfe56bf61b4b46596c97f768e4dce71ab8f", "committedDate": "2020-12-18T09:50:48Z", "message": "Define the any&ReadOnly using ImmutableTypeCloner"}, "afterCommit": {"oid": "74e02b9089104da49e533838a4012e6db720d815", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74e02b9089104da49e533838a4012e6db720d815", "committedDate": "2020-12-18T09:59:44Z", "message": "Define the any&ReadOnly using ImmutableTypeCloner"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74e02b9089104da49e533838a4012e6db720d815", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74e02b9089104da49e533838a4012e6db720d815", "committedDate": "2020-12-18T09:59:44Z", "message": "Define the any&ReadOnly using ImmutableTypeCloner"}, "afterCommit": {"oid": "6d355945b77910dcba1613f2a215c4ed6b6865ab", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d355945b77910dcba1613f2a215c4ed6b6865ab", "committedDate": "2020-12-18T10:21:27Z", "message": "Define the any&ReadOnly using ImmutableTypeCloner"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d355945b77910dcba1613f2a215c4ed6b6865ab", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d355945b77910dcba1613f2a215c4ed6b6865ab", "committedDate": "2020-12-18T10:21:27Z", "message": "Define the any&ReadOnly using ImmutableTypeCloner"}, "afterCommit": {"oid": "d19af047db1f9f7f390a342b8d341b95b4b4d84e", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d19af047db1f9f7f390a342b8d341b95b4b4d84e", "committedDate": "2020-12-18T12:47:47Z", "message": "Define the any&ReadOnly using ImmutableTypeCloner"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDM5Mjkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-556039291", "createdAt": "2020-12-20T18:08:51Z", "commit": {"oid": "d19af047db1f9f7f390a342b8d341b95b4b4d84e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxODowODo1MVrOIJGOrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxODoxMTozNVrOIJGPgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMDE1OA==", "bodyText": "Instead of introducing a TypeKind just for this, I think we can extract the name from the effectiveType of the anyAndReadonly BIntersectionType.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546410158", "createdAt": "2020-12-20T18:08:51Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -269,6 +274,10 @@ private SymbolTable(CompilerContext context) {\n         this.trueType = new BFiniteType(finiteTypeSymbol, new HashSet<>() {{\n             add(trueLiteral);\n         }});\n+        this.anyAndReadonly =\n+                ImmutableTypeCloner.getImmutableIntersectionType((SelectivelyImmutableReferenceType) this.anyType,\n+                        this.symbolTable, names);\n+        initializeType(this.anyAndReadonly, TypeKind.ANYANDREADONLY.typeName(), BUILTIN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19af047db1f9f7f390a342b8d341b95b4b4d84e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMDM3MQ==", "bodyText": "Can't we use this where the symbol table is needed instead of getting it from the context here? This doesn't have to be a global variable anyway, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546410371", "createdAt": "2020-12-20T18:11:35Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -209,6 +213,7 @@ private SymbolTable(CompilerContext context) {\n         context.put(SYM_TABLE_KEY, this);\n \n         this.names = Names.getInstance(context);\n+        this.symbolTable = SymbolTable.getInstance(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d19af047db1f9f7f390a342b8d341b95b4b4d84e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTU4NjU5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-556158659", "createdAt": "2020-12-21T06:40:59Z", "commit": {"oid": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0MTowMFrOIJNy4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzoxMTo0MlrOIJOU4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDExNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (checkedExpr.equivalentErrorTypeList.isEmpty()) {\n          \n          \n            \n                    if (errorTypes.isEmpty()) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546534114", "createdAt": "2020-12-21T06:41:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4660,24 +4666,33 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n             return;\n         }\n \n-        BUnionType unionType = (BUnionType) exprType;\n         // Filter out the list of types which are not equivalent with the error type.\n-        Map<Boolean, List<BType>> resultTypeMap = unionType.getMemberTypes().stream()\n-                .collect(Collectors.groupingBy(memberType -> types.isAssignable(memberType, symTable.errorType)));\n+        List<BType> errorTypes = new ArrayList<>();\n+        List<BType> nonErrorTypes = new ArrayList<>();\n+        for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+            if (memberType.tag == TypeTags.READONLY) {\n+                errorTypes.add(symTable.errorType);\n+                nonErrorTypes.add(symTable.anyAndReadonly);\n+                continue;\n+            }\n+            if (types.isAssignable(memberType, symTable.errorType)) {\n+                errorTypes.add(memberType);\n+                continue;\n+            }\n+            nonErrorTypes.add(memberType);\n+        }\n \n         // This list will be used in the desugar phase\n-        checkedExpr.equivalentErrorTypeList = resultTypeMap.get(true);\n-        if (checkedExpr.equivalentErrorTypeList == null ||\n-                checkedExpr.equivalentErrorTypeList.size() == 0) {\n+        checkedExpr.equivalentErrorTypeList = errorTypes;\n+        if (checkedExpr.equivalentErrorTypeList.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MTcxNg==", "bodyText": "Shouldn't we set the type for the checkedExpr here? In the union path, at L4711 we seems to be calling types.checkType(checkedExpr, actualType, expType);.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546541716", "createdAt": "2020-12-21T07:07:56Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4647,7 +4647,13 @@ private void visitCheckAndCheckPanicExpr(BLangCheckedExpr checkedExpr) {\n         }\n \n         if (exprType.tag != TypeTags.UNION) {\n-            if (types.isAssignable(exprType, symTable.errorType)) {\n+            if (exprType.tag == TypeTags.READONLY) {\n+                checkedExpr.equivalentErrorTypeList = new ArrayList<>(1) {{\n+                    add(symTable.errorType);\n+                }};\n+                resultType = symTable.anyAndReadonly;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MjgxOQ==", "bodyText": "Have we added tests for toBalString and toString for errors?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r546542819", "createdAt": "2020-12-21T07:11:42Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.error/src/main/java/org/ballerinalang/langlib/error/ToBalString.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.error;\n+\n+import io.ballerina.runtime.api.utils.StringUtils;\n+import io.ballerina.runtime.api.values.BError;\n+import io.ballerina.runtime.api.values.BString;\n+\n+/**\n+ * Returns expression style representation of the given value as a String.\n+ *\n+ * @since 2.0.0\n+ */\n+public class ToBalString {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b496ad0b8a950c20a4358ac34fa1c57bd4e4f860"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d34120062e49b3cc430cf31a53b7b457c05089c4", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d34120062e49b3cc430cf31a53b7b457c05089c4", "committedDate": "2020-12-22T16:47:35Z", "message": "Add toString tests"}, "afterCommit": {"oid": "c01024e1537f6e970d4a6cf84c66a49455d1cc73", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c01024e1537f6e970d4a6cf84c66a49455d1cc73", "committedDate": "2020-12-22T17:15:49Z", "message": "Add toString tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c01024e1537f6e970d4a6cf84c66a49455d1cc73", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c01024e1537f6e970d4a6cf84c66a49455d1cc73", "committedDate": "2020-12-22T17:15:49Z", "message": "Add toString tests"}, "afterCommit": {"oid": "3595af9e8ef06bbeeb3117632f5ae6c2c09df11a", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3595af9e8ef06bbeeb3117632f5ae6c2c09df11a", "committedDate": "2020-12-22T17:44:27Z", "message": "Add toString tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3595af9e8ef06bbeeb3117632f5ae6c2c09df11a", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3595af9e8ef06bbeeb3117632f5ae6c2c09df11a", "committedDate": "2020-12-22T17:44:27Z", "message": "Add toString tests"}, "afterCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/01025955a0855b30bb875c29e3e46527c3e44c30", "committedDate": "2021-01-04T03:46:15Z", "message": "Add toString tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwOTM3MTA4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-560937108", "createdAt": "2021-01-04T10:50:09Z", "commit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDo1MDowOVrOINtQ0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDo1NjoyNlrOINtdmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0Mzk4Ng==", "bodyText": "To preserve the previous behvaiour, shouldn't we use checkpanic here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551243986", "createdAt": "2021-01-04T10:50:09Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.stream/src/main/ballerina/internal.bal", "diffHunk": "@@ -35,7 +35,7 @@ class FilterSupport {\n             } else {\n                 var value = nextVal?.value;\n                 function(any|error) returns boolean func = internal:getFilterFunc(self.func);\n-                var filtered = internal:invokeAsExternal(func, value);\n+                var filtered = check internal:invokeAsExternal(func, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0NzI1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    name : \"Name\",\n          \n          \n            \n                    address : {\n          \n          \n            \n                        country : \"Country\",\n          \n          \n            \n                        city : \"City\"\n          \n          \n            \n                    }\n          \n          \n            \n                    name: \"Name\",\n          \n          \n            \n                    address: {\n          \n          \n            \n                        country: \"Country\",\n          \n          \n            \n                        city: \"City\"\n          \n          \n            \n                    }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551247258", "createdAt": "2021-01-04T10:56:26Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/langlib_test_negative.bal", "diffHunk": "@@ -38,6 +38,24 @@ function testEnsureTypeWithUnion1() returns error? {\n     int|string|float[] name = check j.name;\n }\n \n+function testToStringNegative() {\n+    json j = {\n+        name : \"Name\",\n+        address : {\n+            country : \"Country\",\n+            city : \"City\"\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwOTUxOTQz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-560951943", "createdAt": "2021-01-04T11:14:43Z", "commit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxNDo0M1rOINt-KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxNDo0M1rOINt-KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NTU5Mw==", "bodyText": "Here again, to preserve the previous behaviour, we need to use checkpanic? Please check other changes too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551255593", "createdAt": "2021-01-04T11:14:43Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.query/src/main/ballerina/helpers.bal", "diffHunk": "@@ -126,7 +126,7 @@ function toString(stream<Type, error?> strm) returns string {\n function addToTable(stream<Type, error?> strm, table<map<Type>> tbl, error? err) returns table<map<Type>>|error {\n     record {| Type value; |}|error? v = strm.next();\n     while (v is record {| Type value; |}) {\n-        error? e = trap tbl.add(<map<Type>> v.value);\n+        error? e = trap tbl.add(<map<Type>> check v.value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwOTUyODQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-560952845", "createdAt": "2021-01-04T11:16:18Z", "commit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxNjoxOFrOINuBQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0MzowMVrOINuvwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NjM4NQ==", "bodyText": "Do we have negative tests for toBalString?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551256385", "createdAt": "2021-01-04T11:16:18Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/langlib_test_negative.bal", "diffHunk": "@@ -38,6 +38,24 @@ function testEnsureTypeWithUnion1() returns error? {\n     int|string|float[] name = check j.name;\n }\n \n+function testToStringNegative() {\n+    json j = {\n+        name : \"Name\",\n+        address : {\n+            country : \"Country\",\n+            city : \"City\"\n+        }\n+    };\n+\n+    var x1 = j.age.toString();\n+    var x2 = j.address.town.toString();\n+    var x3 = foo().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NzE1Mw==", "bodyText": "Shall we move these assertion to the bal file? Let's move the first 4 assertions in this method too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551257153", "createdAt": "2021-01-04T11:17:58Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibValueTest.java", "diffHunk": "@@ -172,6 +172,10 @@ public void testToString() {\n         assertEquals(array.getRefValue(1).stringValue(), \"4\");\n         assertEquals(array.getRefValue(2).stringValue(), \"4\");\n         assertEquals(array.getRefValue(3).stringValue(), \"4\");\n+        assertEquals(array.getRefValue(4).stringValue(), \"error(\\\"Failed to get account balance\\\",details=true,\" +\n+                \"val1=NaN,val2=\\\"This Error\\\",val3={\\\"x\\\":\\\"AA\\\",\\\"y\\\":Infinity})\");\n+        assertEquals(array.getRefValue(5).stringValue(), \"error FirstError (\\\"Reason1\\\",message=\\\"Test passing error \" +\n+                \"union to a function\\\")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1ODk3Nw==", "bodyText": "I think we can directly assert if result is 14 here, instead of returning -1 just to cause the Java assertion to fail.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551258977", "createdAt": "2021-01-04T11:22:01Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach_error_handling.bal", "diffHunk": "@@ -24,31 +24,28 @@ function testArrayForeachAndTrap() returns int {\n     string[] validArray = [\"2\", \"5\", \"7\"];\n     result = trap convertAndGetSumFromArray(validArray);\n     assertTrue(result is int);\n-    return <int>result;\n-}\n-\n-function testArrayForeachAndPanic() {\n-    string[] invalidArray = [\"2\", \"waruna\", \"7\"];\n-    int result = convertAndGetSumFromArray(invalidArray);\n-    // This line should not be executed.\n-    panic error(ASSERTION_ERROR_REASON,\n-                message = \"Program should be panic before this line\");\n+    if (result is int) {\n+        return result;\n+    }\n+    return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1OTQ4NA==", "bodyText": "Why are we removing this test? We can still have the same test and change the expected exception message to reflect the new error, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551259484", "createdAt": "2021-01-04T11:23:12Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachErrorHandlingTests.java", "diffHunk": "@@ -48,13 +47,4 @@ public void testArrayForeachAndTrap() {\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(((BInteger) returns[0]).intValue(), 14);\n     }\n-\n-    @Test(expectedExceptions = BLangRuntimeException.class, expectedExceptionsMessageRegExp =\n-            \"error: \\\\{ballerina\\\\}TypeCastError \\\\{\\\"message\\\":\\\"incompatible types: 'error' cannot be cast to \" +\n-                    \"'int'\\\"\\\\}\\n\" +\n-                    \"\\tat foreach_error_handling:\\\\$lambda\\\\$_0\\\\(foreach_error_handling.bal:41\\\\)\\n\" +\n-                    \"\\t   foreach_error_handling:\\\\$lambda\\\\$_0\\\\$lambda0\\\\$\\\\(foreach_error_handling.bal:40\\\\)\")\n-    public void testArrayForeachAndPanic() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testArrayForeachAndPanic\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTY3Ng==", "bodyText": "This too we don't need to remove, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551261676", "createdAt": "2021-01-04T11:27:50Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTests.java", "diffHunk": "@@ -94,15 +94,6 @@ public void testJSONBoolean() {\n         Assert.assertEquals(returns[0].stringValue(), result);\n     }\n \n-    @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'map<json>'.*\")\n-    public void testJSONNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2NDMzMQ==", "bodyText": "Why can't we do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                json|error j = jNulldata.name;\n          \n          \n            \n                json j = checkpanic jdata.random;\n          \n      \n    \n    \n  \n\nhere too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551264331", "createdAt": "2021-01-04T11:33:52Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-json-typed-binding-patterns.bal", "diffHunk": "@@ -113,25 +117,29 @@ function testJsonArrayWithType() returns string {\n function testDirectAccessInvalidElementWithoutType() returns string|error {\n     output = \"\";\n \n-    json j =  <json>jdata.random;\n+    json|error j = jNulldata.name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2ODI4OA==", "bodyText": "Can't we just do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (b is float) {\n          \n          \n            \n                    assert(b, 1234.0);\n          \n          \n            \n                }\n          \n          \n            \n                assert(checkpanic b, 1234.0);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551268288", "createdAt": "2021-01-04T11:43:01Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -576,14 +581,20 @@ function testCloneWithTypeNumeric1() {\n     int a = 1234;\n     float|error b = a.cloneWithType(float);\n     assert(b is float, true);\n-    assert(<float> b, 1234.0);\n+\n+    if (b is float) {\n+        assert(b, 1234.0);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 101}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/01025955a0855b30bb875c29e3e46527c3e44c30", "committedDate": "2021-01-04T03:46:15Z", "message": "Add toString tests"}, "afterCommit": {"oid": "9b5de12e5ab9828394d58977746ef8aab86eb464", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b5de12e5ab9828394d58977746ef8aab86eb464", "committedDate": "2021-01-04T13:06:09Z", "message": "Fix review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b5de12e5ab9828394d58977746ef8aab86eb464", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b5de12e5ab9828394d58977746ef8aab86eb464", "committedDate": "2021-01-04T13:06:09Z", "message": "Fix review suggestions"}, "afterCommit": {"oid": "52666698bcaabbb214b48f22abefdd4c6a134e72", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52666698bcaabbb214b48f22abefdd4c6a134e72", "committedDate": "2021-01-05T05:12:21Z", "message": "Fix review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52666698bcaabbb214b48f22abefdd4c6a134e72", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52666698bcaabbb214b48f22abefdd4c6a134e72", "committedDate": "2021-01-05T05:12:21Z", "message": "Fix review suggestions"}, "afterCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4a238d2642cee21b469299738060d559347bd68", "committedDate": "2021-01-05T05:47:56Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNTUyMzI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-561552327", "createdAt": "2021-01-05T06:58:54Z", "commit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjo1ODo1NVrOIOMFQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODowMzozMVrOIONcoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0ODkzMQ==", "bodyText": "Do we need this change? We return false at L284 if mje is an error anyway.\nI think we should leave this as is and change L287 to\njson mj = checkpanic mje;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551748931", "createdAt": "2021-01-05T06:58:55Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -267,7 +278,7 @@ function testMappingJsonNoIntersectionMergeSuccess() returns boolean {\n     json j1 = { one: \"hello\", two: \"world\", three: 1 };\n     map<json> j2 = { x: 12.0, y: \"test value\" };\n \n-    json|error mje = j1.mergeJson(j2);\n+    json mje = checkpanic j1.mergeJson(j2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0OTQwMQ==", "bodyText": "Wouldn't it be better to do\n    json j = checkpanic ss;\n    assert(j.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\nPlease check others too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551749401", "createdAt": "2021-01-05T07:00:24Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -486,25 +499,24 @@ function testCloneWithTypeJsonRec1() {\n     json|error ss = p.cloneWithType(json);\n     assert(ss is json, true);\n \n-    json j = <json> ss;\n-    assert(j.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    if (ss is json) {\n+        assert(ss.toJsonString(), \"{\\\"name\\\":\\\"N\\\", \\\"age\\\":3}\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1MDA4Mw==", "bodyText": "We can keep this test, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551750083", "createdAt": "2021-01-05T07:02:46Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachJSONTests.java", "diffHunk": "@@ -94,15 +94,6 @@ public void testJSONBoolean() {\n         Assert.assertEquals(returns[0].stringValue(), result);\n     }\n \n-    @Test(expectedExceptions = BLangRuntimeException.class,\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'map<json>'.*\")\n-    public void testJSONNull() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTY3Ng=="}, "originalCommit": {"oid": "01025955a0855b30bb875c29e3e46527c3e44c30"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1NDI2NQ==", "bodyText": "The test has changed here, right? Previously we had jdata.random which returned error because jdata doesn't have a random field.\nWhen we do jNulldata.name, jNulldata has a name field so we are testing something else. The name of the test may also be misleading.\nShall we preserve the previous scenario? Please check for the other one using the newly introduced jNulldata variable too. We can remove that once we do so.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551754265", "createdAt": "2021-01-05T07:15:45Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-json-typed-binding-patterns.bal", "diffHunk": "@@ -113,7 +117,7 @@ function testJsonArrayWithType() returns string {\n function testDirectAccessInvalidElementWithoutType() returns string|error {\n     output = \"\";\n \n-    json j =  <json>jdata.random;\n+    json j = checkpanic jNulldata.name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1OTk1Mw==", "bodyText": "Do we need the casts?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                json jp = <json> checkpanic p.cloneWithType(json);\n          \n          \n            \n                Person sameP = <Person> checkpanic jp.cloneWithType(Person);\n          \n          \n            \n                json jp = checkpanic p.cloneWithType(json);\n          \n          \n            \n                Person sameP = checkpanic jp.cloneWithType(Person);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551759953", "createdAt": "2021-01-05T07:33:33Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/taintchecking/propagation/lang-lib-function-negative.bal", "diffHunk": "@@ -28,8 +28,8 @@ function sensitiveF(@untainted Person p) {\n \n function driver() {\n     Person p = getTaintedParson();\n-    json jp = <json> p.cloneWithType(json);\n-    Person sameP = <Person> jp.cloneWithType(Person);\n+    json jp = <json> checkpanic p.cloneWithType(json);\n+    Person sameP = <Person> checkpanic jp.cloneWithType(Person);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTA5Nw==", "bodyText": "Comment is no longer relevant?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551761097", "createdAt": "2021-01-05T07:36:30Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/record_project_closed_rec_equiv/closed_record_equivalency.bal", "diffHunk": "@@ -193,7 +193,7 @@ function testRuntimeEqPublicStructs1 () returns string|error {\n     userPA uA = uFoo;\n \n     // This is a unsafe cast", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTE1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                var uB  = <req2:closedUserPB> checkpanic uA.cloneWithType(req2:closedUserPB);\n          \n          \n            \n                var uB  = checkpanic uA.cloneWithType(req2:closedUserPB);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551761157", "createdAt": "2021-01-05T07:36:39Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/record_project_closed_rec_equiv/closed_record_equivalency.bal", "diffHunk": "@@ -193,7 +193,7 @@ function testRuntimeEqPublicStructs1 () returns string|error {\n     userPA uA = uFoo;\n \n     // This is a unsafe cast\n-    var uB  = <req2:closedUserPB> uA.cloneWithType(req2:closedUserPB);\n+    var uB  = <req2:closedUserPB> checkpanic uA.cloneWithType(req2:closedUserPB);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTI3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                var uB = <userPB> checkpanic uA.cloneWithType(userPB);\n          \n          \n            \n                var uB = checkpanic uA.cloneWithType(userPB);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551761275", "createdAt": "2021-01-05T07:36:49Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/record_project_closed_rec_equiv/closed_record_equivalency.bal", "diffHunk": "@@ -173,7 +173,7 @@ function testRuntimeEqPublicStructsInSamePackage () returns string|error {\n \n     userPA uA = uFoo;\n \n-    var uB = <userPB> uA.cloneWithType(userPB);\n+    var uB = <userPB> checkpanic uA.cloneWithType(userPB);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MTc0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\taddress: <Address> checkpanic m.cloneWithType(Address)\n          \n          \n            \n            \t\t\taddress: checkpanic m.cloneWithType(Address)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551761741", "createdAt": "2021-01-05T07:38:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/simple-query-with-defined-type.bal", "diffHunk": "@@ -422,7 +422,7 @@ function testQueryExprWithTypeConversion() returns Person1[]{\n \t\t\tfirstName: person.firstName,\n \t\t\tlastName: person.lastName,\n \t\t\tdeptAccess: person.deptAccess,\n-\t\t\taddress: <Address> m.cloneWithType(Address)\n+\t\t\taddress: <Address> checkpanic m.cloneWithType(Address)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MjQ3Mw==", "bodyText": "We can keep this test too, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551762473", "createdAt": "2021-01-05T07:40:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/jvm/TypesTest.java", "diffHunk": "@@ -572,12 +572,6 @@ public void testJsonArrayToJsonCasting() {\n         Assert.assertEquals(returns[0].stringValue(), \"[[1, 2, 3], [3, 4, 5], [7, 8, 9]]\");\n     }\n \n-    @Test(expectedExceptions = { BLangRuntimeException.class },\n-            expectedExceptionsMessageRegExp = \".*incompatible types: 'error' cannot be cast to 'string'.*\")\n-    public void testGetFromNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2MzE0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int x = <int> checkpanic ints:fromString(\"15\");\n          \n          \n            \n                int x = checkpanic ints:fromString(\"15\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551763144", "createdAt": "2021-01-05T07:42:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/function-nil-return.bal", "diffHunk": "@@ -127,11 +127,11 @@ function testReturningInMatch() returns string? {\n }\n \n function testReturnsDuringValidCheck() returns error? {\n-    int x = <int>ints:fromString(\"15\");\n+    int x = <int> checkpanic ints:fromString(\"15\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MDYzOQ==", "bodyText": "We are losing the studentOrError is Student3 assertion here, right? Why don't we just do\n    assert(studentOrError is Student3, true);\n    Student3 student = checkpanic studentOrError;\n    assert(student.name, \"Name\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551770639", "createdAt": "2021-01-05T08:01:57Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -895,9 +921,10 @@ function testFromJsonStringWithTypeRecord() {\n     string str = \"{\\\"name\\\":\\\"Name\\\",\\\"age\\\":35}\";\n     Student3|error studentOrError = str.fromJsonStringWithType(Student3);\n \n-    assert(studentOrError is Student3, true);\n-    Student3 student = <Student3> studentOrError;\n-    assert(student.name, \"Name\");\n+    if (studentOrError is Student3) {\n+        Student3 student = <Student3> studentOrError;\n+        assert(student.name, \"Name\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MDg5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                map<anydata> movieMap = checkpanic movie.fromJsonWithType(MapOfAnyData);\n          \n          \n            \n                map<anydata> movieMap2 = <map<anydata>> movieMap;\n          \n          \n            \n                map<anydata> movieMap2 = checkpanic movie.fromJsonWithType(MapOfAnyData);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551770894", "createdAt": "2021-01-05T08:02:32Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -786,15 +812,15 @@ function testFromJsonWithTypeMap() {\n         title: \"Some\",\n         year: 2010\n     };\n-    map<anydata>|error movieMap = movie.fromJsonWithType(MapOfAnyData);\n+    map<anydata> movieMap = checkpanic movie.fromJsonWithType(MapOfAnyData);\n     map<anydata> movieMap2 = <map<anydata>> movieMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MTAwNw==", "bodyText": "Please check other changes in this file too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551771007", "createdAt": "2021-01-05T08:02:51Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -786,15 +812,15 @@ function testFromJsonWithTypeMap() {\n         title: \"Some\",\n         year: 2010\n     };\n-    map<anydata>|error movieMap = movie.fromJsonWithType(MapOfAnyData);\n+    map<anydata> movieMap = checkpanic movie.fromJsonWithType(MapOfAnyData);\n     map<anydata> movieMap2 = <map<anydata>> movieMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MDg5NA=="}, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MTI5Nw==", "bodyText": "Again we are silently ignoring the error. I think we should do\n    xml x11 = checkpanic x1;\n    json|error j = x11.toJson();\n    assert(<json> j, s1);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r551771297", "createdAt": "2021-01-05T08:03:31Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -762,9 +787,10 @@ function testFromJsonWithTypeXML() {\n     string s1 = \"<test>name</test>\";\n     xml|error x1 = s1.fromJsonWithType(xml);\n     assert(x1 is xml, true);\n-    xml x11 = <xml> x1;\n-    json|error j = x11.toJson();\n-    assert(<json> j, s1);\n+    if (x1 is xml) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a238d2642cee21b469299738060d559347bd68"}, "originalPosition": 278}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd858e72b61dd922fd0675420ad016408bf85d2f", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd858e72b61dd922fd0675420ad016408bf85d2f", "committedDate": "2021-01-05T11:42:13Z", "message": "Fix review suggestions on tests"}, "afterCommit": {"oid": "ccac8b2cadb0aad9b4bdf8cb2c99ae360ed2be36", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ccac8b2cadb0aad9b4bdf8cb2c99ae360ed2be36", "committedDate": "2021-01-05T14:50:39Z", "message": "Fix review suggestions on tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c822aea051fdec19896798d092ce18a17ffc6b0", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c822aea051fdec19896798d092ce18a17ffc6b0", "committedDate": "2021-01-05T14:52:42Z", "message": "Remove error from toString and type cast"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f85f088a95ac1748f178e0b24fdb244ae4cdafb4", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f85f088a95ac1748f178e0b24fdb244ae4cdafb4", "committedDate": "2021-01-05T14:52:42Z", "message": "Fix failure tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcfbb57ae9003ab0d389223c2f4fe89a5c931f17", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fcfbb57ae9003ab0d389223c2f4fe89a5c931f17", "committedDate": "2021-01-05T14:52:42Z", "message": "Fix review suggestions and test failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d3ebbdc74b3685ec0d41de11b43501825e48557", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d3ebbdc74b3685ec0d41de11b43501825e48557", "committedDate": "2021-01-05T14:52:42Z", "message": "Fix failure tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d10288e3eb708788c1265bfd96d7e80eb45f1cc", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d10288e3eb708788c1265bfd96d7e80eb45f1cc", "committedDate": "2021-01-05T14:52:42Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7755356fa12b54cc9b2044657940835d04504111", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7755356fa12b54cc9b2044657940835d04504111", "committedDate": "2021-01-05T14:52:42Z", "message": "Define the any&ReadOnly using ImmutableTypeCloner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eec8bc5deb0ec1ce5124ba4f3e273a5bd528fb2", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7eec8bc5deb0ec1ce5124ba4f3e273a5bd528fb2", "committedDate": "2021-01-05T14:52:42Z", "message": "Change anyAndReadOnly type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9de5f20b6237f089f091aef2aa5023f7ee803efd", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9de5f20b6237f089f091aef2aa5023f7ee803efd", "committedDate": "2021-01-05T14:52:42Z", "message": "Add toString tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "068a618cc733233cb8b973ce0db43eff43caccf3", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/068a618cc733233cb8b973ce0db43eff43caccf3", "committedDate": "2021-01-05T14:52:42Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7fc611c22baaa57f260e62c677d3c6db6831ce44", "committedDate": "2021-01-05T14:55:59Z", "message": "Fix review suggestions on tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccac8b2cadb0aad9b4bdf8cb2c99ae360ed2be36", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ccac8b2cadb0aad9b4bdf8cb2c99ae360ed2be36", "committedDate": "2021-01-05T14:50:39Z", "message": "Fix review suggestions on tests"}, "afterCommit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7fc611c22baaa57f260e62c677d3c6db6831ce44", "committedDate": "2021-01-05T14:55:59Z", "message": "Fix review suggestions on tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxOTI0OTAz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-561924903", "createdAt": "2021-01-05T16:12:43Z", "commit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxMjo0M1rOIOdbrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxMjo0M1rOIOdbrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzMzE5Ng==", "bodyText": "We can remove this, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r552033196", "createdAt": "2021-01-05T16:12:43Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/statements/foreach/foreach-json-typed-binding-patterns.bal", "diffHunk": "@@ -10,6 +10,10 @@ json jdata = {\n     ]\n };\n \n+json jNulldata = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxOTM2ODI1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-561936825", "createdAt": "2021-01-05T16:26:22Z", "commit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyNjoyMlrOIOd_Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyNjoyMlrOIOd_Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0MjMzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                string[] a = checkpanic j.fromJsonWithType(StringArray);\n          \n          \n            \n                string[] a2 = <string[]> a;\n          \n          \n            \n                string[] a2 = checkpanic j.fromJsonWithType(StringArray);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r552042339", "createdAt": "2021-01-05T16:26:22Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -786,15 +795,14 @@ function testFromJsonWithTypeMap() {\n         title: \"Some\",\n         year: 2010\n     };\n-    map<anydata>|error movieMap = movie.fromJsonWithType(MapOfAnyData);\n-    map<anydata> movieMap2 = <map<anydata>> movieMap;\n-    assert(movieMap2[\"title\"], \"Some\");\n-    assert(movieMap2[\"year\"], 2010);\n+    map<anydata> movieMap = checkpanic movie.fromJsonWithType(MapOfAnyData);\n+    assert(movieMap[\"title\"], \"Some\");\n+    assert(movieMap[\"year\"], 2010);\n }\n \n function testFromJsonWithTypeStringArray() {\n     json j = [\"Hello\", \"World\"];\n-    string[]|error a = j.fromJsonWithType(StringArray);\n+    string[] a = checkpanic j.fromJsonWithType(StringArray);\n     string[] a2 = <string[]> a;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "originalPosition": 285}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxOTM3Mjg1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-561937285", "createdAt": "2021-01-05T16:26:54Z", "commit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyNjo1NFrOIOeA1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyNjo1NFrOIOeA1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0MjcxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int[] arr = checkpanic j.fromJsonWithType(IntArray);\n          \n          \n            \n                int[] intArr = <int[]> arr;\n          \n          \n            \n                int[] intArr = checkpanic j.fromJsonWithType(IntArray);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r552042710", "createdAt": "2021-01-05T16:26:54Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -810,7 +818,7 @@ type IntArray int[];\n \n function testFromJsonWithTypeIntArray() {\n     json j = [1, 2];\n-    int[]|error arr = j.fromJsonWithType(IntArray);\n+    int[] arr = checkpanic j.fromJsonWithType(IntArray);\n     int[] intArr = <int[]> arr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "originalPosition": 294}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxOTM4NDY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-561938466", "createdAt": "2021-01-05T16:28:15Z", "commit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyODoxNlrOIOeENw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyODoxNlrOIOeENw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0MzU3NQ==", "bodyText": "Shall we just use movieMap and get rid of movieMap2?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#discussion_r552043575", "createdAt": "2021-01-05T16:28:16Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/valuelib_test.bal", "diffHunk": "@@ -908,15 +916,15 @@ function testFromJsonStringWithAmbiguousType() {\n \n function testFromJsonStringWithTypeMap() {\n     string s = \"{\\\"title\\\":\\\"Some\\\",\\\"year\\\":2010}\";\n-    map<anydata>|error movieMap = s.fromJsonStringWithType(MapOfAnyData);\n+    map<anydata> movieMap = checkpanic s.fromJsonStringWithType(MapOfAnyData);\n     map<anydata> movieMap2 = <map<anydata>> movieMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "originalPosition": 329}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxOTQxMTg1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27284#pullrequestreview-561941185", "createdAt": "2021-01-05T16:31:23Z", "commit": {"oid": "7fc611c22baaa57f260e62c677d3c6db6831ce44"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4699, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}